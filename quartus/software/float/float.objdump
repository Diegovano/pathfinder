
float.elf:     file format elf32-littlenios2
float.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800238

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00012ba8 memsz 0x00012ba8 flags r-x
    LOAD off    0x00013bc8 vaddr 0x00812bc8 paddr 0x0081488c align 2**12
         filesz 0x00001cc4 memsz 0x00001cc4 flags rw-
    LOAD off    0x00016550 vaddr 0x00816550 paddr 0x00816550 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001211c  00800238  00800238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000874  00812354  00812354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc4  00812bc8  0081488c  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00816550  00816550  00016550  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008166b0  008166b0  0001588c  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0001588c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001248  00000000  00000000  000158c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000351b6  00000000  00000000  00016b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000cdee  00000000  00000000  0004bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00018b74  00000000  00000000  00058aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00002b70  00000000  00000000  00071620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000052ea  00000000  00000000  00074190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ed1f  00000000  00000000  0007947a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000030  00000000  00000000  0009819c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002560  00000000  00000000  000981d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0009e2ab  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0009e2ae  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009e2b1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009e2b2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009e2b3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009e2b7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009e2bb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0009e2bf  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009e2c8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0009e2d1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0009e2da  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003d  00000000  00000000  0009e2e6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800238 l    d  .text	00000000 .text
00812354 l    d  .rodata	00000000 .rodata
00812bc8 l    d  .rwdata	00000000 .rwdata
00816550 l    d  .bss	00000000 .bss
008166b0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/runsh/Desktop/Main/IC/EIE3/summer/pathfinder/quartus/software/float_bsp//obj/HAL/src/crt0.o
00800280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 DMA.cpp
00000000 l    df *ABS*	00000000 hello_world.cpp
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008054f4 l     F .text	000000c0 __sbprintf
008126c4 l     O .rodata	00000010 blanks.1
008126b4 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00805718 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080738c l     F .text	00000008 __fp_lock
008073a0 l     F .text	00000008 __fp_unlock
008073a8 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00812bc8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00812778 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080aa24 l     F .text	000000f4 __sprint_r.part.0
0080be90 l     F .text	000000c0 __sbprintf
008128ac l     O .rodata	00000010 blanks.1
0081289c l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
0080c2a8 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080e7f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080e90c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080e970 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080ed20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0080ee0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ef74 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f060 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080f240 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00814870 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_write.c
0080f524 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080f664 l     F .text	00000034 alt_dev_reg
00813708 l     O .rwdata	000000a4 dma_0_priv
008137ac l     O .rwdata	0000001c dma_0_tx
008137c8 l     O .rwdata	0000001c dma_0_rx
008137e4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
0080f77c l     F .text	00000034 alt_dma_txchan_reg
0080f7b0 l     F .text	00000034 alt_dma_rxchan_reg
0080f8e0 l     F .text	0000009c alt_avalon_dma_launch_txonly
0080f97c l     F .text	0000009c alt_avalon_dma_launch_rxonly
0080fa18 l     F .text	00000350 alt_avalon_dma_ioctl
008100dc l     F .text	000001c8 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081057c l     F .text	0000020c altera_avalon_jtag_uart_irq
00810788 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00810dcc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00811328 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
0081140c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
0081149c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811750 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
008118a0 l     F .text	0000003c alt_get_errno
008118dc l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081657c g     O .bss	00000004 alt_instruction_exception_handler
00803248 g     F .text	00000018 putchar
0080a030 g     F .text	00000070 _mprec_log10
0080a11c g     F .text	00000060 __any_on
0080c700 g     F .text	00000058 _isatty_r
00812784 g     O .rodata	00000028 __mprec_tinytens
0080f17c g     F .text	0000007c alt_main
00803260 g     F .text	000000cc _puts_r
008165b0 g     O .bss	00000100 alt_irq
0080c84c g     F .text	00000064 _lseek_r
0081488c g       *ABS*	00000000 __flash_rwdata_start
0080dc9c g     F .text	00000080 .hidden __eqdf2
00800710 g     F .text	00000064 _Z12run_dijkstraiii
008166b0 g       *ABS*	00000000 __alt_heap_start
008012a8 g     F .text	00000070 .hidden __floatdidf
0080d054 g     F .text	00000060 _kill_r
00800690 g     F .text	0000004c _Z19read_dijkstra_cacheii
00803208 g     F .text	00000038 printf
0080ca20 g     F .text	0000006c _wcrtomb_r
0080cbc4 g     F .text	00000098 _signal_r
00800480 g     F .text	000000ac _ZN3DMA5checkEv
0080a9c0 g     F .text	0000005c __sseek
008076f0 g     F .text	00000010 __sinit
008102a4 g     F .text	000000b4 alt_avalon_dma_init
0080bf50 g     F .text	00000148 __swbuf_r
0080c758 g     F .text	00000074 _setlocale_r
00807510 g     F .text	00000078 __sfmoreglue
0080f21c g     F .text	00000024 __malloc_unlock
00816578 g     O .bss	00000004 altera_avalon_timer_ts_freq
00808d70 g     F .text	0000012c memmove
008076dc g     F .text	00000014 _cleanup
00808f8c g     F .text	000000a4 _Balloc
008005d4 g     F .text	000000bc _Z24DMA_write_dijkstra_cachefii
0080dd1c g     F .text	000000e8 .hidden __gtdf2
00811cc4 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00808158 g     F .text	00000008 __localeconv_l
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080c6a0 g     F .text	00000060 _fstat_r
0081655c g     O .bss	00000004 errno
0080a938 g     F .text	00000008 __seofread
0081656c g     O .bss	00000004 alt_argv
0081c844 g       *ABS*	00000000 _gp
0080ea68 g     F .text	00000020 getpid
0080f4ac g     F .text	00000078 alt_uncached_malloc
008114d8 g     F .text	00000054 alt_dma_txchan_open
00813588 g     O .rwdata	00000180 alt_fd_list
00800344 g     F .text	00000060 _ZN3DMA3isrEPv
00803240 g     F .text	00000008 _putchar_r
008115f4 g     F .text	00000090 alt_find_dev
00808c70 g     F .text	00000100 memcpy
00807394 g     F .text	0000000c _cleanup_r
00802d64 g     F .text	000000b8 .hidden __floatsidf
00811824 g     F .text	0000007c alt_io_redirect
0080de04 g     F .text	000000e8 .hidden __ltdf2
00812354 g       *ABS*	00000000 __DTOR_END__
0080332c g     F .text	00000010 puts
008116b8 g     F .text	00000098 alt_exception_cause_generated_bad_addr
008003a4 g     F .text	000000dc _ZN3DMA4copyEPvS0_i
00809f8c g     F .text	000000a4 __ratio
0080be74 g     F .text	0000001c __vfiprintf_internal
00810984 g     F .text	00000220 altera_avalon_jtag_uart_read
008031d8 g     F .text	00000030 _printf_r
008030f0 g     F .text	00000064 .hidden __udivsi3
0080ed5c g     F .text	000000b0 isatty
0080cc5c g     F .text	000000c4 _raise_r
0080c16c g     F .text	00000064 __assert_func
0080052c g     F .text	00000054 _ZN3DMA5resetEv
008127d4 g     O .rodata	000000c8 __mprec_tens
00811ea8 g     F .text	00000090 alt_icache_flush
00816558 g     O .bss	00000004 __malloc_top_pad
0080d0b4 g     F .text	00000004 _getpid_r
00808160 g     F .text	0000000c _localeconv_r
008093fc g     F .text	000000b0 __i2b
00807b50 g     F .text	000004c8 __sfvwrite_r
0080cd20 g     F .text	000000bc __sigtramp_r
0080a88c g     F .text	00000058 _sbrk_r
0080c900 g     F .text	00000064 _read_r
00811264 g     F .text	00000078 alt_dcache_flush
00814864 g     O .rwdata	00000004 alt_max_fd
0080c368 g     F .text	00000070 _fclose_r
00807308 g     F .text	00000084 fflush
00816554 g     O .bss	00000004 __malloc_max_sbrked_mem
008006dc g     F .text	00000034 _Z16read_path_vectori
00802eac g     F .text	000000fc .hidden __extendsfdf2
00801318 g     F .text	000008f0 .hidden __adddf3
0080f7e4 g     F .text	000000fc alt_avalon_dma_launch_bidir
00809d20 g     F .text	00000108 __b2d
00811448 g     F .text	00000054 alt_dma_rxchan_open
0080d6d8 g     F .text	000005c4 .hidden __umoddi3
0080f09c g     F .text	000000e0 lseek
00814844 g     O .rwdata	00000004 _global_impure_ptr
0080a328 g     F .text	00000564 _realloc_r
008166b0 g       *ABS*	00000000 __bss_end
0080ec38 g     F .text	000000e8 alt_iic_isr_register
00811bbc g     F .text	00000108 alt_tick
0080d0b8 g     F .text	00000620 .hidden __udivdi3
0080c604 g     F .text	00000024 _fputwc_r
008127ac g     O .rodata	00000028 __mprec_bigtens
008091b0 g     F .text	00000138 __s2b
0080cb50 g     F .text	00000018 abort
00802e1c g     F .text	00000090 .hidden __floatunsidf
00809a40 g     F .text	00000058 __mcmp
00807710 g     F .text	00000014 __fp_lock_all
0080ebec g     F .text	0000004c alt_ic_irq_enabled
00811b18 g     F .text	000000a4 alt_alarm_stop
00816564 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000c8 alt_irq_handler
00813560 g     O .rwdata	00000028 alt_dev_null
00800284 g     F .text	0000005c _ZN3DMAC1Ejj
008112dc g     F .text	0000004c alt_dcache_flush_all
008092e8 g     F .text	00000064 __hi0bits
00802ce4 g     F .text	00000080 .hidden __fixdfsi
0081488c g       *ABS*	00000000 __ram_rwdata_end
0081485c g     O .rwdata	00000008 alt_dev_list
0080ff30 g     F .text	00000074 alt_avalon_dma_space
0080f560 g     F .text	00000104 write
0080a17c g     F .text	000000cc _putc_r
00811110 g     F .text	00000020 alt_timestamp_freq
00812bc8 g       *ABS*	00000000 __ram_rodata_end
0080e9ac g     F .text	000000bc fstat
0080ee48 g     F .text	0000012c kill
0080de04 g     F .text	000000e8 .hidden __ledf2
00809770 g     F .text	00000148 __pow5mult
0080ab30 g     F .text	00001344 ___vfiprintf_internal_r
00803154 g     F .text	0000005c .hidden __umodsi3
008166b0 g       *ABS*	00000000 end
008002e0 g     F .text	00000064 _ZN3DMA7irq_regEjj
008104bc g     F .text	000000c0 altera_avalon_jtag_uart_init
008001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
00812354 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00810e48 g     F .text	00000084 alt_avalon_timer_sc_init
00802fa8 g     F .text	00000054 .hidden __clzsi2
00810ba4 g     F .text	00000228 altera_avalon_jtag_uart_write
00807700 g     F .text	00000004 __sfp_lock_acquire
00808ba0 g     F .text	000000d0 memchr
008033d4 g     F .text	00002104 ___vfprintf_internal_r
00807854 g     F .text	000002fc _free_r
00812a10 g     O .rodata	00000180 _ctype_b
0080c7cc g     F .text	0000000c __locale_mb_cur_max
0080ffa4 g     F .text	00000138 alt_avalon_dma_send
00812234 g     F .text	00000120 __call_exitprocs
0081487c g     O .rwdata	00000008 alt_dma_txchan_list
0081484c g     O .rwdata	00000004 __malloc_sbrk_base
00800238 g     F .text	0000004c _start
00816580 g     O .bss	00000004 _alt_tick_rate
008098b8 g     F .text	00000188 __lshift
00816584 g     O .bss	00000004 _alt_nticks
0080ce98 g     F .text	000000a0 signal
0080f27c g     F .text	00000108 read
0080f6d4 g     F .text	000000a8 alt_sys_init
008121a4 g     F .text	00000090 __register_exitproc
008094ac g     F .text	000002c4 __multiply
00810828 g     F .text	00000068 altera_avalon_jtag_uart_close
008031b0 g     F .text	00000028 .hidden __mulsi3
00812bc8 g       *ABS*	00000000 __ram_rwdata_start
00812354 g       *ABS*	00000000 __ram_rodata_start
00816588 g     O .bss	00000028 __malloc_current_mallinfo
00809e28 g     F .text	00000164 __d2b
00810358 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00811df0 g     F .text	000000b8 alt_get_fd
0080c114 g     F .text	00000058 _close_r
0081212c g     F .text	00000078 memcmp
00810418 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008166b0 g       *ABS*	00000000 __alt_stack_base
00810468 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008055b4 g     F .text	00000164 __swsetup_r
00800580 g     F .text	00000054 _Z20write_dijkstra_cachefii
00801c08 g     F .text	00000930 .hidden __divdf3
00807588 g     F .text	00000154 __sfp
0080a0a0 g     F .text	0000007c __copybits
00812fec g     O .rwdata	00000408 __malloc_av_
0080770c g     F .text	00000004 __sinit_lock_release
00802538 g     F .text	000007ac .hidden __muldf3
0080a8e4 g     F .text	00000054 __sread
00811ce8 g     F .text	00000108 alt_find_file
00811364 g     F .text	000000a8 alt_dev_llist_insert
0080f1f8 g     F .text	00000024 __malloc_lock
0080f3f4 g     F .text	000000b8 sbrk
008072a8 g     F .text	00000060 _fflush_r
0080c1e4 g     F .text	000000c4 _calloc_r
00816550 g       *ABS*	00000000 __bss_start
00808e9c g     F .text	000000f0 memset
00800774 g     F .text	00000b34 main
0080fdb0 g     F .text	00000048 alt_avalon_dma_rx_ioctl
00816570 g     O .bss	00000004 alt_envp
00816550 g     O .bss	00000004 __malloc_max_total_mem
008103b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c098 g     F .text	00000018 __swbuf
0080aa1c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080c3d8 g     F .text	00000070 fclose
00810ecc g     F .text	00000098 alt_timestamp_start
00805938 g     F .text	00001748 _dtoa_r
008083c0 g     F .text	000007e0 _malloc_r
0080cb20 g     F .text	00000030 __ascii_wctomb
00814868 g     O .rwdata	00000004 alt_errno
0080c448 g     F .text	00000020 _fiprintf_r
0080cf38 g     F .text	00000060 _init_signal
00808018 g     F .text	00000098 _fwalk
0080c8b0 g     F .text	0000000c _mbtowc_r
0080a248 g     F .text	000000e0 putc
00802ffc g     F .text	00000080 .hidden __divsi3
00807738 g     F .text	0000011c _malloc_trim_r
00812354 g       *ABS*	00000000 __CTOR_END__
0080c964 g     F .text	000000b8 strcmp
00812354 g       *ABS*	00000000 __flash_rodata_start
00812354 g       *ABS*	00000000 __DTOR_LIST__
0080dc9c g     F .text	00000080 .hidden __nedf2
0080f698 g     F .text	0000003c alt_irq_init
0080f384 g     F .text	00000070 alt_release_fd
00811f80 g     F .text	00000018 memalign
0081256c g     O .rodata	00000100 .hidden __clz_tab
00816560 g     O .bss	00000004 _PathLocale
00811f38 g     F .text	00000014 atexit
0080c0b0 g     F .text	00000064 _write_r
0080c7d8 g     F .text	00000074 setlocale
00814848 g     O .rwdata	00000004 _impure_ptr
00816568 g     O .bss	00000004 alt_argc
00807080 g     F .text	00000228 __sflush_r
00816574 g     O .bss	00000004 altera_avalon_timer_ts_base
00811590 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
0080c8bc g     F .text	00000044 __ascii_mbtowc
00809cc4 g     F .text	0000005c __ulp
00807724 g     F .text	00000014 __fp_unlock_all
00814854 g     O .rwdata	00000008 alt_fs_list
00800284 g     F .text	0000005c _ZN3DMAC2Ejj
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080816c g     F .text	0000000c localeconv
00810f64 g     F .text	000001ac alt_timestamp
00808328 g     F .text	00000098 __swhatbuf_r
0080ea88 g     F .text	00000050 alt_ic_isr_register
0081488c g       *ABS*	00000000 _edata
008166b0 g       *ABS*	00000000 _end
0080c4a0 g     F .text	00000164 __fputwc
00800238 g       *ABS*	00000000 __ram_exceptions_end
00810890 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080eb60 g     F .text	0000008c alt_ic_irq_disable
0080a940 g     F .text	00000080 __swrite
00814850 g     O .rwdata	00000004 __malloc_trim_threshold
00811f4c g     F .text	00000034 exit
0080c468 g     F .text	00000038 fiprintf
0080ca1c g     F .text	00000004 _vfiprintf_r
008080b0 g     F .text	000000a8 _fwalk_reent
00809a98 g     F .text	0000022c __mdiff
0080307c g     F .text	00000074 .hidden __modsi3
00811f98 g     F .text	00000194 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00807704 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0081290c g     O .rodata	00000101 _ctype_
0080e7a0 g     F .text	00000054 .hidden __unorddf2
0080e938 g     F .text	00000038 _exit
00811130 g     F .text	00000134 alt_alarm_start
00808178 g     F .text	000001b0 __smakebuf_r
0080333c g     F .text	00000098 strlen
0080cb68 g     F .text	0000005c _init_signal_r
008119b8 g     F .text	00000160 open
0080dd1c g     F .text	000000e8 .hidden __gedf2
0080c1d0 g     F .text	00000014 __assert
0080ab18 g     F .text	00000018 __sprint_r
00811684 g     F .text	00000034 alt_icache_flush_all
0081486c g     O .rwdata	00000004 alt_priority_mask
0080ead8 g     F .text	00000088 alt_ic_irq_enable
008054d8 g     F .text	0000001c __vfprintf_internal
0080cb14 g     F .text	0000000c _wctomb_r
0080fdf8 g     F .text	00000138 alt_avalon_dma_prepare
0080deec g     F .text	000008b4 .hidden __subdf3
00814874 g     O .rwdata	00000008 alt_dma_rxchan_list
0080934c g     F .text	000000b0 __lo0bits
00814884 g     O .rwdata	00000008 alt_alarm_list
0081152c g     F .text	00000064 _do_ctors
0080cf98 g     F .text	000000bc __sigtramp
0080ca8c g     F .text	00000088 wcrtomb
0080e830 g     F .text	000000dc close
008133f4 g     O .rwdata	0000016c __global_locale
0080efdc g     F .text	00000084 alt_load
0080fd68 g     F .text	00000048 alt_avalon_dma_tx_ioctl
0080c628 g     F .text	00000078 fputwc
0080cddc g     F .text	000000bc raise
00807708 g     F .text	00000004 __sinit_lock_acquire
00809054 g     F .text	0000015c __multadd
00809030 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08408e14 	ori	at,at,568
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001c40 	call	8001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0ffff17 	ldw	r3,-4(fp)
  800130:	e0bffe17 	ldw	r2,-8(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001126 	beq	r2,zero,800180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	e0bffd17 	ldw	r2,-12(fp)
  800140:	100690fa 	slli	r3,r2,3
  800144:	00802074 	movhi	r2,129
  800148:	1885883a 	add	r2,r3,r2
  80014c:	10d96c17 	ldw	r3,26032(r2)
  800150:	e0bffd17 	ldw	r2,-12(fp)
  800154:	100890fa 	slli	r4,r2,3
  800158:	00802074 	movhi	r2,129
  80015c:	2085883a 	add	r2,r4,r2
  800160:	10996d17 	ldw	r2,26036(r2)
  800164:	1009883a 	mov	r4,r2
  800168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  80016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
  800170:	0005313a 	rdctl	r2,ipending
  800174:	e0bffb15 	stw	r2,-20(fp)
  return active;
  800178:	e0bffb17 	ldw	r2,-20(fp)
  80017c:	00000706 	br	80019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
  800180:	e0bffe17 	ldw	r2,-8(fp)
  800184:	1085883a 	add	r2,r2,r2
  800188:	e0bffe15 	stw	r2,-8(fp)
      i++;
  80018c:	e0bffd17 	ldw	r2,-12(fp)
  800190:	10800044 	addi	r2,r2,1
  800194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
  800198:	003fe406 	br	80012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
  80019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  8001a0:	e0bfff17 	ldw	r2,-4(fp)
  8001a4:	103fde1e 	bne	r2,zero,800120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a8:	0001883a 	nop
}
  8001ac:	0001883a 	nop
  8001b0:	e037883a 	mov	sp,fp
  8001b4:	dfc00117 	ldw	ra,4(sp)
  8001b8:	df000017 	ldw	fp,0(sp)
  8001bc:	dec00204 	addi	sp,sp,8
  8001c0:	f800283a 	ret

008001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001c4:	defffb04 	addi	sp,sp,-20
  8001c8:	dfc00415 	stw	ra,16(sp)
  8001cc:	df000315 	stw	fp,12(sp)
  8001d0:	df000304 	addi	fp,sp,12
  8001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001d8:	000531fa 	rdctl	r2,exception
  8001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001e0:	e0bfff17 	ldw	r2,-4(fp)
  8001e4:	1004d0ba 	srli	r2,r2,2
  8001e8:	108007cc 	andi	r2,r2,31
  8001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001f0:	0005333a 	rdctl	r2,badaddr
  8001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f8:	d0a74e17 	ldw	r2,-25288(gp)
  8001fc:	10000726 	beq	r2,zero,80021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800200:	d0a74e17 	ldw	r2,-25288(gp)
  800204:	e0ffff17 	ldw	r3,-4(fp)
  800208:	e1bffe17 	ldw	r6,-8(fp)
  80020c:	e17ffd17 	ldw	r5,-12(fp)
  800210:	1809883a 	mov	r4,r3
  800214:	103ee83a 	callr	r2
  800218:	00000206 	br	800224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800220:	0005883a 	mov	r2,zero
}
  800224:	e037883a 	mov	sp,fp
  800228:	dfc00117 	ldw	ra,4(sp)
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00204 	addi	sp,sp,8
  800234:	f800283a 	ret

Disassembly of section .text:

00800238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800244:	00bffd16 	blt	zero,r2,80023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800248:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800250:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800254:	d6b21114 	ori	gp,gp,51268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800258:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  80025c:	10995414 	ori	r2,r2,25936

    movhi r3, %hi(__bss_end)
  800260:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800264:	18d9ac14 	ori	r3,r3,26288

    beq r2, r3, 1f
  800268:	10c00326 	beq	r2,r3,800278 <_start+0x40>

0:
    stw zero, (r2)
  80026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800274:	10fffd36 	bltu	r2,r3,80026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800278:	080efdc0 	call	80efdc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80027c:	080f17c0 	call	80f17c <alt_main>

00800280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800280:	003fff06 	br	800280 <alt_after_alt_main>

00800284 <_ZN3DMAC1Ejj>:
#include "DMA.h"

DMA::DMA(unsigned int base, unsigned int control)
  800284:	defffb04 	addi	sp,sp,-20
  800288:	dfc00415 	stw	ra,16(sp)
  80028c:	df000315 	stw	fp,12(sp)
  800290:	df000304 	addi	fp,sp,12
  800294:	e13fff15 	stw	r4,-4(fp)
  800298:	e17ffe15 	stw	r5,-8(fp)
  80029c:	e1bffd15 	stw	r6,-12(fp)
:_base{base},
 _control{control}
  8002a0:	e0bfff17 	ldw	r2,-4(fp)
  8002a4:	10000015 	stw	zero,0(r2)
  8002a8:	e0bfff17 	ldw	r2,-4(fp)
  8002ac:	e0fffe17 	ldw	r3,-8(fp)
  8002b0:	10c00115 	stw	r3,4(r2)
  8002b4:	e0bfff17 	ldw	r2,-4(fp)
  8002b8:	e0fffd17 	ldw	r3,-12(fp)
  8002bc:	10c00215 	stw	r3,8(r2)
{
	reset();
  8002c0:	e13fff17 	ldw	r4,-4(fp)
  8002c4:	080052c0 	call	80052c <_ZN3DMA5resetEv>
}
  8002c8:	0001883a 	nop
  8002cc:	e037883a 	mov	sp,fp
  8002d0:	dfc00117 	ldw	ra,4(sp)
  8002d4:	df000017 	ldw	fp,0(sp)
  8002d8:	dec00204 	addi	sp,sp,8
  8002dc:	f800283a 	ret

008002e0 <_ZN3DMA7irq_regEjj>:

int DMA::irq_reg(unsigned int interrupt_controller_id, unsigned int irq)
{
  8002e0:	defffa04 	addi	sp,sp,-24
  8002e4:	dfc00515 	stw	ra,20(sp)
  8002e8:	df000415 	stw	fp,16(sp)
  8002ec:	df000404 	addi	fp,sp,16
  8002f0:	e13fff15 	stw	r4,-4(fp)
  8002f4:	e17ffe15 	stw	r5,-8(fp)
  8002f8:	e1bffd15 	stw	r6,-12(fp)
    if(alt_ic_isr_register(interrupt_controller_id, irq, isr, this, NULL) != 0)
  8002fc:	d8000015 	stw	zero,0(sp)
  800300:	e1ffff17 	ldw	r7,-4(fp)
  800304:	01802034 	movhi	r6,128
  800308:	3180d104 	addi	r6,r6,836
  80030c:	e17ffd17 	ldw	r5,-12(fp)
  800310:	e13ffe17 	ldw	r4,-8(fp)
  800314:	080ea880 	call	80ea88 <alt_ic_isr_register>
  800318:	1004c03a 	cmpne	r2,r2,zero
  80031c:	10803fcc 	andi	r2,r2,255
  800320:	10000226 	beq	r2,zero,80032c <_ZN3DMA7irq_regEjj+0x4c>
    {
       return 1;
  800324:	00800044 	movi	r2,1
  800328:	00000106 	br	800330 <_ZN3DMA7irq_regEjj+0x50>
    }
    return 0;
  80032c:	0005883a 	mov	r2,zero
}
  800330:	e037883a 	mov	sp,fp
  800334:	dfc00117 	ldw	ra,4(sp)
  800338:	df000017 	ldw	fp,0(sp)
  80033c:	dec00204 	addi	sp,sp,8
  800340:	f800283a 	ret

00800344 <_ZN3DMA3isrEPv>:

void DMA::isr(void * context)
{
  800344:	defffc04 	addi	sp,sp,-16
  800348:	dfc00315 	stw	ra,12(sp)
  80034c:	df000215 	stw	fp,8(sp)
  800350:	df000204 	addi	fp,sp,8
  800354:	e13ffe15 	stw	r4,-8(fp)
	DMA* dma = (DMA*)context;
  800358:	e0bffe17 	ldw	r2,-8(fp)
  80035c:	e0bfff15 	stw	r2,-4(fp)
	//printf("DMA COPY COMPLETED\n");
	//dma->check();
	DMA_WR_STATUS(dma->_base, 0);  /*clear the interrupt*/
  800360:	e0bfff17 	ldw	r2,-4(fp)
  800364:	10800117 	ldw	r2,4(r2)
  800368:	0007883a 	mov	r3,zero
  80036c:	10c00035 	stwio	r3,0(r2)
	dma->reset();
  800370:	e13fff17 	ldw	r4,-4(fp)
  800374:	080052c0 	call	80052c <_ZN3DMA5resetEv>
	dma->done++;
  800378:	e0bfff17 	ldw	r2,-4(fp)
  80037c:	10800017 	ldw	r2,0(r2)
  800380:	10c00044 	addi	r3,r2,1
  800384:	e0bfff17 	ldw	r2,-4(fp)
  800388:	10c00015 	stw	r3,0(r2)
}
  80038c:	0001883a 	nop
  800390:	e037883a 	mov	sp,fp
  800394:	dfc00117 	ldw	ra,4(sp)
  800398:	df000017 	ldw	fp,0(sp)
  80039c:	dec00204 	addi	sp,sp,8
  8003a0:	f800283a 	ret

008003a4 <_ZN3DMA4copyEPvS0_i>:

int DMA::copy(void* read_location, void* write_location, int length)
{
  8003a4:	defffb04 	addi	sp,sp,-20
  8003a8:	df000415 	stw	fp,16(sp)
  8003ac:	df000404 	addi	fp,sp,16
  8003b0:	e13fff15 	stw	r4,-4(fp)
  8003b4:	e17ffe15 	stw	r5,-8(fp)
  8003b8:	e1bffd15 	stw	r6,-12(fp)
  8003bc:	e1fffc15 	stw	r7,-16(fp)
	//printf("mem_to_mem_copy initiated\n");

    if((DMA_RD_STATUS(_base) & DMA_BUSY_BIT)==DMA_BUSY_BIT)
  8003c0:	e0bfff17 	ldw	r2,-4(fp)
  8003c4:	10800117 	ldw	r2,4(r2)
  8003c8:	10800037 	ldwio	r2,0(r2)
  8003cc:	1080008c 	andi	r2,r2,2
  8003d0:	108000a0 	cmpeqi	r2,r2,2
  8003d4:	10803fcc 	andi	r2,r2,255
  8003d8:	10000226 	beq	r2,zero,8003e4 <_ZN3DMA4copyEPvS0_i+0x40>
    {
        return 1;
  8003dc:	00800044 	movi	r2,1
  8003e0:	00002306 	br	800470 <_ZN3DMA4copyEPvS0_i+0xcc>
    }

    /*Read buffer address*/
    DMA_WR_READADDR(_base, (unsigned int)read_location);
  8003e4:	e0bfff17 	ldw	r2,-4(fp)
  8003e8:	10800117 	ldw	r2,4(r2)
  8003ec:	10800104 	addi	r2,r2,4
  8003f0:	1007883a 	mov	r3,r2
  8003f4:	e0bffe17 	ldw	r2,-8(fp)
  8003f8:	18800035 	stwio	r2,0(r3)
    /*Write buffer address*/
    DMA_WR_WRITEADDR(_base, (unsigned int)write_location);
  8003fc:	e0bfff17 	ldw	r2,-4(fp)
  800400:	10800117 	ldw	r2,4(r2)
  800404:	10800204 	addi	r2,r2,8
  800408:	1007883a 	mov	r3,r2
  80040c:	e0bffd17 	ldw	r2,-12(fp)
  800410:	18800035 	stwio	r2,0(r3)
    /*Data length size*/
    DMA_WR_LEN(_base, length);
  800414:	e0bfff17 	ldw	r2,-4(fp)
  800418:	10800117 	ldw	r2,4(r2)
  80041c:	10800304 	addi	r2,r2,12
  800420:	1007883a 	mov	r3,r2
  800424:	e0bffc17 	ldw	r2,-16(fp)
  800428:	18800035 	stwio	r2,0(r3)
    /*Control register*/
    DMA_WR_CTRL(_base, _control | DMA_GO_BIT);
  80042c:	e0bfff17 	ldw	r2,-4(fp)
  800430:	10800117 	ldw	r2,4(r2)
  800434:	10800604 	addi	r2,r2,24
  800438:	1007883a 	mov	r3,r2
  80043c:	e0bfff17 	ldw	r2,-4(fp)
  800440:	10800217 	ldw	r2,8(r2)
  800444:	10800214 	ori	r2,r2,8
  800448:	18800035 	stwio	r2,0(r3)

    while(!done);
  80044c:	e0bfff17 	ldw	r2,-4(fp)
  800450:	10800017 	ldw	r2,0(r2)
  800454:	1005003a 	cmpeq	r2,r2,zero
  800458:	10803fcc 	andi	r2,r2,255
  80045c:	10000126 	beq	r2,zero,800464 <_ZN3DMA4copyEPvS0_i+0xc0>
  800460:	003ffa06 	br	80044c <_ZN3DMA4copyEPvS0_i+0xa8>
    done = 0;
  800464:	e0bfff17 	ldw	r2,-4(fp)
  800468:	10000015 	stw	zero,0(r2)

    return 0;
  80046c:	0005883a 	mov	r2,zero
}
  800470:	e037883a 	mov	sp,fp
  800474:	df000017 	ldw	fp,0(sp)
  800478:	dec00104 	addi	sp,sp,4
  80047c:	f800283a 	ret

00800480 <_ZN3DMA5checkEv>:

void DMA::check()
{
  800480:	defffa04 	addi	sp,sp,-24
  800484:	dfc00515 	stw	ra,20(sp)
  800488:	df000415 	stw	fp,16(sp)
  80048c:	df000404 	addi	fp,sp,16
  800490:	e13ffe15 	stw	r4,-8(fp)
	int STATUS_MASK = 0x11111;
  800494:	00800074 	movhi	r2,1
  800498:	10844444 	addi	r2,r2,4369
  80049c:	e0bfff15 	stw	r2,-4(fp)

	printf("readaddress: %x, writeaddress: %x, length: %x, status: %x, control: %x\n",
			IORD_ALTERA_AVALON_DMA_RADDRESS(_base),
  8004a0:	e0bffe17 	ldw	r2,-8(fp)
  8004a4:	10800117 	ldw	r2,4(r2)
  8004a8:	10800104 	addi	r2,r2,4
	printf("readaddress: %x, writeaddress: %x, length: %x, status: %x, control: %x\n",
  8004ac:	11000037 	ldwio	r4,0(r2)
			IORD_ALTERA_AVALON_DMA_WADDRESS(_base),
  8004b0:	e0bffe17 	ldw	r2,-8(fp)
  8004b4:	10800117 	ldw	r2,4(r2)
  8004b8:	10800204 	addi	r2,r2,8
	printf("readaddress: %x, writeaddress: %x, length: %x, status: %x, control: %x\n",
  8004bc:	11400037 	ldwio	r5,0(r2)
			IORD_ALTERA_AVALON_DMA_LENGTH(_base),
  8004c0:	e0bffe17 	ldw	r2,-8(fp)
  8004c4:	10800117 	ldw	r2,4(r2)
  8004c8:	10800304 	addi	r2,r2,12
	printf("readaddress: %x, writeaddress: %x, length: %x, status: %x, control: %x\n",
  8004cc:	11800037 	ldwio	r6,0(r2)
			IORD_ALTERA_AVALON_DMA_STATUS(_base) & STATUS_MASK,
  8004d0:	e0bffe17 	ldw	r2,-8(fp)
  8004d4:	10800117 	ldw	r2,4(r2)
  8004d8:	10c00037 	ldwio	r3,0(r2)
	printf("readaddress: %x, writeaddress: %x, length: %x, status: %x, control: %x\n",
  8004dc:	e0bfff17 	ldw	r2,-4(fp)
  8004e0:	1884703a 	and	r2,r3,r2
			IORD_ALTERA_AVALON_DMA_CONTROL(_base)
  8004e4:	e0fffe17 	ldw	r3,-8(fp)
  8004e8:	18c00117 	ldw	r3,4(r3)
  8004ec:	18c00604 	addi	r3,r3,24
	printf("readaddress: %x, writeaddress: %x, length: %x, status: %x, control: %x\n",
  8004f0:	18c00037 	ldwio	r3,0(r3)
  8004f4:	d8c00115 	stw	r3,4(sp)
  8004f8:	d8800015 	stw	r2,0(sp)
  8004fc:	300f883a 	mov	r7,r6
  800500:	280d883a 	mov	r6,r5
  800504:	200b883a 	mov	r5,r4
  800508:	01002074 	movhi	r4,129
  80050c:	2108d504 	addi	r4,r4,9044
  800510:	08032080 	call	803208 <printf>
			);
}
  800514:	0001883a 	nop
  800518:	e037883a 	mov	sp,fp
  80051c:	dfc00117 	ldw	ra,4(sp)
  800520:	df000017 	ldw	fp,0(sp)
  800524:	dec00204 	addi	sp,sp,8
  800528:	f800283a 	ret

0080052c <_ZN3DMA5resetEv>:

void DMA::reset()
{
  80052c:	defffe04 	addi	sp,sp,-8
  800530:	df000115 	stw	fp,4(sp)
  800534:	df000104 	addi	fp,sp,4
  800538:	e13fff15 	stw	r4,-4(fp)
	//printf("DMA RESET\n");
	IOWR_ALTERA_AVALON_DMA_CONTROL(_base, 0x1 << 12);
  80053c:	e0bfff17 	ldw	r2,-4(fp)
  800540:	10800117 	ldw	r2,4(r2)
  800544:	10800604 	addi	r2,r2,24
  800548:	1007883a 	mov	r3,r2
  80054c:	00840004 	movi	r2,4096
  800550:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_DMA_CONTROL(_base, 0x1 << 12);
  800554:	e0bfff17 	ldw	r2,-4(fp)
  800558:	10800117 	ldw	r2,4(r2)
  80055c:	10800604 	addi	r2,r2,24
  800560:	1007883a 	mov	r3,r2
  800564:	00840004 	movi	r2,4096
  800568:	18800035 	stwio	r2,0(r3)
	//printf("\n");
}
  80056c:	0001883a 	nop
  800570:	e037883a 	mov	sp,fp
  800574:	df000017 	ldw	fp,0(sp)
  800578:	dec00104 	addi	sp,sp,4
  80057c:	f800283a 	ret

00800580 <_Z20write_dijkstra_cachefii>:
#define ALT_CI_DIJKSTRA32_FLOAT_3(n,A,B) __builtin_custom_inii(ALT_CI_DIJKSTRA32_FLOAT_0_N+(n&ALT_CI_DIJKSTRA32_FLOAT_0_N_MASK),(A),(B))
#define ALT_CI_DIJKSTRA32_FLOAT_3_N 0x0
#define ALT_CI_DIJKSTRA32_FLOAT_3_N_MASK ((1<<8)-1)

// macro determines data type of inputs, doing problematic casting
void write_dijkstra_cache(float edge_value, int from_node, int to_node){
  800580:	defffa04 	addi	sp,sp,-24
  800584:	df000515 	stw	fp,20(sp)
  800588:	df000504 	addi	fp,sp,20
  80058c:	e13ffd15 	stw	r4,-12(fp)
  800590:	e17ffc15 	stw	r5,-16(fp)
  800594:	e1bffb15 	stw	r6,-20(fp)
	long dataa = (to_node<<16) + from_node;
  800598:	e0bffb17 	ldw	r2,-20(fp)
  80059c:	1004943a 	slli	r2,r2,16
  8005a0:	e0fffc17 	ldw	r3,-16(fp)
  8005a4:	1885883a 	add	r2,r3,r2
  8005a8:	e0bfff15 	stw	r2,-4(fp)
//	int dummy = 0;
//	memcpy((void*)&dummy, (void*)&edge_value, 4);
	float datab = edge_value;
  8005ac:	e0bffd17 	ldw	r2,-12(fp)
  8005b0:	e0bffe15 	stw	r2,-8(fp)
	ALT_CI_DIJKSTRA32_FLOAT_4(0,dataa,datab);
  8005b4:	e0bfff17 	ldw	r2,-4(fp)
  8005b8:	e0fffe17 	ldw	r3,-8(fp)
  8005bc:	10c5c032 	custom	0,r2,r2,r3
}
  8005c0:	0001883a 	nop
  8005c4:	e037883a 	mov	sp,fp
  8005c8:	df000017 	ldw	fp,0(sp)
  8005cc:	dec00104 	addi	sp,sp,4
  8005d0:	f800283a 	ret

008005d4 <_Z24DMA_write_dijkstra_cachefii>:

//writing single data with DMA
void DMA_write_dijkstra_cache(float edge_value, int from_node, int to_node){
  8005d4:	defff504 	addi	sp,sp,-44
  8005d8:	dfc00a15 	stw	ra,40(sp)
  8005dc:	df000915 	stw	fp,36(sp)
  8005e0:	df000904 	addi	fp,sp,36
  8005e4:	e13ff915 	stw	r4,-28(fp)
  8005e8:	e17ff815 	stw	r5,-32(fp)
  8005ec:	e1bff715 	stw	r6,-36(fp)
	unsigned int ctrl = DMA_IRQ_E_BIT | DMA_LEEN | DMA_WORD;
  8005f0:	00802504 	movi	r2,148
  8005f4:	e0bfff15 	stw	r2,-4(fp)
	  DMA dma(DMA_0_BASE, ctrl);
  8005f8:	e0bffa04 	addi	r2,fp,-24
  8005fc:	e1bfff17 	ldw	r6,-4(fp)
  800600:	01404134 	movhi	r5,260
  800604:	29442004 	addi	r5,r5,4224
  800608:	1009883a 	mov	r4,r2
  80060c:	08002840 	call	800284 <_ZN3DMAC1Ejj>
	  dma.irq_reg(DMA_0_IRQ_INTERRUPT_CONTROLLER_ID, DMA_0_IRQ);
  800610:	e0bffa04 	addi	r2,fp,-24
  800614:	01800184 	movi	r6,6
  800618:	000b883a 	mov	r5,zero
  80061c:	1009883a 	mov	r4,r2
  800620:	08002e00 	call	8002e0 <_ZN3DMA7irq_regEjj>


	float* float_in_ptr = (float*)alt_uncached_malloc(4);
  800624:	01000104 	movi	r4,4
  800628:	080f4ac0 	call	80f4ac <alt_uncached_malloc>
  80062c:	e0bffe15 	stw	r2,-8(fp)
	 *float_in_ptr = edge_value;
  800630:	e0bffe17 	ldw	r2,-8(fp)
  800634:	e0fff917 	ldw	r3,-28(fp)
  800638:	10c00015 	stw	r3,0(r2)
	 unsigned int address = DIJKSTRA32_FLOAT_0_BASE + (to_node << 6) + (from_node << 2);
  80063c:	e0bff717 	ldw	r2,-36(fp)
  800640:	100691ba 	slli	r3,r2,6
  800644:	00804034 	movhi	r2,256
  800648:	1887883a 	add	r3,r3,r2
  80064c:	e0bff817 	ldw	r2,-32(fp)
  800650:	100490ba 	slli	r2,r2,2
  800654:	1885883a 	add	r2,r3,r2
  800658:	e0bffd15 	stw	r2,-12(fp)
	 dma.copy((void*)float_in_ptr, (void*)(address), 4);
  80065c:	e0fffd17 	ldw	r3,-12(fp)
  800660:	e0bffa04 	addi	r2,fp,-24
  800664:	01c00104 	movi	r7,4
  800668:	180d883a 	mov	r6,r3
  80066c:	e17ffe17 	ldw	r5,-8(fp)
  800670:	1009883a 	mov	r4,r2
  800674:	08003a40 	call	8003a4 <_ZN3DMA4copyEPvS0_i>

}
  800678:	0001883a 	nop
  80067c:	e037883a 	mov	sp,fp
  800680:	dfc00117 	ldw	ra,4(sp)
  800684:	df000017 	ldw	fp,0(sp)
  800688:	dec00204 	addi	sp,sp,8
  80068c:	f800283a 	ret

00800690 <_Z19read_dijkstra_cacheii>:

float read_dijkstra_cache(int from_node, int to_node){
  800690:	defffc04 	addi	sp,sp,-16
  800694:	df000315 	stw	fp,12(sp)
  800698:	df000304 	addi	fp,sp,12
  80069c:	e13ffe15 	stw	r4,-8(fp)
  8006a0:	e17ffd15 	stw	r5,-12(fp)
	long dataa = (to_node<<16) + from_node;
  8006a4:	e0bffd17 	ldw	r2,-12(fp)
  8006a8:	1004943a 	slli	r2,r2,16
  8006ac:	e0fffe17 	ldw	r3,-8(fp)
  8006b0:	1885883a 	add	r2,r3,r2
  8006b4:	e0bfff15 	stw	r2,-4(fp)
	return ALT_CI_DIJKSTRA32_FLOAT_1(1,dataa,0);
  8006b8:	e0bfff17 	ldw	r2,-4(fp)
  8006bc:	0007883a 	mov	r3,zero
  8006c0:	10c5c072 	custom	1,r2,r2,r3
  8006c4:	1007883a 	mov	r3,r2
}
  8006c8:	1805883a 	mov	r2,r3
  8006cc:	e037883a 	mov	sp,fp
  8006d0:	df000017 	ldw	fp,0(sp)
  8006d4:	dec00104 	addi	sp,sp,4
  8006d8:	f800283a 	ret

008006dc <_Z16read_path_vectori>:

int read_path_vector(int node){
  8006dc:	defffd04 	addi	sp,sp,-12
  8006e0:	df000215 	stw	fp,8(sp)
  8006e4:	df000204 	addi	fp,sp,8
  8006e8:	e13ffe15 	stw	r4,-8(fp)
	long dataa = node;
  8006ec:	e0bffe17 	ldw	r2,-8(fp)
  8006f0:	e0bfff15 	stw	r2,-4(fp)
	return ALT_CI_DIJKSTRA32_FLOAT_3(3,dataa,0);
  8006f4:	e0bfff17 	ldw	r2,-4(fp)
  8006f8:	0007883a 	mov	r3,zero
  8006fc:	10c5c0f2 	custom	3,r2,r2,r3
}
  800700:	e037883a 	mov	sp,fp
  800704:	df000017 	ldw	fp,0(sp)
  800708:	dec00104 	addi	sp,sp,4
  80070c:	f800283a 	ret

00800710 <_Z12run_dijkstraiii>:

float run_dijkstra (int from_node, int to_node, int number_of_nodes){
  800710:	defffa04 	addi	sp,sp,-24
  800714:	df000515 	stw	fp,20(sp)
  800718:	df000504 	addi	fp,sp,20
  80071c:	e13ffd15 	stw	r4,-12(fp)
  800720:	e17ffc15 	stw	r5,-16(fp)
  800724:	e1bffb15 	stw	r6,-20(fp)
	ALT_CI_DIJKSTRA32_FLOAT_2(2,0,0); //a manual software reset cuz hardware reset buggy
  800728:	0005883a 	mov	r2,zero
  80072c:	0007883a 	mov	r3,zero
  800730:	10c5c0b2 	custom	2,r2,r2,r3
	long dataa = (to_node <<16) + from_node;
  800734:	e0bffc17 	ldw	r2,-16(fp)
  800738:	1004943a 	slli	r2,r2,16
  80073c:	e0fffd17 	ldw	r3,-12(fp)
  800740:	1885883a 	add	r2,r3,r2
  800744:	e0bfff15 	stw	r2,-4(fp)
	long datab = number_of_nodes;
  800748:	e0bffb17 	ldw	r2,-20(fp)
  80074c:	e0bffe15 	stw	r2,-8(fp)
	return ALT_CI_DIJKSTRA32_FLOAT_2(2,dataa,datab);
  800750:	e0bfff17 	ldw	r2,-4(fp)
  800754:	e0fffe17 	ldw	r3,-8(fp)
  800758:	10c5c0b2 	custom	2,r2,r2,r3
  80075c:	1007883a 	mov	r3,r2
}
  800760:	1805883a 	mov	r2,r3
  800764:	e037883a 	mov	sp,fp
  800768:	df000017 	ldw	fp,0(sp)
  80076c:	dec00104 	addi	sp,sp,4
  800770:	f800283a 	ret

00800774 <main>:

int main()
{
  800774:	defed104 	addi	sp,sp,-1212
  800778:	dfc12e15 	stw	ra,1208(sp)
  80077c:	df012d15 	stw	fp,1204(sp)
  800780:	dc412c15 	stw	r17,1200(sp)
  800784:	dc012b15 	stw	r16,1196(sp)
  800788:	df012d04 	addi	fp,sp,1204
  printf("Hello from Nios II!\n");
  80078c:	01002074 	movhi	r4,129
  800790:	2108e704 	addi	r4,r4,9116
  800794:	080332c0 	call	80332c <puts>

  //DMA setup



  for (int row=0; row < 16; row++){
  800798:	e03ffd15 	stw	zero,-12(fp)
  80079c:	e0bffd17 	ldw	r2,-12(fp)
  8007a0:	10800408 	cmpgei	r2,r2,16
  8007a4:	1000181e 	bne	r2,zero,800808 <main+0x94>
	  for (int column=0; column < 16; column++){
  8007a8:	e03ffc15 	stw	zero,-16(fp)
  8007ac:	e0bffc17 	ldw	r2,-16(fp)
  8007b0:	10800408 	cmpgei	r2,r2,16
  8007b4:	1000101e 	bne	r2,zero,8007f8 <main+0x84>
		  if (row == column){
  8007b8:	e0fffd17 	ldw	r3,-12(fp)
  8007bc:	e0bffc17 	ldw	r2,-16(fp)
  8007c0:	1880051e 	bne	r3,r2,8007d8 <main+0x64>
			  DMA_write_dijkstra_cache(0,row, column);
  8007c4:	e1bffc17 	ldw	r6,-16(fp)
  8007c8:	e17ffd17 	ldw	r5,-12(fp)
  8007cc:	0009883a 	mov	r4,zero
  8007d0:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  8007d4:	00000406 	br	8007e8 <main+0x74>
		  }
		  else{
			  DMA_write_dijkstra_cache(0x7F800000,row, column);
  8007d8:	e1bffc17 	ldw	r6,-16(fp)
  8007dc:	e17ffd17 	ldw	r5,-12(fp)
  8007e0:	0113bff4 	movhi	r4,20223
  8007e4:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
	  for (int column=0; column < 16; column++){
  8007e8:	e0bffc17 	ldw	r2,-16(fp)
  8007ec:	10800044 	addi	r2,r2,1
  8007f0:	e0bffc15 	stw	r2,-16(fp)
  8007f4:	003fed06 	br	8007ac <main+0x38>
  for (int row=0; row < 16; row++){
  8007f8:	e0bffd17 	ldw	r2,-12(fp)
  8007fc:	10800044 	addi	r2,r2,1
  800800:	e0bffd15 	stw	r2,-12(fp)
  800804:	003fe506 	br	80079c <main+0x28>
	  }
  }

//  float* float_in_ptr = (float*)alt_uncached_malloc(4);
//  float* float_out_ptr = (float*) alt_uncached_malloc(4);
  write_dijkstra_cache(33.3, 13, 6);
  800808:	01800184 	movi	r6,6
  80080c:	01400344 	movi	r5,13
  800810:	01108174 	movhi	r4,16901
  800814:	210cccc4 	addi	r4,r4,13107
  800818:	08005800 	call	800580 <_Z20write_dijkstra_cachefii>
  printf("Custom instruction read before DMA: %f \n", read_dijkstra_cache(13,6));
  80081c:	01400184 	movi	r5,6
  800820:	01000344 	movi	r4,13
  800824:	08006900 	call	800690 <_Z19read_dijkstra_cacheii>
  800828:	1007883a 	mov	r3,r2
  80082c:	1809883a 	mov	r4,r3
  800830:	0802eac0 	call	802eac <__extendsfdf2>
  800834:	100d883a 	mov	r6,r2
  800838:	180f883a 	mov	r7,r3
  80083c:	300b883a 	mov	r5,r6
  800840:	380d883a 	mov	r6,r7
  800844:	01002074 	movhi	r4,129
  800848:	2108ec04 	addi	r4,r4,9136
  80084c:	08032080 	call	803208 <printf>
//  *float_in_ptr = 24.4;
//  unsigned int node_from = 13;
//  unsigned int node_to = 6;
//  unsigned int address = DIJKSTRA32_FLOAT_0_BASE + (node_to << 10) + (node_from << 2);
//  dma.copy((void*)float_in_ptr, (void*)(address), 4);
  DMA_write_dijkstra_cache(22.4,13,6);
  800850:	01800184 	movi	r6,6
  800854:	01400344 	movi	r5,13
  800858:	01106cf4 	movhi	r4,16819
  80085c:	210cccc4 	addi	r4,r4,13107
  800860:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>


  printf("Custom instruction read after DMA: %f \n", read_dijkstra_cache(13,6));
  800864:	01400184 	movi	r5,6
  800868:	01000344 	movi	r4,13
  80086c:	08006900 	call	800690 <_Z19read_dijkstra_cacheii>
  800870:	1007883a 	mov	r3,r2
  800874:	1809883a 	mov	r4,r3
  800878:	0802eac0 	call	802eac <__extendsfdf2>
  80087c:	100d883a 	mov	r6,r2
  800880:	180f883a 	mov	r7,r3
  800884:	300b883a 	mov	r5,r6
  800888:	380d883a 	mov	r6,r7
  80088c:	01002074 	movhi	r4,129
  800890:	2108f704 	addi	r4,r4,9180
  800894:	08032080 	call	803208 <printf>


  printf("\n writing test matrix \n");
  800898:	01002074 	movhi	r4,129
  80089c:	21090104 	addi	r4,r4,9220
  8008a0:	080332c0 	call	80332c <puts>

  DMA_write_dijkstra_cache(33,13,6);
  8008a4:	01800184 	movi	r6,6
  8008a8:	01400344 	movi	r5,13
  8008ac:	01108134 	movhi	r4,16900
  8008b0:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(53.887, 13, 12);
  8008b4:	01800304 	movi	r6,12
  8008b8:	01400344 	movi	r5,13
  8008bc:	01109634 	movhi	r4,16984
  8008c0:	21231284 	addi	r4,r4,-29622
  8008c4:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(62.337, 1, 11);
  8008c8:	018002c4 	movi	r6,11
  8008cc:	01400044 	movi	r5,1
  8008d0:	01109e74 	movhi	r4,17017
  8008d4:	211645c4 	addi	r4,r4,22807
  8008d8:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(33.73, 1, 12);
  8008dc:	01800304 	movi	r6,12
  8008e0:	01400044 	movi	r5,1
  8008e4:	011081f4 	movhi	r4,16903
  8008e8:	213ae144 	addi	r4,r4,-5243
  8008ec:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(19.803, 2, 12);
  8008f0:	01800304 	movi	r6,12
  8008f4:	01400084 	movi	r5,2
  8008f8:	011067b4 	movhi	r4,16798
  8008fc:	211b22c4 	addi	r4,r4,27787
  800900:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(28.225, 2, 1);
  800904:	01800044 	movi	r6,1
  800908:	01400084 	movi	r5,2
  80090c:	011078b4 	movhi	r4,16866
  800910:	21333344 	addi	r4,r4,-13107
  800914:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(10.796, 3, 8);
  800918:	01800204 	movi	r6,8
  80091c:	014000c4 	movi	r5,3
  800920:	01104b74 	movhi	r4,16685
  800924:	212f1a84 	addi	r4,r4,-17302
  800928:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(154.774, 3, 5);
  80092c:	01800144 	movi	r6,5
  800930:	014000c4 	movi	r5,3
  800934:	0110c6f4 	movhi	r4,17179
  800938:	21318944 	addi	r4,r4,-14811
  80093c:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(122.668, 3, 4);
  800940:	01800104 	movi	r6,4
  800944:	014000c4 	movi	r5,3
  800948:	0110bd74 	movhi	r4,17141
  80094c:	21158104 	addi	r4,r4,22020
  800950:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(122.668, 4, 3);
  800954:	018000c4 	movi	r6,3
  800958:	01400104 	movi	r5,4
  80095c:	0110bd74 	movhi	r4,17141
  800960:	21158104 	addi	r4,r4,22020
  800964:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(154.774, 5, 3);
  800968:	018000c4 	movi	r6,3
  80096c:	01400144 	movi	r5,5
  800970:	0110c6f4 	movhi	r4,17179
  800974:	21318944 	addi	r4,r4,-14811
  800978:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(33.532, 6, 13);
  80097c:	01800344 	movi	r6,13
  800980:	01400184 	movi	r5,6
  800984:	011081b4 	movhi	r4,16902
  800988:	21083144 	addi	r4,r4,8389
  80098c:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(181.396, 6, 10);
  800990:	01800284 	movi	r6,10
  800994:	01400184 	movi	r5,6
  800998:	0110cd74 	movhi	r4,17205
  80099c:	21195804 	addi	r4,r4,25952
  8009a0:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(183.129, 6, 9);
  8009a4:	01800244 	movi	r6,9
  8009a8:	01400184 	movi	r5,6
  8009ac:	0110cdf4 	movhi	r4,17207
  8009b0:	21084184 	addi	r4,r4,8454
  8009b4:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(143.458, 7, 8);
  8009b8:	01800204 	movi	r6,8
  8009bc:	014001c4 	movi	r5,7
  8009c0:	0110c3f4 	movhi	r4,17167
  8009c4:	211d4fc4 	addi	r4,r4,30015
  8009c8:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(41.055, 8, 10);
  8009cc:	01800284 	movi	r6,10
  8009d0:	01400204 	movi	r5,8
  8009d4:	01108934 	movhi	r4,16932
  8009d8:	210e1484 	addi	r4,r4,14418
  8009dc:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(10.796, 8, 3);
  8009e0:	018000c4 	movi	r6,3
  8009e4:	01400204 	movi	r5,8
  8009e8:	01104b74 	movhi	r4,16685
  8009ec:	212f1a84 	addi	r4,r4,-17302
  8009f0:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(143.458, 8, 7);
  8009f4:	018001c4 	movi	r6,7
  8009f8:	01400204 	movi	r5,8
  8009fc:	0110c3f4 	movhi	r4,17167
  800a00:	211d4fc4 	addi	r4,r4,30015
  800a04:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(183.129, 9, 6);
  800a08:	01800184 	movi	r6,6
  800a0c:	01400244 	movi	r5,9
  800a10:	0110cdf4 	movhi	r4,17207
  800a14:	21084184 	addi	r4,r4,8454
  800a18:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(41.055, 10, 8);
  800a1c:	01800204 	movi	r6,8
  800a20:	01400284 	movi	r5,10
  800a24:	01108934 	movhi	r4,16932
  800a28:	210e1484 	addi	r4,r4,14418
  800a2c:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(181.396, 10, 6);
  800a30:	01800184 	movi	r6,6
  800a34:	01400284 	movi	r5,10
  800a38:	0110cd74 	movhi	r4,17205
  800a3c:	21195804 	addi	r4,r4,25952
  800a40:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(62.337, 11, 1);
  800a44:	01800044 	movi	r6,1
  800a48:	014002c4 	movi	r5,11
  800a4c:	01109e74 	movhi	r4,17017
  800a50:	211645c4 	addi	r4,r4,22807
  800a54:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>

  DMA_write_dijkstra_cache(53.887, 12, 13);
  800a58:	01800344 	movi	r6,13
  800a5c:	01400304 	movi	r5,12
  800a60:	01109634 	movhi	r4,16984
  800a64:	21231284 	addi	r4,r4,-29622
  800a68:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>
  DMA_write_dijkstra_cache(19.803, 12, 2);
  800a6c:	01800084 	movi	r6,2
  800a70:	01400304 	movi	r5,12
  800a74:	011067b4 	movhi	r4,16798
  800a78:	211b22c4 	addi	r4,r4,27787
  800a7c:	08005d40 	call	8005d4 <_Z24DMA_write_dijkstra_cachefii>



  for (int row = 0; row <14; row++){
  800a80:	e03ffb15 	stw	zero,-20(fp)
  800a84:	e0bffb17 	ldw	r2,-20(fp)
  800a88:	10800388 	cmpgei	r2,r2,14
  800a8c:	10001b1e 	bne	r2,zero,800afc <main+0x388>
  	  for (int column=0; column <14; column++){
  800a90:	e03ffa15 	stw	zero,-24(fp)
  800a94:	e0bffa17 	ldw	r2,-24(fp)
  800a98:	10800388 	cmpgei	r2,r2,14
  800a9c:	1000111e 	bne	r2,zero,800ae4 <main+0x370>
  		  printf("%f \t", read_dijkstra_cache(row,column));
  800aa0:	e17ffa17 	ldw	r5,-24(fp)
  800aa4:	e13ffb17 	ldw	r4,-20(fp)
  800aa8:	08006900 	call	800690 <_Z19read_dijkstra_cacheii>
  800aac:	1007883a 	mov	r3,r2
  800ab0:	1809883a 	mov	r4,r3
  800ab4:	0802eac0 	call	802eac <__extendsfdf2>
  800ab8:	100d883a 	mov	r6,r2
  800abc:	180f883a 	mov	r7,r3
  800ac0:	300b883a 	mov	r5,r6
  800ac4:	380d883a 	mov	r6,r7
  800ac8:	01002074 	movhi	r4,129
  800acc:	21090704 	addi	r4,r4,9244
  800ad0:	08032080 	call	803208 <printf>
  	  for (int column=0; column <14; column++){
  800ad4:	e0bffa17 	ldw	r2,-24(fp)
  800ad8:	10800044 	addi	r2,r2,1
  800adc:	e0bffa15 	stw	r2,-24(fp)
  800ae0:	003fec06 	br	800a94 <main+0x320>
  	  }
  	  printf("\n");
  800ae4:	01000284 	movi	r4,10
  800ae8:	08032480 	call	803248 <putchar>
  for (int row = 0; row <14; row++){
  800aec:	e0bffb17 	ldw	r2,-20(fp)
  800af0:	10800044 	addi	r2,r2,1
  800af4:	e0bffb15 	stw	r2,-20(fp)
  800af8:	003fe206 	br	800a84 <main+0x310>
  }

  printf("\nshortest distance: %f \n", run_dijkstra(1,5,14));
  800afc:	01800384 	movi	r6,14
  800b00:	01400144 	movi	r5,5
  800b04:	01000044 	movi	r4,1
  800b08:	08007100 	call	800710 <_Z12run_dijkstraiii>
  800b0c:	1007883a 	mov	r3,r2
  800b10:	1809883a 	mov	r4,r3
  800b14:	0802eac0 	call	802eac <__extendsfdf2>
  800b18:	100d883a 	mov	r6,r2
  800b1c:	180f883a 	mov	r7,r3
  800b20:	300b883a 	mov	r5,r6
  800b24:	380d883a 	mov	r6,r7
  800b28:	01002074 	movhi	r4,129
  800b2c:	21090904 	addi	r4,r4,9252
  800b30:	08032080 	call	803208 <printf>
 for (int i=0; i <14; i++){
  800b34:	e03ff915 	stw	zero,-28(fp)
  800b38:	e0bff917 	ldw	r2,-28(fp)
  800b3c:	10800388 	cmpgei	r2,r2,14
  800b40:	10000b1e 	bne	r2,zero,800b70 <main+0x3fc>
	 printf("%d: %d \n",i,read_path_vector(i));
  800b44:	e13ff917 	ldw	r4,-28(fp)
  800b48:	08006dc0 	call	8006dc <_Z16read_path_vectori>
  800b4c:	100d883a 	mov	r6,r2
  800b50:	e17ff917 	ldw	r5,-28(fp)
  800b54:	01002074 	movhi	r4,129
  800b58:	21091004 	addi	r4,r4,9280
  800b5c:	08032080 	call	803208 <printf>
 for (int i=0; i <14; i++){
  800b60:	e0bff917 	ldw	r2,-28(fp)
  800b64:	10800044 	addi	r2,r2,1
  800b68:	e0bff915 	stw	r2,-28(fp)
  800b6c:	003ff206 	br	800b38 <main+0x3c4>



//
 float adjMatrix[16][16];
 for(int i = 0; i<16;i++){
  800b70:	e03ff815 	stw	zero,-32(fp)
  800b74:	e0bff817 	ldw	r2,-32(fp)
  800b78:	10800408 	cmpgei	r2,r2,16
  800b7c:	1000211e 	bne	r2,zero,800c04 <main+0x490>
	 for (int j = 0; j <16 ; j++){
  800b80:	e03ff715 	stw	zero,-36(fp)
  800b84:	e0bff717 	ldw	r2,-36(fp)
  800b88:	10800408 	cmpgei	r2,r2,16
  800b8c:	1000191e 	bne	r2,zero,800bf4 <main+0x480>
		 	if (i==j){
  800b90:	e0fff817 	ldw	r3,-32(fp)
  800b94:	e0bff717 	ldw	r2,-36(fp)
  800b98:	1880091e 	bne	r3,r2,800bc0 <main+0x44c>
		 		adjMatrix[i][j] = 0;
  800b9c:	e0bff817 	ldw	r2,-32(fp)
  800ba0:	1006913a 	slli	r3,r2,4
  800ba4:	e0bff717 	ldw	r2,-36(fp)
  800ba8:	1885883a 	add	r2,r3,r2
  800bac:	100490ba 	slli	r2,r2,2
  800bb0:	e0fffe04 	addi	r3,fp,-8
  800bb4:	1885883a 	add	r2,r3,r2
  800bb8:	103edc15 	stw	zero,-1168(r2)
  800bbc:	00000906 	br	800be4 <main+0x470>
		 	}
		 	else{
		 		adjMatrix[i][j] = 0x7F800000;
  800bc0:	e0bff817 	ldw	r2,-32(fp)
  800bc4:	1006913a 	slli	r3,r2,4
  800bc8:	e0bff717 	ldw	r2,-36(fp)
  800bcc:	1885883a 	add	r2,r3,r2
  800bd0:	100490ba 	slli	r2,r2,2
  800bd4:	e0fffe04 	addi	r3,fp,-8
  800bd8:	1885883a 	add	r2,r3,r2
  800bdc:	00d3bff4 	movhi	r3,20223
  800be0:	10fedc15 	stw	r3,-1168(r2)
	 for (int j = 0; j <16 ; j++){
  800be4:	e0bff717 	ldw	r2,-36(fp)
  800be8:	10800044 	addi	r2,r2,1
  800bec:	e0bff715 	stw	r2,-36(fp)
  800bf0:	003fe406 	br	800b84 <main+0x410>
 for(int i = 0; i<16;i++){
  800bf4:	e0bff817 	ldw	r2,-32(fp)
  800bf8:	10800044 	addi	r2,r2,1
  800bfc:	e0bff815 	stw	r2,-32(fp)
  800c00:	003fdc06 	br	800b74 <main+0x400>
		 	}

		 }
 }
 adjMatrix[13][6] = 33.532;
  800c04:	009081b4 	movhi	r2,16902
  800c08:	10883144 	addi	r2,r2,8389
  800c0c:	e0bfb015 	stw	r2,-320(fp)
  adjMatrix[13][12] = 53.887;
  800c10:	00909634 	movhi	r2,16984
  800c14:	10a31284 	addi	r2,r2,-29622
  800c18:	e0bfb615 	stw	r2,-296(fp)
  adjMatrix[1][11] = 62.337;
  800c1c:	00909e74 	movhi	r2,17017
  800c20:	109645c4 	addi	r2,r2,22807
  800c24:	e0bef515 	stw	r2,-1068(fp)
  adjMatrix[1][12] = 33.73;
  800c28:	009081f4 	movhi	r2,16903
  800c2c:	10bae144 	addi	r2,r2,-5243
  800c30:	e0bef615 	stw	r2,-1064(fp)
  adjMatrix[2][12] = 19.803;
  800c34:	009067b4 	movhi	r2,16798
  800c38:	109b22c4 	addi	r2,r2,27787
  800c3c:	e0bf0615 	stw	r2,-1000(fp)
  adjMatrix[2][1] = 28.225;
  800c40:	009078b4 	movhi	r2,16866
  800c44:	10b33344 	addi	r2,r2,-13107
  800c48:	e0befb15 	stw	r2,-1044(fp)
  adjMatrix[3][8] = 10.796;
  800c4c:	00904b74 	movhi	r2,16685
  800c50:	10af1a84 	addi	r2,r2,-17302
  800c54:	e0bf1215 	stw	r2,-952(fp)
  adjMatrix[3][5] = 154.774;
  800c58:	0090c6f4 	movhi	r2,17179
  800c5c:	10b18944 	addi	r2,r2,-14811
  800c60:	e0bf0f15 	stw	r2,-964(fp)
  adjMatrix[3][4] = 122.668;
  800c64:	0090bd74 	movhi	r2,17141
  800c68:	10958104 	addi	r2,r2,22020
  800c6c:	e0bf0e15 	stw	r2,-968(fp)
  adjMatrix[4][3] = 122.668;
  800c70:	0090bd74 	movhi	r2,17141
  800c74:	10958104 	addi	r2,r2,22020
  800c78:	e0bf1d15 	stw	r2,-908(fp)
  adjMatrix[5][3] = 154.774;
  800c7c:	0090c6f4 	movhi	r2,17179
  800c80:	10b18944 	addi	r2,r2,-14811
  800c84:	e0bf2d15 	stw	r2,-844(fp)
  adjMatrix[6][13] = 33.532;
  800c88:	009081b4 	movhi	r2,16902
  800c8c:	10883144 	addi	r2,r2,8389
  800c90:	e0bf4715 	stw	r2,-740(fp)
  adjMatrix[6][10] = 181.396;
  800c94:	0090cd74 	movhi	r2,17205
  800c98:	10995804 	addi	r2,r2,25952
  800c9c:	e0bf4415 	stw	r2,-752(fp)
  adjMatrix[6][9] = 183.129;
  800ca0:	0090cdf4 	movhi	r2,17207
  800ca4:	10884184 	addi	r2,r2,8454
  800ca8:	e0bf4315 	stw	r2,-756(fp)
  adjMatrix[7][6] = 143.458;
  800cac:	0090c3f4 	movhi	r2,17167
  800cb0:	109d4fc4 	addi	r2,r2,30015
  800cb4:	e0bf5015 	stw	r2,-704(fp)
  adjMatrix[8][10] = 41.055;
  800cb8:	00908934 	movhi	r2,16932
  800cbc:	108e1484 	addi	r2,r2,14418
  800cc0:	e0bf6415 	stw	r2,-624(fp)
  adjMatrix[8][3] = 10.796;
  800cc4:	00904b74 	movhi	r2,16685
  800cc8:	10af1a84 	addi	r2,r2,-17302
  800ccc:	e0bf5d15 	stw	r2,-652(fp)
  adjMatrix[8][7] = 143.458;
  800cd0:	0090c3f4 	movhi	r2,17167
  800cd4:	109d4fc4 	addi	r2,r2,30015
  800cd8:	e0bf6115 	stw	r2,-636(fp)
  adjMatrix[9][6] = 183.129;
  800cdc:	0090cdf4 	movhi	r2,17207
  800ce0:	10884184 	addi	r2,r2,8454
  800ce4:	e0bf7015 	stw	r2,-576(fp)
  adjMatrix[10][8] = 41.055;
  800ce8:	00908934 	movhi	r2,16932
  800cec:	108e1484 	addi	r2,r2,14418
  800cf0:	e0bf8215 	stw	r2,-504(fp)
  adjMatrix[10][6] = 181.396;
  800cf4:	0090cd74 	movhi	r2,17205
  800cf8:	10995804 	addi	r2,r2,25952
  800cfc:	e0bf8015 	stw	r2,-512(fp)
  adjMatrix[11][1] = 62.337;
  800d00:	00909e74 	movhi	r2,17017
  800d04:	109645c4 	addi	r2,r2,22807
  800d08:	e0bf8b15 	stw	r2,-468(fp)
  adjMatrix[12][13] = 53.887;
  800d0c:	00909634 	movhi	r2,16984
  800d10:	10a31284 	addi	r2,r2,-29622
  800d14:	e0bfa715 	stw	r2,-356(fp)
  adjMatrix[12][2] = 19.803;
  800d18:	009067b4 	movhi	r2,16798
  800d1c:	109b22c4 	addi	r2,r2,27787
  800d20:	e0bf9c15 	stw	r2,-400(fp)


//
 float* float_in_ptr = (float*)alt_uncached_malloc(1024);
  800d24:	01010004 	movi	r4,1024
  800d28:	080f4ac0 	call	80f4ac <alt_uncached_malloc>
  800d2c:	e0bfea15 	stw	r2,-88(fp)
 float* temp_pointer = float_in_ptr;
  800d30:	e0bfea17 	ldw	r2,-88(fp)
  800d34:	e0bff615 	stw	r2,-40(fp)
 for(int from = 0; from<16;from++){
  800d38:	e03ff515 	stw	zero,-44(fp)
  800d3c:	e0bff517 	ldw	r2,-44(fp)
  800d40:	10800408 	cmpgei	r2,r2,16
  800d44:	1000191e 	bne	r2,zero,800dac <main+0x638>
	 for (int column = 0; column <16 ; column++){
  800d48:	e03ff415 	stw	zero,-48(fp)
  800d4c:	e0bff417 	ldw	r2,-48(fp)
  800d50:	10800408 	cmpgei	r2,r2,16
  800d54:	1000111e 	bne	r2,zero,800d9c <main+0x628>
		 	 *temp_pointer = adjMatrix[column][from];
  800d58:	e0bff417 	ldw	r2,-48(fp)
  800d5c:	1006913a 	slli	r3,r2,4
  800d60:	e0bff517 	ldw	r2,-44(fp)
  800d64:	1885883a 	add	r2,r3,r2
  800d68:	100490ba 	slli	r2,r2,2
  800d6c:	e0fffe04 	addi	r3,fp,-8
  800d70:	1885883a 	add	r2,r3,r2
  800d74:	10fedc17 	ldw	r3,-1168(r2)
  800d78:	e0bff617 	ldw	r2,-40(fp)
  800d7c:	10c00015 	stw	r3,0(r2)
		 	 temp_pointer++;
  800d80:	e0bff617 	ldw	r2,-40(fp)
  800d84:	10800104 	addi	r2,r2,4
  800d88:	e0bff615 	stw	r2,-40(fp)
	 for (int column = 0; column <16 ; column++){
  800d8c:	e0bff417 	ldw	r2,-48(fp)
  800d90:	10800044 	addi	r2,r2,1
  800d94:	e0bff415 	stw	r2,-48(fp)
  800d98:	003fec06 	br	800d4c <main+0x5d8>
 for(int from = 0; from<16;from++){
  800d9c:	e0bff517 	ldw	r2,-44(fp)
  800da0:	10800044 	addi	r2,r2,1
  800da4:	e0bff515 	stw	r2,-44(fp)
  800da8:	003fe406 	br	800d3c <main+0x5c8>

		 }
 }
 	 unsigned int ctrl = DMA_IRQ_E_BIT | DMA_LEEN | DMA_WORD;
  800dac:	00802504 	movi	r2,148
  800db0:	e0bfe915 	stw	r2,-92(fp)
 	  DMA dma(DMA_0_BASE, ctrl);
  800db4:	e0bed704 	addi	r2,fp,-1188
  800db8:	e1bfe917 	ldw	r6,-92(fp)
  800dbc:	01404134 	movhi	r5,260
  800dc0:	29442004 	addi	r5,r5,4224
  800dc4:	1009883a 	mov	r4,r2
  800dc8:	08002840 	call	800284 <_ZN3DMAC1Ejj>
 	  dma.irq_reg(DMA_0_IRQ_INTERRUPT_CONTROLLER_ID, DMA_0_IRQ);
  800dcc:	e0bed704 	addi	r2,fp,-1188
  800dd0:	01800184 	movi	r6,6
  800dd4:	000b883a 	mov	r5,zero
  800dd8:	1009883a 	mov	r4,r2
  800ddc:	08002e00 	call	8002e0 <_ZN3DMA7irq_regEjj>

 	 unsigned int address = DIJKSTRA32_FLOAT_0_BASE;
  800de0:	00804034 	movhi	r2,256
  800de4:	e0bfe815 	stw	r2,-96(fp)
 	  //write cache with data
 	 dma.copy((void*)float_in_ptr, (void*)(address), 1024);
  800de8:	e0ffe817 	ldw	r3,-96(fp)
  800dec:	e0bed704 	addi	r2,fp,-1188
  800df0:	01c10004 	movi	r7,1024
  800df4:	180d883a 	mov	r6,r3
  800df8:	e17fea17 	ldw	r5,-88(fp)
  800dfc:	1009883a 	mov	r4,r2
  800e00:	08003a40 	call	8003a4 <_ZN3DMA4copyEPvS0_i>
 	 printf("done DMA copying cache\n");
  800e04:	01002074 	movhi	r4,129
  800e08:	21091304 	addi	r4,r4,9292
  800e0c:	080332c0 	call	80332c <puts>

 	for (int row = 0; row <14; row++){
  800e10:	e03ff315 	stw	zero,-52(fp)
  800e14:	e0bff317 	ldw	r2,-52(fp)
  800e18:	10800388 	cmpgei	r2,r2,14
  800e1c:	10001b1e 	bne	r2,zero,800e8c <main+0x718>
 	  	  for (int column=0; column <14; column++){
  800e20:	e03ff215 	stw	zero,-56(fp)
  800e24:	e0bff217 	ldw	r2,-56(fp)
  800e28:	10800388 	cmpgei	r2,r2,14
  800e2c:	1000111e 	bne	r2,zero,800e74 <main+0x700>
 	  		  printf("%f \t", read_dijkstra_cache(row,column));
  800e30:	e17ff217 	ldw	r5,-56(fp)
  800e34:	e13ff317 	ldw	r4,-52(fp)
  800e38:	08006900 	call	800690 <_Z19read_dijkstra_cacheii>
  800e3c:	1007883a 	mov	r3,r2
  800e40:	1809883a 	mov	r4,r3
  800e44:	0802eac0 	call	802eac <__extendsfdf2>
  800e48:	100d883a 	mov	r6,r2
  800e4c:	180f883a 	mov	r7,r3
  800e50:	300b883a 	mov	r5,r6
  800e54:	380d883a 	mov	r6,r7
  800e58:	01002074 	movhi	r4,129
  800e5c:	21090704 	addi	r4,r4,9244
  800e60:	08032080 	call	803208 <printf>
 	  	  for (int column=0; column <14; column++){
  800e64:	e0bff217 	ldw	r2,-56(fp)
  800e68:	10800044 	addi	r2,r2,1
  800e6c:	e0bff215 	stw	r2,-56(fp)
  800e70:	003fec06 	br	800e24 <main+0x6b0>
 	  	  }
 	  	  printf("\n");
  800e74:	01000284 	movi	r4,10
  800e78:	08032480 	call	803248 <putchar>
 	for (int row = 0; row <14; row++){
  800e7c:	e0bff317 	ldw	r2,-52(fp)
  800e80:	10800044 	addi	r2,r2,1
  800e84:	e0bff315 	stw	r2,-52(fp)
  800e88:	003fe206 	br	800e14 <main+0x6a0>
 	  }


	 printf("done reseting cache\n");
  800e8c:	01002074 	movhi	r4,129
  800e90:	21091904 	addi	r4,r4,9316
  800e94:	080332c0 	call	80332c <puts>


	 alt_64 proc_ticks = 0;
  800e98:	e03ff015 	stw	zero,-64(fp)
  800e9c:	e03ff115 	stw	zero,-60(fp)
	 alt_64 cache_ticks = 0;
  800ea0:	e03fee15 	stw	zero,-72(fp)
  800ea4:	e03fef15 	stw	zero,-68(fp)
	 alt_64 total_ticks = 0;
  800ea8:	e03fec15 	stw	zero,-80(fp)
  800eac:	e03fed15 	stw	zero,-76(fp)
	 alt_u64 time1 = 0;
  800eb0:	e03fe615 	stw	zero,-104(fp)
  800eb4:	e03fe715 	stw	zero,-100(fp)
	 alt_u64 time2 = 0;
  800eb8:	e03fe415 	stw	zero,-112(fp)
  800ebc:	e03fe515 	stw	zero,-108(fp)
	 alt_u64 time3 = 0;
  800ec0:	e03fe215 	stw	zero,-120(fp)
  800ec4:	e03fe315 	stw	zero,-116(fp)

    int iterations = 1000;
  800ec8:	0080fa04 	movi	r2,1000
  800ecc:	e0bfe115 	stw	r2,-124(fp)
    // The code that you want to time goes here
    alt_timestamp_start();
  800ed0:	0810ecc0 	call	810ecc <alt_timestamp_start>
    time1 = alt_timestamp(); //
  800ed4:	0810f640 	call	810f64 <alt_timestamp>
  800ed8:	1009883a 	mov	r4,r2
  800edc:	180b883a 	mov	r5,r3
  800ee0:	e13fe615 	stw	r4,-104(fp)
  800ee4:	e17fe715 	stw	r5,-100(fp)
    for (int i=0; i<iterations; i++){
  800ee8:	e03feb15 	stw	zero,-84(fp)
  800eec:	e0ffeb17 	ldw	r3,-84(fp)
  800ef0:	e0bfe117 	ldw	r2,-124(fp)
  800ef4:	1880600e 	bge	r3,r2,801078 <main+0x904>
//
      time1 = alt_timestamp();
  800ef8:	0810f640 	call	810f64 <alt_timestamp>
  800efc:	1009883a 	mov	r4,r2
  800f00:	180b883a 	mov	r5,r3
  800f04:	e13fe615 	stw	r4,-104(fp)
  800f08:	e17fe715 	stw	r5,-100(fp)
      dma.copy((void*)float_in_ptr, (void*)(address), 1024);
  800f0c:	e0ffe817 	ldw	r3,-96(fp)
  800f10:	e0bed704 	addi	r2,fp,-1188
  800f14:	01c10004 	movi	r7,1024
  800f18:	180d883a 	mov	r6,r3
  800f1c:	e17fea17 	ldw	r5,-88(fp)
  800f20:	1009883a 	mov	r4,r2
  800f24:	08003a40 	call	8003a4 <_ZN3DMA4copyEPvS0_i>
  	  time2 = alt_timestamp();
  800f28:	0810f640 	call	810f64 <alt_timestamp>
  800f2c:	1009883a 	mov	r4,r2
  800f30:	180b883a 	mov	r5,r3
  800f34:	e13fe415 	stw	r4,-112(fp)
  800f38:	e17fe515 	stw	r5,-108(fp)
  	  run_dijkstra(1,5,14);
  800f3c:	01800384 	movi	r6,14
  800f40:	01400144 	movi	r5,5
  800f44:	01000044 	movi	r4,1
  800f48:	08007100 	call	800710 <_Z12run_dijkstraiii>
  	  time3 = alt_timestamp();
  800f4c:	0810f640 	call	810f64 <alt_timestamp>
  800f50:	1009883a 	mov	r4,r2
  800f54:	180b883a 	mov	r5,r3
  800f58:	e13fe215 	stw	r4,-120(fp)
  800f5c:	e17fe315 	stw	r5,-116(fp)

  	  proc_ticks += (time3 - time2);
  800f60:	e13fe217 	ldw	r4,-120(fp)
  800f64:	e17fe317 	ldw	r5,-116(fp)
  800f68:	e1bfe417 	ldw	r6,-112(fp)
  800f6c:	e1ffe517 	ldw	r7,-108(fp)
  800f70:	2185c83a 	sub	r2,r4,r6
  800f74:	2091803a 	cmpltu	r8,r4,r2
  800f78:	29c7c83a 	sub	r3,r5,r7
  800f7c:	1a09c83a 	sub	r4,r3,r8
  800f80:	2007883a 	mov	r3,r4
  800f84:	100d883a 	mov	r6,r2
  800f88:	180f883a 	mov	r7,r3
  800f8c:	e13ff017 	ldw	r4,-64(fp)
  800f90:	e17ff117 	ldw	r5,-60(fp)
  800f94:	3105883a 	add	r2,r6,r4
  800f98:	1191803a 	cmpltu	r8,r2,r6
  800f9c:	3947883a 	add	r3,r7,r5
  800fa0:	40c9883a 	add	r4,r8,r3
  800fa4:	2007883a 	mov	r3,r4
  800fa8:	1009883a 	mov	r4,r2
  800fac:	180b883a 	mov	r5,r3
  800fb0:	e13ff015 	stw	r4,-64(fp)
  800fb4:	e17ff115 	stw	r5,-60(fp)
	  cache_ticks += (time2 - time1);
  800fb8:	e13fe417 	ldw	r4,-112(fp)
  800fbc:	e17fe517 	ldw	r5,-108(fp)
  800fc0:	e1bfe617 	ldw	r6,-104(fp)
  800fc4:	e1ffe717 	ldw	r7,-100(fp)
  800fc8:	2185c83a 	sub	r2,r4,r6
  800fcc:	2091803a 	cmpltu	r8,r4,r2
  800fd0:	29c7c83a 	sub	r3,r5,r7
  800fd4:	1a09c83a 	sub	r4,r3,r8
  800fd8:	2007883a 	mov	r3,r4
  800fdc:	100d883a 	mov	r6,r2
  800fe0:	180f883a 	mov	r7,r3
  800fe4:	e13fee17 	ldw	r4,-72(fp)
  800fe8:	e17fef17 	ldw	r5,-68(fp)
  800fec:	3105883a 	add	r2,r6,r4
  800ff0:	1191803a 	cmpltu	r8,r2,r6
  800ff4:	3947883a 	add	r3,r7,r5
  800ff8:	40c9883a 	add	r4,r8,r3
  800ffc:	2007883a 	mov	r3,r4
  801000:	1009883a 	mov	r4,r2
  801004:	180b883a 	mov	r5,r3
  801008:	e13fee15 	stw	r4,-72(fp)
  80100c:	e17fef15 	stw	r5,-68(fp)
	  total_ticks += (time3 - time1);
  801010:	e13fe217 	ldw	r4,-120(fp)
  801014:	e17fe317 	ldw	r5,-116(fp)
  801018:	e1bfe617 	ldw	r6,-104(fp)
  80101c:	e1ffe717 	ldw	r7,-100(fp)
  801020:	2185c83a 	sub	r2,r4,r6
  801024:	2091803a 	cmpltu	r8,r4,r2
  801028:	29c7c83a 	sub	r3,r5,r7
  80102c:	1a09c83a 	sub	r4,r3,r8
  801030:	2007883a 	mov	r3,r4
  801034:	100d883a 	mov	r6,r2
  801038:	180f883a 	mov	r7,r3
  80103c:	e13fec17 	ldw	r4,-80(fp)
  801040:	e17fed17 	ldw	r5,-76(fp)
  801044:	3105883a 	add	r2,r6,r4
  801048:	1191803a 	cmpltu	r8,r2,r6
  80104c:	3947883a 	add	r3,r7,r5
  801050:	40c9883a 	add	r4,r8,r3
  801054:	2007883a 	mov	r3,r4
  801058:	1009883a 	mov	r4,r2
  80105c:	180b883a 	mov	r5,r3
  801060:	e13fec15 	stw	r4,-80(fp)
  801064:	e17fed15 	stw	r5,-76(fp)
    for (int i=0; i<iterations; i++){
  801068:	e0bfeb17 	ldw	r2,-84(fp)
  80106c:	10800044 	addi	r2,r2,1
  801070:	e0bfeb15 	stw	r2,-84(fp)
  801074:	003f9d06 	br	800eec <main+0x778>
    }
    int k = alt_timestamp_freq() * 1e-6 * iterations; // ticks per ms
  801078:	08111100 	call	811110 <alt_timestamp_freq>
  80107c:	1009883a 	mov	r4,r2
  801080:	0802e1c0 	call	802e1c <__floatunsidf>
  801084:	1011883a 	mov	r8,r2
  801088:	1813883a 	mov	r9,r3
  80108c:	01a82db4 	movhi	r6,41142
  801090:	31bb6344 	addi	r6,r6,-4723
  801094:	01cfac74 	movhi	r7,16049
  801098:	39f1bdc4 	addi	r7,r7,-14601
  80109c:	4009883a 	mov	r4,r8
  8010a0:	480b883a 	mov	r5,r9
  8010a4:	08025380 	call	802538 <__muldf3>
  8010a8:	1009883a 	mov	r4,r2
  8010ac:	180b883a 	mov	r5,r3
  8010b0:	2021883a 	mov	r16,r4
  8010b4:	2823883a 	mov	r17,r5
  8010b8:	e13fe117 	ldw	r4,-124(fp)
  8010bc:	0802d640 	call	802d64 <__floatsidf>
  8010c0:	1009883a 	mov	r4,r2
  8010c4:	180b883a 	mov	r5,r3
  8010c8:	200d883a 	mov	r6,r4
  8010cc:	280f883a 	mov	r7,r5
  8010d0:	8009883a 	mov	r4,r16
  8010d4:	880b883a 	mov	r5,r17
  8010d8:	08025380 	call	802538 <__muldf3>
  8010dc:	1009883a 	mov	r4,r2
  8010e0:	180b883a 	mov	r5,r3
  8010e4:	2005883a 	mov	r2,r4
  8010e8:	2807883a 	mov	r3,r5
  8010ec:	1009883a 	mov	r4,r2
  8010f0:	180b883a 	mov	r5,r3
  8010f4:	0802ce40 	call	802ce4 <__fixdfsi>
  8010f8:	e0bfe015 	stw	r2,-128(fp)
    double proc_us = (double)proc_ticks / (double)k;
  8010fc:	e13ff017 	ldw	r4,-64(fp)
  801100:	e17ff117 	ldw	r5,-60(fp)
  801104:	08012a80 	call	8012a8 <__floatdidf>
  801108:	1021883a 	mov	r16,r2
  80110c:	1823883a 	mov	r17,r3
  801110:	e13fe017 	ldw	r4,-128(fp)
  801114:	0802d640 	call	802d64 <__floatsidf>
  801118:	1009883a 	mov	r4,r2
  80111c:	180b883a 	mov	r5,r3
  801120:	200d883a 	mov	r6,r4
  801124:	280f883a 	mov	r7,r5
  801128:	8009883a 	mov	r4,r16
  80112c:	880b883a 	mov	r5,r17
  801130:	0801c080 	call	801c08 <__divdf3>
  801134:	1009883a 	mov	r4,r2
  801138:	180b883a 	mov	r5,r3
  80113c:	e13fde15 	stw	r4,-136(fp)
  801140:	e17fdf15 	stw	r5,-132(fp)
    double total_us = (double)total_ticks / (double)k;
  801144:	e13fec17 	ldw	r4,-80(fp)
  801148:	e17fed17 	ldw	r5,-76(fp)
  80114c:	08012a80 	call	8012a8 <__floatdidf>
  801150:	1021883a 	mov	r16,r2
  801154:	1823883a 	mov	r17,r3
  801158:	e13fe017 	ldw	r4,-128(fp)
  80115c:	0802d640 	call	802d64 <__floatsidf>
  801160:	1009883a 	mov	r4,r2
  801164:	180b883a 	mov	r5,r3
  801168:	200d883a 	mov	r6,r4
  80116c:	280f883a 	mov	r7,r5
  801170:	8009883a 	mov	r4,r16
  801174:	880b883a 	mov	r5,r17
  801178:	0801c080 	call	801c08 <__divdf3>
  80117c:	1009883a 	mov	r4,r2
  801180:	180b883a 	mov	r5,r3
  801184:	e13fdc15 	stw	r4,-144(fp)
  801188:	e17fdd15 	stw	r5,-140(fp)
    double cache_us = (double)cache_ticks / (double)k;
  80118c:	e13fee17 	ldw	r4,-72(fp)
  801190:	e17fef17 	ldw	r5,-68(fp)
  801194:	08012a80 	call	8012a8 <__floatdidf>
  801198:	1021883a 	mov	r16,r2
  80119c:	1823883a 	mov	r17,r3
  8011a0:	e13fe017 	ldw	r4,-128(fp)
  8011a4:	0802d640 	call	802d64 <__floatsidf>
  8011a8:	1009883a 	mov	r4,r2
  8011ac:	180b883a 	mov	r5,r3
  8011b0:	200d883a 	mov	r6,r4
  8011b4:	280f883a 	mov	r7,r5
  8011b8:	8009883a 	mov	r4,r16
  8011bc:	880b883a 	mov	r5,r17
  8011c0:	0801c080 	call	801c08 <__divdf3>
  8011c4:	1009883a 	mov	r4,r2
  8011c8:	180b883a 	mov	r5,r3
  8011cc:	e13fda15 	stw	r4,-152(fp)
  8011d0:	e17fdb15 	stw	r5,-148(fp)

    printf("Profiling Results: %i iteration(s), \nproc_ticks: %lld,\tproc_us: %f\tavg: %f\n",
  8011d4:	e0bfde17 	ldw	r2,-136(fp)
  8011d8:	d8800215 	stw	r2,8(sp)
  8011dc:	e0bfdf17 	ldw	r2,-132(fp)
  8011e0:	d8800315 	stw	r2,12(sp)
  8011e4:	e0bfde17 	ldw	r2,-136(fp)
  8011e8:	d8800015 	stw	r2,0(sp)
  8011ec:	e0bfdf17 	ldw	r2,-132(fp)
  8011f0:	d8800115 	stw	r2,4(sp)
  8011f4:	e1bff017 	ldw	r6,-64(fp)
  8011f8:	e1fff117 	ldw	r7,-60(fp)
  8011fc:	e17fe117 	ldw	r5,-124(fp)
  801200:	01002074 	movhi	r4,129
  801204:	21091e04 	addi	r4,r4,9336
  801208:	08032080 	call	803208 <printf>
  		  iterations, proc_ticks, proc_us, proc_us);
    printf("Profiling Results: %i iteration(s), \ncache_ticks: %lld,\tcache_us: %f\tavg: %f\n",
  80120c:	e0bfda17 	ldw	r2,-152(fp)
  801210:	d8800215 	stw	r2,8(sp)
  801214:	e0bfdb17 	ldw	r2,-148(fp)
  801218:	d8800315 	stw	r2,12(sp)
  80121c:	e0bfda17 	ldw	r2,-152(fp)
  801220:	d8800015 	stw	r2,0(sp)
  801224:	e0bfdb17 	ldw	r2,-148(fp)
  801228:	d8800115 	stw	r2,4(sp)
  80122c:	e1bfee17 	ldw	r6,-72(fp)
  801230:	e1ffef17 	ldw	r7,-68(fp)
  801234:	e17fe117 	ldw	r5,-124(fp)
  801238:	01002074 	movhi	r4,129
  80123c:	21093104 	addi	r4,r4,9412
  801240:	08032080 	call	803208 <printf>
      		  iterations, cache_ticks, cache_us, cache_us);
    printf("Profiling Results: %i iteration(s), \ntotal_ticks: %lld,\ttotal_us: %f\tavg: %f\n",
  801244:	e0bfdc17 	ldw	r2,-144(fp)
  801248:	d8800215 	stw	r2,8(sp)
  80124c:	e0bfdd17 	ldw	r2,-140(fp)
  801250:	d8800315 	stw	r2,12(sp)
  801254:	e0bfdc17 	ldw	r2,-144(fp)
  801258:	d8800015 	stw	r2,0(sp)
  80125c:	e0bfdd17 	ldw	r2,-140(fp)
  801260:	d8800115 	stw	r2,4(sp)
  801264:	e1bff017 	ldw	r6,-64(fp)
  801268:	e1fff117 	ldw	r7,-60(fp)
  80126c:	e17fe117 	ldw	r5,-124(fp)
  801270:	01002074 	movhi	r4,129
  801274:	21094504 	addi	r4,r4,9492
  801278:	08032080 	call	803208 <printf>
      		  iterations, proc_ticks, total_us, total_us);


  printf("done");
  80127c:	01002074 	movhi	r4,129
  801280:	21095904 	addi	r4,r4,9572
  801284:	08032080 	call	803208 <printf>

  return 0;
  801288:	0005883a 	mov	r2,zero
}
  80128c:	e6fffe04 	addi	sp,fp,-8
  801290:	dfc00317 	ldw	ra,12(sp)
  801294:	df000217 	ldw	fp,8(sp)
  801298:	dc400117 	ldw	r17,4(sp)
  80129c:	dc000017 	ldw	r16,0(sp)
  8012a0:	dec00404 	addi	sp,sp,16
  8012a4:	f800283a 	ret

008012a8 <__floatdidf>:
  8012a8:	defffc04 	addi	sp,sp,-16
  8012ac:	dc800215 	stw	r18,8(sp)
  8012b0:	2025883a 	mov	r18,r4
  8012b4:	2809883a 	mov	r4,r5
  8012b8:	dfc00315 	stw	ra,12(sp)
  8012bc:	dc400115 	stw	r17,4(sp)
  8012c0:	dc000015 	stw	r16,0(sp)
  8012c4:	0802d640 	call	802d64 <__floatsidf>
  8012c8:	000d883a 	mov	r6,zero
  8012cc:	01d07c34 	movhi	r7,16880
  8012d0:	180b883a 	mov	r5,r3
  8012d4:	1009883a 	mov	r4,r2
  8012d8:	08025380 	call	802538 <__muldf3>
  8012dc:	9009883a 	mov	r4,r18
  8012e0:	1023883a 	mov	r17,r2
  8012e4:	1821883a 	mov	r16,r3
  8012e8:	0802e1c0 	call	802e1c <__floatunsidf>
  8012ec:	880d883a 	mov	r6,r17
  8012f0:	800f883a 	mov	r7,r16
  8012f4:	1009883a 	mov	r4,r2
  8012f8:	180b883a 	mov	r5,r3
  8012fc:	08013180 	call	801318 <__adddf3>
  801300:	dfc00317 	ldw	ra,12(sp)
  801304:	dc800217 	ldw	r18,8(sp)
  801308:	dc400117 	ldw	r17,4(sp)
  80130c:	dc000017 	ldw	r16,0(sp)
  801310:	dec00404 	addi	sp,sp,16
  801314:	f800283a 	ret

00801318 <__adddf3>:
  801318:	02000434 	movhi	r8,16
  80131c:	423fffc4 	addi	r8,r8,-1
  801320:	2806d53a 	srli	r3,r5,20
  801324:	3804d53a 	srli	r2,r7,20
  801328:	2a14703a 	and	r10,r5,r8
  80132c:	3a12703a 	and	r9,r7,r8
  801330:	280ad7fa 	srli	r5,r5,31
  801334:	501490fa 	slli	r10,r10,3
  801338:	2018d77a 	srli	r12,r4,29
  80133c:	481290fa 	slli	r9,r9,3
  801340:	3016d77a 	srli	r11,r6,29
  801344:	380ed7fa 	srli	r7,r7,31
  801348:	defffb04 	addi	sp,sp,-20
  80134c:	dc800215 	stw	r18,8(sp)
  801350:	dc000015 	stw	r16,0(sp)
  801354:	1c81ffcc 	andi	r18,r3,2047
  801358:	1081ffcc 	andi	r2,r2,2047
  80135c:	dfc00415 	stw	ra,16(sp)
  801360:	dcc00315 	stw	r19,12(sp)
  801364:	dc400115 	stw	r17,4(sp)
  801368:	201c90fa 	slli	r14,r4,3
  80136c:	301a90fa 	slli	r13,r6,3
  801370:	2821883a 	mov	r16,r5
  801374:	6294b03a 	or	r10,r12,r10
  801378:	5a52b03a 	or	r9,r11,r9
  80137c:	9087c83a 	sub	r3,r18,r2
  801380:	29c06126 	beq	r5,r7,801508 <__adddf3+0x1f0>
  801384:	00c0550e 	bge	zero,r3,8014dc <__adddf3+0x1c4>
  801388:	10007326 	beq	r2,zero,801558 <__adddf3+0x240>
  80138c:	9081ffd8 	cmpnei	r2,r18,2047
  801390:	1000bd26 	beq	r2,zero,801688 <__adddf3+0x370>
  801394:	4a402034 	orhi	r9,r9,128
  801398:	18800e48 	cmpgei	r2,r3,57
  80139c:	1000ef1e 	bne	r2,zero,80175c <__adddf3+0x444>
  8013a0:	18800808 	cmpgei	r2,r3,32
  8013a4:	1001321e 	bne	r2,zero,801870 <__adddf3+0x558>
  8013a8:	00800804 	movi	r2,32
  8013ac:	10c5c83a 	sub	r2,r2,r3
  8013b0:	68c8d83a 	srl	r4,r13,r3
  8013b4:	48a2983a 	sll	r17,r9,r2
  8013b8:	689a983a 	sll	r13,r13,r2
  8013bc:	48c6d83a 	srl	r3,r9,r3
  8013c0:	8922b03a 	or	r17,r17,r4
  8013c4:	681ac03a 	cmpne	r13,r13,zero
  8013c8:	8b62b03a 	or	r17,r17,r13
  8013cc:	50d5c83a 	sub	r10,r10,r3
  8013d0:	7463c83a 	sub	r17,r14,r17
  8013d4:	7451803a 	cmpltu	r8,r14,r17
  8013d8:	5211c83a 	sub	r8,r10,r8
  8013dc:	4080202c 	andhi	r2,r8,128
  8013e0:	10008d26 	beq	r2,zero,801618 <__adddf3+0x300>
  8013e4:	02402034 	movhi	r9,128
  8013e8:	4a7fffc4 	addi	r9,r9,-1
  8013ec:	4266703a 	and	r19,r8,r9
  8013f0:	9800b326 	beq	r19,zero,8016c0 <__adddf3+0x3a8>
  8013f4:	9809883a 	mov	r4,r19
  8013f8:	0802fa80 	call	802fa8 <__clzsi2>
  8013fc:	10fffe04 	addi	r3,r2,-8
  801400:	02000804 	movi	r8,32
  801404:	40d1c83a 	sub	r8,r8,r3
  801408:	8a10d83a 	srl	r8,r17,r8
  80140c:	98d2983a 	sll	r9,r19,r3
  801410:	88e2983a 	sll	r17,r17,r3
  801414:	4250b03a 	or	r8,r8,r9
  801418:	1c80b216 	blt	r3,r18,8016e4 <__adddf3+0x3cc>
  80141c:	1c87c83a 	sub	r3,r3,r18
  801420:	19000044 	addi	r4,r3,1
  801424:	20800808 	cmpgei	r2,r4,32
  801428:	10006f1e 	bne	r2,zero,8015e8 <__adddf3+0x2d0>
  80142c:	00800804 	movi	r2,32
  801430:	1105c83a 	sub	r2,r2,r4
  801434:	8906d83a 	srl	r3,r17,r4
  801438:	88a2983a 	sll	r17,r17,r2
  80143c:	4084983a 	sll	r2,r8,r2
  801440:	4110d83a 	srl	r8,r8,r4
  801444:	8822c03a 	cmpne	r17,r17,zero
  801448:	10c4b03a 	or	r2,r2,r3
  80144c:	1462b03a 	or	r17,r2,r17
  801450:	0025883a 	mov	r18,zero
  801454:	888001cc 	andi	r2,r17,7
  801458:	10000726 	beq	r2,zero,801478 <__adddf3+0x160>
  80145c:	888003cc 	andi	r2,r17,15
  801460:	10800120 	cmpeqi	r2,r2,4
  801464:	1000041e 	bne	r2,zero,801478 <__adddf3+0x160>
  801468:	88c00104 	addi	r3,r17,4
  80146c:	1c63803a 	cmpltu	r17,r3,r17
  801470:	4451883a 	add	r8,r8,r17
  801474:	1823883a 	mov	r17,r3
  801478:	4080202c 	andhi	r2,r8,128
  80147c:	10006826 	beq	r2,zero,801620 <__adddf3+0x308>
  801480:	90c00044 	addi	r3,r18,1
  801484:	1881ffe0 	cmpeqi	r2,r3,2047
  801488:	18c1ffcc 	andi	r3,r3,2047
  80148c:	10007a1e 	bne	r2,zero,801678 <__adddf3+0x360>
  801490:	00bfe034 	movhi	r2,65408
  801494:	10bfffc4 	addi	r2,r2,-1
  801498:	4090703a 	and	r8,r8,r2
  80149c:	4004977a 	slli	r2,r8,29
  8014a0:	4010927a 	slli	r8,r8,9
  8014a4:	8822d0fa 	srli	r17,r17,3
  8014a8:	4010d33a 	srli	r8,r8,12
  8014ac:	1444b03a 	or	r2,r2,r17
  8014b0:	1806953a 	slli	r3,r3,20
  8014b4:	802097fa 	slli	r16,r16,31
  8014b8:	1a06b03a 	or	r3,r3,r8
  8014bc:	1c06b03a 	or	r3,r3,r16
  8014c0:	dfc00417 	ldw	ra,16(sp)
  8014c4:	dcc00317 	ldw	r19,12(sp)
  8014c8:	dc800217 	ldw	r18,8(sp)
  8014cc:	dc400117 	ldw	r17,4(sp)
  8014d0:	dc000017 	ldw	r16,0(sp)
  8014d4:	dec00504 	addi	sp,sp,20
  8014d8:	f800283a 	ret
  8014dc:	18002626 	beq	r3,zero,801578 <__adddf3+0x260>
  8014e0:	1487c83a 	sub	r3,r2,r18
  8014e4:	9000ba1e 	bne	r18,zero,8017d0 <__adddf3+0x4b8>
  8014e8:	5388b03a 	or	r4,r10,r14
  8014ec:	20011826 	beq	r4,zero,801950 <__adddf3+0x638>
  8014f0:	193fffc4 	addi	r4,r3,-1
  8014f4:	20015726 	beq	r4,zero,801a54 <__adddf3+0x73c>
  8014f8:	18c1ffd8 	cmpnei	r3,r3,2047
  8014fc:	18013026 	beq	r3,zero,8019c0 <__adddf3+0x6a8>
  801500:	2007883a 	mov	r3,r4
  801504:	0000b506 	br	8017dc <__adddf3+0x4c4>
  801508:	00c07b0e 	bge	zero,r3,8016f8 <__adddf3+0x3e0>
  80150c:	10002e26 	beq	r2,zero,8015c8 <__adddf3+0x2b0>
  801510:	9081ffd8 	cmpnei	r2,r18,2047
  801514:	10005c26 	beq	r2,zero,801688 <__adddf3+0x370>
  801518:	4a402034 	orhi	r9,r9,128
  80151c:	18800e48 	cmpgei	r2,r3,57
  801520:	10004b1e 	bne	r2,zero,801650 <__adddf3+0x338>
  801524:	18800808 	cmpgei	r2,r3,32
  801528:	1000ec26 	beq	r2,zero,8018dc <__adddf3+0x5c4>
  80152c:	1c7ff804 	addi	r17,r3,-32
  801530:	19000820 	cmpeqi	r4,r3,32
  801534:	4c44d83a 	srl	r2,r9,r17
  801538:	2000041e 	bne	r4,zero,80154c <__adddf3+0x234>
  80153c:	01001004 	movi	r4,64
  801540:	20c7c83a 	sub	r3,r4,r3
  801544:	48d2983a 	sll	r9,r9,r3
  801548:	6a5ab03a 	or	r13,r13,r9
  80154c:	6822c03a 	cmpne	r17,r13,zero
  801550:	88a2b03a 	or	r17,r17,r2
  801554:	00004006 	br	801658 <__adddf3+0x340>
  801558:	4b44b03a 	or	r2,r9,r13
  80155c:	10008226 	beq	r2,zero,801768 <__adddf3+0x450>
  801560:	18bfffc4 	addi	r2,r3,-1
  801564:	10011026 	beq	r2,zero,8019a8 <__adddf3+0x690>
  801568:	18c1ffd8 	cmpnei	r3,r3,2047
  80156c:	18004626 	beq	r3,zero,801688 <__adddf3+0x370>
  801570:	1007883a 	mov	r3,r2
  801574:	003f8806 	br	801398 <__adddf3+0x80>
  801578:	90800044 	addi	r2,r18,1
  80157c:	1081ff8c 	andi	r2,r2,2046
  801580:	1000a51e 	bne	r2,zero,801818 <__adddf3+0x500>
  801584:	538ab03a 	or	r5,r10,r14
  801588:	4b44b03a 	or	r2,r9,r13
  80158c:	9000f81e 	bne	r18,zero,801970 <__adddf3+0x658>
  801590:	28013726 	beq	r5,zero,801a70 <__adddf3+0x758>
  801594:	10011226 	beq	r2,zero,8019e0 <__adddf3+0x6c8>
  801598:	7363c83a 	sub	r17,r14,r13
  80159c:	7445803a 	cmpltu	r2,r14,r17
  8015a0:	5251c83a 	sub	r8,r10,r9
  8015a4:	4091c83a 	sub	r8,r8,r2
  8015a8:	4080202c 	andhi	r2,r8,128
  8015ac:	10018f26 	beq	r2,zero,801bec <__adddf3+0x8d4>
  8015b0:	6ba3c83a 	sub	r17,r13,r14
  8015b4:	4a95c83a 	sub	r10,r9,r10
  8015b8:	6c51803a 	cmpltu	r8,r13,r17
  8015bc:	5211c83a 	sub	r8,r10,r8
  8015c0:	3821883a 	mov	r16,r7
  8015c4:	003fa306 	br	801454 <__adddf3+0x13c>
  8015c8:	4b44b03a 	or	r2,r9,r13
  8015cc:	10006626 	beq	r2,zero,801768 <__adddf3+0x450>
  8015d0:	18bfffc4 	addi	r2,r3,-1
  8015d4:	1000ec26 	beq	r2,zero,801988 <__adddf3+0x670>
  8015d8:	18c1ffd8 	cmpnei	r3,r3,2047
  8015dc:	18012d26 	beq	r3,zero,801a94 <__adddf3+0x77c>
  8015e0:	1007883a 	mov	r3,r2
  8015e4:	003fcd06 	br	80151c <__adddf3+0x204>
  8015e8:	18fff844 	addi	r3,r3,-31
  8015ec:	20800820 	cmpeqi	r2,r4,32
  8015f0:	40c6d83a 	srl	r3,r8,r3
  8015f4:	1000041e 	bne	r2,zero,801608 <__adddf3+0x2f0>
  8015f8:	00801004 	movi	r2,64
  8015fc:	1109c83a 	sub	r4,r2,r4
  801600:	4110983a 	sll	r8,r8,r4
  801604:	8a22b03a 	or	r17,r17,r8
  801608:	8822c03a 	cmpne	r17,r17,zero
  80160c:	88e2b03a 	or	r17,r17,r3
  801610:	0011883a 	mov	r8,zero
  801614:	0025883a 	mov	r18,zero
  801618:	888001cc 	andi	r2,r17,7
  80161c:	103f8f1e 	bne	r2,zero,80145c <__adddf3+0x144>
  801620:	8822d0fa 	srli	r17,r17,3
  801624:	4004977a 	slli	r2,r8,29
  801628:	4014d0fa 	srli	r10,r8,3
  80162c:	9007883a 	mov	r3,r18
  801630:	8884b03a 	or	r2,r17,r2
  801634:	1901ffe0 	cmpeqi	r4,r3,2047
  801638:	2000191e 	bne	r4,zero,8016a0 <__adddf3+0x388>
  80163c:	02000434 	movhi	r8,16
  801640:	423fffc4 	addi	r8,r8,-1
  801644:	5210703a 	and	r8,r10,r8
  801648:	18c1ffcc 	andi	r3,r3,2047
  80164c:	003f9806 	br	8014b0 <__adddf3+0x198>
  801650:	4b62b03a 	or	r17,r9,r13
  801654:	8822c03a 	cmpne	r17,r17,zero
  801658:	8ba3883a 	add	r17,r17,r14
  80165c:	8b91803a 	cmpltu	r8,r17,r14
  801660:	4291883a 	add	r8,r8,r10
  801664:	4080202c 	andhi	r2,r8,128
  801668:	103feb26 	beq	r2,zero,801618 <__adddf3+0x300>
  80166c:	94800044 	addi	r18,r18,1
  801670:	9081ffe0 	cmpeqi	r2,r18,2047
  801674:	10007426 	beq	r2,zero,801848 <__adddf3+0x530>
  801678:	00c1ffc4 	movi	r3,2047
  80167c:	0011883a 	mov	r8,zero
  801680:	0005883a 	mov	r2,zero
  801684:	003f8a06 	br	8014b0 <__adddf3+0x198>
  801688:	500a977a 	slli	r5,r10,29
  80168c:	00c80034 	movhi	r3,8192
  801690:	18ffffc4 	addi	r3,r3,-1
  801694:	5014d0fa 	srli	r10,r10,3
  801698:	20c4703a 	and	r2,r4,r3
  80169c:	1144b03a 	or	r2,r2,r5
  8016a0:	1286b03a 	or	r3,r2,r10
  8016a4:	18015426 	beq	r3,zero,801bf8 <__adddf3+0x8e0>
  8016a8:	00c00434 	movhi	r3,16
  8016ac:	18ffffc4 	addi	r3,r3,-1
  8016b0:	52000234 	orhi	r8,r10,8
  8016b4:	40d0703a 	and	r8,r8,r3
  8016b8:	00c1ffc4 	movi	r3,2047
  8016bc:	003f7c06 	br	8014b0 <__adddf3+0x198>
  8016c0:	8809883a 	mov	r4,r17
  8016c4:	0802fa80 	call	802fa8 <__clzsi2>
  8016c8:	10c00604 	addi	r3,r2,24
  8016cc:	19000808 	cmpgei	r4,r3,32
  8016d0:	203f4b26 	beq	r4,zero,801400 <__adddf3+0xe8>
  8016d4:	123ffe04 	addi	r8,r2,-8
  8016d8:	8a10983a 	sll	r8,r17,r8
  8016dc:	0023883a 	mov	r17,zero
  8016e0:	1cbf4e0e 	bge	r3,r18,80141c <__adddf3+0x104>
  8016e4:	00bfe034 	movhi	r2,65408
  8016e8:	10bfffc4 	addi	r2,r2,-1
  8016ec:	90e5c83a 	sub	r18,r18,r3
  8016f0:	4090703a 	and	r8,r8,r2
  8016f4:	003f5706 	br	801454 <__adddf3+0x13c>
  8016f8:	18002226 	beq	r3,zero,801784 <__adddf3+0x46c>
  8016fc:	1487c83a 	sub	r3,r2,r18
  801700:	90006e26 	beq	r18,zero,8018bc <__adddf3+0x5a4>
  801704:	1101ffd8 	cmpnei	r4,r2,2047
  801708:	2000e926 	beq	r4,zero,801ab0 <__adddf3+0x798>
  80170c:	52802034 	orhi	r10,r10,128
  801710:	19000e48 	cmpgei	r4,r3,57
  801714:	2000b91e 	bne	r4,zero,8019fc <__adddf3+0x6e4>
  801718:	19000808 	cmpgei	r4,r3,32
  80171c:	2001101e 	bne	r4,zero,801b60 <__adddf3+0x848>
  801720:	01000804 	movi	r4,32
  801724:	20c9c83a 	sub	r4,r4,r3
  801728:	5122983a 	sll	r17,r10,r4
  80172c:	70cad83a 	srl	r5,r14,r3
  801730:	7108983a 	sll	r4,r14,r4
  801734:	50d4d83a 	srl	r10,r10,r3
  801738:	8962b03a 	or	r17,r17,r5
  80173c:	2008c03a 	cmpne	r4,r4,zero
  801740:	8922b03a 	or	r17,r17,r4
  801744:	4a93883a 	add	r9,r9,r10
  801748:	8b63883a 	add	r17,r17,r13
  80174c:	8b51803a 	cmpltu	r8,r17,r13
  801750:	4251883a 	add	r8,r8,r9
  801754:	1025883a 	mov	r18,r2
  801758:	003fc206 	br	801664 <__adddf3+0x34c>
  80175c:	4b62b03a 	or	r17,r9,r13
  801760:	8822c03a 	cmpne	r17,r17,zero
  801764:	003f1a06 	br	8013d0 <__adddf3+0xb8>
  801768:	500c977a 	slli	r6,r10,29
  80176c:	01480034 	movhi	r5,8192
  801770:	297fffc4 	addi	r5,r5,-1
  801774:	2144703a 	and	r2,r4,r5
  801778:	5014d0fa 	srli	r10,r10,3
  80177c:	1184b03a 	or	r2,r2,r6
  801780:	003fac06 	br	801634 <__adddf3+0x31c>
  801784:	90800044 	addi	r2,r18,1
  801788:	1141ff8c 	andi	r5,r2,2046
  80178c:	28005e1e 	bne	r5,zero,801908 <__adddf3+0x5f0>
  801790:	5384b03a 	or	r2,r10,r14
  801794:	9000a71e 	bne	r18,zero,801a34 <__adddf3+0x71c>
  801798:	1000e526 	beq	r2,zero,801b30 <__adddf3+0x818>
  80179c:	4b44b03a 	or	r2,r9,r13
  8017a0:	10008f26 	beq	r2,zero,8019e0 <__adddf3+0x6c8>
  8017a4:	7363883a 	add	r17,r14,r13
  8017a8:	5255883a 	add	r10,r10,r9
  8017ac:	8b91803a 	cmpltu	r8,r17,r14
  8017b0:	5211883a 	add	r8,r10,r8
  8017b4:	4080202c 	andhi	r2,r8,128
  8017b8:	103f9726 	beq	r2,zero,801618 <__adddf3+0x300>
  8017bc:	00bfe034 	movhi	r2,65408
  8017c0:	10bfffc4 	addi	r2,r2,-1
  8017c4:	4090703a 	and	r8,r8,r2
  8017c8:	04800044 	movi	r18,1
  8017cc:	003f9206 	br	801618 <__adddf3+0x300>
  8017d0:	1101ffd8 	cmpnei	r4,r2,2047
  8017d4:	20007a26 	beq	r4,zero,8019c0 <__adddf3+0x6a8>
  8017d8:	52802034 	orhi	r10,r10,128
  8017dc:	19000e48 	cmpgei	r4,r3,57
  8017e0:	20002e1e 	bne	r4,zero,80189c <__adddf3+0x584>
  8017e4:	19000808 	cmpgei	r4,r3,32
  8017e8:	2000871e 	bne	r4,zero,801a08 <__adddf3+0x6f0>
  8017ec:	01000804 	movi	r4,32
  8017f0:	20c9c83a 	sub	r4,r4,r3
  8017f4:	5122983a 	sll	r17,r10,r4
  8017f8:	70cad83a 	srl	r5,r14,r3
  8017fc:	711c983a 	sll	r14,r14,r4
  801800:	50d4d83a 	srl	r10,r10,r3
  801804:	8962b03a 	or	r17,r17,r5
  801808:	701cc03a 	cmpne	r14,r14,zero
  80180c:	8ba2b03a 	or	r17,r17,r14
  801810:	4a93c83a 	sub	r9,r9,r10
  801814:	00002306 	br	8018a4 <__adddf3+0x58c>
  801818:	7363c83a 	sub	r17,r14,r13
  80181c:	5267c83a 	sub	r19,r10,r9
  801820:	7451803a 	cmpltu	r8,r14,r17
  801824:	9a27c83a 	sub	r19,r19,r8
  801828:	9880202c 	andhi	r2,r19,128
  80182c:	1000421e 	bne	r2,zero,801938 <__adddf3+0x620>
  801830:	8cc4b03a 	or	r2,r17,r19
  801834:	103eee1e 	bne	r2,zero,8013f0 <__adddf3+0xd8>
  801838:	0015883a 	mov	r10,zero
  80183c:	0021883a 	mov	r16,zero
  801840:	003f7e06 	br	80163c <__adddf3+0x324>
  801844:	04800084 	movi	r18,2
  801848:	00bfe034 	movhi	r2,65408
  80184c:	10bfffc4 	addi	r2,r2,-1
  801850:	8806d07a 	srli	r3,r17,1
  801854:	4090703a 	and	r8,r8,r2
  801858:	400497fa 	slli	r2,r8,31
  80185c:	8c40004c 	andi	r17,r17,1
  801860:	1c62b03a 	or	r17,r3,r17
  801864:	4010d07a 	srli	r8,r8,1
  801868:	1462b03a 	or	r17,r2,r17
  80186c:	003ef906 	br	801454 <__adddf3+0x13c>
  801870:	1c7ff804 	addi	r17,r3,-32
  801874:	19000820 	cmpeqi	r4,r3,32
  801878:	4c44d83a 	srl	r2,r9,r17
  80187c:	2000041e 	bne	r4,zero,801890 <__adddf3+0x578>
  801880:	01001004 	movi	r4,64
  801884:	20c7c83a 	sub	r3,r4,r3
  801888:	48d2983a 	sll	r9,r9,r3
  80188c:	6a5ab03a 	or	r13,r13,r9
  801890:	6822c03a 	cmpne	r17,r13,zero
  801894:	88a2b03a 	or	r17,r17,r2
  801898:	003ecd06 	br	8013d0 <__adddf3+0xb8>
  80189c:	5394b03a 	or	r10,r10,r14
  8018a0:	5022c03a 	cmpne	r17,r10,zero
  8018a4:	6c63c83a 	sub	r17,r13,r17
  8018a8:	6c51803a 	cmpltu	r8,r13,r17
  8018ac:	4a11c83a 	sub	r8,r9,r8
  8018b0:	3821883a 	mov	r16,r7
  8018b4:	1025883a 	mov	r18,r2
  8018b8:	003ec806 	br	8013dc <__adddf3+0xc4>
  8018bc:	5388b03a 	or	r4,r10,r14
  8018c0:	20008226 	beq	r4,zero,801acc <__adddf3+0x7b4>
  8018c4:	193fffc4 	addi	r4,r3,-1
  8018c8:	2000b026 	beq	r4,zero,801b8c <__adddf3+0x874>
  8018cc:	18c1ffd8 	cmpnei	r3,r3,2047
  8018d0:	18007726 	beq	r3,zero,801ab0 <__adddf3+0x798>
  8018d4:	2007883a 	mov	r3,r4
  8018d8:	003f8d06 	br	801710 <__adddf3+0x3f8>
  8018dc:	00800804 	movi	r2,32
  8018e0:	10c5c83a 	sub	r2,r2,r3
  8018e4:	68c8d83a 	srl	r4,r13,r3
  8018e8:	48a2983a 	sll	r17,r9,r2
  8018ec:	689a983a 	sll	r13,r13,r2
  8018f0:	48c6d83a 	srl	r3,r9,r3
  8018f4:	8922b03a 	or	r17,r17,r4
  8018f8:	681ac03a 	cmpne	r13,r13,zero
  8018fc:	8b62b03a 	or	r17,r17,r13
  801900:	50d5883a 	add	r10,r10,r3
  801904:	003f5406 	br	801658 <__adddf3+0x340>
  801908:	10c1ffe0 	cmpeqi	r3,r2,2047
  80190c:	183f5a1e 	bne	r3,zero,801678 <__adddf3+0x360>
  801910:	7351883a 	add	r8,r14,r13
  801914:	4387803a 	cmpltu	r3,r8,r14
  801918:	5255883a 	add	r10,r10,r9
  80191c:	50c7883a 	add	r3,r10,r3
  801920:	401ad07a 	srli	r13,r8,1
  801924:	182297fa 	slli	r17,r3,31
  801928:	1810d07a 	srli	r8,r3,1
  80192c:	1025883a 	mov	r18,r2
  801930:	8b62b03a 	or	r17,r17,r13
  801934:	003f3806 	br	801618 <__adddf3+0x300>
  801938:	6ba3c83a 	sub	r17,r13,r14
  80193c:	4a93c83a 	sub	r9,r9,r10
  801940:	6c51803a 	cmpltu	r8,r13,r17
  801944:	4a27c83a 	sub	r19,r9,r8
  801948:	3821883a 	mov	r16,r7
  80194c:	003ea806 	br	8013f0 <__adddf3+0xd8>
  801950:	480a977a 	slli	r5,r9,29
  801954:	01080034 	movhi	r4,8192
  801958:	213fffc4 	addi	r4,r4,-1
  80195c:	3104703a 	and	r2,r6,r4
  801960:	4814d0fa 	srli	r10,r9,3
  801964:	1144b03a 	or	r2,r2,r5
  801968:	3821883a 	mov	r16,r7
  80196c:	003f3106 	br	801634 <__adddf3+0x31c>
  801970:	28005d1e 	bne	r5,zero,801ae8 <__adddf3+0x7d0>
  801974:	1000121e 	bne	r2,zero,8019c0 <__adddf3+0x6a8>
  801978:	0021883a 	mov	r16,zero
  80197c:	4015883a 	mov	r10,r8
  801980:	00bfffc4 	movi	r2,-1
  801984:	003f4806 	br	8016a8 <__adddf3+0x390>
  801988:	7363883a 	add	r17,r14,r13
  80198c:	5255883a 	add	r10,r10,r9
  801990:	8b91803a 	cmpltu	r8,r17,r14
  801994:	5211883a 	add	r8,r10,r8
  801998:	4080202c 	andhi	r2,r8,128
  80199c:	103fa91e 	bne	r2,zero,801844 <__adddf3+0x52c>
  8019a0:	04800044 	movi	r18,1
  8019a4:	003f1c06 	br	801618 <__adddf3+0x300>
  8019a8:	7363c83a 	sub	r17,r14,r13
  8019ac:	5255c83a 	sub	r10,r10,r9
  8019b0:	7451803a 	cmpltu	r8,r14,r17
  8019b4:	5211c83a 	sub	r8,r10,r8
  8019b8:	04800044 	movi	r18,1
  8019bc:	003e8706 	br	8013dc <__adddf3+0xc4>
  8019c0:	4806977a 	slli	r3,r9,29
  8019c4:	00880034 	movhi	r2,8192
  8019c8:	10bfffc4 	addi	r2,r2,-1
  8019cc:	3084703a 	and	r2,r6,r2
  8019d0:	4814d0fa 	srli	r10,r9,3
  8019d4:	10c4b03a 	or	r2,r2,r3
  8019d8:	3821883a 	mov	r16,r7
  8019dc:	003f3006 	br	8016a0 <__adddf3+0x388>
  8019e0:	500a977a 	slli	r5,r10,29
  8019e4:	00880034 	movhi	r2,8192
  8019e8:	10bfffc4 	addi	r2,r2,-1
  8019ec:	2084703a 	and	r2,r4,r2
  8019f0:	5014d0fa 	srli	r10,r10,3
  8019f4:	1144b03a 	or	r2,r2,r5
  8019f8:	003f1006 	br	80163c <__adddf3+0x324>
  8019fc:	5394b03a 	or	r10,r10,r14
  801a00:	5022c03a 	cmpne	r17,r10,zero
  801a04:	003f5006 	br	801748 <__adddf3+0x430>
  801a08:	1c7ff804 	addi	r17,r3,-32
  801a0c:	19400820 	cmpeqi	r5,r3,32
  801a10:	5448d83a 	srl	r4,r10,r17
  801a14:	2800041e 	bne	r5,zero,801a28 <__adddf3+0x710>
  801a18:	01401004 	movi	r5,64
  801a1c:	28c7c83a 	sub	r3,r5,r3
  801a20:	50d4983a 	sll	r10,r10,r3
  801a24:	729cb03a 	or	r14,r14,r10
  801a28:	7022c03a 	cmpne	r17,r14,zero
  801a2c:	8922b03a 	or	r17,r17,r4
  801a30:	003f9c06 	br	8018a4 <__adddf3+0x58c>
  801a34:	10005a1e 	bne	r2,zero,801ba0 <__adddf3+0x888>
  801a38:	4804977a 	slli	r2,r9,29
  801a3c:	00c80034 	movhi	r3,8192
  801a40:	18ffffc4 	addi	r3,r3,-1
  801a44:	30cc703a 	and	r6,r6,r3
  801a48:	4814d0fa 	srli	r10,r9,3
  801a4c:	1184b03a 	or	r2,r2,r6
  801a50:	003f1306 	br	8016a0 <__adddf3+0x388>
  801a54:	6ba3c83a 	sub	r17,r13,r14
  801a58:	4a95c83a 	sub	r10,r9,r10
  801a5c:	6c51803a 	cmpltu	r8,r13,r17
  801a60:	5211c83a 	sub	r8,r10,r8
  801a64:	3821883a 	mov	r16,r7
  801a68:	04800044 	movi	r18,1
  801a6c:	003e5b06 	br	8013dc <__adddf3+0xc4>
  801a70:	103f7126 	beq	r2,zero,801838 <__adddf3+0x520>
  801a74:	4808977a 	slli	r4,r9,29
  801a78:	00880034 	movhi	r2,8192
  801a7c:	10bfffc4 	addi	r2,r2,-1
  801a80:	3084703a 	and	r2,r6,r2
  801a84:	4814d0fa 	srli	r10,r9,3
  801a88:	1104b03a 	or	r2,r2,r4
  801a8c:	3821883a 	mov	r16,r7
  801a90:	003eea06 	br	80163c <__adddf3+0x324>
  801a94:	5006977a 	slli	r3,r10,29
  801a98:	00880034 	movhi	r2,8192
  801a9c:	10bfffc4 	addi	r2,r2,-1
  801aa0:	2084703a 	and	r2,r4,r2
  801aa4:	5014d0fa 	srli	r10,r10,3
  801aa8:	10c4b03a 	or	r2,r2,r3
  801aac:	003efc06 	br	8016a0 <__adddf3+0x388>
  801ab0:	4806977a 	slli	r3,r9,29
  801ab4:	00880034 	movhi	r2,8192
  801ab8:	10bfffc4 	addi	r2,r2,-1
  801abc:	3084703a 	and	r2,r6,r2
  801ac0:	4814d0fa 	srli	r10,r9,3
  801ac4:	10c4b03a 	or	r2,r2,r3
  801ac8:	003ef506 	br	8016a0 <__adddf3+0x388>
  801acc:	4808977a 	slli	r4,r9,29
  801ad0:	00880034 	movhi	r2,8192
  801ad4:	10bfffc4 	addi	r2,r2,-1
  801ad8:	3084703a 	and	r2,r6,r2
  801adc:	4814d0fa 	srli	r10,r9,3
  801ae0:	1104b03a 	or	r2,r2,r4
  801ae4:	003ed306 	br	801634 <__adddf3+0x31c>
  801ae8:	500a977a 	slli	r5,r10,29
  801aec:	5014d0fa 	srli	r10,r10,3
  801af0:	10001626 	beq	r2,zero,801b4c <__adddf3+0x834>
  801af4:	00c80034 	movhi	r3,8192
  801af8:	18ffffc4 	addi	r3,r3,-1
  801afc:	20c4703a 	and	r2,r4,r3
  801b00:	5100022c 	andhi	r4,r10,8
  801b04:	1144b03a 	or	r2,r2,r5
  801b08:	203ee526 	beq	r4,zero,8016a0 <__adddf3+0x388>
  801b0c:	4808d0fa 	srli	r4,r9,3
  801b10:	2140022c 	andhi	r5,r4,8
  801b14:	283ee21e 	bne	r5,zero,8016a0 <__adddf3+0x388>
  801b18:	4812977a 	slli	r9,r9,29
  801b1c:	30c4703a 	and	r2,r6,r3
  801b20:	3821883a 	mov	r16,r7
  801b24:	1244b03a 	or	r2,r2,r9
  801b28:	2015883a 	mov	r10,r4
  801b2c:	003edc06 	br	8016a0 <__adddf3+0x388>
  801b30:	4804977a 	slli	r2,r9,29
  801b34:	01080034 	movhi	r4,8192
  801b38:	213fffc4 	addi	r4,r4,-1
  801b3c:	310c703a 	and	r6,r6,r4
  801b40:	4814d0fa 	srli	r10,r9,3
  801b44:	1184b03a 	or	r2,r2,r6
  801b48:	003ebc06 	br	80163c <__adddf3+0x324>
  801b4c:	00880034 	movhi	r2,8192
  801b50:	10bfffc4 	addi	r2,r2,-1
  801b54:	2084703a 	and	r2,r4,r2
  801b58:	1144b03a 	or	r2,r2,r5
  801b5c:	003ed006 	br	8016a0 <__adddf3+0x388>
  801b60:	193ff804 	addi	r4,r3,-32
  801b64:	19400820 	cmpeqi	r5,r3,32
  801b68:	5108d83a 	srl	r4,r10,r4
  801b6c:	2800041e 	bne	r5,zero,801b80 <__adddf3+0x868>
  801b70:	01401004 	movi	r5,64
  801b74:	28c7c83a 	sub	r3,r5,r3
  801b78:	50d4983a 	sll	r10,r10,r3
  801b7c:	729cb03a 	or	r14,r14,r10
  801b80:	7022c03a 	cmpne	r17,r14,zero
  801b84:	8922b03a 	or	r17,r17,r4
  801b88:	003eef06 	br	801748 <__adddf3+0x430>
  801b8c:	7363883a 	add	r17,r14,r13
  801b90:	5255883a 	add	r10,r10,r9
  801b94:	8b51803a 	cmpltu	r8,r17,r13
  801b98:	5211883a 	add	r8,r10,r8
  801b9c:	003f7e06 	br	801998 <__adddf3+0x680>
  801ba0:	4b50b03a 	or	r8,r9,r13
  801ba4:	500a977a 	slli	r5,r10,29
  801ba8:	5014d0fa 	srli	r10,r10,3
  801bac:	403fe726 	beq	r8,zero,801b4c <__adddf3+0x834>
  801bb0:	00c80034 	movhi	r3,8192
  801bb4:	18ffffc4 	addi	r3,r3,-1
  801bb8:	20c4703a 	and	r2,r4,r3
  801bbc:	5100022c 	andhi	r4,r10,8
  801bc0:	1144b03a 	or	r2,r2,r5
  801bc4:	203eb626 	beq	r4,zero,8016a0 <__adddf3+0x388>
  801bc8:	4808d0fa 	srli	r4,r9,3
  801bcc:	2140022c 	andhi	r5,r4,8
  801bd0:	283eb31e 	bne	r5,zero,8016a0 <__adddf3+0x388>
  801bd4:	4804977a 	slli	r2,r9,29
  801bd8:	30cc703a 	and	r6,r6,r3
  801bdc:	3821883a 	mov	r16,r7
  801be0:	3084b03a 	or	r2,r6,r2
  801be4:	2015883a 	mov	r10,r4
  801be8:	003ead06 	br	8016a0 <__adddf3+0x388>
  801bec:	8a04b03a 	or	r2,r17,r8
  801bf0:	103f1126 	beq	r2,zero,801838 <__adddf3+0x520>
  801bf4:	003e8806 	br	801618 <__adddf3+0x300>
  801bf8:	0005883a 	mov	r2,zero
  801bfc:	00c1ffc4 	movi	r3,2047
  801c00:	0011883a 	mov	r8,zero
  801c04:	003e2a06 	br	8014b0 <__adddf3+0x198>

00801c08 <__divdf3>:
  801c08:	2810d53a 	srli	r8,r5,20
  801c0c:	defff004 	addi	sp,sp,-64
  801c10:	dc000615 	stw	r16,24(sp)
  801c14:	04000434 	movhi	r16,16
  801c18:	df000e15 	stw	fp,56(sp)
  801c1c:	ddc00d15 	stw	r23,52(sp)
  801c20:	dd800c15 	stw	r22,48(sp)
  801c24:	dd000a15 	stw	r20,40(sp)
  801c28:	843fffc4 	addi	r16,r16,-1
  801c2c:	dfc00f15 	stw	ra,60(sp)
  801c30:	dd400b15 	stw	r21,44(sp)
  801c34:	dcc00915 	stw	r19,36(sp)
  801c38:	dc800815 	stw	r18,32(sp)
  801c3c:	dc400715 	stw	r17,28(sp)
  801c40:	4201ffcc 	andi	r8,r8,2047
  801c44:	282ed7fa 	srli	r23,r5,31
  801c48:	3039883a 	mov	fp,r6
  801c4c:	382d883a 	mov	r22,r7
  801c50:	2029883a 	mov	r20,r4
  801c54:	2c20703a 	and	r16,r5,r16
  801c58:	40006826 	beq	r8,zero,801dfc <__divdf3+0x1f4>
  801c5c:	4081ffe0 	cmpeqi	r2,r8,2047
  801c60:	1000791e 	bne	r2,zero,801e48 <__divdf3+0x240>
  801c64:	2026d77a 	srli	r19,r4,29
  801c68:	800a90fa 	slli	r5,r16,3
  801c6c:	202890fa 	slli	r20,r4,3
  801c70:	44bf0044 	addi	r18,r8,-1023
  801c74:	994ab03a 	or	r5,r19,r5
  801c78:	2cc02034 	orhi	r19,r5,128
  801c7c:	0021883a 	mov	r16,zero
  801c80:	0023883a 	mov	r17,zero
  801c84:	b010d53a 	srli	r8,r22,20
  801c88:	00c00434 	movhi	r3,16
  801c8c:	18ffffc4 	addi	r3,r3,-1
  801c90:	4201ffcc 	andi	r8,r8,2047
  801c94:	b02ad7fa 	srli	r21,r22,31
  801c98:	b0ec703a 	and	r22,r22,r3
  801c9c:	40004626 	beq	r8,zero,801db8 <__divdf3+0x1b0>
  801ca0:	4081ffe0 	cmpeqi	r2,r8,2047
  801ca4:	10006f1e 	bne	r2,zero,801e64 <__divdf3+0x25c>
  801ca8:	b00690fa 	slli	r3,r22,3
  801cac:	e004d77a 	srli	r2,fp,29
  801cb0:	e01290fa 	slli	r9,fp,3
  801cb4:	423f0044 	addi	r8,r8,-1023
  801cb8:	10c6b03a 	or	r3,r2,r3
  801cbc:	1d802034 	orhi	r22,r3,128
  801cc0:	9225c83a 	sub	r18,r18,r8
  801cc4:	0007883a 	mov	r3,zero
  801cc8:	80800428 	cmpgeui	r2,r16,16
  801ccc:	bd4ef03a 	xor	r7,r23,r21
  801cd0:	1000a71e 	bne	r2,zero,801f70 <__divdf3+0x368>
  801cd4:	800c90ba 	slli	r6,r16,2
  801cd8:	00802034 	movhi	r2,128
  801cdc:	3085883a 	add	r2,r6,r2
  801ce0:	10873a17 	ldw	r2,7400(r2)
  801ce4:	1000683a 	jmp	r2
  801ce8:	00801f70 	cmpltui	r2,zero,125
  801cec:	00801d94 	movui	r2,118
  801cf0:	00801d44 	movi	r2,117
  801cf4:	00801da4 	muli	r2,zero,118
  801cf8:	00801d44 	movi	r2,117
  801cfc:	00801f14 	movui	r2,124
  801d00:	00801d44 	movi	r2,117
  801d04:	00801da4 	muli	r2,zero,118
  801d08:	00801d94 	movui	r2,118
  801d0c:	00801d94 	movui	r2,118
  801d10:	00801f14 	movui	r2,124
  801d14:	00801da4 	muli	r2,zero,118
  801d18:	00801d28 	cmpgeui	r2,zero,116
  801d1c:	00801d28 	cmpgeui	r2,zero,116
  801d20:	00801d28 	cmpgeui	r2,zero,116
  801d24:	00801f2c 	andhi	r2,zero,124
  801d28:	b80f883a 	mov	r7,r23
  801d2c:	888000a0 	cmpeqi	r2,r17,2
  801d30:	1000181e 	bne	r2,zero,801d94 <__divdf3+0x18c>
  801d34:	888000e0 	cmpeqi	r2,r17,3
  801d38:	1001f61e 	bne	r2,zero,802514 <__divdf3+0x90c>
  801d3c:	88800060 	cmpeqi	r2,r17,1
  801d40:	10006126 	beq	r2,zero,801ec8 <__divdf3+0x2c0>
  801d44:	0007883a 	mov	r3,zero
  801d48:	000b883a 	mov	r5,zero
  801d4c:	0029883a 	mov	r20,zero
  801d50:	1806953a 	slli	r3,r3,20
  801d54:	380e97fa 	slli	r7,r7,31
  801d58:	a005883a 	mov	r2,r20
  801d5c:	1946b03a 	or	r3,r3,r5
  801d60:	19c6b03a 	or	r3,r3,r7
  801d64:	dfc00f17 	ldw	ra,60(sp)
  801d68:	df000e17 	ldw	fp,56(sp)
  801d6c:	ddc00d17 	ldw	r23,52(sp)
  801d70:	dd800c17 	ldw	r22,48(sp)
  801d74:	dd400b17 	ldw	r21,44(sp)
  801d78:	dd000a17 	ldw	r20,40(sp)
  801d7c:	dcc00917 	ldw	r19,36(sp)
  801d80:	dc800817 	ldw	r18,32(sp)
  801d84:	dc400717 	ldw	r17,28(sp)
  801d88:	dc000617 	ldw	r16,24(sp)
  801d8c:	dec01004 	addi	sp,sp,64
  801d90:	f800283a 	ret
  801d94:	00c1ffc4 	movi	r3,2047
  801d98:	000b883a 	mov	r5,zero
  801d9c:	0029883a 	mov	r20,zero
  801da0:	003feb06 	br	801d50 <__divdf3+0x148>
  801da4:	a80f883a 	mov	r7,r21
  801da8:	b027883a 	mov	r19,r22
  801dac:	4829883a 	mov	r20,r9
  801db0:	1823883a 	mov	r17,r3
  801db4:	003fdd06 	br	801d2c <__divdf3+0x124>
  801db8:	b712b03a 	or	r9,r22,fp
  801dbc:	48003e26 	beq	r9,zero,801eb8 <__divdf3+0x2b0>
  801dc0:	b0017726 	beq	r22,zero,8023a0 <__divdf3+0x798>
  801dc4:	b009883a 	mov	r4,r22
  801dc8:	0802fa80 	call	802fa8 <__clzsi2>
  801dcc:	117ffd44 	addi	r5,r2,-11
  801dd0:	01000744 	movi	r4,29
  801dd4:	127ffe04 	addi	r9,r2,-8
  801dd8:	2149c83a 	sub	r4,r4,r5
  801ddc:	b246983a 	sll	r3,r22,r9
  801de0:	e108d83a 	srl	r4,fp,r4
  801de4:	e252983a 	sll	r9,fp,r9
  801de8:	20ecb03a 	or	r22,r4,r3
  801dec:	1491883a 	add	r8,r2,r18
  801df0:	4480fcc4 	addi	r18,r8,1011
  801df4:	0007883a 	mov	r3,zero
  801df8:	003fb306 	br	801cc8 <__divdf3+0xc0>
  801dfc:	8126b03a 	or	r19,r16,r4
  801e00:	2023883a 	mov	r17,r4
  801e04:	98002726 	beq	r19,zero,801ea4 <__divdf3+0x29c>
  801e08:	80017026 	beq	r16,zero,8023cc <__divdf3+0x7c4>
  801e0c:	8009883a 	mov	r4,r16
  801e10:	0802fa80 	call	802fa8 <__clzsi2>
  801e14:	113ffd44 	addi	r4,r2,-11
  801e18:	00c00744 	movi	r3,29
  801e1c:	14fffe04 	addi	r19,r2,-8
  801e20:	1907c83a 	sub	r3,r3,r4
  801e24:	84ca983a 	sll	r5,r16,r19
  801e28:	88c6d83a 	srl	r3,r17,r3
  801e2c:	8ce8983a 	sll	r20,r17,r19
  801e30:	1966b03a 	or	r19,r3,r5
  801e34:	023f0344 	movi	r8,-1011
  801e38:	40a5c83a 	sub	r18,r8,r2
  801e3c:	0021883a 	mov	r16,zero
  801e40:	0023883a 	mov	r17,zero
  801e44:	003f8f06 	br	801c84 <__divdf3+0x7c>
  801e48:	8126b03a 	or	r19,r16,r4
  801e4c:	9800101e 	bne	r19,zero,801e90 <__divdf3+0x288>
  801e50:	0029883a 	mov	r20,zero
  801e54:	04000204 	movi	r16,8
  801e58:	0481ffc4 	movi	r18,2047
  801e5c:	04400084 	movi	r17,2
  801e60:	003f8806 	br	801c84 <__divdf3+0x7c>
  801e64:	b712b03a 	or	r9,r22,fp
  801e68:	94be0044 	addi	r18,r18,-2047
  801e6c:	4800041e 	bne	r9,zero,801e80 <__divdf3+0x278>
  801e70:	84000094 	ori	r16,r16,2
  801e74:	002d883a 	mov	r22,zero
  801e78:	00c00084 	movi	r3,2
  801e7c:	003f9206 	br	801cc8 <__divdf3+0xc0>
  801e80:	840000d4 	ori	r16,r16,3
  801e84:	e013883a 	mov	r9,fp
  801e88:	00c000c4 	movi	r3,3
  801e8c:	003f8e06 	br	801cc8 <__divdf3+0xc0>
  801e90:	8027883a 	mov	r19,r16
  801e94:	0481ffc4 	movi	r18,2047
  801e98:	04000304 	movi	r16,12
  801e9c:	044000c4 	movi	r17,3
  801ea0:	003f7806 	br	801c84 <__divdf3+0x7c>
  801ea4:	0029883a 	mov	r20,zero
  801ea8:	04000104 	movi	r16,4
  801eac:	0025883a 	mov	r18,zero
  801eb0:	04400044 	movi	r17,1
  801eb4:	003f7306 	br	801c84 <__divdf3+0x7c>
  801eb8:	84000054 	ori	r16,r16,1
  801ebc:	002d883a 	mov	r22,zero
  801ec0:	00c00044 	movi	r3,1
  801ec4:	003f8006 	br	801cc8 <__divdf3+0xc0>
  801ec8:	9440ffc4 	addi	r17,r18,1023
  801ecc:	0441050e 	bge	zero,r17,8022e4 <__divdf3+0x6dc>
  801ed0:	a08001cc 	andi	r2,r20,7
  801ed4:	10016c1e 	bne	r2,zero,802488 <__divdf3+0x880>
  801ed8:	a008d0fa 	srli	r4,r20,3
  801edc:	9880402c 	andhi	r2,r19,256
  801ee0:	10000426 	beq	r2,zero,801ef4 <__divdf3+0x2ec>
  801ee4:	00bfc034 	movhi	r2,65280
  801ee8:	10bfffc4 	addi	r2,r2,-1
  801eec:	98a6703a 	and	r19,r19,r2
  801ef0:	94410004 	addi	r17,r18,1024
  801ef4:	8881ffc8 	cmpgei	r2,r17,2047
  801ef8:	103fa61e 	bne	r2,zero,801d94 <__divdf3+0x18c>
  801efc:	9828977a 	slli	r20,r19,29
  801f00:	980a927a 	slli	r5,r19,9
  801f04:	88c1ffcc 	andi	r3,r17,2047
  801f08:	a128b03a 	or	r20,r20,r4
  801f0c:	280ad33a 	srli	r5,r5,12
  801f10:	003f8f06 	br	801d50 <__divdf3+0x148>
  801f14:	01400434 	movhi	r5,16
  801f18:	000f883a 	mov	r7,zero
  801f1c:	297fffc4 	addi	r5,r5,-1
  801f20:	053fffc4 	movi	r20,-1
  801f24:	00c1ffc4 	movi	r3,2047
  801f28:	003f8906 	br	801d50 <__divdf3+0x148>
  801f2c:	9880022c 	andhi	r2,r19,8
  801f30:	10000926 	beq	r2,zero,801f58 <__divdf3+0x350>
  801f34:	b080022c 	andhi	r2,r22,8
  801f38:	1000071e 	bne	r2,zero,801f58 <__divdf3+0x350>
  801f3c:	00800434 	movhi	r2,16
  801f40:	b1400234 	orhi	r5,r22,8
  801f44:	10bfffc4 	addi	r2,r2,-1
  801f48:	288a703a 	and	r5,r5,r2
  801f4c:	a80f883a 	mov	r7,r21
  801f50:	4829883a 	mov	r20,r9
  801f54:	003ff306 	br	801f24 <__divdf3+0x31c>
  801f58:	00800434 	movhi	r2,16
  801f5c:	99400234 	orhi	r5,r19,8
  801f60:	10bfffc4 	addi	r2,r2,-1
  801f64:	288a703a 	and	r5,r5,r2
  801f68:	b80f883a 	mov	r7,r23
  801f6c:	003fed06 	br	801f24 <__divdf3+0x31c>
  801f70:	b4c10536 	bltu	r22,r19,802388 <__divdf3+0x780>
  801f74:	b4c10326 	beq	r22,r19,802384 <__divdf3+0x77c>
  801f78:	94bfffc4 	addi	r18,r18,-1
  801f7c:	a039883a 	mov	fp,r20
  801f80:	9821883a 	mov	r16,r19
  801f84:	0023883a 	mov	r17,zero
  801f88:	b006923a 	slli	r3,r22,8
  801f8c:	482cd63a 	srli	r22,r9,24
  801f90:	8009883a 	mov	r4,r16
  801f94:	182ed43a 	srli	r23,r3,16
  801f98:	b0ecb03a 	or	r22,r22,r3
  801f9c:	d9c00015 	stw	r7,0(sp)
  801fa0:	b80b883a 	mov	r5,r23
  801fa4:	482a923a 	slli	r21,r9,8
  801fa8:	b53fffcc 	andi	r20,r22,65535
  801fac:	08030f00 	call	8030f0 <__udivsi3>
  801fb0:	100b883a 	mov	r5,r2
  801fb4:	a009883a 	mov	r4,r20
  801fb8:	1027883a 	mov	r19,r2
  801fbc:	08031b00 	call	8031b0 <__mulsi3>
  801fc0:	8009883a 	mov	r4,r16
  801fc4:	b80b883a 	mov	r5,r23
  801fc8:	1021883a 	mov	r16,r2
  801fcc:	08031540 	call	803154 <__umodsi3>
  801fd0:	1004943a 	slli	r2,r2,16
  801fd4:	e008d43a 	srli	r4,fp,16
  801fd8:	d9c00017 	ldw	r7,0(sp)
  801fdc:	2088b03a 	or	r4,r4,r2
  801fe0:	2400042e 	bgeu	r4,r16,801ff4 <__divdf3+0x3ec>
  801fe4:	2589883a 	add	r4,r4,r22
  801fe8:	98bfffc4 	addi	r2,r19,-1
  801fec:	2581082e 	bgeu	r4,r22,802410 <__divdf3+0x808>
  801ff0:	1027883a 	mov	r19,r2
  801ff4:	2421c83a 	sub	r16,r4,r16
  801ff8:	b80b883a 	mov	r5,r23
  801ffc:	8009883a 	mov	r4,r16
  802000:	d9c00215 	stw	r7,8(sp)
  802004:	08030f00 	call	8030f0 <__udivsi3>
  802008:	100b883a 	mov	r5,r2
  80200c:	a009883a 	mov	r4,r20
  802010:	d8800115 	stw	r2,4(sp)
  802014:	08031b00 	call	8031b0 <__mulsi3>
  802018:	b80b883a 	mov	r5,r23
  80201c:	8009883a 	mov	r4,r16
  802020:	d8800015 	stw	r2,0(sp)
  802024:	08031540 	call	803154 <__umodsi3>
  802028:	100c943a 	slli	r6,r2,16
  80202c:	d8c00017 	ldw	r3,0(sp)
  802030:	e73fffcc 	andi	fp,fp,65535
  802034:	e18cb03a 	or	r6,fp,r6
  802038:	da000117 	ldw	r8,4(sp)
  80203c:	d9c00217 	ldw	r7,8(sp)
  802040:	30c0042e 	bgeu	r6,r3,802054 <__divdf3+0x44c>
  802044:	358d883a 	add	r6,r6,r22
  802048:	40bfffc4 	addi	r2,r8,-1
  80204c:	3580ec2e 	bgeu	r6,r22,802400 <__divdf3+0x7f8>
  802050:	1011883a 	mov	r8,r2
  802054:	9826943a 	slli	r19,r19,16
  802058:	af3fffcc 	andi	fp,r21,65535
  80205c:	30c7c83a 	sub	r3,r6,r3
  802060:	9a26b03a 	or	r19,r19,r8
  802064:	9810d43a 	srli	r8,r19,16
  802068:	9abfffcc 	andi	r10,r19,65535
  80206c:	5009883a 	mov	r4,r10
  802070:	e00b883a 	mov	r5,fp
  802074:	d9c00515 	stw	r7,20(sp)
  802078:	d8c00315 	stw	r3,12(sp)
  80207c:	da800415 	stw	r10,16(sp)
  802080:	da000015 	stw	r8,0(sp)
  802084:	08031b00 	call	8031b0 <__mulsi3>
  802088:	da000017 	ldw	r8,0(sp)
  80208c:	e00b883a 	mov	r5,fp
  802090:	d8800215 	stw	r2,8(sp)
  802094:	4009883a 	mov	r4,r8
  802098:	08031b00 	call	8031b0 <__mulsi3>
  80209c:	da000017 	ldw	r8,0(sp)
  8020a0:	a820d43a 	srli	r16,r21,16
  8020a4:	d8800115 	stw	r2,4(sp)
  8020a8:	4009883a 	mov	r4,r8
  8020ac:	800b883a 	mov	r5,r16
  8020b0:	08031b00 	call	8031b0 <__mulsi3>
  8020b4:	da800417 	ldw	r10,16(sp)
  8020b8:	8009883a 	mov	r4,r16
  8020bc:	d8800015 	stw	r2,0(sp)
  8020c0:	500b883a 	mov	r5,r10
  8020c4:	08031b00 	call	8031b0 <__mulsi3>
  8020c8:	d9800217 	ldw	r6,8(sp)
  8020cc:	da000117 	ldw	r8,4(sp)
  8020d0:	da400017 	ldw	r9,0(sp)
  8020d4:	3008d43a 	srli	r4,r6,16
  8020d8:	1205883a 	add	r2,r2,r8
  8020dc:	d8c00317 	ldw	r3,12(sp)
  8020e0:	2089883a 	add	r4,r4,r2
  8020e4:	d9c00517 	ldw	r7,20(sp)
  8020e8:	2200022e 	bgeu	r4,r8,8020f4 <__divdf3+0x4ec>
  8020ec:	00800074 	movhi	r2,1
  8020f0:	4893883a 	add	r9,r9,r2
  8020f4:	200ad43a 	srli	r5,r4,16
  8020f8:	2008943a 	slli	r4,r4,16
  8020fc:	31bfffcc 	andi	r6,r6,65535
  802100:	2a4b883a 	add	r5,r5,r9
  802104:	218d883a 	add	r6,r4,r6
  802108:	19409436 	bltu	r3,r5,80235c <__divdf3+0x754>
  80210c:	19409226 	beq	r3,r5,802358 <__divdf3+0x750>
  802110:	898dc83a 	sub	r6,r17,r6
  802114:	89a3803a 	cmpltu	r17,r17,r6
  802118:	1947c83a 	sub	r3,r3,r5
  80211c:	1c47c83a 	sub	r3,r3,r17
  802120:	9440ffc4 	addi	r17,r18,1023
  802124:	b0c0d326 	beq	r22,r3,802474 <__divdf3+0x86c>
  802128:	1809883a 	mov	r4,r3
  80212c:	b80b883a 	mov	r5,r23
  802130:	d9800315 	stw	r6,12(sp)
  802134:	d9c00215 	stw	r7,8(sp)
  802138:	d8c00015 	stw	r3,0(sp)
  80213c:	08030f00 	call	8030f0 <__udivsi3>
  802140:	100b883a 	mov	r5,r2
  802144:	a009883a 	mov	r4,r20
  802148:	d8800115 	stw	r2,4(sp)
  80214c:	08031b00 	call	8031b0 <__mulsi3>
  802150:	d8c00017 	ldw	r3,0(sp)
  802154:	b80b883a 	mov	r5,r23
  802158:	d8800015 	stw	r2,0(sp)
  80215c:	1809883a 	mov	r4,r3
  802160:	08031540 	call	803154 <__umodsi3>
  802164:	d9800317 	ldw	r6,12(sp)
  802168:	1006943a 	slli	r3,r2,16
  80216c:	da400017 	ldw	r9,0(sp)
  802170:	3008d43a 	srli	r4,r6,16
  802174:	da000117 	ldw	r8,4(sp)
  802178:	d9c00217 	ldw	r7,8(sp)
  80217c:	20c6b03a 	or	r3,r4,r3
  802180:	1a40062e 	bgeu	r3,r9,80219c <__divdf3+0x594>
  802184:	1d87883a 	add	r3,r3,r22
  802188:	40bfffc4 	addi	r2,r8,-1
  80218c:	1d80c836 	bltu	r3,r22,8024b0 <__divdf3+0x8a8>
  802190:	1a40c72e 	bgeu	r3,r9,8024b0 <__divdf3+0x8a8>
  802194:	423fff84 	addi	r8,r8,-2
  802198:	1d87883a 	add	r3,r3,r22
  80219c:	1a47c83a 	sub	r3,r3,r9
  8021a0:	1809883a 	mov	r4,r3
  8021a4:	b80b883a 	mov	r5,r23
  8021a8:	d9800415 	stw	r6,16(sp)
  8021ac:	d9c00315 	stw	r7,12(sp)
  8021b0:	da000215 	stw	r8,8(sp)
  8021b4:	d8c00115 	stw	r3,4(sp)
  8021b8:	08030f00 	call	8030f0 <__udivsi3>
  8021bc:	100b883a 	mov	r5,r2
  8021c0:	a009883a 	mov	r4,r20
  8021c4:	d8800015 	stw	r2,0(sp)
  8021c8:	08031b00 	call	8031b0 <__mulsi3>
  8021cc:	d8c00117 	ldw	r3,4(sp)
  8021d0:	b80b883a 	mov	r5,r23
  8021d4:	102f883a 	mov	r23,r2
  8021d8:	1809883a 	mov	r4,r3
  8021dc:	08031540 	call	803154 <__umodsi3>
  8021e0:	d9800417 	ldw	r6,16(sp)
  8021e4:	1004943a 	slli	r2,r2,16
  8021e8:	da400017 	ldw	r9,0(sp)
  8021ec:	31bfffcc 	andi	r6,r6,65535
  8021f0:	308cb03a 	or	r6,r6,r2
  8021f4:	da000217 	ldw	r8,8(sp)
  8021f8:	d9c00317 	ldw	r7,12(sp)
  8021fc:	35c0062e 	bgeu	r6,r23,802218 <__divdf3+0x610>
  802200:	358d883a 	add	r6,r6,r22
  802204:	48bfffc4 	addi	r2,r9,-1
  802208:	3580a736 	bltu	r6,r22,8024a8 <__divdf3+0x8a0>
  80220c:	35c0a62e 	bgeu	r6,r23,8024a8 <__divdf3+0x8a0>
  802210:	4a7fff84 	addi	r9,r9,-2
  802214:	358d883a 	add	r6,r6,r22
  802218:	4028943a 	slli	r20,r8,16
  80221c:	35d5c83a 	sub	r10,r6,r23
  802220:	e009883a 	mov	r4,fp
  802224:	a268b03a 	or	r20,r20,r9
  802228:	a23fffcc 	andi	r8,r20,65535
  80222c:	a02ed43a 	srli	r23,r20,16
  802230:	400b883a 	mov	r5,r8
  802234:	d9c00315 	stw	r7,12(sp)
  802238:	da800215 	stw	r10,8(sp)
  80223c:	da000115 	stw	r8,4(sp)
  802240:	08031b00 	call	8031b0 <__mulsi3>
  802244:	e00b883a 	mov	r5,fp
  802248:	b809883a 	mov	r4,r23
  80224c:	1039883a 	mov	fp,r2
  802250:	08031b00 	call	8031b0 <__mulsi3>
  802254:	8009883a 	mov	r4,r16
  802258:	b80b883a 	mov	r5,r23
  80225c:	d8800015 	stw	r2,0(sp)
  802260:	08031b00 	call	8031b0 <__mulsi3>
  802264:	da000117 	ldw	r8,4(sp)
  802268:	8009883a 	mov	r4,r16
  80226c:	1021883a 	mov	r16,r2
  802270:	400b883a 	mov	r5,r8
  802274:	08031b00 	call	8031b0 <__mulsi3>
  802278:	d9800017 	ldw	r6,0(sp)
  80227c:	e006d43a 	srli	r3,fp,16
  802280:	da800217 	ldw	r10,8(sp)
  802284:	1185883a 	add	r2,r2,r6
  802288:	1887883a 	add	r3,r3,r2
  80228c:	d9c00317 	ldw	r7,12(sp)
  802290:	1980022e 	bgeu	r3,r6,80229c <__divdf3+0x694>
  802294:	00800074 	movhi	r2,1
  802298:	80a1883a 	add	r16,r16,r2
  80229c:	1808d43a 	srli	r4,r3,16
  8022a0:	1806943a 	slli	r3,r3,16
  8022a4:	e73fffcc 	andi	fp,fp,65535
  8022a8:	2409883a 	add	r4,r4,r16
  8022ac:	1f07883a 	add	r3,r3,fp
  8022b0:	51000436 	bltu	r10,r4,8022c4 <__divdf3+0x6bc>
  8022b4:	51000226 	beq	r10,r4,8022c0 <__divdf3+0x6b8>
  8022b8:	a5000054 	ori	r20,r20,1
  8022bc:	003f0306 	br	801ecc <__divdf3+0x2c4>
  8022c0:	183f0226 	beq	r3,zero,801ecc <__divdf3+0x2c4>
  8022c4:	b28d883a 	add	r6,r22,r10
  8022c8:	a0bfffc4 	addi	r2,r20,-1
  8022cc:	35806536 	bltu	r6,r22,802464 <__divdf3+0x85c>
  8022d0:	31008036 	bltu	r6,r4,8024d4 <__divdf3+0x8cc>
  8022d4:	31009426 	beq	r6,r4,802528 <__divdf3+0x920>
  8022d8:	1029883a 	mov	r20,r2
  8022dc:	003ff606 	br	8022b8 <__divdf3+0x6b0>
  8022e0:	053fffc4 	movi	r20,-1
  8022e4:	01400044 	movi	r5,1
  8022e8:	2c4bc83a 	sub	r5,r5,r17
  8022ec:	28800e48 	cmpgei	r2,r5,57
  8022f0:	103e941e 	bne	r2,zero,801d44 <__divdf3+0x13c>
  8022f4:	28800808 	cmpgei	r2,r5,32
  8022f8:	1000491e 	bne	r2,zero,802420 <__divdf3+0x818>
  8022fc:	92010784 	addi	r8,r18,1054
  802300:	9a04983a 	sll	r2,r19,r8
  802304:	a146d83a 	srl	r3,r20,r5
  802308:	a210983a 	sll	r8,r20,r8
  80230c:	994ad83a 	srl	r5,r19,r5
  802310:	10e8b03a 	or	r20,r2,r3
  802314:	4010c03a 	cmpne	r8,r8,zero
  802318:	a228b03a 	or	r20,r20,r8
  80231c:	a08001cc 	andi	r2,r20,7
  802320:	10000726 	beq	r2,zero,802340 <__divdf3+0x738>
  802324:	a08003cc 	andi	r2,r20,15
  802328:	10800120 	cmpeqi	r2,r2,4
  80232c:	1000041e 	bne	r2,zero,802340 <__divdf3+0x738>
  802330:	a0800104 	addi	r2,r20,4
  802334:	1529803a 	cmpltu	r20,r2,r20
  802338:	2d0b883a 	add	r5,r5,r20
  80233c:	1029883a 	mov	r20,r2
  802340:	2880202c 	andhi	r2,r5,128
  802344:	10006f26 	beq	r2,zero,802504 <__divdf3+0x8fc>
  802348:	00c00044 	movi	r3,1
  80234c:	000b883a 	mov	r5,zero
  802350:	0029883a 	mov	r20,zero
  802354:	003e7e06 	br	801d50 <__divdf3+0x148>
  802358:	89bf6d2e 	bgeu	r17,r6,802110 <__divdf3+0x508>
  80235c:	8d63883a 	add	r17,r17,r21
  802360:	8d45803a 	cmpltu	r2,r17,r21
  802364:	1585883a 	add	r2,r2,r22
  802368:	1887883a 	add	r3,r3,r2
  80236c:	98bfffc4 	addi	r2,r19,-1
  802370:	b0c0202e 	bgeu	r22,r3,8023f4 <__divdf3+0x7ec>
  802374:	19405136 	bltu	r3,r5,8024bc <__divdf3+0x8b4>
  802378:	28c04f26 	beq	r5,r3,8024b8 <__divdf3+0x8b0>
  80237c:	1027883a 	mov	r19,r2
  802380:	003f6306 	br	802110 <__divdf3+0x508>
  802384:	a27efc36 	bltu	r20,r9,801f78 <__divdf3+0x370>
  802388:	983897fa 	slli	fp,r19,31
  80238c:	a004d07a 	srli	r2,r20,1
  802390:	9820d07a 	srli	r16,r19,1
  802394:	a02297fa 	slli	r17,r20,31
  802398:	e0b8b03a 	or	fp,fp,r2
  80239c:	003efa06 	br	801f88 <__divdf3+0x380>
  8023a0:	e009883a 	mov	r4,fp
  8023a4:	0802fa80 	call	802fa8 <__clzsi2>
  8023a8:	11400544 	addi	r5,r2,21
  8023ac:	29000748 	cmpgei	r4,r5,29
  8023b0:	1007883a 	mov	r3,r2
  8023b4:	10800804 	addi	r2,r2,32
  8023b8:	203e8526 	beq	r4,zero,801dd0 <__divdf3+0x1c8>
  8023bc:	18fffe04 	addi	r3,r3,-8
  8023c0:	e0ec983a 	sll	r22,fp,r3
  8023c4:	0013883a 	mov	r9,zero
  8023c8:	003e8806 	br	801dec <__divdf3+0x1e4>
  8023cc:	0802fa80 	call	802fa8 <__clzsi2>
  8023d0:	11000544 	addi	r4,r2,21
  8023d4:	20c00748 	cmpgei	r3,r4,29
  8023d8:	100b883a 	mov	r5,r2
  8023dc:	10800804 	addi	r2,r2,32
  8023e0:	183e8d26 	beq	r3,zero,801e18 <__divdf3+0x210>
  8023e4:	297ffe04 	addi	r5,r5,-8
  8023e8:	a166983a 	sll	r19,r20,r5
  8023ec:	0029883a 	mov	r20,zero
  8023f0:	003e9006 	br	801e34 <__divdf3+0x22c>
  8023f4:	b0ffe11e 	bne	r22,r3,80237c <__divdf3+0x774>
  8023f8:	8d7fe036 	bltu	r17,r21,80237c <__divdf3+0x774>
  8023fc:	003fdd06 	br	802374 <__divdf3+0x76c>
  802400:	30ff132e 	bgeu	r6,r3,802050 <__divdf3+0x448>
  802404:	423fff84 	addi	r8,r8,-2
  802408:	358d883a 	add	r6,r6,r22
  80240c:	003f1106 	br	802054 <__divdf3+0x44c>
  802410:	243ef72e 	bgeu	r4,r16,801ff0 <__divdf3+0x3e8>
  802414:	9cffff84 	addi	r19,r19,-2
  802418:	2589883a 	add	r4,r4,r22
  80241c:	003ef506 	br	801ff4 <__divdf3+0x3ec>
  802420:	00fff844 	movi	r3,-31
  802424:	1c47c83a 	sub	r3,r3,r17
  802428:	29400820 	cmpeqi	r5,r5,32
  80242c:	98c6d83a 	srl	r3,r19,r3
  802430:	2800031e 	bne	r5,zero,802440 <__divdf3+0x838>
  802434:	91410f84 	addi	r5,r18,1086
  802438:	994a983a 	sll	r5,r19,r5
  80243c:	a168b03a 	or	r20,r20,r5
  802440:	a028c03a 	cmpne	r20,r20,zero
  802444:	a0e8b03a 	or	r20,r20,r3
  802448:	a4c001cc 	andi	r19,r20,7
  80244c:	9800291e 	bne	r19,zero,8024f4 <__divdf3+0x8ec>
  802450:	000b883a 	mov	r5,zero
  802454:	a028d0fa 	srli	r20,r20,3
  802458:	0007883a 	mov	r3,zero
  80245c:	a4e8b03a 	or	r20,r20,r19
  802460:	003e3b06 	br	801d50 <__divdf3+0x148>
  802464:	1029883a 	mov	r20,r2
  802468:	313f931e 	bne	r6,r4,8022b8 <__divdf3+0x6b0>
  80246c:	1d7f921e 	bne	r3,r21,8022b8 <__divdf3+0x6b0>
  802470:	003e9606 	br	801ecc <__divdf3+0x2c4>
  802474:	047f9a0e 	bge	zero,r17,8022e0 <__divdf3+0x6d8>
  802478:	0009883a 	mov	r4,zero
  80247c:	05000044 	movi	r20,1
  802480:	9d27883a 	add	r19,r19,r20
  802484:	003e9506 	br	801edc <__divdf3+0x2d4>
  802488:	a08003cc 	andi	r2,r20,15
  80248c:	10800118 	cmpnei	r2,r2,4
  802490:	103e9126 	beq	r2,zero,801ed8 <__divdf3+0x2d0>
  802494:	a1000104 	addi	r4,r20,4
  802498:	00bffec4 	movi	r2,-5
  80249c:	2008d0fa 	srli	r4,r4,3
  8024a0:	1529803a 	cmpltu	r20,r2,r20
  8024a4:	003ff606 	br	802480 <__divdf3+0x878>
  8024a8:	1013883a 	mov	r9,r2
  8024ac:	003f5a06 	br	802218 <__divdf3+0x610>
  8024b0:	1011883a 	mov	r8,r2
  8024b4:	003f3906 	br	80219c <__divdf3+0x594>
  8024b8:	89bfb02e 	bgeu	r17,r6,80237c <__divdf3+0x774>
  8024bc:	8d63883a 	add	r17,r17,r21
  8024c0:	8d45803a 	cmpltu	r2,r17,r21
  8024c4:	1585883a 	add	r2,r2,r22
  8024c8:	9cffff84 	addi	r19,r19,-2
  8024cc:	1887883a 	add	r3,r3,r2
  8024d0:	003f0f06 	br	802110 <__divdf3+0x508>
  8024d4:	ad45883a 	add	r2,r21,r21
  8024d8:	156b803a 	cmpltu	r21,r2,r21
  8024dc:	adad883a 	add	r22,r21,r22
  8024e0:	358d883a 	add	r6,r6,r22
  8024e4:	a53fff84 	addi	r20,r20,-2
  8024e8:	102b883a 	mov	r21,r2
  8024ec:	313fdf26 	beq	r6,r4,80246c <__divdf3+0x864>
  8024f0:	003f7106 	br	8022b8 <__divdf3+0x6b0>
  8024f4:	a08003cc 	andi	r2,r20,15
  8024f8:	10800118 	cmpnei	r2,r2,4
  8024fc:	000b883a 	mov	r5,zero
  802500:	103f8b1e 	bne	r2,zero,802330 <__divdf3+0x728>
  802504:	2804927a 	slli	r2,r5,9
  802508:	2826977a 	slli	r19,r5,29
  80250c:	100ad33a 	srli	r5,r2,12
  802510:	003fd006 	br	802454 <__divdf3+0x84c>
  802514:	00800434 	movhi	r2,16
  802518:	99400234 	orhi	r5,r19,8
  80251c:	10bfffc4 	addi	r2,r2,-1
  802520:	288a703a 	and	r5,r5,r2
  802524:	003e7f06 	br	801f24 <__divdf3+0x31c>
  802528:	a8ffea36 	bltu	r21,r3,8024d4 <__divdf3+0x8cc>
  80252c:	1029883a 	mov	r20,r2
  802530:	1d7f611e 	bne	r3,r21,8022b8 <__divdf3+0x6b0>
  802534:	003e6506 	br	801ecc <__divdf3+0x2c4>

00802538 <__muldf3>:
  802538:	2810d53a 	srli	r8,r5,20
  80253c:	defff004 	addi	sp,sp,-64
  802540:	00800434 	movhi	r2,16
  802544:	df000e15 	stw	fp,56(sp)
  802548:	dd000a15 	stw	r20,40(sp)
  80254c:	dcc00915 	stw	r19,36(sp)
  802550:	dc400715 	stw	r17,28(sp)
  802554:	10bfffc4 	addi	r2,r2,-1
  802558:	dfc00f15 	stw	ra,60(sp)
  80255c:	ddc00d15 	stw	r23,52(sp)
  802560:	dd800c15 	stw	r22,48(sp)
  802564:	dd400b15 	stw	r21,44(sp)
  802568:	dc800815 	stw	r18,32(sp)
  80256c:	dc000615 	stw	r16,24(sp)
  802570:	4201ffcc 	andi	r8,r8,2047
  802574:	2828d7fa 	srli	r20,r5,31
  802578:	2023883a 	mov	r17,r4
  80257c:	3039883a 	mov	fp,r6
  802580:	28a6703a 	and	r19,r5,r2
  802584:	40013426 	beq	r8,zero,802a58 <__muldf3+0x520>
  802588:	4081ffe0 	cmpeqi	r2,r8,2047
  80258c:	1001461e 	bne	r2,zero,802aa8 <__muldf3+0x570>
  802590:	980a90fa 	slli	r5,r19,3
  802594:	2026d77a 	srli	r19,r4,29
  802598:	202490fa 	slli	r18,r4,3
  80259c:	423f0044 	addi	r8,r8,-1023
  8025a0:	9966b03a 	or	r19,r19,r5
  8025a4:	9cc02034 	orhi	r19,r19,128
  8025a8:	002b883a 	mov	r21,zero
  8025ac:	002d883a 	mov	r22,zero
  8025b0:	3804d53a 	srli	r2,r7,20
  8025b4:	00c00434 	movhi	r3,16
  8025b8:	18ffffc4 	addi	r3,r3,-1
  8025bc:	1081ffcc 	andi	r2,r2,2047
  8025c0:	382ed7fa 	srli	r23,r7,31
  8025c4:	38e0703a 	and	r16,r7,r3
  8025c8:	10011026 	beq	r2,zero,802a0c <__muldf3+0x4d4>
  8025cc:	10c1ffe0 	cmpeqi	r3,r2,2047
  8025d0:	18013c1e 	bne	r3,zero,802ac4 <__muldf3+0x58c>
  8025d4:	e008d77a 	srli	r4,fp,29
  8025d8:	802090fa 	slli	r16,r16,3
  8025dc:	e02290fa 	slli	r17,fp,3
  8025e0:	10bf0044 	addi	r2,r2,-1023
  8025e4:	2420b03a 	or	r16,r4,r16
  8025e8:	84002034 	orhi	r16,r16,128
  8025ec:	4091883a 	add	r8,r8,r2
  8025f0:	0009883a 	mov	r4,zero
  8025f4:	a8800428 	cmpgeui	r2,r21,16
  8025f8:	a5ccf03a 	xor	r6,r20,r23
  8025fc:	41c00044 	addi	r7,r8,1
  802600:	1000371e 	bne	r2,zero,8026e0 <__muldf3+0x1a8>
  802604:	a80490ba 	slli	r2,r21,2
  802608:	00c02034 	movhi	r3,128
  80260c:	10c7883a 	add	r3,r2,r3
  802610:	18898617 	ldw	r2,9752(r3)
  802614:	1000683a 	jmp	r2
  802618:	008026e0 	cmpeqi	r2,zero,155
  80261c:	0080265c 	xori	r2,zero,153
  802620:	0080265c 	xori	r2,zero,153
  802624:	00802658 	cmpnei	r2,zero,153
  802628:	00802668 	cmpgeui	r2,zero,153
  80262c:	00802668 	cmpgeui	r2,zero,153
  802630:	00802b38 	rdprs	r2,zero,172
  802634:	00802658 	cmpnei	r2,zero,153
  802638:	00802668 	cmpgeui	r2,zero,153
  80263c:	00802b38 	rdprs	r2,zero,172
  802640:	00802668 	cmpgeui	r2,zero,153
  802644:	00802658 	cmpnei	r2,zero,153
  802648:	00802ae0 	cmpeqi	r2,zero,171
  80264c:	00802ae0 	cmpeqi	r2,zero,171
  802650:	00802ae0 	cmpeqi	r2,zero,171
  802654:	00802bc4 	movi	r2,175
  802658:	b80d883a 	mov	r6,r23
  80265c:	8027883a 	mov	r19,r16
  802660:	8825883a 	mov	r18,r17
  802664:	202d883a 	mov	r22,r4
  802668:	b08000a0 	cmpeqi	r2,r22,2
  80266c:	1000181e 	bne	r2,zero,8026d0 <__muldf3+0x198>
  802670:	b08000e0 	cmpeqi	r2,r22,3
  802674:	1001961e 	bne	r2,zero,802cd0 <__muldf3+0x798>
  802678:	b0800060 	cmpeqi	r2,r22,1
  80267c:	1000c926 	beq	r2,zero,8029a4 <__muldf3+0x46c>
  802680:	0007883a 	mov	r3,zero
  802684:	0027883a 	mov	r19,zero
  802688:	0025883a 	mov	r18,zero
  80268c:	1806953a 	slli	r3,r3,20
  802690:	300c97fa 	slli	r6,r6,31
  802694:	9005883a 	mov	r2,r18
  802698:	1cc6b03a 	or	r3,r3,r19
  80269c:	1986b03a 	or	r3,r3,r6
  8026a0:	dfc00f17 	ldw	ra,60(sp)
  8026a4:	df000e17 	ldw	fp,56(sp)
  8026a8:	ddc00d17 	ldw	r23,52(sp)
  8026ac:	dd800c17 	ldw	r22,48(sp)
  8026b0:	dd400b17 	ldw	r21,44(sp)
  8026b4:	dd000a17 	ldw	r20,40(sp)
  8026b8:	dcc00917 	ldw	r19,36(sp)
  8026bc:	dc800817 	ldw	r18,32(sp)
  8026c0:	dc400717 	ldw	r17,28(sp)
  8026c4:	dc000617 	ldw	r16,24(sp)
  8026c8:	dec01004 	addi	sp,sp,64
  8026cc:	f800283a 	ret
  8026d0:	00c1ffc4 	movi	r3,2047
  8026d4:	0027883a 	mov	r19,zero
  8026d8:	0025883a 	mov	r18,zero
  8026dc:	003feb06 	br	80268c <__muldf3+0x154>
  8026e0:	9028d43a 	srli	r20,r18,16
  8026e4:	8f3fffcc 	andi	fp,r17,65535
  8026e8:	957fffcc 	andi	r21,r18,65535
  8026ec:	a80b883a 	mov	r5,r21
  8026f0:	e009883a 	mov	r4,fp
  8026f4:	d9800315 	stw	r6,12(sp)
  8026f8:	da000215 	stw	r8,8(sp)
  8026fc:	d9c00115 	stw	r7,4(sp)
  802700:	8822d43a 	srli	r17,r17,16
  802704:	08031b00 	call	8031b0 <__mulsi3>
  802708:	e00b883a 	mov	r5,fp
  80270c:	a009883a 	mov	r4,r20
  802710:	102d883a 	mov	r22,r2
  802714:	08031b00 	call	8031b0 <__mulsi3>
  802718:	880b883a 	mov	r5,r17
  80271c:	a009883a 	mov	r4,r20
  802720:	102f883a 	mov	r23,r2
  802724:	08031b00 	call	8031b0 <__mulsi3>
  802728:	a80b883a 	mov	r5,r21
  80272c:	8809883a 	mov	r4,r17
  802730:	d8800015 	stw	r2,0(sp)
  802734:	08031b00 	call	8031b0 <__mulsi3>
  802738:	b006d43a 	srli	r3,r22,16
  80273c:	15e5883a 	add	r18,r2,r23
  802740:	d9c00117 	ldw	r7,4(sp)
  802744:	1c87883a 	add	r3,r3,r18
  802748:	da000217 	ldw	r8,8(sp)
  80274c:	d9800317 	ldw	r6,12(sp)
  802750:	1dc0042e 	bgeu	r3,r23,802764 <__muldf3+0x22c>
  802754:	d9000017 	ldw	r4,0(sp)
  802758:	00800074 	movhi	r2,1
  80275c:	2085883a 	add	r2,r4,r2
  802760:	d8800015 	stw	r2,0(sp)
  802764:	1804943a 	slli	r2,r3,16
  802768:	85ffffcc 	andi	r23,r16,65535
  80276c:	b5bfffcc 	andi	r22,r22,65535
  802770:	1585883a 	add	r2,r2,r22
  802774:	a80b883a 	mov	r5,r21
  802778:	b809883a 	mov	r4,r23
  80277c:	1824d43a 	srli	r18,r3,16
  802780:	d9800515 	stw	r6,20(sp)
  802784:	da000415 	stw	r8,16(sp)
  802788:	d9c00315 	stw	r7,12(sp)
  80278c:	8020d43a 	srli	r16,r16,16
  802790:	d8800115 	stw	r2,4(sp)
  802794:	08031b00 	call	8031b0 <__mulsi3>
  802798:	a009883a 	mov	r4,r20
  80279c:	b80b883a 	mov	r5,r23
  8027a0:	d8800215 	stw	r2,8(sp)
  8027a4:	08031b00 	call	8031b0 <__mulsi3>
  8027a8:	a009883a 	mov	r4,r20
  8027ac:	800b883a 	mov	r5,r16
  8027b0:	102d883a 	mov	r22,r2
  8027b4:	08031b00 	call	8031b0 <__mulsi3>
  8027b8:	a80b883a 	mov	r5,r21
  8027bc:	8009883a 	mov	r4,r16
  8027c0:	1029883a 	mov	r20,r2
  8027c4:	08031b00 	call	8031b0 <__mulsi3>
  8027c8:	da800217 	ldw	r10,8(sp)
  8027cc:	1585883a 	add	r2,r2,r22
  8027d0:	d9c00317 	ldw	r7,12(sp)
  8027d4:	5006d43a 	srli	r3,r10,16
  8027d8:	da000417 	ldw	r8,16(sp)
  8027dc:	d9800517 	ldw	r6,20(sp)
  8027e0:	1887883a 	add	r3,r3,r2
  8027e4:	1d80022e 	bgeu	r3,r22,8027f0 <__muldf3+0x2b8>
  8027e8:	00800074 	movhi	r2,1
  8027ec:	a0a9883a 	add	r20,r20,r2
  8027f0:	1804d43a 	srli	r2,r3,16
  8027f4:	1806943a 	slli	r3,r3,16
  8027f8:	982cd43a 	srli	r22,r19,16
  8027fc:	9d7fffcc 	andi	r21,r19,65535
  802800:	e009883a 	mov	r4,fp
  802804:	54ffffcc 	andi	r19,r10,65535
  802808:	a80b883a 	mov	r5,r21
  80280c:	1ce7883a 	add	r19,r3,r19
  802810:	d9800515 	stw	r6,20(sp)
  802814:	da000415 	stw	r8,16(sp)
  802818:	d9c00315 	stw	r7,12(sp)
  80281c:	1529883a 	add	r20,r2,r20
  802820:	08031b00 	call	8031b0 <__mulsi3>
  802824:	e00b883a 	mov	r5,fp
  802828:	b009883a 	mov	r4,r22
  80282c:	d8800215 	stw	r2,8(sp)
  802830:	08031b00 	call	8031b0 <__mulsi3>
  802834:	8809883a 	mov	r4,r17
  802838:	b00b883a 	mov	r5,r22
  80283c:	1039883a 	mov	fp,r2
  802840:	08031b00 	call	8031b0 <__mulsi3>
  802844:	8809883a 	mov	r4,r17
  802848:	a80b883a 	mov	r5,r21
  80284c:	1023883a 	mov	r17,r2
  802850:	08031b00 	call	8031b0 <__mulsi3>
  802854:	d8c00217 	ldw	r3,8(sp)
  802858:	1705883a 	add	r2,r2,fp
  80285c:	d9c00317 	ldw	r7,12(sp)
  802860:	1808d43a 	srli	r4,r3,16
  802864:	da000417 	ldw	r8,16(sp)
  802868:	d9800517 	ldw	r6,20(sp)
  80286c:	2089883a 	add	r4,r4,r2
  802870:	94e5883a 	add	r18,r18,r19
  802874:	2700022e 	bgeu	r4,fp,802880 <__muldf3+0x348>
  802878:	00800074 	movhi	r2,1
  80287c:	88a3883a 	add	r17,r17,r2
  802880:	2004d43a 	srli	r2,r4,16
  802884:	2038943a 	slli	fp,r4,16
  802888:	18ffffcc 	andi	r3,r3,65535
  80288c:	b809883a 	mov	r4,r23
  802890:	a80b883a 	mov	r5,r21
  802894:	d9800415 	stw	r6,16(sp)
  802898:	da000315 	stw	r8,12(sp)
  80289c:	d9c00215 	stw	r7,8(sp)
  8028a0:	e0f9883a 	add	fp,fp,r3
  8028a4:	1463883a 	add	r17,r2,r17
  8028a8:	08031b00 	call	8031b0 <__mulsi3>
  8028ac:	b80b883a 	mov	r5,r23
  8028b0:	b009883a 	mov	r4,r22
  8028b4:	102f883a 	mov	r23,r2
  8028b8:	08031b00 	call	8031b0 <__mulsi3>
  8028bc:	b00b883a 	mov	r5,r22
  8028c0:	8009883a 	mov	r4,r16
  8028c4:	102d883a 	mov	r22,r2
  8028c8:	08031b00 	call	8031b0 <__mulsi3>
  8028cc:	a80b883a 	mov	r5,r21
  8028d0:	8009883a 	mov	r4,r16
  8028d4:	1021883a 	mov	r16,r2
  8028d8:	08031b00 	call	8031b0 <__mulsi3>
  8028dc:	b80ad43a 	srli	r5,r23,16
  8028e0:	1585883a 	add	r2,r2,r22
  8028e4:	d9c00217 	ldw	r7,8(sp)
  8028e8:	288b883a 	add	r5,r5,r2
  8028ec:	da000317 	ldw	r8,12(sp)
  8028f0:	d9800417 	ldw	r6,16(sp)
  8028f4:	2d80022e 	bgeu	r5,r22,802900 <__muldf3+0x3c8>
  8028f8:	00800074 	movhi	r2,1
  8028fc:	80a1883a 	add	r16,r16,r2
  802900:	2806943a 	slli	r3,r5,16
  802904:	d8800017 	ldw	r2,0(sp)
  802908:	bdffffcc 	andi	r23,r23,65535
  80290c:	1dc7883a 	add	r3,r3,r23
  802910:	90ab883a 	add	r21,r18,r2
  802914:	acd5803a 	cmpltu	r10,r21,r19
  802918:	1d07883a 	add	r3,r3,r20
  80291c:	af2b883a 	add	r21,r21,fp
  802920:	1a97883a 	add	r11,r3,r10
  802924:	af09803a 	cmpltu	r4,r21,fp
  802928:	2826d43a 	srli	r19,r5,16
  80292c:	5c53883a 	add	r9,r11,r17
  802930:	4905883a 	add	r2,r9,r4
  802934:	1d07803a 	cmpltu	r3,r3,r20
  802938:	5a95803a 	cmpltu	r10,r11,r10
  80293c:	1a86b03a 	or	r3,r3,r10
  802940:	1109803a 	cmpltu	r4,r2,r4
  802944:	4c53803a 	cmpltu	r9,r9,r17
  802948:	1ce7883a 	add	r19,r3,r19
  80294c:	4908b03a 	or	r4,r9,r4
  802950:	a824927a 	slli	r18,r21,9
  802954:	d8c00117 	ldw	r3,4(sp)
  802958:	9927883a 	add	r19,r19,r4
  80295c:	9c27883a 	add	r19,r19,r16
  802960:	9826927a 	slli	r19,r19,9
  802964:	a82ad5fa 	srli	r21,r21,23
  802968:	100ad5fa 	srli	r5,r2,23
  80296c:	90e4b03a 	or	r18,r18,r3
  802970:	1004927a 	slli	r2,r2,9
  802974:	9024c03a 	cmpne	r18,r18,zero
  802978:	9564b03a 	or	r18,r18,r21
  80297c:	98c0402c 	andhi	r3,r19,256
  802980:	90a4b03a 	or	r18,r18,r2
  802984:	9966b03a 	or	r19,r19,r5
  802988:	1800b626 	beq	r3,zero,802c64 <__muldf3+0x72c>
  80298c:	9006d07a 	srli	r3,r18,1
  802990:	980497fa 	slli	r2,r19,31
  802994:	9480004c 	andi	r18,r18,1
  802998:	9826d07a 	srli	r19,r19,1
  80299c:	1c86b03a 	or	r3,r3,r18
  8029a0:	18a4b03a 	or	r18,r3,r2
  8029a4:	3900ffc4 	addi	r4,r7,1023
  8029a8:	0100690e 	bge	zero,r4,802b50 <__muldf3+0x618>
  8029ac:	908001cc 	andi	r2,r18,7
  8029b0:	10000726 	beq	r2,zero,8029d0 <__muldf3+0x498>
  8029b4:	908003cc 	andi	r2,r18,15
  8029b8:	10800120 	cmpeqi	r2,r2,4
  8029bc:	1000041e 	bne	r2,zero,8029d0 <__muldf3+0x498>
  8029c0:	90800104 	addi	r2,r18,4
  8029c4:	14a5803a 	cmpltu	r18,r2,r18
  8029c8:	9ca7883a 	add	r19,r19,r18
  8029cc:	1025883a 	mov	r18,r2
  8029d0:	9880402c 	andhi	r2,r19,256
  8029d4:	10000426 	beq	r2,zero,8029e8 <__muldf3+0x4b0>
  8029d8:	00bfc034 	movhi	r2,65280
  8029dc:	10bfffc4 	addi	r2,r2,-1
  8029e0:	98a6703a 	and	r19,r19,r2
  8029e4:	39010004 	addi	r4,r7,1024
  8029e8:	2081ffc8 	cmpgei	r2,r4,2047
  8029ec:	103f381e 	bne	r2,zero,8026d0 <__muldf3+0x198>
  8029f0:	9804977a 	slli	r2,r19,29
  8029f4:	9024d0fa 	srli	r18,r18,3
  8029f8:	9826927a 	slli	r19,r19,9
  8029fc:	20c1ffcc 	andi	r3,r4,2047
  802a00:	14a4b03a 	or	r18,r2,r18
  802a04:	9826d33a 	srli	r19,r19,12
  802a08:	003f2006 	br	80268c <__muldf3+0x154>
  802a0c:	8722b03a 	or	r17,r16,fp
  802a10:	88004526 	beq	r17,zero,802b28 <__muldf3+0x5f0>
  802a14:	da000015 	stw	r8,0(sp)
  802a18:	80008626 	beq	r16,zero,802c34 <__muldf3+0x6fc>
  802a1c:	8009883a 	mov	r4,r16
  802a20:	0802fa80 	call	802fa8 <__clzsi2>
  802a24:	da000017 	ldw	r8,0(sp)
  802a28:	117ffd44 	addi	r5,r2,-11
  802a2c:	01000744 	movi	r4,29
  802a30:	147ffe04 	addi	r17,r2,-8
  802a34:	2149c83a 	sub	r4,r4,r5
  802a38:	8460983a 	sll	r16,r16,r17
  802a3c:	e108d83a 	srl	r4,fp,r4
  802a40:	e462983a 	sll	r17,fp,r17
  802a44:	2420b03a 	or	r16,r4,r16
  802a48:	4091c83a 	sub	r8,r8,r2
  802a4c:	423f0344 	addi	r8,r8,-1011
  802a50:	0009883a 	mov	r4,zero
  802a54:	003ee706 	br	8025f4 <__muldf3+0xbc>
  802a58:	9924b03a 	or	r18,r19,r4
  802a5c:	90002d26 	beq	r18,zero,802b14 <__muldf3+0x5dc>
  802a60:	d9c00015 	stw	r7,0(sp)
  802a64:	98006826 	beq	r19,zero,802c08 <__muldf3+0x6d0>
  802a68:	9809883a 	mov	r4,r19
  802a6c:	0802fa80 	call	802fa8 <__clzsi2>
  802a70:	d9c00017 	ldw	r7,0(sp)
  802a74:	113ffd44 	addi	r4,r2,-11
  802a78:	00c00744 	movi	r3,29
  802a7c:	14bffe04 	addi	r18,r2,-8
  802a80:	1907c83a 	sub	r3,r3,r4
  802a84:	9ca6983a 	sll	r19,r19,r18
  802a88:	88c6d83a 	srl	r3,r17,r3
  802a8c:	8ca4983a 	sll	r18,r17,r18
  802a90:	1ce6b03a 	or	r19,r3,r19
  802a94:	023f0344 	movi	r8,-1011
  802a98:	4091c83a 	sub	r8,r8,r2
  802a9c:	002b883a 	mov	r21,zero
  802aa0:	002d883a 	mov	r22,zero
  802aa4:	003ec206 	br	8025b0 <__muldf3+0x78>
  802aa8:	9924b03a 	or	r18,r19,r4
  802aac:	9000141e 	bne	r18,zero,802b00 <__muldf3+0x5c8>
  802ab0:	0027883a 	mov	r19,zero
  802ab4:	05400204 	movi	r21,8
  802ab8:	0201ffc4 	movi	r8,2047
  802abc:	05800084 	movi	r22,2
  802ac0:	003ebb06 	br	8025b0 <__muldf3+0x78>
  802ac4:	8722b03a 	or	r17,r16,fp
  802ac8:	4201ffc4 	addi	r8,r8,2047
  802acc:	8800081e 	bne	r17,zero,802af0 <__muldf3+0x5b8>
  802ad0:	ad400094 	ori	r21,r21,2
  802ad4:	0021883a 	mov	r16,zero
  802ad8:	01000084 	movi	r4,2
  802adc:	003ec506 	br	8025f4 <__muldf3+0xbc>
  802ae0:	b08000a0 	cmpeqi	r2,r22,2
  802ae4:	a00d883a 	mov	r6,r20
  802ae8:	103ee126 	beq	r2,zero,802670 <__muldf3+0x138>
  802aec:	003ef806 	br	8026d0 <__muldf3+0x198>
  802af0:	ad4000d4 	ori	r21,r21,3
  802af4:	e023883a 	mov	r17,fp
  802af8:	010000c4 	movi	r4,3
  802afc:	003ebd06 	br	8025f4 <__muldf3+0xbc>
  802b00:	2025883a 	mov	r18,r4
  802b04:	05400304 	movi	r21,12
  802b08:	0201ffc4 	movi	r8,2047
  802b0c:	058000c4 	movi	r22,3
  802b10:	003ea706 	br	8025b0 <__muldf3+0x78>
  802b14:	0027883a 	mov	r19,zero
  802b18:	05400104 	movi	r21,4
  802b1c:	0011883a 	mov	r8,zero
  802b20:	05800044 	movi	r22,1
  802b24:	003ea206 	br	8025b0 <__muldf3+0x78>
  802b28:	ad400054 	ori	r21,r21,1
  802b2c:	0021883a 	mov	r16,zero
  802b30:	01000044 	movi	r4,1
  802b34:	003eaf06 	br	8025f4 <__muldf3+0xbc>
  802b38:	04c00434 	movhi	r19,16
  802b3c:	000d883a 	mov	r6,zero
  802b40:	9cffffc4 	addi	r19,r19,-1
  802b44:	04bfffc4 	movi	r18,-1
  802b48:	00c1ffc4 	movi	r3,2047
  802b4c:	003ecf06 	br	80268c <__muldf3+0x154>
  802b50:	00800044 	movi	r2,1
  802b54:	1105c83a 	sub	r2,r2,r4
  802b58:	10c00e48 	cmpgei	r3,r2,57
  802b5c:	183ec81e 	bne	r3,zero,802680 <__muldf3+0x148>
  802b60:	10c00808 	cmpgei	r3,r2,32
  802b64:	1800411e 	bne	r3,zero,802c6c <__muldf3+0x734>
  802b68:	39c10784 	addi	r7,r7,1054
  802b6c:	99c6983a 	sll	r3,r19,r7
  802b70:	9088d83a 	srl	r4,r18,r2
  802b74:	91ce983a 	sll	r7,r18,r7
  802b78:	98a6d83a 	srl	r19,r19,r2
  802b7c:	1904b03a 	or	r2,r3,r4
  802b80:	3824c03a 	cmpne	r18,r7,zero
  802b84:	1484b03a 	or	r2,r2,r18
  802b88:	10c001cc 	andi	r3,r2,7
  802b8c:	18000726 	beq	r3,zero,802bac <__muldf3+0x674>
  802b90:	10c003cc 	andi	r3,r2,15
  802b94:	18c00120 	cmpeqi	r3,r3,4
  802b98:	1800041e 	bne	r3,zero,802bac <__muldf3+0x674>
  802b9c:	10c00104 	addi	r3,r2,4
  802ba0:	1885803a 	cmpltu	r2,r3,r2
  802ba4:	98a7883a 	add	r19,r19,r2
  802ba8:	1805883a 	mov	r2,r3
  802bac:	98c0202c 	andhi	r3,r19,128
  802bb0:	18004326 	beq	r3,zero,802cc0 <__muldf3+0x788>
  802bb4:	00c00044 	movi	r3,1
  802bb8:	0027883a 	mov	r19,zero
  802bbc:	0025883a 	mov	r18,zero
  802bc0:	003eb206 	br	80268c <__muldf3+0x154>
  802bc4:	9880022c 	andhi	r2,r19,8
  802bc8:	10000926 	beq	r2,zero,802bf0 <__muldf3+0x6b8>
  802bcc:	8080022c 	andhi	r2,r16,8
  802bd0:	1000071e 	bne	r2,zero,802bf0 <__muldf3+0x6b8>
  802bd4:	00800434 	movhi	r2,16
  802bd8:	84c00234 	orhi	r19,r16,8
  802bdc:	10bfffc4 	addi	r2,r2,-1
  802be0:	98a6703a 	and	r19,r19,r2
  802be4:	b80d883a 	mov	r6,r23
  802be8:	8825883a 	mov	r18,r17
  802bec:	003fd606 	br	802b48 <__muldf3+0x610>
  802bf0:	00800434 	movhi	r2,16
  802bf4:	9cc00234 	orhi	r19,r19,8
  802bf8:	10bfffc4 	addi	r2,r2,-1
  802bfc:	98a6703a 	and	r19,r19,r2
  802c00:	a00d883a 	mov	r6,r20
  802c04:	003fd006 	br	802b48 <__muldf3+0x610>
  802c08:	0802fa80 	call	802fa8 <__clzsi2>
  802c0c:	11000544 	addi	r4,r2,21
  802c10:	21400748 	cmpgei	r5,r4,29
  802c14:	1007883a 	mov	r3,r2
  802c18:	d9c00017 	ldw	r7,0(sp)
  802c1c:	10800804 	addi	r2,r2,32
  802c20:	283f9526 	beq	r5,zero,802a78 <__muldf3+0x540>
  802c24:	18fffe04 	addi	r3,r3,-8
  802c28:	88e6983a 	sll	r19,r17,r3
  802c2c:	0025883a 	mov	r18,zero
  802c30:	003f9806 	br	802a94 <__muldf3+0x55c>
  802c34:	e009883a 	mov	r4,fp
  802c38:	0802fa80 	call	802fa8 <__clzsi2>
  802c3c:	11400544 	addi	r5,r2,21
  802c40:	29000748 	cmpgei	r4,r5,29
  802c44:	1007883a 	mov	r3,r2
  802c48:	da000017 	ldw	r8,0(sp)
  802c4c:	10800804 	addi	r2,r2,32
  802c50:	203f7626 	beq	r4,zero,802a2c <__muldf3+0x4f4>
  802c54:	1c3ffe04 	addi	r16,r3,-8
  802c58:	e420983a 	sll	r16,fp,r16
  802c5c:	0023883a 	mov	r17,zero
  802c60:	003f7906 	br	802a48 <__muldf3+0x510>
  802c64:	400f883a 	mov	r7,r8
  802c68:	003f4e06 	br	8029a4 <__muldf3+0x46c>
  802c6c:	00fff844 	movi	r3,-31
  802c70:	1907c83a 	sub	r3,r3,r4
  802c74:	10800820 	cmpeqi	r2,r2,32
  802c78:	98c6d83a 	srl	r3,r19,r3
  802c7c:	1000031e 	bne	r2,zero,802c8c <__muldf3+0x754>
  802c80:	39c10f84 	addi	r7,r7,1086
  802c84:	99e6983a 	sll	r19,r19,r7
  802c88:	94e4b03a 	or	r18,r18,r19
  802c8c:	9024c03a 	cmpne	r18,r18,zero
  802c90:	90c4b03a 	or	r2,r18,r3
  802c94:	148001cc 	andi	r18,r2,7
  802c98:	9000051e 	bne	r18,zero,802cb0 <__muldf3+0x778>
  802c9c:	0027883a 	mov	r19,zero
  802ca0:	1004d0fa 	srli	r2,r2,3
  802ca4:	0007883a 	mov	r3,zero
  802ca8:	14a4b03a 	or	r18,r2,r18
  802cac:	003e7706 	br	80268c <__muldf3+0x154>
  802cb0:	10c003cc 	andi	r3,r2,15
  802cb4:	18c00118 	cmpnei	r3,r3,4
  802cb8:	0027883a 	mov	r19,zero
  802cbc:	183fb71e 	bne	r3,zero,802b9c <__muldf3+0x664>
  802cc0:	9806927a 	slli	r3,r19,9
  802cc4:	9824977a 	slli	r18,r19,29
  802cc8:	1826d33a 	srli	r19,r3,12
  802ccc:	003ff406 	br	802ca0 <__muldf3+0x768>
  802cd0:	00800434 	movhi	r2,16
  802cd4:	9cc00234 	orhi	r19,r19,8
  802cd8:	10bfffc4 	addi	r2,r2,-1
  802cdc:	98a6703a 	and	r19,r19,r2
  802ce0:	003f9906 	br	802b48 <__muldf3+0x610>

00802ce4 <__fixdfsi>:
  802ce4:	2806d53a 	srli	r3,r5,20
  802ce8:	01800434 	movhi	r6,16
  802cec:	31bfffc4 	addi	r6,r6,-1
  802cf0:	18c1ffcc 	andi	r3,r3,2047
  802cf4:	19c0ffd0 	cmplti	r7,r3,1023
  802cf8:	2810d7fa 	srli	r8,r5,31
  802cfc:	298a703a 	and	r5,r5,r6
  802d00:	3800061e 	bne	r7,zero,802d1c <__fixdfsi+0x38>
  802d04:	18810790 	cmplti	r2,r3,1054
  802d08:	1000061e 	bne	r2,zero,802d24 <__fixdfsi+0x40>
  802d0c:	00a00034 	movhi	r2,32768
  802d10:	10bfffc4 	addi	r2,r2,-1
  802d14:	4085883a 	add	r2,r8,r2
  802d18:	f800283a 	ret
  802d1c:	0005883a 	mov	r2,zero
  802d20:	f800283a 	ret
  802d24:	01810cc4 	movi	r6,1075
  802d28:	30cdc83a 	sub	r6,r6,r3
  802d2c:	30800808 	cmpgei	r2,r6,32
  802d30:	29400434 	orhi	r5,r5,16
  802d34:	1000071e 	bne	r2,zero,802d54 <__fixdfsi+0x70>
  802d38:	18befb44 	addi	r2,r3,-1043
  802d3c:	2884983a 	sll	r2,r5,r2
  802d40:	2188d83a 	srl	r4,r4,r6
  802d44:	1104b03a 	or	r2,r2,r4
  802d48:	403ff526 	beq	r8,zero,802d20 <__fixdfsi+0x3c>
  802d4c:	0085c83a 	sub	r2,zero,r2
  802d50:	f800283a 	ret
  802d54:	008104c4 	movi	r2,1043
  802d58:	10c5c83a 	sub	r2,r2,r3
  802d5c:	2884d83a 	srl	r2,r5,r2
  802d60:	003ff906 	br	802d48 <__fixdfsi+0x64>

00802d64 <__floatsidf>:
  802d64:	defffd04 	addi	sp,sp,-12
  802d68:	dfc00215 	stw	ra,8(sp)
  802d6c:	dc400115 	stw	r17,4(sp)
  802d70:	dc000015 	stw	r16,0(sp)
  802d74:	20001326 	beq	r4,zero,802dc4 <__floatsidf+0x60>
  802d78:	2022d7fa 	srli	r17,r4,31
  802d7c:	2021883a 	mov	r16,r4
  802d80:	20002416 	blt	r4,zero,802e14 <__floatsidf+0xb0>
  802d84:	8009883a 	mov	r4,r16
  802d88:	0802fa80 	call	802fa8 <__clzsi2>
  802d8c:	01010784 	movi	r4,1054
  802d90:	2089c83a 	sub	r4,r4,r2
  802d94:	114002c8 	cmpgei	r5,r2,11
  802d98:	20c1ffcc 	andi	r3,r4,2047
  802d9c:	2800161e 	bne	r5,zero,802df8 <__floatsidf+0x94>
  802da0:	010002c4 	movi	r4,11
  802da4:	2089c83a 	sub	r4,r4,r2
  802da8:	810ad83a 	srl	r5,r16,r4
  802dac:	01000434 	movhi	r4,16
  802db0:	10800544 	addi	r2,r2,21
  802db4:	213fffc4 	addi	r4,r4,-1
  802db8:	8084983a 	sll	r2,r16,r2
  802dbc:	290a703a 	and	r5,r5,r4
  802dc0:	00000406 	br	802dd4 <__floatsidf+0x70>
  802dc4:	0023883a 	mov	r17,zero
  802dc8:	0007883a 	mov	r3,zero
  802dcc:	000b883a 	mov	r5,zero
  802dd0:	0005883a 	mov	r2,zero
  802dd4:	1808953a 	slli	r4,r3,20
  802dd8:	880697fa 	slli	r3,r17,31
  802ddc:	2148b03a 	or	r4,r4,r5
  802de0:	20c6b03a 	or	r3,r4,r3
  802de4:	dfc00217 	ldw	ra,8(sp)
  802de8:	dc400117 	ldw	r17,4(sp)
  802dec:	dc000017 	ldw	r16,0(sp)
  802df0:	dec00304 	addi	sp,sp,12
  802df4:	f800283a 	ret
  802df8:	10bffd44 	addi	r2,r2,-11
  802dfc:	808a983a 	sll	r5,r16,r2
  802e00:	00800434 	movhi	r2,16
  802e04:	10bfffc4 	addi	r2,r2,-1
  802e08:	288a703a 	and	r5,r5,r2
  802e0c:	0005883a 	mov	r2,zero
  802e10:	003ff006 	br	802dd4 <__floatsidf+0x70>
  802e14:	0121c83a 	sub	r16,zero,r4
  802e18:	003fda06 	br	802d84 <__floatsidf+0x20>

00802e1c <__floatunsidf>:
  802e1c:	defffe04 	addi	sp,sp,-8
  802e20:	dc000015 	stw	r16,0(sp)
  802e24:	dfc00115 	stw	ra,4(sp)
  802e28:	2021883a 	mov	r16,r4
  802e2c:	20000f26 	beq	r4,zero,802e6c <__floatunsidf+0x50>
  802e30:	0802fa80 	call	802fa8 <__clzsi2>
  802e34:	00c10784 	movi	r3,1054
  802e38:	1887c83a 	sub	r3,r3,r2
  802e3c:	110002c8 	cmpgei	r4,r2,11
  802e40:	18c1ffcc 	andi	r3,r3,2047
  802e44:	2000121e 	bne	r4,zero,802e90 <__floatunsidf+0x74>
  802e48:	014002c4 	movi	r5,11
  802e4c:	288bc83a 	sub	r5,r5,r2
  802e50:	814ad83a 	srl	r5,r16,r5
  802e54:	01000434 	movhi	r4,16
  802e58:	10800544 	addi	r2,r2,21
  802e5c:	213fffc4 	addi	r4,r4,-1
  802e60:	80a0983a 	sll	r16,r16,r2
  802e64:	290a703a 	and	r5,r5,r4
  802e68:	00000206 	br	802e74 <__floatunsidf+0x58>
  802e6c:	0007883a 	mov	r3,zero
  802e70:	000b883a 	mov	r5,zero
  802e74:	1806953a 	slli	r3,r3,20
  802e78:	8005883a 	mov	r2,r16
  802e7c:	1946b03a 	or	r3,r3,r5
  802e80:	dfc00117 	ldw	ra,4(sp)
  802e84:	dc000017 	ldw	r16,0(sp)
  802e88:	dec00204 	addi	sp,sp,8
  802e8c:	f800283a 	ret
  802e90:	117ffd44 	addi	r5,r2,-11
  802e94:	814a983a 	sll	r5,r16,r5
  802e98:	00800434 	movhi	r2,16
  802e9c:	10bfffc4 	addi	r2,r2,-1
  802ea0:	288a703a 	and	r5,r5,r2
  802ea4:	0021883a 	mov	r16,zero
  802ea8:	003ff206 	br	802e74 <__floatunsidf+0x58>

00802eac <__extendsfdf2>:
  802eac:	200ad5fa 	srli	r5,r4,23
  802eb0:	defffd04 	addi	sp,sp,-12
  802eb4:	dc000015 	stw	r16,0(sp)
  802eb8:	29403fcc 	andi	r5,r5,255
  802ebc:	04002034 	movhi	r16,128
  802ec0:	28800044 	addi	r2,r5,1
  802ec4:	dc400115 	stw	r17,4(sp)
  802ec8:	843fffc4 	addi	r16,r16,-1
  802ecc:	dfc00215 	stw	ra,8(sp)
  802ed0:	10803f8c 	andi	r2,r2,254
  802ed4:	2022d7fa 	srli	r17,r4,31
  802ed8:	8120703a 	and	r16,r16,r4
  802edc:	10000d26 	beq	r2,zero,802f14 <__extendsfdf2+0x68>
  802ee0:	8008d0fa 	srli	r4,r16,3
  802ee4:	8020977a 	slli	r16,r16,29
  802ee8:	28c0e004 	addi	r3,r5,896
  802eec:	180a953a 	slli	r5,r3,20
  802ef0:	880697fa 	slli	r3,r17,31
  802ef4:	8005883a 	mov	r2,r16
  802ef8:	290ab03a 	or	r5,r5,r4
  802efc:	28c6b03a 	or	r3,r5,r3
  802f00:	dfc00217 	ldw	ra,8(sp)
  802f04:	dc400117 	ldw	r17,4(sp)
  802f08:	dc000017 	ldw	r16,0(sp)
  802f0c:	dec00304 	addi	sp,sp,12
  802f10:	f800283a 	ret
  802f14:	2800111e 	bne	r5,zero,802f5c <__extendsfdf2+0xb0>
  802f18:	80001926 	beq	r16,zero,802f80 <__extendsfdf2+0xd4>
  802f1c:	8009883a 	mov	r4,r16
  802f20:	0802fa80 	call	802fa8 <__clzsi2>
  802f24:	10c002c8 	cmpgei	r3,r2,11
  802f28:	18001b1e 	bne	r3,zero,802f98 <__extendsfdf2+0xec>
  802f2c:	010002c4 	movi	r4,11
  802f30:	2089c83a 	sub	r4,r4,r2
  802f34:	10c00544 	addi	r3,r2,21
  802f38:	810ad83a 	srl	r5,r16,r4
  802f3c:	80e0983a 	sll	r16,r16,r3
  802f40:	01000434 	movhi	r4,16
  802f44:	00c0e244 	movi	r3,905
  802f48:	213fffc4 	addi	r4,r4,-1
  802f4c:	1887c83a 	sub	r3,r3,r2
  802f50:	2908703a 	and	r4,r5,r4
  802f54:	18c1ffcc 	andi	r3,r3,2047
  802f58:	003fe406 	br	802eec <__extendsfdf2+0x40>
  802f5c:	80000b26 	beq	r16,zero,802f8c <__extendsfdf2+0xe0>
  802f60:	800ad0fa 	srli	r5,r16,3
  802f64:	00800434 	movhi	r2,16
  802f68:	10bfffc4 	addi	r2,r2,-1
  802f6c:	29000234 	orhi	r4,r5,8
  802f70:	8020977a 	slli	r16,r16,29
  802f74:	2088703a 	and	r4,r4,r2
  802f78:	00c1ffc4 	movi	r3,2047
  802f7c:	003fdb06 	br	802eec <__extendsfdf2+0x40>
  802f80:	0007883a 	mov	r3,zero
  802f84:	0009883a 	mov	r4,zero
  802f88:	003fd806 	br	802eec <__extendsfdf2+0x40>
  802f8c:	00c1ffc4 	movi	r3,2047
  802f90:	0009883a 	mov	r4,zero
  802f94:	003fd506 	br	802eec <__extendsfdf2+0x40>
  802f98:	113ffd44 	addi	r4,r2,-11
  802f9c:	810a983a 	sll	r5,r16,r4
  802fa0:	0021883a 	mov	r16,zero
  802fa4:	003fe606 	br	802f40 <__extendsfdf2+0x94>

00802fa8 <__clzsi2>:
  802fa8:	00bfffd4 	movui	r2,65535
  802fac:	11000436 	bltu	r2,r4,802fc0 <__clzsi2+0x18>
  802fb0:	20804030 	cmpltui	r2,r4,256
  802fb4:	10000e26 	beq	r2,zero,802ff0 <__clzsi2+0x48>
  802fb8:	01400804 	movi	r5,32
  802fbc:	00000406 	br	802fd0 <__clzsi2+0x28>
  802fc0:	00804034 	movhi	r2,256
  802fc4:	20800736 	bltu	r4,r2,802fe4 <__clzsi2+0x3c>
  802fc8:	2008d63a 	srli	r4,r4,24
  802fcc:	01400204 	movi	r5,8
  802fd0:	00c02074 	movhi	r3,129
  802fd4:	20c7883a 	add	r3,r4,r3
  802fd8:	18895b03 	ldbu	r2,9580(r3)
  802fdc:	2885c83a 	sub	r2,r5,r2
  802fe0:	f800283a 	ret
  802fe4:	2008d43a 	srli	r4,r4,16
  802fe8:	01400404 	movi	r5,16
  802fec:	003ff806 	br	802fd0 <__clzsi2+0x28>
  802ff0:	2008d23a 	srli	r4,r4,8
  802ff4:	01400604 	movi	r5,24
  802ff8:	003ff506 	br	802fd0 <__clzsi2+0x28>

00802ffc <__divsi3>:
  802ffc:	20001a16 	blt	r4,zero,803068 <__divsi3+0x6c>
  803000:	000f883a 	mov	r7,zero
  803004:	2800020e 	bge	r5,zero,803010 <__divsi3+0x14>
  803008:	014bc83a 	sub	r5,zero,r5
  80300c:	39c0005c 	xori	r7,r7,1
  803010:	200d883a 	mov	r6,r4
  803014:	00c00044 	movi	r3,1
  803018:	2900092e 	bgeu	r5,r4,803040 <__divsi3+0x44>
  80301c:	00800804 	movi	r2,32
  803020:	00c00044 	movi	r3,1
  803024:	00000106 	br	80302c <__divsi3+0x30>
  803028:	10001226 	beq	r2,zero,803074 <__divsi3+0x78>
  80302c:	294b883a 	add	r5,r5,r5
  803030:	10bfffc4 	addi	r2,r2,-1
  803034:	18c7883a 	add	r3,r3,r3
  803038:	293ffb36 	bltu	r5,r4,803028 <__divsi3+0x2c>
  80303c:	18000d26 	beq	r3,zero,803074 <__divsi3+0x78>
  803040:	0005883a 	mov	r2,zero
  803044:	31400236 	bltu	r6,r5,803050 <__divsi3+0x54>
  803048:	314dc83a 	sub	r6,r6,r5
  80304c:	10c4b03a 	or	r2,r2,r3
  803050:	1806d07a 	srli	r3,r3,1
  803054:	280ad07a 	srli	r5,r5,1
  803058:	183ffa1e 	bne	r3,zero,803044 <__divsi3+0x48>
  80305c:	38000126 	beq	r7,zero,803064 <__divsi3+0x68>
  803060:	0085c83a 	sub	r2,zero,r2
  803064:	f800283a 	ret
  803068:	0109c83a 	sub	r4,zero,r4
  80306c:	01c00044 	movi	r7,1
  803070:	003fe406 	br	803004 <__divsi3+0x8>
  803074:	0005883a 	mov	r2,zero
  803078:	003ff806 	br	80305c <__divsi3+0x60>

0080307c <__modsi3>:
  80307c:	20001916 	blt	r4,zero,8030e4 <__modsi3+0x68>
  803080:	000f883a 	mov	r7,zero
  803084:	2005883a 	mov	r2,r4
  803088:	2800010e 	bge	r5,zero,803090 <__modsi3+0x14>
  80308c:	014bc83a 	sub	r5,zero,r5
  803090:	00c00044 	movi	r3,1
  803094:	2900092e 	bgeu	r5,r4,8030bc <__modsi3+0x40>
  803098:	01800804 	movi	r6,32
  80309c:	00c00044 	movi	r3,1
  8030a0:	00000106 	br	8030a8 <__modsi3+0x2c>
  8030a4:	30000d26 	beq	r6,zero,8030dc <__modsi3+0x60>
  8030a8:	294b883a 	add	r5,r5,r5
  8030ac:	31bfffc4 	addi	r6,r6,-1
  8030b0:	18c7883a 	add	r3,r3,r3
  8030b4:	293ffb36 	bltu	r5,r4,8030a4 <__modsi3+0x28>
  8030b8:	18000826 	beq	r3,zero,8030dc <__modsi3+0x60>
  8030bc:	1806d07a 	srli	r3,r3,1
  8030c0:	11400136 	bltu	r2,r5,8030c8 <__modsi3+0x4c>
  8030c4:	1145c83a 	sub	r2,r2,r5
  8030c8:	280ad07a 	srli	r5,r5,1
  8030cc:	183ffb1e 	bne	r3,zero,8030bc <__modsi3+0x40>
  8030d0:	38000126 	beq	r7,zero,8030d8 <__modsi3+0x5c>
  8030d4:	0085c83a 	sub	r2,zero,r2
  8030d8:	f800283a 	ret
  8030dc:	2005883a 	mov	r2,r4
  8030e0:	003ffb06 	br	8030d0 <__modsi3+0x54>
  8030e4:	0109c83a 	sub	r4,zero,r4
  8030e8:	01c00044 	movi	r7,1
  8030ec:	003fe506 	br	803084 <__modsi3+0x8>

008030f0 <__udivsi3>:
  8030f0:	200d883a 	mov	r6,r4
  8030f4:	2900152e 	bgeu	r5,r4,80314c <__udivsi3+0x5c>
  8030f8:	28001416 	blt	r5,zero,80314c <__udivsi3+0x5c>
  8030fc:	00800804 	movi	r2,32
  803100:	00c00044 	movi	r3,1
  803104:	00000206 	br	803110 <__udivsi3+0x20>
  803108:	10000e26 	beq	r2,zero,803144 <__udivsi3+0x54>
  80310c:	28000516 	blt	r5,zero,803124 <__udivsi3+0x34>
  803110:	294b883a 	add	r5,r5,r5
  803114:	10bfffc4 	addi	r2,r2,-1
  803118:	18c7883a 	add	r3,r3,r3
  80311c:	293ffa36 	bltu	r5,r4,803108 <__udivsi3+0x18>
  803120:	18000826 	beq	r3,zero,803144 <__udivsi3+0x54>
  803124:	0005883a 	mov	r2,zero
  803128:	31400236 	bltu	r6,r5,803134 <__udivsi3+0x44>
  80312c:	314dc83a 	sub	r6,r6,r5
  803130:	10c4b03a 	or	r2,r2,r3
  803134:	1806d07a 	srli	r3,r3,1
  803138:	280ad07a 	srli	r5,r5,1
  80313c:	183ffa1e 	bne	r3,zero,803128 <__udivsi3+0x38>
  803140:	f800283a 	ret
  803144:	0005883a 	mov	r2,zero
  803148:	f800283a 	ret
  80314c:	00c00044 	movi	r3,1
  803150:	003ff406 	br	803124 <__udivsi3+0x34>

00803154 <__umodsi3>:
  803154:	2005883a 	mov	r2,r4
  803158:	2900132e 	bgeu	r5,r4,8031a8 <__umodsi3+0x54>
  80315c:	28001216 	blt	r5,zero,8031a8 <__umodsi3+0x54>
  803160:	01800804 	movi	r6,32
  803164:	00c00044 	movi	r3,1
  803168:	00000206 	br	803174 <__umodsi3+0x20>
  80316c:	30000c26 	beq	r6,zero,8031a0 <__umodsi3+0x4c>
  803170:	28000516 	blt	r5,zero,803188 <__umodsi3+0x34>
  803174:	294b883a 	add	r5,r5,r5
  803178:	31bfffc4 	addi	r6,r6,-1
  80317c:	18c7883a 	add	r3,r3,r3
  803180:	293ffa36 	bltu	r5,r4,80316c <__umodsi3+0x18>
  803184:	18000626 	beq	r3,zero,8031a0 <__umodsi3+0x4c>
  803188:	1806d07a 	srli	r3,r3,1
  80318c:	11400136 	bltu	r2,r5,803194 <__umodsi3+0x40>
  803190:	1145c83a 	sub	r2,r2,r5
  803194:	280ad07a 	srli	r5,r5,1
  803198:	183ffb1e 	bne	r3,zero,803188 <__umodsi3+0x34>
  80319c:	f800283a 	ret
  8031a0:	2005883a 	mov	r2,r4
  8031a4:	f800283a 	ret
  8031a8:	00c00044 	movi	r3,1
  8031ac:	003ff606 	br	803188 <__umodsi3+0x34>

008031b0 <__mulsi3>:
  8031b0:	0005883a 	mov	r2,zero
  8031b4:	20000726 	beq	r4,zero,8031d4 <__mulsi3+0x24>
  8031b8:	20c0004c 	andi	r3,r4,1
  8031bc:	2008d07a 	srli	r4,r4,1
  8031c0:	18000126 	beq	r3,zero,8031c8 <__mulsi3+0x18>
  8031c4:	1145883a 	add	r2,r2,r5
  8031c8:	294b883a 	add	r5,r5,r5
  8031cc:	203ffa1e 	bne	r4,zero,8031b8 <__mulsi3+0x8>
  8031d0:	f800283a 	ret
  8031d4:	f800283a 	ret

008031d8 <_printf_r>:
  8031d8:	defffd04 	addi	sp,sp,-12
  8031dc:	2805883a 	mov	r2,r5
  8031e0:	dfc00015 	stw	ra,0(sp)
  8031e4:	d9800115 	stw	r6,4(sp)
  8031e8:	d9c00215 	stw	r7,8(sp)
  8031ec:	21400217 	ldw	r5,8(r4)
  8031f0:	d9c00104 	addi	r7,sp,4
  8031f4:	100d883a 	mov	r6,r2
  8031f8:	08033d40 	call	8033d4 <___vfprintf_internal_r>
  8031fc:	dfc00017 	ldw	ra,0(sp)
  803200:	dec00304 	addi	sp,sp,12
  803204:	f800283a 	ret

00803208 <printf>:
  803208:	defffc04 	addi	sp,sp,-16
  80320c:	dfc00015 	stw	ra,0(sp)
  803210:	d9400115 	stw	r5,4(sp)
  803214:	d9800215 	stw	r6,8(sp)
  803218:	d9c00315 	stw	r7,12(sp)
  80321c:	00802074 	movhi	r2,129
  803220:	10921217 	ldw	r2,18504(r2)
  803224:	200b883a 	mov	r5,r4
  803228:	d9800104 	addi	r6,sp,4
  80322c:	11000217 	ldw	r4,8(r2)
  803230:	08054d80 	call	8054d8 <__vfprintf_internal>
  803234:	dfc00017 	ldw	ra,0(sp)
  803238:	dec00404 	addi	sp,sp,16
  80323c:	f800283a 	ret

00803240 <_putchar_r>:
  803240:	21800217 	ldw	r6,8(r4)
  803244:	080a17c1 	jmpi	80a17c <_putc_r>

00803248 <putchar>:
  803248:	00802074 	movhi	r2,129
  80324c:	10921217 	ldw	r2,18504(r2)
  803250:	200b883a 	mov	r5,r4
  803254:	11800217 	ldw	r6,8(r2)
  803258:	1009883a 	mov	r4,r2
  80325c:	080a17c1 	jmpi	80a17c <_putc_r>

00803260 <_puts_r>:
  803260:	defff504 	addi	sp,sp,-44
  803264:	dc000815 	stw	r16,32(sp)
  803268:	2021883a 	mov	r16,r4
  80326c:	2809883a 	mov	r4,r5
  803270:	dc400915 	stw	r17,36(sp)
  803274:	dfc00a15 	stw	ra,40(sp)
  803278:	2823883a 	mov	r17,r5
  80327c:	080333c0 	call	80333c <strlen>
  803280:	11000044 	addi	r4,r2,1
  803284:	d8800515 	stw	r2,20(sp)
  803288:	00800044 	movi	r2,1
  80328c:	00c02074 	movhi	r3,129
  803290:	d8800715 	stw	r2,28(sp)
  803294:	d8800404 	addi	r2,sp,16
  803298:	18c99b04 	addi	r3,r3,9836
  80329c:	d8800115 	stw	r2,4(sp)
  8032a0:	00800084 	movi	r2,2
  8032a4:	dc400415 	stw	r17,16(sp)
  8032a8:	d8c00615 	stw	r3,24(sp)
  8032ac:	d9000315 	stw	r4,12(sp)
  8032b0:	d8800215 	stw	r2,8(sp)
  8032b4:	81400217 	ldw	r5,8(r16)
  8032b8:	80000226 	beq	r16,zero,8032c4 <_puts_r+0x64>
  8032bc:	80800e17 	ldw	r2,56(r16)
  8032c0:	10001326 	beq	r2,zero,803310 <_puts_r+0xb0>
  8032c4:	2880030b 	ldhu	r2,12(r5)
  8032c8:	10c8000c 	andi	r3,r2,8192
  8032cc:	1800061e 	bne	r3,zero,8032e8 <_puts_r+0x88>
  8032d0:	28c01917 	ldw	r3,100(r5)
  8032d4:	0137ffc4 	movi	r4,-8193
  8032d8:	10880014 	ori	r2,r2,8192
  8032dc:	1906703a 	and	r3,r3,r4
  8032e0:	2880030d 	sth	r2,12(r5)
  8032e4:	28c01915 	stw	r3,100(r5)
  8032e8:	d9800104 	addi	r6,sp,4
  8032ec:	8009883a 	mov	r4,r16
  8032f0:	0807b500 	call	807b50 <__sfvwrite_r>
  8032f4:	10000b1e 	bne	r2,zero,803324 <_puts_r+0xc4>
  8032f8:	00800284 	movi	r2,10
  8032fc:	dfc00a17 	ldw	ra,40(sp)
  803300:	dc400917 	ldw	r17,36(sp)
  803304:	dc000817 	ldw	r16,32(sp)
  803308:	dec00b04 	addi	sp,sp,44
  80330c:	f800283a 	ret
  803310:	8009883a 	mov	r4,r16
  803314:	d9400015 	stw	r5,0(sp)
  803318:	08076f00 	call	8076f0 <__sinit>
  80331c:	d9400017 	ldw	r5,0(sp)
  803320:	003fe806 	br	8032c4 <_puts_r+0x64>
  803324:	00bfffc4 	movi	r2,-1
  803328:	003ff406 	br	8032fc <_puts_r+0x9c>

0080332c <puts>:
  80332c:	00802074 	movhi	r2,129
  803330:	200b883a 	mov	r5,r4
  803334:	11121217 	ldw	r4,18504(r2)
  803338:	08032601 	jmpi	803260 <_puts_r>

0080333c <strlen>:
  80333c:	208000cc 	andi	r2,r4,3
  803340:	10000926 	beq	r2,zero,803368 <strlen+0x2c>
  803344:	2005883a 	mov	r2,r4
  803348:	00000306 	br	803358 <strlen+0x1c>
  80334c:	10800044 	addi	r2,r2,1
  803350:	10c000cc 	andi	r3,r2,3
  803354:	18000526 	beq	r3,zero,80336c <strlen+0x30>
  803358:	10c00007 	ldb	r3,0(r2)
  80335c:	183ffb1e 	bne	r3,zero,80334c <strlen+0x10>
  803360:	1105c83a 	sub	r2,r2,r4
  803364:	f800283a 	ret
  803368:	2005883a 	mov	r2,r4
  80336c:	11400017 	ldw	r5,0(r2)
  803370:	01ffbff4 	movhi	r7,65279
  803374:	39ffbfc4 	addi	r7,r7,-257
  803378:	29c7883a 	add	r3,r5,r7
  80337c:	01a02074 	movhi	r6,32897
  803380:	014a303a 	nor	r5,zero,r5
  803384:	1946703a 	and	r3,r3,r5
  803388:	31a02004 	addi	r6,r6,-32640
  80338c:	1986703a 	and	r3,r3,r6
  803390:	1800071e 	bne	r3,zero,8033b0 <strlen+0x74>
  803394:	11400117 	ldw	r5,4(r2)
  803398:	10800104 	addi	r2,r2,4
  80339c:	29c7883a 	add	r3,r5,r7
  8033a0:	014a303a 	nor	r5,zero,r5
  8033a4:	1946703a 	and	r3,r3,r5
  8033a8:	1986703a 	and	r3,r3,r6
  8033ac:	183ff926 	beq	r3,zero,803394 <strlen+0x58>
  8033b0:	10c00007 	ldb	r3,0(r2)
  8033b4:	183fea26 	beq	r3,zero,803360 <strlen+0x24>
  8033b8:	10c00047 	ldb	r3,1(r2)
  8033bc:	10800044 	addi	r2,r2,1
  8033c0:	183fe726 	beq	r3,zero,803360 <strlen+0x24>
  8033c4:	10c00047 	ldb	r3,1(r2)
  8033c8:	10800044 	addi	r2,r2,1
  8033cc:	183ffa1e 	bne	r3,zero,8033b8 <strlen+0x7c>
  8033d0:	003fe306 	br	803360 <strlen+0x24>

008033d4 <___vfprintf_internal_r>:
  8033d4:	deffbf04 	addi	sp,sp,-260
  8033d8:	dfc04015 	stw	ra,256(sp)
  8033dc:	dd803d15 	stw	r22,244(sp)
  8033e0:	dcc03a15 	stw	r19,232(sp)
  8033e4:	dc803915 	stw	r18,228(sp)
  8033e8:	2027883a 	mov	r19,r4
  8033ec:	2825883a 	mov	r18,r5
  8033f0:	302d883a 	mov	r22,r6
  8033f4:	d9c00615 	stw	r7,24(sp)
  8033f8:	df003f15 	stw	fp,252(sp)
  8033fc:	ddc03e15 	stw	r23,248(sp)
  803400:	dd403c15 	stw	r21,240(sp)
  803404:	dd003b15 	stw	r20,236(sp)
  803408:	dc403815 	stw	r17,224(sp)
  80340c:	dc003715 	stw	r16,220(sp)
  803410:	08081600 	call	808160 <_localeconv_r>
  803414:	10800017 	ldw	r2,0(r2)
  803418:	1009883a 	mov	r4,r2
  80341c:	d8800d15 	stw	r2,52(sp)
  803420:	080333c0 	call	80333c <strlen>
  803424:	d8800b15 	stw	r2,44(sp)
  803428:	98000226 	beq	r19,zero,803434 <___vfprintf_internal_r+0x60>
  80342c:	98800e17 	ldw	r2,56(r19)
  803430:	1001e026 	beq	r2,zero,803bb4 <___vfprintf_internal_r+0x7e0>
  803434:	9080030b 	ldhu	r2,12(r18)
  803438:	10c8000c 	andi	r3,r2,8192
  80343c:	1800061e 	bne	r3,zero,803458 <___vfprintf_internal_r+0x84>
  803440:	90c01917 	ldw	r3,100(r18)
  803444:	0137ffc4 	movi	r4,-8193
  803448:	10880014 	ori	r2,r2,8192
  80344c:	1906703a 	and	r3,r3,r4
  803450:	9080030d 	sth	r2,12(r18)
  803454:	90c01915 	stw	r3,100(r18)
  803458:	10c0020c 	andi	r3,r2,8
  80345c:	1800fc26 	beq	r3,zero,803850 <___vfprintf_internal_r+0x47c>
  803460:	90c00417 	ldw	r3,16(r18)
  803464:	1800fa26 	beq	r3,zero,803850 <___vfprintf_internal_r+0x47c>
  803468:	1080068c 	andi	r2,r2,26
  80346c:	10800298 	cmpnei	r2,r2,10
  803470:	1000ff26 	beq	r2,zero,803870 <___vfprintf_internal_r+0x49c>
  803474:	d8802704 	addi	r2,sp,156
  803478:	b02f883a 	mov	r23,r22
  80347c:	d8801a15 	stw	r2,104(sp)
  803480:	d8001c15 	stw	zero,112(sp)
  803484:	d8001b15 	stw	zero,108(sp)
  803488:	d8000815 	stw	zero,32(sp)
  80348c:	d8000915 	stw	zero,36(sp)
  803490:	d8000a15 	stw	zero,40(sp)
  803494:	d8000c15 	stw	zero,48(sp)
  803498:	d8001015 	stw	zero,64(sp)
  80349c:	d8000515 	stw	zero,20(sp)
  8034a0:	102d883a 	mov	r22,r2
  8034a4:	b8800007 	ldb	r2,0(r23)
  8034a8:	1000d726 	beq	r2,zero,803808 <___vfprintf_internal_r+0x434>
  8034ac:	b821883a 	mov	r16,r23
  8034b0:	00000306 	br	8034c0 <___vfprintf_internal_r+0xec>
  8034b4:	80800047 	ldb	r2,1(r16)
  8034b8:	84000044 	addi	r16,r16,1
  8034bc:	10012226 	beq	r2,zero,803948 <___vfprintf_internal_r+0x574>
  8034c0:	10800958 	cmpnei	r2,r2,37
  8034c4:	103ffb1e 	bne	r2,zero,8034b4 <___vfprintf_internal_r+0xe0>
  8034c8:	85e3c83a 	sub	r17,r16,r23
  8034cc:	85c1201e 	bne	r16,r23,803950 <___vfprintf_internal_r+0x57c>
  8034d0:	80800003 	ldbu	r2,0(r16)
  8034d4:	10803fcc 	andi	r2,r2,255
  8034d8:	1080201c 	xori	r2,r2,128
  8034dc:	10bfe004 	addi	r2,r2,-128
  8034e0:	1000c926 	beq	r2,zero,803808 <___vfprintf_internal_r+0x434>
  8034e4:	82c00047 	ldb	r11,1(r16)
  8034e8:	85c00044 	addi	r23,r16,1
  8034ec:	d8001345 	stb	zero,77(sp)
  8034f0:	0009883a 	mov	r4,zero
  8034f4:	000b883a 	mov	r5,zero
  8034f8:	023fffc4 	movi	r8,-1
  8034fc:	0021883a 	mov	r16,zero
  803500:	0019883a 	mov	r12,zero
  803504:	bdc00044 	addi	r23,r23,1
  803508:	5839883a 	mov	fp,r11
  80350c:	e0bff804 	addi	r2,fp,-32
  803510:	10c01668 	cmpgeui	r3,r2,89
  803514:	18006c1e 	bne	r3,zero,8036c8 <___vfprintf_internal_r+0x2f4>
  803518:	100490ba 	slli	r2,r2,2
  80351c:	00c02034 	movhi	r3,128
  803520:	10c7883a 	add	r3,r2,r3
  803524:	188d4b17 	ldw	r2,13612(r3)
  803528:	1000683a 	jmp	r2
  80352c:	00803e7c 	xorhi	r2,zero,249
  803530:	008036c8 	cmpgei	r2,zero,219
  803534:	008036c8 	cmpgei	r2,zero,219
  803538:	00803e70 	cmpltui	r2,zero,249
  80353c:	008036c8 	cmpgei	r2,zero,219
  803540:	008036c8 	cmpgei	r2,zero,219
  803544:	008036c8 	cmpgei	r2,zero,219
  803548:	008036c8 	cmpgei	r2,zero,219
  80354c:	008036c8 	cmpgei	r2,zero,219
  803550:	008036c8 	cmpgei	r2,zero,219
  803554:	00803e48 	cmpgei	r2,zero,249
  803558:	00803e38 	rdprs	r2,zero,248
  80355c:	008036c8 	cmpgei	r2,zero,219
  803560:	00803e20 	cmpeqi	r2,zero,248
  803564:	00803dd4 	movui	r2,247
  803568:	008036c8 	cmpgei	r2,zero,219
  80356c:	00803dc8 	cmpgei	r2,zero,247
  803570:	00803690 	cmplti	r2,zero,218
  803574:	00803690 	cmplti	r2,zero,218
  803578:	00803690 	cmplti	r2,zero,218
  80357c:	00803690 	cmplti	r2,zero,218
  803580:	00803690 	cmplti	r2,zero,218
  803584:	00803690 	cmplti	r2,zero,218
  803588:	00803690 	cmplti	r2,zero,218
  80358c:	00803690 	cmplti	r2,zero,218
  803590:	00803690 	cmplti	r2,zero,218
  803594:	008036c8 	cmpgei	r2,zero,219
  803598:	008036c8 	cmpgei	r2,zero,219
  80359c:	008036c8 	cmpgei	r2,zero,219
  8035a0:	008036c8 	cmpgei	r2,zero,219
  8035a4:	008036c8 	cmpgei	r2,zero,219
  8035a8:	008036c8 	cmpgei	r2,zero,219
  8035ac:	008036c8 	cmpgei	r2,zero,219
  8035b0:	008036c8 	cmpgei	r2,zero,219
  8035b4:	008036c8 	cmpgei	r2,zero,219
  8035b8:	008036c8 	cmpgei	r2,zero,219
  8035bc:	00803ce0 	cmpeqi	r2,zero,243
  8035c0:	008039ac 	andhi	r2,zero,230
  8035c4:	008036c8 	cmpgei	r2,zero,219
  8035c8:	008039ac 	andhi	r2,zero,230
  8035cc:	008036c8 	cmpgei	r2,zero,219
  8035d0:	008036c8 	cmpgei	r2,zero,219
  8035d4:	008036c8 	cmpgei	r2,zero,219
  8035d8:	008036c8 	cmpgei	r2,zero,219
  8035dc:	00803cd4 	movui	r2,243
  8035e0:	008036c8 	cmpgei	r2,zero,219
  8035e4:	008036c8 	cmpgei	r2,zero,219
  8035e8:	008038e0 	cmpeqi	r2,zero,227
  8035ec:	008036c8 	cmpgei	r2,zero,219
  8035f0:	008036c8 	cmpgei	r2,zero,219
  8035f4:	008036c8 	cmpgei	r2,zero,219
  8035f8:	008036c8 	cmpgei	r2,zero,219
  8035fc:	008036c8 	cmpgei	r2,zero,219
  803600:	008038b8 	rdprs	r2,zero,226
  803604:	008036c8 	cmpgei	r2,zero,219
  803608:	008036c8 	cmpgei	r2,zero,219
  80360c:	00803c8c 	andi	r2,zero,242
  803610:	008036c8 	cmpgei	r2,zero,219
  803614:	008036c8 	cmpgei	r2,zero,219
  803618:	008036c8 	cmpgei	r2,zero,219
  80361c:	008036c8 	cmpgei	r2,zero,219
  803620:	008036c8 	cmpgei	r2,zero,219
  803624:	008036c8 	cmpgei	r2,zero,219
  803628:	008036c8 	cmpgei	r2,zero,219
  80362c:	008036c8 	cmpgei	r2,zero,219
  803630:	008036c8 	cmpgei	r2,zero,219
  803634:	008036c8 	cmpgei	r2,zero,219
  803638:	00803c64 	muli	r2,zero,241
  80363c:	00803bc0 	call	803bc <__alt_mem_sdram-0x77fc44>
  803640:	008039ac 	andhi	r2,zero,230
  803644:	008039ac 	andhi	r2,zero,230
  803648:	008039ac 	andhi	r2,zero,230
  80364c:	00803c58 	cmpnei	r2,zero,241
  803650:	00803bc0 	call	803bc <__alt_mem_sdram-0x77fc44>
  803654:	008036c8 	cmpgei	r2,zero,219
  803658:	008036c8 	cmpgei	r2,zero,219
  80365c:	00803fd0 	cmplti	r2,zero,255
  803660:	008036c8 	cmpgei	r2,zero,219
  803664:	00803f94 	movui	r2,254
  803668:	008038e4 	muli	r2,zero,227
  80366c:	00803f54 	movui	r2,253
  803670:	00803f48 	cmpgei	r2,zero,253
  803674:	008036c8 	cmpgei	r2,zero,219
  803678:	00803ef0 	cmpltui	r2,zero,251
  80367c:	008036c8 	cmpgei	r2,zero,219
  803680:	008038bc 	xorhi	r2,zero,226
  803684:	008036c8 	cmpgei	r2,zero,219
  803688:	008036c8 	cmpgei	r2,zero,219
  80368c:	00803ea8 	cmpgeui	r2,zero,250
  803690:	0021883a 	mov	r16,zero
  803694:	e0fff404 	addi	r3,fp,-48
  803698:	800490ba 	slli	r2,r16,2
  80369c:	bf000007 	ldb	fp,0(r23)
  8036a0:	bdc00044 	addi	r23,r23,1
  8036a4:	1421883a 	add	r16,r2,r16
  8036a8:	8421883a 	add	r16,r16,r16
  8036ac:	1c21883a 	add	r16,r3,r16
  8036b0:	e0fff404 	addi	r3,fp,-48
  8036b4:	188002b0 	cmpltui	r2,r3,10
  8036b8:	103ff71e 	bne	r2,zero,803698 <___vfprintf_internal_r+0x2c4>
  8036bc:	e0bff804 	addi	r2,fp,-32
  8036c0:	10c01668 	cmpgeui	r3,r2,89
  8036c4:	183f9426 	beq	r3,zero,803518 <___vfprintf_internal_r+0x144>
  8036c8:	21003fcc 	andi	r4,r4,255
  8036cc:	2006871e 	bne	r4,zero,8050ec <___vfprintf_internal_r+0x1d18>
  8036d0:	e0004d26 	beq	fp,zero,803808 <___vfprintf_internal_r+0x434>
  8036d4:	df001d05 	stb	fp,116(sp)
  8036d8:	d8001345 	stb	zero,77(sp)
  8036dc:	05000044 	movi	r20,1
  8036e0:	05400044 	movi	r21,1
  8036e4:	dc401d04 	addi	r17,sp,116
  8036e8:	db000415 	stw	r12,16(sp)
  8036ec:	0011883a 	mov	r8,zero
  8036f0:	d8000715 	stw	zero,28(sp)
  8036f4:	d8800417 	ldw	r2,16(sp)
  8036f8:	1380008c 	andi	r14,r2,2
  8036fc:	70000126 	beq	r14,zero,803704 <___vfprintf_internal_r+0x330>
  803700:	a5000084 	addi	r20,r20,2
  803704:	d8800417 	ldw	r2,16(sp)
  803708:	d8c01c17 	ldw	r3,112(sp)
  80370c:	1340210c 	andi	r13,r2,132
  803710:	6800021e 	bne	r13,zero,80371c <___vfprintf_internal_r+0x348>
  803714:	850fc83a 	sub	r7,r16,r20
  803718:	01c34516 	blt	zero,r7,804430 <___vfprintf_internal_r+0x105c>
  80371c:	d8801347 	ldb	r2,77(sp)
  803720:	10000c26 	beq	r2,zero,803754 <___vfprintf_internal_r+0x380>
  803724:	d8801b17 	ldw	r2,108(sp)
  803728:	d9001344 	addi	r4,sp,77
  80372c:	18c00044 	addi	r3,r3,1
  803730:	10800044 	addi	r2,r2,1
  803734:	b1000015 	stw	r4,0(r22)
  803738:	01000044 	movi	r4,1
  80373c:	d8801b15 	stw	r2,108(sp)
  803740:	b1000115 	stw	r4,4(r22)
  803744:	d8c01c15 	stw	r3,112(sp)
  803748:	10800208 	cmpgei	r2,r2,8
  80374c:	1003791e 	bne	r2,zero,804534 <___vfprintf_internal_r+0x1160>
  803750:	b5800204 	addi	r22,r22,8
  803754:	70000c26 	beq	r14,zero,803788 <___vfprintf_internal_r+0x3b4>
  803758:	d8801b17 	ldw	r2,108(sp)
  80375c:	d9001384 	addi	r4,sp,78
  803760:	18c00084 	addi	r3,r3,2
  803764:	10800044 	addi	r2,r2,1
  803768:	b1000015 	stw	r4,0(r22)
  80376c:	01000084 	movi	r4,2
  803770:	d8801b15 	stw	r2,108(sp)
  803774:	b1000115 	stw	r4,4(r22)
  803778:	d8c01c15 	stw	r3,112(sp)
  80377c:	10800208 	cmpgei	r2,r2,8
  803780:	10037a1e 	bne	r2,zero,80456c <___vfprintf_internal_r+0x1198>
  803784:	b5800204 	addi	r22,r22,8
  803788:	6b402018 	cmpnei	r13,r13,128
  80378c:	68025b26 	beq	r13,zero,8040fc <___vfprintf_internal_r+0xd28>
  803790:	4551c83a 	sub	r8,r8,r21
  803794:	02029316 	blt	zero,r8,8041e4 <___vfprintf_internal_r+0xe10>
  803798:	d8800417 	ldw	r2,16(sp)
  80379c:	1080400c 	andi	r2,r2,256
  8037a0:	1002101e 	bne	r2,zero,803fe4 <___vfprintf_internal_r+0xc10>
  8037a4:	d8801b17 	ldw	r2,108(sp)
  8037a8:	1d47883a 	add	r3,r3,r21
  8037ac:	b4400015 	stw	r17,0(r22)
  8037b0:	10800044 	addi	r2,r2,1
  8037b4:	b5400115 	stw	r21,4(r22)
  8037b8:	d8801b15 	stw	r2,108(sp)
  8037bc:	d8c01c15 	stw	r3,112(sp)
  8037c0:	10800208 	cmpgei	r2,r2,8
  8037c4:	1003101e 	bne	r2,zero,804408 <___vfprintf_internal_r+0x1034>
  8037c8:	b5800204 	addi	r22,r22,8
  8037cc:	d8800417 	ldw	r2,16(sp)
  8037d0:	1440010c 	andi	r17,r2,4
  8037d4:	88000226 	beq	r17,zero,8037e0 <___vfprintf_internal_r+0x40c>
  8037d8:	8523c83a 	sub	r17,r16,r20
  8037dc:	0440c616 	blt	zero,r17,803af8 <___vfprintf_internal_r+0x724>
  8037e0:	8500010e 	bge	r16,r20,8037e8 <___vfprintf_internal_r+0x414>
  8037e4:	a021883a 	mov	r16,r20
  8037e8:	d8800517 	ldw	r2,20(sp)
  8037ec:	1405883a 	add	r2,r2,r16
  8037f0:	d8800515 	stw	r2,20(sp)
  8037f4:	1802c21e 	bne	r3,zero,804300 <___vfprintf_internal_r+0xf2c>
  8037f8:	b8800007 	ldb	r2,0(r23)
  8037fc:	d8001b15 	stw	zero,108(sp)
  803800:	dd802704 	addi	r22,sp,156
  803804:	103f291e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0xd8>
  803808:	d8801c17 	ldw	r2,112(sp)
  80380c:	1006391e 	bne	r2,zero,8050f4 <___vfprintf_internal_r+0x1d20>
  803810:	9080030b 	ldhu	r2,12(r18)
  803814:	1080100c 	andi	r2,r2,64
  803818:	1006cf1e 	bne	r2,zero,805358 <___vfprintf_internal_r+0x1f84>
  80381c:	d8800517 	ldw	r2,20(sp)
  803820:	dfc04017 	ldw	ra,256(sp)
  803824:	df003f17 	ldw	fp,252(sp)
  803828:	ddc03e17 	ldw	r23,248(sp)
  80382c:	dd803d17 	ldw	r22,244(sp)
  803830:	dd403c17 	ldw	r21,240(sp)
  803834:	dd003b17 	ldw	r20,236(sp)
  803838:	dcc03a17 	ldw	r19,232(sp)
  80383c:	dc803917 	ldw	r18,228(sp)
  803840:	dc403817 	ldw	r17,224(sp)
  803844:	dc003717 	ldw	r16,220(sp)
  803848:	dec04104 	addi	sp,sp,260
  80384c:	f800283a 	ret
  803850:	900b883a 	mov	r5,r18
  803854:	9809883a 	mov	r4,r19
  803858:	08055b40 	call	8055b4 <__swsetup_r>
  80385c:	1006be1e 	bne	r2,zero,805358 <___vfprintf_internal_r+0x1f84>
  803860:	9080030b 	ldhu	r2,12(r18)
  803864:	1080068c 	andi	r2,r2,26
  803868:	10800298 	cmpnei	r2,r2,10
  80386c:	103f011e 	bne	r2,zero,803474 <___vfprintf_internal_r+0xa0>
  803870:	9080038f 	ldh	r2,14(r18)
  803874:	103eff16 	blt	r2,zero,803474 <___vfprintf_internal_r+0xa0>
  803878:	d9c00617 	ldw	r7,24(sp)
  80387c:	b00d883a 	mov	r6,r22
  803880:	900b883a 	mov	r5,r18
  803884:	9809883a 	mov	r4,r19
  803888:	dfc04017 	ldw	ra,256(sp)
  80388c:	df003f17 	ldw	fp,252(sp)
  803890:	ddc03e17 	ldw	r23,248(sp)
  803894:	dd803d17 	ldw	r22,244(sp)
  803898:	dd403c17 	ldw	r21,240(sp)
  80389c:	dd003b17 	ldw	r20,236(sp)
  8038a0:	dcc03a17 	ldw	r19,232(sp)
  8038a4:	dc803917 	ldw	r18,228(sp)
  8038a8:	dc403817 	ldw	r17,224(sp)
  8038ac:	dc003717 	ldw	r16,220(sp)
  8038b0:	dec04104 	addi	sp,sp,260
  8038b4:	08054f41 	jmpi	8054f4 <__sbprintf>
  8038b8:	63000414 	ori	r12,r12,16
  8038bc:	6080080c 	andi	r2,r12,32
  8038c0:	10008126 	beq	r2,zero,803ac8 <___vfprintf_internal_r+0x6f4>
  8038c4:	d8c00617 	ldw	r3,24(sp)
  8038c8:	00800044 	movi	r2,1
  8038cc:	1d000017 	ldw	r20,0(r3)
  8038d0:	1d400117 	ldw	r21,4(r3)
  8038d4:	18c00204 	addi	r3,r3,8
  8038d8:	d8c00615 	stw	r3,24(sp)
  8038dc:	00000906 	br	803904 <___vfprintf_internal_r+0x530>
  8038e0:	63000414 	ori	r12,r12,16
  8038e4:	6080080c 	andi	r2,r12,32
  8038e8:	10006b26 	beq	r2,zero,803a98 <___vfprintf_internal_r+0x6c4>
  8038ec:	d8c00617 	ldw	r3,24(sp)
  8038f0:	0005883a 	mov	r2,zero
  8038f4:	1d000017 	ldw	r20,0(r3)
  8038f8:	1d400117 	ldw	r21,4(r3)
  8038fc:	18c00204 	addi	r3,r3,8
  803900:	d8c00615 	stw	r3,24(sp)
  803904:	d8001345 	stb	zero,77(sp)
  803908:	40ffffe0 	cmpeqi	r3,r8,-1
  80390c:	001b883a 	mov	r13,zero
  803910:	18010e1e 	bne	r3,zero,803d4c <___vfprintf_internal_r+0x978>
  803914:	047fdfc4 	movi	r17,-129
  803918:	6448703a 	and	r4,r12,r17
  80391c:	a546b03a 	or	r3,r20,r21
  803920:	d9000415 	stw	r4,16(sp)
  803924:	1802c01e 	bne	r3,zero,804428 <___vfprintf_internal_r+0x1054>
  803928:	40025f1e 	bne	r8,zero,8042a8 <___vfprintf_internal_r+0xed4>
  80392c:	1003751e 	bne	r2,zero,804704 <___vfprintf_internal_r+0x1330>
  803930:	6540004c 	andi	r21,r12,1
  803934:	a803b026 	beq	r21,zero,8047f8 <___vfprintf_internal_r+0x1424>
  803938:	00800c04 	movi	r2,48
  80393c:	d88026c5 	stb	r2,155(sp)
  803940:	dc4026c4 	addi	r17,sp,155
  803944:	0000ba06 	br	803c30 <___vfprintf_internal_r+0x85c>
  803948:	85e3c83a 	sub	r17,r16,r23
  80394c:	85ffae26 	beq	r16,r23,803808 <___vfprintf_internal_r+0x434>
  803950:	d8c01c17 	ldw	r3,112(sp)
  803954:	d8801b17 	ldw	r2,108(sp)
  803958:	b5c00015 	stw	r23,0(r22)
  80395c:	1c47883a 	add	r3,r3,r17
  803960:	10800044 	addi	r2,r2,1
  803964:	d8801b15 	stw	r2,108(sp)
  803968:	b4400115 	stw	r17,4(r22)
  80396c:	d8c01c15 	stw	r3,112(sp)
  803970:	10800208 	cmpgei	r2,r2,8
  803974:	1000061e 	bne	r2,zero,803990 <___vfprintf_internal_r+0x5bc>
  803978:	b5800204 	addi	r22,r22,8
  80397c:	d8c00517 	ldw	r3,20(sp)
  803980:	80800003 	ldbu	r2,0(r16)
  803984:	1c47883a 	add	r3,r3,r17
  803988:	d8c00515 	stw	r3,20(sp)
  80398c:	003ed106 	br	8034d4 <___vfprintf_internal_r+0x100>
  803990:	d9801a04 	addi	r6,sp,104
  803994:	900b883a 	mov	r5,r18
  803998:	9809883a 	mov	r4,r19
  80399c:	080ab180 	call	80ab18 <__sprint_r>
  8039a0:	103f9b1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8039a4:	dd802704 	addi	r22,sp,156
  8039a8:	003ff406 	br	80397c <___vfprintf_internal_r+0x5a8>
  8039ac:	21003fcc 	andi	r4,r4,255
  8039b0:	2006671e 	bne	r4,zero,805350 <___vfprintf_internal_r+0x1f7c>
  8039b4:	d8c00617 	ldw	r3,24(sp)
  8039b8:	6080020c 	andi	r2,r12,8
  8039bc:	19000204 	addi	r4,r3,8
  8039c0:	d9000e15 	stw	r4,56(sp)
  8039c4:	1003a71e 	bne	r2,zero,804864 <___vfprintf_internal_r+0x1490>
  8039c8:	d8800617 	ldw	r2,24(sp)
  8039cc:	10c00017 	ldw	r3,0(r2)
  8039d0:	10800117 	ldw	r2,4(r2)
  8039d4:	d8c00915 	stw	r3,36(sp)
  8039d8:	d8800a15 	stw	r2,40(sp)
  8039dc:	dd400a17 	ldw	r21,40(sp)
  8039e0:	dd000917 	ldw	r20,36(sp)
  8039e4:	00a00034 	movhi	r2,32768
  8039e8:	10bfffc4 	addi	r2,r2,-1
  8039ec:	a8a2703a 	and	r17,r21,r2
  8039f0:	01dffc34 	movhi	r7,32752
  8039f4:	01bfffc4 	movi	r6,-1
  8039f8:	39ffffc4 	addi	r7,r7,-1
  8039fc:	a009883a 	mov	r4,r20
  803a00:	880b883a 	mov	r5,r17
  803a04:	da000615 	stw	r8,24(sp)
  803a08:	db000415 	stw	r12,16(sp)
  803a0c:	080e7a00 	call	80e7a0 <__unorddf2>
  803a10:	db000417 	ldw	r12,16(sp)
  803a14:	da000617 	ldw	r8,24(sp)
  803a18:	1004641e 	bne	r2,zero,804bac <___vfprintf_internal_r+0x17d8>
  803a1c:	01dffc34 	movhi	r7,32752
  803a20:	01bfffc4 	movi	r6,-1
  803a24:	39ffffc4 	addi	r7,r7,-1
  803a28:	a009883a 	mov	r4,r20
  803a2c:	880b883a 	mov	r5,r17
  803a30:	080de040 	call	80de04 <__ledf2>
  803a34:	db000417 	ldw	r12,16(sp)
  803a38:	da000617 	ldw	r8,24(sp)
  803a3c:	00845b0e 	bge	zero,r2,804bac <___vfprintf_internal_r+0x17d8>
  803a40:	000d883a 	mov	r6,zero
  803a44:	000f883a 	mov	r7,zero
  803a48:	a009883a 	mov	r4,r20
  803a4c:	a80b883a 	mov	r5,r21
  803a50:	080de040 	call	80de04 <__ledf2>
  803a54:	db000417 	ldw	r12,16(sp)
  803a58:	10059116 	blt	r2,zero,8050a0 <___vfprintf_internal_r+0x1ccc>
  803a5c:	db401343 	ldbu	r13,77(sp)
  803a60:	e0801210 	cmplti	r2,fp,72
  803a64:	1005391e 	bne	r2,zero,804f4c <___vfprintf_internal_r+0x1b78>
  803a68:	04402074 	movhi	r17,129
  803a6c:	8c499d04 	addi	r17,r17,9844
  803a70:	00bfdfc4 	movi	r2,-129
  803a74:	6084703a 	and	r2,r12,r2
  803a78:	d8800415 	stw	r2,16(sp)
  803a7c:	d8800e17 	ldw	r2,56(sp)
  803a80:	050000c4 	movi	r20,3
  803a84:	054000c4 	movi	r21,3
  803a88:	d8800615 	stw	r2,24(sp)
  803a8c:	0011883a 	mov	r8,zero
  803a90:	d8000715 	stw	zero,28(sp)
  803a94:	00006a06 	br	803c40 <___vfprintf_internal_r+0x86c>
  803a98:	d9000617 	ldw	r4,24(sp)
  803a9c:	6080040c 	andi	r2,r12,16
  803aa0:	20c00104 	addi	r3,r4,4
  803aa4:	10036a1e 	bne	r2,zero,804850 <___vfprintf_internal_r+0x147c>
  803aa8:	6080100c 	andi	r2,r12,64
  803aac:	10052126 	beq	r2,zero,804f34 <___vfprintf_internal_r+0x1b60>
  803ab0:	d8800617 	ldw	r2,24(sp)
  803ab4:	002b883a 	mov	r21,zero
  803ab8:	d8c00615 	stw	r3,24(sp)
  803abc:	1500000b 	ldhu	r20,0(r2)
  803ac0:	0005883a 	mov	r2,zero
  803ac4:	003f8f06 	br	803904 <___vfprintf_internal_r+0x530>
  803ac8:	d9000617 	ldw	r4,24(sp)
  803acc:	6080040c 	andi	r2,r12,16
  803ad0:	20c00104 	addi	r3,r4,4
  803ad4:	1003501e 	bne	r2,zero,804818 <___vfprintf_internal_r+0x1444>
  803ad8:	6080100c 	andi	r2,r12,64
  803adc:	10055926 	beq	r2,zero,805044 <___vfprintf_internal_r+0x1c70>
  803ae0:	d8800617 	ldw	r2,24(sp)
  803ae4:	002b883a 	mov	r21,zero
  803ae8:	d8c00615 	stw	r3,24(sp)
  803aec:	1500000b 	ldhu	r20,0(r2)
  803af0:	00800044 	movi	r2,1
  803af4:	003f8306 	br	803904 <___vfprintf_internal_r+0x530>
  803af8:	03002074 	movhi	r12,129
  803afc:	89000450 	cmplti	r4,r17,17
  803b00:	d8801b17 	ldw	r2,108(sp)
  803b04:	6309b104 	addi	r12,r12,9924
  803b08:	20001b1e 	bne	r4,zero,803b78 <___vfprintf_internal_r+0x7a4>
  803b0c:	05400404 	movi	r21,16
  803b10:	6039883a 	mov	fp,r12
  803b14:	00000406 	br	803b28 <___vfprintf_internal_r+0x754>
  803b18:	8c7ffc04 	addi	r17,r17,-16
  803b1c:	89000448 	cmpgei	r4,r17,17
  803b20:	b5800204 	addi	r22,r22,8
  803b24:	20001326 	beq	r4,zero,803b74 <___vfprintf_internal_r+0x7a0>
  803b28:	10800044 	addi	r2,r2,1
  803b2c:	18c00404 	addi	r3,r3,16
  803b30:	b7000015 	stw	fp,0(r22)
  803b34:	b5400115 	stw	r21,4(r22)
  803b38:	d8c01c15 	stw	r3,112(sp)
  803b3c:	d8801b15 	stw	r2,108(sp)
  803b40:	11000208 	cmpgei	r4,r2,8
  803b44:	203ff426 	beq	r4,zero,803b18 <___vfprintf_internal_r+0x744>
  803b48:	d9801a04 	addi	r6,sp,104
  803b4c:	900b883a 	mov	r5,r18
  803b50:	9809883a 	mov	r4,r19
  803b54:	080ab180 	call	80ab18 <__sprint_r>
  803b58:	103f2d1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  803b5c:	8c7ffc04 	addi	r17,r17,-16
  803b60:	89000448 	cmpgei	r4,r17,17
  803b64:	d8c01c17 	ldw	r3,112(sp)
  803b68:	d8801b17 	ldw	r2,108(sp)
  803b6c:	dd802704 	addi	r22,sp,156
  803b70:	203fed1e 	bne	r4,zero,803b28 <___vfprintf_internal_r+0x754>
  803b74:	e019883a 	mov	r12,fp
  803b78:	10800044 	addi	r2,r2,1
  803b7c:	1c47883a 	add	r3,r3,r17
  803b80:	d8801b15 	stw	r2,108(sp)
  803b84:	b3000015 	stw	r12,0(r22)
  803b88:	b4400115 	stw	r17,4(r22)
  803b8c:	d8c01c15 	stw	r3,112(sp)
  803b90:	10800210 	cmplti	r2,r2,8
  803b94:	103f121e 	bne	r2,zero,8037e0 <___vfprintf_internal_r+0x40c>
  803b98:	d9801a04 	addi	r6,sp,104
  803b9c:	900b883a 	mov	r5,r18
  803ba0:	9809883a 	mov	r4,r19
  803ba4:	080ab180 	call	80ab18 <__sprint_r>
  803ba8:	103f191e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  803bac:	d8c01c17 	ldw	r3,112(sp)
  803bb0:	003f0b06 	br	8037e0 <___vfprintf_internal_r+0x40c>
  803bb4:	9809883a 	mov	r4,r19
  803bb8:	08076f00 	call	8076f0 <__sinit>
  803bbc:	003e1d06 	br	803434 <___vfprintf_internal_r+0x60>
  803bc0:	21003fcc 	andi	r4,r4,255
  803bc4:	2005de1e 	bne	r4,zero,805340 <___vfprintf_internal_r+0x1f6c>
  803bc8:	6080080c 	andi	r2,r12,32
  803bcc:	10004926 	beq	r2,zero,803cf4 <___vfprintf_internal_r+0x920>
  803bd0:	d8c00617 	ldw	r3,24(sp)
  803bd4:	18800117 	ldw	r2,4(r3)
  803bd8:	1d000017 	ldw	r20,0(r3)
  803bdc:	18c00204 	addi	r3,r3,8
  803be0:	d8c00615 	stw	r3,24(sp)
  803be4:	102b883a 	mov	r21,r2
  803be8:	10004e16 	blt	r2,zero,803d24 <___vfprintf_internal_r+0x950>
  803bec:	40bfffd8 	cmpnei	r2,r8,-1
  803bf0:	db401343 	ldbu	r13,77(sp)
  803bf4:	10000626 	beq	r2,zero,803c10 <___vfprintf_internal_r+0x83c>
  803bf8:	047fdfc4 	movi	r17,-129
  803bfc:	6446703a 	and	r3,r12,r17
  803c00:	a544b03a 	or	r2,r20,r21
  803c04:	d8c00415 	stw	r3,16(sp)
  803c08:	1002bd26 	beq	r2,zero,804700 <___vfprintf_internal_r+0x132c>
  803c0c:	db000417 	ldw	r12,16(sp)
  803c10:	a803701e 	bne	r21,zero,8049d4 <___vfprintf_internal_r+0x1600>
  803c14:	a08002a8 	cmpgeui	r2,r20,10
  803c18:	10036e1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x1600>
  803c1c:	a5000c04 	addi	r20,r20,48
  803c20:	dd0026c5 	stb	r20,155(sp)
  803c24:	db000415 	stw	r12,16(sp)
  803c28:	05400044 	movi	r21,1
  803c2c:	dc4026c4 	addi	r17,sp,155
  803c30:	4029883a 	mov	r20,r8
  803c34:	4540010e 	bge	r8,r21,803c3c <___vfprintf_internal_r+0x868>
  803c38:	a829883a 	mov	r20,r21
  803c3c:	d8000715 	stw	zero,28(sp)
  803c40:	6b403fcc 	andi	r13,r13,255
  803c44:	6b40201c 	xori	r13,r13,128
  803c48:	6b7fe004 	addi	r13,r13,-128
  803c4c:	683ea926 	beq	r13,zero,8036f4 <___vfprintf_internal_r+0x320>
  803c50:	a5000044 	addi	r20,r20,1
  803c54:	003ea706 	br	8036f4 <___vfprintf_internal_r+0x320>
  803c58:	bac00007 	ldb	r11,0(r23)
  803c5c:	63001014 	ori	r12,r12,64
  803c60:	003e2806 	br	803504 <___vfprintf_internal_r+0x130>
  803c64:	d8c00617 	ldw	r3,24(sp)
  803c68:	d8001345 	stb	zero,77(sp)
  803c6c:	05000044 	movi	r20,1
  803c70:	18800017 	ldw	r2,0(r3)
  803c74:	18c00104 	addi	r3,r3,4
  803c78:	d8c00615 	stw	r3,24(sp)
  803c7c:	d8801d05 	stb	r2,116(sp)
  803c80:	05400044 	movi	r21,1
  803c84:	dc401d04 	addi	r17,sp,116
  803c88:	003e9706 	br	8036e8 <___vfprintf_internal_r+0x314>
  803c8c:	21003fcc 	andi	r4,r4,255
  803c90:	2005a71e 	bne	r4,zero,805330 <___vfprintf_internal_r+0x1f5c>
  803c94:	00802074 	movhi	r2,129
  803c98:	1089a504 	addi	r2,r2,9876
  803c9c:	d8800c15 	stw	r2,48(sp)
  803ca0:	6080080c 	andi	r2,r12,32
  803ca4:	10008726 	beq	r2,zero,803ec4 <___vfprintf_internal_r+0xaf0>
  803ca8:	d8800617 	ldw	r2,24(sp)
  803cac:	15000017 	ldw	r20,0(r2)
  803cb0:	15400117 	ldw	r21,4(r2)
  803cb4:	10800204 	addi	r2,r2,8
  803cb8:	d8800615 	stw	r2,24(sp)
  803cbc:	6080004c 	andi	r2,r12,1
  803cc0:	10000226 	beq	r2,zero,803ccc <___vfprintf_internal_r+0x8f8>
  803cc4:	a544b03a 	or	r2,r20,r21
  803cc8:	1002cd1e 	bne	r2,zero,804800 <___vfprintf_internal_r+0x142c>
  803ccc:	00800084 	movi	r2,2
  803cd0:	003f0c06 	br	803904 <___vfprintf_internal_r+0x530>
  803cd4:	bac00007 	ldb	r11,0(r23)
  803cd8:	63000214 	ori	r12,r12,8
  803cdc:	003e0906 	br	803504 <___vfprintf_internal_r+0x130>
  803ce0:	21003fcc 	andi	r4,r4,255
  803ce4:	2005981e 	bne	r4,zero,805348 <___vfprintf_internal_r+0x1f74>
  803ce8:	63000414 	ori	r12,r12,16
  803cec:	6080080c 	andi	r2,r12,32
  803cf0:	103fb71e 	bne	r2,zero,803bd0 <___vfprintf_internal_r+0x7fc>
  803cf4:	d9000617 	ldw	r4,24(sp)
  803cf8:	6080040c 	andi	r2,r12,16
  803cfc:	20c00104 	addi	r3,r4,4
  803d00:	1002dd1e 	bne	r2,zero,804878 <___vfprintf_internal_r+0x14a4>
  803d04:	6080100c 	andi	r2,r12,64
  803d08:	10048426 	beq	r2,zero,804f1c <___vfprintf_internal_r+0x1b48>
  803d0c:	d8800617 	ldw	r2,24(sp)
  803d10:	d8c00615 	stw	r3,24(sp)
  803d14:	1500000f 	ldh	r20,0(r2)
  803d18:	a02bd7fa 	srai	r21,r20,31
  803d1c:	a805883a 	mov	r2,r21
  803d20:	103fb20e 	bge	r2,zero,803bec <___vfprintf_internal_r+0x818>
  803d24:	a004c03a 	cmpne	r2,r20,zero
  803d28:	056bc83a 	sub	r21,zero,r21
  803d2c:	a8abc83a 	sub	r21,r21,r2
  803d30:	00800b44 	movi	r2,45
  803d34:	d8801345 	stb	r2,77(sp)
  803d38:	40ffffe0 	cmpeqi	r3,r8,-1
  803d3c:	0529c83a 	sub	r20,zero,r20
  803d40:	03400b44 	movi	r13,45
  803d44:	00800044 	movi	r2,1
  803d48:	183ef226 	beq	r3,zero,803914 <___vfprintf_internal_r+0x540>
  803d4c:	10c00060 	cmpeqi	r3,r2,1
  803d50:	183faf1e 	bne	r3,zero,803c10 <___vfprintf_internal_r+0x83c>
  803d54:	108000a0 	cmpeqi	r2,r2,2
  803d58:	1001581e 	bne	r2,zero,8042bc <___vfprintf_internal_r+0xee8>
  803d5c:	dc402704 	addi	r17,sp,156
  803d60:	a006d0fa 	srli	r3,r20,3
  803d64:	a808977a 	slli	r4,r21,29
  803d68:	a82ad0fa 	srli	r21,r21,3
  803d6c:	a50001cc 	andi	r20,r20,7
  803d70:	a0800c04 	addi	r2,r20,48
  803d74:	20e8b03a 	or	r20,r4,r3
  803d78:	88bfffc5 	stb	r2,-1(r17)
  803d7c:	a546b03a 	or	r3,r20,r21
  803d80:	880b883a 	mov	r5,r17
  803d84:	8c7fffc4 	addi	r17,r17,-1
  803d88:	183ff51e 	bne	r3,zero,803d60 <___vfprintf_internal_r+0x98c>
  803d8c:	60c0004c 	andi	r3,r12,1
  803d90:	18015726 	beq	r3,zero,8042f0 <___vfprintf_internal_r+0xf1c>
  803d94:	10803fcc 	andi	r2,r2,255
  803d98:	1080201c 	xori	r2,r2,128
  803d9c:	10bfe004 	addi	r2,r2,-128
  803da0:	10800c18 	cmpnei	r2,r2,48
  803da4:	10015226 	beq	r2,zero,8042f0 <___vfprintf_internal_r+0xf1c>
  803da8:	00800c04 	movi	r2,48
  803dac:	297fff84 	addi	r5,r5,-2
  803db0:	88bfffc5 	stb	r2,-1(r17)
  803db4:	d8802704 	addi	r2,sp,156
  803db8:	116bc83a 	sub	r21,r2,r5
  803dbc:	db000415 	stw	r12,16(sp)
  803dc0:	2823883a 	mov	r17,r5
  803dc4:	003f9a06 	br	803c30 <___vfprintf_internal_r+0x85c>
  803dc8:	bac00007 	ldb	r11,0(r23)
  803dcc:	63002014 	ori	r12,r12,128
  803dd0:	003dcc06 	br	803504 <___vfprintf_internal_r+0x130>
  803dd4:	bf000007 	ldb	fp,0(r23)
  803dd8:	b8800044 	addi	r2,r23,1
  803ddc:	e0c00aa0 	cmpeqi	r3,fp,42
  803de0:	1805b11e 	bne	r3,zero,8054a8 <___vfprintf_internal_r+0x20d4>
  803de4:	e0fff404 	addi	r3,fp,-48
  803de8:	198002b0 	cmpltui	r6,r3,10
  803dec:	102f883a 	mov	r23,r2
  803df0:	0011883a 	mov	r8,zero
  803df4:	303dc526 	beq	r6,zero,80350c <___vfprintf_internal_r+0x138>
  803df8:	400490ba 	slli	r2,r8,2
  803dfc:	bf000007 	ldb	fp,0(r23)
  803e00:	bdc00044 	addi	r23,r23,1
  803e04:	1211883a 	add	r8,r2,r8
  803e08:	4211883a 	add	r8,r8,r8
  803e0c:	40d1883a 	add	r8,r8,r3
  803e10:	e0fff404 	addi	r3,fp,-48
  803e14:	188002b0 	cmpltui	r2,r3,10
  803e18:	103ff71e 	bne	r2,zero,803df8 <___vfprintf_internal_r+0xa24>
  803e1c:	003dbb06 	br	80350c <___vfprintf_internal_r+0x138>
  803e20:	bf000003 	ldbu	fp,0(r23)
  803e24:	e2c03fcc 	andi	r11,fp,255
  803e28:	5ac0201c 	xori	r11,r11,128
  803e2c:	63000114 	ori	r12,r12,4
  803e30:	5affe004 	addi	r11,r11,-128
  803e34:	003db306 	br	803504 <___vfprintf_internal_r+0x130>
  803e38:	bac00007 	ldb	r11,0(r23)
  803e3c:	01000044 	movi	r4,1
  803e40:	01400ac4 	movi	r5,43
  803e44:	003daf06 	br	803504 <___vfprintf_internal_r+0x130>
  803e48:	d8800617 	ldw	r2,24(sp)
  803e4c:	bf000003 	ldbu	fp,0(r23)
  803e50:	14000017 	ldw	r16,0(r2)
  803e54:	10800104 	addi	r2,r2,4
  803e58:	80028c16 	blt	r16,zero,80488c <___vfprintf_internal_r+0x14b8>
  803e5c:	d8800615 	stw	r2,24(sp)
  803e60:	e2c03fcc 	andi	r11,fp,255
  803e64:	5ac0201c 	xori	r11,r11,128
  803e68:	5affe004 	addi	r11,r11,-128
  803e6c:	003da506 	br	803504 <___vfprintf_internal_r+0x130>
  803e70:	bac00007 	ldb	r11,0(r23)
  803e74:	63000054 	ori	r12,r12,1
  803e78:	003da206 	br	803504 <___vfprintf_internal_r+0x130>
  803e7c:	28803fcc 	andi	r2,r5,255
  803e80:	1080201c 	xori	r2,r2,128
  803e84:	10bfe004 	addi	r2,r2,-128
  803e88:	bf000003 	ldbu	fp,0(r23)
  803e8c:	103ff41e 	bne	r2,zero,803e60 <___vfprintf_internal_r+0xa8c>
  803e90:	e2c03fcc 	andi	r11,fp,255
  803e94:	5ac0201c 	xori	r11,r11,128
  803e98:	01000044 	movi	r4,1
  803e9c:	01400804 	movi	r5,32
  803ea0:	5affe004 	addi	r11,r11,-128
  803ea4:	003d9706 	br	803504 <___vfprintf_internal_r+0x130>
  803ea8:	21003fcc 	andi	r4,r4,255
  803eac:	20051e1e 	bne	r4,zero,805328 <___vfprintf_internal_r+0x1f54>
  803eb0:	00802074 	movhi	r2,129
  803eb4:	1089a004 	addi	r2,r2,9856
  803eb8:	d8800c15 	stw	r2,48(sp)
  803ebc:	6080080c 	andi	r2,r12,32
  803ec0:	103f791e 	bne	r2,zero,803ca8 <___vfprintf_internal_r+0x8d4>
  803ec4:	d9000617 	ldw	r4,24(sp)
  803ec8:	6080040c 	andi	r2,r12,16
  803ecc:	20c00104 	addi	r3,r4,4
  803ed0:	10025b1e 	bne	r2,zero,804840 <___vfprintf_internal_r+0x146c>
  803ed4:	6080100c 	andi	r2,r12,64
  803ed8:	10046026 	beq	r2,zero,80505c <___vfprintf_internal_r+0x1c88>
  803edc:	d8800617 	ldw	r2,24(sp)
  803ee0:	002b883a 	mov	r21,zero
  803ee4:	d8c00615 	stw	r3,24(sp)
  803ee8:	1500000b 	ldhu	r20,0(r2)
  803eec:	003f7306 	br	803cbc <___vfprintf_internal_r+0x8e8>
  803ef0:	d8800617 	ldw	r2,24(sp)
  803ef4:	d8001345 	stb	zero,77(sp)
  803ef8:	14400017 	ldw	r17,0(r2)
  803efc:	10c00104 	addi	r3,r2,4
  803f00:	88028e26 	beq	r17,zero,80493c <___vfprintf_internal_r+0x1568>
  803f04:	40bfffe0 	cmpeqi	r2,r8,-1
  803f08:	1003c01e 	bne	r2,zero,804e0c <___vfprintf_internal_r+0x1a38>
  803f0c:	400d883a 	mov	r6,r8
  803f10:	000b883a 	mov	r5,zero
  803f14:	8809883a 	mov	r4,r17
  803f18:	d8c00715 	stw	r3,28(sp)
  803f1c:	db000615 	stw	r12,24(sp)
  803f20:	da000415 	stw	r8,16(sp)
  803f24:	0808ba00 	call	808ba0 <memchr>
  803f28:	da000417 	ldw	r8,16(sp)
  803f2c:	db000617 	ldw	r12,24(sp)
  803f30:	d8c00717 	ldw	r3,28(sp)
  803f34:	1004ec26 	beq	r2,zero,8052e8 <___vfprintf_internal_r+0x1f14>
  803f38:	146bc83a 	sub	r21,r2,r17
  803f3c:	a829883a 	mov	r20,r21
  803f40:	d8c00615 	stw	r3,24(sp)
  803f44:	003de806 	br	8036e8 <___vfprintf_internal_r+0x314>
  803f48:	bac00007 	ldb	r11,0(r23)
  803f4c:	63000814 	ori	r12,r12,32
  803f50:	003d6c06 	br	803504 <___vfprintf_internal_r+0x130>
  803f54:	d8c00617 	ldw	r3,24(sp)
  803f58:	00800c04 	movi	r2,48
  803f5c:	d8801385 	stb	r2,78(sp)
  803f60:	00801e04 	movi	r2,120
  803f64:	01002074 	movhi	r4,129
  803f68:	d88013c5 	stb	r2,79(sp)
  803f6c:	18800104 	addi	r2,r3,4
  803f70:	d8800615 	stw	r2,24(sp)
  803f74:	2089a004 	addi	r2,r4,9856
  803f78:	d8800c15 	stw	r2,48(sp)
  803f7c:	1d000017 	ldw	r20,0(r3)
  803f80:	002b883a 	mov	r21,zero
  803f84:	63000094 	ori	r12,r12,2
  803f88:	00800084 	movi	r2,2
  803f8c:	07001e04 	movi	fp,120
  803f90:	003e5c06 	br	803904 <___vfprintf_internal_r+0x530>
  803f94:	21003fcc 	andi	r4,r4,255
  803f98:	2004e71e 	bne	r4,zero,805338 <___vfprintf_internal_r+0x1f64>
  803f9c:	d9000617 	ldw	r4,24(sp)
  803fa0:	6080080c 	andi	r2,r12,32
  803fa4:	20c00017 	ldw	r3,0(r4)
  803fa8:	21000104 	addi	r4,r4,4
  803fac:	d9000615 	stw	r4,24(sp)
  803fb0:	10021e1e 	bne	r2,zero,80482c <___vfprintf_internal_r+0x1458>
  803fb4:	6080040c 	andi	r2,r12,16
  803fb8:	1002ae1e 	bne	r2,zero,804a74 <___vfprintf_internal_r+0x16a0>
  803fbc:	6300100c 	andi	r12,r12,64
  803fc0:	6002ac26 	beq	r12,zero,804a74 <___vfprintf_internal_r+0x16a0>
  803fc4:	d8800517 	ldw	r2,20(sp)
  803fc8:	1880000d 	sth	r2,0(r3)
  803fcc:	003d3506 	br	8034a4 <___vfprintf_internal_r+0xd0>
  803fd0:	bac00007 	ldb	r11,0(r23)
  803fd4:	58801b18 	cmpnei	r2,r11,108
  803fd8:	10024926 	beq	r2,zero,804900 <___vfprintf_internal_r+0x152c>
  803fdc:	63000414 	ori	r12,r12,16
  803fe0:	003d4806 	br	803504 <___vfprintf_internal_r+0x130>
  803fe4:	e2c01990 	cmplti	r11,fp,102
  803fe8:	5800cb1e 	bne	r11,zero,804318 <___vfprintf_internal_r+0xf44>
  803fec:	d9000917 	ldw	r4,36(sp)
  803ff0:	d9400a17 	ldw	r5,40(sp)
  803ff4:	000d883a 	mov	r6,zero
  803ff8:	000f883a 	mov	r7,zero
  803ffc:	d8c00e15 	stw	r3,56(sp)
  804000:	080dc9c0 	call	80dc9c <__eqdf2>
  804004:	d8c00e17 	ldw	r3,56(sp)
  804008:	1001641e 	bne	r2,zero,80459c <___vfprintf_internal_r+0x11c8>
  80400c:	d8801b17 	ldw	r2,108(sp)
  804010:	01002074 	movhi	r4,129
  804014:	2109ac04 	addi	r4,r4,9904
  804018:	10800044 	addi	r2,r2,1
  80401c:	18c00044 	addi	r3,r3,1
  804020:	b1000015 	stw	r4,0(r22)
  804024:	01000044 	movi	r4,1
  804028:	d8801b15 	stw	r2,108(sp)
  80402c:	b1000115 	stw	r4,4(r22)
  804030:	d8c01c15 	stw	r3,112(sp)
  804034:	10800208 	cmpgei	r2,r2,8
  804038:	1003621e 	bne	r2,zero,804dc4 <___vfprintf_internal_r+0x19f0>
  80403c:	b5800204 	addi	r22,r22,8
  804040:	d8801417 	ldw	r2,80(sp)
  804044:	d9000817 	ldw	r4,32(sp)
  804048:	1101e70e 	bge	r2,r4,8047e8 <___vfprintf_internal_r+0x1414>
  80404c:	d8800d17 	ldw	r2,52(sp)
  804050:	d9000b17 	ldw	r4,44(sp)
  804054:	b0800015 	stw	r2,0(r22)
  804058:	d8801b17 	ldw	r2,108(sp)
  80405c:	1907883a 	add	r3,r3,r4
  804060:	b1000115 	stw	r4,4(r22)
  804064:	10800044 	addi	r2,r2,1
  804068:	d8801b15 	stw	r2,108(sp)
  80406c:	d8c01c15 	stw	r3,112(sp)
  804070:	10800208 	cmpgei	r2,r2,8
  804074:	1002291e 	bne	r2,zero,80491c <___vfprintf_internal_r+0x1548>
  804078:	b5800204 	addi	r22,r22,8
  80407c:	d8800817 	ldw	r2,32(sp)
  804080:	157fffc4 	addi	r21,r2,-1
  804084:	057dd10e 	bge	zero,r21,8037cc <___vfprintf_internal_r+0x3f8>
  804088:	01c02074 	movhi	r7,129
  80408c:	a9000450 	cmplti	r4,r21,17
  804090:	d8801b17 	ldw	r2,108(sp)
  804094:	39c9ad04 	addi	r7,r7,9908
  804098:	2003461e 	bne	r4,zero,804db4 <___vfprintf_internal_r+0x19e0>
  80409c:	07000404 	movi	fp,16
  8040a0:	3823883a 	mov	r17,r7
  8040a4:	00000406 	br	8040b8 <___vfprintf_internal_r+0xce4>
  8040a8:	b5800204 	addi	r22,r22,8
  8040ac:	ad7ffc04 	addi	r21,r21,-16
  8040b0:	a9000448 	cmpgei	r4,r21,17
  8040b4:	20033e26 	beq	r4,zero,804db0 <___vfprintf_internal_r+0x19dc>
  8040b8:	10800044 	addi	r2,r2,1
  8040bc:	18c00404 	addi	r3,r3,16
  8040c0:	b4400015 	stw	r17,0(r22)
  8040c4:	b7000115 	stw	fp,4(r22)
  8040c8:	d8c01c15 	stw	r3,112(sp)
  8040cc:	d8801b15 	stw	r2,108(sp)
  8040d0:	11000208 	cmpgei	r4,r2,8
  8040d4:	203ff426 	beq	r4,zero,8040a8 <___vfprintf_internal_r+0xcd4>
  8040d8:	d9801a04 	addi	r6,sp,104
  8040dc:	900b883a 	mov	r5,r18
  8040e0:	9809883a 	mov	r4,r19
  8040e4:	080ab180 	call	80ab18 <__sprint_r>
  8040e8:	103dc91e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8040ec:	d8c01c17 	ldw	r3,112(sp)
  8040f0:	d8801b17 	ldw	r2,108(sp)
  8040f4:	dd802704 	addi	r22,sp,156
  8040f8:	003fec06 	br	8040ac <___vfprintf_internal_r+0xcd8>
  8040fc:	8519c83a 	sub	r12,r16,r20
  804100:	033da30e 	bge	zero,r12,803790 <___vfprintf_internal_r+0x3bc>
  804104:	01c02074 	movhi	r7,129
  804108:	61000450 	cmplti	r4,r12,17
  80410c:	d8801b17 	ldw	r2,108(sp)
  804110:	39c9ad04 	addi	r7,r7,9908
  804114:	2000281e 	bne	r4,zero,8041b8 <___vfprintf_internal_r+0xde4>
  804118:	dc400e15 	stw	r17,56(sp)
  80411c:	dc000f15 	stw	r16,60(sp)
  804120:	b009883a 	mov	r4,r22
  804124:	03400404 	movi	r13,16
  804128:	a02d883a 	mov	r22,r20
  80412c:	6021883a 	mov	r16,r12
  804130:	4029883a 	mov	r20,r8
  804134:	3823883a 	mov	r17,r7
  804138:	00000406 	br	80414c <___vfprintf_internal_r+0xd78>
  80413c:	843ffc04 	addi	r16,r16,-16
  804140:	81400448 	cmpgei	r5,r16,17
  804144:	21000204 	addi	r4,r4,8
  804148:	28001426 	beq	r5,zero,80419c <___vfprintf_internal_r+0xdc8>
  80414c:	10800044 	addi	r2,r2,1
  804150:	18c00404 	addi	r3,r3,16
  804154:	24400015 	stw	r17,0(r4)
  804158:	23400115 	stw	r13,4(r4)
  80415c:	d8c01c15 	stw	r3,112(sp)
  804160:	d8801b15 	stw	r2,108(sp)
  804164:	11400208 	cmpgei	r5,r2,8
  804168:	283ff426 	beq	r5,zero,80413c <___vfprintf_internal_r+0xd68>
  80416c:	d9801a04 	addi	r6,sp,104
  804170:	900b883a 	mov	r5,r18
  804174:	9809883a 	mov	r4,r19
  804178:	080ab180 	call	80ab18 <__sprint_r>
  80417c:	103da41e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804180:	843ffc04 	addi	r16,r16,-16
  804184:	81400448 	cmpgei	r5,r16,17
  804188:	d8c01c17 	ldw	r3,112(sp)
  80418c:	d8801b17 	ldw	r2,108(sp)
  804190:	d9002704 	addi	r4,sp,156
  804194:	03400404 	movi	r13,16
  804198:	283fec1e 	bne	r5,zero,80414c <___vfprintf_internal_r+0xd78>
  80419c:	8019883a 	mov	r12,r16
  8041a0:	880f883a 	mov	r7,r17
  8041a4:	dc000f17 	ldw	r16,60(sp)
  8041a8:	dc400e17 	ldw	r17,56(sp)
  8041ac:	a011883a 	mov	r8,r20
  8041b0:	b029883a 	mov	r20,r22
  8041b4:	202d883a 	mov	r22,r4
  8041b8:	10800044 	addi	r2,r2,1
  8041bc:	1b07883a 	add	r3,r3,r12
  8041c0:	d8801b15 	stw	r2,108(sp)
  8041c4:	b1c00015 	stw	r7,0(r22)
  8041c8:	b3000115 	stw	r12,4(r22)
  8041cc:	d8c01c15 	stw	r3,112(sp)
  8041d0:	10800208 	cmpgei	r2,r2,8
  8041d4:	1003031e 	bne	r2,zero,804de4 <___vfprintf_internal_r+0x1a10>
  8041d8:	4551c83a 	sub	r8,r8,r21
  8041dc:	b5800204 	addi	r22,r22,8
  8041e0:	023d6d0e 	bge	zero,r8,803798 <___vfprintf_internal_r+0x3c4>
  8041e4:	01c02074 	movhi	r7,129
  8041e8:	41000450 	cmplti	r4,r8,17
  8041ec:	d8801b17 	ldw	r2,108(sp)
  8041f0:	39c9ad04 	addi	r7,r7,9908
  8041f4:	2000221e 	bne	r4,zero,804280 <___vfprintf_internal_r+0xeac>
  8041f8:	dc400e15 	stw	r17,56(sp)
  8041fc:	dc000f15 	stw	r16,60(sp)
  804200:	03000404 	movi	r12,16
  804204:	4021883a 	mov	r16,r8
  804208:	3823883a 	mov	r17,r7
  80420c:	00000406 	br	804220 <___vfprintf_internal_r+0xe4c>
  804210:	843ffc04 	addi	r16,r16,-16
  804214:	81000448 	cmpgei	r4,r16,17
  804218:	b5800204 	addi	r22,r22,8
  80421c:	20001426 	beq	r4,zero,804270 <___vfprintf_internal_r+0xe9c>
  804220:	10800044 	addi	r2,r2,1
  804224:	18c00404 	addi	r3,r3,16
  804228:	b4400015 	stw	r17,0(r22)
  80422c:	b3000115 	stw	r12,4(r22)
  804230:	d8c01c15 	stw	r3,112(sp)
  804234:	d8801b15 	stw	r2,108(sp)
  804238:	11000208 	cmpgei	r4,r2,8
  80423c:	203ff426 	beq	r4,zero,804210 <___vfprintf_internal_r+0xe3c>
  804240:	d9801a04 	addi	r6,sp,104
  804244:	900b883a 	mov	r5,r18
  804248:	9809883a 	mov	r4,r19
  80424c:	080ab180 	call	80ab18 <__sprint_r>
  804250:	103d6f1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804254:	843ffc04 	addi	r16,r16,-16
  804258:	81000448 	cmpgei	r4,r16,17
  80425c:	d8c01c17 	ldw	r3,112(sp)
  804260:	d8801b17 	ldw	r2,108(sp)
  804264:	dd802704 	addi	r22,sp,156
  804268:	03000404 	movi	r12,16
  80426c:	203fec1e 	bne	r4,zero,804220 <___vfprintf_internal_r+0xe4c>
  804270:	8011883a 	mov	r8,r16
  804274:	880f883a 	mov	r7,r17
  804278:	dc000f17 	ldw	r16,60(sp)
  80427c:	dc400e17 	ldw	r17,56(sp)
  804280:	10800044 	addi	r2,r2,1
  804284:	1a07883a 	add	r3,r3,r8
  804288:	d8801b15 	stw	r2,108(sp)
  80428c:	b1c00015 	stw	r7,0(r22)
  804290:	b2000115 	stw	r8,4(r22)
  804294:	d8c01c15 	stw	r3,112(sp)
  804298:	10800208 	cmpgei	r2,r2,8
  80429c:	10014a1e 	bne	r2,zero,8047c8 <___vfprintf_internal_r+0x13f4>
  8042a0:	b5800204 	addi	r22,r22,8
  8042a4:	003d3c06 	br	803798 <___vfprintf_internal_r+0x3c4>
  8042a8:	10c00060 	cmpeqi	r3,r2,1
  8042ac:	1803bc1e 	bne	r3,zero,8051a0 <___vfprintf_internal_r+0x1dcc>
  8042b0:	108000a0 	cmpeqi	r2,r2,2
  8042b4:	db000417 	ldw	r12,16(sp)
  8042b8:	103ea826 	beq	r2,zero,803d5c <___vfprintf_internal_r+0x988>
  8042bc:	d9000c17 	ldw	r4,48(sp)
  8042c0:	dc402704 	addi	r17,sp,156
  8042c4:	a08003cc 	andi	r2,r20,15
  8042c8:	a806973a 	slli	r3,r21,28
  8042cc:	a028d13a 	srli	r20,r20,4
  8042d0:	2085883a 	add	r2,r4,r2
  8042d4:	10800003 	ldbu	r2,0(r2)
  8042d8:	a82ad13a 	srli	r21,r21,4
  8042dc:	1d28b03a 	or	r20,r3,r20
  8042e0:	88bfffc5 	stb	r2,-1(r17)
  8042e4:	a544b03a 	or	r2,r20,r21
  8042e8:	8c7fffc4 	addi	r17,r17,-1
  8042ec:	103ff51e 	bne	r2,zero,8042c4 <___vfprintf_internal_r+0xef0>
  8042f0:	d8802704 	addi	r2,sp,156
  8042f4:	146bc83a 	sub	r21,r2,r17
  8042f8:	db000415 	stw	r12,16(sp)
  8042fc:	003e4c06 	br	803c30 <___vfprintf_internal_r+0x85c>
  804300:	d9801a04 	addi	r6,sp,104
  804304:	900b883a 	mov	r5,r18
  804308:	9809883a 	mov	r4,r19
  80430c:	080ab180 	call	80ab18 <__sprint_r>
  804310:	103d3926 	beq	r2,zero,8037f8 <___vfprintf_internal_r+0x424>
  804314:	003d3e06 	br	803810 <___vfprintf_internal_r+0x43c>
  804318:	d8800817 	ldw	r2,32(sp)
  80431c:	da001b17 	ldw	r8,108(sp)
  804320:	18c00044 	addi	r3,r3,1
  804324:	10800088 	cmpgei	r2,r2,2
  804328:	45400044 	addi	r21,r8,1
  80432c:	b7000204 	addi	fp,r22,8
  804330:	1000f826 	beq	r2,zero,804714 <___vfprintf_internal_r+0x1340>
  804334:	00800044 	movi	r2,1
  804338:	b0800115 	stw	r2,4(r22)
  80433c:	b4400015 	stw	r17,0(r22)
  804340:	d8c01c15 	stw	r3,112(sp)
  804344:	dd401b15 	stw	r21,108(sp)
  804348:	a8800210 	cmplti	r2,r21,8
  80434c:	1001cc26 	beq	r2,zero,804a80 <___vfprintf_internal_r+0x16ac>
  804350:	d8800b17 	ldw	r2,44(sp)
  804354:	d9000d17 	ldw	r4,52(sp)
  804358:	ad400044 	addi	r21,r21,1
  80435c:	1887883a 	add	r3,r3,r2
  804360:	e0800115 	stw	r2,4(fp)
  804364:	e1000015 	stw	r4,0(fp)
  804368:	d8c01c15 	stw	r3,112(sp)
  80436c:	dd401b15 	stw	r21,108(sp)
  804370:	a8800208 	cmpgei	r2,r21,8
  804374:	1001cb1e 	bne	r2,zero,804aa4 <___vfprintf_internal_r+0x16d0>
  804378:	e7000204 	addi	fp,fp,8
  80437c:	d9000917 	ldw	r4,36(sp)
  804380:	d9400a17 	ldw	r5,40(sp)
  804384:	aa000044 	addi	r8,r21,1
  804388:	000d883a 	mov	r6,zero
  80438c:	000f883a 	mov	r7,zero
  804390:	d8c00e15 	stw	r3,56(sp)
  804394:	da000715 	stw	r8,28(sp)
  804398:	080dc9c0 	call	80dc9c <__eqdf2>
  80439c:	d8c00817 	ldw	r3,32(sp)
  8043a0:	da000717 	ldw	r8,28(sp)
  8043a4:	e5800204 	addi	r22,fp,8
  8043a8:	1affffc4 	addi	r11,r3,-1
  8043ac:	d8c00e17 	ldw	r3,56(sp)
  8043b0:	1000e526 	beq	r2,zero,804748 <___vfprintf_internal_r+0x1374>
  8043b4:	8a400044 	addi	r9,r17,1
  8043b8:	1ac7883a 	add	r3,r3,r11
  8043bc:	da001b15 	stw	r8,108(sp)
  8043c0:	e2400015 	stw	r9,0(fp)
  8043c4:	e2c00115 	stw	r11,4(fp)
  8043c8:	d8c01c15 	stw	r3,112(sp)
  8043cc:	42000208 	cmpgei	r8,r8,8
  8043d0:	40013e1e 	bne	r8,zero,8048cc <___vfprintf_internal_r+0x14f8>
  8043d4:	e0800404 	addi	r2,fp,16
  8043d8:	aa000084 	addi	r8,r21,2
  8043dc:	b039883a 	mov	fp,r22
  8043e0:	102d883a 	mov	r22,r2
  8043e4:	d9001017 	ldw	r4,64(sp)
  8043e8:	d8801644 	addi	r2,sp,89
  8043ec:	da001b15 	stw	r8,108(sp)
  8043f0:	20c7883a 	add	r3,r4,r3
  8043f4:	e0800015 	stw	r2,0(fp)
  8043f8:	e1000115 	stw	r4,4(fp)
  8043fc:	d8c01c15 	stw	r3,112(sp)
  804400:	42000210 	cmplti	r8,r8,8
  804404:	403cf11e 	bne	r8,zero,8037cc <___vfprintf_internal_r+0x3f8>
  804408:	d9801a04 	addi	r6,sp,104
  80440c:	900b883a 	mov	r5,r18
  804410:	9809883a 	mov	r4,r19
  804414:	080ab180 	call	80ab18 <__sprint_r>
  804418:	103cfd1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  80441c:	d8c01c17 	ldw	r3,112(sp)
  804420:	dd802704 	addi	r22,sp,156
  804424:	003ce906 	br	8037cc <___vfprintf_internal_r+0x3f8>
  804428:	db000417 	ldw	r12,16(sp)
  80442c:	003e4706 	br	803d4c <___vfprintf_internal_r+0x978>
  804430:	03002074 	movhi	r12,129
  804434:	39000450 	cmplti	r4,r7,17
  804438:	d8801b17 	ldw	r2,108(sp)
  80443c:	6309b104 	addi	r12,r12,9924
  804440:	2000321e 	bne	r4,zero,80450c <___vfprintf_internal_r+0x1138>
  804444:	dc401115 	stw	r17,68(sp)
  804448:	b009883a 	mov	r4,r22
  80444c:	9023883a 	mov	r17,r18
  804450:	a82d883a 	mov	r22,r21
  804454:	ddc01215 	stw	r23,72(sp)
  804458:	03c00404 	movi	r15,16
  80445c:	a02f883a 	mov	r23,r20
  804460:	db800e15 	stw	r14,56(sp)
  804464:	8029883a 	mov	r20,r16
  804468:	db400f15 	stw	r13,60(sp)
  80446c:	402b883a 	mov	r21,r8
  804470:	3821883a 	mov	r16,r7
  804474:	6025883a 	mov	r18,r12
  804478:	00000406 	br	80448c <___vfprintf_internal_r+0x10b8>
  80447c:	843ffc04 	addi	r16,r16,-16
  804480:	81800448 	cmpgei	r6,r16,17
  804484:	21000204 	addi	r4,r4,8
  804488:	30001426 	beq	r6,zero,8044dc <___vfprintf_internal_r+0x1108>
  80448c:	10800044 	addi	r2,r2,1
  804490:	18c00404 	addi	r3,r3,16
  804494:	24800015 	stw	r18,0(r4)
  804498:	23c00115 	stw	r15,4(r4)
  80449c:	d8c01c15 	stw	r3,112(sp)
  8044a0:	d8801b15 	stw	r2,108(sp)
  8044a4:	11800208 	cmpgei	r6,r2,8
  8044a8:	303ff426 	beq	r6,zero,80447c <___vfprintf_internal_r+0x10a8>
  8044ac:	d9801a04 	addi	r6,sp,104
  8044b0:	880b883a 	mov	r5,r17
  8044b4:	9809883a 	mov	r4,r19
  8044b8:	080ab180 	call	80ab18 <__sprint_r>
  8044bc:	1001b91e 	bne	r2,zero,804ba4 <___vfprintf_internal_r+0x17d0>
  8044c0:	843ffc04 	addi	r16,r16,-16
  8044c4:	81800448 	cmpgei	r6,r16,17
  8044c8:	d8c01c17 	ldw	r3,112(sp)
  8044cc:	d8801b17 	ldw	r2,108(sp)
  8044d0:	d9002704 	addi	r4,sp,156
  8044d4:	03c00404 	movi	r15,16
  8044d8:	303fec1e 	bne	r6,zero,80448c <___vfprintf_internal_r+0x10b8>
  8044dc:	800f883a 	mov	r7,r16
  8044e0:	9019883a 	mov	r12,r18
  8044e4:	a021883a 	mov	r16,r20
  8044e8:	8825883a 	mov	r18,r17
  8044ec:	b829883a 	mov	r20,r23
  8044f0:	db800e17 	ldw	r14,56(sp)
  8044f4:	db400f17 	ldw	r13,60(sp)
  8044f8:	ddc01217 	ldw	r23,72(sp)
  8044fc:	dc401117 	ldw	r17,68(sp)
  804500:	a811883a 	mov	r8,r21
  804504:	b02b883a 	mov	r21,r22
  804508:	202d883a 	mov	r22,r4
  80450c:	10800044 	addi	r2,r2,1
  804510:	19c7883a 	add	r3,r3,r7
  804514:	d8801b15 	stw	r2,108(sp)
  804518:	b3000015 	stw	r12,0(r22)
  80451c:	b1c00115 	stw	r7,4(r22)
  804520:	d8c01c15 	stw	r3,112(sp)
  804524:	10800208 	cmpgei	r2,r2,8
  804528:	1001671e 	bne	r2,zero,804ac8 <___vfprintf_internal_r+0x16f4>
  80452c:	b5800204 	addi	r22,r22,8
  804530:	003c7a06 	br	80371c <___vfprintf_internal_r+0x348>
  804534:	d9801a04 	addi	r6,sp,104
  804538:	900b883a 	mov	r5,r18
  80453c:	9809883a 	mov	r4,r19
  804540:	da001115 	stw	r8,68(sp)
  804544:	db400f15 	stw	r13,60(sp)
  804548:	db800e15 	stw	r14,56(sp)
  80454c:	080ab180 	call	80ab18 <__sprint_r>
  804550:	103caf1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804554:	d8c01c17 	ldw	r3,112(sp)
  804558:	da001117 	ldw	r8,68(sp)
  80455c:	db400f17 	ldw	r13,60(sp)
  804560:	db800e17 	ldw	r14,56(sp)
  804564:	dd802704 	addi	r22,sp,156
  804568:	003c7a06 	br	803754 <___vfprintf_internal_r+0x380>
  80456c:	d9801a04 	addi	r6,sp,104
  804570:	900b883a 	mov	r5,r18
  804574:	9809883a 	mov	r4,r19
  804578:	da000f15 	stw	r8,60(sp)
  80457c:	db400e15 	stw	r13,56(sp)
  804580:	080ab180 	call	80ab18 <__sprint_r>
  804584:	103ca21e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804588:	d8c01c17 	ldw	r3,112(sp)
  80458c:	da000f17 	ldw	r8,60(sp)
  804590:	db400e17 	ldw	r13,56(sp)
  804594:	dd802704 	addi	r22,sp,156
  804598:	003c7b06 	br	803788 <___vfprintf_internal_r+0x3b4>
  80459c:	d9401417 	ldw	r5,80(sp)
  8045a0:	0141570e 	bge	zero,r5,804b00 <___vfprintf_internal_r+0x172c>
  8045a4:	d8800717 	ldw	r2,28(sp)
  8045a8:	d9000817 	ldw	r4,32(sp)
  8045ac:	102b883a 	mov	r21,r2
  8045b0:	2080b916 	blt	r4,r2,804898 <___vfprintf_internal_r+0x14c4>
  8045b4:	05400a0e 	bge	zero,r21,8045e0 <___vfprintf_internal_r+0x120c>
  8045b8:	d8801b17 	ldw	r2,108(sp)
  8045bc:	1d47883a 	add	r3,r3,r21
  8045c0:	b4400015 	stw	r17,0(r22)
  8045c4:	10800044 	addi	r2,r2,1
  8045c8:	d8801b15 	stw	r2,108(sp)
  8045cc:	b5400115 	stw	r21,4(r22)
  8045d0:	d8c01c15 	stw	r3,112(sp)
  8045d4:	10800208 	cmpgei	r2,r2,8
  8045d8:	10032d1e 	bne	r2,zero,805290 <___vfprintf_internal_r+0x1ebc>
  8045dc:	b5800204 	addi	r22,r22,8
  8045e0:	a800c516 	blt	r21,zero,8048f8 <___vfprintf_internal_r+0x1524>
  8045e4:	d8800717 	ldw	r2,28(sp)
  8045e8:	156bc83a 	sub	r21,r2,r21
  8045ec:	0540db16 	blt	zero,r21,80495c <___vfprintf_internal_r+0x1588>
  8045f0:	dd401417 	ldw	r21,80(sp)
  8045f4:	d8800817 	ldw	r2,32(sp)
  8045f8:	a880aa0e 	bge	r21,r2,8048a4 <___vfprintf_internal_r+0x14d0>
  8045fc:	d8800d17 	ldw	r2,52(sp)
  804600:	d9000b17 	ldw	r4,44(sp)
  804604:	b0800015 	stw	r2,0(r22)
  804608:	d8801b17 	ldw	r2,108(sp)
  80460c:	1907883a 	add	r3,r3,r4
  804610:	b1000115 	stw	r4,4(r22)
  804614:	10800044 	addi	r2,r2,1
  804618:	d8801b15 	stw	r2,108(sp)
  80461c:	d8c01c15 	stw	r3,112(sp)
  804620:	10800208 	cmpgei	r2,r2,8
  804624:	1003111e 	bne	r2,zero,80526c <___vfprintf_internal_r+0x1e98>
  804628:	b5800204 	addi	r22,r22,8
  80462c:	d9000817 	ldw	r4,32(sp)
  804630:	d9400717 	ldw	r5,28(sp)
  804634:	2545c83a 	sub	r2,r4,r21
  804638:	2149c83a 	sub	r4,r4,r5
  80463c:	102b883a 	mov	r21,r2
  804640:	2080010e 	bge	r4,r2,804648 <___vfprintf_internal_r+0x1274>
  804644:	202b883a 	mov	r21,r4
  804648:	05400c0e 	bge	zero,r21,80467c <___vfprintf_internal_r+0x12a8>
  80464c:	d9000717 	ldw	r4,28(sp)
  804650:	1d47883a 	add	r3,r3,r21
  804654:	b5400115 	stw	r21,4(r22)
  804658:	8913883a 	add	r9,r17,r4
  80465c:	d9001b17 	ldw	r4,108(sp)
  804660:	b2400015 	stw	r9,0(r22)
  804664:	d8c01c15 	stw	r3,112(sp)
  804668:	21000044 	addi	r4,r4,1
  80466c:	d9001b15 	stw	r4,108(sp)
  804670:	21000208 	cmpgei	r4,r4,8
  804674:	2003111e 	bne	r4,zero,8052bc <___vfprintf_internal_r+0x1ee8>
  804678:	b5800204 	addi	r22,r22,8
  80467c:	a800010e 	bge	r21,zero,804684 <___vfprintf_internal_r+0x12b0>
  804680:	002b883a 	mov	r21,zero
  804684:	156bc83a 	sub	r21,r2,r21
  804688:	057c500e 	bge	zero,r21,8037cc <___vfprintf_internal_r+0x3f8>
  80468c:	01c02074 	movhi	r7,129
  804690:	a9000450 	cmplti	r4,r21,17
  804694:	d8801b17 	ldw	r2,108(sp)
  804698:	39c9ad04 	addi	r7,r7,9908
  80469c:	2001c51e 	bne	r4,zero,804db4 <___vfprintf_internal_r+0x19e0>
  8046a0:	07000404 	movi	fp,16
  8046a4:	3823883a 	mov	r17,r7
  8046a8:	00000406 	br	8046bc <___vfprintf_internal_r+0x12e8>
  8046ac:	b5800204 	addi	r22,r22,8
  8046b0:	ad7ffc04 	addi	r21,r21,-16
  8046b4:	a9000448 	cmpgei	r4,r21,17
  8046b8:	2001bd26 	beq	r4,zero,804db0 <___vfprintf_internal_r+0x19dc>
  8046bc:	10800044 	addi	r2,r2,1
  8046c0:	18c00404 	addi	r3,r3,16
  8046c4:	b4400015 	stw	r17,0(r22)
  8046c8:	b7000115 	stw	fp,4(r22)
  8046cc:	d8c01c15 	stw	r3,112(sp)
  8046d0:	d8801b15 	stw	r2,108(sp)
  8046d4:	11000208 	cmpgei	r4,r2,8
  8046d8:	203ff426 	beq	r4,zero,8046ac <___vfprintf_internal_r+0x12d8>
  8046dc:	d9801a04 	addi	r6,sp,104
  8046e0:	900b883a 	mov	r5,r18
  8046e4:	9809883a 	mov	r4,r19
  8046e8:	080ab180 	call	80ab18 <__sprint_r>
  8046ec:	103c481e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8046f0:	d8c01c17 	ldw	r3,112(sp)
  8046f4:	d8801b17 	ldw	r2,108(sp)
  8046f8:	dd802704 	addi	r22,sp,156
  8046fc:	003fec06 	br	8046b0 <___vfprintf_internal_r+0x12dc>
  804700:	4002a71e 	bne	r8,zero,8051a0 <___vfprintf_internal_r+0x1dcc>
  804704:	0011883a 	mov	r8,zero
  804708:	002b883a 	mov	r21,zero
  80470c:	dc402704 	addi	r17,sp,156
  804710:	003d4706 	br	803c30 <___vfprintf_internal_r+0x85c>
  804714:	d8800417 	ldw	r2,16(sp)
  804718:	1080004c 	andi	r2,r2,1
  80471c:	103f051e 	bne	r2,zero,804334 <___vfprintf_internal_r+0xf60>
  804720:	00800044 	movi	r2,1
  804724:	dd401b15 	stw	r21,108(sp)
  804728:	b4400015 	stw	r17,0(r22)
  80472c:	b0800115 	stw	r2,4(r22)
  804730:	d8c01c15 	stw	r3,112(sp)
  804734:	ad400208 	cmpgei	r21,r21,8
  804738:	a800641e 	bne	r21,zero,8048cc <___vfprintf_internal_r+0x14f8>
  80473c:	42000084 	addi	r8,r8,2
  804740:	b5800404 	addi	r22,r22,16
  804744:	003f2706 	br	8043e4 <___vfprintf_internal_r+0x1010>
  804748:	02ff260e 	bge	zero,r11,8043e4 <___vfprintf_internal_r+0x1010>
  80474c:	58800450 	cmplti	r2,r11,17
  804750:	01c02074 	movhi	r7,129
  804754:	10034c1e 	bne	r2,zero,805488 <___vfprintf_internal_r+0x20b4>
  804758:	39c9ad04 	addi	r7,r7,9908
  80475c:	dc000715 	stw	r16,28(sp)
  804760:	05800404 	movi	r22,16
  804764:	5823883a 	mov	r17,r11
  804768:	402b883a 	mov	r21,r8
  80476c:	3821883a 	mov	r16,r7
  804770:	00000506 	br	804788 <___vfprintf_internal_r+0x13b4>
  804774:	e7000204 	addi	fp,fp,8
  804778:	8c7ffc04 	addi	r17,r17,-16
  80477c:	88800448 	cmpgei	r2,r17,17
  804780:	1001d626 	beq	r2,zero,804edc <___vfprintf_internal_r+0x1b08>
  804784:	ad400044 	addi	r21,r21,1
  804788:	18c00404 	addi	r3,r3,16
  80478c:	e4000015 	stw	r16,0(fp)
  804790:	e5800115 	stw	r22,4(fp)
  804794:	d8c01c15 	stw	r3,112(sp)
  804798:	dd401b15 	stw	r21,108(sp)
  80479c:	a8800208 	cmpgei	r2,r21,8
  8047a0:	103ff426 	beq	r2,zero,804774 <___vfprintf_internal_r+0x13a0>
  8047a4:	d9801a04 	addi	r6,sp,104
  8047a8:	900b883a 	mov	r5,r18
  8047ac:	9809883a 	mov	r4,r19
  8047b0:	080ab180 	call	80ab18 <__sprint_r>
  8047b4:	103c161e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8047b8:	dd401b17 	ldw	r21,108(sp)
  8047bc:	d8c01c17 	ldw	r3,112(sp)
  8047c0:	df002704 	addi	fp,sp,156
  8047c4:	003fec06 	br	804778 <___vfprintf_internal_r+0x13a4>
  8047c8:	d9801a04 	addi	r6,sp,104
  8047cc:	900b883a 	mov	r5,r18
  8047d0:	9809883a 	mov	r4,r19
  8047d4:	080ab180 	call	80ab18 <__sprint_r>
  8047d8:	103c0d1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8047dc:	d8c01c17 	ldw	r3,112(sp)
  8047e0:	dd802704 	addi	r22,sp,156
  8047e4:	003bec06 	br	803798 <___vfprintf_internal_r+0x3c4>
  8047e8:	d8800417 	ldw	r2,16(sp)
  8047ec:	1080004c 	andi	r2,r2,1
  8047f0:	103bf626 	beq	r2,zero,8037cc <___vfprintf_internal_r+0x3f8>
  8047f4:	003e1506 	br	80404c <___vfprintf_internal_r+0xc78>
  8047f8:	dc402704 	addi	r17,sp,156
  8047fc:	003d0c06 	br	803c30 <___vfprintf_internal_r+0x85c>
  804800:	00800c04 	movi	r2,48
  804804:	d8801385 	stb	r2,78(sp)
  804808:	df0013c5 	stb	fp,79(sp)
  80480c:	63000094 	ori	r12,r12,2
  804810:	00800084 	movi	r2,2
  804814:	003c3b06 	br	803904 <___vfprintf_internal_r+0x530>
  804818:	25000017 	ldw	r20,0(r4)
  80481c:	002b883a 	mov	r21,zero
  804820:	d8c00615 	stw	r3,24(sp)
  804824:	00800044 	movi	r2,1
  804828:	003c3606 	br	803904 <___vfprintf_internal_r+0x530>
  80482c:	d9000517 	ldw	r4,20(sp)
  804830:	2005d7fa 	srai	r2,r4,31
  804834:	19000015 	stw	r4,0(r3)
  804838:	18800115 	stw	r2,4(r3)
  80483c:	003b1906 	br	8034a4 <___vfprintf_internal_r+0xd0>
  804840:	25000017 	ldw	r20,0(r4)
  804844:	002b883a 	mov	r21,zero
  804848:	d8c00615 	stw	r3,24(sp)
  80484c:	003d1b06 	br	803cbc <___vfprintf_internal_r+0x8e8>
  804850:	25000017 	ldw	r20,0(r4)
  804854:	002b883a 	mov	r21,zero
  804858:	d8c00615 	stw	r3,24(sp)
  80485c:	0005883a 	mov	r2,zero
  804860:	003c2806 	br	803904 <___vfprintf_internal_r+0x530>
  804864:	18800017 	ldw	r2,0(r3)
  804868:	d8800915 	stw	r2,36(sp)
  80486c:	18800117 	ldw	r2,4(r3)
  804870:	d8800a15 	stw	r2,40(sp)
  804874:	003c5906 	br	8039dc <___vfprintf_internal_r+0x608>
  804878:	25000017 	ldw	r20,0(r4)
  80487c:	d8c00615 	stw	r3,24(sp)
  804880:	a02bd7fa 	srai	r21,r20,31
  804884:	a805883a 	mov	r2,r21
  804888:	003cd706 	br	803be8 <___vfprintf_internal_r+0x814>
  80488c:	0421c83a 	sub	r16,zero,r16
  804890:	d8800615 	stw	r2,24(sp)
  804894:	003d6306 	br	803e24 <___vfprintf_internal_r+0xa50>
  804898:	202b883a 	mov	r21,r4
  80489c:	057f4616 	blt	zero,r21,8045b8 <___vfprintf_internal_r+0x11e4>
  8048a0:	003f4f06 	br	8045e0 <___vfprintf_internal_r+0x120c>
  8048a4:	d8800417 	ldw	r2,16(sp)
  8048a8:	1080004c 	andi	r2,r2,1
  8048ac:	103f531e 	bne	r2,zero,8045fc <___vfprintf_internal_r+0x1228>
  8048b0:	d9000817 	ldw	r4,32(sp)
  8048b4:	d9400717 	ldw	r5,28(sp)
  8048b8:	2545c83a 	sub	r2,r4,r21
  8048bc:	216bc83a 	sub	r21,r4,r5
  8048c0:	157f6e0e 	bge	r2,r21,80467c <___vfprintf_internal_r+0x12a8>
  8048c4:	102b883a 	mov	r21,r2
  8048c8:	003f6c06 	br	80467c <___vfprintf_internal_r+0x12a8>
  8048cc:	d9801a04 	addi	r6,sp,104
  8048d0:	900b883a 	mov	r5,r18
  8048d4:	9809883a 	mov	r4,r19
  8048d8:	080ab180 	call	80ab18 <__sprint_r>
  8048dc:	103bcc1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8048e0:	da001b17 	ldw	r8,108(sp)
  8048e4:	d8c01c17 	ldw	r3,112(sp)
  8048e8:	dd802904 	addi	r22,sp,164
  8048ec:	42000044 	addi	r8,r8,1
  8048f0:	df002704 	addi	fp,sp,156
  8048f4:	003ebb06 	br	8043e4 <___vfprintf_internal_r+0x1010>
  8048f8:	002b883a 	mov	r21,zero
  8048fc:	003f3906 	br	8045e4 <___vfprintf_internal_r+0x1210>
  804900:	bf000043 	ldbu	fp,1(r23)
  804904:	63000814 	ori	r12,r12,32
  804908:	bdc00044 	addi	r23,r23,1
  80490c:	e2c03fcc 	andi	r11,fp,255
  804910:	5ac0201c 	xori	r11,r11,128
  804914:	5affe004 	addi	r11,r11,-128
  804918:	003afa06 	br	803504 <___vfprintf_internal_r+0x130>
  80491c:	d9801a04 	addi	r6,sp,104
  804920:	900b883a 	mov	r5,r18
  804924:	9809883a 	mov	r4,r19
  804928:	080ab180 	call	80ab18 <__sprint_r>
  80492c:	103bb81e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804930:	d8c01c17 	ldw	r3,112(sp)
  804934:	dd802704 	addi	r22,sp,156
  804938:	003dd006 	br	80407c <___vfprintf_internal_r+0xca8>
  80493c:	408001f0 	cmpltui	r2,r8,7
  804940:	402b883a 	mov	r21,r8
  804944:	1001e726 	beq	r2,zero,8050e4 <___vfprintf_internal_r+0x1d10>
  804948:	04402074 	movhi	r17,129
  80494c:	a829883a 	mov	r20,r21
  804950:	d8c00615 	stw	r3,24(sp)
  804954:	8c49aa04 	addi	r17,r17,9896
  804958:	003b6306 	br	8036e8 <___vfprintf_internal_r+0x314>
  80495c:	01c02074 	movhi	r7,129
  804960:	a9000450 	cmplti	r4,r21,17
  804964:	d8801b17 	ldw	r2,108(sp)
  804968:	39c9ad04 	addi	r7,r7,9908
  80496c:	2001c21e 	bne	r4,zero,805078 <___vfprintf_internal_r+0x1ca4>
  804970:	dc000e15 	stw	r16,56(sp)
  804974:	07000404 	movi	fp,16
  804978:	3821883a 	mov	r16,r7
  80497c:	00000406 	br	804990 <___vfprintf_internal_r+0x15bc>
  804980:	b5800204 	addi	r22,r22,8
  804984:	ad7ffc04 	addi	r21,r21,-16
  804988:	a9000448 	cmpgei	r4,r21,17
  80498c:	2001b826 	beq	r4,zero,805070 <___vfprintf_internal_r+0x1c9c>
  804990:	10800044 	addi	r2,r2,1
  804994:	18c00404 	addi	r3,r3,16
  804998:	b4000015 	stw	r16,0(r22)
  80499c:	b7000115 	stw	fp,4(r22)
  8049a0:	d8c01c15 	stw	r3,112(sp)
  8049a4:	d8801b15 	stw	r2,108(sp)
  8049a8:	11000208 	cmpgei	r4,r2,8
  8049ac:	203ff426 	beq	r4,zero,804980 <___vfprintf_internal_r+0x15ac>
  8049b0:	d9801a04 	addi	r6,sp,104
  8049b4:	900b883a 	mov	r5,r18
  8049b8:	9809883a 	mov	r4,r19
  8049bc:	080ab180 	call	80ab18 <__sprint_r>
  8049c0:	103b931e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8049c4:	d8c01c17 	ldw	r3,112(sp)
  8049c8:	d8801b17 	ldw	r2,108(sp)
  8049cc:	dd802704 	addi	r22,sp,156
  8049d0:	003fec06 	br	804984 <___vfprintf_internal_r+0x15b0>
  8049d4:	dc402704 	addi	r17,sp,156
  8049d8:	a805883a 	mov	r2,r21
  8049dc:	dc000715 	stw	r16,28(sp)
  8049e0:	902b883a 	mov	r21,r18
  8049e4:	8821883a 	mov	r16,r17
  8049e8:	db000415 	stw	r12,16(sp)
  8049ec:	a023883a 	mov	r17,r20
  8049f0:	da000e15 	stw	r8,56(sp)
  8049f4:	9829883a 	mov	r20,r19
  8049f8:	1025883a 	mov	r18,r2
  8049fc:	6827883a 	mov	r19,r13
  804a00:	8809883a 	mov	r4,r17
  804a04:	900b883a 	mov	r5,r18
  804a08:	01800284 	movi	r6,10
  804a0c:	000f883a 	mov	r7,zero
  804a10:	080d6d80 	call	80d6d8 <__umoddi3>
  804a14:	10800c04 	addi	r2,r2,48
  804a18:	8809883a 	mov	r4,r17
  804a1c:	900b883a 	mov	r5,r18
  804a20:	01800284 	movi	r6,10
  804a24:	000f883a 	mov	r7,zero
  804a28:	80bfffc5 	stb	r2,-1(r16)
  804a2c:	080d0b80 	call	80d0b8 <__udivdi3>
  804a30:	900d883a 	mov	r6,r18
  804a34:	880f883a 	mov	r7,r17
  804a38:	843fffc4 	addi	r16,r16,-1
  804a3c:	1023883a 	mov	r17,r2
  804a40:	1825883a 	mov	r18,r3
  804a44:	303fee1e 	bne	r6,zero,804a00 <___vfprintf_internal_r+0x162c>
  804a48:	39c002a8 	cmpgeui	r7,r7,10
  804a4c:	383fec1e 	bne	r7,zero,804a00 <___vfprintf_internal_r+0x162c>
  804a50:	8023883a 	mov	r17,r16
  804a54:	d8802704 	addi	r2,sp,156
  804a58:	981b883a 	mov	r13,r19
  804a5c:	a825883a 	mov	r18,r21
  804a60:	dc000717 	ldw	r16,28(sp)
  804a64:	da000e17 	ldw	r8,56(sp)
  804a68:	a027883a 	mov	r19,r20
  804a6c:	146bc83a 	sub	r21,r2,r17
  804a70:	003c6f06 	br	803c30 <___vfprintf_internal_r+0x85c>
  804a74:	d8800517 	ldw	r2,20(sp)
  804a78:	18800015 	stw	r2,0(r3)
  804a7c:	003a8906 	br	8034a4 <___vfprintf_internal_r+0xd0>
  804a80:	d9801a04 	addi	r6,sp,104
  804a84:	900b883a 	mov	r5,r18
  804a88:	9809883a 	mov	r4,r19
  804a8c:	080ab180 	call	80ab18 <__sprint_r>
  804a90:	103b5f1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804a94:	d8c01c17 	ldw	r3,112(sp)
  804a98:	dd401b17 	ldw	r21,108(sp)
  804a9c:	df002704 	addi	fp,sp,156
  804aa0:	003e2b06 	br	804350 <___vfprintf_internal_r+0xf7c>
  804aa4:	d9801a04 	addi	r6,sp,104
  804aa8:	900b883a 	mov	r5,r18
  804aac:	9809883a 	mov	r4,r19
  804ab0:	080ab180 	call	80ab18 <__sprint_r>
  804ab4:	103b561e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804ab8:	d8c01c17 	ldw	r3,112(sp)
  804abc:	dd401b17 	ldw	r21,108(sp)
  804ac0:	df002704 	addi	fp,sp,156
  804ac4:	003e2d06 	br	80437c <___vfprintf_internal_r+0xfa8>
  804ac8:	d9801a04 	addi	r6,sp,104
  804acc:	900b883a 	mov	r5,r18
  804ad0:	9809883a 	mov	r4,r19
  804ad4:	da001115 	stw	r8,68(sp)
  804ad8:	db400f15 	stw	r13,60(sp)
  804adc:	db800e15 	stw	r14,56(sp)
  804ae0:	080ab180 	call	80ab18 <__sprint_r>
  804ae4:	103b4a1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804ae8:	d8c01c17 	ldw	r3,112(sp)
  804aec:	da001117 	ldw	r8,68(sp)
  804af0:	db400f17 	ldw	r13,60(sp)
  804af4:	db800e17 	ldw	r14,56(sp)
  804af8:	dd802704 	addi	r22,sp,156
  804afc:	003b0706 	br	80371c <___vfprintf_internal_r+0x348>
  804b00:	d8801b17 	ldw	r2,108(sp)
  804b04:	01002074 	movhi	r4,129
  804b08:	2109ac04 	addi	r4,r4,9904
  804b0c:	10800044 	addi	r2,r2,1
  804b10:	18c00044 	addi	r3,r3,1
  804b14:	b1000015 	stw	r4,0(r22)
  804b18:	01000044 	movi	r4,1
  804b1c:	d8801b15 	stw	r2,108(sp)
  804b20:	b1000115 	stw	r4,4(r22)
  804b24:	d8c01c15 	stw	r3,112(sp)
  804b28:	10800208 	cmpgei	r2,r2,8
  804b2c:	1001641e 	bne	r2,zero,8050c0 <___vfprintf_internal_r+0x1cec>
  804b30:	b5800204 	addi	r22,r22,8
  804b34:	2800bd1e 	bne	r5,zero,804e2c <___vfprintf_internal_r+0x1a58>
  804b38:	d8800417 	ldw	r2,16(sp)
  804b3c:	d9000817 	ldw	r4,32(sp)
  804b40:	1080004c 	andi	r2,r2,1
  804b44:	1104b03a 	or	r2,r2,r4
  804b48:	103b2026 	beq	r2,zero,8037cc <___vfprintf_internal_r+0x3f8>
  804b4c:	d8800d17 	ldw	r2,52(sp)
  804b50:	d9000b17 	ldw	r4,44(sp)
  804b54:	b0800015 	stw	r2,0(r22)
  804b58:	d8801b17 	ldw	r2,108(sp)
  804b5c:	20c7883a 	add	r3,r4,r3
  804b60:	b1000115 	stw	r4,4(r22)
  804b64:	10800044 	addi	r2,r2,1
  804b68:	d8c01c15 	stw	r3,112(sp)
  804b6c:	d8801b15 	stw	r2,108(sp)
  804b70:	11000208 	cmpgei	r4,r2,8
  804b74:	2001771e 	bne	r4,zero,805154 <___vfprintf_internal_r+0x1d80>
  804b78:	b5800204 	addi	r22,r22,8
  804b7c:	d9000817 	ldw	r4,32(sp)
  804b80:	10800044 	addi	r2,r2,1
  804b84:	d8801b15 	stw	r2,108(sp)
  804b88:	20c7883a 	add	r3,r4,r3
  804b8c:	b4400015 	stw	r17,0(r22)
  804b90:	b1000115 	stw	r4,4(r22)
  804b94:	d8c01c15 	stw	r3,112(sp)
  804b98:	10800208 	cmpgei	r2,r2,8
  804b9c:	103b0a26 	beq	r2,zero,8037c8 <___vfprintf_internal_r+0x3f4>
  804ba0:	003e1906 	br	804408 <___vfprintf_internal_r+0x1034>
  804ba4:	8825883a 	mov	r18,r17
  804ba8:	003b1906 	br	803810 <___vfprintf_internal_r+0x43c>
  804bac:	d9000917 	ldw	r4,36(sp)
  804bb0:	d9400a17 	ldw	r5,40(sp)
  804bb4:	da000615 	stw	r8,24(sp)
  804bb8:	200d883a 	mov	r6,r4
  804bbc:	280f883a 	mov	r7,r5
  804bc0:	db000415 	stw	r12,16(sp)
  804bc4:	080e7a00 	call	80e7a0 <__unorddf2>
  804bc8:	db000417 	ldw	r12,16(sp)
  804bcc:	da000617 	ldw	r8,24(sp)
  804bd0:	1002061e 	bne	r2,zero,8053ec <___vfprintf_internal_r+0x2018>
  804bd4:	057ff7c4 	movi	r21,-33
  804bd8:	40bfffe0 	cmpeqi	r2,r8,-1
  804bdc:	e56a703a 	and	r21,fp,r21
  804be0:	1001b41e 	bne	r2,zero,8052b4 <___vfprintf_internal_r+0x1ee0>
  804be4:	a88011d8 	cmpnei	r2,r21,71
  804be8:	10015726 	beq	r2,zero,805148 <___vfprintf_internal_r+0x1d74>
  804bec:	60804014 	ori	r2,r12,256
  804bf0:	d8800415 	stw	r2,16(sp)
  804bf4:	d8800a17 	ldw	r2,40(sp)
  804bf8:	10012d16 	blt	r2,zero,8050b0 <___vfprintf_internal_r+0x1cdc>
  804bfc:	dd000a17 	ldw	r20,40(sp)
  804c00:	d8000605 	stb	zero,24(sp)
  804c04:	e08019a0 	cmpeqi	r2,fp,102
  804c08:	d8800f15 	stw	r2,60(sp)
  804c0c:	1000d21e 	bne	r2,zero,804f58 <___vfprintf_internal_r+0x1b84>
  804c10:	e08011a0 	cmpeqi	r2,fp,70
  804c14:	1000d01e 	bne	r2,zero,804f58 <___vfprintf_internal_r+0x1b84>
  804c18:	a8801158 	cmpnei	r2,r21,69
  804c1c:	10016226 	beq	r2,zero,8051a8 <___vfprintf_internal_r+0x1dd4>
  804c20:	d8801804 	addi	r2,sp,96
  804c24:	d8800315 	stw	r2,12(sp)
  804c28:	d9400917 	ldw	r5,36(sp)
  804c2c:	d8801504 	addi	r2,sp,84
  804c30:	d8800215 	stw	r2,8(sp)
  804c34:	d8801404 	addi	r2,sp,80
  804c38:	da000015 	stw	r8,0(sp)
  804c3c:	9809883a 	mov	r4,r19
  804c40:	d8800115 	stw	r2,4(sp)
  804c44:	01c00084 	movi	r7,2
  804c48:	a00d883a 	mov	r6,r20
  804c4c:	db000815 	stw	r12,32(sp)
  804c50:	da000715 	stw	r8,28(sp)
  804c54:	08059380 	call	805938 <_dtoa_r>
  804c58:	da000717 	ldw	r8,28(sp)
  804c5c:	e10019d8 	cmpnei	r4,fp,103
  804c60:	db000817 	ldw	r12,32(sp)
  804c64:	1023883a 	mov	r17,r2
  804c68:	4007883a 	mov	r3,r8
  804c6c:	2001621e 	bne	r4,zero,8051f8 <___vfprintf_internal_r+0x1e24>
  804c70:	6080004c 	andi	r2,r12,1
  804c74:	1001621e 	bne	r2,zero,805200 <___vfprintf_internal_r+0x1e2c>
  804c78:	d8801417 	ldw	r2,80(sp)
  804c7c:	ad4011e0 	cmpeqi	r21,r21,71
  804c80:	d8800715 	stw	r2,28(sp)
  804c84:	d8801817 	ldw	r2,96(sp)
  804c88:	1445c83a 	sub	r2,r2,r17
  804c8c:	d8800815 	stw	r2,32(sp)
  804c90:	a8000526 	beq	r21,zero,804ca8 <___vfprintf_internal_r+0x18d4>
  804c94:	d8c00717 	ldw	r3,28(sp)
  804c98:	18bfff50 	cmplti	r2,r3,-3
  804c9c:	1000011e 	bne	r2,zero,804ca4 <___vfprintf_internal_r+0x18d0>
  804ca0:	40c1670e 	bge	r8,r3,805240 <___vfprintf_internal_r+0x1e6c>
  804ca4:	e73fff84 	addi	fp,fp,-2
  804ca8:	d8800717 	ldw	r2,28(sp)
  804cac:	df001645 	stb	fp,89(sp)
  804cb0:	157fffc4 	addi	r21,r2,-1
  804cb4:	dd401415 	stw	r21,80(sp)
  804cb8:	a801d416 	blt	r21,zero,80540c <___vfprintf_internal_r+0x2038>
  804cbc:	00800ac4 	movi	r2,43
  804cc0:	d8801685 	stb	r2,90(sp)
  804cc4:	a8800290 	cmplti	r2,r21,10
  804cc8:	1001c11e 	bne	r2,zero,8053d0 <___vfprintf_internal_r+0x1ffc>
  804ccc:	d98019c4 	addi	r6,sp,103
  804cd0:	9029883a 	mov	r20,r18
  804cd4:	dc400715 	stw	r17,28(sp)
  804cd8:	8025883a 	mov	r18,r16
  804cdc:	db000f15 	stw	r12,60(sp)
  804ce0:	3021883a 	mov	r16,r6
  804ce4:	a809883a 	mov	r4,r21
  804ce8:	01400284 	movi	r5,10
  804cec:	080307c0 	call	80307c <__modsi3>
  804cf0:	10800c04 	addi	r2,r2,48
  804cf4:	a809883a 	mov	r4,r21
  804cf8:	80bfffc5 	stb	r2,-1(r16)
  804cfc:	01400284 	movi	r5,10
  804d00:	0802ffc0 	call	802ffc <__divsi3>
  804d04:	a9001908 	cmpgei	r4,r21,100
  804d08:	8023883a 	mov	r17,r16
  804d0c:	102b883a 	mov	r21,r2
  804d10:	843fffc4 	addi	r16,r16,-1
  804d14:	203ff31e 	bne	r4,zero,804ce4 <___vfprintf_internal_r+0x1910>
  804d18:	800d883a 	mov	r6,r16
  804d1c:	11000c04 	addi	r4,r2,48
  804d20:	9021883a 	mov	r16,r18
  804d24:	a025883a 	mov	r18,r20
  804d28:	8829883a 	mov	r20,r17
  804d2c:	a0bfff84 	addi	r2,r20,-2
  804d30:	313fffc5 	stb	r4,-1(r6)
  804d34:	d8c019c4 	addi	r3,sp,103
  804d38:	db000f17 	ldw	r12,60(sp)
  804d3c:	dc400717 	ldw	r17,28(sp)
  804d40:	10c1d62e 	bgeu	r2,r3,80549c <___vfprintf_internal_r+0x20c8>
  804d44:	d8c016c4 	addi	r3,sp,91
  804d48:	00000106 	br	804d50 <___vfprintf_internal_r+0x197c>
  804d4c:	11000003 	ldbu	r4,0(r2)
  804d50:	19000005 	stb	r4,0(r3)
  804d54:	10800044 	addi	r2,r2,1
  804d58:	d90019c4 	addi	r4,sp,103
  804d5c:	18c00044 	addi	r3,r3,1
  804d60:	113ffa1e 	bne	r2,r4,804d4c <___vfprintf_internal_r+0x1978>
  804d64:	d8801a44 	addi	r2,sp,105
  804d68:	d8c016c4 	addi	r3,sp,91
  804d6c:	1505c83a 	sub	r2,r2,r20
  804d70:	1885883a 	add	r2,r3,r2
  804d74:	d8c01644 	addi	r3,sp,89
  804d78:	10c5c83a 	sub	r2,r2,r3
  804d7c:	d8801015 	stw	r2,64(sp)
  804d80:	d8c00817 	ldw	r3,32(sp)
  804d84:	d9001017 	ldw	r4,64(sp)
  804d88:	18800088 	cmpgei	r2,r3,2
  804d8c:	192b883a 	add	r21,r3,r4
  804d90:	1001aa26 	beq	r2,zero,80543c <___vfprintf_internal_r+0x2068>
  804d94:	d8800b17 	ldw	r2,44(sp)
  804d98:	a8ab883a 	add	r21,r21,r2
  804d9c:	a829883a 	mov	r20,r21
  804da0:	a800010e 	bge	r21,zero,804da8 <___vfprintf_internal_r+0x19d4>
  804da4:	0029883a 	mov	r20,zero
  804da8:	d8000715 	stw	zero,28(sp)
  804dac:	00009d06 	br	805024 <___vfprintf_internal_r+0x1c50>
  804db0:	880f883a 	mov	r7,r17
  804db4:	10800044 	addi	r2,r2,1
  804db8:	1d47883a 	add	r3,r3,r21
  804dbc:	b1c00015 	stw	r7,0(r22)
  804dc0:	003a7c06 	br	8037b4 <___vfprintf_internal_r+0x3e0>
  804dc4:	d9801a04 	addi	r6,sp,104
  804dc8:	900b883a 	mov	r5,r18
  804dcc:	9809883a 	mov	r4,r19
  804dd0:	080ab180 	call	80ab18 <__sprint_r>
  804dd4:	103a8e1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804dd8:	d8c01c17 	ldw	r3,112(sp)
  804ddc:	dd802704 	addi	r22,sp,156
  804de0:	003c9706 	br	804040 <___vfprintf_internal_r+0xc6c>
  804de4:	d9801a04 	addi	r6,sp,104
  804de8:	900b883a 	mov	r5,r18
  804dec:	9809883a 	mov	r4,r19
  804df0:	da000e15 	stw	r8,56(sp)
  804df4:	080ab180 	call	80ab18 <__sprint_r>
  804df8:	103a851e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  804dfc:	d8c01c17 	ldw	r3,112(sp)
  804e00:	da000e17 	ldw	r8,56(sp)
  804e04:	dd802704 	addi	r22,sp,156
  804e08:	003a6106 	br	803790 <___vfprintf_internal_r+0x3bc>
  804e0c:	8809883a 	mov	r4,r17
  804e10:	db000415 	stw	r12,16(sp)
  804e14:	d8c00615 	stw	r3,24(sp)
  804e18:	080333c0 	call	80333c <strlen>
  804e1c:	db000417 	ldw	r12,16(sp)
  804e20:	102b883a 	mov	r21,r2
  804e24:	1029883a 	mov	r20,r2
  804e28:	003a2f06 	br	8036e8 <___vfprintf_internal_r+0x314>
  804e2c:	d8800d17 	ldw	r2,52(sp)
  804e30:	d9000b17 	ldw	r4,44(sp)
  804e34:	b0800015 	stw	r2,0(r22)
  804e38:	d8801b17 	ldw	r2,108(sp)
  804e3c:	20c7883a 	add	r3,r4,r3
  804e40:	b1000115 	stw	r4,4(r22)
  804e44:	10800044 	addi	r2,r2,1
  804e48:	d8c01c15 	stw	r3,112(sp)
  804e4c:	d8801b15 	stw	r2,108(sp)
  804e50:	11000208 	cmpgei	r4,r2,8
  804e54:	2000bf1e 	bne	r4,zero,805154 <___vfprintf_internal_r+0x1d80>
  804e58:	b5800204 	addi	r22,r22,8
  804e5c:	283f470e 	bge	r5,zero,804b7c <___vfprintf_internal_r+0x17a8>
  804e60:	01c02074 	movhi	r7,129
  804e64:	293ffc08 	cmpgei	r4,r5,-16
  804e68:	39c9ad04 	addi	r7,r7,9908
  804e6c:	0179c83a 	sub	fp,zero,r5
  804e70:	20013f1e 	bne	r4,zero,805370 <___vfprintf_internal_r+0x1f9c>
  804e74:	dc000715 	stw	r16,28(sp)
  804e78:	05400404 	movi	r21,16
  804e7c:	9021883a 	mov	r16,r18
  804e80:	3825883a 	mov	r18,r7
  804e84:	00000406 	br	804e98 <___vfprintf_internal_r+0x1ac4>
  804e88:	b5800204 	addi	r22,r22,8
  804e8c:	e73ffc04 	addi	fp,fp,-16
  804e90:	e1800448 	cmpgei	r6,fp,17
  804e94:	30013326 	beq	r6,zero,805364 <___vfprintf_internal_r+0x1f90>
  804e98:	10800044 	addi	r2,r2,1
  804e9c:	18c00404 	addi	r3,r3,16
  804ea0:	b4800015 	stw	r18,0(r22)
  804ea4:	b5400115 	stw	r21,4(r22)
  804ea8:	d8c01c15 	stw	r3,112(sp)
  804eac:	d8801b15 	stw	r2,108(sp)
  804eb0:	11800208 	cmpgei	r6,r2,8
  804eb4:	303ff426 	beq	r6,zero,804e88 <___vfprintf_internal_r+0x1ab4>
  804eb8:	d9801a04 	addi	r6,sp,104
  804ebc:	800b883a 	mov	r5,r16
  804ec0:	9809883a 	mov	r4,r19
  804ec4:	080ab180 	call	80ab18 <__sprint_r>
  804ec8:	1001721e 	bne	r2,zero,805494 <___vfprintf_internal_r+0x20c0>
  804ecc:	d8c01c17 	ldw	r3,112(sp)
  804ed0:	d8801b17 	ldw	r2,108(sp)
  804ed4:	dd802704 	addi	r22,sp,156
  804ed8:	003fec06 	br	804e8c <___vfprintf_internal_r+0x1ab8>
  804edc:	800f883a 	mov	r7,r16
  804ee0:	dc000717 	ldw	r16,28(sp)
  804ee4:	8817883a 	mov	r11,r17
  804ee8:	aa000044 	addi	r8,r21,1
  804eec:	e0800204 	addi	r2,fp,8
  804ef0:	1ac7883a 	add	r3,r3,r11
  804ef4:	e1c00015 	stw	r7,0(fp)
  804ef8:	e2c00115 	stw	r11,4(fp)
  804efc:	d8c01c15 	stw	r3,112(sp)
  804f00:	da001b15 	stw	r8,108(sp)
  804f04:	41000208 	cmpgei	r4,r8,8
  804f08:	203e701e 	bne	r4,zero,8048cc <___vfprintf_internal_r+0x14f8>
  804f0c:	42000044 	addi	r8,r8,1
  804f10:	15800204 	addi	r22,r2,8
  804f14:	1039883a 	mov	fp,r2
  804f18:	003d3206 	br	8043e4 <___vfprintf_internal_r+0x1010>
  804f1c:	d8800617 	ldw	r2,24(sp)
  804f20:	d8c00615 	stw	r3,24(sp)
  804f24:	15000017 	ldw	r20,0(r2)
  804f28:	a02bd7fa 	srai	r21,r20,31
  804f2c:	a805883a 	mov	r2,r21
  804f30:	003b2d06 	br	803be8 <___vfprintf_internal_r+0x814>
  804f34:	d8800617 	ldw	r2,24(sp)
  804f38:	002b883a 	mov	r21,zero
  804f3c:	d8c00615 	stw	r3,24(sp)
  804f40:	15000017 	ldw	r20,0(r2)
  804f44:	0005883a 	mov	r2,zero
  804f48:	003a6e06 	br	803904 <___vfprintf_internal_r+0x530>
  804f4c:	04402074 	movhi	r17,129
  804f50:	8c499c04 	addi	r17,r17,9840
  804f54:	003ac606 	br	803a70 <___vfprintf_internal_r+0x69c>
  804f58:	d8801804 	addi	r2,sp,96
  804f5c:	d8800315 	stw	r2,12(sp)
  804f60:	d9400917 	ldw	r5,36(sp)
  804f64:	d8801504 	addi	r2,sp,84
  804f68:	d8800215 	stw	r2,8(sp)
  804f6c:	d8801404 	addi	r2,sp,80
  804f70:	da000015 	stw	r8,0(sp)
  804f74:	d8800115 	stw	r2,4(sp)
  804f78:	01c000c4 	movi	r7,3
  804f7c:	a00d883a 	mov	r6,r20
  804f80:	9809883a 	mov	r4,r19
  804f84:	db000815 	stw	r12,32(sp)
  804f88:	da000715 	stw	r8,28(sp)
  804f8c:	08059380 	call	805938 <_dtoa_r>
  804f90:	da000717 	ldw	r8,28(sp)
  804f94:	1023883a 	mov	r17,r2
  804f98:	db000817 	ldw	r12,32(sp)
  804f9c:	1207883a 	add	r3,r2,r8
  804fa0:	88800007 	ldb	r2,0(r17)
  804fa4:	10800c20 	cmpeqi	r2,r2,48
  804fa8:	1000571e 	bne	r2,zero,805108 <___vfprintf_internal_r+0x1d34>
  804fac:	d8801417 	ldw	r2,80(sp)
  804fb0:	1893883a 	add	r9,r3,r2
  804fb4:	d9000917 	ldw	r4,36(sp)
  804fb8:	000d883a 	mov	r6,zero
  804fbc:	000f883a 	mov	r7,zero
  804fc0:	a00b883a 	mov	r5,r20
  804fc4:	da401115 	stw	r9,68(sp)
  804fc8:	da000815 	stw	r8,32(sp)
  804fcc:	db000715 	stw	r12,28(sp)
  804fd0:	080dc9c0 	call	80dc9c <__eqdf2>
  804fd4:	db000717 	ldw	r12,28(sp)
  804fd8:	da000817 	ldw	r8,32(sp)
  804fdc:	da401117 	ldw	r9,68(sp)
  804fe0:	1000891e 	bne	r2,zero,805208 <___vfprintf_internal_r+0x1e34>
  804fe4:	4805883a 	mov	r2,r9
  804fe8:	d8c01417 	ldw	r3,80(sp)
  804fec:	1445c83a 	sub	r2,r2,r17
  804ff0:	ad4011d8 	cmpnei	r21,r21,71
  804ff4:	d8c00715 	stw	r3,28(sp)
  804ff8:	d8800815 	stw	r2,32(sp)
  804ffc:	a83f2526 	beq	r21,zero,804c94 <___vfprintf_internal_r+0x18c0>
  805000:	d8800f17 	ldw	r2,60(sp)
  805004:	103f2826 	beq	r2,zero,804ca8 <___vfprintf_internal_r+0x18d4>
  805008:	d8c00717 	ldw	r3,28(sp)
  80500c:	6080004c 	andi	r2,r12,1
  805010:	1204b03a 	or	r2,r2,r8
  805014:	00c1140e 	bge	zero,r3,805468 <___vfprintf_internal_r+0x2094>
  805018:	1001011e 	bne	r2,zero,805420 <___vfprintf_internal_r+0x204c>
  80501c:	dd400717 	ldw	r21,28(sp)
  805020:	a829883a 	mov	r20,r21
  805024:	d8800607 	ldb	r2,24(sp)
  805028:	10008026 	beq	r2,zero,80522c <___vfprintf_internal_r+0x1e58>
  80502c:	00800b44 	movi	r2,45
  805030:	d8801345 	stb	r2,77(sp)
  805034:	d8800e17 	ldw	r2,56(sp)
  805038:	0011883a 	mov	r8,zero
  80503c:	d8800615 	stw	r2,24(sp)
  805040:	003b0306 	br	803c50 <___vfprintf_internal_r+0x87c>
  805044:	d8800617 	ldw	r2,24(sp)
  805048:	002b883a 	mov	r21,zero
  80504c:	d8c00615 	stw	r3,24(sp)
  805050:	15000017 	ldw	r20,0(r2)
  805054:	00800044 	movi	r2,1
  805058:	003a2a06 	br	803904 <___vfprintf_internal_r+0x530>
  80505c:	d8800617 	ldw	r2,24(sp)
  805060:	002b883a 	mov	r21,zero
  805064:	d8c00615 	stw	r3,24(sp)
  805068:	15000017 	ldw	r20,0(r2)
  80506c:	003b1306 	br	803cbc <___vfprintf_internal_r+0x8e8>
  805070:	800f883a 	mov	r7,r16
  805074:	dc000e17 	ldw	r16,56(sp)
  805078:	10800044 	addi	r2,r2,1
  80507c:	1d47883a 	add	r3,r3,r21
  805080:	d8801b15 	stw	r2,108(sp)
  805084:	b1c00015 	stw	r7,0(r22)
  805088:	b5400115 	stw	r21,4(r22)
  80508c:	d8c01c15 	stw	r3,112(sp)
  805090:	10800208 	cmpgei	r2,r2,8
  805094:	10003a1e 	bne	r2,zero,805180 <___vfprintf_internal_r+0x1dac>
  805098:	b5800204 	addi	r22,r22,8
  80509c:	003d5406 	br	8045f0 <___vfprintf_internal_r+0x121c>
  8050a0:	00800b44 	movi	r2,45
  8050a4:	d8801345 	stb	r2,77(sp)
  8050a8:	03400b44 	movi	r13,45
  8050ac:	003a6c06 	br	803a60 <___vfprintf_internal_r+0x68c>
  8050b0:	1520003c 	xorhi	r20,r2,32768
  8050b4:	00800b44 	movi	r2,45
  8050b8:	d8800605 	stb	r2,24(sp)
  8050bc:	003ed106 	br	804c04 <___vfprintf_internal_r+0x1830>
  8050c0:	d9801a04 	addi	r6,sp,104
  8050c4:	900b883a 	mov	r5,r18
  8050c8:	9809883a 	mov	r4,r19
  8050cc:	080ab180 	call	80ab18 <__sprint_r>
  8050d0:	1039cf1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8050d4:	d9401417 	ldw	r5,80(sp)
  8050d8:	d8c01c17 	ldw	r3,112(sp)
  8050dc:	dd802704 	addi	r22,sp,156
  8050e0:	003e9406 	br	804b34 <___vfprintf_internal_r+0x1760>
  8050e4:	05400184 	movi	r21,6
  8050e8:	003e1706 	br	804948 <___vfprintf_internal_r+0x1574>
  8050ec:	d9401345 	stb	r5,77(sp)
  8050f0:	00397706 	br	8036d0 <___vfprintf_internal_r+0x2fc>
  8050f4:	d9801a04 	addi	r6,sp,104
  8050f8:	900b883a 	mov	r5,r18
  8050fc:	9809883a 	mov	r4,r19
  805100:	080ab180 	call	80ab18 <__sprint_r>
  805104:	0039c206 	br	803810 <___vfprintf_internal_r+0x43c>
  805108:	d9000917 	ldw	r4,36(sp)
  80510c:	000d883a 	mov	r6,zero
  805110:	000f883a 	mov	r7,zero
  805114:	a00b883a 	mov	r5,r20
  805118:	d8c01115 	stw	r3,68(sp)
  80511c:	da000815 	stw	r8,32(sp)
  805120:	db000715 	stw	r12,28(sp)
  805124:	080dc9c0 	call	80dc9c <__eqdf2>
  805128:	db000717 	ldw	r12,28(sp)
  80512c:	da000817 	ldw	r8,32(sp)
  805130:	d8c01117 	ldw	r3,68(sp)
  805134:	103f9d26 	beq	r2,zero,804fac <___vfprintf_internal_r+0x1bd8>
  805138:	00800044 	movi	r2,1
  80513c:	1205c83a 	sub	r2,r2,r8
  805140:	d8801415 	stw	r2,80(sp)
  805144:	003f9a06 	br	804fb0 <___vfprintf_internal_r+0x1bdc>
  805148:	403ea81e 	bne	r8,zero,804bec <___vfprintf_internal_r+0x1818>
  80514c:	02000044 	movi	r8,1
  805150:	003ea606 	br	804bec <___vfprintf_internal_r+0x1818>
  805154:	d9801a04 	addi	r6,sp,104
  805158:	900b883a 	mov	r5,r18
  80515c:	9809883a 	mov	r4,r19
  805160:	080ab180 	call	80ab18 <__sprint_r>
  805164:	1039aa1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  805168:	d9401417 	ldw	r5,80(sp)
  80516c:	d8c01c17 	ldw	r3,112(sp)
  805170:	d8801b17 	ldw	r2,108(sp)
  805174:	dd802704 	addi	r22,sp,156
  805178:	283e800e 	bge	r5,zero,804b7c <___vfprintf_internal_r+0x17a8>
  80517c:	003f3806 	br	804e60 <___vfprintf_internal_r+0x1a8c>
  805180:	d9801a04 	addi	r6,sp,104
  805184:	900b883a 	mov	r5,r18
  805188:	9809883a 	mov	r4,r19
  80518c:	080ab180 	call	80ab18 <__sprint_r>
  805190:	10399f1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  805194:	d8c01c17 	ldw	r3,112(sp)
  805198:	dd802704 	addi	r22,sp,156
  80519c:	003d1406 	br	8045f0 <___vfprintf_internal_r+0x121c>
  8051a0:	db000417 	ldw	r12,16(sp)
  8051a4:	003a9d06 	br	803c1c <___vfprintf_internal_r+0x848>
  8051a8:	d8801804 	addi	r2,sp,96
  8051ac:	d8800315 	stw	r2,12(sp)
  8051b0:	d9400917 	ldw	r5,36(sp)
  8051b4:	d8801504 	addi	r2,sp,84
  8051b8:	40c00044 	addi	r3,r8,1
  8051bc:	d8800215 	stw	r2,8(sp)
  8051c0:	d8801404 	addi	r2,sp,80
  8051c4:	d8c00015 	stw	r3,0(sp)
  8051c8:	d8800115 	stw	r2,4(sp)
  8051cc:	01c00084 	movi	r7,2
  8051d0:	a00d883a 	mov	r6,r20
  8051d4:	9809883a 	mov	r4,r19
  8051d8:	db001115 	stw	r12,68(sp)
  8051dc:	da000815 	stw	r8,32(sp)
  8051e0:	d8c00715 	stw	r3,28(sp)
  8051e4:	08059380 	call	805938 <_dtoa_r>
  8051e8:	d8c00717 	ldw	r3,28(sp)
  8051ec:	da000817 	ldw	r8,32(sp)
  8051f0:	db001117 	ldw	r12,68(sp)
  8051f4:	1023883a 	mov	r17,r2
  8051f8:	e08011d8 	cmpnei	r2,fp,71
  8051fc:	103e9c26 	beq	r2,zero,804c70 <___vfprintf_internal_r+0x189c>
  805200:	88d3883a 	add	r9,r17,r3
  805204:	003f6b06 	br	804fb4 <___vfprintf_internal_r+0x1be0>
  805208:	d8801817 	ldw	r2,96(sp)
  80520c:	127f762e 	bgeu	r2,r9,804fe8 <___vfprintf_internal_r+0x1c14>
  805210:	01000c04 	movi	r4,48
  805214:	10c00044 	addi	r3,r2,1
  805218:	d8c01815 	stw	r3,96(sp)
  80521c:	11000005 	stb	r4,0(r2)
  805220:	d8801817 	ldw	r2,96(sp)
  805224:	127ffb36 	bltu	r2,r9,805214 <___vfprintf_internal_r+0x1e40>
  805228:	003f6f06 	br	804fe8 <___vfprintf_internal_r+0x1c14>
  80522c:	d8800e17 	ldw	r2,56(sp)
  805230:	db401343 	ldbu	r13,77(sp)
  805234:	0011883a 	mov	r8,zero
  805238:	d8800615 	stw	r2,24(sp)
  80523c:	003a8006 	br	803c40 <___vfprintf_internal_r+0x86c>
  805240:	d8800717 	ldw	r2,28(sp)
  805244:	d8c00817 	ldw	r3,32(sp)
  805248:	10c02b16 	blt	r2,r3,8052f8 <___vfprintf_internal_r+0x1f24>
  80524c:	6300004c 	andi	r12,r12,1
  805250:	6000581e 	bne	r12,zero,8053b4 <___vfprintf_internal_r+0x1fe0>
  805254:	1029883a 	mov	r20,r2
  805258:	1000010e 	bge	r2,zero,805260 <___vfprintf_internal_r+0x1e8c>
  80525c:	0029883a 	mov	r20,zero
  805260:	dd400717 	ldw	r21,28(sp)
  805264:	070019c4 	movi	fp,103
  805268:	003f6e06 	br	805024 <___vfprintf_internal_r+0x1c50>
  80526c:	d9801a04 	addi	r6,sp,104
  805270:	900b883a 	mov	r5,r18
  805274:	9809883a 	mov	r4,r19
  805278:	080ab180 	call	80ab18 <__sprint_r>
  80527c:	1039641e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  805280:	dd401417 	ldw	r21,80(sp)
  805284:	d8c01c17 	ldw	r3,112(sp)
  805288:	dd802704 	addi	r22,sp,156
  80528c:	003ce706 	br	80462c <___vfprintf_internal_r+0x1258>
  805290:	d9801a04 	addi	r6,sp,104
  805294:	900b883a 	mov	r5,r18
  805298:	9809883a 	mov	r4,r19
  80529c:	080ab180 	call	80ab18 <__sprint_r>
  8052a0:	10395b1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8052a4:	d8c01c17 	ldw	r3,112(sp)
  8052a8:	dd802704 	addi	r22,sp,156
  8052ac:	a83ccd0e 	bge	r21,zero,8045e4 <___vfprintf_internal_r+0x1210>
  8052b0:	003d9106 	br	8048f8 <___vfprintf_internal_r+0x1524>
  8052b4:	02000184 	movi	r8,6
  8052b8:	003e4c06 	br	804bec <___vfprintf_internal_r+0x1818>
  8052bc:	d9801a04 	addi	r6,sp,104
  8052c0:	900b883a 	mov	r5,r18
  8052c4:	9809883a 	mov	r4,r19
  8052c8:	080ab180 	call	80ab18 <__sprint_r>
  8052cc:	1039501e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8052d0:	d8801417 	ldw	r2,80(sp)
  8052d4:	d9000817 	ldw	r4,32(sp)
  8052d8:	d8c01c17 	ldw	r3,112(sp)
  8052dc:	dd802704 	addi	r22,sp,156
  8052e0:	2085c83a 	sub	r2,r4,r2
  8052e4:	003ce506 	br	80467c <___vfprintf_internal_r+0x12a8>
  8052e8:	4029883a 	mov	r20,r8
  8052ec:	d8c00615 	stw	r3,24(sp)
  8052f0:	402b883a 	mov	r21,r8
  8052f4:	0038fc06 	br	8036e8 <___vfprintf_internal_r+0x314>
  8052f8:	d8800817 	ldw	r2,32(sp)
  8052fc:	d8c00b17 	ldw	r3,44(sp)
  805300:	10eb883a 	add	r21,r2,r3
  805304:	d8800717 	ldw	r2,28(sp)
  805308:	00800316 	blt	zero,r2,805318 <___vfprintf_internal_r+0x1f44>
  80530c:	d8800717 	ldw	r2,28(sp)
  805310:	a8abc83a 	sub	r21,r21,r2
  805314:	ad400044 	addi	r21,r21,1
  805318:	a829883a 	mov	r20,r21
  80531c:	a8002a16 	blt	r21,zero,8053c8 <___vfprintf_internal_r+0x1ff4>
  805320:	070019c4 	movi	fp,103
  805324:	003f3f06 	br	805024 <___vfprintf_internal_r+0x1c50>
  805328:	d9401345 	stb	r5,77(sp)
  80532c:	003ae006 	br	803eb0 <___vfprintf_internal_r+0xadc>
  805330:	d9401345 	stb	r5,77(sp)
  805334:	003a5706 	br	803c94 <___vfprintf_internal_r+0x8c0>
  805338:	d9401345 	stb	r5,77(sp)
  80533c:	003b1706 	br	803f9c <___vfprintf_internal_r+0xbc8>
  805340:	d9401345 	stb	r5,77(sp)
  805344:	003a2006 	br	803bc8 <___vfprintf_internal_r+0x7f4>
  805348:	d9401345 	stb	r5,77(sp)
  80534c:	003a6606 	br	803ce8 <___vfprintf_internal_r+0x914>
  805350:	d9401345 	stb	r5,77(sp)
  805354:	00399706 	br	8039b4 <___vfprintf_internal_r+0x5e0>
  805358:	00bfffc4 	movi	r2,-1
  80535c:	d8800515 	stw	r2,20(sp)
  805360:	00392e06 	br	80381c <___vfprintf_internal_r+0x448>
  805364:	900f883a 	mov	r7,r18
  805368:	8025883a 	mov	r18,r16
  80536c:	dc000717 	ldw	r16,28(sp)
  805370:	10800044 	addi	r2,r2,1
  805374:	1f07883a 	add	r3,r3,fp
  805378:	b1c00015 	stw	r7,0(r22)
  80537c:	b7000115 	stw	fp,4(r22)
  805380:	d8c01c15 	stw	r3,112(sp)
  805384:	d8801b15 	stw	r2,108(sp)
  805388:	11000208 	cmpgei	r4,r2,8
  80538c:	203dfa26 	beq	r4,zero,804b78 <___vfprintf_internal_r+0x17a4>
  805390:	d9801a04 	addi	r6,sp,104
  805394:	900b883a 	mov	r5,r18
  805398:	9809883a 	mov	r4,r19
  80539c:	080ab180 	call	80ab18 <__sprint_r>
  8053a0:	10391b1e 	bne	r2,zero,803810 <___vfprintf_internal_r+0x43c>
  8053a4:	d8c01c17 	ldw	r3,112(sp)
  8053a8:	d8801b17 	ldw	r2,108(sp)
  8053ac:	dd802704 	addi	r22,sp,156
  8053b0:	003df206 	br	804b7c <___vfprintf_internal_r+0x17a8>
  8053b4:	d8800717 	ldw	r2,28(sp)
  8053b8:	d8c00b17 	ldw	r3,44(sp)
  8053bc:	10eb883a 	add	r21,r2,r3
  8053c0:	a829883a 	mov	r20,r21
  8053c4:	a83fd60e 	bge	r21,zero,805320 <___vfprintf_internal_r+0x1f4c>
  8053c8:	0029883a 	mov	r20,zero
  8053cc:	003fd406 	br	805320 <___vfprintf_internal_r+0x1f4c>
  8053d0:	00800c04 	movi	r2,48
  8053d4:	ad400c04 	addi	r21,r21,48
  8053d8:	d88016c5 	stb	r2,91(sp)
  8053dc:	00800104 	movi	r2,4
  8053e0:	dd401705 	stb	r21,92(sp)
  8053e4:	d8801015 	stw	r2,64(sp)
  8053e8:	003e6506 	br	804d80 <___vfprintf_internal_r+0x19ac>
  8053ec:	d8800a17 	ldw	r2,40(sp)
  8053f0:	10001916 	blt	r2,zero,805458 <___vfprintf_internal_r+0x2084>
  8053f4:	db401343 	ldbu	r13,77(sp)
  8053f8:	e0801210 	cmplti	r2,fp,72
  8053fc:	1000131e 	bne	r2,zero,80544c <___vfprintf_internal_r+0x2078>
  805400:	04402074 	movhi	r17,129
  805404:	8c499f04 	addi	r17,r17,9852
  805408:	00399906 	br	803a70 <___vfprintf_internal_r+0x69c>
  80540c:	05400044 	movi	r21,1
  805410:	a8abc83a 	sub	r21,r21,r2
  805414:	00800b44 	movi	r2,45
  805418:	d8801685 	stb	r2,90(sp)
  80541c:	003e2906 	br	804cc4 <___vfprintf_internal_r+0x18f0>
  805420:	d8800b17 	ldw	r2,44(sp)
  805424:	18ab883a 	add	r21,r3,r2
  805428:	aa2b883a 	add	r21,r21,r8
  80542c:	a829883a 	mov	r20,r21
  805430:	a83efc0e 	bge	r21,zero,805024 <___vfprintf_internal_r+0x1c50>
  805434:	0029883a 	mov	r20,zero
  805438:	003efa06 	br	805024 <___vfprintf_internal_r+0x1c50>
  80543c:	6080004c 	andi	r2,r12,1
  805440:	d8800715 	stw	r2,28(sp)
  805444:	103e531e 	bne	r2,zero,804d94 <___vfprintf_internal_r+0x19c0>
  805448:	003ff806 	br	80542c <___vfprintf_internal_r+0x2058>
  80544c:	04402074 	movhi	r17,129
  805450:	8c499e04 	addi	r17,r17,9848
  805454:	00398606 	br	803a70 <___vfprintf_internal_r+0x69c>
  805458:	00800b44 	movi	r2,45
  80545c:	d8801345 	stb	r2,77(sp)
  805460:	03400b44 	movi	r13,45
  805464:	003fe406 	br	8053f8 <___vfprintf_internal_r+0x2024>
  805468:	1000031e 	bne	r2,zero,805478 <___vfprintf_internal_r+0x20a4>
  80546c:	05000044 	movi	r20,1
  805470:	05400044 	movi	r21,1
  805474:	003eeb06 	br	805024 <___vfprintf_internal_r+0x1c50>
  805478:	d8800b17 	ldw	r2,44(sp)
  80547c:	15400044 	addi	r21,r2,1
  805480:	aa2b883a 	add	r21,r21,r8
  805484:	003fe906 	br	80542c <___vfprintf_internal_r+0x2058>
  805488:	b005883a 	mov	r2,r22
  80548c:	39c9ad04 	addi	r7,r7,9908
  805490:	003e9706 	br	804ef0 <___vfprintf_internal_r+0x1b1c>
  805494:	8025883a 	mov	r18,r16
  805498:	0038dd06 	br	803810 <___vfprintf_internal_r+0x43c>
  80549c:	00800084 	movi	r2,2
  8054a0:	d8801015 	stw	r2,64(sp)
  8054a4:	003e3606 	br	804d80 <___vfprintf_internal_r+0x19ac>
  8054a8:	d8c00617 	ldw	r3,24(sp)
  8054ac:	1a000017 	ldw	r8,0(r3)
  8054b0:	18c00104 	addi	r3,r3,4
  8054b4:	4000010e 	bge	r8,zero,8054bc <___vfprintf_internal_r+0x20e8>
  8054b8:	023fffc4 	movi	r8,-1
  8054bc:	bf000043 	ldbu	fp,1(r23)
  8054c0:	d8c00615 	stw	r3,24(sp)
  8054c4:	102f883a 	mov	r23,r2
  8054c8:	e2c03fcc 	andi	r11,fp,255
  8054cc:	5ac0201c 	xori	r11,r11,128
  8054d0:	5affe004 	addi	r11,r11,-128
  8054d4:	00380b06 	br	803504 <___vfprintf_internal_r+0x130>

008054d8 <__vfprintf_internal>:
  8054d8:	00c02074 	movhi	r3,129
  8054dc:	2005883a 	mov	r2,r4
  8054e0:	19121217 	ldw	r4,18504(r3)
  8054e4:	300f883a 	mov	r7,r6
  8054e8:	280d883a 	mov	r6,r5
  8054ec:	100b883a 	mov	r5,r2
  8054f0:	08033d41 	jmpi	8033d4 <___vfprintf_internal_r>

008054f4 <__sbprintf>:
  8054f4:	2880030b 	ldhu	r2,12(r5)
  8054f8:	2b001917 	ldw	r12,100(r5)
  8054fc:	2ac0038b 	ldhu	r11,14(r5)
  805500:	2a800717 	ldw	r10,28(r5)
  805504:	2a400917 	ldw	r9,36(r5)
  805508:	defee204 	addi	sp,sp,-1144
  80550c:	da001a04 	addi	r8,sp,104
  805510:	00c10004 	movi	r3,1024
  805514:	dc011a15 	stw	r16,1128(sp)
  805518:	10bfff4c 	andi	r2,r2,65533
  80551c:	2821883a 	mov	r16,r5
  805520:	d80b883a 	mov	r5,sp
  805524:	dc811c15 	stw	r18,1136(sp)
  805528:	dc411b15 	stw	r17,1132(sp)
  80552c:	dfc11d15 	stw	ra,1140(sp)
  805530:	2025883a 	mov	r18,r4
  805534:	d880030d 	sth	r2,12(sp)
  805538:	db001915 	stw	r12,100(sp)
  80553c:	dac0038d 	sth	r11,14(sp)
  805540:	da800715 	stw	r10,28(sp)
  805544:	da400915 	stw	r9,36(sp)
  805548:	da000015 	stw	r8,0(sp)
  80554c:	da000415 	stw	r8,16(sp)
  805550:	d8c00215 	stw	r3,8(sp)
  805554:	d8c00515 	stw	r3,20(sp)
  805558:	d8000615 	stw	zero,24(sp)
  80555c:	08033d40 	call	8033d4 <___vfprintf_internal_r>
  805560:	1023883a 	mov	r17,r2
  805564:	10000d0e 	bge	r2,zero,80559c <__sbprintf+0xa8>
  805568:	d880030b 	ldhu	r2,12(sp)
  80556c:	1080100c 	andi	r2,r2,64
  805570:	10000326 	beq	r2,zero,805580 <__sbprintf+0x8c>
  805574:	8080030b 	ldhu	r2,12(r16)
  805578:	10801014 	ori	r2,r2,64
  80557c:	8080030d 	sth	r2,12(r16)
  805580:	8805883a 	mov	r2,r17
  805584:	dfc11d17 	ldw	ra,1140(sp)
  805588:	dc811c17 	ldw	r18,1136(sp)
  80558c:	dc411b17 	ldw	r17,1132(sp)
  805590:	dc011a17 	ldw	r16,1128(sp)
  805594:	dec11e04 	addi	sp,sp,1144
  805598:	f800283a 	ret
  80559c:	d80b883a 	mov	r5,sp
  8055a0:	9009883a 	mov	r4,r18
  8055a4:	08072a80 	call	8072a8 <_fflush_r>
  8055a8:	103fef26 	beq	r2,zero,805568 <__sbprintf+0x74>
  8055ac:	047fffc4 	movi	r17,-1
  8055b0:	003fed06 	br	805568 <__sbprintf+0x74>

008055b4 <__swsetup_r>:
  8055b4:	00802074 	movhi	r2,129
  8055b8:	10921217 	ldw	r2,18504(r2)
  8055bc:	defffd04 	addi	sp,sp,-12
  8055c0:	dc400115 	stw	r17,4(sp)
  8055c4:	dc000015 	stw	r16,0(sp)
  8055c8:	dfc00215 	stw	ra,8(sp)
  8055cc:	2023883a 	mov	r17,r4
  8055d0:	2821883a 	mov	r16,r5
  8055d4:	10000226 	beq	r2,zero,8055e0 <__swsetup_r+0x2c>
  8055d8:	10c00e17 	ldw	r3,56(r2)
  8055dc:	18001f26 	beq	r3,zero,80565c <__swsetup_r+0xa8>
  8055e0:	8180030b 	ldhu	r6,12(r16)
  8055e4:	30c0020c 	andi	r3,r6,8
  8055e8:	3005883a 	mov	r2,r6
  8055ec:	18002126 	beq	r3,zero,805674 <__swsetup_r+0xc0>
  8055f0:	80c00417 	ldw	r3,16(r16)
  8055f4:	18002826 	beq	r3,zero,805698 <__swsetup_r+0xe4>
  8055f8:	1100004c 	andi	r4,r2,1
  8055fc:	20000b1e 	bne	r4,zero,80562c <__swsetup_r+0x78>
  805600:	1100008c 	andi	r4,r2,2
  805604:	20002e1e 	bne	r4,zero,8056c0 <__swsetup_r+0x10c>
  805608:	81000517 	ldw	r4,20(r16)
  80560c:	81000215 	stw	r4,8(r16)
  805610:	18000b26 	beq	r3,zero,805640 <__swsetup_r+0x8c>
  805614:	0005883a 	mov	r2,zero
  805618:	dfc00217 	ldw	ra,8(sp)
  80561c:	dc400117 	ldw	r17,4(sp)
  805620:	dc000017 	ldw	r16,0(sp)
  805624:	dec00304 	addi	sp,sp,12
  805628:	f800283a 	ret
  80562c:	81000517 	ldw	r4,20(r16)
  805630:	80000215 	stw	zero,8(r16)
  805634:	0109c83a 	sub	r4,zero,r4
  805638:	81000615 	stw	r4,24(r16)
  80563c:	183ff51e 	bne	r3,zero,805614 <__swsetup_r+0x60>
  805640:	10c0200c 	andi	r3,r2,128
  805644:	0005883a 	mov	r2,zero
  805648:	183ff326 	beq	r3,zero,805618 <__swsetup_r+0x64>
  80564c:	31801014 	ori	r6,r6,64
  805650:	8180030d 	sth	r6,12(r16)
  805654:	00bfffc4 	movi	r2,-1
  805658:	003fef06 	br	805618 <__swsetup_r+0x64>
  80565c:	1009883a 	mov	r4,r2
  805660:	08076f00 	call	8076f0 <__sinit>
  805664:	8180030b 	ldhu	r6,12(r16)
  805668:	30c0020c 	andi	r3,r6,8
  80566c:	3005883a 	mov	r2,r6
  805670:	183fdf1e 	bne	r3,zero,8055f0 <__swsetup_r+0x3c>
  805674:	3080040c 	andi	r2,r6,16
  805678:	10002126 	beq	r2,zero,805700 <__swsetup_r+0x14c>
  80567c:	3080010c 	andi	r2,r6,4
  805680:	1000111e 	bne	r2,zero,8056c8 <__swsetup_r+0x114>
  805684:	80c00417 	ldw	r3,16(r16)
  805688:	30800214 	ori	r2,r6,8
  80568c:	8080030d 	sth	r2,12(r16)
  805690:	100d883a 	mov	r6,r2
  805694:	183fd81e 	bne	r3,zero,8055f8 <__swsetup_r+0x44>
  805698:	1100a00c 	andi	r4,r2,640
  80569c:	21008020 	cmpeqi	r4,r4,512
  8056a0:	203fd51e 	bne	r4,zero,8055f8 <__swsetup_r+0x44>
  8056a4:	800b883a 	mov	r5,r16
  8056a8:	8809883a 	mov	r4,r17
  8056ac:	08081780 	call	808178 <__smakebuf_r>
  8056b0:	8180030b 	ldhu	r6,12(r16)
  8056b4:	80c00417 	ldw	r3,16(r16)
  8056b8:	3005883a 	mov	r2,r6
  8056bc:	003fce06 	br	8055f8 <__swsetup_r+0x44>
  8056c0:	0009883a 	mov	r4,zero
  8056c4:	003fd106 	br	80560c <__swsetup_r+0x58>
  8056c8:	81400c17 	ldw	r5,48(r16)
  8056cc:	28000626 	beq	r5,zero,8056e8 <__swsetup_r+0x134>
  8056d0:	80801004 	addi	r2,r16,64
  8056d4:	28800326 	beq	r5,r2,8056e4 <__swsetup_r+0x130>
  8056d8:	8809883a 	mov	r4,r17
  8056dc:	08078540 	call	807854 <_free_r>
  8056e0:	8180030b 	ldhu	r6,12(r16)
  8056e4:	80000c15 	stw	zero,48(r16)
  8056e8:	80c00417 	ldw	r3,16(r16)
  8056ec:	00bff6c4 	movi	r2,-37
  8056f0:	118c703a 	and	r6,r2,r6
  8056f4:	80000115 	stw	zero,4(r16)
  8056f8:	80c00015 	stw	r3,0(r16)
  8056fc:	003fe206 	br	805688 <__swsetup_r+0xd4>
  805700:	00800244 	movi	r2,9
  805704:	88800015 	stw	r2,0(r17)
  805708:	31801014 	ori	r6,r6,64
  80570c:	8180030d 	sth	r6,12(r16)
  805710:	00bfffc4 	movi	r2,-1
  805714:	003fc006 	br	805618 <__swsetup_r+0x64>

00805718 <quorem>:
  805718:	defff204 	addi	sp,sp,-56
  80571c:	dc400515 	stw	r17,20(sp)
  805720:	20800417 	ldw	r2,16(r4)
  805724:	2c400417 	ldw	r17,16(r5)
  805728:	dfc00d15 	stw	ra,52(sp)
  80572c:	df000c15 	stw	fp,48(sp)
  805730:	ddc00b15 	stw	r23,44(sp)
  805734:	dd800a15 	stw	r22,40(sp)
  805738:	dd400915 	stw	r21,36(sp)
  80573c:	dd000815 	stw	r20,32(sp)
  805740:	dcc00715 	stw	r19,28(sp)
  805744:	dc800615 	stw	r18,24(sp)
  805748:	dc000415 	stw	r16,16(sp)
  80574c:	d9000115 	stw	r4,4(sp)
  805750:	d9400215 	stw	r5,8(sp)
  805754:	14407616 	blt	r2,r17,805930 <quorem+0x218>
  805758:	8c7fffc4 	addi	r17,r17,-1
  80575c:	882a90ba 	slli	r21,r17,2
  805760:	2f000504 	addi	fp,r5,20
  805764:	25800504 	addi	r22,r4,20
  805768:	e565883a 	add	r18,fp,r21
  80576c:	b545883a 	add	r2,r22,r21
  805770:	95c00017 	ldw	r23,0(r18)
  805774:	15000017 	ldw	r20,0(r2)
  805778:	dd800015 	stw	r22,0(sp)
  80577c:	bdc00044 	addi	r23,r23,1
  805780:	b80b883a 	mov	r5,r23
  805784:	a009883a 	mov	r4,r20
  805788:	d8800315 	stw	r2,12(sp)
  80578c:	08030f00 	call	8030f0 <__udivsi3>
  805790:	1021883a 	mov	r16,r2
  805794:	a5c02f36 	bltu	r20,r23,805854 <quorem+0x13c>
  805798:	e029883a 	mov	r20,fp
  80579c:	002b883a 	mov	r21,zero
  8057a0:	002f883a 	mov	r23,zero
  8057a4:	a4c00017 	ldw	r19,0(r20)
  8057a8:	800b883a 	mov	r5,r16
  8057ac:	b5800104 	addi	r22,r22,4
  8057b0:	993fffcc 	andi	r4,r19,65535
  8057b4:	08031b00 	call	8031b0 <__mulsi3>
  8057b8:	9808d43a 	srli	r4,r19,16
  8057bc:	800b883a 	mov	r5,r16
  8057c0:	156b883a 	add	r21,r2,r21
  8057c4:	08031b00 	call	8031b0 <__mulsi3>
  8057c8:	b0ffff17 	ldw	r3,-4(r22)
  8057cc:	a80ad43a 	srli	r5,r21,16
  8057d0:	a93fffcc 	andi	r4,r21,65535
  8057d4:	19bfffcc 	andi	r6,r3,65535
  8057d8:	b909c83a 	sub	r4,r23,r4
  8057dc:	2189883a 	add	r4,r4,r6
  8057e0:	1806d43a 	srli	r3,r3,16
  8057e4:	1145883a 	add	r2,r2,r5
  8057e8:	200bd43a 	srai	r5,r4,16
  8057ec:	11bfffcc 	andi	r6,r2,65535
  8057f0:	1987c83a 	sub	r3,r3,r6
  8057f4:	1947883a 	add	r3,r3,r5
  8057f8:	180a943a 	slli	r5,r3,16
  8057fc:	213fffcc 	andi	r4,r4,65535
  805800:	a5000104 	addi	r20,r20,4
  805804:	2908b03a 	or	r4,r5,r4
  805808:	b13fff15 	stw	r4,-4(r22)
  80580c:	102ad43a 	srli	r21,r2,16
  805810:	182fd43a 	srai	r23,r3,16
  805814:	953fe32e 	bgeu	r18,r20,8057a4 <quorem+0x8c>
  805818:	d8c00317 	ldw	r3,12(sp)
  80581c:	18800017 	ldw	r2,0(r3)
  805820:	10000c1e 	bne	r2,zero,805854 <quorem+0x13c>
  805824:	d8800017 	ldw	r2,0(sp)
  805828:	1d7fff04 	addi	r21,r3,-4
  80582c:	15400436 	bltu	r2,r21,805840 <quorem+0x128>
  805830:	00000606 	br	80584c <quorem+0x134>
  805834:	d8800017 	ldw	r2,0(sp)
  805838:	8c7fffc4 	addi	r17,r17,-1
  80583c:	1540032e 	bgeu	r2,r21,80584c <quorem+0x134>
  805840:	a8800017 	ldw	r2,0(r21)
  805844:	ad7fff04 	addi	r21,r21,-4
  805848:	103ffa26 	beq	r2,zero,805834 <quorem+0x11c>
  80584c:	d8800117 	ldw	r2,4(sp)
  805850:	14400415 	stw	r17,16(r2)
  805854:	d9400217 	ldw	r5,8(sp)
  805858:	d9000117 	ldw	r4,4(sp)
  80585c:	0809a400 	call	809a40 <__mcmp>
  805860:	10002616 	blt	r2,zero,8058fc <quorem+0x1e4>
  805864:	d9400017 	ldw	r5,0(sp)
  805868:	84000044 	addi	r16,r16,1
  80586c:	0007883a 	mov	r3,zero
  805870:	e1000017 	ldw	r4,0(fp)
  805874:	29800017 	ldw	r6,0(r5)
  805878:	29400104 	addi	r5,r5,4
  80587c:	20bfffcc 	andi	r2,r4,65535
  805880:	1887c83a 	sub	r3,r3,r2
  805884:	30bfffcc 	andi	r2,r6,65535
  805888:	1885883a 	add	r2,r3,r2
  80588c:	2008d43a 	srli	r4,r4,16
  805890:	3006d43a 	srli	r3,r6,16
  805894:	100fd43a 	srai	r7,r2,16
  805898:	11bfffcc 	andi	r6,r2,65535
  80589c:	1907c83a 	sub	r3,r3,r4
  8058a0:	19c7883a 	add	r3,r3,r7
  8058a4:	1804943a 	slli	r2,r3,16
  8058a8:	e7000104 	addi	fp,fp,4
  8058ac:	1807d43a 	srai	r3,r3,16
  8058b0:	1184b03a 	or	r2,r2,r6
  8058b4:	28bfff15 	stw	r2,-4(r5)
  8058b8:	973fed2e 	bgeu	r18,fp,805870 <quorem+0x158>
  8058bc:	880490ba 	slli	r2,r17,2
  8058c0:	d9000017 	ldw	r4,0(sp)
  8058c4:	2085883a 	add	r2,r4,r2
  8058c8:	10c00017 	ldw	r3,0(r2)
  8058cc:	18000b1e 	bne	r3,zero,8058fc <quorem+0x1e4>
  8058d0:	10bfff04 	addi	r2,r2,-4
  8058d4:	20800436 	bltu	r4,r2,8058e8 <quorem+0x1d0>
  8058d8:	00000606 	br	8058f4 <quorem+0x1dc>
  8058dc:	d8c00017 	ldw	r3,0(sp)
  8058e0:	8c7fffc4 	addi	r17,r17,-1
  8058e4:	1880032e 	bgeu	r3,r2,8058f4 <quorem+0x1dc>
  8058e8:	10c00017 	ldw	r3,0(r2)
  8058ec:	10bfff04 	addi	r2,r2,-4
  8058f0:	183ffa26 	beq	r3,zero,8058dc <quorem+0x1c4>
  8058f4:	d8800117 	ldw	r2,4(sp)
  8058f8:	14400415 	stw	r17,16(r2)
  8058fc:	8005883a 	mov	r2,r16
  805900:	dfc00d17 	ldw	ra,52(sp)
  805904:	df000c17 	ldw	fp,48(sp)
  805908:	ddc00b17 	ldw	r23,44(sp)
  80590c:	dd800a17 	ldw	r22,40(sp)
  805910:	dd400917 	ldw	r21,36(sp)
  805914:	dd000817 	ldw	r20,32(sp)
  805918:	dcc00717 	ldw	r19,28(sp)
  80591c:	dc800617 	ldw	r18,24(sp)
  805920:	dc400517 	ldw	r17,20(sp)
  805924:	dc000417 	ldw	r16,16(sp)
  805928:	dec00e04 	addi	sp,sp,56
  80592c:	f800283a 	ret
  805930:	0005883a 	mov	r2,zero
  805934:	003ff206 	br	805900 <quorem+0x1e8>

00805938 <_dtoa_r>:
  805938:	20801017 	ldw	r2,64(r4)
  80593c:	deffe204 	addi	sp,sp,-120
  805940:	ddc01b15 	stw	r23,108(sp)
  805944:	dcc01715 	stw	r19,92(sp)
  805948:	dc801615 	stw	r18,88(sp)
  80594c:	dc401515 	stw	r17,84(sp)
  805950:	dc001415 	stw	r16,80(sp)
  805954:	dfc01d15 	stw	ra,116(sp)
  805958:	df001c15 	stw	fp,112(sp)
  80595c:	dd801a15 	stw	r22,104(sp)
  805960:	dd401915 	stw	r21,100(sp)
  805964:	dd001815 	stw	r20,96(sp)
  805968:	d9c00215 	stw	r7,8(sp)
  80596c:	dc002017 	ldw	r16,128(sp)
  805970:	202f883a 	mov	r23,r4
  805974:	3025883a 	mov	r18,r6
  805978:	2827883a 	mov	r19,r5
  80597c:	3023883a 	mov	r17,r6
  805980:	10000826 	beq	r2,zero,8059a4 <_dtoa_r+0x6c>
  805984:	21801117 	ldw	r6,68(r4)
  805988:	00c00044 	movi	r3,1
  80598c:	100b883a 	mov	r5,r2
  805990:	1986983a 	sll	r3,r3,r6
  805994:	11800115 	stw	r6,4(r2)
  805998:	10c00215 	stw	r3,8(r2)
  80599c:	08090300 	call	809030 <_Bfree>
  8059a0:	b8001015 	stw	zero,64(r23)
  8059a4:	90018816 	blt	r18,zero,805fc8 <_dtoa_r+0x690>
  8059a8:	80000015 	stw	zero,0(r16)
  8059ac:	909ffc2c 	andhi	r2,r18,32752
  8059b0:	00dffc34 	movhi	r3,32752
  8059b4:	10c18d26 	beq	r2,r3,805fec <_dtoa_r+0x6b4>
  8059b8:	000d883a 	mov	r6,zero
  8059bc:	000f883a 	mov	r7,zero
  8059c0:	9809883a 	mov	r4,r19
  8059c4:	880b883a 	mov	r5,r17
  8059c8:	080dc9c0 	call	80dc9c <__eqdf2>
  8059cc:	1000191e 	bne	r2,zero,805a34 <_dtoa_r+0xfc>
  8059d0:	d8c01f17 	ldw	r3,124(sp)
  8059d4:	00800044 	movi	r2,1
  8059d8:	18800015 	stw	r2,0(r3)
  8059dc:	d8802117 	ldw	r2,132(sp)
  8059e0:	1002f926 	beq	r2,zero,8065c8 <_dtoa_r+0xc90>
  8059e4:	d9002117 	ldw	r4,132(sp)
  8059e8:	00802074 	movhi	r2,129
  8059ec:	1089ac44 	addi	r2,r2,9905
  8059f0:	00c02074 	movhi	r3,129
  8059f4:	20800015 	stw	r2,0(r4)
  8059f8:	1889ac04 	addi	r2,r3,9904
  8059fc:	d8800115 	stw	r2,4(sp)
  805a00:	d8800117 	ldw	r2,4(sp)
  805a04:	dfc01d17 	ldw	ra,116(sp)
  805a08:	df001c17 	ldw	fp,112(sp)
  805a0c:	ddc01b17 	ldw	r23,108(sp)
  805a10:	dd801a17 	ldw	r22,104(sp)
  805a14:	dd401917 	ldw	r21,100(sp)
  805a18:	dd001817 	ldw	r20,96(sp)
  805a1c:	dcc01717 	ldw	r19,92(sp)
  805a20:	dc801617 	ldw	r18,88(sp)
  805a24:	dc401517 	ldw	r17,84(sp)
  805a28:	dc001417 	ldw	r16,80(sp)
  805a2c:	dec01e04 	addi	sp,sp,120
  805a30:	f800283a 	ret
  805a34:	d8801204 	addi	r2,sp,72
  805a38:	9020d53a 	srli	r16,r18,20
  805a3c:	d8800015 	stw	r2,0(sp)
  805a40:	d9c01304 	addi	r7,sp,76
  805a44:	980b883a 	mov	r5,r19
  805a48:	880d883a 	mov	r6,r17
  805a4c:	b809883a 	mov	r4,r23
  805a50:	0809e280 	call	809e28 <__d2b>
  805a54:	1039883a 	mov	fp,r2
  805a58:	8001771e 	bne	r16,zero,806038 <_dtoa_r+0x700>
  805a5c:	dd001217 	ldw	r20,72(sp)
  805a60:	dc001317 	ldw	r16,76(sp)
  805a64:	a421883a 	add	r16,r20,r16
  805a68:	80810c84 	addi	r2,r16,1074
  805a6c:	10c00850 	cmplti	r3,r2,33
  805a70:	1802e51e 	bne	r3,zero,806608 <_dtoa_r+0xcd0>
  805a74:	01001004 	movi	r4,64
  805a78:	2085c83a 	sub	r2,r4,r2
  805a7c:	81010484 	addi	r4,r16,1042
  805a80:	90a4983a 	sll	r18,r18,r2
  805a84:	9908d83a 	srl	r4,r19,r4
  805a88:	9108b03a 	or	r4,r18,r4
  805a8c:	0802e1c0 	call	802e1c <__floatunsidf>
  805a90:	1009883a 	mov	r4,r2
  805a94:	017f8434 	movhi	r5,65040
  805a98:	00800044 	movi	r2,1
  805a9c:	194b883a 	add	r5,r3,r5
  805aa0:	843fffc4 	addi	r16,r16,-1
  805aa4:	d8800a15 	stw	r2,40(sp)
  805aa8:	000d883a 	mov	r6,zero
  805aac:	01cffe34 	movhi	r7,16376
  805ab0:	080deec0 	call	80deec <__subdf3>
  805ab4:	0198dbf4 	movhi	r6,25455
  805ab8:	01cff4f4 	movhi	r7,16339
  805abc:	3190d844 	addi	r6,r6,17249
  805ac0:	39e1e9c4 	addi	r7,r7,-30809
  805ac4:	1009883a 	mov	r4,r2
  805ac8:	180b883a 	mov	r5,r3
  805acc:	08025380 	call	802538 <__muldf3>
  805ad0:	01a2d874 	movhi	r6,35681
  805ad4:	01cff1f4 	movhi	r7,16327
  805ad8:	31b22cc4 	addi	r6,r6,-14157
  805adc:	39e28a04 	addi	r7,r7,-30168
  805ae0:	180b883a 	mov	r5,r3
  805ae4:	1009883a 	mov	r4,r2
  805ae8:	08013180 	call	801318 <__adddf3>
  805aec:	8009883a 	mov	r4,r16
  805af0:	102b883a 	mov	r21,r2
  805af4:	1825883a 	mov	r18,r3
  805af8:	0802d640 	call	802d64 <__floatsidf>
  805afc:	019427f4 	movhi	r6,20639
  805b00:	01cff4f4 	movhi	r7,16339
  805b04:	319e7ec4 	addi	r6,r6,31227
  805b08:	39d104c4 	addi	r7,r7,17427
  805b0c:	1009883a 	mov	r4,r2
  805b10:	180b883a 	mov	r5,r3
  805b14:	08025380 	call	802538 <__muldf3>
  805b18:	100d883a 	mov	r6,r2
  805b1c:	180f883a 	mov	r7,r3
  805b20:	a809883a 	mov	r4,r21
  805b24:	900b883a 	mov	r5,r18
  805b28:	08013180 	call	801318 <__adddf3>
  805b2c:	1009883a 	mov	r4,r2
  805b30:	180b883a 	mov	r5,r3
  805b34:	1025883a 	mov	r18,r2
  805b38:	182d883a 	mov	r22,r3
  805b3c:	0802ce40 	call	802ce4 <__fixdfsi>
  805b40:	000d883a 	mov	r6,zero
  805b44:	000f883a 	mov	r7,zero
  805b48:	9009883a 	mov	r4,r18
  805b4c:	b00b883a 	mov	r5,r22
  805b50:	102b883a 	mov	r21,r2
  805b54:	d8800315 	stw	r2,12(sp)
  805b58:	080de040 	call	80de04 <__ledf2>
  805b5c:	10028f16 	blt	r2,zero,80659c <_dtoa_r+0xc64>
  805b60:	dc800317 	ldw	r18,12(sp)
  805b64:	a421c83a 	sub	r16,r20,r16
  805b68:	85bfffc4 	addi	r22,r16,-1
  805b6c:	908005e8 	cmpgeui	r2,r18,23
  805b70:	1002821e 	bne	r2,zero,80657c <_dtoa_r+0xc44>
  805b74:	900690fa 	slli	r3,r18,3
  805b78:	00802074 	movhi	r2,129
  805b7c:	1089f504 	addi	r2,r2,10196
  805b80:	10c5883a 	add	r2,r2,r3
  805b84:	11800017 	ldw	r6,0(r2)
  805b88:	11c00117 	ldw	r7,4(r2)
  805b8c:	9809883a 	mov	r4,r19
  805b90:	880b883a 	mov	r5,r17
  805b94:	080de040 	call	80de04 <__ledf2>
  805b98:	1002550e 	bge	r2,zero,8064f0 <_dtoa_r+0xbb8>
  805b9c:	90bfffc4 	addi	r2,r18,-1
  805ba0:	d8800315 	stw	r2,12(sp)
  805ba4:	d8000915 	stw	zero,36(sp)
  805ba8:	b0027716 	blt	r22,zero,806588 <_dtoa_r+0xc50>
  805bac:	d8000615 	stw	zero,24(sp)
  805bb0:	d8800317 	ldw	r2,12(sp)
  805bb4:	1002510e 	bge	r2,zero,8064fc <_dtoa_r+0xbc4>
  805bb8:	d8800317 	ldw	r2,12(sp)
  805bbc:	d8c00617 	ldw	r3,24(sp)
  805bc0:	d8000315 	stw	zero,12(sp)
  805bc4:	d8800415 	stw	r2,16(sp)
  805bc8:	1887c83a 	sub	r3,r3,r2
  805bcc:	d8c00615 	stw	r3,24(sp)
  805bd0:	0087c83a 	sub	r3,zero,r2
  805bd4:	d8c00815 	stw	r3,32(sp)
  805bd8:	d8c00217 	ldw	r3,8(sp)
  805bdc:	188002a8 	cmpgeui	r2,r3,10
  805be0:	10024d1e 	bne	r2,zero,806518 <_dtoa_r+0xbe0>
  805be4:	18800190 	cmplti	r2,r3,6
  805be8:	10028b1e 	bne	r2,zero,806618 <_dtoa_r+0xce0>
  805bec:	18bfff04 	addi	r2,r3,-4
  805bf0:	d8800215 	stw	r2,8(sp)
  805bf4:	0021883a 	mov	r16,zero
  805bf8:	d8c00217 	ldw	r3,8(sp)
  805bfc:	18800120 	cmpeqi	r2,r3,4
  805c00:	10035d1e 	bne	r2,zero,806978 <_dtoa_r+0x1040>
  805c04:	18800160 	cmpeqi	r2,r3,5
  805c08:	10031b1e 	bne	r2,zero,806878 <_dtoa_r+0xf40>
  805c0c:	188000a0 	cmpeqi	r2,r3,2
  805c10:	10024d26 	beq	r2,zero,806548 <_dtoa_r+0xc10>
  805c14:	d8000715 	stw	zero,28(sp)
  805c18:	d8801e17 	ldw	r2,120(sp)
  805c1c:	0083260e 	bge	zero,r2,8068b8 <_dtoa_r+0xf80>
  805c20:	d8800b15 	stw	r2,44(sp)
  805c24:	d8800515 	stw	r2,20(sp)
  805c28:	100d883a 	mov	r6,r2
  805c2c:	b8001115 	stw	zero,68(r23)
  805c30:	30800610 	cmplti	r2,r6,24
  805c34:	1004f11e 	bne	r2,zero,806ffc <_dtoa_r+0x16c4>
  805c38:	00c00044 	movi	r3,1
  805c3c:	00800104 	movi	r2,4
  805c40:	1085883a 	add	r2,r2,r2
  805c44:	11000504 	addi	r4,r2,20
  805c48:	180b883a 	mov	r5,r3
  805c4c:	18c00044 	addi	r3,r3,1
  805c50:	313ffb2e 	bgeu	r6,r4,805c40 <_dtoa_r+0x308>
  805c54:	b9401115 	stw	r5,68(r23)
  805c58:	b809883a 	mov	r4,r23
  805c5c:	0808f8c0 	call	808f8c <_Balloc>
  805c60:	d8800115 	stw	r2,4(sp)
  805c64:	1004de26 	beq	r2,zero,806fe0 <_dtoa_r+0x16a8>
  805c68:	d8800117 	ldw	r2,4(sp)
  805c6c:	b8801015 	stw	r2,64(r23)
  805c70:	d8800517 	ldw	r2,20(sp)
  805c74:	108003e8 	cmpgeui	r2,r2,15
  805c78:	1001021e 	bne	r2,zero,806084 <_dtoa_r+0x74c>
  805c7c:	80010126 	beq	r16,zero,806084 <_dtoa_r+0x74c>
  805c80:	d9000417 	ldw	r4,16(sp)
  805c84:	01038b0e 	bge	zero,r4,806ab4 <_dtoa_r+0x117c>
  805c88:	208003cc 	andi	r2,r4,15
  805c8c:	100690fa 	slli	r3,r2,3
  805c90:	2029d13a 	srai	r20,r4,4
  805c94:	00802074 	movhi	r2,129
  805c98:	1089f504 	addi	r2,r2,10196
  805c9c:	10c5883a 	add	r2,r2,r3
  805ca0:	a0c0040c 	andi	r3,r20,16
  805ca4:	12800017 	ldw	r10,0(r2)
  805ca8:	12400117 	ldw	r9,4(r2)
  805cac:	18032c26 	beq	r3,zero,806960 <_dtoa_r+0x1028>
  805cb0:	00802074 	movhi	r2,129
  805cb4:	1089eb04 	addi	r2,r2,10156
  805cb8:	11800817 	ldw	r6,32(r2)
  805cbc:	11c00917 	ldw	r7,36(r2)
  805cc0:	9809883a 	mov	r4,r19
  805cc4:	880b883a 	mov	r5,r17
  805cc8:	da400e15 	stw	r9,56(sp)
  805ccc:	da800d15 	stw	r10,52(sp)
  805cd0:	0801c080 	call	801c08 <__divdf3>
  805cd4:	da800d17 	ldw	r10,52(sp)
  805cd8:	da400e17 	ldw	r9,56(sp)
  805cdc:	a50003cc 	andi	r20,r20,15
  805ce0:	d8800c15 	stw	r2,48(sp)
  805ce4:	1825883a 	mov	r18,r3
  805ce8:	054000c4 	movi	r21,3
  805cec:	a0001126 	beq	r20,zero,805d34 <_dtoa_r+0x3fc>
  805cf0:	04002074 	movhi	r16,129
  805cf4:	8409eb04 	addi	r16,r16,10156
  805cf8:	5009883a 	mov	r4,r10
  805cfc:	480b883a 	mov	r5,r9
  805d00:	a180004c 	andi	r6,r20,1
  805d04:	30000626 	beq	r6,zero,805d20 <_dtoa_r+0x3e8>
  805d08:	81800017 	ldw	r6,0(r16)
  805d0c:	81c00117 	ldw	r7,4(r16)
  805d10:	ad400044 	addi	r21,r21,1
  805d14:	08025380 	call	802538 <__muldf3>
  805d18:	1009883a 	mov	r4,r2
  805d1c:	180b883a 	mov	r5,r3
  805d20:	a029d07a 	srai	r20,r20,1
  805d24:	84000204 	addi	r16,r16,8
  805d28:	a03ff51e 	bne	r20,zero,805d00 <_dtoa_r+0x3c8>
  805d2c:	2015883a 	mov	r10,r4
  805d30:	2813883a 	mov	r9,r5
  805d34:	d9000c17 	ldw	r4,48(sp)
  805d38:	900b883a 	mov	r5,r18
  805d3c:	500d883a 	mov	r6,r10
  805d40:	480f883a 	mov	r7,r9
  805d44:	0801c080 	call	801c08 <__divdf3>
  805d48:	1021883a 	mov	r16,r2
  805d4c:	1825883a 	mov	r18,r3
  805d50:	d8800917 	ldw	r2,36(sp)
  805d54:	10000626 	beq	r2,zero,805d70 <_dtoa_r+0x438>
  805d58:	000d883a 	mov	r6,zero
  805d5c:	01cffc34 	movhi	r7,16368
  805d60:	8009883a 	mov	r4,r16
  805d64:	900b883a 	mov	r5,r18
  805d68:	080de040 	call	80de04 <__ledf2>
  805d6c:	10044416 	blt	r2,zero,806e80 <_dtoa_r+0x1548>
  805d70:	a809883a 	mov	r4,r21
  805d74:	0802d640 	call	802d64 <__floatsidf>
  805d78:	800d883a 	mov	r6,r16
  805d7c:	900f883a 	mov	r7,r18
  805d80:	1009883a 	mov	r4,r2
  805d84:	180b883a 	mov	r5,r3
  805d88:	08025380 	call	802538 <__muldf3>
  805d8c:	000d883a 	mov	r6,zero
  805d90:	01d00734 	movhi	r7,16412
  805d94:	1009883a 	mov	r4,r2
  805d98:	180b883a 	mov	r5,r3
  805d9c:	08013180 	call	801318 <__adddf3>
  805da0:	1029883a 	mov	r20,r2
  805da4:	00bf3034 	movhi	r2,64704
  805da8:	1885883a 	add	r2,r3,r2
  805dac:	d8800c15 	stw	r2,48(sp)
  805db0:	d8800517 	ldw	r2,20(sp)
  805db4:	10032226 	beq	r2,zero,806a40 <_dtoa_r+0x1108>
  805db8:	d8800417 	ldw	r2,16(sp)
  805dbc:	d8801115 	stw	r2,68(sp)
  805dc0:	d8800517 	ldw	r2,20(sp)
  805dc4:	d8800d15 	stw	r2,52(sp)
  805dc8:	d8800d17 	ldw	r2,52(sp)
  805dcc:	900b883a 	mov	r5,r18
  805dd0:	8009883a 	mov	r4,r16
  805dd4:	10bfffc4 	addi	r2,r2,-1
  805dd8:	100690fa 	slli	r3,r2,3
  805ddc:	00802074 	movhi	r2,129
  805de0:	1089f504 	addi	r2,r2,10196
  805de4:	10c5883a 	add	r2,r2,r3
  805de8:	12800017 	ldw	r10,0(r2)
  805dec:	12c00117 	ldw	r11,4(r2)
  805df0:	da800f15 	stw	r10,60(sp)
  805df4:	dac00e15 	stw	r11,56(sp)
  805df8:	0802ce40 	call	802ce4 <__fixdfsi>
  805dfc:	1009883a 	mov	r4,r2
  805e00:	10800c04 	addi	r2,r2,48
  805e04:	d8801015 	stw	r2,64(sp)
  805e08:	0802d640 	call	802d64 <__floatsidf>
  805e0c:	8009883a 	mov	r4,r16
  805e10:	100d883a 	mov	r6,r2
  805e14:	180f883a 	mov	r7,r3
  805e18:	900b883a 	mov	r5,r18
  805e1c:	080deec0 	call	80deec <__subdf3>
  805e20:	d9000117 	ldw	r4,4(sp)
  805e24:	dac00e17 	ldw	r11,56(sp)
  805e28:	da800f17 	ldw	r10,60(sp)
  805e2c:	1825883a 	mov	r18,r3
  805e30:	d8c00717 	ldw	r3,28(sp)
  805e34:	25400044 	addi	r21,r4,1
  805e38:	1021883a 	mov	r16,r2
  805e3c:	500d883a 	mov	r6,r10
  805e40:	580f883a 	mov	r7,r11
  805e44:	1803b626 	beq	r3,zero,806d20 <_dtoa_r+0x13e8>
  805e48:	0009883a 	mov	r4,zero
  805e4c:	014ff834 	movhi	r5,16352
  805e50:	0801c080 	call	801c08 <__divdf3>
  805e54:	d9c00c17 	ldw	r7,48(sp)
  805e58:	a00d883a 	mov	r6,r20
  805e5c:	1009883a 	mov	r4,r2
  805e60:	180b883a 	mov	r5,r3
  805e64:	080deec0 	call	80deec <__subdf3>
  805e68:	d9000117 	ldw	r4,4(sp)
  805e6c:	1029883a 	mov	r20,r2
  805e70:	d8801017 	ldw	r2,64(sp)
  805e74:	800d883a 	mov	r6,r16
  805e78:	900f883a 	mov	r7,r18
  805e7c:	20800005 	stb	r2,0(r4)
  805e80:	180b883a 	mov	r5,r3
  805e84:	a009883a 	mov	r4,r20
  805e88:	d8c00c15 	stw	r3,48(sp)
  805e8c:	080dd1c0 	call	80dd1c <__gedf2>
  805e90:	0083e716 	blt	zero,r2,806e30 <_dtoa_r+0x14f8>
  805e94:	0005883a 	mov	r2,zero
  805e98:	dd800e15 	stw	r22,56(sp)
  805e9c:	dc400f15 	stw	r17,60(sp)
  805ea0:	dd800d17 	ldw	r22,52(sp)
  805ea4:	dc400c17 	ldw	r17,48(sp)
  805ea8:	ddc00d15 	stw	r23,52(sp)
  805eac:	dcc00c15 	stw	r19,48(sp)
  805eb0:	1027883a 	mov	r19,r2
  805eb4:	00002606 	br	805f50 <_dtoa_r+0x618>
  805eb8:	9cc00044 	addi	r19,r19,1
  805ebc:	9d806d0e 	bge	r19,r22,806074 <_dtoa_r+0x73c>
  805ec0:	a009883a 	mov	r4,r20
  805ec4:	880b883a 	mov	r5,r17
  805ec8:	000d883a 	mov	r6,zero
  805ecc:	01d00934 	movhi	r7,16420
  805ed0:	08025380 	call	802538 <__muldf3>
  805ed4:	000d883a 	mov	r6,zero
  805ed8:	01d00934 	movhi	r7,16420
  805edc:	8009883a 	mov	r4,r16
  805ee0:	900b883a 	mov	r5,r18
  805ee4:	1029883a 	mov	r20,r2
  805ee8:	1823883a 	mov	r17,r3
  805eec:	08025380 	call	802538 <__muldf3>
  805ef0:	180b883a 	mov	r5,r3
  805ef4:	1009883a 	mov	r4,r2
  805ef8:	1821883a 	mov	r16,r3
  805efc:	1025883a 	mov	r18,r2
  805f00:	0802ce40 	call	802ce4 <__fixdfsi>
  805f04:	1009883a 	mov	r4,r2
  805f08:	102f883a 	mov	r23,r2
  805f0c:	0802d640 	call	802d64 <__floatsidf>
  805f10:	9009883a 	mov	r4,r18
  805f14:	800b883a 	mov	r5,r16
  805f18:	100d883a 	mov	r6,r2
  805f1c:	180f883a 	mov	r7,r3
  805f20:	080deec0 	call	80deec <__subdf3>
  805f24:	ad400044 	addi	r21,r21,1
  805f28:	ba000c04 	addi	r8,r23,48
  805f2c:	aa3fffc5 	stb	r8,-1(r21)
  805f30:	a00d883a 	mov	r6,r20
  805f34:	880f883a 	mov	r7,r17
  805f38:	1009883a 	mov	r4,r2
  805f3c:	180b883a 	mov	r5,r3
  805f40:	1021883a 	mov	r16,r2
  805f44:	1825883a 	mov	r18,r3
  805f48:	080de040 	call	80de04 <__ledf2>
  805f4c:	10040516 	blt	r2,zero,806f64 <_dtoa_r+0x162c>
  805f50:	800d883a 	mov	r6,r16
  805f54:	900f883a 	mov	r7,r18
  805f58:	0009883a 	mov	r4,zero
  805f5c:	014ffc34 	movhi	r5,16368
  805f60:	080deec0 	call	80deec <__subdf3>
  805f64:	a00d883a 	mov	r6,r20
  805f68:	880f883a 	mov	r7,r17
  805f6c:	1009883a 	mov	r4,r2
  805f70:	180b883a 	mov	r5,r3
  805f74:	080de040 	call	80de04 <__ledf2>
  805f78:	103fcf0e 	bge	r2,zero,805eb8 <_dtoa_r+0x580>
  805f7c:	d8801117 	ldw	r2,68(sp)
  805f80:	ddc00d17 	ldw	r23,52(sp)
  805f84:	d9000117 	ldw	r4,4(sp)
  805f88:	10800044 	addi	r2,r2,1
  805f8c:	d8800415 	stw	r2,16(sp)
  805f90:	a829883a 	mov	r20,r21
  805f94:	00000106 	br	805f9c <_dtoa_r+0x664>
  805f98:	a103da26 	beq	r20,r4,806f04 <_dtoa_r+0x15cc>
  805f9c:	a0ffffc3 	ldbu	r3,-1(r20)
  805fa0:	a02b883a 	mov	r21,r20
  805fa4:	a53fffc4 	addi	r20,r20,-1
  805fa8:	18803fcc 	andi	r2,r3,255
  805fac:	1080201c 	xori	r2,r2,128
  805fb0:	10bfe004 	addi	r2,r2,-128
  805fb4:	10800e60 	cmpeqi	r2,r2,57
  805fb8:	103ff71e 	bne	r2,zero,805f98 <_dtoa_r+0x660>
  805fbc:	18c00044 	addi	r3,r3,1
  805fc0:	a0c00005 	stb	r3,0(r20)
  805fc4:	00013f06 	br	8064c4 <_dtoa_r+0xb8c>
  805fc8:	04600034 	movhi	r17,32768
  805fcc:	8c7fffc4 	addi	r17,r17,-1
  805fd0:	9462703a 	and	r17,r18,r17
  805fd4:	00800044 	movi	r2,1
  805fd8:	8825883a 	mov	r18,r17
  805fdc:	80800015 	stw	r2,0(r16)
  805fe0:	00dffc34 	movhi	r3,32752
  805fe4:	909ffc2c 	andhi	r2,r18,32752
  805fe8:	10fe731e 	bne	r2,r3,8059b8 <_dtoa_r+0x80>
  805fec:	d9001f17 	ldw	r4,124(sp)
  805ff0:	00800434 	movhi	r2,16
  805ff4:	10bfffc4 	addi	r2,r2,-1
  805ff8:	9084703a 	and	r2,r18,r2
  805ffc:	00c9c3c4 	movi	r3,9999
  806000:	20c00015 	stw	r3,0(r4)
  806004:	14e6b03a 	or	r19,r2,r19
  806008:	9800141e 	bne	r19,zero,80605c <_dtoa_r+0x724>
  80600c:	d8802117 	ldw	r2,132(sp)
  806010:	10041226 	beq	r2,zero,80705c <_dtoa_r+0x1724>
  806014:	00802074 	movhi	r2,129
  806018:	1007883a 	mov	r3,r2
  80601c:	18c9b604 	addi	r3,r3,9944
  806020:	00802074 	movhi	r2,129
  806024:	d8c00115 	stw	r3,4(sp)
  806028:	1089b804 	addi	r2,r2,9952
  80602c:	d8c02117 	ldw	r3,132(sp)
  806030:	18800015 	stw	r2,0(r3)
  806034:	003e7206 	br	805a00 <_dtoa_r+0xc8>
  806038:	01400434 	movhi	r5,16
  80603c:	297fffc4 	addi	r5,r5,-1
  806040:	894a703a 	and	r5,r17,r5
  806044:	dd001217 	ldw	r20,72(sp)
  806048:	9809883a 	mov	r4,r19
  80604c:	294ffc34 	orhi	r5,r5,16368
  806050:	843f0044 	addi	r16,r16,-1023
  806054:	d8000a15 	stw	zero,40(sp)
  806058:	003e9306 	br	805aa8 <_dtoa_r+0x170>
  80605c:	d8802117 	ldw	r2,132(sp)
  806060:	1001fe1e 	bne	r2,zero,80685c <_dtoa_r+0xf24>
  806064:	00802074 	movhi	r2,129
  806068:	1089b504 	addi	r2,r2,9940
  80606c:	d8800115 	stw	r2,4(sp)
  806070:	003e6306 	br	805a00 <_dtoa_r+0xc8>
  806074:	dd800e17 	ldw	r22,56(sp)
  806078:	ddc00d17 	ldw	r23,52(sp)
  80607c:	dc400f17 	ldw	r17,60(sp)
  806080:	dcc00c17 	ldw	r19,48(sp)
  806084:	d8801317 	ldw	r2,76(sp)
  806088:	10006e16 	blt	r2,zero,806244 <_dtoa_r+0x90c>
  80608c:	d9000417 	ldw	r4,16(sp)
  806090:	20c003c8 	cmpgei	r3,r4,15
  806094:	18006b1e 	bne	r3,zero,806244 <_dtoa_r+0x90c>
  806098:	200690fa 	slli	r3,r4,3
  80609c:	00802074 	movhi	r2,129
  8060a0:	1089f504 	addi	r2,r2,10196
  8060a4:	10c5883a 	add	r2,r2,r3
  8060a8:	14000017 	ldw	r16,0(r2)
  8060ac:	14800117 	ldw	r18,4(r2)
  8060b0:	d8801e17 	ldw	r2,120(sp)
  8060b4:	1000150e 	bge	r2,zero,80610c <_dtoa_r+0x7d4>
  8060b8:	d8800517 	ldw	r2,20(sp)
  8060bc:	00801316 	blt	zero,r2,80610c <_dtoa_r+0x7d4>
  8060c0:	d8800517 	ldw	r2,20(sp)
  8060c4:	1002721e 	bne	r2,zero,806a90 <_dtoa_r+0x1158>
  8060c8:	8009883a 	mov	r4,r16
  8060cc:	000d883a 	mov	r6,zero
  8060d0:	01d00534 	movhi	r7,16404
  8060d4:	900b883a 	mov	r5,r18
  8060d8:	08025380 	call	802538 <__muldf3>
  8060dc:	100d883a 	mov	r6,r2
  8060e0:	180f883a 	mov	r7,r3
  8060e4:	9809883a 	mov	r4,r19
  8060e8:	880b883a 	mov	r5,r17
  8060ec:	080de040 	call	80de04 <__ledf2>
  8060f0:	0029883a 	mov	r20,zero
  8060f4:	0021883a 	mov	r16,zero
  8060f8:	00820216 	blt	zero,r2,806904 <_dtoa_r+0xfcc>
  8060fc:	d8801e17 	ldw	r2,120(sp)
  806100:	dd400117 	ldw	r21,4(sp)
  806104:	00a2303a 	nor	r17,zero,r2
  806108:	00020406 	br	80691c <_dtoa_r+0xfe4>
  80610c:	800d883a 	mov	r6,r16
  806110:	900f883a 	mov	r7,r18
  806114:	9809883a 	mov	r4,r19
  806118:	880b883a 	mov	r5,r17
  80611c:	0801c080 	call	801c08 <__divdf3>
  806120:	180b883a 	mov	r5,r3
  806124:	1009883a 	mov	r4,r2
  806128:	0802ce40 	call	802ce4 <__fixdfsi>
  80612c:	1009883a 	mov	r4,r2
  806130:	102b883a 	mov	r21,r2
  806134:	0802d640 	call	802d64 <__floatsidf>
  806138:	800d883a 	mov	r6,r16
  80613c:	900f883a 	mov	r7,r18
  806140:	1009883a 	mov	r4,r2
  806144:	180b883a 	mov	r5,r3
  806148:	08025380 	call	802538 <__muldf3>
  80614c:	100d883a 	mov	r6,r2
  806150:	9809883a 	mov	r4,r19
  806154:	880b883a 	mov	r5,r17
  806158:	180f883a 	mov	r7,r3
  80615c:	080deec0 	call	80deec <__subdf3>
  806160:	d9800117 	ldw	r6,4(sp)
  806164:	dd800517 	ldw	r22,20(sp)
  806168:	1009883a 	mov	r4,r2
  80616c:	a8800c04 	addi	r2,r21,48
  806170:	30800005 	stb	r2,0(r6)
  806174:	b0800060 	cmpeqi	r2,r22,1
  806178:	180b883a 	mov	r5,r3
  80617c:	35000044 	addi	r20,r6,1
  806180:	10029f1e 	bne	r2,zero,806c00 <_dtoa_r+0x12c8>
  806184:	04400044 	movi	r17,1
  806188:	ddc00215 	stw	r23,8(sp)
  80618c:	00001c06 	br	806200 <_dtoa_r+0x8c8>
  806190:	800d883a 	mov	r6,r16
  806194:	900f883a 	mov	r7,r18
  806198:	a809883a 	mov	r4,r21
  80619c:	980b883a 	mov	r5,r19
  8061a0:	0801c080 	call	801c08 <__divdf3>
  8061a4:	180b883a 	mov	r5,r3
  8061a8:	1009883a 	mov	r4,r2
  8061ac:	0802ce40 	call	802ce4 <__fixdfsi>
  8061b0:	1009883a 	mov	r4,r2
  8061b4:	102f883a 	mov	r23,r2
  8061b8:	0802d640 	call	802d64 <__floatsidf>
  8061bc:	800d883a 	mov	r6,r16
  8061c0:	900f883a 	mov	r7,r18
  8061c4:	1009883a 	mov	r4,r2
  8061c8:	180b883a 	mov	r5,r3
  8061cc:	08025380 	call	802538 <__muldf3>
  8061d0:	a809883a 	mov	r4,r21
  8061d4:	980b883a 	mov	r5,r19
  8061d8:	100d883a 	mov	r6,r2
  8061dc:	180f883a 	mov	r7,r3
  8061e0:	080deec0 	call	80deec <__subdf3>
  8061e4:	b9000c04 	addi	r4,r23,48
  8061e8:	a1000005 	stb	r4,0(r20)
  8061ec:	8c400044 	addi	r17,r17,1
  8061f0:	a5000044 	addi	r20,r20,1
  8061f4:	1009883a 	mov	r4,r2
  8061f8:	180b883a 	mov	r5,r3
  8061fc:	8d827e26 	beq	r17,r22,806bf8 <_dtoa_r+0x12c0>
  806200:	000d883a 	mov	r6,zero
  806204:	01d00934 	movhi	r7,16420
  806208:	08025380 	call	802538 <__muldf3>
  80620c:	000d883a 	mov	r6,zero
  806210:	000f883a 	mov	r7,zero
  806214:	1009883a 	mov	r4,r2
  806218:	180b883a 	mov	r5,r3
  80621c:	102b883a 	mov	r21,r2
  806220:	1827883a 	mov	r19,r3
  806224:	080dc9c0 	call	80dc9c <__eqdf2>
  806228:	103fd91e 	bne	r2,zero,806190 <_dtoa_r+0x858>
  80622c:	d8800417 	ldw	r2,16(sp)
  806230:	ddc00217 	ldw	r23,8(sp)
  806234:	a02b883a 	mov	r21,r20
  806238:	10800044 	addi	r2,r2,1
  80623c:	d8800415 	stw	r2,16(sp)
  806240:	0000a006 	br	8064c4 <_dtoa_r+0xb8c>
  806244:	d8c00717 	ldw	r3,28(sp)
  806248:	1800e326 	beq	r3,zero,8065d8 <_dtoa_r+0xca0>
  80624c:	d8c00217 	ldw	r3,8(sp)
  806250:	18c00088 	cmpgei	r3,r3,2
  806254:	1801e026 	beq	r3,zero,8069d8 <_dtoa_r+0x10a0>
  806258:	d8800517 	ldw	r2,20(sp)
  80625c:	153fffc4 	addi	r20,r2,-1
  806260:	d8800817 	ldw	r2,32(sp)
  806264:	1501bc0e 	bge	r2,r20,806958 <_dtoa_r+0x1020>
  806268:	d8800817 	ldw	r2,32(sp)
  80626c:	d8c00317 	ldw	r3,12(sp)
  806270:	dd000815 	stw	r20,32(sp)
  806274:	a085c83a 	sub	r2,r20,r2
  806278:	1885883a 	add	r2,r3,r2
  80627c:	d8800315 	stw	r2,12(sp)
  806280:	0029883a 	mov	r20,zero
  806284:	d8800517 	ldw	r2,20(sp)
  806288:	10028b16 	blt	r2,zero,806cb8 <_dtoa_r+0x1380>
  80628c:	d8c00617 	ldw	r3,24(sp)
  806290:	b0ad883a 	add	r22,r22,r2
  806294:	1885883a 	add	r2,r3,r2
  806298:	1825883a 	mov	r18,r3
  80629c:	d8800615 	stw	r2,24(sp)
  8062a0:	01400044 	movi	r5,1
  8062a4:	b809883a 	mov	r4,r23
  8062a8:	08093fc0 	call	8093fc <__i2b>
  8062ac:	1021883a 	mov	r16,r2
  8062b0:	0480080e 	bge	zero,r18,8062d4 <_dtoa_r+0x99c>
  8062b4:	0580070e 	bge	zero,r22,8062d4 <_dtoa_r+0x99c>
  8062b8:	9005883a 	mov	r2,r18
  8062bc:	b4819e16 	blt	r22,r18,806938 <_dtoa_r+0x1000>
  8062c0:	d8c00617 	ldw	r3,24(sp)
  8062c4:	90a5c83a 	sub	r18,r18,r2
  8062c8:	b0adc83a 	sub	r22,r22,r2
  8062cc:	1887c83a 	sub	r3,r3,r2
  8062d0:	d8c00615 	stw	r3,24(sp)
  8062d4:	d8800817 	ldw	r2,32(sp)
  8062d8:	10001426 	beq	r2,zero,80632c <_dtoa_r+0x9f4>
  8062dc:	d8800717 	ldw	r2,28(sp)
  8062e0:	1001ee26 	beq	r2,zero,806a9c <_dtoa_r+0x1164>
  8062e4:	05000e0e 	bge	zero,r20,806320 <_dtoa_r+0x9e8>
  8062e8:	800b883a 	mov	r5,r16
  8062ec:	a00d883a 	mov	r6,r20
  8062f0:	b809883a 	mov	r4,r23
  8062f4:	08097700 	call	809770 <__pow5mult>
  8062f8:	e00d883a 	mov	r6,fp
  8062fc:	100b883a 	mov	r5,r2
  806300:	b809883a 	mov	r4,r23
  806304:	1021883a 	mov	r16,r2
  806308:	08094ac0 	call	8094ac <__multiply>
  80630c:	102b883a 	mov	r21,r2
  806310:	e00b883a 	mov	r5,fp
  806314:	b809883a 	mov	r4,r23
  806318:	08090300 	call	809030 <_Bfree>
  80631c:	a839883a 	mov	fp,r21
  806320:	d8800817 	ldw	r2,32(sp)
  806324:	150dc83a 	sub	r6,r2,r20
  806328:	15025e1e 	bne	r2,r20,806ca4 <_dtoa_r+0x136c>
  80632c:	01400044 	movi	r5,1
  806330:	b809883a 	mov	r4,r23
  806334:	08093fc0 	call	8093fc <__i2b>
  806338:	d9800317 	ldw	r6,12(sp)
  80633c:	1029883a 	mov	r20,r2
  806340:	0180b716 	blt	zero,r6,806620 <_dtoa_r+0xce8>
  806344:	d8800217 	ldw	r2,8(sp)
  806348:	10800088 	cmpgei	r2,r2,2
  80634c:	10014d26 	beq	r2,zero,806884 <_dtoa_r+0xf4c>
  806350:	0023883a 	mov	r17,zero
  806354:	d8c00317 	ldw	r3,12(sp)
  806358:	00800044 	movi	r2,1
  80635c:	1800b81e 	bne	r3,zero,806640 <_dtoa_r+0xd08>
  806360:	1585883a 	add	r2,r2,r22
  806364:	108007cc 	andi	r2,r2,31
  806368:	1000a526 	beq	r2,zero,806600 <_dtoa_r+0xcc8>
  80636c:	00c00804 	movi	r3,32
  806370:	1887c83a 	sub	r3,r3,r2
  806374:	19000150 	cmplti	r4,r3,5
  806378:	20033c1e 	bne	r4,zero,80706c <_dtoa_r+0x1734>
  80637c:	00c00704 	movi	r3,28
  806380:	1885c83a 	sub	r2,r3,r2
  806384:	d8c00617 	ldw	r3,24(sp)
  806388:	90a5883a 	add	r18,r18,r2
  80638c:	b0ad883a 	add	r22,r22,r2
  806390:	1887883a 	add	r3,r3,r2
  806394:	d8c00615 	stw	r3,24(sp)
  806398:	d8800617 	ldw	r2,24(sp)
  80639c:	00809216 	blt	zero,r2,8065e8 <_dtoa_r+0xcb0>
  8063a0:	0580050e 	bge	zero,r22,8063b8 <_dtoa_r+0xa80>
  8063a4:	a00b883a 	mov	r5,r20
  8063a8:	b00d883a 	mov	r6,r22
  8063ac:	b809883a 	mov	r4,r23
  8063b0:	08098b80 	call	8098b8 <__lshift>
  8063b4:	1029883a 	mov	r20,r2
  8063b8:	d8800917 	ldw	r2,36(sp)
  8063bc:	1001151e 	bne	r2,zero,806814 <_dtoa_r+0xedc>
  8063c0:	d8800517 	ldw	r2,20(sp)
  8063c4:	0081020e 	bge	zero,r2,8067d0 <_dtoa_r+0xe98>
  8063c8:	d8800717 	ldw	r2,28(sp)
  8063cc:	1000af1e 	bne	r2,zero,80668c <_dtoa_r+0xd54>
  8063d0:	d8800417 	ldw	r2,16(sp)
  8063d4:	10800044 	addi	r2,r2,1
  8063d8:	d8800415 	stw	r2,16(sp)
  8063dc:	dc800517 	ldw	r18,20(sp)
  8063e0:	dd400117 	ldw	r21,4(sp)
  8063e4:	04400044 	movi	r17,1
  8063e8:	00000706 	br	806408 <_dtoa_r+0xad0>
  8063ec:	e00b883a 	mov	r5,fp
  8063f0:	000f883a 	mov	r7,zero
  8063f4:	01800284 	movi	r6,10
  8063f8:	b809883a 	mov	r4,r23
  8063fc:	08090540 	call	809054 <__multadd>
  806400:	1039883a 	mov	fp,r2
  806404:	8c400044 	addi	r17,r17,1
  806408:	a00b883a 	mov	r5,r20
  80640c:	e009883a 	mov	r4,fp
  806410:	08057180 	call	805718 <quorem>
  806414:	14c00c04 	addi	r19,r2,48
  806418:	ac45883a 	add	r2,r21,r17
  80641c:	14ffffc5 	stb	r19,-1(r2)
  806420:	8cbff216 	blt	r17,r18,8063ec <_dtoa_r+0xab4>
  806424:	d8800517 	ldw	r2,20(sp)
  806428:	0081510e 	bge	zero,r2,806970 <_dtoa_r+0x1038>
  80642c:	d8c00117 	ldw	r3,4(sp)
  806430:	0023883a 	mov	r17,zero
  806434:	18ab883a 	add	r21,r3,r2
  806438:	e00b883a 	mov	r5,fp
  80643c:	01800044 	movi	r6,1
  806440:	b809883a 	mov	r4,r23
  806444:	08098b80 	call	8098b8 <__lshift>
  806448:	1009883a 	mov	r4,r2
  80644c:	a00b883a 	mov	r5,r20
  806450:	1039883a 	mov	fp,r2
  806454:	0809a400 	call	809a40 <__mcmp>
  806458:	a93fffc3 	ldbu	r4,-1(r21)
  80645c:	0081490e 	bge	zero,r2,806984 <_dtoa_r+0x104c>
  806460:	d9400117 	ldw	r5,4(sp)
  806464:	00000306 	br	806474 <_dtoa_r+0xb3c>
  806468:	19415426 	beq	r3,r5,8069bc <_dtoa_r+0x1084>
  80646c:	193fffc3 	ldbu	r4,-1(r3)
  806470:	182b883a 	mov	r21,r3
  806474:	20803fcc 	andi	r2,r4,255
  806478:	1080201c 	xori	r2,r2,128
  80647c:	10bfe004 	addi	r2,r2,-128
  806480:	10800e60 	cmpeqi	r2,r2,57
  806484:	a8ffffc4 	addi	r3,r21,-1
  806488:	103ff71e 	bne	r2,zero,806468 <_dtoa_r+0xb30>
  80648c:	21000044 	addi	r4,r4,1
  806490:	19000005 	stb	r4,0(r3)
  806494:	a00b883a 	mov	r5,r20
  806498:	b809883a 	mov	r4,r23
  80649c:	08090300 	call	809030 <_Bfree>
  8064a0:	80000826 	beq	r16,zero,8064c4 <_dtoa_r+0xb8c>
  8064a4:	88000426 	beq	r17,zero,8064b8 <_dtoa_r+0xb80>
  8064a8:	8c000326 	beq	r17,r16,8064b8 <_dtoa_r+0xb80>
  8064ac:	880b883a 	mov	r5,r17
  8064b0:	b809883a 	mov	r4,r23
  8064b4:	08090300 	call	809030 <_Bfree>
  8064b8:	800b883a 	mov	r5,r16
  8064bc:	b809883a 	mov	r4,r23
  8064c0:	08090300 	call	809030 <_Bfree>
  8064c4:	e00b883a 	mov	r5,fp
  8064c8:	b809883a 	mov	r4,r23
  8064cc:	08090300 	call	809030 <_Bfree>
  8064d0:	d8801f17 	ldw	r2,124(sp)
  8064d4:	d8c00417 	ldw	r3,16(sp)
  8064d8:	a8000005 	stb	zero,0(r21)
  8064dc:	10c00015 	stw	r3,0(r2)
  8064e0:	d8802117 	ldw	r2,132(sp)
  8064e4:	103d4626 	beq	r2,zero,805a00 <_dtoa_r+0xc8>
  8064e8:	15400015 	stw	r21,0(r2)
  8064ec:	003d4406 	br	805a00 <_dtoa_r+0xc8>
  8064f0:	d8000915 	stw	zero,36(sp)
  8064f4:	b0002416 	blt	r22,zero,806588 <_dtoa_r+0xc50>
  8064f8:	d8000615 	stw	zero,24(sp)
  8064fc:	d8800317 	ldw	r2,12(sp)
  806500:	d8c00217 	ldw	r3,8(sp)
  806504:	d8000815 	stw	zero,32(sp)
  806508:	b0ad883a 	add	r22,r22,r2
  80650c:	d8800415 	stw	r2,16(sp)
  806510:	188002a8 	cmpgeui	r2,r3,10
  806514:	103db326 	beq	r2,zero,805be4 <_dtoa_r+0x2ac>
  806518:	00800044 	movi	r2,1
  80651c:	d8800715 	stw	r2,28(sp)
  806520:	00bfffc4 	movi	r2,-1
  806524:	04000044 	movi	r16,1
  806528:	d8000215 	stw	zero,8(sp)
  80652c:	d8800515 	stw	r2,20(sp)
  806530:	d8001e15 	stw	zero,120(sp)
  806534:	d8800517 	ldw	r2,20(sp)
  806538:	b8001115 	stw	zero,68(r23)
  80653c:	000b883a 	mov	r5,zero
  806540:	d8800b15 	stw	r2,44(sp)
  806544:	003dc406 	br	805c58 <_dtoa_r+0x320>
  806548:	188000e0 	cmpeqi	r2,r3,3
  80654c:	d8000715 	stw	zero,28(sp)
  806550:	1002ac26 	beq	r2,zero,807004 <_dtoa_r+0x16cc>
  806554:	d8801e17 	ldw	r2,120(sp)
  806558:	d8c00417 	ldw	r3,16(sp)
  80655c:	10c5883a 	add	r2,r2,r3
  806560:	d8800b15 	stw	r2,44(sp)
  806564:	10800044 	addi	r2,r2,1
  806568:	d8800515 	stw	r2,20(sp)
  80656c:	100d883a 	mov	r6,r2
  806570:	00bdae16 	blt	zero,r2,805c2c <_dtoa_r+0x2f4>
  806574:	01800044 	movi	r6,1
  806578:	003dac06 	br	805c2c <_dtoa_r+0x2f4>
  80657c:	00800044 	movi	r2,1
  806580:	d8800915 	stw	r2,36(sp)
  806584:	b03d890e 	bge	r22,zero,805bac <_dtoa_r+0x274>
  806588:	00800044 	movi	r2,1
  80658c:	1405c83a 	sub	r2,r2,r16
  806590:	d8800615 	stw	r2,24(sp)
  806594:	002d883a 	mov	r22,zero
  806598:	003d8506 	br	805bb0 <_dtoa_r+0x278>
  80659c:	a809883a 	mov	r4,r21
  8065a0:	0802d640 	call	802d64 <__floatsidf>
  8065a4:	900d883a 	mov	r6,r18
  8065a8:	b00f883a 	mov	r7,r22
  8065ac:	1009883a 	mov	r4,r2
  8065b0:	180b883a 	mov	r5,r3
  8065b4:	080dc9c0 	call	80dc9c <__eqdf2>
  8065b8:	103d6926 	beq	r2,zero,805b60 <_dtoa_r+0x228>
  8065bc:	a8bfffc4 	addi	r2,r21,-1
  8065c0:	d8800315 	stw	r2,12(sp)
  8065c4:	003d6606 	br	805b60 <_dtoa_r+0x228>
  8065c8:	00802074 	movhi	r2,129
  8065cc:	1089ac04 	addi	r2,r2,9904
  8065d0:	d8800115 	stw	r2,4(sp)
  8065d4:	003d0a06 	br	805a00 <_dtoa_r+0xc8>
  8065d8:	dd000817 	ldw	r20,32(sp)
  8065dc:	dc800617 	ldw	r18,24(sp)
  8065e0:	0021883a 	mov	r16,zero
  8065e4:	003f3206 	br	8062b0 <_dtoa_r+0x978>
  8065e8:	e00b883a 	mov	r5,fp
  8065ec:	100d883a 	mov	r6,r2
  8065f0:	b809883a 	mov	r4,r23
  8065f4:	08098b80 	call	8098b8 <__lshift>
  8065f8:	1039883a 	mov	fp,r2
  8065fc:	003f6806 	br	8063a0 <_dtoa_r+0xa68>
  806600:	00800704 	movi	r2,28
  806604:	003f5f06 	br	806384 <_dtoa_r+0xa4c>
  806608:	01000804 	movi	r4,32
  80660c:	2089c83a 	sub	r4,r4,r2
  806610:	9908983a 	sll	r4,r19,r4
  806614:	003d1d06 	br	805a8c <_dtoa_r+0x154>
  806618:	04000044 	movi	r16,1
  80661c:	003d7606 	br	805bf8 <_dtoa_r+0x2c0>
  806620:	100b883a 	mov	r5,r2
  806624:	b809883a 	mov	r4,r23
  806628:	08097700 	call	809770 <__pow5mult>
  80662c:	d8c00217 	ldw	r3,8(sp)
  806630:	1029883a 	mov	r20,r2
  806634:	18c00090 	cmplti	r3,r3,2
  806638:	1801511e 	bne	r3,zero,806b80 <_dtoa_r+0x1248>
  80663c:	0023883a 	mov	r17,zero
  806640:	a0800417 	ldw	r2,16(r20)
  806644:	10800104 	addi	r2,r2,4
  806648:	100490ba 	slli	r2,r2,2
  80664c:	a085883a 	add	r2,r20,r2
  806650:	11000017 	ldw	r4,0(r2)
  806654:	08092e80 	call	8092e8 <__hi0bits>
  806658:	00c00804 	movi	r3,32
  80665c:	1885c83a 	sub	r2,r3,r2
  806660:	003f3f06 	br	806360 <_dtoa_r+0xa28>
  806664:	800b883a 	mov	r5,r16
  806668:	000f883a 	mov	r7,zero
  80666c:	01800284 	movi	r6,10
  806670:	b809883a 	mov	r4,r23
  806674:	08090540 	call	809054 <__multadd>
  806678:	1021883a 	mov	r16,r2
  80667c:	d8800b17 	ldw	r2,44(sp)
  806680:	00824b0e 	bge	zero,r2,806fb0 <_dtoa_r+0x1678>
  806684:	dd400415 	stw	r21,16(sp)
  806688:	d8800515 	stw	r2,20(sp)
  80668c:	0480ac16 	blt	zero,r18,806940 <_dtoa_r+0x1008>
  806690:	8801731e 	bne	r17,zero,806c60 <_dtoa_r+0x1328>
  806694:	8025883a 	mov	r18,r16
  806698:	dd800117 	ldw	r22,4(sp)
  80669c:	d9000517 	ldw	r4,20(sp)
  8066a0:	98c0004c 	andi	r3,r19,1
  8066a4:	b0bfffc4 	addi	r2,r22,-1
  8066a8:	1105883a 	add	r2,r2,r4
  8066ac:	d8800515 	stw	r2,20(sp)
  8066b0:	d8800217 	ldw	r2,8(sp)
  8066b4:	d8c00815 	stw	r3,32(sp)
  8066b8:	1884b03a 	or	r2,r3,r2
  8066bc:	d8800715 	stw	r2,28(sp)
  8066c0:	00002906 	br	806768 <_dtoa_r+0xe30>
  8066c4:	e009883a 	mov	r4,fp
  8066c8:	0809a400 	call	809a40 <__mcmp>
  8066cc:	980b883a 	mov	r5,r19
  8066d0:	b809883a 	mov	r4,r23
  8066d4:	d8800315 	stw	r2,12(sp)
  8066d8:	08090300 	call	809030 <_Bfree>
  8066dc:	d8800317 	ldw	r2,12(sp)
  8066e0:	1000021e 	bne	r2,zero,8066ec <_dtoa_r+0xdb4>
  8066e4:	d8c00717 	ldw	r3,28(sp)
  8066e8:	18022326 	beq	r3,zero,806f78 <_dtoa_r+0x1640>
  8066ec:	b4c00044 	addi	r19,r22,1
  8066f0:	88012916 	blt	r17,zero,806b98 <_dtoa_r+0x1260>
  8066f4:	d8c00217 	ldw	r3,8(sp)
  8066f8:	88e2b03a 	or	r17,r17,r3
  8066fc:	d8c00817 	ldw	r3,32(sp)
  806700:	1c62b03a 	or	r17,r3,r17
  806704:	88012426 	beq	r17,zero,806b98 <_dtoa_r+0x1260>
  806708:	00816f16 	blt	zero,r2,806cc8 <_dtoa_r+0x1390>
  80670c:	d8800517 	ldw	r2,20(sp)
  806710:	b5400005 	stb	r21,0(r22)
  806714:	15817926 	beq	r2,r22,806cfc <_dtoa_r+0x13c4>
  806718:	e00b883a 	mov	r5,fp
  80671c:	000f883a 	mov	r7,zero
  806720:	01800284 	movi	r6,10
  806724:	b809883a 	mov	r4,r23
  806728:	08090540 	call	809054 <__multadd>
  80672c:	1039883a 	mov	fp,r2
  806730:	800b883a 	mov	r5,r16
  806734:	000f883a 	mov	r7,zero
  806738:	01800284 	movi	r6,10
  80673c:	b809883a 	mov	r4,r23
  806740:	84801f26 	beq	r16,r18,8067c0 <_dtoa_r+0xe88>
  806744:	08090540 	call	809054 <__multadd>
  806748:	900b883a 	mov	r5,r18
  80674c:	000f883a 	mov	r7,zero
  806750:	01800284 	movi	r6,10
  806754:	b809883a 	mov	r4,r23
  806758:	1021883a 	mov	r16,r2
  80675c:	08090540 	call	809054 <__multadd>
  806760:	1025883a 	mov	r18,r2
  806764:	982d883a 	mov	r22,r19
  806768:	a00b883a 	mov	r5,r20
  80676c:	e009883a 	mov	r4,fp
  806770:	08057180 	call	805718 <quorem>
  806774:	800b883a 	mov	r5,r16
  806778:	e009883a 	mov	r4,fp
  80677c:	102b883a 	mov	r21,r2
  806780:	d8800615 	stw	r2,24(sp)
  806784:	0809a400 	call	809a40 <__mcmp>
  806788:	a00b883a 	mov	r5,r20
  80678c:	900d883a 	mov	r6,r18
  806790:	b809883a 	mov	r4,r23
  806794:	1023883a 	mov	r17,r2
  806798:	0809a980 	call	809a98 <__mdiff>
  80679c:	1027883a 	mov	r19,r2
  8067a0:	10800317 	ldw	r2,12(r2)
  8067a4:	ad400c04 	addi	r21,r21,48
  8067a8:	980b883a 	mov	r5,r19
  8067ac:	103fc526 	beq	r2,zero,8066c4 <_dtoa_r+0xd8c>
  8067b0:	b809883a 	mov	r4,r23
  8067b4:	08090300 	call	809030 <_Bfree>
  8067b8:	00800044 	movi	r2,1
  8067bc:	003fcb06 	br	8066ec <_dtoa_r+0xdb4>
  8067c0:	08090540 	call	809054 <__multadd>
  8067c4:	1021883a 	mov	r16,r2
  8067c8:	1025883a 	mov	r18,r2
  8067cc:	003fe506 	br	806764 <_dtoa_r+0xe2c>
  8067d0:	d8800217 	ldw	r2,8(sp)
  8067d4:	108000d0 	cmplti	r2,r2,3
  8067d8:	10003e26 	beq	r2,zero,8068d4 <_dtoa_r+0xf9c>
  8067dc:	d8800717 	ldw	r2,28(sp)
  8067e0:	103faa1e 	bne	r2,zero,80668c <_dtoa_r+0xd54>
  8067e4:	a00b883a 	mov	r5,r20
  8067e8:	e009883a 	mov	r4,fp
  8067ec:	08057180 	call	805718 <quorem>
  8067f0:	14c00c04 	addi	r19,r2,48
  8067f4:	d8800117 	ldw	r2,4(sp)
  8067f8:	0023883a 	mov	r17,zero
  8067fc:	15400044 	addi	r21,r2,1
  806800:	14c00005 	stb	r19,0(r2)
  806804:	d8800417 	ldw	r2,16(sp)
  806808:	10800044 	addi	r2,r2,1
  80680c:	d8800415 	stw	r2,16(sp)
  806810:	003f0906 	br	806438 <_dtoa_r+0xb00>
  806814:	a00b883a 	mov	r5,r20
  806818:	e009883a 	mov	r4,fp
  80681c:	0809a400 	call	809a40 <__mcmp>
  806820:	103ee70e 	bge	r2,zero,8063c0 <_dtoa_r+0xa88>
  806824:	e00b883a 	mov	r5,fp
  806828:	000f883a 	mov	r7,zero
  80682c:	01800284 	movi	r6,10
  806830:	b809883a 	mov	r4,r23
  806834:	08090540 	call	809054 <__multadd>
  806838:	d8c00417 	ldw	r3,16(sp)
  80683c:	1039883a 	mov	fp,r2
  806840:	d8800717 	ldw	r2,28(sp)
  806844:	1d7fffc4 	addi	r21,r3,-1
  806848:	103f861e 	bne	r2,zero,806664 <_dtoa_r+0xd2c>
  80684c:	d8800b17 	ldw	r2,44(sp)
  806850:	0081d20e 	bge	zero,r2,806f9c <_dtoa_r+0x1664>
  806854:	d8800515 	stw	r2,20(sp)
  806858:	003ee006 	br	8063dc <_dtoa_r+0xaa4>
  80685c:	00802074 	movhi	r2,129
  806860:	1007883a 	mov	r3,r2
  806864:	18c9b504 	addi	r3,r3,9940
  806868:	00802074 	movhi	r2,129
  80686c:	d8c00115 	stw	r3,4(sp)
  806870:	1089b5c4 	addi	r2,r2,9943
  806874:	003ded06 	br	80602c <_dtoa_r+0x6f4>
  806878:	00800044 	movi	r2,1
  80687c:	d8800715 	stw	r2,28(sp)
  806880:	003f3406 	br	806554 <_dtoa_r+0xc1c>
  806884:	983eb21e 	bne	r19,zero,806350 <_dtoa_r+0xa18>
  806888:	00800434 	movhi	r2,16
  80688c:	10bfffc4 	addi	r2,r2,-1
  806890:	8884703a 	and	r2,r17,r2
  806894:	103eae1e 	bne	r2,zero,806350 <_dtoa_r+0xa18>
  806898:	8c5ffc2c 	andhi	r17,r17,32752
  80689c:	883eac26 	beq	r17,zero,806350 <_dtoa_r+0xa18>
  8068a0:	d8800617 	ldw	r2,24(sp)
  8068a4:	b5800044 	addi	r22,r22,1
  8068a8:	04400044 	movi	r17,1
  8068ac:	10800044 	addi	r2,r2,1
  8068b0:	d8800615 	stw	r2,24(sp)
  8068b4:	003ea706 	br	806354 <_dtoa_r+0xa1c>
  8068b8:	00800044 	movi	r2,1
  8068bc:	d8800515 	stw	r2,20(sp)
  8068c0:	d8801e15 	stw	r2,120(sp)
  8068c4:	003f1b06 	br	806534 <_dtoa_r+0xbfc>
  8068c8:	d8800b17 	ldw	r2,44(sp)
  8068cc:	dd400415 	stw	r21,16(sp)
  8068d0:	d8800515 	stw	r2,20(sp)
  8068d4:	d8800517 	ldw	r2,20(sp)
  8068d8:	103e081e 	bne	r2,zero,8060fc <_dtoa_r+0x7c4>
  8068dc:	a00b883a 	mov	r5,r20
  8068e0:	b809883a 	mov	r4,r23
  8068e4:	000f883a 	mov	r7,zero
  8068e8:	01800144 	movi	r6,5
  8068ec:	08090540 	call	809054 <__multadd>
  8068f0:	100b883a 	mov	r5,r2
  8068f4:	e009883a 	mov	r4,fp
  8068f8:	1029883a 	mov	r20,r2
  8068fc:	0809a400 	call	809a40 <__mcmp>
  806900:	00bdfe0e 	bge	zero,r2,8060fc <_dtoa_r+0x7c4>
  806904:	d8c00117 	ldw	r3,4(sp)
  806908:	00800c44 	movi	r2,49
  80690c:	18800005 	stb	r2,0(r3)
  806910:	d8800417 	ldw	r2,16(sp)
  806914:	1d400044 	addi	r21,r3,1
  806918:	14400044 	addi	r17,r2,1
  80691c:	a00b883a 	mov	r5,r20
  806920:	b809883a 	mov	r4,r23
  806924:	08090300 	call	809030 <_Bfree>
  806928:	88800044 	addi	r2,r17,1
  80692c:	d8800415 	stw	r2,16(sp)
  806930:	803ee11e 	bne	r16,zero,8064b8 <_dtoa_r+0xb80>
  806934:	003ee306 	br	8064c4 <_dtoa_r+0xb8c>
  806938:	b005883a 	mov	r2,r22
  80693c:	003e6006 	br	8062c0 <_dtoa_r+0x988>
  806940:	800b883a 	mov	r5,r16
  806944:	900d883a 	mov	r6,r18
  806948:	b809883a 	mov	r4,r23
  80694c:	08098b80 	call	8098b8 <__lshift>
  806950:	1021883a 	mov	r16,r2
  806954:	003f4e06 	br	806690 <_dtoa_r+0xd58>
  806958:	1529c83a 	sub	r20,r2,r20
  80695c:	003e4906 	br	806284 <_dtoa_r+0x94c>
  806960:	dcc00c15 	stw	r19,48(sp)
  806964:	8825883a 	mov	r18,r17
  806968:	05400084 	movi	r21,2
  80696c:	003cdf06 	br	805cec <_dtoa_r+0x3b4>
  806970:	00800044 	movi	r2,1
  806974:	003ead06 	br	80642c <_dtoa_r+0xaf4>
  806978:	00800044 	movi	r2,1
  80697c:	d8800715 	stw	r2,28(sp)
  806980:	003ca506 	br	805c18 <_dtoa_r+0x2e0>
  806984:	1000021e 	bne	r2,zero,806990 <_dtoa_r+0x1058>
  806988:	98c0004c 	andi	r3,r19,1
  80698c:	183eb41e 	bne	r3,zero,806460 <_dtoa_r+0xb28>
  806990:	2005883a 	mov	r2,r4
  806994:	00000206 	br	8069a0 <_dtoa_r+0x1068>
  806998:	a8bfff83 	ldbu	r2,-2(r21)
  80699c:	182b883a 	mov	r21,r3
  8069a0:	10803fcc 	andi	r2,r2,255
  8069a4:	1080201c 	xori	r2,r2,128
  8069a8:	10bfe004 	addi	r2,r2,-128
  8069ac:	10800c18 	cmpnei	r2,r2,48
  8069b0:	a8ffffc4 	addi	r3,r21,-1
  8069b4:	103ff826 	beq	r2,zero,806998 <_dtoa_r+0x1060>
  8069b8:	003eb606 	br	806494 <_dtoa_r+0xb5c>
  8069bc:	d8c00117 	ldw	r3,4(sp)
  8069c0:	00800c44 	movi	r2,49
  8069c4:	18800005 	stb	r2,0(r3)
  8069c8:	d8800417 	ldw	r2,16(sp)
  8069cc:	10800044 	addi	r2,r2,1
  8069d0:	d8800415 	stw	r2,16(sp)
  8069d4:	003eaf06 	br	806494 <_dtoa_r+0xb5c>
  8069d8:	d8c00a17 	ldw	r3,40(sp)
  8069dc:	18011826 	beq	r3,zero,806e40 <_dtoa_r+0x1508>
  8069e0:	d8c00617 	ldw	r3,24(sp)
  8069e4:	10810cc4 	addi	r2,r2,1075
  8069e8:	b0ad883a 	add	r22,r22,r2
  8069ec:	1885883a 	add	r2,r3,r2
  8069f0:	dd000817 	ldw	r20,32(sp)
  8069f4:	1825883a 	mov	r18,r3
  8069f8:	d8800615 	stw	r2,24(sp)
  8069fc:	003e2806 	br	8062a0 <_dtoa_r+0x968>
  806a00:	a809883a 	mov	r4,r21
  806a04:	0802d640 	call	802d64 <__floatsidf>
  806a08:	800d883a 	mov	r6,r16
  806a0c:	900f883a 	mov	r7,r18
  806a10:	1009883a 	mov	r4,r2
  806a14:	180b883a 	mov	r5,r3
  806a18:	08025380 	call	802538 <__muldf3>
  806a1c:	000d883a 	mov	r6,zero
  806a20:	01d00734 	movhi	r7,16412
  806a24:	1009883a 	mov	r4,r2
  806a28:	180b883a 	mov	r5,r3
  806a2c:	08013180 	call	801318 <__adddf3>
  806a30:	1029883a 	mov	r20,r2
  806a34:	00bf3034 	movhi	r2,64704
  806a38:	1885883a 	add	r2,r3,r2
  806a3c:	d8800c15 	stw	r2,48(sp)
  806a40:	8009883a 	mov	r4,r16
  806a44:	900b883a 	mov	r5,r18
  806a48:	000d883a 	mov	r6,zero
  806a4c:	01d00534 	movhi	r7,16404
  806a50:	080deec0 	call	80deec <__subdf3>
  806a54:	dd400c17 	ldw	r21,48(sp)
  806a58:	a00d883a 	mov	r6,r20
  806a5c:	1009883a 	mov	r4,r2
  806a60:	a80f883a 	mov	r7,r21
  806a64:	180b883a 	mov	r5,r3
  806a68:	1025883a 	mov	r18,r2
  806a6c:	1821883a 	mov	r16,r3
  806a70:	080dd1c0 	call	80dd1c <__gedf2>
  806a74:	00812f16 	blt	zero,r2,806f34 <_dtoa_r+0x15fc>
  806a78:	a9e0003c 	xorhi	r7,r21,32768
  806a7c:	a00d883a 	mov	r6,r20
  806a80:	9009883a 	mov	r4,r18
  806a84:	800b883a 	mov	r5,r16
  806a88:	080de040 	call	80de04 <__ledf2>
  806a8c:	103d7d0e 	bge	r2,zero,806084 <_dtoa_r+0x74c>
  806a90:	0029883a 	mov	r20,zero
  806a94:	0021883a 	mov	r16,zero
  806a98:	003d9806 	br	8060fc <_dtoa_r+0x7c4>
  806a9c:	d9800817 	ldw	r6,32(sp)
  806aa0:	e00b883a 	mov	r5,fp
  806aa4:	b809883a 	mov	r4,r23
  806aa8:	08097700 	call	809770 <__pow5mult>
  806aac:	1039883a 	mov	fp,r2
  806ab0:	003e1e06 	br	80632c <_dtoa_r+0x9f4>
  806ab4:	d8800417 	ldw	r2,16(sp)
  806ab8:	1000ed26 	beq	r2,zero,806e70 <_dtoa_r+0x1538>
  806abc:	00a9c83a 	sub	r20,zero,r2
  806ac0:	a08003cc 	andi	r2,r20,15
  806ac4:	100690fa 	slli	r3,r2,3
  806ac8:	00802074 	movhi	r2,129
  806acc:	1089f504 	addi	r2,r2,10196
  806ad0:	10c5883a 	add	r2,r2,r3
  806ad4:	11800017 	ldw	r6,0(r2)
  806ad8:	11c00117 	ldw	r7,4(r2)
  806adc:	a029d13a 	srai	r20,r20,4
  806ae0:	9809883a 	mov	r4,r19
  806ae4:	880b883a 	mov	r5,r17
  806ae8:	08025380 	call	802538 <__muldf3>
  806aec:	1021883a 	mov	r16,r2
  806af0:	1825883a 	mov	r18,r3
  806af4:	a0013826 	beq	r20,zero,806fd8 <_dtoa_r+0x16a0>
  806af8:	02002074 	movhi	r8,129
  806afc:	05400084 	movi	r21,2
  806b00:	4209eb04 	addi	r8,r8,10156
  806b04:	1009883a 	mov	r4,r2
  806b08:	9805883a 	mov	r2,r19
  806b0c:	180b883a 	mov	r5,r3
  806b10:	dc000c15 	stw	r16,48(sp)
  806b14:	8827883a 	mov	r19,r17
  806b18:	0007883a 	mov	r3,zero
  806b1c:	a823883a 	mov	r17,r21
  806b20:	4021883a 	mov	r16,r8
  806b24:	102b883a 	mov	r21,r2
  806b28:	a180004c 	andi	r6,r20,1
  806b2c:	30000726 	beq	r6,zero,806b4c <_dtoa_r+0x1214>
  806b30:	81800017 	ldw	r6,0(r16)
  806b34:	81c00117 	ldw	r7,4(r16)
  806b38:	8c400044 	addi	r17,r17,1
  806b3c:	08025380 	call	802538 <__muldf3>
  806b40:	180b883a 	mov	r5,r3
  806b44:	1009883a 	mov	r4,r2
  806b48:	00c00044 	movi	r3,1
  806b4c:	a029d07a 	srai	r20,r20,1
  806b50:	84000204 	addi	r16,r16,8
  806b54:	a03ff41e 	bne	r20,zero,806b28 <_dtoa_r+0x11f0>
  806b58:	a805883a 	mov	r2,r21
  806b5c:	18c03fcc 	andi	r3,r3,255
  806b60:	882b883a 	mov	r21,r17
  806b64:	dc000c17 	ldw	r16,48(sp)
  806b68:	9823883a 	mov	r17,r19
  806b6c:	1027883a 	mov	r19,r2
  806b70:	183c7726 	beq	r3,zero,805d50 <_dtoa_r+0x418>
  806b74:	2021883a 	mov	r16,r4
  806b78:	2825883a 	mov	r18,r5
  806b7c:	003c7406 	br	805d50 <_dtoa_r+0x418>
  806b80:	983eae1e 	bne	r19,zero,80663c <_dtoa_r+0xd04>
  806b84:	00800434 	movhi	r2,16
  806b88:	10bfffc4 	addi	r2,r2,-1
  806b8c:	8884703a 	and	r2,r17,r2
  806b90:	103f4126 	beq	r2,zero,806898 <_dtoa_r+0xf60>
  806b94:	003ea906 	br	80663c <_dtoa_r+0xd04>
  806b98:	9807883a 	mov	r3,r19
  806b9c:	a827883a 	mov	r19,r21
  806ba0:	182b883a 	mov	r21,r3
  806ba4:	d8c00417 	ldw	r3,16(sp)
  806ba8:	18c00044 	addi	r3,r3,1
  806bac:	d8c00415 	stw	r3,16(sp)
  806bb0:	00800d0e 	bge	zero,r2,806be8 <_dtoa_r+0x12b0>
  806bb4:	e00b883a 	mov	r5,fp
  806bb8:	b809883a 	mov	r4,r23
  806bbc:	01800044 	movi	r6,1
  806bc0:	08098b80 	call	8098b8 <__lshift>
  806bc4:	a00b883a 	mov	r5,r20
  806bc8:	1009883a 	mov	r4,r2
  806bcc:	1039883a 	mov	fp,r2
  806bd0:	0809a400 	call	809a40 <__mcmp>
  806bd4:	0080df0e 	bge	zero,r2,806f54 <_dtoa_r+0x161c>
  806bd8:	98c00e60 	cmpeqi	r3,r19,57
  806bdc:	1800ce1e 	bne	r3,zero,806f18 <_dtoa_r+0x15e0>
  806be0:	d8800617 	ldw	r2,24(sp)
  806be4:	14c00c44 	addi	r19,r2,49
  806be8:	8023883a 	mov	r17,r16
  806bec:	b4c00005 	stb	r19,0(r22)
  806bf0:	9021883a 	mov	r16,r18
  806bf4:	003e2706 	br	806494 <_dtoa_r+0xb5c>
  806bf8:	b82b883a 	mov	r21,r23
  806bfc:	ddc00217 	ldw	r23,8(sp)
  806c00:	200d883a 	mov	r6,r4
  806c04:	280f883a 	mov	r7,r5
  806c08:	08013180 	call	801318 <__adddf3>
  806c0c:	180b883a 	mov	r5,r3
  806c10:	800d883a 	mov	r6,r16
  806c14:	900f883a 	mov	r7,r18
  806c18:	1009883a 	mov	r4,r2
  806c1c:	1823883a 	mov	r17,r3
  806c20:	1027883a 	mov	r19,r2
  806c24:	080dd1c0 	call	80dd1c <__gedf2>
  806c28:	d8c00417 	ldw	r3,16(sp)
  806c2c:	18c00044 	addi	r3,r3,1
  806c30:	d8c00415 	stw	r3,16(sp)
  806c34:	00808c16 	blt	zero,r2,806e68 <_dtoa_r+0x1530>
  806c38:	800d883a 	mov	r6,r16
  806c3c:	900f883a 	mov	r7,r18
  806c40:	9809883a 	mov	r4,r19
  806c44:	880b883a 	mov	r5,r17
  806c48:	080dc9c0 	call	80dc9c <__eqdf2>
  806c4c:	1000021e 	bne	r2,zero,806c58 <_dtoa_r+0x1320>
  806c50:	ad40004c 	andi	r21,r21,1
  806c54:	a800841e 	bne	r21,zero,806e68 <_dtoa_r+0x1530>
  806c58:	a02b883a 	mov	r21,r20
  806c5c:	003e1906 	br	8064c4 <_dtoa_r+0xb8c>
  806c60:	81400117 	ldw	r5,4(r16)
  806c64:	b809883a 	mov	r4,r23
  806c68:	0808f8c0 	call	808f8c <_Balloc>
  806c6c:	1023883a 	mov	r17,r2
  806c70:	1000f326 	beq	r2,zero,807040 <_dtoa_r+0x1708>
  806c74:	81800417 	ldw	r6,16(r16)
  806c78:	81400304 	addi	r5,r16,12
  806c7c:	11000304 	addi	r4,r2,12
  806c80:	31800084 	addi	r6,r6,2
  806c84:	300c90ba 	slli	r6,r6,2
  806c88:	0808c700 	call	808c70 <memcpy>
  806c8c:	01800044 	movi	r6,1
  806c90:	880b883a 	mov	r5,r17
  806c94:	b809883a 	mov	r4,r23
  806c98:	08098b80 	call	8098b8 <__lshift>
  806c9c:	1025883a 	mov	r18,r2
  806ca0:	003e7d06 	br	806698 <_dtoa_r+0xd60>
  806ca4:	e00b883a 	mov	r5,fp
  806ca8:	b809883a 	mov	r4,r23
  806cac:	08097700 	call	809770 <__pow5mult>
  806cb0:	1039883a 	mov	fp,r2
  806cb4:	003d9d06 	br	80632c <_dtoa_r+0x9f4>
  806cb8:	d8800617 	ldw	r2,24(sp)
  806cbc:	d8c00517 	ldw	r3,20(sp)
  806cc0:	10e5c83a 	sub	r18,r2,r3
  806cc4:	003d7606 	br	8062a0 <_dtoa_r+0x968>
  806cc8:	d8c00417 	ldw	r3,16(sp)
  806ccc:	9805883a 	mov	r2,r19
  806cd0:	a827883a 	mov	r19,r21
  806cd4:	18c00044 	addi	r3,r3,1
  806cd8:	102b883a 	mov	r21,r2
  806cdc:	d8c00415 	stw	r3,16(sp)
  806ce0:	98800e58 	cmpnei	r2,r19,57
  806ce4:	10008c26 	beq	r2,zero,806f18 <_dtoa_r+0x15e0>
  806ce8:	98c00044 	addi	r3,r19,1
  806cec:	8023883a 	mov	r17,r16
  806cf0:	b0c00005 	stb	r3,0(r22)
  806cf4:	9021883a 	mov	r16,r18
  806cf8:	003de606 	br	806494 <_dtoa_r+0xb5c>
  806cfc:	9805883a 	mov	r2,r19
  806d00:	a827883a 	mov	r19,r21
  806d04:	102b883a 	mov	r21,r2
  806d08:	d8800417 	ldw	r2,16(sp)
  806d0c:	8023883a 	mov	r17,r16
  806d10:	9021883a 	mov	r16,r18
  806d14:	10800044 	addi	r2,r2,1
  806d18:	d8800415 	stw	r2,16(sp)
  806d1c:	003dc606 	br	806438 <_dtoa_r+0xb00>
  806d20:	d9400c17 	ldw	r5,48(sp)
  806d24:	a009883a 	mov	r4,r20
  806d28:	08025380 	call	802538 <__muldf3>
  806d2c:	d9800d17 	ldw	r6,52(sp)
  806d30:	d9400117 	ldw	r5,4(sp)
  806d34:	d9001017 	ldw	r4,64(sp)
  806d38:	d8800c15 	stw	r2,48(sp)
  806d3c:	d8c00d15 	stw	r3,52(sp)
  806d40:	29000005 	stb	r4,0(r5)
  806d44:	31000058 	cmpnei	r4,r6,1
  806d48:	29a9883a 	add	r20,r5,r6
  806d4c:	2000a026 	beq	r4,zero,806fd0 <_dtoa_r+0x1698>
  806d50:	dc400e15 	stw	r17,56(sp)
  806d54:	8009883a 	mov	r4,r16
  806d58:	900b883a 	mov	r5,r18
  806d5c:	a823883a 	mov	r17,r21
  806d60:	000d883a 	mov	r6,zero
  806d64:	01d00934 	movhi	r7,16420
  806d68:	08025380 	call	802538 <__muldf3>
  806d6c:	180b883a 	mov	r5,r3
  806d70:	1009883a 	mov	r4,r2
  806d74:	1825883a 	mov	r18,r3
  806d78:	102b883a 	mov	r21,r2
  806d7c:	0802ce40 	call	802ce4 <__fixdfsi>
  806d80:	1009883a 	mov	r4,r2
  806d84:	1021883a 	mov	r16,r2
  806d88:	0802d640 	call	802d64 <__floatsidf>
  806d8c:	a809883a 	mov	r4,r21
  806d90:	900b883a 	mov	r5,r18
  806d94:	100d883a 	mov	r6,r2
  806d98:	180f883a 	mov	r7,r3
  806d9c:	8c400044 	addi	r17,r17,1
  806da0:	84000c04 	addi	r16,r16,48
  806da4:	080deec0 	call	80deec <__subdf3>
  806da8:	8c3fffc5 	stb	r16,-1(r17)
  806dac:	1009883a 	mov	r4,r2
  806db0:	180b883a 	mov	r5,r3
  806db4:	a47fea1e 	bne	r20,r17,806d60 <_dtoa_r+0x1428>
  806db8:	dc400e17 	ldw	r17,56(sp)
  806dbc:	1021883a 	mov	r16,r2
  806dc0:	1825883a 	mov	r18,r3
  806dc4:	d9000c17 	ldw	r4,48(sp)
  806dc8:	d9400d17 	ldw	r5,52(sp)
  806dcc:	000d883a 	mov	r6,zero
  806dd0:	01cff834 	movhi	r7,16352
  806dd4:	08013180 	call	801318 <__adddf3>
  806dd8:	800d883a 	mov	r6,r16
  806ddc:	900f883a 	mov	r7,r18
  806de0:	1009883a 	mov	r4,r2
  806de4:	180b883a 	mov	r5,r3
  806de8:	080de040 	call	80de04 <__ledf2>
  806dec:	10005416 	blt	r2,zero,806f40 <_dtoa_r+0x1608>
  806df0:	d9800c17 	ldw	r6,48(sp)
  806df4:	d9c00d17 	ldw	r7,52(sp)
  806df8:	0009883a 	mov	r4,zero
  806dfc:	014ff834 	movhi	r5,16352
  806e00:	080deec0 	call	80deec <__subdf3>
  806e04:	800d883a 	mov	r6,r16
  806e08:	900f883a 	mov	r7,r18
  806e0c:	1009883a 	mov	r4,r2
  806e10:	180b883a 	mov	r5,r3
  806e14:	080dd1c0 	call	80dd1c <__gedf2>
  806e18:	00bc9a0e 	bge	zero,r2,806084 <_dtoa_r+0x74c>
  806e1c:	a0bfffc7 	ldb	r2,-1(r20)
  806e20:	a02b883a 	mov	r21,r20
  806e24:	a53fffc4 	addi	r20,r20,-1
  806e28:	10800c20 	cmpeqi	r2,r2,48
  806e2c:	103ffb1e 	bne	r2,zero,806e1c <_dtoa_r+0x14e4>
  806e30:	d8801117 	ldw	r2,68(sp)
  806e34:	10800044 	addi	r2,r2,1
  806e38:	d8800415 	stw	r2,16(sp)
  806e3c:	003da106 	br	8064c4 <_dtoa_r+0xb8c>
  806e40:	d8c01217 	ldw	r3,72(sp)
  806e44:	d9000617 	ldw	r4,24(sp)
  806e48:	00800d84 	movi	r2,54
  806e4c:	10c5c83a 	sub	r2,r2,r3
  806e50:	b0ad883a 	add	r22,r22,r2
  806e54:	2085883a 	add	r2,r4,r2
  806e58:	dd000817 	ldw	r20,32(sp)
  806e5c:	2025883a 	mov	r18,r4
  806e60:	d8800615 	stw	r2,24(sp)
  806e64:	003d0e06 	br	8062a0 <_dtoa_r+0x968>
  806e68:	d9000117 	ldw	r4,4(sp)
  806e6c:	003c4b06 	br	805f9c <_dtoa_r+0x664>
  806e70:	9821883a 	mov	r16,r19
  806e74:	8825883a 	mov	r18,r17
  806e78:	05400084 	movi	r21,2
  806e7c:	003bb406 	br	805d50 <_dtoa_r+0x418>
  806e80:	d8800517 	ldw	r2,20(sp)
  806e84:	103ede26 	beq	r2,zero,806a00 <_dtoa_r+0x10c8>
  806e88:	d8800b17 	ldw	r2,44(sp)
  806e8c:	00bc7d0e 	bge	zero,r2,806084 <_dtoa_r+0x74c>
  806e90:	900b883a 	mov	r5,r18
  806e94:	8009883a 	mov	r4,r16
  806e98:	000d883a 	mov	r6,zero
  806e9c:	01d00934 	movhi	r7,16420
  806ea0:	08025380 	call	802538 <__muldf3>
  806ea4:	a9000044 	addi	r4,r21,1
  806ea8:	1021883a 	mov	r16,r2
  806eac:	1825883a 	mov	r18,r3
  806eb0:	0802d640 	call	802d64 <__floatsidf>
  806eb4:	800d883a 	mov	r6,r16
  806eb8:	900f883a 	mov	r7,r18
  806ebc:	1009883a 	mov	r4,r2
  806ec0:	180b883a 	mov	r5,r3
  806ec4:	08025380 	call	802538 <__muldf3>
  806ec8:	1009883a 	mov	r4,r2
  806ecc:	000d883a 	mov	r6,zero
  806ed0:	01d00734 	movhi	r7,16412
  806ed4:	180b883a 	mov	r5,r3
  806ed8:	08013180 	call	801318 <__adddf3>
  806edc:	d9000417 	ldw	r4,16(sp)
  806ee0:	1029883a 	mov	r20,r2
  806ee4:	00bf3034 	movhi	r2,64704
  806ee8:	1887883a 	add	r3,r3,r2
  806eec:	d8800b17 	ldw	r2,44(sp)
  806ef0:	213fffc4 	addi	r4,r4,-1
  806ef4:	d9001115 	stw	r4,68(sp)
  806ef8:	d8c00c15 	stw	r3,48(sp)
  806efc:	d8800d15 	stw	r2,52(sp)
  806f00:	003bb106 	br	805dc8 <_dtoa_r+0x490>
  806f04:	d8800417 	ldw	r2,16(sp)
  806f08:	00c00c44 	movi	r3,49
  806f0c:	10800044 	addi	r2,r2,1
  806f10:	d8800415 	stw	r2,16(sp)
  806f14:	003c2a06 	br	805fc0 <_dtoa_r+0x688>
  806f18:	00800e44 	movi	r2,57
  806f1c:	8023883a 	mov	r17,r16
  806f20:	d9400117 	ldw	r5,4(sp)
  806f24:	b0800005 	stb	r2,0(r22)
  806f28:	9021883a 	mov	r16,r18
  806f2c:	01000e44 	movi	r4,57
  806f30:	003d5006 	br	806474 <_dtoa_r+0xb3c>
  806f34:	0029883a 	mov	r20,zero
  806f38:	0021883a 	mov	r16,zero
  806f3c:	003e7106 	br	806904 <_dtoa_r+0xfcc>
  806f40:	d8801117 	ldw	r2,68(sp)
  806f44:	d9000117 	ldw	r4,4(sp)
  806f48:	10800044 	addi	r2,r2,1
  806f4c:	d8800415 	stw	r2,16(sp)
  806f50:	003c1206 	br	805f9c <_dtoa_r+0x664>
  806f54:	103f241e 	bne	r2,zero,806be8 <_dtoa_r+0x12b0>
  806f58:	9880004c 	andi	r2,r19,1
  806f5c:	103f1e1e 	bne	r2,zero,806bd8 <_dtoa_r+0x12a0>
  806f60:	003f2106 	br	806be8 <_dtoa_r+0x12b0>
  806f64:	d8801117 	ldw	r2,68(sp)
  806f68:	ddc00d17 	ldw	r23,52(sp)
  806f6c:	10800044 	addi	r2,r2,1
  806f70:	d8800415 	stw	r2,16(sp)
  806f74:	003d5306 	br	8064c4 <_dtoa_r+0xb8c>
  806f78:	d8c00417 	ldw	r3,16(sp)
  806f7c:	a8800e60 	cmpeqi	r2,r21,57
  806f80:	a827883a 	mov	r19,r21
  806f84:	18c00044 	addi	r3,r3,1
  806f88:	d8c00415 	stw	r3,16(sp)
  806f8c:	b5400044 	addi	r21,r22,1
  806f90:	103fe11e 	bne	r2,zero,806f18 <_dtoa_r+0x15e0>
  806f94:	047f1216 	blt	zero,r17,806be0 <_dtoa_r+0x12a8>
  806f98:	003f1306 	br	806be8 <_dtoa_r+0x12b0>
  806f9c:	d8800217 	ldw	r2,8(sp)
  806fa0:	108000c8 	cmpgei	r2,r2,3
  806fa4:	103e481e 	bne	r2,zero,8068c8 <_dtoa_r+0xf90>
  806fa8:	dd400415 	stw	r21,16(sp)
  806fac:	003e0d06 	br	8067e4 <_dtoa_r+0xeac>
  806fb0:	d8800217 	ldw	r2,8(sp)
  806fb4:	108000c8 	cmpgei	r2,r2,3
  806fb8:	103e431e 	bne	r2,zero,8068c8 <_dtoa_r+0xf90>
  806fbc:	d8800b17 	ldw	r2,44(sp)
  806fc0:	dd400415 	stw	r21,16(sp)
  806fc4:	d8800515 	stw	r2,20(sp)
  806fc8:	04bdb10e 	bge	zero,r18,806690 <_dtoa_r+0xd58>
  806fcc:	003e5c06 	br	806940 <_dtoa_r+0x1008>
  806fd0:	a829883a 	mov	r20,r21
  806fd4:	003f7b06 	br	806dc4 <_dtoa_r+0x148c>
  806fd8:	05400084 	movi	r21,2
  806fdc:	003b5c06 	br	805d50 <_dtoa_r+0x418>
  806fe0:	01c02074 	movhi	r7,129
  806fe4:	01002074 	movhi	r4,129
  806fe8:	39c9b904 	addi	r7,r7,9956
  806fec:	000d883a 	mov	r6,zero
  806ff0:	01406a84 	movi	r5,426
  806ff4:	2109be04 	addi	r4,r4,9976
  806ff8:	080c16c0 	call	80c16c <__assert_func>
  806ffc:	000b883a 	mov	r5,zero
  807000:	003b1506 	br	805c58 <_dtoa_r+0x320>
  807004:	b8001115 	stw	zero,68(r23)
  807008:	000b883a 	mov	r5,zero
  80700c:	b809883a 	mov	r4,r23
  807010:	0808f8c0 	call	808f8c <_Balloc>
  807014:	d8800115 	stw	r2,4(sp)
  807018:	103ff126 	beq	r2,zero,806fe0 <_dtoa_r+0x16a8>
  80701c:	d8800117 	ldw	r2,4(sp)
  807020:	d8001e15 	stw	zero,120(sp)
  807024:	b8801015 	stw	r2,64(r23)
  807028:	00bfffc4 	movi	r2,-1
  80702c:	d8800515 	stw	r2,20(sp)
  807030:	d8800b15 	stw	r2,44(sp)
  807034:	00800044 	movi	r2,1
  807038:	d8800715 	stw	r2,28(sp)
  80703c:	003c1106 	br	806084 <_dtoa_r+0x74c>
  807040:	01c02074 	movhi	r7,129
  807044:	01002074 	movhi	r4,129
  807048:	39c9b904 	addi	r7,r7,9956
  80704c:	000d883a 	mov	r6,zero
  807050:	0140ba84 	movi	r5,746
  807054:	2109be04 	addi	r4,r4,9976
  807058:	080c16c0 	call	80c16c <__assert_func>
  80705c:	00802074 	movhi	r2,129
  807060:	1089b604 	addi	r2,r2,9944
  807064:	d8800115 	stw	r2,4(sp)
  807068:	003a6506 	br	805a00 <_dtoa_r+0xc8>
  80706c:	18c00120 	cmpeqi	r3,r3,4
  807070:	183cc91e 	bne	r3,zero,806398 <_dtoa_r+0xa60>
  807074:	00c00f04 	movi	r3,60
  807078:	1885c83a 	sub	r2,r3,r2
  80707c:	003cc106 	br	806384 <_dtoa_r+0xa4c>

00807080 <__sflush_r>:
  807080:	2880030b 	ldhu	r2,12(r5)
  807084:	defffb04 	addi	sp,sp,-20
  807088:	dcc00315 	stw	r19,12(sp)
  80708c:	dc000015 	stw	r16,0(sp)
  807090:	dfc00415 	stw	ra,16(sp)
  807094:	dc800215 	stw	r18,8(sp)
  807098:	dc400115 	stw	r17,4(sp)
  80709c:	10c0020c 	andi	r3,r2,8
  8070a0:	2821883a 	mov	r16,r5
  8070a4:	2027883a 	mov	r19,r4
  8070a8:	18003f1e 	bne	r3,zero,8071a8 <__sflush_r+0x128>
  8070ac:	28c00117 	ldw	r3,4(r5)
  8070b0:	10820014 	ori	r2,r2,2048
  8070b4:	2880030d 	sth	r2,12(r5)
  8070b8:	00c0550e 	bge	zero,r3,807210 <__sflush_r+0x190>
  8070bc:	82000a17 	ldw	r8,40(r16)
  8070c0:	40003126 	beq	r8,zero,807188 <__sflush_r+0x108>
  8070c4:	9c400017 	ldw	r17,0(r19)
  8070c8:	1104000c 	andi	r4,r2,4096
  8070cc:	98000015 	stw	zero,0(r19)
  8070d0:	81400717 	ldw	r5,28(r16)
  8070d4:	1007883a 	mov	r3,r2
  8070d8:	2000521e 	bne	r4,zero,807224 <__sflush_r+0x1a4>
  8070dc:	01c00044 	movi	r7,1
  8070e0:	000d883a 	mov	r6,zero
  8070e4:	9809883a 	mov	r4,r19
  8070e8:	403ee83a 	callr	r8
  8070ec:	10ffffd8 	cmpnei	r3,r2,-1
  8070f0:	18005826 	beq	r3,zero,807254 <__sflush_r+0x1d4>
  8070f4:	80c0030b 	ldhu	r3,12(r16)
  8070f8:	82000a17 	ldw	r8,40(r16)
  8070fc:	81400717 	ldw	r5,28(r16)
  807100:	18c0010c 	andi	r3,r3,4
  807104:	18000626 	beq	r3,zero,807120 <__sflush_r+0xa0>
  807108:	81000117 	ldw	r4,4(r16)
  80710c:	80c00c17 	ldw	r3,48(r16)
  807110:	1105c83a 	sub	r2,r2,r4
  807114:	18000226 	beq	r3,zero,807120 <__sflush_r+0xa0>
  807118:	80c00f17 	ldw	r3,60(r16)
  80711c:	10c5c83a 	sub	r2,r2,r3
  807120:	100d883a 	mov	r6,r2
  807124:	000f883a 	mov	r7,zero
  807128:	9809883a 	mov	r4,r19
  80712c:	403ee83a 	callr	r8
  807130:	10ffffd8 	cmpnei	r3,r2,-1
  807134:	18003d1e 	bne	r3,zero,80722c <__sflush_r+0x1ac>
  807138:	99000017 	ldw	r4,0(r19)
  80713c:	80c0030b 	ldhu	r3,12(r16)
  807140:	20004e26 	beq	r4,zero,80727c <__sflush_r+0x1fc>
  807144:	21400760 	cmpeqi	r5,r4,29
  807148:	2800021e 	bne	r5,zero,807154 <__sflush_r+0xd4>
  80714c:	210005a0 	cmpeqi	r4,r4,22
  807150:	20002c26 	beq	r4,zero,807204 <__sflush_r+0x184>
  807154:	80800417 	ldw	r2,16(r16)
  807158:	18fdffcc 	andi	r3,r3,63487
  80715c:	80c0030d 	sth	r3,12(r16)
  807160:	80000115 	stw	zero,4(r16)
  807164:	80800015 	stw	r2,0(r16)
  807168:	81400c17 	ldw	r5,48(r16)
  80716c:	9c400015 	stw	r17,0(r19)
  807170:	28000526 	beq	r5,zero,807188 <__sflush_r+0x108>
  807174:	80801004 	addi	r2,r16,64
  807178:	28800226 	beq	r5,r2,807184 <__sflush_r+0x104>
  80717c:	9809883a 	mov	r4,r19
  807180:	08078540 	call	807854 <_free_r>
  807184:	80000c15 	stw	zero,48(r16)
  807188:	0005883a 	mov	r2,zero
  80718c:	dfc00417 	ldw	ra,16(sp)
  807190:	dcc00317 	ldw	r19,12(sp)
  807194:	dc800217 	ldw	r18,8(sp)
  807198:	dc400117 	ldw	r17,4(sp)
  80719c:	dc000017 	ldw	r16,0(sp)
  8071a0:	dec00504 	addi	sp,sp,20
  8071a4:	f800283a 	ret
  8071a8:	2c800417 	ldw	r18,16(r5)
  8071ac:	903ff626 	beq	r18,zero,807188 <__sflush_r+0x108>
  8071b0:	2c400017 	ldw	r17,0(r5)
  8071b4:	108000cc 	andi	r2,r2,3
  8071b8:	2c800015 	stw	r18,0(r5)
  8071bc:	8ca3c83a 	sub	r17,r17,r18
  8071c0:	1000161e 	bne	r2,zero,80721c <__sflush_r+0x19c>
  8071c4:	28800517 	ldw	r2,20(r5)
  8071c8:	80800215 	stw	r2,8(r16)
  8071cc:	04400316 	blt	zero,r17,8071dc <__sflush_r+0x15c>
  8071d0:	003fed06 	br	807188 <__sflush_r+0x108>
  8071d4:	90a5883a 	add	r18,r18,r2
  8071d8:	047feb0e 	bge	zero,r17,807188 <__sflush_r+0x108>
  8071dc:	80800917 	ldw	r2,36(r16)
  8071e0:	81400717 	ldw	r5,28(r16)
  8071e4:	880f883a 	mov	r7,r17
  8071e8:	900d883a 	mov	r6,r18
  8071ec:	9809883a 	mov	r4,r19
  8071f0:	103ee83a 	callr	r2
  8071f4:	88a3c83a 	sub	r17,r17,r2
  8071f8:	00bff616 	blt	zero,r2,8071d4 <__sflush_r+0x154>
  8071fc:	80c0030b 	ldhu	r3,12(r16)
  807200:	00bfffc4 	movi	r2,-1
  807204:	18c01014 	ori	r3,r3,64
  807208:	80c0030d 	sth	r3,12(r16)
  80720c:	003fdf06 	br	80718c <__sflush_r+0x10c>
  807210:	28c00f17 	ldw	r3,60(r5)
  807214:	00ffa916 	blt	zero,r3,8070bc <__sflush_r+0x3c>
  807218:	003fdb06 	br	807188 <__sflush_r+0x108>
  80721c:	0005883a 	mov	r2,zero
  807220:	003fe906 	br	8071c8 <__sflush_r+0x148>
  807224:	80801417 	ldw	r2,80(r16)
  807228:	003fb506 	br	807100 <__sflush_r+0x80>
  80722c:	80c0030b 	ldhu	r3,12(r16)
  807230:	81000417 	ldw	r4,16(r16)
  807234:	80000115 	stw	zero,4(r16)
  807238:	197dffcc 	andi	r5,r3,63487
  80723c:	8140030d 	sth	r5,12(r16)
  807240:	81000015 	stw	r4,0(r16)
  807244:	18c4000c 	andi	r3,r3,4096
  807248:	183fc726 	beq	r3,zero,807168 <__sflush_r+0xe8>
  80724c:	80801415 	stw	r2,80(r16)
  807250:	003fc506 	br	807168 <__sflush_r+0xe8>
  807254:	98c00017 	ldw	r3,0(r19)
  807258:	183fa626 	beq	r3,zero,8070f4 <__sflush_r+0x74>
  80725c:	19000760 	cmpeqi	r4,r3,29
  807260:	20000e1e 	bne	r4,zero,80729c <__sflush_r+0x21c>
  807264:	18c00598 	cmpnei	r3,r3,22
  807268:	18000c26 	beq	r3,zero,80729c <__sflush_r+0x21c>
  80726c:	80c0030b 	ldhu	r3,12(r16)
  807270:	18c01014 	ori	r3,r3,64
  807274:	80c0030d 	sth	r3,12(r16)
  807278:	003fc406 	br	80718c <__sflush_r+0x10c>
  80727c:	81000417 	ldw	r4,16(r16)
  807280:	197dffcc 	andi	r5,r3,63487
  807284:	8140030d 	sth	r5,12(r16)
  807288:	80000115 	stw	zero,4(r16)
  80728c:	81000015 	stw	r4,0(r16)
  807290:	18c4000c 	andi	r3,r3,4096
  807294:	183fb426 	beq	r3,zero,807168 <__sflush_r+0xe8>
  807298:	003fec06 	br	80724c <__sflush_r+0x1cc>
  80729c:	9c400015 	stw	r17,0(r19)
  8072a0:	0005883a 	mov	r2,zero
  8072a4:	003fb906 	br	80718c <__sflush_r+0x10c>

008072a8 <_fflush_r>:
  8072a8:	defffd04 	addi	sp,sp,-12
  8072ac:	dc000115 	stw	r16,4(sp)
  8072b0:	dfc00215 	stw	ra,8(sp)
  8072b4:	2021883a 	mov	r16,r4
  8072b8:	20000226 	beq	r4,zero,8072c4 <_fflush_r+0x1c>
  8072bc:	20800e17 	ldw	r2,56(r4)
  8072c0:	10000726 	beq	r2,zero,8072e0 <_fflush_r+0x38>
  8072c4:	2880030f 	ldh	r2,12(r5)
  8072c8:	10000a1e 	bne	r2,zero,8072f4 <_fflush_r+0x4c>
  8072cc:	0005883a 	mov	r2,zero
  8072d0:	dfc00217 	ldw	ra,8(sp)
  8072d4:	dc000117 	ldw	r16,4(sp)
  8072d8:	dec00304 	addi	sp,sp,12
  8072dc:	f800283a 	ret
  8072e0:	d9400015 	stw	r5,0(sp)
  8072e4:	08076f00 	call	8076f0 <__sinit>
  8072e8:	d9400017 	ldw	r5,0(sp)
  8072ec:	2880030f 	ldh	r2,12(r5)
  8072f0:	103ff626 	beq	r2,zero,8072cc <_fflush_r+0x24>
  8072f4:	8009883a 	mov	r4,r16
  8072f8:	dfc00217 	ldw	ra,8(sp)
  8072fc:	dc000117 	ldw	r16,4(sp)
  807300:	dec00304 	addi	sp,sp,12
  807304:	08070801 	jmpi	807080 <__sflush_r>

00807308 <fflush>:
  807308:	20001726 	beq	r4,zero,807368 <fflush+0x60>
  80730c:	00802074 	movhi	r2,129
  807310:	200b883a 	mov	r5,r4
  807314:	11121217 	ldw	r4,18504(r2)
  807318:	20000226 	beq	r4,zero,807324 <fflush+0x1c>
  80731c:	20800e17 	ldw	r2,56(r4)
  807320:	10000526 	beq	r2,zero,807338 <fflush+0x30>
  807324:	2880030f 	ldh	r2,12(r5)
  807328:	1000021e 	bne	r2,zero,807334 <fflush+0x2c>
  80732c:	0005883a 	mov	r2,zero
  807330:	f800283a 	ret
  807334:	08070801 	jmpi	807080 <__sflush_r>
  807338:	defffd04 	addi	sp,sp,-12
  80733c:	d9400115 	stw	r5,4(sp)
  807340:	d9000015 	stw	r4,0(sp)
  807344:	dfc00215 	stw	ra,8(sp)
  807348:	08076f00 	call	8076f0 <__sinit>
  80734c:	d9400117 	ldw	r5,4(sp)
  807350:	d9000017 	ldw	r4,0(sp)
  807354:	2880030f 	ldh	r2,12(r5)
  807358:	10000826 	beq	r2,zero,80737c <fflush+0x74>
  80735c:	dfc00217 	ldw	ra,8(sp)
  807360:	dec00304 	addi	sp,sp,12
  807364:	08070801 	jmpi	807080 <__sflush_r>
  807368:	00802074 	movhi	r2,129
  80736c:	11121117 	ldw	r4,18500(r2)
  807370:	01402034 	movhi	r5,128
  807374:	295caa04 	addi	r5,r5,29352
  807378:	08080b01 	jmpi	8080b0 <_fwalk_reent>
  80737c:	0005883a 	mov	r2,zero
  807380:	dfc00217 	ldw	ra,8(sp)
  807384:	dec00304 	addi	sp,sp,12
  807388:	f800283a 	ret

0080738c <__fp_lock>:
  80738c:	0005883a 	mov	r2,zero
  807390:	f800283a 	ret

00807394 <_cleanup_r>:
  807394:	01402074 	movhi	r5,129
  807398:	2970da04 	addi	r5,r5,-15512
  80739c:	08080b01 	jmpi	8080b0 <_fwalk_reent>

008073a0 <__fp_unlock>:
  8073a0:	0005883a 	mov	r2,zero
  8073a4:	f800283a 	ret

008073a8 <__sinit.part.0>:
  8073a8:	00c02034 	movhi	r3,128
  8073ac:	20800117 	ldw	r2,4(r4)
  8073b0:	18dce504 	addi	r3,r3,29588
  8073b4:	20c00f15 	stw	r3,60(r4)
  8073b8:	2140bb04 	addi	r5,r4,748
  8073bc:	00c000c4 	movi	r3,3
  8073c0:	20c0b915 	stw	r3,740(r4)
  8073c4:	2140ba15 	stw	r5,744(r4)
  8073c8:	2000b815 	stw	zero,736(r4)
  8073cc:	10001705 	stb	zero,92(r2)
  8073d0:	10001745 	stb	zero,93(r2)
  8073d4:	10001785 	stb	zero,94(r2)
  8073d8:	100017c5 	stb	zero,95(r2)
  8073dc:	10001805 	stb	zero,96(r2)
  8073e0:	10001845 	stb	zero,97(r2)
  8073e4:	10001885 	stb	zero,98(r2)
  8073e8:	100018c5 	stb	zero,99(r2)
  8073ec:	00c00104 	movi	r3,4
  8073f0:	10c00315 	stw	r3,12(r2)
  8073f4:	02002074 	movhi	r8,129
  8073f8:	20c00217 	ldw	r3,8(r4)
  8073fc:	01c02074 	movhi	r7,129
  807400:	01802074 	movhi	r6,129
  807404:	01402074 	movhi	r5,129
  807408:	422a3904 	addi	r8,r8,-22300
  80740c:	39ea5004 	addi	r7,r7,-22208
  807410:	31aa7004 	addi	r6,r6,-22080
  807414:	296a8704 	addi	r5,r5,-21988
  807418:	02400074 	movhi	r9,1
  80741c:	10001915 	stw	zero,100(r2)
  807420:	10000015 	stw	zero,0(r2)
  807424:	10000115 	stw	zero,4(r2)
  807428:	10000215 	stw	zero,8(r2)
  80742c:	10000415 	stw	zero,16(r2)
  807430:	10000515 	stw	zero,20(r2)
  807434:	10000615 	stw	zero,24(r2)
  807438:	10800715 	stw	r2,28(r2)
  80743c:	12000815 	stw	r8,32(r2)
  807440:	11c00915 	stw	r7,36(r2)
  807444:	11800a15 	stw	r6,40(r2)
  807448:	11400b15 	stw	r5,44(r2)
  80744c:	4a400284 	addi	r9,r9,10
  807450:	1a400315 	stw	r9,12(r3)
  807454:	18001915 	stw	zero,100(r3)
  807458:	18000015 	stw	zero,0(r3)
  80745c:	18000115 	stw	zero,4(r3)
  807460:	18000215 	stw	zero,8(r3)
  807464:	18000415 	stw	zero,16(r3)
  807468:	18001705 	stb	zero,92(r3)
  80746c:	18001745 	stb	zero,93(r3)
  807470:	18001785 	stb	zero,94(r3)
  807474:	180017c5 	stb	zero,95(r3)
  807478:	18001805 	stb	zero,96(r3)
  80747c:	18001845 	stb	zero,97(r3)
  807480:	18001885 	stb	zero,98(r3)
  807484:	180018c5 	stb	zero,99(r3)
  807488:	20800317 	ldw	r2,12(r4)
  80748c:	024000b4 	movhi	r9,2
  807490:	18000515 	stw	zero,20(r3)
  807494:	18000615 	stw	zero,24(r3)
  807498:	18c00715 	stw	r3,28(r3)
  80749c:	1a000815 	stw	r8,32(r3)
  8074a0:	19c00915 	stw	r7,36(r3)
  8074a4:	19800a15 	stw	r6,40(r3)
  8074a8:	19400b15 	stw	r5,44(r3)
  8074ac:	4a400484 	addi	r9,r9,18
  8074b0:	10001915 	stw	zero,100(r2)
  8074b4:	10000015 	stw	zero,0(r2)
  8074b8:	10000115 	stw	zero,4(r2)
  8074bc:	10000215 	stw	zero,8(r2)
  8074c0:	12400315 	stw	r9,12(r2)
  8074c4:	10000415 	stw	zero,16(r2)
  8074c8:	10000515 	stw	zero,20(r2)
  8074cc:	10000615 	stw	zero,24(r2)
  8074d0:	10001705 	stb	zero,92(r2)
  8074d4:	10001745 	stb	zero,93(r2)
  8074d8:	10001785 	stb	zero,94(r2)
  8074dc:	100017c5 	stb	zero,95(r2)
  8074e0:	10001805 	stb	zero,96(r2)
  8074e4:	10001845 	stb	zero,97(r2)
  8074e8:	10001885 	stb	zero,98(r2)
  8074ec:	100018c5 	stb	zero,99(r2)
  8074f0:	10800715 	stw	r2,28(r2)
  8074f4:	12000815 	stw	r8,32(r2)
  8074f8:	11c00915 	stw	r7,36(r2)
  8074fc:	11800a15 	stw	r6,40(r2)
  807500:	11400b15 	stw	r5,44(r2)
  807504:	00800044 	movi	r2,1
  807508:	20800e15 	stw	r2,56(r4)
  80750c:	f800283a 	ret

00807510 <__sfmoreglue>:
  807510:	defffc04 	addi	sp,sp,-16
  807514:	dc800215 	stw	r18,8(sp)
  807518:	2825883a 	mov	r18,r5
  80751c:	dc000015 	stw	r16,0(sp)
  807520:	01401a04 	movi	r5,104
  807524:	2021883a 	mov	r16,r4
  807528:	913fffc4 	addi	r4,r18,-1
  80752c:	dfc00315 	stw	ra,12(sp)
  807530:	dc400115 	stw	r17,4(sp)
  807534:	08031b00 	call	8031b0 <__mulsi3>
  807538:	8009883a 	mov	r4,r16
  80753c:	11401d04 	addi	r5,r2,116
  807540:	1023883a 	mov	r17,r2
  807544:	08083c00 	call	8083c0 <_malloc_r>
  807548:	1021883a 	mov	r16,r2
  80754c:	10000726 	beq	r2,zero,80756c <__sfmoreglue+0x5c>
  807550:	11000304 	addi	r4,r2,12
  807554:	10000015 	stw	zero,0(r2)
  807558:	14800115 	stw	r18,4(r2)
  80755c:	11000215 	stw	r4,8(r2)
  807560:	89801a04 	addi	r6,r17,104
  807564:	000b883a 	mov	r5,zero
  807568:	0808e9c0 	call	808e9c <memset>
  80756c:	8005883a 	mov	r2,r16
  807570:	dfc00317 	ldw	ra,12(sp)
  807574:	dc800217 	ldw	r18,8(sp)
  807578:	dc400117 	ldw	r17,4(sp)
  80757c:	dc000017 	ldw	r16,0(sp)
  807580:	dec00404 	addi	sp,sp,16
  807584:	f800283a 	ret

00807588 <__sfp>:
  807588:	defffb04 	addi	sp,sp,-20
  80758c:	00802074 	movhi	r2,129
  807590:	dc000015 	stw	r16,0(sp)
  807594:	14121117 	ldw	r16,18500(r2)
  807598:	dc400115 	stw	r17,4(sp)
  80759c:	dfc00415 	stw	ra,16(sp)
  8075a0:	80800e17 	ldw	r2,56(r16)
  8075a4:	dcc00315 	stw	r19,12(sp)
  8075a8:	dc800215 	stw	r18,8(sp)
  8075ac:	2023883a 	mov	r17,r4
  8075b0:	10003126 	beq	r2,zero,807678 <__sfp+0xf0>
  8075b4:	8100ba17 	ldw	r4,744(r16)
  8075b8:	8140b917 	ldw	r5,740(r16)
  8075bc:	04c00104 	movi	r19,4
  8075c0:	8400b804 	addi	r16,r16,736
  8075c4:	297fffc4 	addi	r5,r5,-1
  8075c8:	2800050e 	bge	r5,zero,8075e0 <__sfp+0x58>
  8075cc:	00002406 	br	807660 <__sfp+0xd8>
  8075d0:	297fffc4 	addi	r5,r5,-1
  8075d4:	28bfffd8 	cmpnei	r2,r5,-1
  8075d8:	21001a04 	addi	r4,r4,104
  8075dc:	10002026 	beq	r2,zero,807660 <__sfp+0xd8>
  8075e0:	2080030f 	ldh	r2,12(r4)
  8075e4:	103ffa1e 	bne	r2,zero,8075d0 <__sfp+0x48>
  8075e8:	00bffff4 	movhi	r2,65535
  8075ec:	10800044 	addi	r2,r2,1
  8075f0:	20001915 	stw	zero,100(r4)
  8075f4:	20000015 	stw	zero,0(r4)
  8075f8:	20000115 	stw	zero,4(r4)
  8075fc:	20000215 	stw	zero,8(r4)
  807600:	20800315 	stw	r2,12(r4)
  807604:	20000415 	stw	zero,16(r4)
  807608:	20000515 	stw	zero,20(r4)
  80760c:	20000615 	stw	zero,24(r4)
  807610:	20001705 	stb	zero,92(r4)
  807614:	20001745 	stb	zero,93(r4)
  807618:	20001785 	stb	zero,94(r4)
  80761c:	200017c5 	stb	zero,95(r4)
  807620:	20001805 	stb	zero,96(r4)
  807624:	20001845 	stb	zero,97(r4)
  807628:	20001885 	stb	zero,98(r4)
  80762c:	200018c5 	stb	zero,99(r4)
  807630:	20000c15 	stw	zero,48(r4)
  807634:	20000d15 	stw	zero,52(r4)
  807638:	20001115 	stw	zero,68(r4)
  80763c:	20001215 	stw	zero,72(r4)
  807640:	2005883a 	mov	r2,r4
  807644:	dfc00417 	ldw	ra,16(sp)
  807648:	dcc00317 	ldw	r19,12(sp)
  80764c:	dc800217 	ldw	r18,8(sp)
  807650:	dc400117 	ldw	r17,4(sp)
  807654:	dc000017 	ldw	r16,0(sp)
  807658:	dec00504 	addi	sp,sp,20
  80765c:	f800283a 	ret
  807660:	80800017 	ldw	r2,0(r16)
  807664:	10000726 	beq	r2,zero,807684 <__sfp+0xfc>
  807668:	11000217 	ldw	r4,8(r2)
  80766c:	11400117 	ldw	r5,4(r2)
  807670:	1021883a 	mov	r16,r2
  807674:	003fd306 	br	8075c4 <__sfp+0x3c>
  807678:	8009883a 	mov	r4,r16
  80767c:	08073a80 	call	8073a8 <__sinit.part.0>
  807680:	003fcc06 	br	8075b4 <__sfp+0x2c>
  807684:	01406b04 	movi	r5,428
  807688:	8809883a 	mov	r4,r17
  80768c:	08083c00 	call	8083c0 <_malloc_r>
  807690:	1025883a 	mov	r18,r2
  807694:	10000c26 	beq	r2,zero,8076c8 <__sfp+0x140>
  807698:	11000304 	addi	r4,r2,12
  80769c:	11000215 	stw	r4,8(r2)
  8076a0:	000b883a 	mov	r5,zero
  8076a4:	10000015 	stw	zero,0(r2)
  8076a8:	14c00115 	stw	r19,4(r2)
  8076ac:	01806804 	movi	r6,416
  8076b0:	0808e9c0 	call	808e9c <memset>
  8076b4:	1009883a 	mov	r4,r2
  8076b8:	84800015 	stw	r18,0(r16)
  8076bc:	014000c4 	movi	r5,3
  8076c0:	9021883a 	mov	r16,r18
  8076c4:	003fc606 	br	8075e0 <__sfp+0x58>
  8076c8:	80000015 	stw	zero,0(r16)
  8076cc:	00800304 	movi	r2,12
  8076d0:	88800015 	stw	r2,0(r17)
  8076d4:	0009883a 	mov	r4,zero
  8076d8:	003fd906 	br	807640 <__sfp+0xb8>

008076dc <_cleanup>:
  8076dc:	00802074 	movhi	r2,129
  8076e0:	11121117 	ldw	r4,18500(r2)
  8076e4:	01402074 	movhi	r5,129
  8076e8:	2970da04 	addi	r5,r5,-15512
  8076ec:	08080b01 	jmpi	8080b0 <_fwalk_reent>

008076f0 <__sinit>:
  8076f0:	20800e17 	ldw	r2,56(r4)
  8076f4:	10000126 	beq	r2,zero,8076fc <__sinit+0xc>
  8076f8:	f800283a 	ret
  8076fc:	08073a81 	jmpi	8073a8 <__sinit.part.0>

00807700 <__sfp_lock_acquire>:
  807700:	f800283a 	ret

00807704 <__sfp_lock_release>:
  807704:	f800283a 	ret

00807708 <__sinit_lock_acquire>:
  807708:	f800283a 	ret

0080770c <__sinit_lock_release>:
  80770c:	f800283a 	ret

00807710 <__fp_lock_all>:
  807710:	00802074 	movhi	r2,129
  807714:	11121217 	ldw	r4,18504(r2)
  807718:	01402034 	movhi	r5,128
  80771c:	295ce304 	addi	r5,r5,29580
  807720:	08080181 	jmpi	808018 <_fwalk>

00807724 <__fp_unlock_all>:
  807724:	00802074 	movhi	r2,129
  807728:	11121217 	ldw	r4,18504(r2)
  80772c:	01402034 	movhi	r5,128
  807730:	295ce804 	addi	r5,r5,29600
  807734:	08080181 	jmpi	808018 <_fwalk>

00807738 <_malloc_trim_r>:
  807738:	defffb04 	addi	sp,sp,-20
  80773c:	dcc00315 	stw	r19,12(sp)
  807740:	04c02074 	movhi	r19,129
  807744:	dc800215 	stw	r18,8(sp)
  807748:	dc400115 	stw	r17,4(sp)
  80774c:	dc000015 	stw	r16,0(sp)
  807750:	dfc00415 	stw	ra,16(sp)
  807754:	2821883a 	mov	r16,r5
  807758:	9ccbfb04 	addi	r19,r19,12268
  80775c:	2025883a 	mov	r18,r4
  807760:	080f1f80 	call	80f1f8 <__malloc_lock>
  807764:	98800217 	ldw	r2,8(r19)
  807768:	14400117 	ldw	r17,4(r2)
  80776c:	00bfff04 	movi	r2,-4
  807770:	88a2703a 	and	r17,r17,r2
  807774:	8c21c83a 	sub	r16,r17,r16
  807778:	8403fbc4 	addi	r16,r16,4079
  80777c:	8020d33a 	srli	r16,r16,12
  807780:	843fffc4 	addi	r16,r16,-1
  807784:	8020933a 	slli	r16,r16,12
  807788:	80840008 	cmpgei	r2,r16,4096
  80778c:	10000626 	beq	r2,zero,8077a8 <_malloc_trim_r+0x70>
  807790:	000b883a 	mov	r5,zero
  807794:	9009883a 	mov	r4,r18
  807798:	080a88c0 	call	80a88c <_sbrk_r>
  80779c:	98c00217 	ldw	r3,8(r19)
  8077a0:	1c47883a 	add	r3,r3,r17
  8077a4:	10c00a26 	beq	r2,r3,8077d0 <_malloc_trim_r+0x98>
  8077a8:	9009883a 	mov	r4,r18
  8077ac:	080f21c0 	call	80f21c <__malloc_unlock>
  8077b0:	0005883a 	mov	r2,zero
  8077b4:	dfc00417 	ldw	ra,16(sp)
  8077b8:	dcc00317 	ldw	r19,12(sp)
  8077bc:	dc800217 	ldw	r18,8(sp)
  8077c0:	dc400117 	ldw	r17,4(sp)
  8077c4:	dc000017 	ldw	r16,0(sp)
  8077c8:	dec00504 	addi	sp,sp,20
  8077cc:	f800283a 	ret
  8077d0:	040bc83a 	sub	r5,zero,r16
  8077d4:	9009883a 	mov	r4,r18
  8077d8:	080a88c0 	call	80a88c <_sbrk_r>
  8077dc:	10bfffd8 	cmpnei	r2,r2,-1
  8077e0:	10000d26 	beq	r2,zero,807818 <_malloc_trim_r+0xe0>
  8077e4:	00802074 	movhi	r2,129
  8077e8:	10996217 	ldw	r2,25992(r2)
  8077ec:	98c00217 	ldw	r3,8(r19)
  8077f0:	8c23c83a 	sub	r17,r17,r16
  8077f4:	8c400054 	ori	r17,r17,1
  8077f8:	1421c83a 	sub	r16,r2,r16
  8077fc:	1c400115 	stw	r17,4(r3)
  807800:	00802074 	movhi	r2,129
  807804:	9009883a 	mov	r4,r18
  807808:	14196215 	stw	r16,25992(r2)
  80780c:	080f21c0 	call	80f21c <__malloc_unlock>
  807810:	00800044 	movi	r2,1
  807814:	003fe706 	br	8077b4 <_malloc_trim_r+0x7c>
  807818:	000b883a 	mov	r5,zero
  80781c:	9009883a 	mov	r4,r18
  807820:	080a88c0 	call	80a88c <_sbrk_r>
  807824:	99000217 	ldw	r4,8(r19)
  807828:	1107c83a 	sub	r3,r2,r4
  80782c:	19400410 	cmplti	r5,r3,16
  807830:	283fdd1e 	bne	r5,zero,8077a8 <_malloc_trim_r+0x70>
  807834:	01402074 	movhi	r5,129
  807838:	29521317 	ldw	r5,18508(r5)
  80783c:	18c00054 	ori	r3,r3,1
  807840:	20c00115 	stw	r3,4(r4)
  807844:	1145c83a 	sub	r2,r2,r5
  807848:	01402074 	movhi	r5,129
  80784c:	28996215 	stw	r2,25992(r5)
  807850:	003fd506 	br	8077a8 <_malloc_trim_r+0x70>

00807854 <_free_r>:
  807854:	28004f26 	beq	r5,zero,807994 <_free_r+0x140>
  807858:	defffd04 	addi	sp,sp,-12
  80785c:	dc400115 	stw	r17,4(sp)
  807860:	dc000015 	stw	r16,0(sp)
  807864:	2023883a 	mov	r17,r4
  807868:	2821883a 	mov	r16,r5
  80786c:	dfc00215 	stw	ra,8(sp)
  807870:	080f1f80 	call	80f1f8 <__malloc_lock>
  807874:	81ffff17 	ldw	r7,-4(r16)
  807878:	00bfff84 	movi	r2,-2
  80787c:	80fffe04 	addi	r3,r16,-8
  807880:	3884703a 	and	r2,r7,r2
  807884:	01002074 	movhi	r4,129
  807888:	188d883a 	add	r6,r3,r2
  80788c:	210bfb04 	addi	r4,r4,12268
  807890:	31400117 	ldw	r5,4(r6)
  807894:	22000217 	ldw	r8,8(r4)
  807898:	027fff04 	movi	r9,-4
  80789c:	2a4a703a 	and	r5,r5,r9
  8078a0:	41806426 	beq	r8,r6,807a34 <_free_r+0x1e0>
  8078a4:	31400115 	stw	r5,4(r6)
  8078a8:	39c0004c 	andi	r7,r7,1
  8078ac:	3151883a 	add	r8,r6,r5
  8078b0:	3800281e 	bne	r7,zero,807954 <_free_r+0x100>
  8078b4:	82bffe17 	ldw	r10,-8(r16)
  8078b8:	42000117 	ldw	r8,4(r8)
  8078bc:	01c02074 	movhi	r7,129
  8078c0:	1a87c83a 	sub	r3,r3,r10
  8078c4:	1a400217 	ldw	r9,8(r3)
  8078c8:	39cbfd04 	addi	r7,r7,12276
  8078cc:	1285883a 	add	r2,r2,r10
  8078d0:	4200004c 	andi	r8,r8,1
  8078d4:	49c04c26 	beq	r9,r7,807a08 <_free_r+0x1b4>
  8078d8:	1a800317 	ldw	r10,12(r3)
  8078dc:	4a800315 	stw	r10,12(r9)
  8078e0:	52400215 	stw	r9,8(r10)
  8078e4:	40007126 	beq	r8,zero,807aac <_free_r+0x258>
  8078e8:	11400054 	ori	r5,r2,1
  8078ec:	19400115 	stw	r5,4(r3)
  8078f0:	30800015 	stw	r2,0(r6)
  8078f4:	11408028 	cmpgeui	r5,r2,512
  8078f8:	28002c1e 	bne	r5,zero,8079ac <_free_r+0x158>
  8078fc:	100ad0fa 	srli	r5,r2,3
  807900:	100cd17a 	srli	r6,r2,5
  807904:	00800044 	movi	r2,1
  807908:	29400044 	addi	r5,r5,1
  80790c:	280a90fa 	slli	r5,r5,3
  807910:	21c00117 	ldw	r7,4(r4)
  807914:	1184983a 	sll	r2,r2,r6
  807918:	214b883a 	add	r5,r4,r5
  80791c:	29800017 	ldw	r6,0(r5)
  807920:	11c4b03a 	or	r2,r2,r7
  807924:	29fffe04 	addi	r7,r5,-8
  807928:	19c00315 	stw	r7,12(r3)
  80792c:	19800215 	stw	r6,8(r3)
  807930:	20800115 	stw	r2,4(r4)
  807934:	28c00015 	stw	r3,0(r5)
  807938:	30c00315 	stw	r3,12(r6)
  80793c:	8809883a 	mov	r4,r17
  807940:	dfc00217 	ldw	ra,8(sp)
  807944:	dc400117 	ldw	r17,4(sp)
  807948:	dc000017 	ldw	r16,0(sp)
  80794c:	dec00304 	addi	sp,sp,12
  807950:	080f21c1 	jmpi	80f21c <__malloc_unlock>
  807954:	41c00117 	ldw	r7,4(r8)
  807958:	39c0004c 	andi	r7,r7,1
  80795c:	38000e1e 	bne	r7,zero,807998 <_free_r+0x144>
  807960:	01c02074 	movhi	r7,129
  807964:	1145883a 	add	r2,r2,r5
  807968:	39cbfd04 	addi	r7,r7,12276
  80796c:	31400217 	ldw	r5,8(r6)
  807970:	12400054 	ori	r9,r2,1
  807974:	1891883a 	add	r8,r3,r2
  807978:	29c05226 	beq	r5,r7,807ac4 <_free_r+0x270>
  80797c:	31800317 	ldw	r6,12(r6)
  807980:	29800315 	stw	r6,12(r5)
  807984:	31400215 	stw	r5,8(r6)
  807988:	1a400115 	stw	r9,4(r3)
  80798c:	40800015 	stw	r2,0(r8)
  807990:	003fd806 	br	8078f4 <_free_r+0xa0>
  807994:	f800283a 	ret
  807998:	11400054 	ori	r5,r2,1
  80799c:	817fff15 	stw	r5,-4(r16)
  8079a0:	30800015 	stw	r2,0(r6)
  8079a4:	11408028 	cmpgeui	r5,r2,512
  8079a8:	283fd426 	beq	r5,zero,8078fc <_free_r+0xa8>
  8079ac:	100ad27a 	srli	r5,r2,9
  8079b0:	29800168 	cmpgeui	r6,r5,5
  8079b4:	3000341e 	bne	r6,zero,807a88 <_free_r+0x234>
  8079b8:	100ad1ba 	srli	r5,r2,6
  8079bc:	29800e44 	addi	r6,r5,57
  8079c0:	300c90fa 	slli	r6,r6,3
  8079c4:	29c00e04 	addi	r7,r5,56
  8079c8:	218d883a 	add	r6,r4,r6
  8079cc:	31400017 	ldw	r5,0(r6)
  8079d0:	31bffe04 	addi	r6,r6,-8
  8079d4:	31404226 	beq	r6,r5,807ae0 <_free_r+0x28c>
  8079d8:	01ffff04 	movi	r7,-4
  8079dc:	29000117 	ldw	r4,4(r5)
  8079e0:	21c8703a 	and	r4,r4,r7
  8079e4:	1100022e 	bgeu	r2,r4,8079f0 <_free_r+0x19c>
  8079e8:	29400217 	ldw	r5,8(r5)
  8079ec:	317ffb1e 	bne	r6,r5,8079dc <_free_r+0x188>
  8079f0:	29800317 	ldw	r6,12(r5)
  8079f4:	19800315 	stw	r6,12(r3)
  8079f8:	19400215 	stw	r5,8(r3)
  8079fc:	30c00215 	stw	r3,8(r6)
  807a00:	28c00315 	stw	r3,12(r5)
  807a04:	003fcd06 	br	80793c <_free_r+0xe8>
  807a08:	40004d1e 	bne	r8,zero,807b40 <_free_r+0x2ec>
  807a0c:	31000317 	ldw	r4,12(r6)
  807a10:	31800217 	ldw	r6,8(r6)
  807a14:	2885883a 	add	r2,r5,r2
  807a18:	11400054 	ori	r5,r2,1
  807a1c:	31000315 	stw	r4,12(r6)
  807a20:	21800215 	stw	r6,8(r4)
  807a24:	19400115 	stw	r5,4(r3)
  807a28:	1887883a 	add	r3,r3,r2
  807a2c:	18800015 	stw	r2,0(r3)
  807a30:	003fc206 	br	80793c <_free_r+0xe8>
  807a34:	39c0004c 	andi	r7,r7,1
  807a38:	1145883a 	add	r2,r2,r5
  807a3c:	3800071e 	bne	r7,zero,807a5c <_free_r+0x208>
  807a40:	81fffe17 	ldw	r7,-8(r16)
  807a44:	19c7c83a 	sub	r3,r3,r7
  807a48:	19400317 	ldw	r5,12(r3)
  807a4c:	19800217 	ldw	r6,8(r3)
  807a50:	11c5883a 	add	r2,r2,r7
  807a54:	31400315 	stw	r5,12(r6)
  807a58:	29800215 	stw	r6,8(r5)
  807a5c:	01402074 	movhi	r5,129
  807a60:	11800054 	ori	r6,r2,1
  807a64:	29521417 	ldw	r5,18512(r5)
  807a68:	19800115 	stw	r6,4(r3)
  807a6c:	20c00215 	stw	r3,8(r4)
  807a70:	117fb236 	bltu	r2,r5,80793c <_free_r+0xe8>
  807a74:	00802074 	movhi	r2,129
  807a78:	11595617 	ldw	r5,25944(r2)
  807a7c:	8809883a 	mov	r4,r17
  807a80:	08077380 	call	807738 <_malloc_trim_r>
  807a84:	003fad06 	br	80793c <_free_r+0xe8>
  807a88:	29800568 	cmpgeui	r6,r5,21
  807a8c:	30000926 	beq	r6,zero,807ab4 <_free_r+0x260>
  807a90:	29801568 	cmpgeui	r6,r5,85
  807a94:	3000191e 	bne	r6,zero,807afc <_free_r+0x2a8>
  807a98:	100ad33a 	srli	r5,r2,12
  807a9c:	29801bc4 	addi	r6,r5,111
  807aa0:	300c90fa 	slli	r6,r6,3
  807aa4:	29c01b84 	addi	r7,r5,110
  807aa8:	003fc706 	br	8079c8 <_free_r+0x174>
  807aac:	1145883a 	add	r2,r2,r5
  807ab0:	003fae06 	br	80796c <_free_r+0x118>
  807ab4:	29801704 	addi	r6,r5,92
  807ab8:	300c90fa 	slli	r6,r6,3
  807abc:	29c016c4 	addi	r7,r5,91
  807ac0:	003fc106 	br	8079c8 <_free_r+0x174>
  807ac4:	20c00515 	stw	r3,20(r4)
  807ac8:	20c00415 	stw	r3,16(r4)
  807acc:	19c00315 	stw	r7,12(r3)
  807ad0:	19c00215 	stw	r7,8(r3)
  807ad4:	1a400115 	stw	r9,4(r3)
  807ad8:	40800015 	stw	r2,0(r8)
  807adc:	003f9706 	br	80793c <_free_r+0xe8>
  807ae0:	380fd0ba 	srai	r7,r7,2
  807ae4:	00800044 	movi	r2,1
  807ae8:	22000117 	ldw	r8,4(r4)
  807aec:	11ce983a 	sll	r7,r2,r7
  807af0:	3a0eb03a 	or	r7,r7,r8
  807af4:	21c00115 	stw	r7,4(r4)
  807af8:	003fbe06 	br	8079f4 <_free_r+0x1a0>
  807afc:	29805568 	cmpgeui	r6,r5,341
  807b00:	3000051e 	bne	r6,zero,807b18 <_free_r+0x2c4>
  807b04:	100ad3fa 	srli	r5,r2,15
  807b08:	29801e04 	addi	r6,r5,120
  807b0c:	300c90fa 	slli	r6,r6,3
  807b10:	29c01dc4 	addi	r7,r5,119
  807b14:	003fac06 	br	8079c8 <_free_r+0x174>
  807b18:	29415568 	cmpgeui	r5,r5,1365
  807b1c:	2800051e 	bne	r5,zero,807b34 <_free_r+0x2e0>
  807b20:	100ad4ba 	srli	r5,r2,18
  807b24:	29801f44 	addi	r6,r5,125
  807b28:	300c90fa 	slli	r6,r6,3
  807b2c:	29c01f04 	addi	r7,r5,124
  807b30:	003fa506 	br	8079c8 <_free_r+0x174>
  807b34:	0180fe04 	movi	r6,1016
  807b38:	01c01f84 	movi	r7,126
  807b3c:	003fa206 	br	8079c8 <_free_r+0x174>
  807b40:	11000054 	ori	r4,r2,1
  807b44:	19000115 	stw	r4,4(r3)
  807b48:	30800015 	stw	r2,0(r6)
  807b4c:	003f7b06 	br	80793c <_free_r+0xe8>

00807b50 <__sfvwrite_r>:
  807b50:	30800217 	ldw	r2,8(r6)
  807b54:	1000a326 	beq	r2,zero,807de4 <__sfvwrite_r+0x294>
  807b58:	29c0030b 	ldhu	r7,12(r5)
  807b5c:	defff404 	addi	sp,sp,-48
  807b60:	ddc00915 	stw	r23,36(sp)
  807b64:	dd400715 	stw	r21,28(sp)
  807b68:	dc000215 	stw	r16,8(sp)
  807b6c:	dfc00b15 	stw	ra,44(sp)
  807b70:	df000a15 	stw	fp,40(sp)
  807b74:	dd800815 	stw	r22,32(sp)
  807b78:	dd000615 	stw	r20,24(sp)
  807b7c:	dcc00515 	stw	r19,20(sp)
  807b80:	dc800415 	stw	r18,16(sp)
  807b84:	dc400315 	stw	r17,12(sp)
  807b88:	3880020c 	andi	r2,r7,8
  807b8c:	302f883a 	mov	r23,r6
  807b90:	202b883a 	mov	r21,r4
  807b94:	2821883a 	mov	r16,r5
  807b98:	10002226 	beq	r2,zero,807c24 <__sfvwrite_r+0xd4>
  807b9c:	28800417 	ldw	r2,16(r5)
  807ba0:	10002026 	beq	r2,zero,807c24 <__sfvwrite_r+0xd4>
  807ba4:	3880008c 	andi	r2,r7,2
  807ba8:	bc400017 	ldw	r17,0(r23)
  807bac:	10002526 	beq	r2,zero,807c44 <__sfvwrite_r+0xf4>
  807bb0:	80800917 	ldw	r2,36(r16)
  807bb4:	81400717 	ldw	r5,28(r16)
  807bb8:	05200034 	movhi	r20,32768
  807bbc:	0027883a 	mov	r19,zero
  807bc0:	0025883a 	mov	r18,zero
  807bc4:	a53f0004 	addi	r20,r20,-1024
  807bc8:	980d883a 	mov	r6,r19
  807bcc:	a809883a 	mov	r4,r21
  807bd0:	90001026 	beq	r18,zero,807c14 <__sfvwrite_r+0xc4>
  807bd4:	900f883a 	mov	r7,r18
  807bd8:	a480012e 	bgeu	r20,r18,807be0 <__sfvwrite_r+0x90>
  807bdc:	a00f883a 	mov	r7,r20
  807be0:	103ee83a 	callr	r2
  807be4:	00807a0e 	bge	zero,r2,807dd0 <__sfvwrite_r+0x280>
  807be8:	b9000217 	ldw	r4,8(r23)
  807bec:	98a7883a 	add	r19,r19,r2
  807bf0:	90a5c83a 	sub	r18,r18,r2
  807bf4:	2085c83a 	sub	r2,r4,r2
  807bf8:	b8800215 	stw	r2,8(r23)
  807bfc:	10006326 	beq	r2,zero,807d8c <__sfvwrite_r+0x23c>
  807c00:	80800917 	ldw	r2,36(r16)
  807c04:	81400717 	ldw	r5,28(r16)
  807c08:	980d883a 	mov	r6,r19
  807c0c:	a809883a 	mov	r4,r21
  807c10:	903ff01e 	bne	r18,zero,807bd4 <__sfvwrite_r+0x84>
  807c14:	8cc00017 	ldw	r19,0(r17)
  807c18:	8c800117 	ldw	r18,4(r17)
  807c1c:	8c400204 	addi	r17,r17,8
  807c20:	003fe906 	br	807bc8 <__sfvwrite_r+0x78>
  807c24:	800b883a 	mov	r5,r16
  807c28:	a809883a 	mov	r4,r21
  807c2c:	08055b40 	call	8055b4 <__swsetup_r>
  807c30:	1000f71e 	bne	r2,zero,808010 <__sfvwrite_r+0x4c0>
  807c34:	81c0030b 	ldhu	r7,12(r16)
  807c38:	bc400017 	ldw	r17,0(r23)
  807c3c:	3880008c 	andi	r2,r7,2
  807c40:	103fdb1e 	bne	r2,zero,807bb0 <__sfvwrite_r+0x60>
  807c44:	3880004c 	andi	r2,r7,1
  807c48:	84800217 	ldw	r18,8(r16)
  807c4c:	82000017 	ldw	r8,0(r16)
  807c50:	1000661e 	bne	r2,zero,807dec <__sfvwrite_r+0x29c>
  807c54:	00a00034 	movhi	r2,32768
  807c58:	10bfff84 	addi	r2,r2,-2
  807c5c:	00e00034 	movhi	r3,32768
  807c60:	d8800015 	stw	r2,0(sp)
  807c64:	18bfffc4 	addi	r2,r3,-1
  807c68:	0039883a 	mov	fp,zero
  807c6c:	0027883a 	mov	r19,zero
  807c70:	d8800115 	stw	r2,4(sp)
  807c74:	98004126 	beq	r19,zero,807d7c <__sfvwrite_r+0x22c>
  807c78:	3880800c 	andi	r2,r7,512
  807c7c:	10009726 	beq	r2,zero,807edc <__sfvwrite_r+0x38c>
  807c80:	902d883a 	mov	r22,r18
  807c84:	9c80be36 	bltu	r19,r18,807f80 <__sfvwrite_r+0x430>
  807c88:	3881200c 	andi	r2,r7,1152
  807c8c:	10002626 	beq	r2,zero,807d28 <__sfvwrite_r+0x1d8>
  807c90:	81800517 	ldw	r6,20(r16)
  807c94:	81400417 	ldw	r5,16(r16)
  807c98:	98800044 	addi	r2,r19,1
  807c9c:	3189883a 	add	r4,r6,r6
  807ca0:	2189883a 	add	r4,r4,r6
  807ca4:	2028d7fa 	srli	r20,r4,31
  807ca8:	4165c83a 	sub	r18,r8,r5
  807cac:	1485883a 	add	r2,r2,r18
  807cb0:	a109883a 	add	r4,r20,r4
  807cb4:	2029d07a 	srai	r20,r4,1
  807cb8:	a00d883a 	mov	r6,r20
  807cbc:	a080022e 	bgeu	r20,r2,807cc8 <__sfvwrite_r+0x178>
  807cc0:	1029883a 	mov	r20,r2
  807cc4:	100d883a 	mov	r6,r2
  807cc8:	39c1000c 	andi	r7,r7,1024
  807ccc:	3800c026 	beq	r7,zero,807fd0 <__sfvwrite_r+0x480>
  807cd0:	a809883a 	mov	r4,r21
  807cd4:	300b883a 	mov	r5,r6
  807cd8:	08083c00 	call	8083c0 <_malloc_r>
  807cdc:	1009883a 	mov	r4,r2
  807ce0:	1000c726 	beq	r2,zero,808000 <__sfvwrite_r+0x4b0>
  807ce4:	81400417 	ldw	r5,16(r16)
  807ce8:	900d883a 	mov	r6,r18
  807cec:	0808c700 	call	808c70 <memcpy>
  807cf0:	1009883a 	mov	r4,r2
  807cf4:	8080030b 	ldhu	r2,12(r16)
  807cf8:	00fedfc4 	movi	r3,-1153
  807cfc:	10c4703a 	and	r2,r2,r3
  807d00:	10802014 	ori	r2,r2,128
  807d04:	8080030d 	sth	r2,12(r16)
  807d08:	2491883a 	add	r8,r4,r18
  807d0c:	a485c83a 	sub	r2,r20,r18
  807d10:	81000415 	stw	r4,16(r16)
  807d14:	82000015 	stw	r8,0(r16)
  807d18:	85000515 	stw	r20,20(r16)
  807d1c:	9825883a 	mov	r18,r19
  807d20:	80800215 	stw	r2,8(r16)
  807d24:	982d883a 	mov	r22,r19
  807d28:	4009883a 	mov	r4,r8
  807d2c:	b00d883a 	mov	r6,r22
  807d30:	e00b883a 	mov	r5,fp
  807d34:	0808d700 	call	808d70 <memmove>
  807d38:	81000217 	ldw	r4,8(r16)
  807d3c:	80800017 	ldw	r2,0(r16)
  807d40:	9829883a 	mov	r20,r19
  807d44:	24a5c83a 	sub	r18,r4,r18
  807d48:	1585883a 	add	r2,r2,r22
  807d4c:	84800215 	stw	r18,8(r16)
  807d50:	80800015 	stw	r2,0(r16)
  807d54:	0027883a 	mov	r19,zero
  807d58:	b8800217 	ldw	r2,8(r23)
  807d5c:	e539883a 	add	fp,fp,r20
  807d60:	1529c83a 	sub	r20,r2,r20
  807d64:	bd000215 	stw	r20,8(r23)
  807d68:	a0000826 	beq	r20,zero,807d8c <__sfvwrite_r+0x23c>
  807d6c:	81c0030b 	ldhu	r7,12(r16)
  807d70:	84800217 	ldw	r18,8(r16)
  807d74:	82000017 	ldw	r8,0(r16)
  807d78:	983fbf1e 	bne	r19,zero,807c78 <__sfvwrite_r+0x128>
  807d7c:	8f000017 	ldw	fp,0(r17)
  807d80:	8cc00117 	ldw	r19,4(r17)
  807d84:	8c400204 	addi	r17,r17,8
  807d88:	003fba06 	br	807c74 <__sfvwrite_r+0x124>
  807d8c:	0005883a 	mov	r2,zero
  807d90:	dfc00b17 	ldw	ra,44(sp)
  807d94:	df000a17 	ldw	fp,40(sp)
  807d98:	ddc00917 	ldw	r23,36(sp)
  807d9c:	dd800817 	ldw	r22,32(sp)
  807da0:	dd400717 	ldw	r21,28(sp)
  807da4:	dd000617 	ldw	r20,24(sp)
  807da8:	dcc00517 	ldw	r19,20(sp)
  807dac:	dc800417 	ldw	r18,16(sp)
  807db0:	dc400317 	ldw	r17,12(sp)
  807db4:	dc000217 	ldw	r16,8(sp)
  807db8:	dec00c04 	addi	sp,sp,48
  807dbc:	f800283a 	ret
  807dc0:	800b883a 	mov	r5,r16
  807dc4:	a809883a 	mov	r4,r21
  807dc8:	08072a80 	call	8072a8 <_fflush_r>
  807dcc:	10002026 	beq	r2,zero,807e50 <__sfvwrite_r+0x300>
  807dd0:	8080030b 	ldhu	r2,12(r16)
  807dd4:	10801014 	ori	r2,r2,64
  807dd8:	8080030d 	sth	r2,12(r16)
  807ddc:	00bfffc4 	movi	r2,-1
  807de0:	003feb06 	br	807d90 <__sfvwrite_r+0x240>
  807de4:	0005883a 	mov	r2,zero
  807de8:	f800283a 	ret
  807dec:	002d883a 	mov	r22,zero
  807df0:	0027883a 	mov	r19,zero
  807df4:	0005883a 	mov	r2,zero
  807df8:	0039883a 	mov	fp,zero
  807dfc:	b0001d26 	beq	r22,zero,807e74 <__sfvwrite_r+0x324>
  807e00:	10002026 	beq	r2,zero,807e84 <__sfvwrite_r+0x334>
  807e04:	9829883a 	mov	r20,r19
  807e08:	b500012e 	bgeu	r22,r20,807e10 <__sfvwrite_r+0x2c0>
  807e0c:	b029883a 	mov	r20,r22
  807e10:	80800417 	ldw	r2,16(r16)
  807e14:	81c00517 	ldw	r7,20(r16)
  807e18:	1200022e 	bgeu	r2,r8,807e24 <__sfvwrite_r+0x2d4>
  807e1c:	3ca5883a 	add	r18,r7,r18
  807e20:	95002216 	blt	r18,r20,807eac <__sfvwrite_r+0x35c>
  807e24:	a1c05916 	blt	r20,r7,807f8c <__sfvwrite_r+0x43c>
  807e28:	80800917 	ldw	r2,36(r16)
  807e2c:	81400717 	ldw	r5,28(r16)
  807e30:	e00d883a 	mov	r6,fp
  807e34:	a809883a 	mov	r4,r21
  807e38:	103ee83a 	callr	r2
  807e3c:	1025883a 	mov	r18,r2
  807e40:	00bfe30e 	bge	zero,r2,807dd0 <__sfvwrite_r+0x280>
  807e44:	9ca7c83a 	sub	r19,r19,r18
  807e48:	983fdd26 	beq	r19,zero,807dc0 <__sfvwrite_r+0x270>
  807e4c:	00800044 	movi	r2,1
  807e50:	b9800217 	ldw	r6,8(r23)
  807e54:	e4b9883a 	add	fp,fp,r18
  807e58:	b4adc83a 	sub	r22,r22,r18
  807e5c:	34a5c83a 	sub	r18,r6,r18
  807e60:	bc800215 	stw	r18,8(r23)
  807e64:	903fc926 	beq	r18,zero,807d8c <__sfvwrite_r+0x23c>
  807e68:	84800217 	ldw	r18,8(r16)
  807e6c:	82000017 	ldw	r8,0(r16)
  807e70:	b03fe31e 	bne	r22,zero,807e00 <__sfvwrite_r+0x2b0>
  807e74:	8d800117 	ldw	r22,4(r17)
  807e78:	8f000017 	ldw	fp,0(r17)
  807e7c:	8c400204 	addi	r17,r17,8
  807e80:	b03ffc26 	beq	r22,zero,807e74 <__sfvwrite_r+0x324>
  807e84:	b00d883a 	mov	r6,r22
  807e88:	01400284 	movi	r5,10
  807e8c:	e009883a 	mov	r4,fp
  807e90:	da000015 	stw	r8,0(sp)
  807e94:	0808ba00 	call	808ba0 <memchr>
  807e98:	da000017 	ldw	r8,0(sp)
  807e9c:	10004926 	beq	r2,zero,807fc4 <__sfvwrite_r+0x474>
  807ea0:	10800044 	addi	r2,r2,1
  807ea4:	1727c83a 	sub	r19,r2,fp
  807ea8:	003fd606 	br	807e04 <__sfvwrite_r+0x2b4>
  807eac:	e00b883a 	mov	r5,fp
  807eb0:	4009883a 	mov	r4,r8
  807eb4:	900d883a 	mov	r6,r18
  807eb8:	0808d700 	call	808d70 <memmove>
  807ebc:	80800017 	ldw	r2,0(r16)
  807ec0:	800b883a 	mov	r5,r16
  807ec4:	a809883a 	mov	r4,r21
  807ec8:	1485883a 	add	r2,r2,r18
  807ecc:	80800015 	stw	r2,0(r16)
  807ed0:	08072a80 	call	8072a8 <_fflush_r>
  807ed4:	103fdb26 	beq	r2,zero,807e44 <__sfvwrite_r+0x2f4>
  807ed8:	003fbd06 	br	807dd0 <__sfvwrite_r+0x280>
  807edc:	80800417 	ldw	r2,16(r16)
  807ee0:	12001436 	bltu	r2,r8,807f34 <__sfvwrite_r+0x3e4>
  807ee4:	85000517 	ldw	r20,20(r16)
  807ee8:	9d001236 	bltu	r19,r20,807f34 <__sfvwrite_r+0x3e4>
  807eec:	d8800017 	ldw	r2,0(sp)
  807ef0:	14c0322e 	bgeu	r2,r19,807fbc <__sfvwrite_r+0x46c>
  807ef4:	d9000117 	ldw	r4,4(sp)
  807ef8:	a00b883a 	mov	r5,r20
  807efc:	0802ffc0 	call	802ffc <__divsi3>
  807f00:	a00b883a 	mov	r5,r20
  807f04:	1009883a 	mov	r4,r2
  807f08:	08031b00 	call	8031b0 <__mulsi3>
  807f0c:	82000917 	ldw	r8,36(r16)
  807f10:	81400717 	ldw	r5,28(r16)
  807f14:	100f883a 	mov	r7,r2
  807f18:	e00d883a 	mov	r6,fp
  807f1c:	a809883a 	mov	r4,r21
  807f20:	403ee83a 	callr	r8
  807f24:	1029883a 	mov	r20,r2
  807f28:	00bfa90e 	bge	zero,r2,807dd0 <__sfvwrite_r+0x280>
  807f2c:	9d27c83a 	sub	r19,r19,r20
  807f30:	003f8906 	br	807d58 <__sfvwrite_r+0x208>
  807f34:	9029883a 	mov	r20,r18
  807f38:	9c80012e 	bgeu	r19,r18,807f40 <__sfvwrite_r+0x3f0>
  807f3c:	9829883a 	mov	r20,r19
  807f40:	4009883a 	mov	r4,r8
  807f44:	a00d883a 	mov	r6,r20
  807f48:	e00b883a 	mov	r5,fp
  807f4c:	0808d700 	call	808d70 <memmove>
  807f50:	80800217 	ldw	r2,8(r16)
  807f54:	81000017 	ldw	r4,0(r16)
  807f58:	1505c83a 	sub	r2,r2,r20
  807f5c:	2509883a 	add	r4,r4,r20
  807f60:	80800215 	stw	r2,8(r16)
  807f64:	81000015 	stw	r4,0(r16)
  807f68:	103ff01e 	bne	r2,zero,807f2c <__sfvwrite_r+0x3dc>
  807f6c:	800b883a 	mov	r5,r16
  807f70:	a809883a 	mov	r4,r21
  807f74:	08072a80 	call	8072a8 <_fflush_r>
  807f78:	103fec26 	beq	r2,zero,807f2c <__sfvwrite_r+0x3dc>
  807f7c:	003f9406 	br	807dd0 <__sfvwrite_r+0x280>
  807f80:	9825883a 	mov	r18,r19
  807f84:	982d883a 	mov	r22,r19
  807f88:	003f6706 	br	807d28 <__sfvwrite_r+0x1d8>
  807f8c:	4009883a 	mov	r4,r8
  807f90:	a00d883a 	mov	r6,r20
  807f94:	e00b883a 	mov	r5,fp
  807f98:	0808d700 	call	808d70 <memmove>
  807f9c:	81000217 	ldw	r4,8(r16)
  807fa0:	80800017 	ldw	r2,0(r16)
  807fa4:	a025883a 	mov	r18,r20
  807fa8:	2509c83a 	sub	r4,r4,r20
  807fac:	1505883a 	add	r2,r2,r20
  807fb0:	81000215 	stw	r4,8(r16)
  807fb4:	80800015 	stw	r2,0(r16)
  807fb8:	003fa206 	br	807e44 <__sfvwrite_r+0x2f4>
  807fbc:	9809883a 	mov	r4,r19
  807fc0:	003fcd06 	br	807ef8 <__sfvwrite_r+0x3a8>
  807fc4:	b5000044 	addi	r20,r22,1
  807fc8:	a027883a 	mov	r19,r20
  807fcc:	003f8e06 	br	807e08 <__sfvwrite_r+0x2b8>
  807fd0:	a809883a 	mov	r4,r21
  807fd4:	080a3280 	call	80a328 <_realloc_r>
  807fd8:	1009883a 	mov	r4,r2
  807fdc:	103f4a1e 	bne	r2,zero,807d08 <__sfvwrite_r+0x1b8>
  807fe0:	81400417 	ldw	r5,16(r16)
  807fe4:	a809883a 	mov	r4,r21
  807fe8:	08078540 	call	807854 <_free_r>
  807fec:	8080030b 	ldhu	r2,12(r16)
  807ff0:	00c00304 	movi	r3,12
  807ff4:	a8c00015 	stw	r3,0(r21)
  807ff8:	10bfdfcc 	andi	r2,r2,65407
  807ffc:	003f7506 	br	807dd4 <__sfvwrite_r+0x284>
  808000:	00c00304 	movi	r3,12
  808004:	8080030b 	ldhu	r2,12(r16)
  808008:	a8c00015 	stw	r3,0(r21)
  80800c:	003f7106 	br	807dd4 <__sfvwrite_r+0x284>
  808010:	00bfffc4 	movi	r2,-1
  808014:	003f5e06 	br	807d90 <__sfvwrite_r+0x240>

00808018 <_fwalk>:
  808018:	defffa04 	addi	sp,sp,-24
  80801c:	dd000415 	stw	r20,16(sp)
  808020:	dcc00315 	stw	r19,12(sp)
  808024:	dc800215 	stw	r18,8(sp)
  808028:	dfc00515 	stw	ra,20(sp)
  80802c:	dc400115 	stw	r17,4(sp)
  808030:	dc000015 	stw	r16,0(sp)
  808034:	2827883a 	mov	r19,r5
  808038:	2480b804 	addi	r18,r4,736
  80803c:	0029883a 	mov	r20,zero
  808040:	94400117 	ldw	r17,4(r18)
  808044:	94000217 	ldw	r16,8(r18)
  808048:	8c7fffc4 	addi	r17,r17,-1
  80804c:	88000d16 	blt	r17,zero,808084 <_fwalk+0x6c>
  808050:	8080030b 	ldhu	r2,12(r16)
  808054:	8c7fffc4 	addi	r17,r17,-1
  808058:	108000b0 	cmpltui	r2,r2,2
  80805c:	1000061e 	bne	r2,zero,808078 <_fwalk+0x60>
  808060:	8080038f 	ldh	r2,14(r16)
  808064:	8009883a 	mov	r4,r16
  808068:	10bfffe0 	cmpeqi	r2,r2,-1
  80806c:	1000021e 	bne	r2,zero,808078 <_fwalk+0x60>
  808070:	983ee83a 	callr	r19
  808074:	a0a8b03a 	or	r20,r20,r2
  808078:	88bfffd8 	cmpnei	r2,r17,-1
  80807c:	84001a04 	addi	r16,r16,104
  808080:	103ff31e 	bne	r2,zero,808050 <_fwalk+0x38>
  808084:	94800017 	ldw	r18,0(r18)
  808088:	903fed1e 	bne	r18,zero,808040 <_fwalk+0x28>
  80808c:	a005883a 	mov	r2,r20
  808090:	dfc00517 	ldw	ra,20(sp)
  808094:	dd000417 	ldw	r20,16(sp)
  808098:	dcc00317 	ldw	r19,12(sp)
  80809c:	dc800217 	ldw	r18,8(sp)
  8080a0:	dc400117 	ldw	r17,4(sp)
  8080a4:	dc000017 	ldw	r16,0(sp)
  8080a8:	dec00604 	addi	sp,sp,24
  8080ac:	f800283a 	ret

008080b0 <_fwalk_reent>:
  8080b0:	defff904 	addi	sp,sp,-28
  8080b4:	dd400515 	stw	r21,20(sp)
  8080b8:	dd000415 	stw	r20,16(sp)
  8080bc:	dcc00315 	stw	r19,12(sp)
  8080c0:	dc800215 	stw	r18,8(sp)
  8080c4:	dfc00615 	stw	ra,24(sp)
  8080c8:	dc400115 	stw	r17,4(sp)
  8080cc:	dc000015 	stw	r16,0(sp)
  8080d0:	202b883a 	mov	r21,r4
  8080d4:	2827883a 	mov	r19,r5
  8080d8:	2480b804 	addi	r18,r4,736
  8080dc:	0029883a 	mov	r20,zero
  8080e0:	94400117 	ldw	r17,4(r18)
  8080e4:	94000217 	ldw	r16,8(r18)
  8080e8:	8c7fffc4 	addi	r17,r17,-1
  8080ec:	88000e16 	blt	r17,zero,808128 <_fwalk_reent+0x78>
  8080f0:	8080030b 	ldhu	r2,12(r16)
  8080f4:	8c7fffc4 	addi	r17,r17,-1
  8080f8:	108000b0 	cmpltui	r2,r2,2
  8080fc:	1000071e 	bne	r2,zero,80811c <_fwalk_reent+0x6c>
  808100:	8080038f 	ldh	r2,14(r16)
  808104:	800b883a 	mov	r5,r16
  808108:	a809883a 	mov	r4,r21
  80810c:	10bfffe0 	cmpeqi	r2,r2,-1
  808110:	1000021e 	bne	r2,zero,80811c <_fwalk_reent+0x6c>
  808114:	983ee83a 	callr	r19
  808118:	a0a8b03a 	or	r20,r20,r2
  80811c:	88bfffd8 	cmpnei	r2,r17,-1
  808120:	84001a04 	addi	r16,r16,104
  808124:	103ff21e 	bne	r2,zero,8080f0 <_fwalk_reent+0x40>
  808128:	94800017 	ldw	r18,0(r18)
  80812c:	903fec1e 	bne	r18,zero,8080e0 <_fwalk_reent+0x30>
  808130:	a005883a 	mov	r2,r20
  808134:	dfc00617 	ldw	ra,24(sp)
  808138:	dd400517 	ldw	r21,20(sp)
  80813c:	dd000417 	ldw	r20,16(sp)
  808140:	dcc00317 	ldw	r19,12(sp)
  808144:	dc800217 	ldw	r18,8(sp)
  808148:	dc400117 	ldw	r17,4(sp)
  80814c:	dc000017 	ldw	r16,0(sp)
  808150:	dec00704 	addi	sp,sp,28
  808154:	f800283a 	ret

00808158 <__localeconv_l>:
  808158:	20803c04 	addi	r2,r4,240
  80815c:	f800283a 	ret

00808160 <_localeconv_r>:
  808160:	00802074 	movhi	r2,129
  808164:	108d3904 	addi	r2,r2,13540
  808168:	f800283a 	ret

0080816c <localeconv>:
  80816c:	00802074 	movhi	r2,129
  808170:	108d3904 	addi	r2,r2,13540
  808174:	f800283a 	ret

00808178 <__smakebuf_r>:
  808178:	2880030b 	ldhu	r2,12(r5)
  80817c:	deffe804 	addi	sp,sp,-96
  808180:	dc001215 	stw	r16,72(sp)
  808184:	dfc01715 	stw	ra,92(sp)
  808188:	dd001615 	stw	r20,88(sp)
  80818c:	dcc01515 	stw	r19,84(sp)
  808190:	dc801415 	stw	r18,80(sp)
  808194:	dc401315 	stw	r17,76(sp)
  808198:	10c0008c 	andi	r3,r2,2
  80819c:	2821883a 	mov	r16,r5
  8081a0:	18000d26 	beq	r3,zero,8081d8 <__smakebuf_r+0x60>
  8081a4:	288010c4 	addi	r2,r5,67
  8081a8:	28800015 	stw	r2,0(r5)
  8081ac:	28800415 	stw	r2,16(r5)
  8081b0:	00800044 	movi	r2,1
  8081b4:	28800515 	stw	r2,20(r5)
  8081b8:	dfc01717 	ldw	ra,92(sp)
  8081bc:	dd001617 	ldw	r20,88(sp)
  8081c0:	dcc01517 	ldw	r19,84(sp)
  8081c4:	dc801417 	ldw	r18,80(sp)
  8081c8:	dc401317 	ldw	r17,76(sp)
  8081cc:	dc001217 	ldw	r16,72(sp)
  8081d0:	dec01804 	addi	sp,sp,96
  8081d4:	f800283a 	ret
  8081d8:	2940038f 	ldh	r5,14(r5)
  8081dc:	2023883a 	mov	r17,r4
  8081e0:	28002816 	blt	r5,zero,808284 <__smakebuf_r+0x10c>
  8081e4:	d80d883a 	mov	r6,sp
  8081e8:	080c6a00 	call	80c6a0 <_fstat_r>
  8081ec:	10002416 	blt	r2,zero,808280 <__smakebuf_r+0x108>
  8081f0:	d8800117 	ldw	r2,4(sp)
  8081f4:	10bc000c 	andi	r2,r2,61440
  8081f8:	10880018 	cmpnei	r2,r2,8192
  8081fc:	1000461e 	bne	r2,zero,808318 <__smakebuf_r+0x1a0>
  808200:	8140038f 	ldh	r5,14(r16)
  808204:	8809883a 	mov	r4,r17
  808208:	080c7000 	call	80c700 <_isatty_r>
  80820c:	10003e26 	beq	r2,zero,808308 <__smakebuf_r+0x190>
  808210:	8080030b 	ldhu	r2,12(r16)
  808214:	80c010c4 	addi	r3,r16,67
  808218:	80c00015 	stw	r3,0(r16)
  80821c:	10800054 	ori	r2,r2,1
  808220:	8080030d 	sth	r2,12(r16)
  808224:	00800044 	movi	r2,1
  808228:	80c00415 	stw	r3,16(r16)
  80822c:	80800515 	stw	r2,20(r16)
  808230:	04c00044 	movi	r19,1
  808234:	05010004 	movi	r20,1024
  808238:	04820004 	movi	r18,2048
  80823c:	a00b883a 	mov	r5,r20
  808240:	8809883a 	mov	r4,r17
  808244:	08083c00 	call	8083c0 <_malloc_r>
  808248:	10001726 	beq	r2,zero,8082a8 <__smakebuf_r+0x130>
  80824c:	80c0030b 	ldhu	r3,12(r16)
  808250:	01002034 	movhi	r4,128
  808254:	211ce504 	addi	r4,r4,29588
  808258:	89000f15 	stw	r4,60(r17)
  80825c:	18c02014 	ori	r3,r3,128
  808260:	80c0030d 	sth	r3,12(r16)
  808264:	80800015 	stw	r2,0(r16)
  808268:	80800415 	stw	r2,16(r16)
  80826c:	85000515 	stw	r20,20(r16)
  808270:	98001d1e 	bne	r19,zero,8082e8 <__smakebuf_r+0x170>
  808274:	90c6b03a 	or	r3,r18,r3
  808278:	80c0030d 	sth	r3,12(r16)
  80827c:	003fce06 	br	8081b8 <__smakebuf_r+0x40>
  808280:	8080030b 	ldhu	r2,12(r16)
  808284:	1080200c 	andi	r2,r2,128
  808288:	0027883a 	mov	r19,zero
  80828c:	10001326 	beq	r2,zero,8082dc <__smakebuf_r+0x164>
  808290:	05001004 	movi	r20,64
  808294:	a00b883a 	mov	r5,r20
  808298:	8809883a 	mov	r4,r17
  80829c:	0025883a 	mov	r18,zero
  8082a0:	08083c00 	call	8083c0 <_malloc_r>
  8082a4:	103fe91e 	bne	r2,zero,80824c <__smakebuf_r+0xd4>
  8082a8:	8080030b 	ldhu	r2,12(r16)
  8082ac:	10c0800c 	andi	r3,r2,512
  8082b0:	183fc11e 	bne	r3,zero,8081b8 <__smakebuf_r+0x40>
  8082b4:	00ffff04 	movi	r3,-4
  8082b8:	10c4703a 	and	r2,r2,r3
  8082bc:	10800094 	ori	r2,r2,2
  8082c0:	80c010c4 	addi	r3,r16,67
  8082c4:	8080030d 	sth	r2,12(r16)
  8082c8:	00800044 	movi	r2,1
  8082cc:	80c00015 	stw	r3,0(r16)
  8082d0:	80c00415 	stw	r3,16(r16)
  8082d4:	80800515 	stw	r2,20(r16)
  8082d8:	003fb706 	br	8081b8 <__smakebuf_r+0x40>
  8082dc:	05010004 	movi	r20,1024
  8082e0:	0025883a 	mov	r18,zero
  8082e4:	003fd506 	br	80823c <__smakebuf_r+0xc4>
  8082e8:	8140038f 	ldh	r5,14(r16)
  8082ec:	8809883a 	mov	r4,r17
  8082f0:	080c7000 	call	80c700 <_isatty_r>
  8082f4:	80c0030b 	ldhu	r3,12(r16)
  8082f8:	103fde26 	beq	r2,zero,808274 <__smakebuf_r+0xfc>
  8082fc:	18ffff0c 	andi	r3,r3,65532
  808300:	18c00054 	ori	r3,r3,1
  808304:	003fdb06 	br	808274 <__smakebuf_r+0xfc>
  808308:	04c00044 	movi	r19,1
  80830c:	05010004 	movi	r20,1024
  808310:	04820004 	movi	r18,2048
  808314:	003fc906 	br	80823c <__smakebuf_r+0xc4>
  808318:	0027883a 	mov	r19,zero
  80831c:	05010004 	movi	r20,1024
  808320:	04820004 	movi	r18,2048
  808324:	003fc506 	br	80823c <__smakebuf_r+0xc4>

00808328 <__swhatbuf_r>:
  808328:	deffea04 	addi	sp,sp,-88
  80832c:	dc001215 	stw	r16,72(sp)
  808330:	2821883a 	mov	r16,r5
  808334:	2940038f 	ldh	r5,14(r5)
  808338:	dc801415 	stw	r18,80(sp)
  80833c:	dc401315 	stw	r17,76(sp)
  808340:	dfc01515 	stw	ra,84(sp)
  808344:	3023883a 	mov	r17,r6
  808348:	3825883a 	mov	r18,r7
  80834c:	28001016 	blt	r5,zero,808390 <__swhatbuf_r+0x68>
  808350:	d80d883a 	mov	r6,sp
  808354:	080c6a00 	call	80c6a0 <_fstat_r>
  808358:	10000d16 	blt	r2,zero,808390 <__swhatbuf_r+0x68>
  80835c:	d8c00117 	ldw	r3,4(sp)
  808360:	00820004 	movi	r2,2048
  808364:	18fc000c 	andi	r3,r3,61440
  808368:	18c80020 	cmpeqi	r3,r3,8192
  80836c:	90c00015 	stw	r3,0(r18)
  808370:	00c10004 	movi	r3,1024
  808374:	88c00015 	stw	r3,0(r17)
  808378:	dfc01517 	ldw	ra,84(sp)
  80837c:	dc801417 	ldw	r18,80(sp)
  808380:	dc401317 	ldw	r17,76(sp)
  808384:	dc001217 	ldw	r16,72(sp)
  808388:	dec01604 	addi	sp,sp,88
  80838c:	f800283a 	ret
  808390:	8080030b 	ldhu	r2,12(r16)
  808394:	90000015 	stw	zero,0(r18)
  808398:	1080200c 	andi	r2,r2,128
  80839c:	10000426 	beq	r2,zero,8083b0 <__swhatbuf_r+0x88>
  8083a0:	00801004 	movi	r2,64
  8083a4:	88800015 	stw	r2,0(r17)
  8083a8:	0005883a 	mov	r2,zero
  8083ac:	003ff206 	br	808378 <__swhatbuf_r+0x50>
  8083b0:	00810004 	movi	r2,1024
  8083b4:	88800015 	stw	r2,0(r17)
  8083b8:	0005883a 	mov	r2,zero
  8083bc:	003fee06 	br	808378 <__swhatbuf_r+0x50>

008083c0 <_malloc_r>:
  8083c0:	defff604 	addi	sp,sp,-40
  8083c4:	dc400115 	stw	r17,4(sp)
  8083c8:	2c4002c4 	addi	r17,r5,11
  8083cc:	dc800215 	stw	r18,8(sp)
  8083d0:	dfc00915 	stw	ra,36(sp)
  8083d4:	df000815 	stw	fp,32(sp)
  8083d8:	ddc00715 	stw	r23,28(sp)
  8083dc:	dd800615 	stw	r22,24(sp)
  8083e0:	dd400515 	stw	r21,20(sp)
  8083e4:	dd000415 	stw	r20,16(sp)
  8083e8:	dcc00315 	stw	r19,12(sp)
  8083ec:	dc000015 	stw	r16,0(sp)
  8083f0:	888005e8 	cmpgeui	r2,r17,23
  8083f4:	2025883a 	mov	r18,r4
  8083f8:	10001b1e 	bne	r2,zero,808468 <_malloc_r+0xa8>
  8083fc:	29400468 	cmpgeui	r5,r5,17
  808400:	2800821e 	bne	r5,zero,80860c <_malloc_r+0x24c>
  808404:	080f1f80 	call	80f1f8 <__malloc_lock>
  808408:	04400404 	movi	r17,16
  80840c:	00800604 	movi	r2,24
  808410:	01c00084 	movi	r7,2
  808414:	04c02074 	movhi	r19,129
  808418:	9ccbfb04 	addi	r19,r19,12268
  80841c:	9885883a 	add	r2,r19,r2
  808420:	14000117 	ldw	r16,4(r2)
  808424:	10fffe04 	addi	r3,r2,-8
  808428:	80c08b26 	beq	r16,r3,808658 <_malloc_r+0x298>
  80842c:	80800117 	ldw	r2,4(r16)
  808430:	81000317 	ldw	r4,12(r16)
  808434:	00ffff04 	movi	r3,-4
  808438:	10c4703a 	and	r2,r2,r3
  80843c:	81400217 	ldw	r5,8(r16)
  808440:	8085883a 	add	r2,r16,r2
  808444:	10c00117 	ldw	r3,4(r2)
  808448:	29000315 	stw	r4,12(r5)
  80844c:	21400215 	stw	r5,8(r4)
  808450:	18c00054 	ori	r3,r3,1
  808454:	10c00115 	stw	r3,4(r2)
  808458:	9009883a 	mov	r4,r18
  80845c:	080f21c0 	call	80f21c <__malloc_unlock>
  808460:	80800204 	addi	r2,r16,8
  808464:	00006c06 	br	808618 <_malloc_r+0x258>
  808468:	00bffe04 	movi	r2,-8
  80846c:	88a2703a 	and	r17,r17,r2
  808470:	88006616 	blt	r17,zero,80860c <_malloc_r+0x24c>
  808474:	89406536 	bltu	r17,r5,80860c <_malloc_r+0x24c>
  808478:	080f1f80 	call	80f1f8 <__malloc_lock>
  80847c:	88807e28 	cmpgeui	r2,r17,504
  808480:	10012226 	beq	r2,zero,80890c <_malloc_r+0x54c>
  808484:	8804d27a 	srli	r2,r17,9
  808488:	10006f26 	beq	r2,zero,808648 <_malloc_r+0x288>
  80848c:	10c00168 	cmpgeui	r3,r2,5
  808490:	1800fe1e 	bne	r3,zero,80888c <_malloc_r+0x4cc>
  808494:	8804d1ba 	srli	r2,r17,6
  808498:	11c00e44 	addi	r7,r2,57
  80849c:	380890fa 	slli	r4,r7,3
  8084a0:	12000e04 	addi	r8,r2,56
  8084a4:	04c02074 	movhi	r19,129
  8084a8:	9ccbfb04 	addi	r19,r19,12268
  8084ac:	9909883a 	add	r4,r19,r4
  8084b0:	24000117 	ldw	r16,4(r4)
  8084b4:	213ffe04 	addi	r4,r4,-8
  8084b8:	24000b26 	beq	r4,r16,8084e8 <_malloc_r+0x128>
  8084bc:	01bfff04 	movi	r6,-4
  8084c0:	00000306 	br	8084d0 <_malloc_r+0x110>
  8084c4:	1800d60e 	bge	r3,zero,808820 <_malloc_r+0x460>
  8084c8:	84000317 	ldw	r16,12(r16)
  8084cc:	24000626 	beq	r4,r16,8084e8 <_malloc_r+0x128>
  8084d0:	80800117 	ldw	r2,4(r16)
  8084d4:	1184703a 	and	r2,r2,r6
  8084d8:	1447c83a 	sub	r3,r2,r17
  8084dc:	19400408 	cmpgei	r5,r3,16
  8084e0:	283ff826 	beq	r5,zero,8084c4 <_malloc_r+0x104>
  8084e4:	400f883a 	mov	r7,r8
  8084e8:	9c000417 	ldw	r16,16(r19)
  8084ec:	02402074 	movhi	r9,129
  8084f0:	4a4bfd04 	addi	r9,r9,12276
  8084f4:	82405f26 	beq	r16,r9,808674 <_malloc_r+0x2b4>
  8084f8:	80c00117 	ldw	r3,4(r16)
  8084fc:	00bfff04 	movi	r2,-4
  808500:	1884703a 	and	r2,r3,r2
  808504:	1447c83a 	sub	r3,r2,r17
  808508:	19000410 	cmplti	r4,r3,16
  80850c:	20010a26 	beq	r4,zero,808938 <_malloc_r+0x578>
  808510:	9a400515 	stw	r9,20(r19)
  808514:	9a400415 	stw	r9,16(r19)
  808518:	1800ff0e 	bge	r3,zero,808918 <_malloc_r+0x558>
  80851c:	10c08028 	cmpgeui	r3,r2,512
  808520:	1800c11e 	bne	r3,zero,808828 <_malloc_r+0x468>
  808524:	1006d0fa 	srli	r3,r2,3
  808528:	1008d17a 	srli	r4,r2,5
  80852c:	00800044 	movi	r2,1
  808530:	18c00044 	addi	r3,r3,1
  808534:	180690fa 	slli	r3,r3,3
  808538:	99400117 	ldw	r5,4(r19)
  80853c:	1104983a 	sll	r2,r2,r4
  808540:	98c7883a 	add	r3,r19,r3
  808544:	19000017 	ldw	r4,0(r3)
  808548:	1144b03a 	or	r2,r2,r5
  80854c:	197ffe04 	addi	r5,r3,-8
  808550:	81400315 	stw	r5,12(r16)
  808554:	81000215 	stw	r4,8(r16)
  808558:	98800115 	stw	r2,4(r19)
  80855c:	1c000015 	stw	r16,0(r3)
  808560:	24000315 	stw	r16,12(r4)
  808564:	3807d0ba 	srai	r3,r7,2
  808568:	01000044 	movi	r4,1
  80856c:	20c8983a 	sll	r4,r4,r3
  808570:	11004536 	bltu	r2,r4,808688 <_malloc_r+0x2c8>
  808574:	2086703a 	and	r3,r4,r2
  808578:	18000a1e 	bne	r3,zero,8085a4 <_malloc_r+0x1e4>
  80857c:	00ffff04 	movi	r3,-4
  808580:	2109883a 	add	r4,r4,r4
  808584:	38ce703a 	and	r7,r7,r3
  808588:	2086703a 	and	r3,r4,r2
  80858c:	39c00104 	addi	r7,r7,4
  808590:	1800041e 	bne	r3,zero,8085a4 <_malloc_r+0x1e4>
  808594:	2109883a 	add	r4,r4,r4
  808598:	2086703a 	and	r3,r4,r2
  80859c:	39c00104 	addi	r7,r7,4
  8085a0:	183ffc26 	beq	r3,zero,808594 <_malloc_r+0x1d4>
  8085a4:	02bfff04 	movi	r10,-4
  8085a8:	381690fa 	slli	r11,r7,3
  8085ac:	3819883a 	mov	r12,r7
  8085b0:	9ad7883a 	add	r11,r19,r11
  8085b4:	5811883a 	mov	r8,r11
  8085b8:	40800317 	ldw	r2,12(r8)
  8085bc:	4080bc26 	beq	r8,r2,8088b0 <_malloc_r+0x4f0>
  8085c0:	10c00117 	ldw	r3,4(r2)
  8085c4:	1021883a 	mov	r16,r2
  8085c8:	10800317 	ldw	r2,12(r2)
  8085cc:	1a86703a 	and	r3,r3,r10
  8085d0:	1c4bc83a 	sub	r5,r3,r17
  8085d4:	29800410 	cmplti	r6,r5,16
  8085d8:	3000ba26 	beq	r6,zero,8088c4 <_malloc_r+0x504>
  8085dc:	283ff716 	blt	r5,zero,8085bc <_malloc_r+0x1fc>
  8085e0:	80c7883a 	add	r3,r16,r3
  8085e4:	19400117 	ldw	r5,4(r3)
  8085e8:	81800217 	ldw	r6,8(r16)
  8085ec:	9009883a 	mov	r4,r18
  8085f0:	29400054 	ori	r5,r5,1
  8085f4:	19400115 	stw	r5,4(r3)
  8085f8:	30800315 	stw	r2,12(r6)
  8085fc:	11800215 	stw	r6,8(r2)
  808600:	080f21c0 	call	80f21c <__malloc_unlock>
  808604:	80800204 	addi	r2,r16,8
  808608:	00000306 	br	808618 <_malloc_r+0x258>
  80860c:	00800304 	movi	r2,12
  808610:	90800015 	stw	r2,0(r18)
  808614:	0005883a 	mov	r2,zero
  808618:	dfc00917 	ldw	ra,36(sp)
  80861c:	df000817 	ldw	fp,32(sp)
  808620:	ddc00717 	ldw	r23,28(sp)
  808624:	dd800617 	ldw	r22,24(sp)
  808628:	dd400517 	ldw	r21,20(sp)
  80862c:	dd000417 	ldw	r20,16(sp)
  808630:	dcc00317 	ldw	r19,12(sp)
  808634:	dc800217 	ldw	r18,8(sp)
  808638:	dc400117 	ldw	r17,4(sp)
  80863c:	dc000017 	ldw	r16,0(sp)
  808640:	dec00a04 	addi	sp,sp,40
  808644:	f800283a 	ret
  808648:	01008004 	movi	r4,512
  80864c:	01c01004 	movi	r7,64
  808650:	02000fc4 	movi	r8,63
  808654:	003f9306 	br	8084a4 <_malloc_r+0xe4>
  808658:	14000317 	ldw	r16,12(r2)
  80865c:	39c00084 	addi	r7,r7,2
  808660:	143f721e 	bne	r2,r16,80842c <_malloc_r+0x6c>
  808664:	9c000417 	ldw	r16,16(r19)
  808668:	02402074 	movhi	r9,129
  80866c:	4a4bfd04 	addi	r9,r9,12276
  808670:	827fa11e 	bne	r16,r9,8084f8 <_malloc_r+0x138>
  808674:	3807d0ba 	srai	r3,r7,2
  808678:	01000044 	movi	r4,1
  80867c:	98800117 	ldw	r2,4(r19)
  808680:	20c8983a 	sll	r4,r4,r3
  808684:	113fbb2e 	bgeu	r2,r4,808574 <_malloc_r+0x1b4>
  808688:	9c000217 	ldw	r16,8(r19)
  80868c:	00bfff04 	movi	r2,-4
  808690:	85400117 	ldw	r21,4(r16)
  808694:	a8ac703a 	and	r22,r21,r2
  808698:	b4400336 	bltu	r22,r17,8086a8 <_malloc_r+0x2e8>
  80869c:	b445c83a 	sub	r2,r22,r17
  8086a0:	10c00408 	cmpgei	r3,r2,16
  8086a4:	1800541e 	bne	r3,zero,8087f8 <_malloc_r+0x438>
  8086a8:	00802074 	movhi	r2,129
  8086ac:	10921317 	ldw	r2,18508(r2)
  8086b0:	00c02074 	movhi	r3,129
  8086b4:	1d595617 	ldw	r21,25944(r3)
  8086b8:	10bfffd8 	cmpnei	r2,r2,-1
  8086bc:	85b9883a 	add	fp,r16,r22
  8086c0:	8d6b883a 	add	r21,r17,r21
  8086c4:	1000d626 	beq	r2,zero,808a20 <_malloc_r+0x660>
  8086c8:	ad4403c4 	addi	r21,r21,4111
  8086cc:	00bc0004 	movi	r2,-4096
  8086d0:	a8aa703a 	and	r21,r21,r2
  8086d4:	a80b883a 	mov	r5,r21
  8086d8:	9009883a 	mov	r4,r18
  8086dc:	080a88c0 	call	80a88c <_sbrk_r>
  8086e0:	102f883a 	mov	r23,r2
  8086e4:	10bfffd8 	cmpnei	r2,r2,-1
  8086e8:	1000a826 	beq	r2,zero,80898c <_malloc_r+0x5cc>
  8086ec:	bf00a636 	bltu	r23,fp,808988 <_malloc_r+0x5c8>
  8086f0:	00802074 	movhi	r2,129
  8086f4:	15196217 	ldw	r20,25992(r2)
  8086f8:	ad29883a 	add	r20,r21,r20
  8086fc:	15196215 	stw	r20,25992(r2)
  808700:	a007883a 	mov	r3,r20
  808704:	e5c0ec26 	beq	fp,r23,808ab8 <_malloc_r+0x6f8>
  808708:	00802074 	movhi	r2,129
  80870c:	10921317 	ldw	r2,18508(r2)
  808710:	10bfffd8 	cmpnei	r2,r2,-1
  808714:	1000ef26 	beq	r2,zero,808ad4 <_malloc_r+0x714>
  808718:	bf39c83a 	sub	fp,r23,fp
  80871c:	e0c7883a 	add	r3,fp,r3
  808720:	00802074 	movhi	r2,129
  808724:	10d96215 	stw	r3,25992(r2)
  808728:	bf0001cc 	andi	fp,r23,7
  80872c:	e000c526 	beq	fp,zero,808a44 <_malloc_r+0x684>
  808730:	bf2fc83a 	sub	r23,r23,fp
  808734:	bdc00204 	addi	r23,r23,8
  808738:	05040204 	movi	r20,4104
  80873c:	a729c83a 	sub	r20,r20,fp
  808740:	bd6b883a 	add	r21,r23,r21
  808744:	a569c83a 	sub	r20,r20,r21
  808748:	a503ffcc 	andi	r20,r20,4095
  80874c:	a00b883a 	mov	r5,r20
  808750:	9009883a 	mov	r4,r18
  808754:	080a88c0 	call	80a88c <_sbrk_r>
  808758:	10ffffe0 	cmpeqi	r3,r2,-1
  80875c:	1800f31e 	bne	r3,zero,808b2c <_malloc_r+0x76c>
  808760:	15c5c83a 	sub	r2,r2,r23
  808764:	152b883a 	add	r21,r2,r20
  808768:	00802074 	movhi	r2,129
  80876c:	11596217 	ldw	r5,25992(r2)
  808770:	9dc00215 	stw	r23,8(r19)
  808774:	ad400054 	ori	r21,r21,1
  808778:	a169883a 	add	r20,r20,r5
  80877c:	15196215 	stw	r20,25992(r2)
  808780:	bd400115 	stw	r21,4(r23)
  808784:	84c0d626 	beq	r16,r19,808ae0 <_malloc_r+0x720>
  808788:	b0800428 	cmpgeui	r2,r22,16
  80878c:	1000d626 	beq	r2,zero,808ae8 <_malloc_r+0x728>
  808790:	80c00117 	ldw	r3,4(r16)
  808794:	013ffe04 	movi	r4,-8
  808798:	b0bffd04 	addi	r2,r22,-12
  80879c:	1104703a 	and	r2,r2,r4
  8087a0:	18c0004c 	andi	r3,r3,1
  8087a4:	1886b03a 	or	r3,r3,r2
  8087a8:	80c00115 	stw	r3,4(r16)
  8087ac:	01000144 	movi	r4,5
  8087b0:	8087883a 	add	r3,r16,r2
  8087b4:	19000115 	stw	r4,4(r3)
  8087b8:	19000215 	stw	r4,8(r3)
  8087bc:	10800428 	cmpgeui	r2,r2,16
  8087c0:	1000df1e 	bne	r2,zero,808b40 <_malloc_r+0x780>
  8087c4:	bd400117 	ldw	r21,4(r23)
  8087c8:	b821883a 	mov	r16,r23
  8087cc:	00802074 	movhi	r2,129
  8087d0:	10995517 	ldw	r2,25940(r2)
  8087d4:	1500022e 	bgeu	r2,r20,8087e0 <_malloc_r+0x420>
  8087d8:	00802074 	movhi	r2,129
  8087dc:	15195515 	stw	r20,25940(r2)
  8087e0:	00802074 	movhi	r2,129
  8087e4:	10995417 	ldw	r2,25936(r2)
  8087e8:	15006a2e 	bgeu	r2,r20,808994 <_malloc_r+0x5d4>
  8087ec:	00802074 	movhi	r2,129
  8087f0:	15195415 	stw	r20,25936(r2)
  8087f4:	00006706 	br	808994 <_malloc_r+0x5d4>
  8087f8:	88c00054 	ori	r3,r17,1
  8087fc:	80c00115 	stw	r3,4(r16)
  808800:	8463883a 	add	r17,r16,r17
  808804:	10800054 	ori	r2,r2,1
  808808:	9c400215 	stw	r17,8(r19)
  80880c:	88800115 	stw	r2,4(r17)
  808810:	9009883a 	mov	r4,r18
  808814:	080f21c0 	call	80f21c <__malloc_unlock>
  808818:	80800204 	addi	r2,r16,8
  80881c:	003f7e06 	br	808618 <_malloc_r+0x258>
  808820:	81000317 	ldw	r4,12(r16)
  808824:	003f0506 	br	80843c <_malloc_r+0x7c>
  808828:	1006d27a 	srli	r3,r2,9
  80882c:	19000168 	cmpgeui	r4,r3,5
  808830:	20005026 	beq	r4,zero,808974 <_malloc_r+0x5b4>
  808834:	19000568 	cmpgeui	r4,r3,21
  808838:	20008c1e 	bne	r4,zero,808a6c <_malloc_r+0x6ac>
  80883c:	19401704 	addi	r5,r3,92
  808840:	280a90fa 	slli	r5,r5,3
  808844:	190016c4 	addi	r4,r3,91
  808848:	994b883a 	add	r5,r19,r5
  80884c:	28c00017 	ldw	r3,0(r5)
  808850:	297ffe04 	addi	r5,r5,-8
  808854:	28c07426 	beq	r5,r3,808a28 <_malloc_r+0x668>
  808858:	01bfff04 	movi	r6,-4
  80885c:	19000117 	ldw	r4,4(r3)
  808860:	2188703a 	and	r4,r4,r6
  808864:	1100022e 	bgeu	r2,r4,808870 <_malloc_r+0x4b0>
  808868:	18c00217 	ldw	r3,8(r3)
  80886c:	28fffb1e 	bne	r5,r3,80885c <_malloc_r+0x49c>
  808870:	19400317 	ldw	r5,12(r3)
  808874:	98800117 	ldw	r2,4(r19)
  808878:	81400315 	stw	r5,12(r16)
  80887c:	80c00215 	stw	r3,8(r16)
  808880:	2c000215 	stw	r16,8(r5)
  808884:	1c000315 	stw	r16,12(r3)
  808888:	003f3606 	br	808564 <_malloc_r+0x1a4>
  80888c:	10c00568 	cmpgeui	r3,r2,21
  808890:	18004a26 	beq	r3,zero,8089bc <_malloc_r+0x5fc>
  808894:	10c01568 	cmpgeui	r3,r2,85
  808898:	18007b1e 	bne	r3,zero,808a88 <_malloc_r+0x6c8>
  80889c:	8804d33a 	srli	r2,r17,12
  8088a0:	11c01bc4 	addi	r7,r2,111
  8088a4:	380890fa 	slli	r4,r7,3
  8088a8:	12001b84 	addi	r8,r2,110
  8088ac:	003efd06 	br	8084a4 <_malloc_r+0xe4>
  8088b0:	63000044 	addi	r12,r12,1
  8088b4:	608000cc 	andi	r2,r12,3
  8088b8:	42000204 	addi	r8,r8,8
  8088bc:	103f3e1e 	bne	r2,zero,8085b8 <_malloc_r+0x1f8>
  8088c0:	00004506 	br	8089d8 <_malloc_r+0x618>
  8088c4:	81000217 	ldw	r4,8(r16)
  8088c8:	89800054 	ori	r6,r17,1
  8088cc:	81800115 	stw	r6,4(r16)
  8088d0:	20800315 	stw	r2,12(r4)
  8088d4:	11000215 	stw	r4,8(r2)
  8088d8:	8463883a 	add	r17,r16,r17
  8088dc:	9c400515 	stw	r17,20(r19)
  8088e0:	9c400415 	stw	r17,16(r19)
  8088e4:	28800054 	ori	r2,r5,1
  8088e8:	88800115 	stw	r2,4(r17)
  8088ec:	8a400315 	stw	r9,12(r17)
  8088f0:	8a400215 	stw	r9,8(r17)
  8088f4:	80c7883a 	add	r3,r16,r3
  8088f8:	19400015 	stw	r5,0(r3)
  8088fc:	9009883a 	mov	r4,r18
  808900:	080f21c0 	call	80f21c <__malloc_unlock>
  808904:	80800204 	addi	r2,r16,8
  808908:	003f4306 	br	808618 <_malloc_r+0x258>
  80890c:	880ed0fa 	srli	r7,r17,3
  808910:	88800204 	addi	r2,r17,8
  808914:	003ebf06 	br	808414 <_malloc_r+0x54>
  808918:	8085883a 	add	r2,r16,r2
  80891c:	10c00117 	ldw	r3,4(r2)
  808920:	9009883a 	mov	r4,r18
  808924:	18c00054 	ori	r3,r3,1
  808928:	10c00115 	stw	r3,4(r2)
  80892c:	080f21c0 	call	80f21c <__malloc_unlock>
  808930:	80800204 	addi	r2,r16,8
  808934:	003f3806 	br	808618 <_malloc_r+0x258>
  808938:	89000054 	ori	r4,r17,1
  80893c:	81000115 	stw	r4,4(r16)
  808940:	8463883a 	add	r17,r16,r17
  808944:	9c400515 	stw	r17,20(r19)
  808948:	9c400415 	stw	r17,16(r19)
  80894c:	19000054 	ori	r4,r3,1
  808950:	89000115 	stw	r4,4(r17)
  808954:	8085883a 	add	r2,r16,r2
  808958:	8a400315 	stw	r9,12(r17)
  80895c:	8a400215 	stw	r9,8(r17)
  808960:	10c00015 	stw	r3,0(r2)
  808964:	9009883a 	mov	r4,r18
  808968:	080f21c0 	call	80f21c <__malloc_unlock>
  80896c:	80800204 	addi	r2,r16,8
  808970:	003f2906 	br	808618 <_malloc_r+0x258>
  808974:	1006d1ba 	srli	r3,r2,6
  808978:	19400e44 	addi	r5,r3,57
  80897c:	280a90fa 	slli	r5,r5,3
  808980:	19000e04 	addi	r4,r3,56
  808984:	003fb006 	br	808848 <_malloc_r+0x488>
  808988:	84c04626 	beq	r16,r19,808aa4 <_malloc_r+0x6e4>
  80898c:	9c000217 	ldw	r16,8(r19)
  808990:	85400117 	ldw	r21,4(r16)
  808994:	00bfff04 	movi	r2,-4
  808998:	a8aa703a 	and	r21,r21,r2
  80899c:	ac45c83a 	sub	r2,r21,r17
  8089a0:	ac400236 	bltu	r21,r17,8089ac <_malloc_r+0x5ec>
  8089a4:	10c00408 	cmpgei	r3,r2,16
  8089a8:	183f931e 	bne	r3,zero,8087f8 <_malloc_r+0x438>
  8089ac:	9009883a 	mov	r4,r18
  8089b0:	080f21c0 	call	80f21c <__malloc_unlock>
  8089b4:	0005883a 	mov	r2,zero
  8089b8:	003f1706 	br	808618 <_malloc_r+0x258>
  8089bc:	11c01704 	addi	r7,r2,92
  8089c0:	380890fa 	slli	r4,r7,3
  8089c4:	120016c4 	addi	r8,r2,91
  8089c8:	003eb606 	br	8084a4 <_malloc_r+0xe4>
  8089cc:	58800217 	ldw	r2,8(r11)
  8089d0:	39ffffc4 	addi	r7,r7,-1
  8089d4:	12c0701e 	bne	r2,r11,808b98 <_malloc_r+0x7d8>
  8089d8:	388000cc 	andi	r2,r7,3
  8089dc:	5afffe04 	addi	r11,r11,-8
  8089e0:	103ffa1e 	bne	r2,zero,8089cc <_malloc_r+0x60c>
  8089e4:	98c00117 	ldw	r3,4(r19)
  8089e8:	0104303a 	nor	r2,zero,r4
  8089ec:	10c4703a 	and	r2,r2,r3
  8089f0:	98800115 	stw	r2,4(r19)
  8089f4:	2109883a 	add	r4,r4,r4
  8089f8:	113f2336 	bltu	r2,r4,808688 <_malloc_r+0x2c8>
  8089fc:	203f2226 	beq	r4,zero,808688 <_malloc_r+0x2c8>
  808a00:	2086703a 	and	r3,r4,r2
  808a04:	1800041e 	bne	r3,zero,808a18 <_malloc_r+0x658>
  808a08:	2109883a 	add	r4,r4,r4
  808a0c:	2086703a 	and	r3,r4,r2
  808a10:	63000104 	addi	r12,r12,4
  808a14:	183ffc26 	beq	r3,zero,808a08 <_malloc_r+0x648>
  808a18:	600f883a 	mov	r7,r12
  808a1c:	003ee206 	br	8085a8 <_malloc_r+0x1e8>
  808a20:	ad400404 	addi	r21,r21,16
  808a24:	003f2b06 	br	8086d4 <_malloc_r+0x314>
  808a28:	2009d0ba 	srai	r4,r4,2
  808a2c:	00800044 	movi	r2,1
  808a30:	99800117 	ldw	r6,4(r19)
  808a34:	1104983a 	sll	r2,r2,r4
  808a38:	1184b03a 	or	r2,r2,r6
  808a3c:	98800115 	stw	r2,4(r19)
  808a40:	003f8d06 	br	808878 <_malloc_r+0x4b8>
  808a44:	bd69883a 	add	r20,r23,r21
  808a48:	0529c83a 	sub	r20,zero,r20
  808a4c:	a503ffcc 	andi	r20,r20,4095
  808a50:	a00b883a 	mov	r5,r20
  808a54:	9009883a 	mov	r4,r18
  808a58:	080a88c0 	call	80a88c <_sbrk_r>
  808a5c:	10ffffe0 	cmpeqi	r3,r2,-1
  808a60:	183f3f26 	beq	r3,zero,808760 <_malloc_r+0x3a0>
  808a64:	0029883a 	mov	r20,zero
  808a68:	003f3f06 	br	808768 <_malloc_r+0x3a8>
  808a6c:	19001568 	cmpgeui	r4,r3,85
  808a70:	2000201e 	bne	r4,zero,808af4 <_malloc_r+0x734>
  808a74:	1006d33a 	srli	r3,r2,12
  808a78:	19401bc4 	addi	r5,r3,111
  808a7c:	280a90fa 	slli	r5,r5,3
  808a80:	19001b84 	addi	r4,r3,110
  808a84:	003f7006 	br	808848 <_malloc_r+0x488>
  808a88:	10c05568 	cmpgeui	r3,r2,341
  808a8c:	1800201e 	bne	r3,zero,808b10 <_malloc_r+0x750>
  808a90:	8804d3fa 	srli	r2,r17,15
  808a94:	11c01e04 	addi	r7,r2,120
  808a98:	380890fa 	slli	r4,r7,3
  808a9c:	12001dc4 	addi	r8,r2,119
  808aa0:	003e8006 	br	8084a4 <_malloc_r+0xe4>
  808aa4:	00802074 	movhi	r2,129
  808aa8:	10d96217 	ldw	r3,25992(r2)
  808aac:	a8c7883a 	add	r3,r21,r3
  808ab0:	10d96215 	stw	r3,25992(r2)
  808ab4:	003f1406 	br	808708 <_malloc_r+0x348>
  808ab8:	e083ffcc 	andi	r2,fp,4095
  808abc:	103f121e 	bne	r2,zero,808708 <_malloc_r+0x348>
  808ac0:	9c000217 	ldw	r16,8(r19)
  808ac4:	b56b883a 	add	r21,r22,r21
  808ac8:	ad400054 	ori	r21,r21,1
  808acc:	85400115 	stw	r21,4(r16)
  808ad0:	003f3e06 	br	8087cc <_malloc_r+0x40c>
  808ad4:	00802074 	movhi	r2,129
  808ad8:	15d21315 	stw	r23,18508(r2)
  808adc:	003f1206 	br	808728 <_malloc_r+0x368>
  808ae0:	b821883a 	mov	r16,r23
  808ae4:	003f3906 	br	8087cc <_malloc_r+0x40c>
  808ae8:	00800044 	movi	r2,1
  808aec:	b8800115 	stw	r2,4(r23)
  808af0:	003fae06 	br	8089ac <_malloc_r+0x5ec>
  808af4:	19005568 	cmpgeui	r4,r3,341
  808af8:	2000191e 	bne	r4,zero,808b60 <_malloc_r+0x7a0>
  808afc:	1006d3fa 	srli	r3,r2,15
  808b00:	19401e04 	addi	r5,r3,120
  808b04:	280a90fa 	slli	r5,r5,3
  808b08:	19001dc4 	addi	r4,r3,119
  808b0c:	003f4e06 	br	808848 <_malloc_r+0x488>
  808b10:	10815568 	cmpgeui	r2,r2,1365
  808b14:	1000191e 	bne	r2,zero,808b7c <_malloc_r+0x7bc>
  808b18:	8804d4ba 	srli	r2,r17,18
  808b1c:	11c01f44 	addi	r7,r2,125
  808b20:	380890fa 	slli	r4,r7,3
  808b24:	12001f04 	addi	r8,r2,124
  808b28:	003e5e06 	br	8084a4 <_malloc_r+0xe4>
  808b2c:	e73ffe04 	addi	fp,fp,-8
  808b30:	af2b883a 	add	r21,r21,fp
  808b34:	adebc83a 	sub	r21,r21,r23
  808b38:	0029883a 	mov	r20,zero
  808b3c:	003f0a06 	br	808768 <_malloc_r+0x3a8>
  808b40:	81400204 	addi	r5,r16,8
  808b44:	9009883a 	mov	r4,r18
  808b48:	08078540 	call	807854 <_free_r>
  808b4c:	9c000217 	ldw	r16,8(r19)
  808b50:	00802074 	movhi	r2,129
  808b54:	15196217 	ldw	r20,25992(r2)
  808b58:	85400117 	ldw	r21,4(r16)
  808b5c:	003f1b06 	br	8087cc <_malloc_r+0x40c>
  808b60:	18c15568 	cmpgeui	r3,r3,1365
  808b64:	1800091e 	bne	r3,zero,808b8c <_malloc_r+0x7cc>
  808b68:	1006d4ba 	srli	r3,r2,18
  808b6c:	19401f44 	addi	r5,r3,125
  808b70:	280a90fa 	slli	r5,r5,3
  808b74:	19001f04 	addi	r4,r3,124
  808b78:	003f3306 	br	808848 <_malloc_r+0x488>
  808b7c:	0100fe04 	movi	r4,1016
  808b80:	01c01fc4 	movi	r7,127
  808b84:	02001f84 	movi	r8,126
  808b88:	003e4606 	br	8084a4 <_malloc_r+0xe4>
  808b8c:	0140fe04 	movi	r5,1016
  808b90:	01001f84 	movi	r4,126
  808b94:	003f2c06 	br	808848 <_malloc_r+0x488>
  808b98:	98800117 	ldw	r2,4(r19)
  808b9c:	003f9506 	br	8089f4 <_malloc_r+0x634>

00808ba0 <memchr>:
  808ba0:	208000cc 	andi	r2,r4,3
  808ba4:	280f883a 	mov	r7,r5
  808ba8:	10000e26 	beq	r2,zero,808be4 <memchr+0x44>
  808bac:	30bfffc4 	addi	r2,r6,-1
  808bb0:	30001726 	beq	r6,zero,808c10 <memchr+0x70>
  808bb4:	29803fcc 	andi	r6,r5,255
  808bb8:	00000606 	br	808bd4 <memchr+0x34>
  808bbc:	21000044 	addi	r4,r4,1
  808bc0:	20c000cc 	andi	r3,r4,3
  808bc4:	18000826 	beq	r3,zero,808be8 <memchr+0x48>
  808bc8:	10bfffc4 	addi	r2,r2,-1
  808bcc:	10ffffe0 	cmpeqi	r3,r2,-1
  808bd0:	18000f1e 	bne	r3,zero,808c10 <memchr+0x70>
  808bd4:	20c00003 	ldbu	r3,0(r4)
  808bd8:	19bff81e 	bne	r3,r6,808bbc <memchr+0x1c>
  808bdc:	2005883a 	mov	r2,r4
  808be0:	f800283a 	ret
  808be4:	3005883a 	mov	r2,r6
  808be8:	10c00128 	cmpgeui	r3,r2,4
  808bec:	18000a1e 	bne	r3,zero,808c18 <memchr+0x78>
  808bf0:	10001e26 	beq	r2,zero,808c6c <memchr+0xcc>
  808bf4:	2087883a 	add	r3,r4,r2
  808bf8:	39803fcc 	andi	r6,r7,255
  808bfc:	2005883a 	mov	r2,r4
  808c00:	11000003 	ldbu	r4,0(r2)
  808c04:	21bff626 	beq	r4,r6,808be0 <memchr+0x40>
  808c08:	10800044 	addi	r2,r2,1
  808c0c:	18bffc1e 	bne	r3,r2,808c00 <memchr+0x60>
  808c10:	0005883a 	mov	r2,zero
  808c14:	f800283a 	ret
  808c18:	29403fcc 	andi	r5,r5,255
  808c1c:	280c923a 	slli	r6,r5,8
  808c20:	027fbff4 	movhi	r9,65279
  808c24:	02202074 	movhi	r8,32897
  808c28:	314ab03a 	or	r5,r6,r5
  808c2c:	280c943a 	slli	r6,r5,16
  808c30:	4a7fbfc4 	addi	r9,r9,-257
  808c34:	42202004 	addi	r8,r8,-32640
  808c38:	314cb03a 	or	r6,r6,r5
  808c3c:	20c00017 	ldw	r3,0(r4)
  808c40:	30c6f03a 	xor	r3,r6,r3
  808c44:	1a4b883a 	add	r5,r3,r9
  808c48:	00c6303a 	nor	r3,zero,r3
  808c4c:	28c6703a 	and	r3,r5,r3
  808c50:	1a06703a 	and	r3,r3,r8
  808c54:	183fe71e 	bne	r3,zero,808bf4 <memchr+0x54>
  808c58:	10bfff04 	addi	r2,r2,-4
  808c5c:	10c00128 	cmpgeui	r3,r2,4
  808c60:	21000104 	addi	r4,r4,4
  808c64:	183ff51e 	bne	r3,zero,808c3c <memchr+0x9c>
  808c68:	003fe106 	br	808bf0 <memchr+0x50>
  808c6c:	f800283a 	ret

00808c70 <memcpy>:
  808c70:	30c00430 	cmpltui	r3,r6,16
  808c74:	2005883a 	mov	r2,r4
  808c78:	18002d1e 	bne	r3,zero,808d30 <memcpy+0xc0>
  808c7c:	2906b03a 	or	r3,r5,r4
  808c80:	18c000cc 	andi	r3,r3,3
  808c84:	1800351e 	bne	r3,zero,808d5c <memcpy+0xec>
  808c88:	32fffc04 	addi	r11,r6,-16
  808c8c:	5816d13a 	srli	r11,r11,4
  808c90:	280f883a 	mov	r7,r5
  808c94:	2007883a 	mov	r3,r4
  808c98:	5ac00044 	addi	r11,r11,1
  808c9c:	5816913a 	slli	r11,r11,4
  808ca0:	22d5883a 	add	r10,r4,r11
  808ca4:	39000117 	ldw	r4,4(r7)
  808ca8:	3a400017 	ldw	r9,0(r7)
  808cac:	3a000217 	ldw	r8,8(r7)
  808cb0:	19000115 	stw	r4,4(r3)
  808cb4:	39000317 	ldw	r4,12(r7)
  808cb8:	1a400015 	stw	r9,0(r3)
  808cbc:	1a000215 	stw	r8,8(r3)
  808cc0:	19000315 	stw	r4,12(r3)
  808cc4:	18c00404 	addi	r3,r3,16
  808cc8:	39c00404 	addi	r7,r7,16
  808ccc:	50fff51e 	bne	r10,r3,808ca4 <memcpy+0x34>
  808cd0:	3100030c 	andi	r4,r6,12
  808cd4:	2acb883a 	add	r5,r5,r11
  808cd8:	320003cc 	andi	r8,r6,15
  808cdc:	20002226 	beq	r4,zero,808d68 <memcpy+0xf8>
  808ce0:	280f883a 	mov	r7,r5
  808ce4:	1813883a 	mov	r9,r3
  808ce8:	39c00104 	addi	r7,r7,4
  808cec:	3abfff17 	ldw	r10,-4(r7)
  808cf0:	41c9c83a 	sub	r4,r8,r7
  808cf4:	2909883a 	add	r4,r5,r4
  808cf8:	4a800015 	stw	r10,0(r9)
  808cfc:	21000128 	cmpgeui	r4,r4,4
  808d00:	4a400104 	addi	r9,r9,4
  808d04:	203ff81e 	bne	r4,zero,808ce8 <memcpy+0x78>
  808d08:	413fff04 	addi	r4,r8,-4
  808d0c:	2008d0ba 	srli	r4,r4,2
  808d10:	318000cc 	andi	r6,r6,3
  808d14:	31ffffc4 	addi	r7,r6,-1
  808d18:	21000044 	addi	r4,r4,1
  808d1c:	200890ba 	slli	r4,r4,2
  808d20:	1907883a 	add	r3,r3,r4
  808d24:	290b883a 	add	r5,r5,r4
  808d28:	3000041e 	bne	r6,zero,808d3c <memcpy+0xcc>
  808d2c:	f800283a 	ret
  808d30:	2007883a 	mov	r3,r4
  808d34:	31ffffc4 	addi	r7,r6,-1
  808d38:	303ffc26 	beq	r6,zero,808d2c <memcpy+0xbc>
  808d3c:	39c00044 	addi	r7,r7,1
  808d40:	19cf883a 	add	r7,r3,r7
  808d44:	29800003 	ldbu	r6,0(r5)
  808d48:	18c00044 	addi	r3,r3,1
  808d4c:	29400044 	addi	r5,r5,1
  808d50:	19bfffc5 	stb	r6,-1(r3)
  808d54:	38fffb1e 	bne	r7,r3,808d44 <memcpy+0xd4>
  808d58:	f800283a 	ret
  808d5c:	31ffffc4 	addi	r7,r6,-1
  808d60:	2007883a 	mov	r3,r4
  808d64:	003ff506 	br	808d3c <memcpy+0xcc>
  808d68:	400d883a 	mov	r6,r8
  808d6c:	003ff106 	br	808d34 <memcpy+0xc4>

00808d70 <memmove>:
  808d70:	2005883a 	mov	r2,r4
  808d74:	29000a2e 	bgeu	r5,r4,808da0 <memmove+0x30>
  808d78:	2989883a 	add	r4,r5,r6
  808d7c:	1100082e 	bgeu	r2,r4,808da0 <memmove+0x30>
  808d80:	1187883a 	add	r3,r2,r6
  808d84:	30003e26 	beq	r6,zero,808e80 <memmove+0x110>
  808d88:	217fffc3 	ldbu	r5,-1(r4)
  808d8c:	18ffffc4 	addi	r3,r3,-1
  808d90:	213fffc4 	addi	r4,r4,-1
  808d94:	19400005 	stb	r5,0(r3)
  808d98:	10fffb1e 	bne	r2,r3,808d88 <memmove+0x18>
  808d9c:	f800283a 	ret
  808da0:	30c00430 	cmpltui	r3,r6,16
  808da4:	18000b26 	beq	r3,zero,808dd4 <memmove+0x64>
  808da8:	1007883a 	mov	r3,r2
  808dac:	31ffffc4 	addi	r7,r6,-1
  808db0:	30003726 	beq	r6,zero,808e90 <memmove+0x120>
  808db4:	39c00044 	addi	r7,r7,1
  808db8:	29cf883a 	add	r7,r5,r7
  808dbc:	29800003 	ldbu	r6,0(r5)
  808dc0:	29400044 	addi	r5,r5,1
  808dc4:	18c00044 	addi	r3,r3,1
  808dc8:	19bfffc5 	stb	r6,-1(r3)
  808dcc:	29fffb1e 	bne	r5,r7,808dbc <memmove+0x4c>
  808dd0:	f800283a 	ret
  808dd4:	2886b03a 	or	r3,r5,r2
  808dd8:	18c000cc 	andi	r3,r3,3
  808ddc:	1800291e 	bne	r3,zero,808e84 <memmove+0x114>
  808de0:	327ffc04 	addi	r9,r6,-16
  808de4:	4812d13a 	srli	r9,r9,4
  808de8:	280f883a 	mov	r7,r5
  808dec:	1007883a 	mov	r3,r2
  808df0:	4a400044 	addi	r9,r9,1
  808df4:	4812913a 	slli	r9,r9,4
  808df8:	1251883a 	add	r8,r2,r9
  808dfc:	39000017 	ldw	r4,0(r7)
  808e00:	39c00404 	addi	r7,r7,16
  808e04:	18c00404 	addi	r3,r3,16
  808e08:	193ffc15 	stw	r4,-16(r3)
  808e0c:	393ffd17 	ldw	r4,-12(r7)
  808e10:	193ffd15 	stw	r4,-12(r3)
  808e14:	393ffe17 	ldw	r4,-8(r7)
  808e18:	193ffe15 	stw	r4,-8(r3)
  808e1c:	393fff17 	ldw	r4,-4(r7)
  808e20:	193fff15 	stw	r4,-4(r3)
  808e24:	40fff51e 	bne	r8,r3,808dfc <memmove+0x8c>
  808e28:	3100030c 	andi	r4,r6,12
  808e2c:	2a4b883a 	add	r5,r5,r9
  808e30:	320003cc 	andi	r8,r6,15
  808e34:	20001726 	beq	r4,zero,808e94 <memmove+0x124>
  808e38:	2813883a 	mov	r9,r5
  808e3c:	180f883a 	mov	r7,r3
  808e40:	4a800017 	ldw	r10,0(r9)
  808e44:	39c00104 	addi	r7,r7,4
  808e48:	41c9c83a 	sub	r4,r8,r7
  808e4c:	1909883a 	add	r4,r3,r4
  808e50:	21000128 	cmpgeui	r4,r4,4
  808e54:	3abfff15 	stw	r10,-4(r7)
  808e58:	4a400104 	addi	r9,r9,4
  808e5c:	203ff81e 	bne	r4,zero,808e40 <memmove+0xd0>
  808e60:	413fff04 	addi	r4,r8,-4
  808e64:	2008d0ba 	srli	r4,r4,2
  808e68:	318000cc 	andi	r6,r6,3
  808e6c:	21000044 	addi	r4,r4,1
  808e70:	200890ba 	slli	r4,r4,2
  808e74:	1907883a 	add	r3,r3,r4
  808e78:	290b883a 	add	r5,r5,r4
  808e7c:	003fcb06 	br	808dac <memmove+0x3c>
  808e80:	f800283a 	ret
  808e84:	31ffffc4 	addi	r7,r6,-1
  808e88:	1007883a 	mov	r3,r2
  808e8c:	003fc906 	br	808db4 <memmove+0x44>
  808e90:	f800283a 	ret
  808e94:	400d883a 	mov	r6,r8
  808e98:	003fc406 	br	808dac <memmove+0x3c>

00808e9c <memset>:
  808e9c:	20c000cc 	andi	r3,r4,3
  808ea0:	2005883a 	mov	r2,r4
  808ea4:	18003626 	beq	r3,zero,808f80 <memset+0xe4>
  808ea8:	31ffffc4 	addi	r7,r6,-1
  808eac:	30003326 	beq	r6,zero,808f7c <memset+0xe0>
  808eb0:	2811883a 	mov	r8,r5
  808eb4:	2007883a 	mov	r3,r4
  808eb8:	00000306 	br	808ec8 <memset+0x2c>
  808ebc:	39ffffc4 	addi	r7,r7,-1
  808ec0:	39bfffe0 	cmpeqi	r6,r7,-1
  808ec4:	30002d1e 	bne	r6,zero,808f7c <memset+0xe0>
  808ec8:	18c00044 	addi	r3,r3,1
  808ecc:	198000cc 	andi	r6,r3,3
  808ed0:	1a3fffc5 	stb	r8,-1(r3)
  808ed4:	303ff91e 	bne	r6,zero,808ebc <memset+0x20>
  808ed8:	39000130 	cmpltui	r4,r7,4
  808edc:	2000221e 	bne	r4,zero,808f68 <memset+0xcc>
  808ee0:	29003fcc 	andi	r4,r5,255
  808ee4:	200c923a 	slli	r6,r4,8
  808ee8:	3a000430 	cmpltui	r8,r7,16
  808eec:	3108b03a 	or	r4,r6,r4
  808ef0:	200c943a 	slli	r6,r4,16
  808ef4:	310cb03a 	or	r6,r6,r4
  808ef8:	40000e1e 	bne	r8,zero,808f34 <memset+0x98>
  808efc:	393ffc04 	addi	r4,r7,-16
  808f00:	2008d13a 	srli	r4,r4,4
  808f04:	21000044 	addi	r4,r4,1
  808f08:	2008913a 	slli	r4,r4,4
  808f0c:	1909883a 	add	r4,r3,r4
  808f10:	19800015 	stw	r6,0(r3)
  808f14:	19800115 	stw	r6,4(r3)
  808f18:	19800215 	stw	r6,8(r3)
  808f1c:	19800315 	stw	r6,12(r3)
  808f20:	18c00404 	addi	r3,r3,16
  808f24:	20fffa1e 	bne	r4,r3,808f10 <memset+0x74>
  808f28:	3900030c 	andi	r4,r7,12
  808f2c:	39c003cc 	andi	r7,r7,15
  808f30:	20000d26 	beq	r4,zero,808f68 <memset+0xcc>
  808f34:	1811883a 	mov	r8,r3
  808f38:	42000104 	addi	r8,r8,4
  808f3c:	3a09c83a 	sub	r4,r7,r8
  808f40:	1909883a 	add	r4,r3,r4
  808f44:	21000128 	cmpgeui	r4,r4,4
  808f48:	41bfff15 	stw	r6,-4(r8)
  808f4c:	203ffa1e 	bne	r4,zero,808f38 <memset+0x9c>
  808f50:	393fff04 	addi	r4,r7,-4
  808f54:	2008d0ba 	srli	r4,r4,2
  808f58:	39c000cc 	andi	r7,r7,3
  808f5c:	21000044 	addi	r4,r4,1
  808f60:	200890ba 	slli	r4,r4,2
  808f64:	1907883a 	add	r3,r3,r4
  808f68:	38000426 	beq	r7,zero,808f7c <memset+0xe0>
  808f6c:	19cf883a 	add	r7,r3,r7
  808f70:	18c00044 	addi	r3,r3,1
  808f74:	197fffc5 	stb	r5,-1(r3)
  808f78:	38fffd1e 	bne	r7,r3,808f70 <memset+0xd4>
  808f7c:	f800283a 	ret
  808f80:	2007883a 	mov	r3,r4
  808f84:	300f883a 	mov	r7,r6
  808f88:	003fd306 	br	808ed8 <memset+0x3c>

00808f8c <_Balloc>:
  808f8c:	20801317 	ldw	r2,76(r4)
  808f90:	defffc04 	addi	sp,sp,-16
  808f94:	dc400115 	stw	r17,4(sp)
  808f98:	dc000015 	stw	r16,0(sp)
  808f9c:	dfc00315 	stw	ra,12(sp)
  808fa0:	dc800215 	stw	r18,8(sp)
  808fa4:	2021883a 	mov	r16,r4
  808fa8:	2823883a 	mov	r17,r5
  808fac:	10000e26 	beq	r2,zero,808fe8 <_Balloc+0x5c>
  808fb0:	880690ba 	slli	r3,r17,2
  808fb4:	10c7883a 	add	r3,r2,r3
  808fb8:	18800017 	ldw	r2,0(r3)
  808fbc:	10001126 	beq	r2,zero,809004 <_Balloc+0x78>
  808fc0:	11000017 	ldw	r4,0(r2)
  808fc4:	19000015 	stw	r4,0(r3)
  808fc8:	10000415 	stw	zero,16(r2)
  808fcc:	10000315 	stw	zero,12(r2)
  808fd0:	dfc00317 	ldw	ra,12(sp)
  808fd4:	dc800217 	ldw	r18,8(sp)
  808fd8:	dc400117 	ldw	r17,4(sp)
  808fdc:	dc000017 	ldw	r16,0(sp)
  808fe0:	dec00404 	addi	sp,sp,16
  808fe4:	f800283a 	ret
  808fe8:	01800844 	movi	r6,33
  808fec:	01400104 	movi	r5,4
  808ff0:	080c1e40 	call	80c1e4 <_calloc_r>
  808ff4:	80801315 	stw	r2,76(r16)
  808ff8:	103fed1e 	bne	r2,zero,808fb0 <_Balloc+0x24>
  808ffc:	0005883a 	mov	r2,zero
  809000:	003ff306 	br	808fd0 <_Balloc+0x44>
  809004:	04800044 	movi	r18,1
  809008:	9464983a 	sll	r18,r18,r17
  80900c:	01400044 	movi	r5,1
  809010:	8009883a 	mov	r4,r16
  809014:	91800144 	addi	r6,r18,5
  809018:	300c90ba 	slli	r6,r6,2
  80901c:	080c1e40 	call	80c1e4 <_calloc_r>
  809020:	103ff626 	beq	r2,zero,808ffc <_Balloc+0x70>
  809024:	14400115 	stw	r17,4(r2)
  809028:	14800215 	stw	r18,8(r2)
  80902c:	003fe606 	br	808fc8 <_Balloc+0x3c>

00809030 <_Bfree>:
  809030:	28000726 	beq	r5,zero,809050 <_Bfree+0x20>
  809034:	28c00117 	ldw	r3,4(r5)
  809038:	20801317 	ldw	r2,76(r4)
  80903c:	180690ba 	slli	r3,r3,2
  809040:	10c5883a 	add	r2,r2,r3
  809044:	10c00017 	ldw	r3,0(r2)
  809048:	28c00015 	stw	r3,0(r5)
  80904c:	11400015 	stw	r5,0(r2)
  809050:	f800283a 	ret

00809054 <__multadd>:
  809054:	defff704 	addi	sp,sp,-36
  809058:	dc800215 	stw	r18,8(sp)
  80905c:	2c800417 	ldw	r18,16(r5)
  809060:	ddc00715 	stw	r23,28(sp)
  809064:	dd800615 	stw	r22,24(sp)
  809068:	dd400515 	stw	r21,20(sp)
  80906c:	dd000415 	stw	r20,16(sp)
  809070:	dcc00315 	stw	r19,12(sp)
  809074:	dc400115 	stw	r17,4(sp)
  809078:	dfc00815 	stw	ra,32(sp)
  80907c:	dc000015 	stw	r16,0(sp)
  809080:	2827883a 	mov	r19,r5
  809084:	2029883a 	mov	r20,r4
  809088:	302b883a 	mov	r21,r6
  80908c:	3823883a 	mov	r17,r7
  809090:	2d800504 	addi	r22,r5,20
  809094:	002f883a 	mov	r23,zero
  809098:	b4000017 	ldw	r16,0(r22)
  80909c:	a80b883a 	mov	r5,r21
  8090a0:	b5800104 	addi	r22,r22,4
  8090a4:	813fffcc 	andi	r4,r16,65535
  8090a8:	08031b00 	call	8031b0 <__mulsi3>
  8090ac:	8008d43a 	srli	r4,r16,16
  8090b0:	a80b883a 	mov	r5,r21
  8090b4:	1461883a 	add	r16,r2,r17
  8090b8:	08031b00 	call	8031b0 <__mulsi3>
  8090bc:	800ed43a 	srli	r7,r16,16
  8090c0:	843fffcc 	andi	r16,r16,65535
  8090c4:	bdc00044 	addi	r23,r23,1
  8090c8:	11c5883a 	add	r2,r2,r7
  8090cc:	1006943a 	slli	r3,r2,16
  8090d0:	1022d43a 	srli	r17,r2,16
  8090d4:	1c21883a 	add	r16,r3,r16
  8090d8:	b43fff15 	stw	r16,-4(r22)
  8090dc:	bcbfee16 	blt	r23,r18,809098 <__multadd+0x44>
  8090e0:	88000826 	beq	r17,zero,809104 <__multadd+0xb0>
  8090e4:	98800217 	ldw	r2,8(r19)
  8090e8:	9080120e 	bge	r18,r2,809134 <__multadd+0xe0>
  8090ec:	90800144 	addi	r2,r18,5
  8090f0:	100490ba 	slli	r2,r2,2
  8090f4:	94800044 	addi	r18,r18,1
  8090f8:	9885883a 	add	r2,r19,r2
  8090fc:	14400015 	stw	r17,0(r2)
  809100:	9c800415 	stw	r18,16(r19)
  809104:	9805883a 	mov	r2,r19
  809108:	dfc00817 	ldw	ra,32(sp)
  80910c:	ddc00717 	ldw	r23,28(sp)
  809110:	dd800617 	ldw	r22,24(sp)
  809114:	dd400517 	ldw	r21,20(sp)
  809118:	dd000417 	ldw	r20,16(sp)
  80911c:	dcc00317 	ldw	r19,12(sp)
  809120:	dc800217 	ldw	r18,8(sp)
  809124:	dc400117 	ldw	r17,4(sp)
  809128:	dc000017 	ldw	r16,0(sp)
  80912c:	dec00904 	addi	sp,sp,36
  809130:	f800283a 	ret
  809134:	99400117 	ldw	r5,4(r19)
  809138:	a009883a 	mov	r4,r20
  80913c:	29400044 	addi	r5,r5,1
  809140:	0808f8c0 	call	808f8c <_Balloc>
  809144:	1021883a 	mov	r16,r2
  809148:	10001226 	beq	r2,zero,809194 <__multadd+0x140>
  80914c:	99800417 	ldw	r6,16(r19)
  809150:	99400304 	addi	r5,r19,12
  809154:	11000304 	addi	r4,r2,12
  809158:	31800084 	addi	r6,r6,2
  80915c:	300c90ba 	slli	r6,r6,2
  809160:	0808c700 	call	808c70 <memcpy>
  809164:	98000926 	beq	r19,zero,80918c <__multadd+0x138>
  809168:	98c00117 	ldw	r3,4(r19)
  80916c:	a0801317 	ldw	r2,76(r20)
  809170:	180690ba 	slli	r3,r3,2
  809174:	10c5883a 	add	r2,r2,r3
  809178:	10c00017 	ldw	r3,0(r2)
  80917c:	98c00015 	stw	r3,0(r19)
  809180:	14c00015 	stw	r19,0(r2)
  809184:	8027883a 	mov	r19,r16
  809188:	003fd806 	br	8090ec <__multadd+0x98>
  80918c:	8027883a 	mov	r19,r16
  809190:	003fd606 	br	8090ec <__multadd+0x98>
  809194:	01c02074 	movhi	r7,129
  809198:	01002074 	movhi	r4,129
  80919c:	39c9b904 	addi	r7,r7,9956
  8091a0:	000d883a 	mov	r6,zero
  8091a4:	01402d44 	movi	r5,181
  8091a8:	2109ce04 	addi	r4,r4,10040
  8091ac:	080c16c0 	call	80c16c <__assert_func>

008091b0 <__s2b>:
  8091b0:	defff904 	addi	sp,sp,-28
  8091b4:	dc800215 	stw	r18,8(sp)
  8091b8:	dc000015 	stw	r16,0(sp)
  8091bc:	2025883a 	mov	r18,r4
  8091c0:	2821883a 	mov	r16,r5
  8091c4:	39000204 	addi	r4,r7,8
  8091c8:	01400244 	movi	r5,9
  8091cc:	dcc00315 	stw	r19,12(sp)
  8091d0:	dc400115 	stw	r17,4(sp)
  8091d4:	dfc00615 	stw	ra,24(sp)
  8091d8:	3823883a 	mov	r17,r7
  8091dc:	dd400515 	stw	r21,20(sp)
  8091e0:	dd000415 	stw	r20,16(sp)
  8091e4:	3027883a 	mov	r19,r6
  8091e8:	0802ffc0 	call	802ffc <__divsi3>
  8091ec:	88c00290 	cmplti	r3,r17,10
  8091f0:	1800341e 	bne	r3,zero,8092c4 <__s2b+0x114>
  8091f4:	00c00044 	movi	r3,1
  8091f8:	000b883a 	mov	r5,zero
  8091fc:	18c7883a 	add	r3,r3,r3
  809200:	29400044 	addi	r5,r5,1
  809204:	18bffd16 	blt	r3,r2,8091fc <__s2b+0x4c>
  809208:	9009883a 	mov	r4,r18
  80920c:	0808f8c0 	call	808f8c <_Balloc>
  809210:	100b883a 	mov	r5,r2
  809214:	10002d26 	beq	r2,zero,8092cc <__s2b+0x11c>
  809218:	d8800717 	ldw	r2,28(sp)
  80921c:	28800515 	stw	r2,20(r5)
  809220:	00800044 	movi	r2,1
  809224:	28800415 	stw	r2,16(r5)
  809228:	98800290 	cmplti	r2,r19,10
  80922c:	1000221e 	bne	r2,zero,8092b8 <__s2b+0x108>
  809230:	85400244 	addi	r21,r16,9
  809234:	a829883a 	mov	r20,r21
  809238:	84e1883a 	add	r16,r16,r19
  80923c:	a1c00007 	ldb	r7,0(r20)
  809240:	01800284 	movi	r6,10
  809244:	9009883a 	mov	r4,r18
  809248:	39fff404 	addi	r7,r7,-48
  80924c:	08090540 	call	809054 <__multadd>
  809250:	a5000044 	addi	r20,r20,1
  809254:	100b883a 	mov	r5,r2
  809258:	a43ff81e 	bne	r20,r16,80923c <__s2b+0x8c>
  80925c:	9c3ffe04 	addi	r16,r19,-8
  809260:	ac21883a 	add	r16,r21,r16
  809264:	9c400a0e 	bge	r19,r17,809290 <__s2b+0xe0>
  809268:	8ce3c83a 	sub	r17,r17,r19
  80926c:	8463883a 	add	r17,r16,r17
  809270:	81c00007 	ldb	r7,0(r16)
  809274:	01800284 	movi	r6,10
  809278:	9009883a 	mov	r4,r18
  80927c:	39fff404 	addi	r7,r7,-48
  809280:	08090540 	call	809054 <__multadd>
  809284:	84000044 	addi	r16,r16,1
  809288:	100b883a 	mov	r5,r2
  80928c:	8c3ff81e 	bne	r17,r16,809270 <__s2b+0xc0>
  809290:	2805883a 	mov	r2,r5
  809294:	dfc00617 	ldw	ra,24(sp)
  809298:	dd400517 	ldw	r21,20(sp)
  80929c:	dd000417 	ldw	r20,16(sp)
  8092a0:	dcc00317 	ldw	r19,12(sp)
  8092a4:	dc800217 	ldw	r18,8(sp)
  8092a8:	dc400117 	ldw	r17,4(sp)
  8092ac:	dc000017 	ldw	r16,0(sp)
  8092b0:	dec00704 	addi	sp,sp,28
  8092b4:	f800283a 	ret
  8092b8:	84000284 	addi	r16,r16,10
  8092bc:	04c00244 	movi	r19,9
  8092c0:	003fe806 	br	809264 <__s2b+0xb4>
  8092c4:	000b883a 	mov	r5,zero
  8092c8:	003fcf06 	br	809208 <__s2b+0x58>
  8092cc:	01c02074 	movhi	r7,129
  8092d0:	01002074 	movhi	r4,129
  8092d4:	39c9b904 	addi	r7,r7,9956
  8092d8:	000d883a 	mov	r6,zero
  8092dc:	01403384 	movi	r5,206
  8092e0:	2109ce04 	addi	r4,r4,10040
  8092e4:	080c16c0 	call	80c16c <__assert_func>

008092e8 <__hi0bits>:
  8092e8:	20bfffec 	andhi	r2,r4,65535
  8092ec:	1000131e 	bne	r2,zero,80933c <__hi0bits+0x54>
  8092f0:	2008943a 	slli	r4,r4,16
  8092f4:	00800404 	movi	r2,16
  8092f8:	20ffc02c 	andhi	r3,r4,65280
  8092fc:	1800021e 	bne	r3,zero,809308 <__hi0bits+0x20>
  809300:	2008923a 	slli	r4,r4,8
  809304:	10800204 	addi	r2,r2,8
  809308:	20fc002c 	andhi	r3,r4,61440
  80930c:	1800021e 	bne	r3,zero,809318 <__hi0bits+0x30>
  809310:	2008913a 	slli	r4,r4,4
  809314:	10800104 	addi	r2,r2,4
  809318:	20f0002c 	andhi	r3,r4,49152
  80931c:	1800021e 	bne	r3,zero,809328 <__hi0bits+0x40>
  809320:	200890ba 	slli	r4,r4,2
  809324:	10800084 	addi	r2,r2,2
  809328:	20000316 	blt	r4,zero,809338 <__hi0bits+0x50>
  80932c:	2110002c 	andhi	r4,r4,16384
  809330:	10800044 	addi	r2,r2,1
  809334:	20000326 	beq	r4,zero,809344 <__hi0bits+0x5c>
  809338:	f800283a 	ret
  80933c:	0005883a 	mov	r2,zero
  809340:	003fed06 	br	8092f8 <__hi0bits+0x10>
  809344:	00800804 	movi	r2,32
  809348:	f800283a 	ret

0080934c <__lo0bits>:
  80934c:	20c00017 	ldw	r3,0(r4)
  809350:	188001cc 	andi	r2,r3,7
  809354:	10000826 	beq	r2,zero,809378 <__lo0bits+0x2c>
  809358:	1880004c 	andi	r2,r3,1
  80935c:	10001f1e 	bne	r2,zero,8093dc <__lo0bits+0x90>
  809360:	1880008c 	andi	r2,r3,2
  809364:	10002126 	beq	r2,zero,8093ec <__lo0bits+0xa0>
  809368:	1806d07a 	srli	r3,r3,1
  80936c:	00800044 	movi	r2,1
  809370:	20c00015 	stw	r3,0(r4)
  809374:	f800283a 	ret
  809378:	18bfffcc 	andi	r2,r3,65535
  80937c:	10001426 	beq	r2,zero,8093d0 <__lo0bits+0x84>
  809380:	0005883a 	mov	r2,zero
  809384:	19403fcc 	andi	r5,r3,255
  809388:	2800021e 	bne	r5,zero,809394 <__lo0bits+0x48>
  80938c:	1806d23a 	srli	r3,r3,8
  809390:	10800204 	addi	r2,r2,8
  809394:	194003cc 	andi	r5,r3,15
  809398:	2800021e 	bne	r5,zero,8093a4 <__lo0bits+0x58>
  80939c:	1806d13a 	srli	r3,r3,4
  8093a0:	10800104 	addi	r2,r2,4
  8093a4:	194000cc 	andi	r5,r3,3
  8093a8:	2800021e 	bne	r5,zero,8093b4 <__lo0bits+0x68>
  8093ac:	1806d0ba 	srli	r3,r3,2
  8093b0:	10800084 	addi	r2,r2,2
  8093b4:	1940004c 	andi	r5,r3,1
  8093b8:	2800031e 	bne	r5,zero,8093c8 <__lo0bits+0x7c>
  8093bc:	1806d07a 	srli	r3,r3,1
  8093c0:	10800044 	addi	r2,r2,1
  8093c4:	18000726 	beq	r3,zero,8093e4 <__lo0bits+0x98>
  8093c8:	20c00015 	stw	r3,0(r4)
  8093cc:	f800283a 	ret
  8093d0:	1806d43a 	srli	r3,r3,16
  8093d4:	00800404 	movi	r2,16
  8093d8:	003fea06 	br	809384 <__lo0bits+0x38>
  8093dc:	0005883a 	mov	r2,zero
  8093e0:	f800283a 	ret
  8093e4:	00800804 	movi	r2,32
  8093e8:	f800283a 	ret
  8093ec:	1806d0ba 	srli	r3,r3,2
  8093f0:	00800084 	movi	r2,2
  8093f4:	20c00015 	stw	r3,0(r4)
  8093f8:	f800283a 	ret

008093fc <__i2b>:
  8093fc:	20c01317 	ldw	r3,76(r4)
  809400:	defffd04 	addi	sp,sp,-12
  809404:	dc400115 	stw	r17,4(sp)
  809408:	dc000015 	stw	r16,0(sp)
  80940c:	dfc00215 	stw	ra,8(sp)
  809410:	2021883a 	mov	r16,r4
  809414:	2823883a 	mov	r17,r5
  809418:	18000d26 	beq	r3,zero,809450 <__i2b+0x54>
  80941c:	18800117 	ldw	r2,4(r3)
  809420:	10001826 	beq	r2,zero,809484 <__i2b+0x88>
  809424:	11000017 	ldw	r4,0(r2)
  809428:	19000115 	stw	r4,4(r3)
  80942c:	00c00044 	movi	r3,1
  809430:	10000315 	stw	zero,12(r2)
  809434:	14400515 	stw	r17,20(r2)
  809438:	10c00415 	stw	r3,16(r2)
  80943c:	dfc00217 	ldw	ra,8(sp)
  809440:	dc400117 	ldw	r17,4(sp)
  809444:	dc000017 	ldw	r16,0(sp)
  809448:	dec00304 	addi	sp,sp,12
  80944c:	f800283a 	ret
  809450:	01800844 	movi	r6,33
  809454:	01400104 	movi	r5,4
  809458:	080c1e40 	call	80c1e4 <_calloc_r>
  80945c:	80801315 	stw	r2,76(r16)
  809460:	1007883a 	mov	r3,r2
  809464:	103fed1e 	bne	r2,zero,80941c <__i2b+0x20>
  809468:	01c02074 	movhi	r7,129
  80946c:	01002074 	movhi	r4,129
  809470:	39c9b904 	addi	r7,r7,9956
  809474:	000d883a 	mov	r6,zero
  809478:	01405004 	movi	r5,320
  80947c:	2109ce04 	addi	r4,r4,10040
  809480:	080c16c0 	call	80c16c <__assert_func>
  809484:	01800704 	movi	r6,28
  809488:	01400044 	movi	r5,1
  80948c:	8009883a 	mov	r4,r16
  809490:	080c1e40 	call	80c1e4 <_calloc_r>
  809494:	103ff426 	beq	r2,zero,809468 <__i2b+0x6c>
  809498:	00c00044 	movi	r3,1
  80949c:	10c00115 	stw	r3,4(r2)
  8094a0:	00c00084 	movi	r3,2
  8094a4:	10c00215 	stw	r3,8(r2)
  8094a8:	003fe006 	br	80942c <__i2b+0x30>

008094ac <__multiply>:
  8094ac:	defff004 	addi	sp,sp,-64
  8094b0:	dd800c15 	stw	r22,48(sp)
  8094b4:	dc400715 	stw	r17,28(sp)
  8094b8:	2d800417 	ldw	r22,16(r5)
  8094bc:	34400417 	ldw	r17,16(r6)
  8094c0:	dc800815 	stw	r18,32(sp)
  8094c4:	dc000615 	stw	r16,24(sp)
  8094c8:	dfc00f15 	stw	ra,60(sp)
  8094cc:	df000e15 	stw	fp,56(sp)
  8094d0:	ddc00d15 	stw	r23,52(sp)
  8094d4:	dd400b15 	stw	r21,44(sp)
  8094d8:	dd000a15 	stw	r20,40(sp)
  8094dc:	dcc00915 	stw	r19,36(sp)
  8094e0:	2825883a 	mov	r18,r5
  8094e4:	3021883a 	mov	r16,r6
  8094e8:	b4400516 	blt	r22,r17,809500 <__multiply+0x54>
  8094ec:	8807883a 	mov	r3,r17
  8094f0:	2821883a 	mov	r16,r5
  8094f4:	b023883a 	mov	r17,r22
  8094f8:	3025883a 	mov	r18,r6
  8094fc:	182d883a 	mov	r22,r3
  809500:	80800217 	ldw	r2,8(r16)
  809504:	8d87883a 	add	r3,r17,r22
  809508:	d8c00015 	stw	r3,0(sp)
  80950c:	81400117 	ldw	r5,4(r16)
  809510:	10c0010e 	bge	r2,r3,809518 <__multiply+0x6c>
  809514:	29400044 	addi	r5,r5,1
  809518:	0808f8c0 	call	808f8c <_Balloc>
  80951c:	d8800515 	stw	r2,20(sp)
  809520:	10008c26 	beq	r2,zero,809754 <__multiply+0x2a8>
  809524:	d8800017 	ldw	r2,0(sp)
  809528:	102690ba 	slli	r19,r2,2
  80952c:	d8800517 	ldw	r2,20(sp)
  809530:	15000504 	addi	r20,r2,20
  809534:	a4c5883a 	add	r2,r20,r19
  809538:	d8800115 	stw	r2,4(sp)
  80953c:	a0800a2e 	bgeu	r20,r2,809568 <__multiply+0xbc>
  809540:	d8800117 	ldw	r2,4(sp)
  809544:	d8c00517 	ldw	r3,20(sp)
  809548:	000b883a 	mov	r5,zero
  80954c:	a009883a 	mov	r4,r20
  809550:	10cdc83a 	sub	r6,r2,r3
  809554:	31bffac4 	addi	r6,r6,-21
  809558:	300cd0ba 	srli	r6,r6,2
  80955c:	31800044 	addi	r6,r6,1
  809560:	300c90ba 	slli	r6,r6,2
  809564:	0808e9c0 	call	808e9c <memset>
  809568:	b02c90ba 	slli	r22,r22,2
  80956c:	882290ba 	slli	r17,r17,2
  809570:	94800504 	addi	r18,r18,20
  809574:	80800504 	addi	r2,r16,20
  809578:	9587883a 	add	r3,r18,r22
  80957c:	d8800315 	stw	r2,12(sp)
  809580:	d8c00215 	stw	r3,8(sp)
  809584:	1463883a 	add	r17,r2,r17
  809588:	90c0542e 	bgeu	r18,r3,8096dc <__multiply+0x230>
  80958c:	80800544 	addi	r2,r16,21
  809590:	88806d36 	bltu	r17,r2,809748 <__multiply+0x29c>
  809594:	8c05c83a 	sub	r2,r17,r16
  809598:	10bffac4 	addi	r2,r2,-21
  80959c:	1004d0ba 	srli	r2,r2,2
  8095a0:	10800044 	addi	r2,r2,1
  8095a4:	100490ba 	slli	r2,r2,2
  8095a8:	d8800415 	stw	r2,16(sp)
  8095ac:	00000606 	br	8095c8 <__multiply+0x11c>
  8095b0:	102ad43a 	srli	r21,r2,16
  8095b4:	a800271e 	bne	r21,zero,809654 <__multiply+0x1a8>
  8095b8:	d8800217 	ldw	r2,8(sp)
  8095bc:	94800104 	addi	r18,r18,4
  8095c0:	a5000104 	addi	r20,r20,4
  8095c4:	9080452e 	bgeu	r18,r2,8096dc <__multiply+0x230>
  8095c8:	90800017 	ldw	r2,0(r18)
  8095cc:	15ffffcc 	andi	r23,r2,65535
  8095d0:	b83ff726 	beq	r23,zero,8095b0 <__multiply+0x104>
  8095d4:	dd400317 	ldw	r21,12(sp)
  8095d8:	a02d883a 	mov	r22,r20
  8095dc:	0027883a 	mov	r19,zero
  8095e0:	af000017 	ldw	fp,0(r21)
  8095e4:	b4000017 	ldw	r16,0(r22)
  8095e8:	b80b883a 	mov	r5,r23
  8095ec:	e13fffcc 	andi	r4,fp,65535
  8095f0:	08031b00 	call	8031b0 <__mulsi3>
  8095f4:	e008d43a 	srli	r4,fp,16
  8095f8:	823fffcc 	andi	r8,r16,65535
  8095fc:	1205883a 	add	r2,r2,r8
  809600:	b80b883a 	mov	r5,r23
  809604:	14e7883a 	add	r19,r2,r19
  809608:	8020d43a 	srli	r16,r16,16
  80960c:	08031b00 	call	8031b0 <__mulsi3>
  809610:	9808d43a 	srli	r4,r19,16
  809614:	1405883a 	add	r2,r2,r16
  809618:	98ffffcc 	andi	r3,r19,65535
  80961c:	1105883a 	add	r2,r2,r4
  809620:	1008943a 	slli	r4,r2,16
  809624:	b5800104 	addi	r22,r22,4
  809628:	ad400104 	addi	r21,r21,4
  80962c:	20c6b03a 	or	r3,r4,r3
  809630:	b0ffff15 	stw	r3,-4(r22)
  809634:	1026d43a 	srli	r19,r2,16
  809638:	ac7fe936 	bltu	r21,r17,8095e0 <__multiply+0x134>
  80963c:	d8800417 	ldw	r2,16(sp)
  809640:	a085883a 	add	r2,r20,r2
  809644:	14c00015 	stw	r19,0(r2)
  809648:	90800017 	ldw	r2,0(r18)
  80964c:	102ad43a 	srli	r21,r2,16
  809650:	a83fd926 	beq	r21,zero,8095b8 <__multiply+0x10c>
  809654:	a5c00017 	ldw	r23,0(r20)
  809658:	dd800317 	ldw	r22,12(sp)
  80965c:	a027883a 	mov	r19,r20
  809660:	b821883a 	mov	r16,r23
  809664:	0039883a 	mov	fp,zero
  809668:	b100000b 	ldhu	r4,0(r22)
  80966c:	a80b883a 	mov	r5,r21
  809670:	9cc00104 	addi	r19,r19,4
  809674:	08031b00 	call	8031b0 <__mulsi3>
  809678:	800cd43a 	srli	r6,r16,16
  80967c:	b8ffffcc 	andi	r3,r23,65535
  809680:	b5800104 	addi	r22,r22,4
  809684:	118d883a 	add	r6,r2,r6
  809688:	3739883a 	add	fp,r6,fp
  80968c:	e004943a 	slli	r2,fp,16
  809690:	9c000017 	ldw	r16,0(r19)
  809694:	a80b883a 	mov	r5,r21
  809698:	10c6b03a 	or	r3,r2,r3
  80969c:	98ffff15 	stw	r3,-4(r19)
  8096a0:	b13fff8b 	ldhu	r4,-2(r22)
  8096a4:	08031b00 	call	8031b0 <__mulsi3>
  8096a8:	e00cd43a 	srli	r6,fp,16
  8096ac:	80ffffcc 	andi	r3,r16,65535
  8096b0:	10c7883a 	add	r3,r2,r3
  8096b4:	19af883a 	add	r23,r3,r6
  8096b8:	b838d43a 	srli	fp,r23,16
  8096bc:	b47fea36 	bltu	r22,r17,809668 <__multiply+0x1bc>
  8096c0:	d8800417 	ldw	r2,16(sp)
  8096c4:	94800104 	addi	r18,r18,4
  8096c8:	a085883a 	add	r2,r20,r2
  8096cc:	15c00015 	stw	r23,0(r2)
  8096d0:	d8800217 	ldw	r2,8(sp)
  8096d4:	a5000104 	addi	r20,r20,4
  8096d8:	90bfbb36 	bltu	r18,r2,8095c8 <__multiply+0x11c>
  8096dc:	d8800017 	ldw	r2,0(sp)
  8096e0:	00800516 	blt	zero,r2,8096f8 <__multiply+0x24c>
  8096e4:	00000906 	br	80970c <__multiply+0x260>
  8096e8:	d8800017 	ldw	r2,0(sp)
  8096ec:	10bfffc4 	addi	r2,r2,-1
  8096f0:	d8800015 	stw	r2,0(sp)
  8096f4:	10000526 	beq	r2,zero,80970c <__multiply+0x260>
  8096f8:	d8c00117 	ldw	r3,4(sp)
  8096fc:	18bfff17 	ldw	r2,-4(r3)
  809700:	18ffff04 	addi	r3,r3,-4
  809704:	d8c00115 	stw	r3,4(sp)
  809708:	103ff726 	beq	r2,zero,8096e8 <__multiply+0x23c>
  80970c:	d8800517 	ldw	r2,20(sp)
  809710:	d8c00017 	ldw	r3,0(sp)
  809714:	10c00415 	stw	r3,16(r2)
  809718:	dfc00f17 	ldw	ra,60(sp)
  80971c:	df000e17 	ldw	fp,56(sp)
  809720:	ddc00d17 	ldw	r23,52(sp)
  809724:	dd800c17 	ldw	r22,48(sp)
  809728:	dd400b17 	ldw	r21,44(sp)
  80972c:	dd000a17 	ldw	r20,40(sp)
  809730:	dcc00917 	ldw	r19,36(sp)
  809734:	dc800817 	ldw	r18,32(sp)
  809738:	dc400717 	ldw	r17,28(sp)
  80973c:	dc000617 	ldw	r16,24(sp)
  809740:	dec01004 	addi	sp,sp,64
  809744:	f800283a 	ret
  809748:	00800104 	movi	r2,4
  80974c:	d8800415 	stw	r2,16(sp)
  809750:	003f9d06 	br	8095c8 <__multiply+0x11c>
  809754:	01c02074 	movhi	r7,129
  809758:	01002074 	movhi	r4,129
  80975c:	39c9b904 	addi	r7,r7,9956
  809760:	000d883a 	mov	r6,zero
  809764:	01405744 	movi	r5,349
  809768:	2109ce04 	addi	r4,r4,10040
  80976c:	080c16c0 	call	80c16c <__assert_func>

00809770 <__pow5mult>:
  809770:	defffb04 	addi	sp,sp,-20
  809774:	dcc00315 	stw	r19,12(sp)
  809778:	dc000015 	stw	r16,0(sp)
  80977c:	dfc00415 	stw	ra,16(sp)
  809780:	dc800215 	stw	r18,8(sp)
  809784:	dc400115 	stw	r17,4(sp)
  809788:	308000cc 	andi	r2,r6,3
  80978c:	3021883a 	mov	r16,r6
  809790:	2027883a 	mov	r19,r4
  809794:	10002d1e 	bne	r2,zero,80984c <__pow5mult+0xdc>
  809798:	2825883a 	mov	r18,r5
  80979c:	8021d0ba 	srai	r16,r16,2
  8097a0:	80001926 	beq	r16,zero,809808 <__pow5mult+0x98>
  8097a4:	9c401217 	ldw	r17,72(r19)
  8097a8:	8800061e 	bne	r17,zero,8097c4 <__pow5mult+0x54>
  8097ac:	00002f06 	br	80986c <__pow5mult+0xfc>
  8097b0:	8021d07a 	srai	r16,r16,1
  8097b4:	80001426 	beq	r16,zero,809808 <__pow5mult+0x98>
  8097b8:	88800017 	ldw	r2,0(r17)
  8097bc:	10001a26 	beq	r2,zero,809828 <__pow5mult+0xb8>
  8097c0:	1023883a 	mov	r17,r2
  8097c4:	8080004c 	andi	r2,r16,1
  8097c8:	103ff926 	beq	r2,zero,8097b0 <__pow5mult+0x40>
  8097cc:	880d883a 	mov	r6,r17
  8097d0:	900b883a 	mov	r5,r18
  8097d4:	9809883a 	mov	r4,r19
  8097d8:	08094ac0 	call	8094ac <__multiply>
  8097dc:	90001926 	beq	r18,zero,809844 <__pow5mult+0xd4>
  8097e0:	91000117 	ldw	r4,4(r18)
  8097e4:	98c01317 	ldw	r3,76(r19)
  8097e8:	8021d07a 	srai	r16,r16,1
  8097ec:	200890ba 	slli	r4,r4,2
  8097f0:	1907883a 	add	r3,r3,r4
  8097f4:	19000017 	ldw	r4,0(r3)
  8097f8:	91000015 	stw	r4,0(r18)
  8097fc:	1c800015 	stw	r18,0(r3)
  809800:	1025883a 	mov	r18,r2
  809804:	803fec1e 	bne	r16,zero,8097b8 <__pow5mult+0x48>
  809808:	9005883a 	mov	r2,r18
  80980c:	dfc00417 	ldw	ra,16(sp)
  809810:	dcc00317 	ldw	r19,12(sp)
  809814:	dc800217 	ldw	r18,8(sp)
  809818:	dc400117 	ldw	r17,4(sp)
  80981c:	dc000017 	ldw	r16,0(sp)
  809820:	dec00504 	addi	sp,sp,20
  809824:	f800283a 	ret
  809828:	880d883a 	mov	r6,r17
  80982c:	880b883a 	mov	r5,r17
  809830:	9809883a 	mov	r4,r19
  809834:	08094ac0 	call	8094ac <__multiply>
  809838:	88800015 	stw	r2,0(r17)
  80983c:	10000015 	stw	zero,0(r2)
  809840:	003fdf06 	br	8097c0 <__pow5mult+0x50>
  809844:	1025883a 	mov	r18,r2
  809848:	003fd906 	br	8097b0 <__pow5mult+0x40>
  80984c:	100490ba 	slli	r2,r2,2
  809850:	00c02074 	movhi	r3,129
  809854:	000f883a 	mov	r7,zero
  809858:	10c7883a 	add	r3,r2,r3
  80985c:	1989dd17 	ldw	r6,10100(r3)
  809860:	08090540 	call	809054 <__multadd>
  809864:	1025883a 	mov	r18,r2
  809868:	003fcc06 	br	80979c <__pow5mult+0x2c>
  80986c:	01400044 	movi	r5,1
  809870:	9809883a 	mov	r4,r19
  809874:	0808f8c0 	call	808f8c <_Balloc>
  809878:	1023883a 	mov	r17,r2
  80987c:	10000726 	beq	r2,zero,80989c <__pow5mult+0x12c>
  809880:	00809c44 	movi	r2,625
  809884:	88800515 	stw	r2,20(r17)
  809888:	00800044 	movi	r2,1
  80988c:	88800415 	stw	r2,16(r17)
  809890:	9c401215 	stw	r17,72(r19)
  809894:	88000015 	stw	zero,0(r17)
  809898:	003fca06 	br	8097c4 <__pow5mult+0x54>
  80989c:	01c02074 	movhi	r7,129
  8098a0:	01002074 	movhi	r4,129
  8098a4:	39c9b904 	addi	r7,r7,9956
  8098a8:	000d883a 	mov	r6,zero
  8098ac:	01405004 	movi	r5,320
  8098b0:	2109ce04 	addi	r4,r4,10040
  8098b4:	080c16c0 	call	80c16c <__assert_func>

008098b8 <__lshift>:
  8098b8:	defff804 	addi	sp,sp,-32
  8098bc:	dd800615 	stw	r22,24(sp)
  8098c0:	dc000015 	stw	r16,0(sp)
  8098c4:	302dd17a 	srai	r22,r6,5
  8098c8:	2c000417 	ldw	r16,16(r5)
  8098cc:	28800217 	ldw	r2,8(r5)
  8098d0:	dd000415 	stw	r20,16(sp)
  8098d4:	b421883a 	add	r16,r22,r16
  8098d8:	dcc00315 	stw	r19,12(sp)
  8098dc:	dc800215 	stw	r18,8(sp)
  8098e0:	dc400115 	stw	r17,4(sp)
  8098e4:	dfc00715 	stw	ra,28(sp)
  8098e8:	dd400515 	stw	r21,20(sp)
  8098ec:	85000044 	addi	r20,r16,1
  8098f0:	2827883a 	mov	r19,r5
  8098f4:	3025883a 	mov	r18,r6
  8098f8:	29400117 	ldw	r5,4(r5)
  8098fc:	2023883a 	mov	r17,r4
  809900:	1500030e 	bge	r2,r20,809910 <__lshift+0x58>
  809904:	1085883a 	add	r2,r2,r2
  809908:	29400044 	addi	r5,r5,1
  80990c:	153ffd16 	blt	r2,r20,809904 <__lshift+0x4c>
  809910:	8809883a 	mov	r4,r17
  809914:	0808f8c0 	call	808f8c <_Balloc>
  809918:	102b883a 	mov	r21,r2
  80991c:	10004126 	beq	r2,zero,809a24 <__lshift+0x16c>
  809920:	11000504 	addi	r4,r2,20
  809924:	0580050e 	bge	zero,r22,80993c <__lshift+0x84>
  809928:	b02c90ba 	slli	r22,r22,2
  80992c:	000b883a 	mov	r5,zero
  809930:	b00d883a 	mov	r6,r22
  809934:	0808e9c0 	call	808e9c <memset>
  809938:	1589883a 	add	r4,r2,r22
  80993c:	9a000417 	ldw	r8,16(r19)
  809940:	98c00504 	addi	r3,r19,20
  809944:	948007cc 	andi	r18,r18,31
  809948:	401090ba 	slli	r8,r8,2
  80994c:	1a11883a 	add	r8,r3,r8
  809950:	90002c26 	beq	r18,zero,809a04 <__lshift+0x14c>
  809954:	01400804 	movi	r5,32
  809958:	2c8bc83a 	sub	r5,r5,r18
  80995c:	2005883a 	mov	r2,r4
  809960:	000f883a 	mov	r7,zero
  809964:	19800017 	ldw	r6,0(r3)
  809968:	10800104 	addi	r2,r2,4
  80996c:	18c00104 	addi	r3,r3,4
  809970:	348c983a 	sll	r6,r6,r18
  809974:	31ccb03a 	or	r6,r6,r7
  809978:	11bfff15 	stw	r6,-4(r2)
  80997c:	19bfff17 	ldw	r6,-4(r3)
  809980:	314ed83a 	srl	r7,r6,r5
  809984:	1a3ff736 	bltu	r3,r8,809964 <__lshift+0xac>
  809988:	98800544 	addi	r2,r19,21
  80998c:	40802336 	bltu	r8,r2,809a1c <__lshift+0x164>
  809990:	44c7c83a 	sub	r3,r8,r19
  809994:	18fffac4 	addi	r3,r3,-21
  809998:	1806d0ba 	srli	r3,r3,2
  80999c:	18c00044 	addi	r3,r3,1
  8099a0:	180690ba 	slli	r3,r3,2
  8099a4:	20c9883a 	add	r4,r4,r3
  8099a8:	21c00015 	stw	r7,0(r4)
  8099ac:	38000126 	beq	r7,zero,8099b4 <__lshift+0xfc>
  8099b0:	a021883a 	mov	r16,r20
  8099b4:	ac000415 	stw	r16,16(r21)
  8099b8:	98000726 	beq	r19,zero,8099d8 <__lshift+0x120>
  8099bc:	98c00117 	ldw	r3,4(r19)
  8099c0:	88801317 	ldw	r2,76(r17)
  8099c4:	180690ba 	slli	r3,r3,2
  8099c8:	10c5883a 	add	r2,r2,r3
  8099cc:	10c00017 	ldw	r3,0(r2)
  8099d0:	98c00015 	stw	r3,0(r19)
  8099d4:	14c00015 	stw	r19,0(r2)
  8099d8:	a805883a 	mov	r2,r21
  8099dc:	dfc00717 	ldw	ra,28(sp)
  8099e0:	dd800617 	ldw	r22,24(sp)
  8099e4:	dd400517 	ldw	r21,20(sp)
  8099e8:	dd000417 	ldw	r20,16(sp)
  8099ec:	dcc00317 	ldw	r19,12(sp)
  8099f0:	dc800217 	ldw	r18,8(sp)
  8099f4:	dc400117 	ldw	r17,4(sp)
  8099f8:	dc000017 	ldw	r16,0(sp)
  8099fc:	dec00804 	addi	sp,sp,32
  809a00:	f800283a 	ret
  809a04:	18800017 	ldw	r2,0(r3)
  809a08:	18c00104 	addi	r3,r3,4
  809a0c:	21000104 	addi	r4,r4,4
  809a10:	20bfff15 	stw	r2,-4(r4)
  809a14:	1a3ffb36 	bltu	r3,r8,809a04 <__lshift+0x14c>
  809a18:	003fe606 	br	8099b4 <__lshift+0xfc>
  809a1c:	00c00104 	movi	r3,4
  809a20:	003fe006 	br	8099a4 <__lshift+0xec>
  809a24:	01c02074 	movhi	r7,129
  809a28:	01002074 	movhi	r4,129
  809a2c:	39c9b904 	addi	r7,r7,9956
  809a30:	000d883a 	mov	r6,zero
  809a34:	01407644 	movi	r5,473
  809a38:	2109ce04 	addi	r4,r4,10040
  809a3c:	080c16c0 	call	80c16c <__assert_func>

00809a40 <__mcmp>:
  809a40:	21800417 	ldw	r6,16(r4)
  809a44:	28c00417 	ldw	r3,16(r5)
  809a48:	30c5c83a 	sub	r2,r6,r3
  809a4c:	30c00e1e 	bne	r6,r3,809a88 <__mcmp+0x48>
  809a50:	180690ba 	slli	r3,r3,2
  809a54:	21c00504 	addi	r7,r4,20
  809a58:	29400504 	addi	r5,r5,20
  809a5c:	38c9883a 	add	r4,r7,r3
  809a60:	28c7883a 	add	r3,r5,r3
  809a64:	00000106 	br	809a6c <__mcmp+0x2c>
  809a68:	3900082e 	bgeu	r7,r4,809a8c <__mcmp+0x4c>
  809a6c:	21bfff17 	ldw	r6,-4(r4)
  809a70:	197fff17 	ldw	r5,-4(r3)
  809a74:	213fff04 	addi	r4,r4,-4
  809a78:	18ffff04 	addi	r3,r3,-4
  809a7c:	317ffa26 	beq	r6,r5,809a68 <__mcmp+0x28>
  809a80:	3140032e 	bgeu	r6,r5,809a90 <__mcmp+0x50>
  809a84:	00bfffc4 	movi	r2,-1
  809a88:	f800283a 	ret
  809a8c:	f800283a 	ret
  809a90:	00800044 	movi	r2,1
  809a94:	f800283a 	ret

00809a98 <__mdiff>:
  809a98:	28800417 	ldw	r2,16(r5)
  809a9c:	30c00417 	ldw	r3,16(r6)
  809aa0:	defffc04 	addi	sp,sp,-16
  809aa4:	dc800215 	stw	r18,8(sp)
  809aa8:	dc400115 	stw	r17,4(sp)
  809aac:	dc000015 	stw	r16,0(sp)
  809ab0:	dfc00315 	stw	ra,12(sp)
  809ab4:	2823883a 	mov	r17,r5
  809ab8:	3021883a 	mov	r16,r6
  809abc:	10e5c83a 	sub	r18,r2,r3
  809ac0:	10c0641e 	bne	r2,r3,809c54 <__mdiff+0x1bc>
  809ac4:	180c90ba 	slli	r6,r3,2
  809ac8:	29400504 	addi	r5,r5,20
  809acc:	80c00504 	addi	r3,r16,20
  809ad0:	2985883a 	add	r2,r5,r6
  809ad4:	1987883a 	add	r3,r3,r6
  809ad8:	00000106 	br	809ae0 <__mdiff+0x48>
  809adc:	2880642e 	bgeu	r5,r2,809c70 <__mdiff+0x1d8>
  809ae0:	11bfff17 	ldw	r6,-4(r2)
  809ae4:	19ffff17 	ldw	r7,-4(r3)
  809ae8:	10bfff04 	addi	r2,r2,-4
  809aec:	18ffff04 	addi	r3,r3,-4
  809af0:	31fffa26 	beq	r6,r7,809adc <__mdiff+0x44>
  809af4:	31c05236 	bltu	r6,r7,809c40 <__mdiff+0x1a8>
  809af8:	89400117 	ldw	r5,4(r17)
  809afc:	0808f8c0 	call	808f8c <_Balloc>
  809b00:	10006226 	beq	r2,zero,809c8c <__mdiff+0x1f4>
  809b04:	8a400417 	ldw	r9,16(r17)
  809b08:	83000417 	ldw	r12,16(r16)
  809b0c:	8ac00504 	addi	r11,r17,20
  809b10:	481090ba 	slli	r8,r9,2
  809b14:	601890ba 	slli	r12,r12,2
  809b18:	81800504 	addi	r6,r16,20
  809b1c:	13400504 	addi	r13,r2,20
  809b20:	14800315 	stw	r18,12(r2)
  809b24:	5a11883a 	add	r8,r11,r8
  809b28:	3319883a 	add	r12,r6,r12
  809b2c:	681d883a 	mov	r14,r13
  809b30:	5815883a 	mov	r10,r11
  809b34:	0007883a 	mov	r3,zero
  809b38:	51000017 	ldw	r4,0(r10)
  809b3c:	31c00017 	ldw	r7,0(r6)
  809b40:	73800104 	addi	r14,r14,4
  809b44:	217fffcc 	andi	r5,r4,65535
  809b48:	28cb883a 	add	r5,r5,r3
  809b4c:	38ffffcc 	andi	r3,r7,65535
  809b50:	28cbc83a 	sub	r5,r5,r3
  809b54:	380ed43a 	srli	r7,r7,16
  809b58:	2006d43a 	srli	r3,r4,16
  809b5c:	2809d43a 	srai	r4,r5,16
  809b60:	297fffcc 	andi	r5,r5,65535
  809b64:	19c7c83a 	sub	r3,r3,r7
  809b68:	1907883a 	add	r3,r3,r4
  809b6c:	1808943a 	slli	r4,r3,16
  809b70:	31800104 	addi	r6,r6,4
  809b74:	1807d43a 	srai	r3,r3,16
  809b78:	214ab03a 	or	r5,r4,r5
  809b7c:	717fff15 	stw	r5,-4(r14)
  809b80:	52800104 	addi	r10,r10,4
  809b84:	333fec36 	bltu	r6,r12,809b38 <__mdiff+0xa0>
  809b88:	640fc83a 	sub	r7,r12,r16
  809b8c:	39fffac4 	addi	r7,r7,-21
  809b90:	84000544 	addi	r16,r16,21
  809b94:	380ed0ba 	srli	r7,r7,2
  809b98:	64003336 	bltu	r12,r16,809c68 <__mdiff+0x1d0>
  809b9c:	380890ba 	slli	r4,r7,2
  809ba0:	6909883a 	add	r4,r13,r4
  809ba4:	64002e36 	bltu	r12,r16,809c60 <__mdiff+0x1c8>
  809ba8:	39800044 	addi	r6,r7,1
  809bac:	300c90ba 	slli	r6,r6,2
  809bb0:	5997883a 	add	r11,r11,r6
  809bb4:	699b883a 	add	r13,r13,r6
  809bb8:	5a00152e 	bgeu	r11,r8,809c10 <__mdiff+0x178>
  809bbc:	680f883a 	mov	r7,r13
  809bc0:	580d883a 	mov	r6,r11
  809bc4:	31000017 	ldw	r4,0(r6)
  809bc8:	39c00104 	addi	r7,r7,4
  809bcc:	31800104 	addi	r6,r6,4
  809bd0:	217fffcc 	andi	r5,r4,65535
  809bd4:	28cb883a 	add	r5,r5,r3
  809bd8:	2815d43a 	srai	r10,r5,16
  809bdc:	2006d43a 	srli	r3,r4,16
  809be0:	297fffcc 	andi	r5,r5,65535
  809be4:	1a87883a 	add	r3,r3,r10
  809be8:	1814943a 	slli	r10,r3,16
  809bec:	1807d43a 	srai	r3,r3,16
  809bf0:	514ab03a 	or	r5,r10,r5
  809bf4:	397fff15 	stw	r5,-4(r7)
  809bf8:	323ff236 	bltu	r6,r8,809bc4 <__mdiff+0x12c>
  809bfc:	413fffc4 	addi	r4,r8,-1
  809c00:	22c9c83a 	sub	r4,r4,r11
  809c04:	2008d0ba 	srli	r4,r4,2
  809c08:	200890ba 	slli	r4,r4,2
  809c0c:	6909883a 	add	r4,r13,r4
  809c10:	2800041e 	bne	r5,zero,809c24 <__mdiff+0x18c>
  809c14:	20ffff17 	ldw	r3,-4(r4)
  809c18:	4a7fffc4 	addi	r9,r9,-1
  809c1c:	213fff04 	addi	r4,r4,-4
  809c20:	183ffc26 	beq	r3,zero,809c14 <__mdiff+0x17c>
  809c24:	12400415 	stw	r9,16(r2)
  809c28:	dfc00317 	ldw	ra,12(sp)
  809c2c:	dc800217 	ldw	r18,8(sp)
  809c30:	dc400117 	ldw	r17,4(sp)
  809c34:	dc000017 	ldw	r16,0(sp)
  809c38:	dec00404 	addi	sp,sp,16
  809c3c:	f800283a 	ret
  809c40:	8805883a 	mov	r2,r17
  809c44:	04800044 	movi	r18,1
  809c48:	8023883a 	mov	r17,r16
  809c4c:	1021883a 	mov	r16,r2
  809c50:	003fa906 	br	809af8 <__mdiff+0x60>
  809c54:	903ffa16 	blt	r18,zero,809c40 <__mdiff+0x1a8>
  809c58:	0025883a 	mov	r18,zero
  809c5c:	003fa606 	br	809af8 <__mdiff+0x60>
  809c60:	01800104 	movi	r6,4
  809c64:	003fd206 	br	809bb0 <__mdiff+0x118>
  809c68:	0009883a 	mov	r4,zero
  809c6c:	003fcc06 	br	809ba0 <__mdiff+0x108>
  809c70:	000b883a 	mov	r5,zero
  809c74:	0808f8c0 	call	808f8c <_Balloc>
  809c78:	10000b26 	beq	r2,zero,809ca8 <__mdiff+0x210>
  809c7c:	00c00044 	movi	r3,1
  809c80:	10c00415 	stw	r3,16(r2)
  809c84:	10000515 	stw	zero,20(r2)
  809c88:	003fe706 	br	809c28 <__mdiff+0x190>
  809c8c:	01c02074 	movhi	r7,129
  809c90:	01002074 	movhi	r4,129
  809c94:	39c9b904 	addi	r7,r7,9956
  809c98:	000d883a 	mov	r6,zero
  809c9c:	01409004 	movi	r5,576
  809ca0:	2109ce04 	addi	r4,r4,10040
  809ca4:	080c16c0 	call	80c16c <__assert_func>
  809ca8:	01c02074 	movhi	r7,129
  809cac:	01002074 	movhi	r4,129
  809cb0:	39c9b904 	addi	r7,r7,9956
  809cb4:	000d883a 	mov	r6,zero
  809cb8:	01408c84 	movi	r5,562
  809cbc:	2109ce04 	addi	r4,r4,10040
  809cc0:	080c16c0 	call	80c16c <__assert_func>

00809cc4 <__ulp>:
  809cc4:	28dffc2c 	andhi	r3,r5,32752
  809cc8:	017f3034 	movhi	r5,64704
  809ccc:	1947883a 	add	r3,r3,r5
  809cd0:	00c0020e 	bge	zero,r3,809cdc <__ulp+0x18>
  809cd4:	0005883a 	mov	r2,zero
  809cd8:	f800283a 	ret
  809cdc:	00c7c83a 	sub	r3,zero,r3
  809ce0:	1807d53a 	srai	r3,r3,20
  809ce4:	18800508 	cmpgei	r2,r3,20
  809ce8:	1000041e 	bne	r2,zero,809cfc <__ulp+0x38>
  809cec:	00800234 	movhi	r2,8
  809cf0:	10c7d83a 	sra	r3,r2,r3
  809cf4:	0005883a 	mov	r2,zero
  809cf8:	f800283a 	ret
  809cfc:	193ffb04 	addi	r4,r3,-20
  809d00:	208007c8 	cmpgei	r2,r4,31
  809d04:	0007883a 	mov	r3,zero
  809d08:	1000031e 	bne	r2,zero,809d18 <__ulp+0x54>
  809d0c:	00a00034 	movhi	r2,32768
  809d10:	1104d83a 	srl	r2,r2,r4
  809d14:	f800283a 	ret
  809d18:	00800044 	movi	r2,1
  809d1c:	f800283a 	ret

00809d20 <__b2d>:
  809d20:	defffa04 	addi	sp,sp,-24
  809d24:	dc400115 	stw	r17,4(sp)
  809d28:	24400417 	ldw	r17,16(r4)
  809d2c:	dc000015 	stw	r16,0(sp)
  809d30:	24000504 	addi	r16,r4,20
  809d34:	882290ba 	slli	r17,r17,2
  809d38:	dc800215 	stw	r18,8(sp)
  809d3c:	dd000415 	stw	r20,16(sp)
  809d40:	8463883a 	add	r17,r16,r17
  809d44:	8cbfff17 	ldw	r18,-4(r17)
  809d48:	dcc00315 	stw	r19,12(sp)
  809d4c:	dfc00515 	stw	ra,20(sp)
  809d50:	9009883a 	mov	r4,r18
  809d54:	2827883a 	mov	r19,r5
  809d58:	08092e80 	call	8092e8 <__hi0bits>
  809d5c:	00c00804 	movi	r3,32
  809d60:	1889c83a 	sub	r4,r3,r2
  809d64:	99000015 	stw	r4,0(r19)
  809d68:	110002c8 	cmpgei	r4,r2,11
  809d6c:	8d3fff04 	addi	r20,r17,-4
  809d70:	20002026 	beq	r4,zero,809df4 <__b2d+0xd4>
  809d74:	10bffd44 	addi	r2,r2,-11
  809d78:	85000e2e 	bgeu	r16,r20,809db4 <__b2d+0x94>
  809d7c:	897ffe17 	ldw	r5,-8(r17)
  809d80:	10001226 	beq	r2,zero,809dcc <__b2d+0xac>
  809d84:	1889c83a 	sub	r4,r3,r2
  809d88:	90a4983a 	sll	r18,r18,r2
  809d8c:	2906d83a 	srl	r3,r5,r4
  809d90:	89bffe04 	addi	r6,r17,-8
  809d94:	2884983a 	sll	r2,r5,r2
  809d98:	90e4b03a 	or	r18,r18,r3
  809d9c:	90cffc34 	orhi	r3,r18,16368
  809da0:	81800c2e 	bgeu	r16,r6,809dd4 <__b2d+0xb4>
  809da4:	897ffd17 	ldw	r5,-12(r17)
  809da8:	2908d83a 	srl	r4,r5,r4
  809dac:	1104b03a 	or	r2,r2,r4
  809db0:	00000806 	br	809dd4 <__b2d+0xb4>
  809db4:	10000426 	beq	r2,zero,809dc8 <__b2d+0xa8>
  809db8:	90a4983a 	sll	r18,r18,r2
  809dbc:	0005883a 	mov	r2,zero
  809dc0:	90cffc34 	orhi	r3,r18,16368
  809dc4:	00000306 	br	809dd4 <__b2d+0xb4>
  809dc8:	000b883a 	mov	r5,zero
  809dcc:	90cffc34 	orhi	r3,r18,16368
  809dd0:	2805883a 	mov	r2,r5
  809dd4:	dfc00517 	ldw	ra,20(sp)
  809dd8:	dd000417 	ldw	r20,16(sp)
  809ddc:	dcc00317 	ldw	r19,12(sp)
  809de0:	dc800217 	ldw	r18,8(sp)
  809de4:	dc400117 	ldw	r17,4(sp)
  809de8:	dc000017 	ldw	r16,0(sp)
  809dec:	dec00604 	addi	sp,sp,24
  809df0:	f800283a 	ret
  809df4:	014002c4 	movi	r5,11
  809df8:	2889c83a 	sub	r4,r5,r2
  809dfc:	9106d83a 	srl	r3,r18,r4
  809e00:	18cffc34 	orhi	r3,r3,16368
  809e04:	85000536 	bltu	r16,r20,809e1c <__b2d+0xfc>
  809e08:	000b883a 	mov	r5,zero
  809e0c:	10800544 	addi	r2,r2,21
  809e10:	9084983a 	sll	r2,r18,r2
  809e14:	1144b03a 	or	r2,r2,r5
  809e18:	003fee06 	br	809dd4 <__b2d+0xb4>
  809e1c:	897ffe17 	ldw	r5,-8(r17)
  809e20:	290ad83a 	srl	r5,r5,r4
  809e24:	003ff906 	br	809e0c <__b2d+0xec>

00809e28 <__d2b>:
  809e28:	defff804 	addi	sp,sp,-32
  809e2c:	dd000615 	stw	r20,24(sp)
  809e30:	2829883a 	mov	r20,r5
  809e34:	01400044 	movi	r5,1
  809e38:	dcc00515 	stw	r19,20(sp)
  809e3c:	dc000215 	stw	r16,8(sp)
  809e40:	dfc00715 	stw	ra,28(sp)
  809e44:	dc800415 	stw	r18,16(sp)
  809e48:	dc400315 	stw	r17,12(sp)
  809e4c:	3021883a 	mov	r16,r6
  809e50:	3827883a 	mov	r19,r7
  809e54:	0808f8c0 	call	808f8c <_Balloc>
  809e58:	10004526 	beq	r2,zero,809f70 <__d2b+0x148>
  809e5c:	8024d53a 	srli	r18,r16,20
  809e60:	01800434 	movhi	r6,16
  809e64:	31bfffc4 	addi	r6,r6,-1
  809e68:	9481ffcc 	andi	r18,r18,2047
  809e6c:	1023883a 	mov	r17,r2
  809e70:	81a0703a 	and	r16,r16,r6
  809e74:	90000126 	beq	r18,zero,809e7c <__d2b+0x54>
  809e78:	84000434 	orhi	r16,r16,16
  809e7c:	dc000115 	stw	r16,4(sp)
  809e80:	a0002226 	beq	r20,zero,809f0c <__d2b+0xe4>
  809e84:	d809883a 	mov	r4,sp
  809e88:	dd000015 	stw	r20,0(sp)
  809e8c:	080934c0 	call	80934c <__lo0bits>
  809e90:	d8c00117 	ldw	r3,4(sp)
  809e94:	10003326 	beq	r2,zero,809f64 <__d2b+0x13c>
  809e98:	01000804 	movi	r4,32
  809e9c:	2089c83a 	sub	r4,r4,r2
  809ea0:	1908983a 	sll	r4,r3,r4
  809ea4:	d9400017 	ldw	r5,0(sp)
  809ea8:	1886d83a 	srl	r3,r3,r2
  809eac:	2148b03a 	or	r4,r4,r5
  809eb0:	89000515 	stw	r4,20(r17)
  809eb4:	d8c00115 	stw	r3,4(sp)
  809eb8:	88c00615 	stw	r3,24(r17)
  809ebc:	1800271e 	bne	r3,zero,809f5c <__d2b+0x134>
  809ec0:	04000044 	movi	r16,1
  809ec4:	8c000415 	stw	r16,16(r17)
  809ec8:	90001926 	beq	r18,zero,809f30 <__d2b+0x108>
  809ecc:	00c00d44 	movi	r3,53
  809ed0:	94bef344 	addi	r18,r18,-1075
  809ed4:	90a5883a 	add	r18,r18,r2
  809ed8:	1885c83a 	sub	r2,r3,r2
  809edc:	d8c00817 	ldw	r3,32(sp)
  809ee0:	9c800015 	stw	r18,0(r19)
  809ee4:	18800015 	stw	r2,0(r3)
  809ee8:	8805883a 	mov	r2,r17
  809eec:	dfc00717 	ldw	ra,28(sp)
  809ef0:	dd000617 	ldw	r20,24(sp)
  809ef4:	dcc00517 	ldw	r19,20(sp)
  809ef8:	dc800417 	ldw	r18,16(sp)
  809efc:	dc400317 	ldw	r17,12(sp)
  809f00:	dc000217 	ldw	r16,8(sp)
  809f04:	dec00804 	addi	sp,sp,32
  809f08:	f800283a 	ret
  809f0c:	d9000104 	addi	r4,sp,4
  809f10:	080934c0 	call	80934c <__lo0bits>
  809f14:	00c00044 	movi	r3,1
  809f18:	88c00415 	stw	r3,16(r17)
  809f1c:	d8c00117 	ldw	r3,4(sp)
  809f20:	10800804 	addi	r2,r2,32
  809f24:	04000044 	movi	r16,1
  809f28:	88c00515 	stw	r3,20(r17)
  809f2c:	903fe71e 	bne	r18,zero,809ecc <__d2b+0xa4>
  809f30:	800690ba 	slli	r3,r16,2
  809f34:	10bef384 	addi	r2,r2,-1074
  809f38:	98800015 	stw	r2,0(r19)
  809f3c:	88c5883a 	add	r2,r17,r3
  809f40:	11000417 	ldw	r4,16(r2)
  809f44:	8020917a 	slli	r16,r16,5
  809f48:	08092e80 	call	8092e8 <__hi0bits>
  809f4c:	80a1c83a 	sub	r16,r16,r2
  809f50:	d8800817 	ldw	r2,32(sp)
  809f54:	14000015 	stw	r16,0(r2)
  809f58:	003fe306 	br	809ee8 <__d2b+0xc0>
  809f5c:	04000084 	movi	r16,2
  809f60:	003fd806 	br	809ec4 <__d2b+0x9c>
  809f64:	d9000017 	ldw	r4,0(sp)
  809f68:	89000515 	stw	r4,20(r17)
  809f6c:	003fd206 	br	809eb8 <__d2b+0x90>
  809f70:	01c02074 	movhi	r7,129
  809f74:	01002074 	movhi	r4,129
  809f78:	39c9b904 	addi	r7,r7,9956
  809f7c:	000d883a 	mov	r6,zero
  809f80:	0140c284 	movi	r5,778
  809f84:	2109ce04 	addi	r4,r4,10040
  809f88:	080c16c0 	call	80c16c <__assert_func>

00809f8c <__ratio>:
  809f8c:	defff904 	addi	sp,sp,-28
  809f90:	dc400315 	stw	r17,12(sp)
  809f94:	2823883a 	mov	r17,r5
  809f98:	d80b883a 	mov	r5,sp
  809f9c:	dfc00615 	stw	ra,24(sp)
  809fa0:	dcc00515 	stw	r19,20(sp)
  809fa4:	dc800415 	stw	r18,16(sp)
  809fa8:	2027883a 	mov	r19,r4
  809fac:	dc000215 	stw	r16,8(sp)
  809fb0:	0809d200 	call	809d20 <__b2d>
  809fb4:	d9400104 	addi	r5,sp,4
  809fb8:	8809883a 	mov	r4,r17
  809fbc:	1025883a 	mov	r18,r2
  809fc0:	1821883a 	mov	r16,r3
  809fc4:	0809d200 	call	809d20 <__b2d>
  809fc8:	89000417 	ldw	r4,16(r17)
  809fcc:	9a000417 	ldw	r8,16(r19)
  809fd0:	d9400117 	ldw	r5,4(sp)
  809fd4:	100d883a 	mov	r6,r2
  809fd8:	4111c83a 	sub	r8,r8,r4
  809fdc:	d9000017 	ldw	r4,0(sp)
  809fe0:	4010917a 	slli	r8,r8,5
  809fe4:	180f883a 	mov	r7,r3
  809fe8:	2149c83a 	sub	r4,r4,r5
  809fec:	4111883a 	add	r8,r8,r4
  809ff0:	02000c0e 	bge	zero,r8,80a024 <__ratio+0x98>
  809ff4:	4010953a 	slli	r8,r8,20
  809ff8:	4421883a 	add	r16,r8,r16
  809ffc:	9009883a 	mov	r4,r18
  80a000:	800b883a 	mov	r5,r16
  80a004:	0801c080 	call	801c08 <__divdf3>
  80a008:	dfc00617 	ldw	ra,24(sp)
  80a00c:	dcc00517 	ldw	r19,20(sp)
  80a010:	dc800417 	ldw	r18,16(sp)
  80a014:	dc400317 	ldw	r17,12(sp)
  80a018:	dc000217 	ldw	r16,8(sp)
  80a01c:	dec00704 	addi	sp,sp,28
  80a020:	f800283a 	ret
  80a024:	4010953a 	slli	r8,r8,20
  80a028:	1a0fc83a 	sub	r7,r3,r8
  80a02c:	003ff306 	br	809ffc <__ratio+0x70>

0080a030 <_mprec_log10>:
  80a030:	defffe04 	addi	sp,sp,-8
  80a034:	dc000015 	stw	r16,0(sp)
  80a038:	dfc00115 	stw	ra,4(sp)
  80a03c:	20800608 	cmpgei	r2,r4,24
  80a040:	2021883a 	mov	r16,r4
  80a044:	10000f26 	beq	r2,zero,80a084 <_mprec_log10+0x54>
  80a048:	0009883a 	mov	r4,zero
  80a04c:	014ffc34 	movhi	r5,16368
  80a050:	000d883a 	mov	r6,zero
  80a054:	01d00934 	movhi	r7,16420
  80a058:	08025380 	call	802538 <__muldf3>
  80a05c:	843fffc4 	addi	r16,r16,-1
  80a060:	1009883a 	mov	r4,r2
  80a064:	180b883a 	mov	r5,r3
  80a068:	803ff91e 	bne	r16,zero,80a050 <_mprec_log10+0x20>
  80a06c:	2005883a 	mov	r2,r4
  80a070:	2807883a 	mov	r3,r5
  80a074:	dfc00117 	ldw	ra,4(sp)
  80a078:	dc000017 	ldw	r16,0(sp)
  80a07c:	dec00204 	addi	sp,sp,8
  80a080:	f800283a 	ret
  80a084:	202090fa 	slli	r16,r4,3
  80a088:	00802074 	movhi	r2,129
  80a08c:	1089f504 	addi	r2,r2,10196
  80a090:	1421883a 	add	r16,r2,r16
  80a094:	81000017 	ldw	r4,0(r16)
  80a098:	81400117 	ldw	r5,4(r16)
  80a09c:	003ff306 	br	80a06c <_mprec_log10+0x3c>

0080a0a0 <__copybits>:
  80a0a0:	297fffc4 	addi	r5,r5,-1
  80a0a4:	280fd17a 	srai	r7,r5,5
  80a0a8:	31400417 	ldw	r5,16(r6)
  80a0ac:	30800504 	addi	r2,r6,20
  80a0b0:	39c00044 	addi	r7,r7,1
  80a0b4:	280a90ba 	slli	r5,r5,2
  80a0b8:	380e90ba 	slli	r7,r7,2
  80a0bc:	114b883a 	add	r5,r2,r5
  80a0c0:	21cf883a 	add	r7,r4,r7
  80a0c4:	11400c2e 	bgeu	r2,r5,80a0f8 <__copybits+0x58>
  80a0c8:	2007883a 	mov	r3,r4
  80a0cc:	12000017 	ldw	r8,0(r2)
  80a0d0:	10800104 	addi	r2,r2,4
  80a0d4:	18c00104 	addi	r3,r3,4
  80a0d8:	1a3fff15 	stw	r8,-4(r3)
  80a0dc:	117ffb36 	bltu	r2,r5,80a0cc <__copybits+0x2c>
  80a0e0:	2985c83a 	sub	r2,r5,r6
  80a0e4:	10bffac4 	addi	r2,r2,-21
  80a0e8:	1004d0ba 	srli	r2,r2,2
  80a0ec:	10800044 	addi	r2,r2,1
  80a0f0:	100490ba 	slli	r2,r2,2
  80a0f4:	2089883a 	add	r4,r4,r2
  80a0f8:	21c0072e 	bgeu	r4,r7,80a118 <__copybits+0x78>
  80a0fc:	39bfffc4 	addi	r6,r7,-1
  80a100:	310dc83a 	sub	r6,r6,r4
  80a104:	300cd0ba 	srli	r6,r6,2
  80a108:	000b883a 	mov	r5,zero
  80a10c:	31800044 	addi	r6,r6,1
  80a110:	300c90ba 	slli	r6,r6,2
  80a114:	0808e9c1 	jmpi	808e9c <memset>
  80a118:	f800283a 	ret

0080a11c <__any_on>:
  80a11c:	20c00417 	ldw	r3,16(r4)
  80a120:	280dd17a 	srai	r6,r5,5
  80a124:	21000504 	addi	r4,r4,20
  80a128:	1980080e 	bge	r3,r6,80a14c <__any_on+0x30>
  80a12c:	180490ba 	slli	r2,r3,2
  80a130:	2085883a 	add	r2,r4,r2
  80a134:	20800f2e 	bgeu	r4,r2,80a174 <__any_on+0x58>
  80a138:	10ffff17 	ldw	r3,-4(r2)
  80a13c:	10bfff04 	addi	r2,r2,-4
  80a140:	183ffc26 	beq	r3,zero,80a134 <__any_on+0x18>
  80a144:	00800044 	movi	r2,1
  80a148:	f800283a 	ret
  80a14c:	300490ba 	slli	r2,r6,2
  80a150:	2085883a 	add	r2,r4,r2
  80a154:	30fff70e 	bge	r6,r3,80a134 <__any_on+0x18>
  80a158:	294007cc 	andi	r5,r5,31
  80a15c:	283ff526 	beq	r5,zero,80a134 <__any_on+0x18>
  80a160:	11800017 	ldw	r6,0(r2)
  80a164:	3146d83a 	srl	r3,r6,r5
  80a168:	194a983a 	sll	r5,r3,r5
  80a16c:	317ff51e 	bne	r6,r5,80a144 <__any_on+0x28>
  80a170:	003ff006 	br	80a134 <__any_on+0x18>
  80a174:	0005883a 	mov	r2,zero
  80a178:	f800283a 	ret

0080a17c <_putc_r>:
  80a17c:	defffc04 	addi	sp,sp,-16
  80a180:	dc400215 	stw	r17,8(sp)
  80a184:	dfc00315 	stw	ra,12(sp)
  80a188:	2023883a 	mov	r17,r4
  80a18c:	20000226 	beq	r4,zero,80a198 <_putc_r+0x1c>
  80a190:	20800e17 	ldw	r2,56(r4)
  80a194:	10000e26 	beq	r2,zero,80a1d0 <_putc_r+0x54>
  80a198:	30800217 	ldw	r2,8(r6)
  80a19c:	10bfffc4 	addi	r2,r2,-1
  80a1a0:	30800215 	stw	r2,8(r6)
  80a1a4:	10001316 	blt	r2,zero,80a1f4 <_putc_r+0x78>
  80a1a8:	30800017 	ldw	r2,0(r6)
  80a1ac:	11400005 	stb	r5,0(r2)
  80a1b0:	30800017 	ldw	r2,0(r6)
  80a1b4:	10c00044 	addi	r3,r2,1
  80a1b8:	30c00015 	stw	r3,0(r6)
  80a1bc:	10800003 	ldbu	r2,0(r2)
  80a1c0:	dfc00317 	ldw	ra,12(sp)
  80a1c4:	dc400217 	ldw	r17,8(sp)
  80a1c8:	dec00404 	addi	sp,sp,16
  80a1cc:	f800283a 	ret
  80a1d0:	d9800115 	stw	r6,4(sp)
  80a1d4:	d9400015 	stw	r5,0(sp)
  80a1d8:	08076f00 	call	8076f0 <__sinit>
  80a1dc:	d9800117 	ldw	r6,4(sp)
  80a1e0:	d9400017 	ldw	r5,0(sp)
  80a1e4:	30800217 	ldw	r2,8(r6)
  80a1e8:	10bfffc4 	addi	r2,r2,-1
  80a1ec:	30800215 	stw	r2,8(r6)
  80a1f0:	103fed0e 	bge	r2,zero,80a1a8 <_putc_r+0x2c>
  80a1f4:	30c00617 	ldw	r3,24(r6)
  80a1f8:	10c00e16 	blt	r2,r3,80a234 <_putc_r+0xb8>
  80a1fc:	30800017 	ldw	r2,0(r6)
  80a200:	11400005 	stb	r5,0(r2)
  80a204:	30c00017 	ldw	r3,0(r6)
  80a208:	18800003 	ldbu	r2,0(r3)
  80a20c:	108002a0 	cmpeqi	r2,r2,10
  80a210:	1000071e 	bne	r2,zero,80a230 <_putc_r+0xb4>
  80a214:	18800044 	addi	r2,r3,1
  80a218:	30800015 	stw	r2,0(r6)
  80a21c:	18800003 	ldbu	r2,0(r3)
  80a220:	dfc00317 	ldw	ra,12(sp)
  80a224:	dc400217 	ldw	r17,8(sp)
  80a228:	dec00404 	addi	sp,sp,16
  80a22c:	f800283a 	ret
  80a230:	01400284 	movi	r5,10
  80a234:	8809883a 	mov	r4,r17
  80a238:	dfc00317 	ldw	ra,12(sp)
  80a23c:	dc400217 	ldw	r17,8(sp)
  80a240:	dec00404 	addi	sp,sp,16
  80a244:	080bf501 	jmpi	80bf50 <__swbuf_r>

0080a248 <putc>:
  80a248:	defffc04 	addi	sp,sp,-16
  80a24c:	00802074 	movhi	r2,129
  80a250:	dc800215 	stw	r18,8(sp)
  80a254:	14921217 	ldw	r18,18504(r2)
  80a258:	dc400115 	stw	r17,4(sp)
  80a25c:	dfc00315 	stw	ra,12(sp)
  80a260:	2023883a 	mov	r17,r4
  80a264:	90000226 	beq	r18,zero,80a270 <putc+0x28>
  80a268:	90800e17 	ldw	r2,56(r18)
  80a26c:	10000f26 	beq	r2,zero,80a2ac <putc+0x64>
  80a270:	28800217 	ldw	r2,8(r5)
  80a274:	10bfffc4 	addi	r2,r2,-1
  80a278:	28800215 	stw	r2,8(r5)
  80a27c:	10001316 	blt	r2,zero,80a2cc <putc+0x84>
  80a280:	28800017 	ldw	r2,0(r5)
  80a284:	14400005 	stb	r17,0(r2)
  80a288:	28800017 	ldw	r2,0(r5)
  80a28c:	10c00044 	addi	r3,r2,1
  80a290:	28c00015 	stw	r3,0(r5)
  80a294:	10800003 	ldbu	r2,0(r2)
  80a298:	dfc00317 	ldw	ra,12(sp)
  80a29c:	dc800217 	ldw	r18,8(sp)
  80a2a0:	dc400117 	ldw	r17,4(sp)
  80a2a4:	dec00404 	addi	sp,sp,16
  80a2a8:	f800283a 	ret
  80a2ac:	9009883a 	mov	r4,r18
  80a2b0:	d9400015 	stw	r5,0(sp)
  80a2b4:	08076f00 	call	8076f0 <__sinit>
  80a2b8:	d9400017 	ldw	r5,0(sp)
  80a2bc:	28800217 	ldw	r2,8(r5)
  80a2c0:	10bfffc4 	addi	r2,r2,-1
  80a2c4:	28800215 	stw	r2,8(r5)
  80a2c8:	103fed0e 	bge	r2,zero,80a280 <putc+0x38>
  80a2cc:	28c00617 	ldw	r3,24(r5)
  80a2d0:	10c00a16 	blt	r2,r3,80a2fc <putc+0xb4>
  80a2d4:	28800017 	ldw	r2,0(r5)
  80a2d8:	14400005 	stb	r17,0(r2)
  80a2dc:	28c00017 	ldw	r3,0(r5)
  80a2e0:	18800003 	ldbu	r2,0(r3)
  80a2e4:	108002a0 	cmpeqi	r2,r2,10
  80a2e8:	10000c1e 	bne	r2,zero,80a31c <putc+0xd4>
  80a2ec:	18800044 	addi	r2,r3,1
  80a2f0:	28800015 	stw	r2,0(r5)
  80a2f4:	18800003 	ldbu	r2,0(r3)
  80a2f8:	003fe706 	br	80a298 <putc+0x50>
  80a2fc:	280d883a 	mov	r6,r5
  80a300:	880b883a 	mov	r5,r17
  80a304:	9009883a 	mov	r4,r18
  80a308:	dfc00317 	ldw	ra,12(sp)
  80a30c:	dc800217 	ldw	r18,8(sp)
  80a310:	dc400117 	ldw	r17,4(sp)
  80a314:	dec00404 	addi	sp,sp,16
  80a318:	080bf501 	jmpi	80bf50 <__swbuf_r>
  80a31c:	280d883a 	mov	r6,r5
  80a320:	01400284 	movi	r5,10
  80a324:	003ff706 	br	80a304 <putc+0xbc>

0080a328 <_realloc_r>:
  80a328:	defff504 	addi	sp,sp,-44
  80a32c:	dc800315 	stw	r18,12(sp)
  80a330:	dfc00a15 	stw	ra,40(sp)
  80a334:	df000915 	stw	fp,36(sp)
  80a338:	ddc00815 	stw	r23,32(sp)
  80a33c:	dd800715 	stw	r22,28(sp)
  80a340:	dd400615 	stw	r21,24(sp)
  80a344:	dd000515 	stw	r20,20(sp)
  80a348:	dcc00415 	stw	r19,16(sp)
  80a34c:	dc400215 	stw	r17,8(sp)
  80a350:	dc000115 	stw	r16,4(sp)
  80a354:	3025883a 	mov	r18,r6
  80a358:	28008b26 	beq	r5,zero,80a588 <_realloc_r+0x260>
  80a35c:	2821883a 	mov	r16,r5
  80a360:	2027883a 	mov	r19,r4
  80a364:	944002c4 	addi	r17,r18,11
  80a368:	080f1f80 	call	80f1f8 <__malloc_lock>
  80a36c:	888005f0 	cmpltui	r2,r17,23
  80a370:	1000521e 	bne	r2,zero,80a4bc <_realloc_r+0x194>
  80a374:	017ffe04 	movi	r5,-8
  80a378:	8962703a 	and	r17,r17,r5
  80a37c:	8807883a 	mov	r3,r17
  80a380:	88005116 	blt	r17,zero,80a4c8 <_realloc_r+0x1a0>
  80a384:	8c805036 	bltu	r17,r18,80a4c8 <_realloc_r+0x1a0>
  80a388:	80bfff17 	ldw	r2,-4(r16)
  80a38c:	017fff04 	movi	r5,-4
  80a390:	857ffe04 	addi	r21,r16,-8
  80a394:	1168703a 	and	r20,r2,r5
  80a398:	ad2d883a 	add	r22,r21,r20
  80a39c:	a0c0390e 	bge	r20,r3,80a484 <_realloc_r+0x15c>
  80a3a0:	07002074 	movhi	fp,129
  80a3a4:	e70bfb04 	addi	fp,fp,12268
  80a3a8:	e2000217 	ldw	r8,8(fp)
  80a3ac:	b1000117 	ldw	r4,4(r22)
  80a3b0:	45808e26 	beq	r8,r22,80a5ec <_realloc_r+0x2c4>
  80a3b4:	01bfff84 	movi	r6,-2
  80a3b8:	218c703a 	and	r6,r4,r6
  80a3bc:	b18d883a 	add	r6,r22,r6
  80a3c0:	31800117 	ldw	r6,4(r6)
  80a3c4:	3180004c 	andi	r6,r6,1
  80a3c8:	30004f1e 	bne	r6,zero,80a508 <_realloc_r+0x1e0>
  80a3cc:	2148703a 	and	r4,r4,r5
  80a3d0:	a10b883a 	add	r5,r20,r4
  80a3d4:	28c0bf0e 	bge	r5,r3,80a6d4 <_realloc_r+0x3ac>
  80a3d8:	1080004c 	andi	r2,r2,1
  80a3dc:	10004c1e 	bne	r2,zero,80a510 <_realloc_r+0x1e8>
  80a3e0:	81fffe17 	ldw	r7,-8(r16)
  80a3e4:	00bfff04 	movi	r2,-4
  80a3e8:	a9cfc83a 	sub	r7,r21,r7
  80a3ec:	39400117 	ldw	r5,4(r7)
  80a3f0:	288a703a 	and	r5,r5,r2
  80a3f4:	b0000426 	beq	r22,zero,80a408 <_realloc_r+0xe0>
  80a3f8:	a16f883a 	add	r23,r20,r5
  80a3fc:	b92f883a 	add	r23,r23,r4
  80a400:	4580bf26 	beq	r8,r22,80a700 <_realloc_r+0x3d8>
  80a404:	b8c0930e 	bge	r23,r3,80a654 <_realloc_r+0x32c>
  80a408:	38004126 	beq	r7,zero,80a510 <_realloc_r+0x1e8>
  80a40c:	a16f883a 	add	r23,r20,r5
  80a410:	b8c03f16 	blt	r23,r3,80a510 <_realloc_r+0x1e8>
  80a414:	38800317 	ldw	r2,12(r7)
  80a418:	38c00217 	ldw	r3,8(r7)
  80a41c:	a1bfff04 	addi	r6,r20,-4
  80a420:	31400968 	cmpgeui	r5,r6,37
  80a424:	18800315 	stw	r2,12(r3)
  80a428:	10c00215 	stw	r3,8(r2)
  80a42c:	39000204 	addi	r4,r7,8
  80a430:	3ded883a 	add	r22,r7,r23
  80a434:	2800941e 	bne	r5,zero,80a688 <_realloc_r+0x360>
  80a438:	30800530 	cmpltui	r2,r6,20
  80a43c:	80c00017 	ldw	r3,0(r16)
  80a440:	1000df1e 	bne	r2,zero,80a7c0 <_realloc_r+0x498>
  80a444:	38c00215 	stw	r3,8(r7)
  80a448:	80c00117 	ldw	r3,4(r16)
  80a44c:	30800728 	cmpgeui	r2,r6,28
  80a450:	38c00315 	stw	r3,12(r7)
  80a454:	1000dc1e 	bne	r2,zero,80a7c8 <_realloc_r+0x4a0>
  80a458:	80c00217 	ldw	r3,8(r16)
  80a45c:	38800404 	addi	r2,r7,16
  80a460:	84000204 	addi	r16,r16,8
  80a464:	10c00015 	stw	r3,0(r2)
  80a468:	80c00117 	ldw	r3,4(r16)
  80a46c:	b829883a 	mov	r20,r23
  80a470:	382b883a 	mov	r21,r7
  80a474:	10c00115 	stw	r3,4(r2)
  80a478:	80c00217 	ldw	r3,8(r16)
  80a47c:	2021883a 	mov	r16,r4
  80a480:	10c00215 	stw	r3,8(r2)
  80a484:	a9800117 	ldw	r6,4(r21)
  80a488:	a445c83a 	sub	r2,r20,r17
  80a48c:	10c00430 	cmpltui	r3,r2,16
  80a490:	3180004c 	andi	r6,r6,1
  80a494:	18004926 	beq	r3,zero,80a5bc <_realloc_r+0x294>
  80a498:	a18cb03a 	or	r6,r20,r6
  80a49c:	a9800115 	stw	r6,4(r21)
  80a4a0:	b0800117 	ldw	r2,4(r22)
  80a4a4:	10800054 	ori	r2,r2,1
  80a4a8:	b0800115 	stw	r2,4(r22)
  80a4ac:	9809883a 	mov	r4,r19
  80a4b0:	080f21c0 	call	80f21c <__malloc_unlock>
  80a4b4:	8025883a 	mov	r18,r16
  80a4b8:	00000606 	br	80a4d4 <_realloc_r+0x1ac>
  80a4bc:	04400404 	movi	r17,16
  80a4c0:	00c00404 	movi	r3,16
  80a4c4:	8cbfb02e 	bgeu	r17,r18,80a388 <_realloc_r+0x60>
  80a4c8:	00800304 	movi	r2,12
  80a4cc:	98800015 	stw	r2,0(r19)
  80a4d0:	0025883a 	mov	r18,zero
  80a4d4:	9005883a 	mov	r2,r18
  80a4d8:	dfc00a17 	ldw	ra,40(sp)
  80a4dc:	df000917 	ldw	fp,36(sp)
  80a4e0:	ddc00817 	ldw	r23,32(sp)
  80a4e4:	dd800717 	ldw	r22,28(sp)
  80a4e8:	dd400617 	ldw	r21,24(sp)
  80a4ec:	dd000517 	ldw	r20,20(sp)
  80a4f0:	dcc00417 	ldw	r19,16(sp)
  80a4f4:	dc800317 	ldw	r18,12(sp)
  80a4f8:	dc400217 	ldw	r17,8(sp)
  80a4fc:	dc000117 	ldw	r16,4(sp)
  80a500:	dec00b04 	addi	sp,sp,44
  80a504:	f800283a 	ret
  80a508:	1080004c 	andi	r2,r2,1
  80a50c:	10006c26 	beq	r2,zero,80a6c0 <_realloc_r+0x398>
  80a510:	900b883a 	mov	r5,r18
  80a514:	9809883a 	mov	r4,r19
  80a518:	08083c00 	call	8083c0 <_malloc_r>
  80a51c:	1025883a 	mov	r18,r2
  80a520:	10001626 	beq	r2,zero,80a57c <_realloc_r+0x254>
  80a524:	80bfff17 	ldw	r2,-4(r16)
  80a528:	013fff84 	movi	r4,-2
  80a52c:	90fffe04 	addi	r3,r18,-8
  80a530:	1104703a 	and	r2,r2,r4
  80a534:	a885883a 	add	r2,r21,r2
  80a538:	10c05b26 	beq	r2,r3,80a6a8 <_realloc_r+0x380>
  80a53c:	a1bfff04 	addi	r6,r20,-4
  80a540:	30800968 	cmpgeui	r2,r6,37
  80a544:	10006a1e 	bne	r2,zero,80a6f0 <_realloc_r+0x3c8>
  80a548:	30800530 	cmpltui	r2,r6,20
  80a54c:	81000017 	ldw	r4,0(r16)
  80a550:	10003726 	beq	r2,zero,80a630 <_realloc_r+0x308>
  80a554:	9005883a 	mov	r2,r18
  80a558:	8007883a 	mov	r3,r16
  80a55c:	11000015 	stw	r4,0(r2)
  80a560:	19000117 	ldw	r4,4(r3)
  80a564:	11000115 	stw	r4,4(r2)
  80a568:	18c00217 	ldw	r3,8(r3)
  80a56c:	10c00215 	stw	r3,8(r2)
  80a570:	800b883a 	mov	r5,r16
  80a574:	9809883a 	mov	r4,r19
  80a578:	08078540 	call	807854 <_free_r>
  80a57c:	9809883a 	mov	r4,r19
  80a580:	080f21c0 	call	80f21c <__malloc_unlock>
  80a584:	003fd306 	br	80a4d4 <_realloc_r+0x1ac>
  80a588:	300b883a 	mov	r5,r6
  80a58c:	dfc00a17 	ldw	ra,40(sp)
  80a590:	df000917 	ldw	fp,36(sp)
  80a594:	ddc00817 	ldw	r23,32(sp)
  80a598:	dd800717 	ldw	r22,28(sp)
  80a59c:	dd400617 	ldw	r21,24(sp)
  80a5a0:	dd000517 	ldw	r20,20(sp)
  80a5a4:	dcc00417 	ldw	r19,16(sp)
  80a5a8:	dc800317 	ldw	r18,12(sp)
  80a5ac:	dc400217 	ldw	r17,8(sp)
  80a5b0:	dc000117 	ldw	r16,4(sp)
  80a5b4:	dec00b04 	addi	sp,sp,44
  80a5b8:	08083c01 	jmpi	8083c0 <_malloc_r>
  80a5bc:	344cb03a 	or	r6,r6,r17
  80a5c0:	a9800115 	stw	r6,4(r21)
  80a5c4:	ac4b883a 	add	r5,r21,r17
  80a5c8:	10800054 	ori	r2,r2,1
  80a5cc:	28800115 	stw	r2,4(r5)
  80a5d0:	b0800117 	ldw	r2,4(r22)
  80a5d4:	29400204 	addi	r5,r5,8
  80a5d8:	9809883a 	mov	r4,r19
  80a5dc:	10800054 	ori	r2,r2,1
  80a5e0:	b0800115 	stw	r2,4(r22)
  80a5e4:	08078540 	call	807854 <_free_r>
  80a5e8:	003fb006 	br	80a4ac <_realloc_r+0x184>
  80a5ec:	2148703a 	and	r4,r4,r5
  80a5f0:	a10b883a 	add	r5,r20,r4
  80a5f4:	89800404 	addi	r6,r17,16
  80a5f8:	29bf7716 	blt	r5,r6,80a3d8 <_realloc_r+0xb0>
  80a5fc:	ac6b883a 	add	r21,r21,r17
  80a600:	2c45c83a 	sub	r2,r5,r17
  80a604:	e5400215 	stw	r21,8(fp)
  80a608:	10800054 	ori	r2,r2,1
  80a60c:	a8800115 	stw	r2,4(r21)
  80a610:	80bfff17 	ldw	r2,-4(r16)
  80a614:	9809883a 	mov	r4,r19
  80a618:	8025883a 	mov	r18,r16
  80a61c:	1080004c 	andi	r2,r2,1
  80a620:	1462b03a 	or	r17,r2,r17
  80a624:	847fff15 	stw	r17,-4(r16)
  80a628:	080f21c0 	call	80f21c <__malloc_unlock>
  80a62c:	003fa906 	br	80a4d4 <_realloc_r+0x1ac>
  80a630:	91000015 	stw	r4,0(r18)
  80a634:	80c00117 	ldw	r3,4(r16)
  80a638:	30800728 	cmpgeui	r2,r6,28
  80a63c:	90c00115 	stw	r3,4(r18)
  80a640:	1000551e 	bne	r2,zero,80a798 <_realloc_r+0x470>
  80a644:	81000217 	ldw	r4,8(r16)
  80a648:	80c00204 	addi	r3,r16,8
  80a64c:	90800204 	addi	r2,r18,8
  80a650:	003fc206 	br	80a55c <_realloc_r+0x234>
  80a654:	b0800317 	ldw	r2,12(r22)
  80a658:	b0c00217 	ldw	r3,8(r22)
  80a65c:	a1bfff04 	addi	r6,r20,-4
  80a660:	31400968 	cmpgeui	r5,r6,37
  80a664:	18800315 	stw	r2,12(r3)
  80a668:	10c00215 	stw	r3,8(r2)
  80a66c:	38c00217 	ldw	r3,8(r7)
  80a670:	38800317 	ldw	r2,12(r7)
  80a674:	39000204 	addi	r4,r7,8
  80a678:	3ded883a 	add	r22,r7,r23
  80a67c:	18800315 	stw	r2,12(r3)
  80a680:	10c00215 	stw	r3,8(r2)
  80a684:	283f6c26 	beq	r5,zero,80a438 <_realloc_r+0x110>
  80a688:	800b883a 	mov	r5,r16
  80a68c:	d9c00015 	stw	r7,0(sp)
  80a690:	0808d700 	call	808d70 <memmove>
  80a694:	d9c00017 	ldw	r7,0(sp)
  80a698:	1021883a 	mov	r16,r2
  80a69c:	b829883a 	mov	r20,r23
  80a6a0:	382b883a 	mov	r21,r7
  80a6a4:	003f7706 	br	80a484 <_realloc_r+0x15c>
  80a6a8:	90bfff17 	ldw	r2,-4(r18)
  80a6ac:	00ffff04 	movi	r3,-4
  80a6b0:	10c4703a 	and	r2,r2,r3
  80a6b4:	a0a9883a 	add	r20,r20,r2
  80a6b8:	ad2d883a 	add	r22,r21,r20
  80a6bc:	003f7106 	br	80a484 <_realloc_r+0x15c>
  80a6c0:	81fffe17 	ldw	r7,-8(r16)
  80a6c4:	a9cfc83a 	sub	r7,r21,r7
  80a6c8:	38800117 	ldw	r2,4(r7)
  80a6cc:	114a703a 	and	r5,r2,r5
  80a6d0:	003f4d06 	br	80a408 <_realloc_r+0xe0>
  80a6d4:	b0800317 	ldw	r2,12(r22)
  80a6d8:	b0c00217 	ldw	r3,8(r22)
  80a6dc:	2829883a 	mov	r20,r5
  80a6e0:	a96d883a 	add	r22,r21,r5
  80a6e4:	18800315 	stw	r2,12(r3)
  80a6e8:	10c00215 	stw	r3,8(r2)
  80a6ec:	003f6506 	br	80a484 <_realloc_r+0x15c>
  80a6f0:	800b883a 	mov	r5,r16
  80a6f4:	9009883a 	mov	r4,r18
  80a6f8:	0808d700 	call	808d70 <memmove>
  80a6fc:	003f9c06 	br	80a570 <_realloc_r+0x248>
  80a700:	88800404 	addi	r2,r17,16
  80a704:	b8bf4016 	blt	r23,r2,80a408 <_realloc_r+0xe0>
  80a708:	38800317 	ldw	r2,12(r7)
  80a70c:	38c00217 	ldw	r3,8(r7)
  80a710:	a1bfff04 	addi	r6,r20,-4
  80a714:	31000968 	cmpgeui	r4,r6,37
  80a718:	18800315 	stw	r2,12(r3)
  80a71c:	10c00215 	stw	r3,8(r2)
  80a720:	3c800204 	addi	r18,r7,8
  80a724:	20003b1e 	bne	r4,zero,80a814 <_realloc_r+0x4ec>
  80a728:	30800530 	cmpltui	r2,r6,20
  80a72c:	80c00017 	ldw	r3,0(r16)
  80a730:	1000361e 	bne	r2,zero,80a80c <_realloc_r+0x4e4>
  80a734:	38c00215 	stw	r3,8(r7)
  80a738:	80c00117 	ldw	r3,4(r16)
  80a73c:	30800728 	cmpgeui	r2,r6,28
  80a740:	38c00315 	stw	r3,12(r7)
  80a744:	1000401e 	bne	r2,zero,80a848 <_realloc_r+0x520>
  80a748:	80c00217 	ldw	r3,8(r16)
  80a74c:	38800404 	addi	r2,r7,16
  80a750:	84000204 	addi	r16,r16,8
  80a754:	10c00015 	stw	r3,0(r2)
  80a758:	80c00117 	ldw	r3,4(r16)
  80a75c:	10c00115 	stw	r3,4(r2)
  80a760:	80c00217 	ldw	r3,8(r16)
  80a764:	10c00215 	stw	r3,8(r2)
  80a768:	3c47883a 	add	r3,r7,r17
  80a76c:	bc45c83a 	sub	r2,r23,r17
  80a770:	e0c00215 	stw	r3,8(fp)
  80a774:	10800054 	ori	r2,r2,1
  80a778:	18800115 	stw	r2,4(r3)
  80a77c:	38800117 	ldw	r2,4(r7)
  80a780:	9809883a 	mov	r4,r19
  80a784:	1080004c 	andi	r2,r2,1
  80a788:	1462b03a 	or	r17,r2,r17
  80a78c:	3c400115 	stw	r17,4(r7)
  80a790:	080f21c0 	call	80f21c <__malloc_unlock>
  80a794:	003f4f06 	br	80a4d4 <_realloc_r+0x1ac>
  80a798:	80800217 	ldw	r2,8(r16)
  80a79c:	31800920 	cmpeqi	r6,r6,36
  80a7a0:	90800215 	stw	r2,8(r18)
  80a7a4:	80800317 	ldw	r2,12(r16)
  80a7a8:	90800315 	stw	r2,12(r18)
  80a7ac:	81000417 	ldw	r4,16(r16)
  80a7b0:	30000f1e 	bne	r6,zero,80a7f0 <_realloc_r+0x4c8>
  80a7b4:	80c00404 	addi	r3,r16,16
  80a7b8:	90800404 	addi	r2,r18,16
  80a7bc:	003f6706 	br	80a55c <_realloc_r+0x234>
  80a7c0:	2005883a 	mov	r2,r4
  80a7c4:	003f2706 	br	80a464 <_realloc_r+0x13c>
  80a7c8:	80800217 	ldw	r2,8(r16)
  80a7cc:	31800920 	cmpeqi	r6,r6,36
  80a7d0:	38800415 	stw	r2,16(r7)
  80a7d4:	80800317 	ldw	r2,12(r16)
  80a7d8:	38800515 	stw	r2,20(r7)
  80a7dc:	80c00417 	ldw	r3,16(r16)
  80a7e0:	3000121e 	bne	r6,zero,80a82c <_realloc_r+0x504>
  80a7e4:	38800604 	addi	r2,r7,24
  80a7e8:	84000404 	addi	r16,r16,16
  80a7ec:	003f1d06 	br	80a464 <_realloc_r+0x13c>
  80a7f0:	91000415 	stw	r4,16(r18)
  80a7f4:	81000517 	ldw	r4,20(r16)
  80a7f8:	80c00604 	addi	r3,r16,24
  80a7fc:	90800604 	addi	r2,r18,24
  80a800:	91000515 	stw	r4,20(r18)
  80a804:	81000617 	ldw	r4,24(r16)
  80a808:	003f5406 	br	80a55c <_realloc_r+0x234>
  80a80c:	9005883a 	mov	r2,r18
  80a810:	003fd006 	br	80a754 <_realloc_r+0x42c>
  80a814:	800b883a 	mov	r5,r16
  80a818:	9009883a 	mov	r4,r18
  80a81c:	d9c00015 	stw	r7,0(sp)
  80a820:	0808d700 	call	808d70 <memmove>
  80a824:	d9c00017 	ldw	r7,0(sp)
  80a828:	003fcf06 	br	80a768 <_realloc_r+0x440>
  80a82c:	84000604 	addi	r16,r16,24
  80a830:	38c00615 	stw	r3,24(r7)
  80a834:	80ffff17 	ldw	r3,-4(r16)
  80a838:	38800804 	addi	r2,r7,32
  80a83c:	38c00715 	stw	r3,28(r7)
  80a840:	80c00017 	ldw	r3,0(r16)
  80a844:	003f0706 	br	80a464 <_realloc_r+0x13c>
  80a848:	80800217 	ldw	r2,8(r16)
  80a84c:	31800920 	cmpeqi	r6,r6,36
  80a850:	38800415 	stw	r2,16(r7)
  80a854:	80800317 	ldw	r2,12(r16)
  80a858:	38800515 	stw	r2,20(r7)
  80a85c:	80c00417 	ldw	r3,16(r16)
  80a860:	3000031e 	bne	r6,zero,80a870 <_realloc_r+0x548>
  80a864:	38800604 	addi	r2,r7,24
  80a868:	84000404 	addi	r16,r16,16
  80a86c:	003fb906 	br	80a754 <_realloc_r+0x42c>
  80a870:	84000604 	addi	r16,r16,24
  80a874:	38c00615 	stw	r3,24(r7)
  80a878:	80ffff17 	ldw	r3,-4(r16)
  80a87c:	38800804 	addi	r2,r7,32
  80a880:	38c00715 	stw	r3,28(r7)
  80a884:	80c00017 	ldw	r3,0(r16)
  80a888:	003fb206 	br	80a754 <_realloc_r+0x42c>

0080a88c <_sbrk_r>:
  80a88c:	defffe04 	addi	sp,sp,-8
  80a890:	dc000015 	stw	r16,0(sp)
  80a894:	00802074 	movhi	r2,129
  80a898:	2021883a 	mov	r16,r4
  80a89c:	2809883a 	mov	r4,r5
  80a8a0:	dfc00115 	stw	ra,4(sp)
  80a8a4:	10195715 	stw	zero,25948(r2)
  80a8a8:	080f3f40 	call	80f3f4 <sbrk>
  80a8ac:	10ffffd8 	cmpnei	r3,r2,-1
  80a8b0:	18000426 	beq	r3,zero,80a8c4 <_sbrk_r+0x38>
  80a8b4:	dfc00117 	ldw	ra,4(sp)
  80a8b8:	dc000017 	ldw	r16,0(sp)
  80a8bc:	dec00204 	addi	sp,sp,8
  80a8c0:	f800283a 	ret
  80a8c4:	00c02074 	movhi	r3,129
  80a8c8:	18d95717 	ldw	r3,25948(r3)
  80a8cc:	183ff926 	beq	r3,zero,80a8b4 <_sbrk_r+0x28>
  80a8d0:	80c00015 	stw	r3,0(r16)
  80a8d4:	dfc00117 	ldw	ra,4(sp)
  80a8d8:	dc000017 	ldw	r16,0(sp)
  80a8dc:	dec00204 	addi	sp,sp,8
  80a8e0:	f800283a 	ret

0080a8e4 <__sread>:
  80a8e4:	defffe04 	addi	sp,sp,-8
  80a8e8:	dc000015 	stw	r16,0(sp)
  80a8ec:	2821883a 	mov	r16,r5
  80a8f0:	2940038f 	ldh	r5,14(r5)
  80a8f4:	dfc00115 	stw	ra,4(sp)
  80a8f8:	080c9000 	call	80c900 <_read_r>
  80a8fc:	10000716 	blt	r2,zero,80a91c <__sread+0x38>
  80a900:	80c01417 	ldw	r3,80(r16)
  80a904:	1887883a 	add	r3,r3,r2
  80a908:	80c01415 	stw	r3,80(r16)
  80a90c:	dfc00117 	ldw	ra,4(sp)
  80a910:	dc000017 	ldw	r16,0(sp)
  80a914:	dec00204 	addi	sp,sp,8
  80a918:	f800283a 	ret
  80a91c:	80c0030b 	ldhu	r3,12(r16)
  80a920:	18fbffcc 	andi	r3,r3,61439
  80a924:	80c0030d 	sth	r3,12(r16)
  80a928:	dfc00117 	ldw	ra,4(sp)
  80a92c:	dc000017 	ldw	r16,0(sp)
  80a930:	dec00204 	addi	sp,sp,8
  80a934:	f800283a 	ret

0080a938 <__seofread>:
  80a938:	0005883a 	mov	r2,zero
  80a93c:	f800283a 	ret

0080a940 <__swrite>:
  80a940:	2880030b 	ldhu	r2,12(r5)
  80a944:	defffb04 	addi	sp,sp,-20
  80a948:	dcc00315 	stw	r19,12(sp)
  80a94c:	dc800215 	stw	r18,8(sp)
  80a950:	dc400115 	stw	r17,4(sp)
  80a954:	dc000015 	stw	r16,0(sp)
  80a958:	dfc00415 	stw	ra,16(sp)
  80a95c:	10c0400c 	andi	r3,r2,256
  80a960:	2821883a 	mov	r16,r5
  80a964:	2023883a 	mov	r17,r4
  80a968:	2940038f 	ldh	r5,14(r5)
  80a96c:	3025883a 	mov	r18,r6
  80a970:	3827883a 	mov	r19,r7
  80a974:	18000c1e 	bne	r3,zero,80a9a8 <__swrite+0x68>
  80a978:	10bbffcc 	andi	r2,r2,61439
  80a97c:	980f883a 	mov	r7,r19
  80a980:	900d883a 	mov	r6,r18
  80a984:	8809883a 	mov	r4,r17
  80a988:	8080030d 	sth	r2,12(r16)
  80a98c:	dfc00417 	ldw	ra,16(sp)
  80a990:	dcc00317 	ldw	r19,12(sp)
  80a994:	dc800217 	ldw	r18,8(sp)
  80a998:	dc400117 	ldw	r17,4(sp)
  80a99c:	dc000017 	ldw	r16,0(sp)
  80a9a0:	dec00504 	addi	sp,sp,20
  80a9a4:	080c0b01 	jmpi	80c0b0 <_write_r>
  80a9a8:	01c00084 	movi	r7,2
  80a9ac:	000d883a 	mov	r6,zero
  80a9b0:	080c84c0 	call	80c84c <_lseek_r>
  80a9b4:	8080030b 	ldhu	r2,12(r16)
  80a9b8:	8140038f 	ldh	r5,14(r16)
  80a9bc:	003fee06 	br	80a978 <__swrite+0x38>

0080a9c0 <__sseek>:
  80a9c0:	defffe04 	addi	sp,sp,-8
  80a9c4:	dc000015 	stw	r16,0(sp)
  80a9c8:	2821883a 	mov	r16,r5
  80a9cc:	2940038f 	ldh	r5,14(r5)
  80a9d0:	dfc00115 	stw	ra,4(sp)
  80a9d4:	080c84c0 	call	80c84c <_lseek_r>
  80a9d8:	10ffffd8 	cmpnei	r3,r2,-1
  80a9dc:	18000826 	beq	r3,zero,80aa00 <__sseek+0x40>
  80a9e0:	80c0030b 	ldhu	r3,12(r16)
  80a9e4:	80801415 	stw	r2,80(r16)
  80a9e8:	18c40014 	ori	r3,r3,4096
  80a9ec:	80c0030d 	sth	r3,12(r16)
  80a9f0:	dfc00117 	ldw	ra,4(sp)
  80a9f4:	dc000017 	ldw	r16,0(sp)
  80a9f8:	dec00204 	addi	sp,sp,8
  80a9fc:	f800283a 	ret
  80aa00:	80c0030b 	ldhu	r3,12(r16)
  80aa04:	18fbffcc 	andi	r3,r3,61439
  80aa08:	80c0030d 	sth	r3,12(r16)
  80aa0c:	dfc00117 	ldw	ra,4(sp)
  80aa10:	dc000017 	ldw	r16,0(sp)
  80aa14:	dec00204 	addi	sp,sp,8
  80aa18:	f800283a 	ret

0080aa1c <__sclose>:
  80aa1c:	2940038f 	ldh	r5,14(r5)
  80aa20:	080c1141 	jmpi	80c114 <_close_r>

0080aa24 <__sprint_r.part.0>:
  80aa24:	28801917 	ldw	r2,100(r5)
  80aa28:	defff604 	addi	sp,sp,-40
  80aa2c:	dcc00315 	stw	r19,12(sp)
  80aa30:	dfc00915 	stw	ra,36(sp)
  80aa34:	df000815 	stw	fp,32(sp)
  80aa38:	ddc00715 	stw	r23,28(sp)
  80aa3c:	dd800615 	stw	r22,24(sp)
  80aa40:	dd400515 	stw	r21,20(sp)
  80aa44:	dd000415 	stw	r20,16(sp)
  80aa48:	dc800215 	stw	r18,8(sp)
  80aa4c:	dc400115 	stw	r17,4(sp)
  80aa50:	dc000015 	stw	r16,0(sp)
  80aa54:	1088000c 	andi	r2,r2,8192
  80aa58:	3027883a 	mov	r19,r6
  80aa5c:	10002c26 	beq	r2,zero,80ab10 <__sprint_r.part.0+0xec>
  80aa60:	30800217 	ldw	r2,8(r6)
  80aa64:	35000017 	ldw	r20,0(r6)
  80aa68:	2821883a 	mov	r16,r5
  80aa6c:	2023883a 	mov	r17,r4
  80aa70:	05bfff04 	movi	r22,-4
  80aa74:	10002426 	beq	r2,zero,80ab08 <__sprint_r.part.0+0xe4>
  80aa78:	a5400117 	ldw	r21,4(r20)
  80aa7c:	a5c00017 	ldw	r23,0(r20)
  80aa80:	a824d0ba 	srli	r18,r21,2
  80aa84:	90001b26 	beq	r18,zero,80aaf4 <__sprint_r.part.0+0xd0>
  80aa88:	0039883a 	mov	fp,zero
  80aa8c:	00000206 	br	80aa98 <__sprint_r.part.0+0x74>
  80aa90:	bdc00104 	addi	r23,r23,4
  80aa94:	97001626 	beq	r18,fp,80aaf0 <__sprint_r.part.0+0xcc>
  80aa98:	b9400017 	ldw	r5,0(r23)
  80aa9c:	800d883a 	mov	r6,r16
  80aaa0:	8809883a 	mov	r4,r17
  80aaa4:	080c6040 	call	80c604 <_fputwc_r>
  80aaa8:	10bfffe0 	cmpeqi	r2,r2,-1
  80aaac:	e7000044 	addi	fp,fp,1
  80aab0:	103ff726 	beq	r2,zero,80aa90 <__sprint_r.part.0+0x6c>
  80aab4:	00bfffc4 	movi	r2,-1
  80aab8:	98000215 	stw	zero,8(r19)
  80aabc:	98000115 	stw	zero,4(r19)
  80aac0:	dfc00917 	ldw	ra,36(sp)
  80aac4:	df000817 	ldw	fp,32(sp)
  80aac8:	ddc00717 	ldw	r23,28(sp)
  80aacc:	dd800617 	ldw	r22,24(sp)
  80aad0:	dd400517 	ldw	r21,20(sp)
  80aad4:	dd000417 	ldw	r20,16(sp)
  80aad8:	dcc00317 	ldw	r19,12(sp)
  80aadc:	dc800217 	ldw	r18,8(sp)
  80aae0:	dc400117 	ldw	r17,4(sp)
  80aae4:	dc000017 	ldw	r16,0(sp)
  80aae8:	dec00a04 	addi	sp,sp,40
  80aaec:	f800283a 	ret
  80aaf0:	98800217 	ldw	r2,8(r19)
  80aaf4:	adaa703a 	and	r21,r21,r22
  80aaf8:	1545c83a 	sub	r2,r2,r21
  80aafc:	98800215 	stw	r2,8(r19)
  80ab00:	a5000204 	addi	r20,r20,8
  80ab04:	103fdc1e 	bne	r2,zero,80aa78 <__sprint_r.part.0+0x54>
  80ab08:	0005883a 	mov	r2,zero
  80ab0c:	003fea06 	br	80aab8 <__sprint_r.part.0+0x94>
  80ab10:	0807b500 	call	807b50 <__sfvwrite_r>
  80ab14:	003fe806 	br	80aab8 <__sprint_r.part.0+0x94>

0080ab18 <__sprint_r>:
  80ab18:	30c00217 	ldw	r3,8(r6)
  80ab1c:	18000126 	beq	r3,zero,80ab24 <__sprint_r+0xc>
  80ab20:	080aa241 	jmpi	80aa24 <__sprint_r.part.0>
  80ab24:	30000115 	stw	zero,4(r6)
  80ab28:	0005883a 	mov	r2,zero
  80ab2c:	f800283a 	ret

0080ab30 <___vfiprintf_internal_r>:
  80ab30:	deffcf04 	addi	sp,sp,-196
  80ab34:	dd802d15 	stw	r22,180(sp)
  80ab38:	dd402c15 	stw	r21,176(sp)
  80ab3c:	dd002b15 	stw	r20,172(sp)
  80ab40:	dfc03015 	stw	ra,192(sp)
  80ab44:	df002f15 	stw	fp,188(sp)
  80ab48:	ddc02e15 	stw	r23,184(sp)
  80ab4c:	dcc02a15 	stw	r19,168(sp)
  80ab50:	dc802915 	stw	r18,164(sp)
  80ab54:	dc402815 	stw	r17,160(sp)
  80ab58:	dc002715 	stw	r16,156(sp)
  80ab5c:	d9c00415 	stw	r7,16(sp)
  80ab60:	202d883a 	mov	r22,r4
  80ab64:	282b883a 	mov	r21,r5
  80ab68:	3029883a 	mov	r20,r6
  80ab6c:	20000226 	beq	r4,zero,80ab78 <___vfiprintf_internal_r+0x48>
  80ab70:	20800e17 	ldw	r2,56(r4)
  80ab74:	1001bd26 	beq	r2,zero,80b26c <___vfiprintf_internal_r+0x73c>
  80ab78:	a880030b 	ldhu	r2,12(r21)
  80ab7c:	10c8000c 	andi	r3,r2,8192
  80ab80:	1800061e 	bne	r3,zero,80ab9c <___vfiprintf_internal_r+0x6c>
  80ab84:	a8c01917 	ldw	r3,100(r21)
  80ab88:	0137ffc4 	movi	r4,-8193
  80ab8c:	10880014 	ori	r2,r2,8192
  80ab90:	1906703a 	and	r3,r3,r4
  80ab94:	a880030d 	sth	r2,12(r21)
  80ab98:	a8c01915 	stw	r3,100(r21)
  80ab9c:	10c0020c 	andi	r3,r2,8
  80aba0:	18010826 	beq	r3,zero,80afc4 <___vfiprintf_internal_r+0x494>
  80aba4:	a8c00417 	ldw	r3,16(r21)
  80aba8:	18010626 	beq	r3,zero,80afc4 <___vfiprintf_internal_r+0x494>
  80abac:	1080068c 	andi	r2,r2,26
  80abb0:	10800298 	cmpnei	r2,r2,10
  80abb4:	10010b26 	beq	r2,zero,80afe4 <___vfiprintf_internal_r+0x4b4>
  80abb8:	dc801704 	addi	r18,sp,92
  80abbc:	dc800a15 	stw	r18,40(sp)
  80abc0:	d8000c15 	stw	zero,48(sp)
  80abc4:	d8000b15 	stw	zero,44(sp)
  80abc8:	9021883a 	mov	r16,r18
  80abcc:	d8000515 	stw	zero,20(sp)
  80abd0:	d8000115 	stw	zero,4(sp)
  80abd4:	a0800007 	ldb	r2,0(r20)
  80abd8:	1000e826 	beq	r2,zero,80af7c <___vfiprintf_internal_r+0x44c>
  80abdc:	a023883a 	mov	r17,r20
  80abe0:	00000306 	br	80abf0 <___vfiprintf_internal_r+0xc0>
  80abe4:	88800047 	ldb	r2,1(r17)
  80abe8:	8c400044 	addi	r17,r17,1
  80abec:	10013326 	beq	r2,zero,80b0bc <___vfiprintf_internal_r+0x58c>
  80abf0:	10800958 	cmpnei	r2,r2,37
  80abf4:	103ffb1e 	bne	r2,zero,80abe4 <___vfiprintf_internal_r+0xb4>
  80abf8:	8d27c83a 	sub	r19,r17,r20
  80abfc:	8d01311e 	bne	r17,r20,80b0c4 <___vfiprintf_internal_r+0x594>
  80ac00:	88800003 	ldbu	r2,0(r17)
  80ac04:	10803fcc 	andi	r2,r2,255
  80ac08:	1080201c 	xori	r2,r2,128
  80ac0c:	10bfe004 	addi	r2,r2,-128
  80ac10:	1000da26 	beq	r2,zero,80af7c <___vfiprintf_internal_r+0x44c>
  80ac14:	88800047 	ldb	r2,1(r17)
  80ac18:	8d000044 	addi	r20,r17,1
  80ac1c:	d8000945 	stb	zero,37(sp)
  80ac20:	000b883a 	mov	r5,zero
  80ac24:	000d883a 	mov	r6,zero
  80ac28:	023fffc4 	movi	r8,-1
  80ac2c:	0023883a 	mov	r17,zero
  80ac30:	001b883a 	mov	r13,zero
  80ac34:	a5000044 	addi	r20,r20,1
  80ac38:	10fff804 	addi	r3,r2,-32
  80ac3c:	19001668 	cmpgeui	r4,r3,89
  80ac40:	20006c1e 	bne	r4,zero,80adf4 <___vfiprintf_internal_r+0x2c4>
  80ac44:	180690ba 	slli	r3,r3,2
  80ac48:	01002074 	movhi	r4,129
  80ac4c:	1909883a 	add	r4,r3,r4
  80ac50:	20eb1617 	ldw	r3,-21416(r4)
  80ac54:	1800683a 	jmp	r3
  80ac58:	0080b594 	movui	r2,726
  80ac5c:	0080adf4 	movhi	r2,695
  80ac60:	0080adf4 	movhi	r2,695
  80ac64:	0080b588 	cmpgei	r2,zero,726
  80ac68:	0080adf4 	movhi	r2,695
  80ac6c:	0080adf4 	movhi	r2,695
  80ac70:	0080adf4 	movhi	r2,695
  80ac74:	0080adf4 	movhi	r2,695
  80ac78:	0080adf4 	movhi	r2,695
  80ac7c:	0080adf4 	movhi	r2,695
  80ac80:	0080b560 	cmpeqi	r2,zero,725
  80ac84:	0080b550 	cmplti	r2,zero,725
  80ac88:	0080adf4 	movhi	r2,695
  80ac8c:	0080b538 	rdprs	r2,zero,724
  80ac90:	0080b4ec 	andhi	r2,zero,723
  80ac94:	0080adf4 	movhi	r2,695
  80ac98:	0080b4e0 	cmpeqi	r2,zero,723
  80ac9c:	0080adbc 	xorhi	r2,zero,694
  80aca0:	0080adbc 	xorhi	r2,zero,694
  80aca4:	0080adbc 	xorhi	r2,zero,694
  80aca8:	0080adbc 	xorhi	r2,zero,694
  80acac:	0080adbc 	xorhi	r2,zero,694
  80acb0:	0080adbc 	xorhi	r2,zero,694
  80acb4:	0080adbc 	xorhi	r2,zero,694
  80acb8:	0080adbc 	xorhi	r2,zero,694
  80acbc:	0080adbc 	xorhi	r2,zero,694
  80acc0:	0080adf4 	movhi	r2,695
  80acc4:	0080adf4 	movhi	r2,695
  80acc8:	0080adf4 	movhi	r2,695
  80accc:	0080adf4 	movhi	r2,695
  80acd0:	0080adf4 	movhi	r2,695
  80acd4:	0080adf4 	movhi	r2,695
  80acd8:	0080adf4 	movhi	r2,695
  80acdc:	0080adf4 	movhi	r2,695
  80ace0:	0080adf4 	movhi	r2,695
  80ace4:	0080adf4 	movhi	r2,695
  80ace8:	0080b3dc 	xori	r2,zero,719
  80acec:	0080adf4 	movhi	r2,695
  80acf0:	0080adf4 	movhi	r2,695
  80acf4:	0080adf4 	movhi	r2,695
  80acf8:	0080adf4 	movhi	r2,695
  80acfc:	0080adf4 	movhi	r2,695
  80ad00:	0080adf4 	movhi	r2,695
  80ad04:	0080adf4 	movhi	r2,695
  80ad08:	0080adf4 	movhi	r2,695
  80ad0c:	0080adf4 	movhi	r2,695
  80ad10:	0080adf4 	movhi	r2,695
  80ad14:	0080b054 	movui	r2,705
  80ad18:	0080adf4 	movhi	r2,695
  80ad1c:	0080adf4 	movhi	r2,695
  80ad20:	0080adf4 	movhi	r2,695
  80ad24:	0080adf4 	movhi	r2,695
  80ad28:	0080adf4 	movhi	r2,695
  80ad2c:	0080b02c 	andhi	r2,zero,704
  80ad30:	0080adf4 	movhi	r2,695
  80ad34:	0080adf4 	movhi	r2,695
  80ad38:	0080b5e8 	cmpgeui	r2,zero,727
  80ad3c:	0080adf4 	movhi	r2,695
  80ad40:	0080adf4 	movhi	r2,695
  80ad44:	0080adf4 	movhi	r2,695
  80ad48:	0080adf4 	movhi	r2,695
  80ad4c:	0080adf4 	movhi	r2,695
  80ad50:	0080adf4 	movhi	r2,695
  80ad54:	0080adf4 	movhi	r2,695
  80ad58:	0080adf4 	movhi	r2,695
  80ad5c:	0080adf4 	movhi	r2,695
  80ad60:	0080adf4 	movhi	r2,695
  80ad64:	0080b5c0 	call	80b5c <__alt_mem_sdram-0x77f4a4>
  80ad68:	0080b274 	movhi	r2,713
  80ad6c:	0080adf4 	movhi	r2,695
  80ad70:	0080adf4 	movhi	r2,695
  80ad74:	0080adf4 	movhi	r2,695
  80ad78:	0080b2e8 	cmpgeui	r2,zero,715
  80ad7c:	0080b274 	movhi	r2,713
  80ad80:	0080adf4 	movhi	r2,695
  80ad84:	0080adf4 	movhi	r2,695
  80ad88:	0080b66c 	andhi	r2,zero,729
  80ad8c:	0080adf4 	movhi	r2,695
  80ad90:	0080b630 	cmpltui	r2,zero,728
  80ad94:	0080b058 	cmpnei	r2,zero,705
  80ad98:	0080b3a0 	cmpeqi	r2,zero,718
  80ad9c:	0080b394 	movui	r2,718
  80ada0:	0080adf4 	movhi	r2,695
  80ada4:	0080b33c 	xorhi	r2,zero,716
  80ada8:	0080adf4 	movhi	r2,695
  80adac:	0080b030 	cmpltui	r2,zero,704
  80adb0:	0080adf4 	movhi	r2,695
  80adb4:	0080adf4 	movhi	r2,695
  80adb8:	0080b2f4 	movhi	r2,715
  80adbc:	0023883a 	mov	r17,zero
  80adc0:	113ff404 	addi	r4,r2,-48
  80adc4:	880690ba 	slli	r3,r17,2
  80adc8:	a0800007 	ldb	r2,0(r20)
  80adcc:	a5000044 	addi	r20,r20,1
  80add0:	1c63883a 	add	r17,r3,r17
  80add4:	8c63883a 	add	r17,r17,r17
  80add8:	2463883a 	add	r17,r4,r17
  80addc:	113ff404 	addi	r4,r2,-48
  80ade0:	20c002b0 	cmpltui	r3,r4,10
  80ade4:	183ff71e 	bne	r3,zero,80adc4 <___vfiprintf_internal_r+0x294>
  80ade8:	10fff804 	addi	r3,r2,-32
  80adec:	19001668 	cmpgeui	r4,r3,89
  80adf0:	203f9426 	beq	r4,zero,80ac44 <___vfiprintf_internal_r+0x114>
  80adf4:	29403fcc 	andi	r5,r5,255
  80adf8:	2803ed1e 	bne	r5,zero,80bdb0 <___vfiprintf_internal_r+0x1280>
  80adfc:	10005f26 	beq	r2,zero,80af7c <___vfiprintf_internal_r+0x44c>
  80ae00:	d8800d05 	stb	r2,52(sp)
  80ae04:	d8000945 	stb	zero,37(sp)
  80ae08:	05c00044 	movi	r23,1
  80ae0c:	07000044 	movi	fp,1
  80ae10:	dcc00d04 	addi	r19,sp,52
  80ae14:	db400015 	stw	r13,0(sp)
  80ae18:	0011883a 	mov	r8,zero
  80ae1c:	d8800017 	ldw	r2,0(sp)
  80ae20:	1380008c 	andi	r14,r2,2
  80ae24:	70000126 	beq	r14,zero,80ae2c <___vfiprintf_internal_r+0x2fc>
  80ae28:	bdc00084 	addi	r23,r23,2
  80ae2c:	d8800017 	ldw	r2,0(sp)
  80ae30:	d9000b17 	ldw	r4,44(sp)
  80ae34:	1340210c 	andi	r13,r2,132
  80ae38:	21800044 	addi	r6,r4,1
  80ae3c:	d8800c17 	ldw	r2,48(sp)
  80ae40:	300b883a 	mov	r5,r6
  80ae44:	6800021e 	bne	r13,zero,80ae50 <___vfiprintf_internal_r+0x320>
  80ae48:	8dc7c83a 	sub	r3,r17,r23
  80ae4c:	00c2e216 	blt	zero,r3,80b9d8 <___vfiprintf_internal_r+0xea8>
  80ae50:	d8c00947 	ldb	r3,37(sp)
  80ae54:	81800204 	addi	r6,r16,8
  80ae58:	18000d26 	beq	r3,zero,80ae90 <___vfiprintf_internal_r+0x360>
  80ae5c:	d8c00944 	addi	r3,sp,37
  80ae60:	10800044 	addi	r2,r2,1
  80ae64:	80c00015 	stw	r3,0(r16)
  80ae68:	00c00044 	movi	r3,1
  80ae6c:	80c00115 	stw	r3,4(r16)
  80ae70:	d8800c15 	stw	r2,48(sp)
  80ae74:	d9400b15 	stw	r5,44(sp)
  80ae78:	28c00208 	cmpgei	r3,r5,8
  80ae7c:	18029a1e 	bne	r3,zero,80b8e8 <___vfiprintf_internal_r+0xdb8>
  80ae80:	2809883a 	mov	r4,r5
  80ae84:	3021883a 	mov	r16,r6
  80ae88:	29400044 	addi	r5,r5,1
  80ae8c:	31800204 	addi	r6,r6,8
  80ae90:	70001826 	beq	r14,zero,80aef4 <___vfiprintf_internal_r+0x3c4>
  80ae94:	d8c00984 	addi	r3,sp,38
  80ae98:	10800084 	addi	r2,r2,2
  80ae9c:	80c00015 	stw	r3,0(r16)
  80aea0:	00c00084 	movi	r3,2
  80aea4:	80c00115 	stw	r3,4(r16)
  80aea8:	d8800c15 	stw	r2,48(sp)
  80aeac:	d9400b15 	stw	r5,44(sp)
  80aeb0:	28c00208 	cmpgei	r3,r5,8
  80aeb4:	1802a426 	beq	r3,zero,80b948 <___vfiprintf_internal_r+0xe18>
  80aeb8:	10032226 	beq	r2,zero,80bb44 <___vfiprintf_internal_r+0x1014>
  80aebc:	d9800a04 	addi	r6,sp,40
  80aec0:	a80b883a 	mov	r5,r21
  80aec4:	b009883a 	mov	r4,r22
  80aec8:	da000315 	stw	r8,12(sp)
  80aecc:	db400215 	stw	r13,8(sp)
  80aed0:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80aed4:	10002b1e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80aed8:	d9000b17 	ldw	r4,44(sp)
  80aedc:	d8800c17 	ldw	r2,48(sp)
  80aee0:	da000317 	ldw	r8,12(sp)
  80aee4:	db400217 	ldw	r13,8(sp)
  80aee8:	d9801904 	addi	r6,sp,100
  80aeec:	21400044 	addi	r5,r4,1
  80aef0:	9021883a 	mov	r16,r18
  80aef4:	6b402018 	cmpnei	r13,r13,128
  80aef8:	6801e526 	beq	r13,zero,80b690 <___vfiprintf_internal_r+0xb60>
  80aefc:	4711c83a 	sub	r8,r8,fp
  80af00:	02022416 	blt	zero,r8,80b794 <___vfiprintf_internal_r+0xc64>
  80af04:	e085883a 	add	r2,fp,r2
  80af08:	d9400b15 	stw	r5,44(sp)
  80af0c:	84c00015 	stw	r19,0(r16)
  80af10:	87000115 	stw	fp,4(r16)
  80af14:	d8800c15 	stw	r2,48(sp)
  80af18:	29400210 	cmplti	r5,r5,8
  80af1c:	2800081e 	bne	r5,zero,80af40 <___vfiprintf_internal_r+0x410>
  80af20:	10009826 	beq	r2,zero,80b184 <___vfiprintf_internal_r+0x654>
  80af24:	d9800a04 	addi	r6,sp,40
  80af28:	a80b883a 	mov	r5,r21
  80af2c:	b009883a 	mov	r4,r22
  80af30:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80af34:	1000131e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80af38:	d8800c17 	ldw	r2,48(sp)
  80af3c:	900d883a 	mov	r6,r18
  80af40:	d8c00017 	ldw	r3,0(sp)
  80af44:	1cc0010c 	andi	r19,r3,4
  80af48:	98000226 	beq	r19,zero,80af54 <___vfiprintf_internal_r+0x424>
  80af4c:	8de1c83a 	sub	r16,r17,r23
  80af50:	04009316 	blt	zero,r16,80b1a0 <___vfiprintf_internal_r+0x670>
  80af54:	8dc0010e 	bge	r17,r23,80af5c <___vfiprintf_internal_r+0x42c>
  80af58:	b823883a 	mov	r17,r23
  80af5c:	d8c00117 	ldw	r3,4(sp)
  80af60:	1c47883a 	add	r3,r3,r17
  80af64:	d8c00115 	stw	r3,4(sp)
  80af68:	1002551e 	bne	r2,zero,80b8c0 <___vfiprintf_internal_r+0xd90>
  80af6c:	a0800007 	ldb	r2,0(r20)
  80af70:	d8000b15 	stw	zero,44(sp)
  80af74:	9021883a 	mov	r16,r18
  80af78:	103f181e 	bne	r2,zero,80abdc <___vfiprintf_internal_r+0xac>
  80af7c:	d8800c17 	ldw	r2,48(sp)
  80af80:	10038d1e 	bne	r2,zero,80bdb8 <___vfiprintf_internal_r+0x1288>
  80af84:	a880030b 	ldhu	r2,12(r21)
  80af88:	1080100c 	andi	r2,r2,64
  80af8c:	1003a51e 	bne	r2,zero,80be24 <___vfiprintf_internal_r+0x12f4>
  80af90:	d8800117 	ldw	r2,4(sp)
  80af94:	dfc03017 	ldw	ra,192(sp)
  80af98:	df002f17 	ldw	fp,188(sp)
  80af9c:	ddc02e17 	ldw	r23,184(sp)
  80afa0:	dd802d17 	ldw	r22,180(sp)
  80afa4:	dd402c17 	ldw	r21,176(sp)
  80afa8:	dd002b17 	ldw	r20,172(sp)
  80afac:	dcc02a17 	ldw	r19,168(sp)
  80afb0:	dc802917 	ldw	r18,164(sp)
  80afb4:	dc402817 	ldw	r17,160(sp)
  80afb8:	dc002717 	ldw	r16,156(sp)
  80afbc:	dec03104 	addi	sp,sp,196
  80afc0:	f800283a 	ret
  80afc4:	a80b883a 	mov	r5,r21
  80afc8:	b009883a 	mov	r4,r22
  80afcc:	08055b40 	call	8055b4 <__swsetup_r>
  80afd0:	1003941e 	bne	r2,zero,80be24 <___vfiprintf_internal_r+0x12f4>
  80afd4:	a880030b 	ldhu	r2,12(r21)
  80afd8:	1080068c 	andi	r2,r2,26
  80afdc:	10800298 	cmpnei	r2,r2,10
  80afe0:	103ef51e 	bne	r2,zero,80abb8 <___vfiprintf_internal_r+0x88>
  80afe4:	a880038f 	ldh	r2,14(r21)
  80afe8:	103ef316 	blt	r2,zero,80abb8 <___vfiprintf_internal_r+0x88>
  80afec:	d9c00417 	ldw	r7,16(sp)
  80aff0:	a00d883a 	mov	r6,r20
  80aff4:	a80b883a 	mov	r5,r21
  80aff8:	b009883a 	mov	r4,r22
  80affc:	dfc03017 	ldw	ra,192(sp)
  80b000:	df002f17 	ldw	fp,188(sp)
  80b004:	ddc02e17 	ldw	r23,184(sp)
  80b008:	dd802d17 	ldw	r22,180(sp)
  80b00c:	dd402c17 	ldw	r21,176(sp)
  80b010:	dd002b17 	ldw	r20,172(sp)
  80b014:	dcc02a17 	ldw	r19,168(sp)
  80b018:	dc802917 	ldw	r18,164(sp)
  80b01c:	dc402817 	ldw	r17,160(sp)
  80b020:	dc002717 	ldw	r16,156(sp)
  80b024:	dec03104 	addi	sp,sp,196
  80b028:	080be901 	jmpi	80be90 <__sbprintf>
  80b02c:	6b400414 	ori	r13,r13,16
  80b030:	6880080c 	andi	r2,r13,32
  80b034:	10004726 	beq	r2,zero,80b154 <___vfiprintf_internal_r+0x624>
  80b038:	d8c00417 	ldw	r3,16(sp)
  80b03c:	00800044 	movi	r2,1
  80b040:	1dc00017 	ldw	r23,0(r3)
  80b044:	1f000117 	ldw	fp,4(r3)
  80b048:	18c00204 	addi	r3,r3,8
  80b04c:	d8c00415 	stw	r3,16(sp)
  80b050:	00000906 	br	80b078 <___vfiprintf_internal_r+0x548>
  80b054:	6b400414 	ori	r13,r13,16
  80b058:	6880080c 	andi	r2,r13,32
  80b05c:	10003126 	beq	r2,zero,80b124 <___vfiprintf_internal_r+0x5f4>
  80b060:	d8c00417 	ldw	r3,16(sp)
  80b064:	0005883a 	mov	r2,zero
  80b068:	1dc00017 	ldw	r23,0(r3)
  80b06c:	1f000117 	ldw	fp,4(r3)
  80b070:	18c00204 	addi	r3,r3,8
  80b074:	d8c00415 	stw	r3,16(sp)
  80b078:	d8000945 	stb	zero,37(sp)
  80b07c:	40ffffe0 	cmpeqi	r3,r8,-1
  80b080:	001d883a 	mov	r14,zero
  80b084:	1800f01e 	bne	r3,zero,80b448 <___vfiprintf_internal_r+0x918>
  80b088:	04ffdfc4 	movi	r19,-129
  80b08c:	6cc8703a 	and	r4,r13,r19
  80b090:	bf06b03a 	or	r3,r23,fp
  80b094:	d9000015 	stw	r4,0(sp)
  80b098:	1802301e 	bne	r3,zero,80b95c <___vfiprintf_internal_r+0xe2c>
  80b09c:	4001f31e 	bne	r8,zero,80b86c <___vfiprintf_internal_r+0xd3c>
  80b0a0:	10029e1e 	bne	r2,zero,80bb1c <___vfiprintf_internal_r+0xfec>
  80b0a4:	6f00004c 	andi	fp,r13,1
  80b0a8:	e002bc26 	beq	fp,zero,80bb9c <___vfiprintf_internal_r+0x106c>
  80b0ac:	00800c04 	movi	r2,48
  80b0b0:	d88016c5 	stb	r2,91(sp)
  80b0b4:	dcc016c4 	addi	r19,sp,91
  80b0b8:	00010006 	br	80b4bc <___vfiprintf_internal_r+0x98c>
  80b0bc:	8d27c83a 	sub	r19,r17,r20
  80b0c0:	8d3fae26 	beq	r17,r20,80af7c <___vfiprintf_internal_r+0x44c>
  80b0c4:	d8c00c17 	ldw	r3,48(sp)
  80b0c8:	d8800b17 	ldw	r2,44(sp)
  80b0cc:	85000015 	stw	r20,0(r16)
  80b0d0:	98c7883a 	add	r3,r19,r3
  80b0d4:	10800044 	addi	r2,r2,1
  80b0d8:	d8800b15 	stw	r2,44(sp)
  80b0dc:	84c00115 	stw	r19,4(r16)
  80b0e0:	d8c00c15 	stw	r3,48(sp)
  80b0e4:	10800208 	cmpgei	r2,r2,8
  80b0e8:	1000061e 	bne	r2,zero,80b104 <___vfiprintf_internal_r+0x5d4>
  80b0ec:	84000204 	addi	r16,r16,8
  80b0f0:	d8c00117 	ldw	r3,4(sp)
  80b0f4:	88800003 	ldbu	r2,0(r17)
  80b0f8:	1cc7883a 	add	r3,r3,r19
  80b0fc:	d8c00115 	stw	r3,4(sp)
  80b100:	003ec006 	br	80ac04 <___vfiprintf_internal_r+0xd4>
  80b104:	18028126 	beq	r3,zero,80bb0c <___vfiprintf_internal_r+0xfdc>
  80b108:	d9800a04 	addi	r6,sp,40
  80b10c:	a80b883a 	mov	r5,r21
  80b110:	b009883a 	mov	r4,r22
  80b114:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80b118:	103f9a1e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80b11c:	9021883a 	mov	r16,r18
  80b120:	003ff306 	br	80b0f0 <___vfiprintf_internal_r+0x5c0>
  80b124:	d9000417 	ldw	r4,16(sp)
  80b128:	6880040c 	andi	r2,r13,16
  80b12c:	20c00104 	addi	r3,r4,4
  80b130:	1002ac1e 	bne	r2,zero,80bbe4 <___vfiprintf_internal_r+0x10b4>
  80b134:	6880100c 	andi	r2,r13,64
  80b138:	1002fb26 	beq	r2,zero,80bd28 <___vfiprintf_internal_r+0x11f8>
  80b13c:	d8800417 	ldw	r2,16(sp)
  80b140:	0039883a 	mov	fp,zero
  80b144:	d8c00415 	stw	r3,16(sp)
  80b148:	15c0000b 	ldhu	r23,0(r2)
  80b14c:	0005883a 	mov	r2,zero
  80b150:	003fc906 	br	80b078 <___vfiprintf_internal_r+0x548>
  80b154:	d9000417 	ldw	r4,16(sp)
  80b158:	6880040c 	andi	r2,r13,16
  80b15c:	20c00104 	addi	r3,r4,4
  80b160:	1002af1e 	bne	r2,zero,80bc20 <___vfiprintf_internal_r+0x10f0>
  80b164:	6880100c 	andi	r2,r13,64
  80b168:	1002fb26 	beq	r2,zero,80bd58 <___vfiprintf_internal_r+0x1228>
  80b16c:	d8800417 	ldw	r2,16(sp)
  80b170:	0039883a 	mov	fp,zero
  80b174:	d8c00415 	stw	r3,16(sp)
  80b178:	15c0000b 	ldhu	r23,0(r2)
  80b17c:	00800044 	movi	r2,1
  80b180:	003fbd06 	br	80b078 <___vfiprintf_internal_r+0x548>
  80b184:	d8c00017 	ldw	r3,0(sp)
  80b188:	d8000b15 	stw	zero,44(sp)
  80b18c:	1cc0010c 	andi	r19,r3,4
  80b190:	98024c26 	beq	r19,zero,80bac4 <___vfiprintf_internal_r+0xf94>
  80b194:	8de1c83a 	sub	r16,r17,r23
  80b198:	04024a0e 	bge	zero,r16,80bac4 <___vfiprintf_internal_r+0xf94>
  80b19c:	900d883a 	mov	r6,r18
  80b1a0:	80c00450 	cmplti	r3,r16,17
  80b1a4:	d9000b17 	ldw	r4,44(sp)
  80b1a8:	01c02074 	movhi	r7,129
  80b1ac:	18031a1e 	bne	r3,zero,80be18 <___vfiprintf_internal_r+0x12e8>
  80b1b0:	39ca2b04 	addi	r7,r7,10412
  80b1b4:	04c00404 	movi	r19,16
  80b1b8:	00000606 	br	80b1d4 <___vfiprintf_internal_r+0x6a4>
  80b1bc:	21400084 	addi	r5,r4,2
  80b1c0:	31800204 	addi	r6,r6,8
  80b1c4:	1809883a 	mov	r4,r3
  80b1c8:	843ffc04 	addi	r16,r16,-16
  80b1cc:	80c00448 	cmpgei	r3,r16,17
  80b1d0:	18001726 	beq	r3,zero,80b230 <___vfiprintf_internal_r+0x700>
  80b1d4:	20c00044 	addi	r3,r4,1
  80b1d8:	10800404 	addi	r2,r2,16
  80b1dc:	31c00015 	stw	r7,0(r6)
  80b1e0:	34c00115 	stw	r19,4(r6)
  80b1e4:	d8800c15 	stw	r2,48(sp)
  80b1e8:	d8c00b15 	stw	r3,44(sp)
  80b1ec:	19400208 	cmpgei	r5,r3,8
  80b1f0:	283ff226 	beq	r5,zero,80b1bc <___vfiprintf_internal_r+0x68c>
  80b1f4:	d9800a04 	addi	r6,sp,40
  80b1f8:	a80b883a 	mov	r5,r21
  80b1fc:	b009883a 	mov	r4,r22
  80b200:	10011f26 	beq	r2,zero,80b680 <___vfiprintf_internal_r+0xb50>
  80b204:	d9c00015 	stw	r7,0(sp)
  80b208:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80b20c:	103f5d1e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80b210:	d9000b17 	ldw	r4,44(sp)
  80b214:	843ffc04 	addi	r16,r16,-16
  80b218:	80c00448 	cmpgei	r3,r16,17
  80b21c:	d8800c17 	ldw	r2,48(sp)
  80b220:	d9c00017 	ldw	r7,0(sp)
  80b224:	900d883a 	mov	r6,r18
  80b228:	21400044 	addi	r5,r4,1
  80b22c:	183fe91e 	bne	r3,zero,80b1d4 <___vfiprintf_internal_r+0x6a4>
  80b230:	1405883a 	add	r2,r2,r16
  80b234:	d9400b15 	stw	r5,44(sp)
  80b238:	31c00015 	stw	r7,0(r6)
  80b23c:	34000115 	stw	r16,4(r6)
  80b240:	d8800c15 	stw	r2,48(sp)
  80b244:	29400210 	cmplti	r5,r5,8
  80b248:	283f421e 	bne	r5,zero,80af54 <___vfiprintf_internal_r+0x424>
  80b24c:	10021d26 	beq	r2,zero,80bac4 <___vfiprintf_internal_r+0xf94>
  80b250:	d9800a04 	addi	r6,sp,40
  80b254:	a80b883a 	mov	r5,r21
  80b258:	b009883a 	mov	r4,r22
  80b25c:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80b260:	103f481e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80b264:	d8800c17 	ldw	r2,48(sp)
  80b268:	003f3a06 	br	80af54 <___vfiprintf_internal_r+0x424>
  80b26c:	08076f00 	call	8076f0 <__sinit>
  80b270:	003e4106 	br	80ab78 <___vfiprintf_internal_r+0x48>
  80b274:	29403fcc 	andi	r5,r5,255
  80b278:	2802da1e 	bne	r5,zero,80bde4 <___vfiprintf_internal_r+0x12b4>
  80b27c:	6880080c 	andi	r2,r13,32
  80b280:	10005b26 	beq	r2,zero,80b3f0 <___vfiprintf_internal_r+0x8c0>
  80b284:	d8c00417 	ldw	r3,16(sp)
  80b288:	18800117 	ldw	r2,4(r3)
  80b28c:	1dc00017 	ldw	r23,0(r3)
  80b290:	18c00204 	addi	r3,r3,8
  80b294:	d8c00415 	stw	r3,16(sp)
  80b298:	1039883a 	mov	fp,r2
  80b29c:	10006016 	blt	r2,zero,80b420 <___vfiprintf_internal_r+0x8f0>
  80b2a0:	40bfffd8 	cmpnei	r2,r8,-1
  80b2a4:	db800943 	ldbu	r14,37(sp)
  80b2a8:	10000626 	beq	r2,zero,80b2c4 <___vfiprintf_internal_r+0x794>
  80b2ac:	04ffdfc4 	movi	r19,-129
  80b2b0:	6cc6703a 	and	r3,r13,r19
  80b2b4:	bf04b03a 	or	r2,r23,fp
  80b2b8:	d8c00015 	stw	r3,0(sp)
  80b2bc:	10021626 	beq	r2,zero,80bb18 <___vfiprintf_internal_r+0xfe8>
  80b2c0:	db400017 	ldw	r13,0(sp)
  80b2c4:	e001a71e 	bne	fp,zero,80b964 <___vfiprintf_internal_r+0xe34>
  80b2c8:	b88002a8 	cmpgeui	r2,r23,10
  80b2cc:	1001a51e 	bne	r2,zero,80b964 <___vfiprintf_internal_r+0xe34>
  80b2d0:	bdc00c04 	addi	r23,r23,48
  80b2d4:	ddc016c5 	stb	r23,91(sp)
  80b2d8:	db400015 	stw	r13,0(sp)
  80b2dc:	07000044 	movi	fp,1
  80b2e0:	dcc016c4 	addi	r19,sp,91
  80b2e4:	00007506 	br	80b4bc <___vfiprintf_internal_r+0x98c>
  80b2e8:	a0800007 	ldb	r2,0(r20)
  80b2ec:	6b401014 	ori	r13,r13,64
  80b2f0:	003e5006 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80b2f4:	29403fcc 	andi	r5,r5,255
  80b2f8:	2802bc1e 	bne	r5,zero,80bdec <___vfiprintf_internal_r+0x12bc>
  80b2fc:	00c02074 	movhi	r3,129
  80b300:	18c9a004 	addi	r3,r3,9856
  80b304:	d8c00515 	stw	r3,20(sp)
  80b308:	68c0080c 	andi	r3,r13,32
  80b30c:	1800bd26 	beq	r3,zero,80b604 <___vfiprintf_internal_r+0xad4>
  80b310:	d8c00417 	ldw	r3,16(sp)
  80b314:	1dc00017 	ldw	r23,0(r3)
  80b318:	1f000117 	ldw	fp,4(r3)
  80b31c:	18c00204 	addi	r3,r3,8
  80b320:	d8c00415 	stw	r3,16(sp)
  80b324:	68c0004c 	andi	r3,r13,1
  80b328:	18000226 	beq	r3,zero,80b334 <___vfiprintf_internal_r+0x804>
  80b32c:	bf06b03a 	or	r3,r23,fp
  80b330:	1802261e 	bne	r3,zero,80bbcc <___vfiprintf_internal_r+0x109c>
  80b334:	00800084 	movi	r2,2
  80b338:	003f4f06 	br	80b078 <___vfiprintf_internal_r+0x548>
  80b33c:	d8800417 	ldw	r2,16(sp)
  80b340:	d8000945 	stb	zero,37(sp)
  80b344:	14c00017 	ldw	r19,0(r2)
  80b348:	10c00104 	addi	r3,r2,4
  80b34c:	98026926 	beq	r19,zero,80bcf4 <___vfiprintf_internal_r+0x11c4>
  80b350:	40bfffe0 	cmpeqi	r2,r8,-1
  80b354:	1002411e 	bne	r2,zero,80bc5c <___vfiprintf_internal_r+0x112c>
  80b358:	400d883a 	mov	r6,r8
  80b35c:	000b883a 	mov	r5,zero
  80b360:	9809883a 	mov	r4,r19
  80b364:	d8c00315 	stw	r3,12(sp)
  80b368:	db400215 	stw	r13,8(sp)
  80b36c:	da000015 	stw	r8,0(sp)
  80b370:	0808ba00 	call	808ba0 <memchr>
  80b374:	da000017 	ldw	r8,0(sp)
  80b378:	db400217 	ldw	r13,8(sp)
  80b37c:	d8c00317 	ldw	r3,12(sp)
  80b380:	10029426 	beq	r2,zero,80bdd4 <___vfiprintf_internal_r+0x12a4>
  80b384:	14f9c83a 	sub	fp,r2,r19
  80b388:	e02f883a 	mov	r23,fp
  80b38c:	d8c00415 	stw	r3,16(sp)
  80b390:	003ea006 	br	80ae14 <___vfiprintf_internal_r+0x2e4>
  80b394:	a0800007 	ldb	r2,0(r20)
  80b398:	6b400814 	ori	r13,r13,32
  80b39c:	003e2506 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80b3a0:	d8c00417 	ldw	r3,16(sp)
  80b3a4:	00800c04 	movi	r2,48
  80b3a8:	d8800985 	stb	r2,38(sp)
  80b3ac:	00801e04 	movi	r2,120
  80b3b0:	01002074 	movhi	r4,129
  80b3b4:	d88009c5 	stb	r2,39(sp)
  80b3b8:	18800104 	addi	r2,r3,4
  80b3bc:	d8800415 	stw	r2,16(sp)
  80b3c0:	2089a004 	addi	r2,r4,9856
  80b3c4:	d8800515 	stw	r2,20(sp)
  80b3c8:	1dc00017 	ldw	r23,0(r3)
  80b3cc:	0039883a 	mov	fp,zero
  80b3d0:	6b400094 	ori	r13,r13,2
  80b3d4:	00800084 	movi	r2,2
  80b3d8:	003f2706 	br	80b078 <___vfiprintf_internal_r+0x548>
  80b3dc:	29403fcc 	andi	r5,r5,255
  80b3e0:	2802841e 	bne	r5,zero,80bdf4 <___vfiprintf_internal_r+0x12c4>
  80b3e4:	6b400414 	ori	r13,r13,16
  80b3e8:	6880080c 	andi	r2,r13,32
  80b3ec:	103fa51e 	bne	r2,zero,80b284 <___vfiprintf_internal_r+0x754>
  80b3f0:	d9000417 	ldw	r4,16(sp)
  80b3f4:	6880040c 	andi	r2,r13,16
  80b3f8:	20c00104 	addi	r3,r4,4
  80b3fc:	1001ee1e 	bne	r2,zero,80bbb8 <___vfiprintf_internal_r+0x1088>
  80b400:	6880100c 	andi	r2,r13,64
  80b404:	10024e26 	beq	r2,zero,80bd40 <___vfiprintf_internal_r+0x1210>
  80b408:	d8800417 	ldw	r2,16(sp)
  80b40c:	d8c00415 	stw	r3,16(sp)
  80b410:	15c0000f 	ldh	r23,0(r2)
  80b414:	b839d7fa 	srai	fp,r23,31
  80b418:	e005883a 	mov	r2,fp
  80b41c:	103fa00e 	bge	r2,zero,80b2a0 <___vfiprintf_internal_r+0x770>
  80b420:	b804c03a 	cmpne	r2,r23,zero
  80b424:	0739c83a 	sub	fp,zero,fp
  80b428:	e0b9c83a 	sub	fp,fp,r2
  80b42c:	00800b44 	movi	r2,45
  80b430:	d8800945 	stb	r2,37(sp)
  80b434:	40ffffe0 	cmpeqi	r3,r8,-1
  80b438:	05efc83a 	sub	r23,zero,r23
  80b43c:	03800b44 	movi	r14,45
  80b440:	00800044 	movi	r2,1
  80b444:	183f1026 	beq	r3,zero,80b088 <___vfiprintf_internal_r+0x558>
  80b448:	10c00060 	cmpeqi	r3,r2,1
  80b44c:	183f9d1e 	bne	r3,zero,80b2c4 <___vfiprintf_internal_r+0x794>
  80b450:	108000a0 	cmpeqi	r2,r2,2
  80b454:	10010a1e 	bne	r2,zero,80b880 <___vfiprintf_internal_r+0xd50>
  80b458:	9027883a 	mov	r19,r18
  80b45c:	e008977a 	slli	r4,fp,29
  80b460:	b806d0fa 	srli	r3,r23,3
  80b464:	e038d0fa 	srli	fp,fp,3
  80b468:	b88001cc 	andi	r2,r23,7
  80b46c:	10800c04 	addi	r2,r2,48
  80b470:	20eeb03a 	or	r23,r4,r3
  80b474:	98bfffc5 	stb	r2,-1(r19)
  80b478:	bf06b03a 	or	r3,r23,fp
  80b47c:	980b883a 	mov	r5,r19
  80b480:	9cffffc4 	addi	r19,r19,-1
  80b484:	183ff51e 	bne	r3,zero,80b45c <___vfiprintf_internal_r+0x92c>
  80b488:	68c0004c 	andi	r3,r13,1
  80b48c:	18010926 	beq	r3,zero,80b8b4 <___vfiprintf_internal_r+0xd84>
  80b490:	10803fcc 	andi	r2,r2,255
  80b494:	1080201c 	xori	r2,r2,128
  80b498:	10bfe004 	addi	r2,r2,-128
  80b49c:	10800c18 	cmpnei	r2,r2,48
  80b4a0:	10010426 	beq	r2,zero,80b8b4 <___vfiprintf_internal_r+0xd84>
  80b4a4:	297fff84 	addi	r5,r5,-2
  80b4a8:	00800c04 	movi	r2,48
  80b4ac:	98bfffc5 	stb	r2,-1(r19)
  80b4b0:	9179c83a 	sub	fp,r18,r5
  80b4b4:	db400015 	stw	r13,0(sp)
  80b4b8:	2827883a 	mov	r19,r5
  80b4bc:	402f883a 	mov	r23,r8
  80b4c0:	4700010e 	bge	r8,fp,80b4c8 <___vfiprintf_internal_r+0x998>
  80b4c4:	e02f883a 	mov	r23,fp
  80b4c8:	73803fcc 	andi	r14,r14,255
  80b4cc:	7380201c 	xori	r14,r14,128
  80b4d0:	73bfe004 	addi	r14,r14,-128
  80b4d4:	703e5126 	beq	r14,zero,80ae1c <___vfiprintf_internal_r+0x2ec>
  80b4d8:	bdc00044 	addi	r23,r23,1
  80b4dc:	003e4f06 	br	80ae1c <___vfiprintf_internal_r+0x2ec>
  80b4e0:	a0800007 	ldb	r2,0(r20)
  80b4e4:	6b402014 	ori	r13,r13,128
  80b4e8:	003dd206 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80b4ec:	a0800007 	ldb	r2,0(r20)
  80b4f0:	a0c00044 	addi	r3,r20,1
  80b4f4:	11000aa0 	cmpeqi	r4,r2,42
  80b4f8:	2002521e 	bne	r4,zero,80be44 <___vfiprintf_internal_r+0x1314>
  80b4fc:	113ff404 	addi	r4,r2,-48
  80b500:	21c002b0 	cmpltui	r7,r4,10
  80b504:	1829883a 	mov	r20,r3
  80b508:	0011883a 	mov	r8,zero
  80b50c:	383dca26 	beq	r7,zero,80ac38 <___vfiprintf_internal_r+0x108>
  80b510:	400690ba 	slli	r3,r8,2
  80b514:	a0800007 	ldb	r2,0(r20)
  80b518:	a5000044 	addi	r20,r20,1
  80b51c:	1a11883a 	add	r8,r3,r8
  80b520:	4211883a 	add	r8,r8,r8
  80b524:	4111883a 	add	r8,r8,r4
  80b528:	113ff404 	addi	r4,r2,-48
  80b52c:	20c002b0 	cmpltui	r3,r4,10
  80b530:	183ff71e 	bne	r3,zero,80b510 <___vfiprintf_internal_r+0x9e0>
  80b534:	003dc006 	br	80ac38 <___vfiprintf_internal_r+0x108>
  80b538:	a0800003 	ldbu	r2,0(r20)
  80b53c:	10803fcc 	andi	r2,r2,255
  80b540:	1080201c 	xori	r2,r2,128
  80b544:	6b400114 	ori	r13,r13,4
  80b548:	10bfe004 	addi	r2,r2,-128
  80b54c:	003db906 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80b550:	a0800007 	ldb	r2,0(r20)
  80b554:	01400044 	movi	r5,1
  80b558:	01800ac4 	movi	r6,43
  80b55c:	003db506 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80b560:	d8c00417 	ldw	r3,16(sp)
  80b564:	a0800003 	ldbu	r2,0(r20)
  80b568:	1c400017 	ldw	r17,0(r3)
  80b56c:	18c00104 	addi	r3,r3,4
  80b570:	8801b716 	blt	r17,zero,80bc50 <___vfiprintf_internal_r+0x1120>
  80b574:	d8c00415 	stw	r3,16(sp)
  80b578:	10803fcc 	andi	r2,r2,255
  80b57c:	1080201c 	xori	r2,r2,128
  80b580:	10bfe004 	addi	r2,r2,-128
  80b584:	003dab06 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80b588:	a0800007 	ldb	r2,0(r20)
  80b58c:	6b400054 	ori	r13,r13,1
  80b590:	003da806 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80b594:	30c03fcc 	andi	r3,r6,255
  80b598:	18c0201c 	xori	r3,r3,128
  80b59c:	18ffe004 	addi	r3,r3,-128
  80b5a0:	a0800003 	ldbu	r2,0(r20)
  80b5a4:	183ff41e 	bne	r3,zero,80b578 <___vfiprintf_internal_r+0xa48>
  80b5a8:	10803fcc 	andi	r2,r2,255
  80b5ac:	1080201c 	xori	r2,r2,128
  80b5b0:	01400044 	movi	r5,1
  80b5b4:	01800804 	movi	r6,32
  80b5b8:	10bfe004 	addi	r2,r2,-128
  80b5bc:	003d9d06 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80b5c0:	d8c00417 	ldw	r3,16(sp)
  80b5c4:	d8000945 	stb	zero,37(sp)
  80b5c8:	05c00044 	movi	r23,1
  80b5cc:	18800017 	ldw	r2,0(r3)
  80b5d0:	18c00104 	addi	r3,r3,4
  80b5d4:	d8c00415 	stw	r3,16(sp)
  80b5d8:	d8800d05 	stb	r2,52(sp)
  80b5dc:	07000044 	movi	fp,1
  80b5e0:	dcc00d04 	addi	r19,sp,52
  80b5e4:	003e0b06 	br	80ae14 <___vfiprintf_internal_r+0x2e4>
  80b5e8:	29403fcc 	andi	r5,r5,255
  80b5ec:	2802061e 	bne	r5,zero,80be08 <___vfiprintf_internal_r+0x12d8>
  80b5f0:	00c02074 	movhi	r3,129
  80b5f4:	18c9a504 	addi	r3,r3,9876
  80b5f8:	d8c00515 	stw	r3,20(sp)
  80b5fc:	68c0080c 	andi	r3,r13,32
  80b600:	183f431e 	bne	r3,zero,80b310 <___vfiprintf_internal_r+0x7e0>
  80b604:	d9400417 	ldw	r5,16(sp)
  80b608:	68c0040c 	andi	r3,r13,16
  80b60c:	29000104 	addi	r4,r5,4
  80b610:	18017f1e 	bne	r3,zero,80bc10 <___vfiprintf_internal_r+0x10e0>
  80b614:	68c0100c 	andi	r3,r13,64
  80b618:	1801be26 	beq	r3,zero,80bd14 <___vfiprintf_internal_r+0x11e4>
  80b61c:	d8c00417 	ldw	r3,16(sp)
  80b620:	0039883a 	mov	fp,zero
  80b624:	d9000415 	stw	r4,16(sp)
  80b628:	1dc0000b 	ldhu	r23,0(r3)
  80b62c:	003f3d06 	br	80b324 <___vfiprintf_internal_r+0x7f4>
  80b630:	29403fcc 	andi	r5,r5,255
  80b634:	2801f61e 	bne	r5,zero,80be10 <___vfiprintf_internal_r+0x12e0>
  80b638:	d9000417 	ldw	r4,16(sp)
  80b63c:	6880080c 	andi	r2,r13,32
  80b640:	20c00017 	ldw	r3,0(r4)
  80b644:	21000104 	addi	r4,r4,4
  80b648:	10016b1e 	bne	r2,zero,80bbf8 <___vfiprintf_internal_r+0x10c8>
  80b64c:	6880040c 	andi	r2,r13,16
  80b650:	1001951e 	bne	r2,zero,80bca8 <___vfiprintf_internal_r+0x1178>
  80b654:	6b40100c 	andi	r13,r13,64
  80b658:	68019326 	beq	r13,zero,80bca8 <___vfiprintf_internal_r+0x1178>
  80b65c:	d8800117 	ldw	r2,4(sp)
  80b660:	d9000415 	stw	r4,16(sp)
  80b664:	1880000d 	sth	r2,0(r3)
  80b668:	003d5a06 	br	80abd4 <___vfiprintf_internal_r+0xa4>
  80b66c:	a0800007 	ldb	r2,0(r20)
  80b670:	10c01b18 	cmpnei	r3,r2,108
  80b674:	18019826 	beq	r3,zero,80bcd8 <___vfiprintf_internal_r+0x11a8>
  80b678:	6b400414 	ori	r13,r13,16
  80b67c:	003d6d06 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80b680:	01400044 	movi	r5,1
  80b684:	0009883a 	mov	r4,zero
  80b688:	900d883a 	mov	r6,r18
  80b68c:	003ece06 	br	80b1c8 <___vfiprintf_internal_r+0x698>
  80b690:	8dc7c83a 	sub	r3,r17,r23
  80b694:	00fe190e 	bge	zero,r3,80aefc <___vfiprintf_internal_r+0x3cc>
  80b698:	19c00450 	cmplti	r7,r3,17
  80b69c:	3801e41e 	bne	r7,zero,80be30 <___vfiprintf_internal_r+0x1300>
  80b6a0:	01c02074 	movhi	r7,129
  80b6a4:	39ca2704 	addi	r7,r7,10396
  80b6a8:	03400404 	movi	r13,16
  80b6ac:	00000606 	br	80b6c8 <___vfiprintf_internal_r+0xb98>
  80b6b0:	23800084 	addi	r14,r4,2
  80b6b4:	84000204 	addi	r16,r16,8
  80b6b8:	2809883a 	mov	r4,r5
  80b6bc:	18fffc04 	addi	r3,r3,-16
  80b6c0:	19400448 	cmpgei	r5,r3,17
  80b6c4:	28001c26 	beq	r5,zero,80b738 <___vfiprintf_internal_r+0xc08>
  80b6c8:	21400044 	addi	r5,r4,1
  80b6cc:	10800404 	addi	r2,r2,16
  80b6d0:	81c00015 	stw	r7,0(r16)
  80b6d4:	83400115 	stw	r13,4(r16)
  80b6d8:	d8800c15 	stw	r2,48(sp)
  80b6dc:	d9400b15 	stw	r5,44(sp)
  80b6e0:	29800208 	cmpgei	r6,r5,8
  80b6e4:	303ff226 	beq	r6,zero,80b6b0 <___vfiprintf_internal_r+0xb80>
  80b6e8:	d9800a04 	addi	r6,sp,40
  80b6ec:	a80b883a 	mov	r5,r21
  80b6f0:	b009883a 	mov	r4,r22
  80b6f4:	10007826 	beq	r2,zero,80b8d8 <___vfiprintf_internal_r+0xda8>
  80b6f8:	d9c00615 	stw	r7,24(sp)
  80b6fc:	d8c00315 	stw	r3,12(sp)
  80b700:	da000215 	stw	r8,8(sp)
  80b704:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80b708:	103e1e1e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80b70c:	d8c00317 	ldw	r3,12(sp)
  80b710:	d9000b17 	ldw	r4,44(sp)
  80b714:	d8800c17 	ldw	r2,48(sp)
  80b718:	18fffc04 	addi	r3,r3,-16
  80b71c:	19400448 	cmpgei	r5,r3,17
  80b720:	d9c00617 	ldw	r7,24(sp)
  80b724:	da000217 	ldw	r8,8(sp)
  80b728:	9021883a 	mov	r16,r18
  80b72c:	23800044 	addi	r14,r4,1
  80b730:	03400404 	movi	r13,16
  80b734:	283fe41e 	bne	r5,zero,80b6c8 <___vfiprintf_internal_r+0xb98>
  80b738:	83400204 	addi	r13,r16,8
  80b73c:	10c5883a 	add	r2,r2,r3
  80b740:	80c00115 	stw	r3,4(r16)
  80b744:	81c00015 	stw	r7,0(r16)
  80b748:	d8800c15 	stw	r2,48(sp)
  80b74c:	db800b15 	stw	r14,44(sp)
  80b750:	70c00208 	cmpgei	r3,r14,8
  80b754:	18011326 	beq	r3,zero,80bba4 <___vfiprintf_internal_r+0x1074>
  80b758:	10018826 	beq	r2,zero,80bd7c <___vfiprintf_internal_r+0x124c>
  80b75c:	d9800a04 	addi	r6,sp,40
  80b760:	a80b883a 	mov	r5,r21
  80b764:	b009883a 	mov	r4,r22
  80b768:	da000215 	stw	r8,8(sp)
  80b76c:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80b770:	103e041e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80b774:	da000217 	ldw	r8,8(sp)
  80b778:	d9000b17 	ldw	r4,44(sp)
  80b77c:	d8800c17 	ldw	r2,48(sp)
  80b780:	4711c83a 	sub	r8,r8,fp
  80b784:	d9801904 	addi	r6,sp,100
  80b788:	21400044 	addi	r5,r4,1
  80b78c:	9021883a 	mov	r16,r18
  80b790:	023ddc0e 	bge	zero,r8,80af04 <___vfiprintf_internal_r+0x3d4>
  80b794:	40c00450 	cmplti	r3,r8,17
  80b798:	01c02074 	movhi	r7,129
  80b79c:	1801741e 	bne	r3,zero,80bd70 <___vfiprintf_internal_r+0x1240>
  80b7a0:	39ca2704 	addi	r7,r7,10396
  80b7a4:	03400404 	movi	r13,16
  80b7a8:	00000606 	br	80b7c4 <___vfiprintf_internal_r+0xc94>
  80b7ac:	21400084 	addi	r5,r4,2
  80b7b0:	84000204 	addi	r16,r16,8
  80b7b4:	1809883a 	mov	r4,r3
  80b7b8:	423ffc04 	addi	r8,r8,-16
  80b7bc:	40c00448 	cmpgei	r3,r8,17
  80b7c0:	18001a26 	beq	r3,zero,80b82c <___vfiprintf_internal_r+0xcfc>
  80b7c4:	20c00044 	addi	r3,r4,1
  80b7c8:	10800404 	addi	r2,r2,16
  80b7cc:	81c00015 	stw	r7,0(r16)
  80b7d0:	83400115 	stw	r13,4(r16)
  80b7d4:	d8800c15 	stw	r2,48(sp)
  80b7d8:	d8c00b15 	stw	r3,44(sp)
  80b7dc:	19400208 	cmpgei	r5,r3,8
  80b7e0:	283ff226 	beq	r5,zero,80b7ac <___vfiprintf_internal_r+0xc7c>
  80b7e4:	d9800a04 	addi	r6,sp,40
  80b7e8:	a80b883a 	mov	r5,r21
  80b7ec:	b009883a 	mov	r4,r22
  80b7f0:	10001a26 	beq	r2,zero,80b85c <___vfiprintf_internal_r+0xd2c>
  80b7f4:	d9c00315 	stw	r7,12(sp)
  80b7f8:	da000215 	stw	r8,8(sp)
  80b7fc:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80b800:	103de01e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80b804:	da000217 	ldw	r8,8(sp)
  80b808:	d9000b17 	ldw	r4,44(sp)
  80b80c:	d8800c17 	ldw	r2,48(sp)
  80b810:	423ffc04 	addi	r8,r8,-16
  80b814:	40c00448 	cmpgei	r3,r8,17
  80b818:	d9c00317 	ldw	r7,12(sp)
  80b81c:	9021883a 	mov	r16,r18
  80b820:	21400044 	addi	r5,r4,1
  80b824:	03400404 	movi	r13,16
  80b828:	183fe61e 	bne	r3,zero,80b7c4 <___vfiprintf_internal_r+0xc94>
  80b82c:	81000204 	addi	r4,r16,8
  80b830:	1205883a 	add	r2,r2,r8
  80b834:	81c00015 	stw	r7,0(r16)
  80b838:	82000115 	stw	r8,4(r16)
  80b83c:	d8800c15 	stw	r2,48(sp)
  80b840:	d9400b15 	stw	r5,44(sp)
  80b844:	28c00208 	cmpgei	r3,r5,8
  80b848:	1800a41e 	bne	r3,zero,80badc <___vfiprintf_internal_r+0xfac>
  80b84c:	29400044 	addi	r5,r5,1
  80b850:	21800204 	addi	r6,r4,8
  80b854:	2021883a 	mov	r16,r4
  80b858:	003daa06 	br	80af04 <___vfiprintf_internal_r+0x3d4>
  80b85c:	01400044 	movi	r5,1
  80b860:	0009883a 	mov	r4,zero
  80b864:	9021883a 	mov	r16,r18
  80b868:	003fd306 	br	80b7b8 <___vfiprintf_internal_r+0xc88>
  80b86c:	10c00060 	cmpeqi	r3,r2,1
  80b870:	1801561e 	bne	r3,zero,80bdcc <___vfiprintf_internal_r+0x129c>
  80b874:	108000a0 	cmpeqi	r2,r2,2
  80b878:	db400017 	ldw	r13,0(sp)
  80b87c:	103ef626 	beq	r2,zero,80b458 <___vfiprintf_internal_r+0x928>
  80b880:	9027883a 	mov	r19,r18
  80b884:	d9000517 	ldw	r4,20(sp)
  80b888:	b88003cc 	andi	r2,r23,15
  80b88c:	e006973a 	slli	r3,fp,28
  80b890:	b82ed13a 	srli	r23,r23,4
  80b894:	2085883a 	add	r2,r4,r2
  80b898:	10800003 	ldbu	r2,0(r2)
  80b89c:	e038d13a 	srli	fp,fp,4
  80b8a0:	1deeb03a 	or	r23,r3,r23
  80b8a4:	98bfffc5 	stb	r2,-1(r19)
  80b8a8:	bf04b03a 	or	r2,r23,fp
  80b8ac:	9cffffc4 	addi	r19,r19,-1
  80b8b0:	103ff41e 	bne	r2,zero,80b884 <___vfiprintf_internal_r+0xd54>
  80b8b4:	94f9c83a 	sub	fp,r18,r19
  80b8b8:	db400015 	stw	r13,0(sp)
  80b8bc:	003eff06 	br	80b4bc <___vfiprintf_internal_r+0x98c>
  80b8c0:	d9800a04 	addi	r6,sp,40
  80b8c4:	a80b883a 	mov	r5,r21
  80b8c8:	b009883a 	mov	r4,r22
  80b8cc:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80b8d0:	103da626 	beq	r2,zero,80af6c <___vfiprintf_internal_r+0x43c>
  80b8d4:	003dab06 	br	80af84 <___vfiprintf_internal_r+0x454>
  80b8d8:	03800044 	movi	r14,1
  80b8dc:	0009883a 	mov	r4,zero
  80b8e0:	9021883a 	mov	r16,r18
  80b8e4:	003f7506 	br	80b6bc <___vfiprintf_internal_r+0xb8c>
  80b8e8:	10009026 	beq	r2,zero,80bb2c <___vfiprintf_internal_r+0xffc>
  80b8ec:	d9800a04 	addi	r6,sp,40
  80b8f0:	a80b883a 	mov	r5,r21
  80b8f4:	b009883a 	mov	r4,r22
  80b8f8:	da000615 	stw	r8,24(sp)
  80b8fc:	db400315 	stw	r13,12(sp)
  80b900:	db800215 	stw	r14,8(sp)
  80b904:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80b908:	103d9e1e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80b90c:	d9000b17 	ldw	r4,44(sp)
  80b910:	d8800c17 	ldw	r2,48(sp)
  80b914:	da000617 	ldw	r8,24(sp)
  80b918:	db400317 	ldw	r13,12(sp)
  80b91c:	db800217 	ldw	r14,8(sp)
  80b920:	d9801904 	addi	r6,sp,100
  80b924:	21400044 	addi	r5,r4,1
  80b928:	9021883a 	mov	r16,r18
  80b92c:	003d5806 	br	80ae90 <___vfiprintf_internal_r+0x360>
  80b930:	d8800984 	addi	r2,sp,38
  80b934:	d8801715 	stw	r2,92(sp)
  80b938:	00800084 	movi	r2,2
  80b93c:	d8801815 	stw	r2,96(sp)
  80b940:	d9801904 	addi	r6,sp,100
  80b944:	01400044 	movi	r5,1
  80b948:	3021883a 	mov	r16,r6
  80b94c:	2809883a 	mov	r4,r5
  80b950:	21400044 	addi	r5,r4,1
  80b954:	81800204 	addi	r6,r16,8
  80b958:	003d6606 	br	80aef4 <___vfiprintf_internal_r+0x3c4>
  80b95c:	db400017 	ldw	r13,0(sp)
  80b960:	003eb906 	br	80b448 <___vfiprintf_internal_r+0x918>
  80b964:	9027883a 	mov	r19,r18
  80b968:	b809883a 	mov	r4,r23
  80b96c:	e00b883a 	mov	r5,fp
  80b970:	01800284 	movi	r6,10
  80b974:	000f883a 	mov	r7,zero
  80b978:	db800315 	stw	r14,12(sp)
  80b97c:	da000215 	stw	r8,8(sp)
  80b980:	db400015 	stw	r13,0(sp)
  80b984:	080d6d80 	call	80d6d8 <__umoddi3>
  80b988:	10800c04 	addi	r2,r2,48
  80b98c:	b809883a 	mov	r4,r23
  80b990:	e00b883a 	mov	r5,fp
  80b994:	98bfffc5 	stb	r2,-1(r19)
  80b998:	01800284 	movi	r6,10
  80b99c:	000f883a 	mov	r7,zero
  80b9a0:	080d0b80 	call	80d0b8 <__udivdi3>
  80b9a4:	e009883a 	mov	r4,fp
  80b9a8:	b80b883a 	mov	r5,r23
  80b9ac:	db400017 	ldw	r13,0(sp)
  80b9b0:	da000217 	ldw	r8,8(sp)
  80b9b4:	db800317 	ldw	r14,12(sp)
  80b9b8:	9cffffc4 	addi	r19,r19,-1
  80b9bc:	102f883a 	mov	r23,r2
  80b9c0:	1839883a 	mov	fp,r3
  80b9c4:	203fe81e 	bne	r4,zero,80b968 <___vfiprintf_internal_r+0xe38>
  80b9c8:	294002a8 	cmpgeui	r5,r5,10
  80b9cc:	283fe61e 	bne	r5,zero,80b968 <___vfiprintf_internal_r+0xe38>
  80b9d0:	94f9c83a 	sub	fp,r18,r19
  80b9d4:	003eb906 	br	80b4bc <___vfiprintf_internal_r+0x98c>
  80b9d8:	19400450 	cmplti	r5,r3,17
  80b9dc:	01c02074 	movhi	r7,129
  80b9e0:	2801061e 	bne	r5,zero,80bdfc <___vfiprintf_internal_r+0x12cc>
  80b9e4:	39ca2b04 	addi	r7,r7,10412
  80b9e8:	03c00404 	movi	r15,16
  80b9ec:	00000706 	br	80ba0c <___vfiprintf_internal_r+0xedc>
  80b9f0:	27c00084 	addi	ra,r4,2
  80b9f4:	84000204 	addi	r16,r16,8
  80b9f8:	3009883a 	mov	r4,r6
  80b9fc:	18fffc04 	addi	r3,r3,-16
  80ba00:	19400448 	cmpgei	r5,r3,17
  80ba04:	28002026 	beq	r5,zero,80ba88 <___vfiprintf_internal_r+0xf58>
  80ba08:	21800044 	addi	r6,r4,1
  80ba0c:	10800404 	addi	r2,r2,16
  80ba10:	81c00015 	stw	r7,0(r16)
  80ba14:	83c00115 	stw	r15,4(r16)
  80ba18:	d8800c15 	stw	r2,48(sp)
  80ba1c:	d9800b15 	stw	r6,44(sp)
  80ba20:	31400208 	cmpgei	r5,r6,8
  80ba24:	283ff226 	beq	r5,zero,80b9f0 <___vfiprintf_internal_r+0xec0>
  80ba28:	d9800a04 	addi	r6,sp,40
  80ba2c:	a80b883a 	mov	r5,r21
  80ba30:	b009883a 	mov	r4,r22
  80ba34:	10001f26 	beq	r2,zero,80bab4 <___vfiprintf_internal_r+0xf84>
  80ba38:	d9c00815 	stw	r7,32(sp)
  80ba3c:	d8c00715 	stw	r3,28(sp)
  80ba40:	da000615 	stw	r8,24(sp)
  80ba44:	db400315 	stw	r13,12(sp)
  80ba48:	db800215 	stw	r14,8(sp)
  80ba4c:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80ba50:	103d4c1e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80ba54:	d8c00717 	ldw	r3,28(sp)
  80ba58:	d9000b17 	ldw	r4,44(sp)
  80ba5c:	d8800c17 	ldw	r2,48(sp)
  80ba60:	18fffc04 	addi	r3,r3,-16
  80ba64:	19400448 	cmpgei	r5,r3,17
  80ba68:	d9c00817 	ldw	r7,32(sp)
  80ba6c:	da000617 	ldw	r8,24(sp)
  80ba70:	db400317 	ldw	r13,12(sp)
  80ba74:	db800217 	ldw	r14,8(sp)
  80ba78:	9021883a 	mov	r16,r18
  80ba7c:	27c00044 	addi	ra,r4,1
  80ba80:	03c00404 	movi	r15,16
  80ba84:	283fe01e 	bne	r5,zero,80ba08 <___vfiprintf_internal_r+0xed8>
  80ba88:	10c5883a 	add	r2,r2,r3
  80ba8c:	80c00115 	stw	r3,4(r16)
  80ba90:	81c00015 	stw	r7,0(r16)
  80ba94:	d8800c15 	stw	r2,48(sp)
  80ba98:	dfc00b15 	stw	ra,44(sp)
  80ba9c:	f8c00208 	cmpgei	r3,ra,8
  80baa0:	18002d1e 	bne	r3,zero,80bb58 <___vfiprintf_internal_r+0x1028>
  80baa4:	84000204 	addi	r16,r16,8
  80baa8:	f9400044 	addi	r5,ra,1
  80baac:	f809883a 	mov	r4,ra
  80bab0:	003ce706 	br	80ae50 <___vfiprintf_internal_r+0x320>
  80bab4:	0009883a 	mov	r4,zero
  80bab8:	07c00044 	movi	ra,1
  80babc:	9021883a 	mov	r16,r18
  80bac0:	003fce06 	br	80b9fc <___vfiprintf_internal_r+0xecc>
  80bac4:	8dc0010e 	bge	r17,r23,80bacc <___vfiprintf_internal_r+0xf9c>
  80bac8:	b823883a 	mov	r17,r23
  80bacc:	d8800117 	ldw	r2,4(sp)
  80bad0:	1445883a 	add	r2,r2,r17
  80bad4:	d8800115 	stw	r2,4(sp)
  80bad8:	003d2406 	br	80af6c <___vfiprintf_internal_r+0x43c>
  80badc:	10007626 	beq	r2,zero,80bcb8 <___vfiprintf_internal_r+0x1188>
  80bae0:	d9800a04 	addi	r6,sp,40
  80bae4:	a80b883a 	mov	r5,r21
  80bae8:	b009883a 	mov	r4,r22
  80baec:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80baf0:	103d241e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80baf4:	d9400b17 	ldw	r5,44(sp)
  80baf8:	d8800c17 	ldw	r2,48(sp)
  80bafc:	d9801904 	addi	r6,sp,100
  80bb00:	29400044 	addi	r5,r5,1
  80bb04:	9021883a 	mov	r16,r18
  80bb08:	003cfe06 	br	80af04 <___vfiprintf_internal_r+0x3d4>
  80bb0c:	d8000b15 	stw	zero,44(sp)
  80bb10:	9021883a 	mov	r16,r18
  80bb14:	003d7606 	br	80b0f0 <___vfiprintf_internal_r+0x5c0>
  80bb18:	4000ac1e 	bne	r8,zero,80bdcc <___vfiprintf_internal_r+0x129c>
  80bb1c:	0011883a 	mov	r8,zero
  80bb20:	0039883a 	mov	fp,zero
  80bb24:	9027883a 	mov	r19,r18
  80bb28:	003e6406 	br	80b4bc <___vfiprintf_internal_r+0x98c>
  80bb2c:	7000411e 	bne	r14,zero,80bc34 <___vfiprintf_internal_r+0x1104>
  80bb30:	0009883a 	mov	r4,zero
  80bb34:	d9801904 	addi	r6,sp,100
  80bb38:	01400044 	movi	r5,1
  80bb3c:	9021883a 	mov	r16,r18
  80bb40:	003cec06 	br	80aef4 <___vfiprintf_internal_r+0x3c4>
  80bb44:	d9801904 	addi	r6,sp,100
  80bb48:	01400044 	movi	r5,1
  80bb4c:	0009883a 	mov	r4,zero
  80bb50:	9021883a 	mov	r16,r18
  80bb54:	003ce706 	br	80aef4 <___vfiprintf_internal_r+0x3c4>
  80bb58:	10004a26 	beq	r2,zero,80bc84 <___vfiprintf_internal_r+0x1154>
  80bb5c:	d9800a04 	addi	r6,sp,40
  80bb60:	a80b883a 	mov	r5,r21
  80bb64:	b009883a 	mov	r4,r22
  80bb68:	da000615 	stw	r8,24(sp)
  80bb6c:	db400315 	stw	r13,12(sp)
  80bb70:	db800215 	stw	r14,8(sp)
  80bb74:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80bb78:	103d021e 	bne	r2,zero,80af84 <___vfiprintf_internal_r+0x454>
  80bb7c:	d9000b17 	ldw	r4,44(sp)
  80bb80:	d8800c17 	ldw	r2,48(sp)
  80bb84:	da000617 	ldw	r8,24(sp)
  80bb88:	db400317 	ldw	r13,12(sp)
  80bb8c:	db800217 	ldw	r14,8(sp)
  80bb90:	9021883a 	mov	r16,r18
  80bb94:	21400044 	addi	r5,r4,1
  80bb98:	003cad06 	br	80ae50 <___vfiprintf_internal_r+0x320>
  80bb9c:	9027883a 	mov	r19,r18
  80bba0:	003e4606 	br	80b4bc <___vfiprintf_internal_r+0x98c>
  80bba4:	71400044 	addi	r5,r14,1
  80bba8:	69800204 	addi	r6,r13,8
  80bbac:	7009883a 	mov	r4,r14
  80bbb0:	6821883a 	mov	r16,r13
  80bbb4:	003cd106 	br	80aefc <___vfiprintf_internal_r+0x3cc>
  80bbb8:	25c00017 	ldw	r23,0(r4)
  80bbbc:	d8c00415 	stw	r3,16(sp)
  80bbc0:	b839d7fa 	srai	fp,r23,31
  80bbc4:	e005883a 	mov	r2,fp
  80bbc8:	003db406 	br	80b29c <___vfiprintf_internal_r+0x76c>
  80bbcc:	00c00c04 	movi	r3,48
  80bbd0:	d88009c5 	stb	r2,39(sp)
  80bbd4:	d8c00985 	stb	r3,38(sp)
  80bbd8:	6b400094 	ori	r13,r13,2
  80bbdc:	00800084 	movi	r2,2
  80bbe0:	003d2506 	br	80b078 <___vfiprintf_internal_r+0x548>
  80bbe4:	25c00017 	ldw	r23,0(r4)
  80bbe8:	0039883a 	mov	fp,zero
  80bbec:	d8c00415 	stw	r3,16(sp)
  80bbf0:	0005883a 	mov	r2,zero
  80bbf4:	003d2006 	br	80b078 <___vfiprintf_internal_r+0x548>
  80bbf8:	d9400117 	ldw	r5,4(sp)
  80bbfc:	d9000415 	stw	r4,16(sp)
  80bc00:	2805d7fa 	srai	r2,r5,31
  80bc04:	19400015 	stw	r5,0(r3)
  80bc08:	18800115 	stw	r2,4(r3)
  80bc0c:	003bf106 	br	80abd4 <___vfiprintf_internal_r+0xa4>
  80bc10:	2dc00017 	ldw	r23,0(r5)
  80bc14:	0039883a 	mov	fp,zero
  80bc18:	d9000415 	stw	r4,16(sp)
  80bc1c:	003dc106 	br	80b324 <___vfiprintf_internal_r+0x7f4>
  80bc20:	25c00017 	ldw	r23,0(r4)
  80bc24:	0039883a 	mov	fp,zero
  80bc28:	d8c00415 	stw	r3,16(sp)
  80bc2c:	00800044 	movi	r2,1
  80bc30:	003d1106 	br	80b078 <___vfiprintf_internal_r+0x548>
  80bc34:	d8800984 	addi	r2,sp,38
  80bc38:	d8801715 	stw	r2,92(sp)
  80bc3c:	00800084 	movi	r2,2
  80bc40:	d8801815 	stw	r2,96(sp)
  80bc44:	dc001904 	addi	r16,sp,100
  80bc48:	01000044 	movi	r4,1
  80bc4c:	003f4006 	br	80b950 <___vfiprintf_internal_r+0xe20>
  80bc50:	0463c83a 	sub	r17,zero,r17
  80bc54:	d8c00415 	stw	r3,16(sp)
  80bc58:	003e3806 	br	80b53c <___vfiprintf_internal_r+0xa0c>
  80bc5c:	9809883a 	mov	r4,r19
  80bc60:	d8c00215 	stw	r3,8(sp)
  80bc64:	db400015 	stw	r13,0(sp)
  80bc68:	080333c0 	call	80333c <strlen>
  80bc6c:	d8c00217 	ldw	r3,8(sp)
  80bc70:	db400017 	ldw	r13,0(sp)
  80bc74:	1039883a 	mov	fp,r2
  80bc78:	102f883a 	mov	r23,r2
  80bc7c:	d8c00415 	stw	r3,16(sp)
  80bc80:	003c6406 	br	80ae14 <___vfiprintf_internal_r+0x2e4>
  80bc84:	d8c00947 	ldb	r3,37(sp)
  80bc88:	18004326 	beq	r3,zero,80bd98 <___vfiprintf_internal_r+0x1268>
  80bc8c:	d8800944 	addi	r2,sp,37
  80bc90:	d8801715 	stw	r2,92(sp)
  80bc94:	00800044 	movi	r2,1
  80bc98:	d8801815 	stw	r2,96(sp)
  80bc9c:	d9801904 	addi	r6,sp,100
  80bca0:	01400044 	movi	r5,1
  80bca4:	003c7606 	br	80ae80 <___vfiprintf_internal_r+0x350>
  80bca8:	d8800117 	ldw	r2,4(sp)
  80bcac:	18800015 	stw	r2,0(r3)
  80bcb0:	d9000415 	stw	r4,16(sp)
  80bcb4:	003bc706 	br	80abd4 <___vfiprintf_internal_r+0xa4>
  80bcb8:	00c00044 	movi	r3,1
  80bcbc:	e005883a 	mov	r2,fp
  80bcc0:	dcc01715 	stw	r19,92(sp)
  80bcc4:	df001815 	stw	fp,96(sp)
  80bcc8:	df000c15 	stw	fp,48(sp)
  80bccc:	d8c00b15 	stw	r3,44(sp)
  80bcd0:	d9801904 	addi	r6,sp,100
  80bcd4:	003c9a06 	br	80af40 <___vfiprintf_internal_r+0x410>
  80bcd8:	a0800043 	ldbu	r2,1(r20)
  80bcdc:	6b400814 	ori	r13,r13,32
  80bce0:	a5000044 	addi	r20,r20,1
  80bce4:	10803fcc 	andi	r2,r2,255
  80bce8:	1080201c 	xori	r2,r2,128
  80bcec:	10bfe004 	addi	r2,r2,-128
  80bcf0:	003bd006 	br	80ac34 <___vfiprintf_internal_r+0x104>
  80bcf4:	408001f0 	cmpltui	r2,r8,7
  80bcf8:	4039883a 	mov	fp,r8
  80bcfc:	10002426 	beq	r2,zero,80bd90 <___vfiprintf_internal_r+0x1260>
  80bd00:	04c02074 	movhi	r19,129
  80bd04:	e02f883a 	mov	r23,fp
  80bd08:	d8c00415 	stw	r3,16(sp)
  80bd0c:	9cc9aa04 	addi	r19,r19,9896
  80bd10:	003c4006 	br	80ae14 <___vfiprintf_internal_r+0x2e4>
  80bd14:	d8c00417 	ldw	r3,16(sp)
  80bd18:	0039883a 	mov	fp,zero
  80bd1c:	d9000415 	stw	r4,16(sp)
  80bd20:	1dc00017 	ldw	r23,0(r3)
  80bd24:	003d7f06 	br	80b324 <___vfiprintf_internal_r+0x7f4>
  80bd28:	d8800417 	ldw	r2,16(sp)
  80bd2c:	0039883a 	mov	fp,zero
  80bd30:	d8c00415 	stw	r3,16(sp)
  80bd34:	15c00017 	ldw	r23,0(r2)
  80bd38:	0005883a 	mov	r2,zero
  80bd3c:	003cce06 	br	80b078 <___vfiprintf_internal_r+0x548>
  80bd40:	d8800417 	ldw	r2,16(sp)
  80bd44:	d8c00415 	stw	r3,16(sp)
  80bd48:	15c00017 	ldw	r23,0(r2)
  80bd4c:	b839d7fa 	srai	fp,r23,31
  80bd50:	e005883a 	mov	r2,fp
  80bd54:	003d5106 	br	80b29c <___vfiprintf_internal_r+0x76c>
  80bd58:	d8800417 	ldw	r2,16(sp)
  80bd5c:	0039883a 	mov	fp,zero
  80bd60:	d8c00415 	stw	r3,16(sp)
  80bd64:	15c00017 	ldw	r23,0(r2)
  80bd68:	00800044 	movi	r2,1
  80bd6c:	003cc206 	br	80b078 <___vfiprintf_internal_r+0x548>
  80bd70:	3009883a 	mov	r4,r6
  80bd74:	39ca2704 	addi	r7,r7,10396
  80bd78:	003ead06 	br	80b830 <___vfiprintf_internal_r+0xd00>
  80bd7c:	d9801904 	addi	r6,sp,100
  80bd80:	01400044 	movi	r5,1
  80bd84:	0009883a 	mov	r4,zero
  80bd88:	9021883a 	mov	r16,r18
  80bd8c:	003c5b06 	br	80aefc <___vfiprintf_internal_r+0x3cc>
  80bd90:	07000184 	movi	fp,6
  80bd94:	003fda06 	br	80bd00 <___vfiprintf_internal_r+0x11d0>
  80bd98:	703ee51e 	bne	r14,zero,80b930 <___vfiprintf_internal_r+0xe00>
  80bd9c:	0009883a 	mov	r4,zero
  80bda0:	d9801904 	addi	r6,sp,100
  80bda4:	01400044 	movi	r5,1
  80bda8:	9021883a 	mov	r16,r18
  80bdac:	003c5306 	br	80aefc <___vfiprintf_internal_r+0x3cc>
  80bdb0:	d9800945 	stb	r6,37(sp)
  80bdb4:	003c1106 	br	80adfc <___vfiprintf_internal_r+0x2cc>
  80bdb8:	d9800a04 	addi	r6,sp,40
  80bdbc:	a80b883a 	mov	r5,r21
  80bdc0:	b009883a 	mov	r4,r22
  80bdc4:	080aa240 	call	80aa24 <__sprint_r.part.0>
  80bdc8:	003c6e06 	br	80af84 <___vfiprintf_internal_r+0x454>
  80bdcc:	db400017 	ldw	r13,0(sp)
  80bdd0:	003d3f06 	br	80b2d0 <___vfiprintf_internal_r+0x7a0>
  80bdd4:	402f883a 	mov	r23,r8
  80bdd8:	d8c00415 	stw	r3,16(sp)
  80bddc:	4039883a 	mov	fp,r8
  80bde0:	003c0c06 	br	80ae14 <___vfiprintf_internal_r+0x2e4>
  80bde4:	d9800945 	stb	r6,37(sp)
  80bde8:	003d2406 	br	80b27c <___vfiprintf_internal_r+0x74c>
  80bdec:	d9800945 	stb	r6,37(sp)
  80bdf0:	003d4206 	br	80b2fc <___vfiprintf_internal_r+0x7cc>
  80bdf4:	d9800945 	stb	r6,37(sp)
  80bdf8:	003d7a06 	br	80b3e4 <___vfiprintf_internal_r+0x8b4>
  80bdfc:	303f883a 	mov	ra,r6
  80be00:	39ca2b04 	addi	r7,r7,10412
  80be04:	003f2006 	br	80ba88 <___vfiprintf_internal_r+0xf58>
  80be08:	d9800945 	stb	r6,37(sp)
  80be0c:	003df806 	br	80b5f0 <___vfiprintf_internal_r+0xac0>
  80be10:	d9800945 	stb	r6,37(sp)
  80be14:	003e0806 	br	80b638 <___vfiprintf_internal_r+0xb08>
  80be18:	21400044 	addi	r5,r4,1
  80be1c:	39ca2b04 	addi	r7,r7,10412
  80be20:	003d0306 	br	80b230 <___vfiprintf_internal_r+0x700>
  80be24:	00bfffc4 	movi	r2,-1
  80be28:	d8800115 	stw	r2,4(sp)
  80be2c:	003c5806 	br	80af90 <___vfiprintf_internal_r+0x460>
  80be30:	01c02074 	movhi	r7,129
  80be34:	301b883a 	mov	r13,r6
  80be38:	281d883a 	mov	r14,r5
  80be3c:	39ca2704 	addi	r7,r7,10396
  80be40:	003e3e06 	br	80b73c <___vfiprintf_internal_r+0xc0c>
  80be44:	d8800417 	ldw	r2,16(sp)
  80be48:	12000017 	ldw	r8,0(r2)
  80be4c:	11000104 	addi	r4,r2,4
  80be50:	4000010e 	bge	r8,zero,80be58 <___vfiprintf_internal_r+0x1328>
  80be54:	023fffc4 	movi	r8,-1
  80be58:	a0800043 	ldbu	r2,1(r20)
  80be5c:	d9000415 	stw	r4,16(sp)
  80be60:	1829883a 	mov	r20,r3
  80be64:	10803fcc 	andi	r2,r2,255
  80be68:	1080201c 	xori	r2,r2,128
  80be6c:	10bfe004 	addi	r2,r2,-128
  80be70:	003b7006 	br	80ac34 <___vfiprintf_internal_r+0x104>

0080be74 <__vfiprintf_internal>:
  80be74:	00c02074 	movhi	r3,129
  80be78:	2005883a 	mov	r2,r4
  80be7c:	19121217 	ldw	r4,18504(r3)
  80be80:	300f883a 	mov	r7,r6
  80be84:	280d883a 	mov	r6,r5
  80be88:	100b883a 	mov	r5,r2
  80be8c:	080ab301 	jmpi	80ab30 <___vfiprintf_internal_r>

0080be90 <__sbprintf>:
  80be90:	2880030b 	ldhu	r2,12(r5)
  80be94:	2b001917 	ldw	r12,100(r5)
  80be98:	2ac0038b 	ldhu	r11,14(r5)
  80be9c:	2a800717 	ldw	r10,28(r5)
  80bea0:	2a400917 	ldw	r9,36(r5)
  80bea4:	defee204 	addi	sp,sp,-1144
  80bea8:	da001a04 	addi	r8,sp,104
  80beac:	00c10004 	movi	r3,1024
  80beb0:	dc011a15 	stw	r16,1128(sp)
  80beb4:	10bfff4c 	andi	r2,r2,65533
  80beb8:	2821883a 	mov	r16,r5
  80bebc:	d80b883a 	mov	r5,sp
  80bec0:	dc811c15 	stw	r18,1136(sp)
  80bec4:	dc411b15 	stw	r17,1132(sp)
  80bec8:	dfc11d15 	stw	ra,1140(sp)
  80becc:	2025883a 	mov	r18,r4
  80bed0:	d880030d 	sth	r2,12(sp)
  80bed4:	db001915 	stw	r12,100(sp)
  80bed8:	dac0038d 	sth	r11,14(sp)
  80bedc:	da800715 	stw	r10,28(sp)
  80bee0:	da400915 	stw	r9,36(sp)
  80bee4:	da000015 	stw	r8,0(sp)
  80bee8:	da000415 	stw	r8,16(sp)
  80beec:	d8c00215 	stw	r3,8(sp)
  80bef0:	d8c00515 	stw	r3,20(sp)
  80bef4:	d8000615 	stw	zero,24(sp)
  80bef8:	080ab300 	call	80ab30 <___vfiprintf_internal_r>
  80befc:	1023883a 	mov	r17,r2
  80bf00:	10000d0e 	bge	r2,zero,80bf38 <__sbprintf+0xa8>
  80bf04:	d880030b 	ldhu	r2,12(sp)
  80bf08:	1080100c 	andi	r2,r2,64
  80bf0c:	10000326 	beq	r2,zero,80bf1c <__sbprintf+0x8c>
  80bf10:	8080030b 	ldhu	r2,12(r16)
  80bf14:	10801014 	ori	r2,r2,64
  80bf18:	8080030d 	sth	r2,12(r16)
  80bf1c:	8805883a 	mov	r2,r17
  80bf20:	dfc11d17 	ldw	ra,1140(sp)
  80bf24:	dc811c17 	ldw	r18,1136(sp)
  80bf28:	dc411b17 	ldw	r17,1132(sp)
  80bf2c:	dc011a17 	ldw	r16,1128(sp)
  80bf30:	dec11e04 	addi	sp,sp,1144
  80bf34:	f800283a 	ret
  80bf38:	d80b883a 	mov	r5,sp
  80bf3c:	9009883a 	mov	r4,r18
  80bf40:	08072a80 	call	8072a8 <_fflush_r>
  80bf44:	103fef26 	beq	r2,zero,80bf04 <__sbprintf+0x74>
  80bf48:	047fffc4 	movi	r17,-1
  80bf4c:	003fed06 	br	80bf04 <__sbprintf+0x74>

0080bf50 <__swbuf_r>:
  80bf50:	defffb04 	addi	sp,sp,-20
  80bf54:	dcc00315 	stw	r19,12(sp)
  80bf58:	dc400115 	stw	r17,4(sp)
  80bf5c:	dc000015 	stw	r16,0(sp)
  80bf60:	dfc00415 	stw	ra,16(sp)
  80bf64:	dc800215 	stw	r18,8(sp)
  80bf68:	2027883a 	mov	r19,r4
  80bf6c:	2823883a 	mov	r17,r5
  80bf70:	3021883a 	mov	r16,r6
  80bf74:	20000226 	beq	r4,zero,80bf80 <__swbuf_r+0x30>
  80bf78:	20800e17 	ldw	r2,56(r4)
  80bf7c:	10003e26 	beq	r2,zero,80c078 <__swbuf_r+0x128>
  80bf80:	80800617 	ldw	r2,24(r16)
  80bf84:	80c0030b 	ldhu	r3,12(r16)
  80bf88:	80800215 	stw	r2,8(r16)
  80bf8c:	1880020c 	andi	r2,r3,8
  80bf90:	10001f26 	beq	r2,zero,80c010 <__swbuf_r+0xc0>
  80bf94:	80800417 	ldw	r2,16(r16)
  80bf98:	10001d26 	beq	r2,zero,80c010 <__swbuf_r+0xc0>
  80bf9c:	1948000c 	andi	r5,r3,8192
  80bfa0:	8c803fcc 	andi	r18,r17,255
  80bfa4:	28002326 	beq	r5,zero,80c034 <__swbuf_r+0xe4>
  80bfa8:	80c00017 	ldw	r3,0(r16)
  80bfac:	81000517 	ldw	r4,20(r16)
  80bfb0:	1885c83a 	sub	r2,r3,r2
  80bfb4:	1100290e 	bge	r2,r4,80c05c <__swbuf_r+0x10c>
  80bfb8:	10800044 	addi	r2,r2,1
  80bfbc:	81400217 	ldw	r5,8(r16)
  80bfc0:	19000044 	addi	r4,r3,1
  80bfc4:	81000015 	stw	r4,0(r16)
  80bfc8:	297fffc4 	addi	r5,r5,-1
  80bfcc:	81400215 	stw	r5,8(r16)
  80bfd0:	1c400005 	stb	r17,0(r3)
  80bfd4:	80c00517 	ldw	r3,20(r16)
  80bfd8:	18802926 	beq	r3,r2,80c080 <__swbuf_r+0x130>
  80bfdc:	8080030b 	ldhu	r2,12(r16)
  80bfe0:	1080004c 	andi	r2,r2,1
  80bfe4:	10000226 	beq	r2,zero,80bff0 <__swbuf_r+0xa0>
  80bfe8:	90800298 	cmpnei	r2,r18,10
  80bfec:	10002426 	beq	r2,zero,80c080 <__swbuf_r+0x130>
  80bff0:	9005883a 	mov	r2,r18
  80bff4:	dfc00417 	ldw	ra,16(sp)
  80bff8:	dcc00317 	ldw	r19,12(sp)
  80bffc:	dc800217 	ldw	r18,8(sp)
  80c000:	dc400117 	ldw	r17,4(sp)
  80c004:	dc000017 	ldw	r16,0(sp)
  80c008:	dec00504 	addi	sp,sp,20
  80c00c:	f800283a 	ret
  80c010:	800b883a 	mov	r5,r16
  80c014:	9809883a 	mov	r4,r19
  80c018:	08055b40 	call	8055b4 <__swsetup_r>
  80c01c:	10001c1e 	bne	r2,zero,80c090 <__swbuf_r+0x140>
  80c020:	80c0030b 	ldhu	r3,12(r16)
  80c024:	80800417 	ldw	r2,16(r16)
  80c028:	8c803fcc 	andi	r18,r17,255
  80c02c:	1948000c 	andi	r5,r3,8192
  80c030:	283fdd1e 	bne	r5,zero,80bfa8 <__swbuf_r+0x58>
  80c034:	81001917 	ldw	r4,100(r16)
  80c038:	18c80014 	ori	r3,r3,8192
  80c03c:	0177ffc4 	movi	r5,-8193
  80c040:	2148703a 	and	r4,r4,r5
  80c044:	80c0030d 	sth	r3,12(r16)
  80c048:	80c00017 	ldw	r3,0(r16)
  80c04c:	81001915 	stw	r4,100(r16)
  80c050:	81000517 	ldw	r4,20(r16)
  80c054:	1885c83a 	sub	r2,r3,r2
  80c058:	113fd716 	blt	r2,r4,80bfb8 <__swbuf_r+0x68>
  80c05c:	800b883a 	mov	r5,r16
  80c060:	9809883a 	mov	r4,r19
  80c064:	08072a80 	call	8072a8 <_fflush_r>
  80c068:	1000091e 	bne	r2,zero,80c090 <__swbuf_r+0x140>
  80c06c:	80c00017 	ldw	r3,0(r16)
  80c070:	00800044 	movi	r2,1
  80c074:	003fd106 	br	80bfbc <__swbuf_r+0x6c>
  80c078:	08076f00 	call	8076f0 <__sinit>
  80c07c:	003fc006 	br	80bf80 <__swbuf_r+0x30>
  80c080:	800b883a 	mov	r5,r16
  80c084:	9809883a 	mov	r4,r19
  80c088:	08072a80 	call	8072a8 <_fflush_r>
  80c08c:	103fd826 	beq	r2,zero,80bff0 <__swbuf_r+0xa0>
  80c090:	04bfffc4 	movi	r18,-1
  80c094:	003fd606 	br	80bff0 <__swbuf_r+0xa0>

0080c098 <__swbuf>:
  80c098:	00c02074 	movhi	r3,129
  80c09c:	2005883a 	mov	r2,r4
  80c0a0:	19121217 	ldw	r4,18504(r3)
  80c0a4:	280d883a 	mov	r6,r5
  80c0a8:	100b883a 	mov	r5,r2
  80c0ac:	080bf501 	jmpi	80bf50 <__swbuf_r>

0080c0b0 <_write_r>:
  80c0b0:	2807883a 	mov	r3,r5
  80c0b4:	defffe04 	addi	sp,sp,-8
  80c0b8:	dc000015 	stw	r16,0(sp)
  80c0bc:	300b883a 	mov	r5,r6
  80c0c0:	00802074 	movhi	r2,129
  80c0c4:	380d883a 	mov	r6,r7
  80c0c8:	2021883a 	mov	r16,r4
  80c0cc:	1809883a 	mov	r4,r3
  80c0d0:	dfc00115 	stw	ra,4(sp)
  80c0d4:	10195715 	stw	zero,25948(r2)
  80c0d8:	080f5600 	call	80f560 <write>
  80c0dc:	10ffffd8 	cmpnei	r3,r2,-1
  80c0e0:	18000426 	beq	r3,zero,80c0f4 <_write_r+0x44>
  80c0e4:	dfc00117 	ldw	ra,4(sp)
  80c0e8:	dc000017 	ldw	r16,0(sp)
  80c0ec:	dec00204 	addi	sp,sp,8
  80c0f0:	f800283a 	ret
  80c0f4:	00c02074 	movhi	r3,129
  80c0f8:	18d95717 	ldw	r3,25948(r3)
  80c0fc:	183ff926 	beq	r3,zero,80c0e4 <_write_r+0x34>
  80c100:	80c00015 	stw	r3,0(r16)
  80c104:	dfc00117 	ldw	ra,4(sp)
  80c108:	dc000017 	ldw	r16,0(sp)
  80c10c:	dec00204 	addi	sp,sp,8
  80c110:	f800283a 	ret

0080c114 <_close_r>:
  80c114:	defffe04 	addi	sp,sp,-8
  80c118:	dc000015 	stw	r16,0(sp)
  80c11c:	00802074 	movhi	r2,129
  80c120:	2021883a 	mov	r16,r4
  80c124:	2809883a 	mov	r4,r5
  80c128:	dfc00115 	stw	ra,4(sp)
  80c12c:	10195715 	stw	zero,25948(r2)
  80c130:	080e8300 	call	80e830 <close>
  80c134:	10ffffd8 	cmpnei	r3,r2,-1
  80c138:	18000426 	beq	r3,zero,80c14c <_close_r+0x38>
  80c13c:	dfc00117 	ldw	ra,4(sp)
  80c140:	dc000017 	ldw	r16,0(sp)
  80c144:	dec00204 	addi	sp,sp,8
  80c148:	f800283a 	ret
  80c14c:	00c02074 	movhi	r3,129
  80c150:	18d95717 	ldw	r3,25948(r3)
  80c154:	183ff926 	beq	r3,zero,80c13c <_close_r+0x28>
  80c158:	80c00015 	stw	r3,0(r16)
  80c15c:	dfc00117 	ldw	ra,4(sp)
  80c160:	dc000017 	ldw	r16,0(sp)
  80c164:	dec00204 	addi	sp,sp,8
  80c168:	f800283a 	ret

0080c16c <__assert_func>:
  80c16c:	00802074 	movhi	r2,129
  80c170:	12121217 	ldw	r8,18504(r2)
  80c174:	defffc04 	addi	sp,sp,-16
  80c178:	3807883a 	mov	r3,r7
  80c17c:	3005883a 	mov	r2,r6
  80c180:	dfc00315 	stw	ra,12(sp)
  80c184:	42400317 	ldw	r9,12(r8)
  80c188:	200f883a 	mov	r7,r4
  80c18c:	2811883a 	mov	r8,r5
  80c190:	180d883a 	mov	r6,r3
  80c194:	10000a26 	beq	r2,zero,80c1c0 <__assert_func+0x54>
  80c198:	00c02074 	movhi	r3,129
  80c19c:	18ca2f04 	addi	r3,r3,10428
  80c1a0:	01402074 	movhi	r5,129
  80c1a4:	294a3304 	addi	r5,r5,10444
  80c1a8:	4809883a 	mov	r4,r9
  80c1ac:	d8c00115 	stw	r3,4(sp)
  80c1b0:	da000015 	stw	r8,0(sp)
  80c1b4:	d8800215 	stw	r2,8(sp)
  80c1b8:	080c4680 	call	80c468 <fiprintf>
  80c1bc:	080cb500 	call	80cb50 <abort>
  80c1c0:	00c02074 	movhi	r3,129
  80c1c4:	18ca3204 	addi	r3,r3,10440
  80c1c8:	1805883a 	mov	r2,r3
  80c1cc:	003ff406 	br	80c1a0 <__assert_func+0x34>

0080c1d0 <__assert>:
  80c1d0:	deffff04 	addi	sp,sp,-4
  80c1d4:	300f883a 	mov	r7,r6
  80c1d8:	000d883a 	mov	r6,zero
  80c1dc:	dfc00015 	stw	ra,0(sp)
  80c1e0:	080c16c0 	call	80c16c <__assert_func>

0080c1e4 <_calloc_r>:
  80c1e4:	defffe04 	addi	sp,sp,-8
  80c1e8:	dc000015 	stw	r16,0(sp)
  80c1ec:	2021883a 	mov	r16,r4
  80c1f0:	2809883a 	mov	r4,r5
  80c1f4:	300b883a 	mov	r5,r6
  80c1f8:	dfc00115 	stw	ra,4(sp)
  80c1fc:	08031b00 	call	8031b0 <__mulsi3>
  80c200:	8009883a 	mov	r4,r16
  80c204:	100b883a 	mov	r5,r2
  80c208:	08083c00 	call	8083c0 <_malloc_r>
  80c20c:	1009883a 	mov	r4,r2
  80c210:	10000c26 	beq	r2,zero,80c244 <_calloc_r+0x60>
  80c214:	11bfff17 	ldw	r6,-4(r2)
  80c218:	00bfff04 	movi	r2,-4
  80c21c:	308c703a 	and	r6,r6,r2
  80c220:	31bfff04 	addi	r6,r6,-4
  80c224:	30800968 	cmpgeui	r2,r6,37
  80c228:	1000151e 	bne	r2,zero,80c280 <_calloc_r+0x9c>
  80c22c:	30800530 	cmpltui	r2,r6,20
  80c230:	10000926 	beq	r2,zero,80c258 <_calloc_r+0x74>
  80c234:	2005883a 	mov	r2,r4
  80c238:	10000015 	stw	zero,0(r2)
  80c23c:	10000115 	stw	zero,4(r2)
  80c240:	10000215 	stw	zero,8(r2)
  80c244:	2005883a 	mov	r2,r4
  80c248:	dfc00117 	ldw	ra,4(sp)
  80c24c:	dc000017 	ldw	r16,0(sp)
  80c250:	dec00204 	addi	sp,sp,8
  80c254:	f800283a 	ret
  80c258:	20000015 	stw	zero,0(r4)
  80c25c:	20000115 	stw	zero,4(r4)
  80c260:	30800728 	cmpgeui	r2,r6,28
  80c264:	10000a26 	beq	r2,zero,80c290 <_calloc_r+0xac>
  80c268:	20000215 	stw	zero,8(r4)
  80c26c:	20000315 	stw	zero,12(r4)
  80c270:	31800920 	cmpeqi	r6,r6,36
  80c274:	3000081e 	bne	r6,zero,80c298 <_calloc_r+0xb4>
  80c278:	20800404 	addi	r2,r4,16
  80c27c:	003fee06 	br	80c238 <_calloc_r+0x54>
  80c280:	000b883a 	mov	r5,zero
  80c284:	0808e9c0 	call	808e9c <memset>
  80c288:	1009883a 	mov	r4,r2
  80c28c:	003fed06 	br	80c244 <_calloc_r+0x60>
  80c290:	20800204 	addi	r2,r4,8
  80c294:	003fe806 	br	80c238 <_calloc_r+0x54>
  80c298:	20000415 	stw	zero,16(r4)
  80c29c:	20800604 	addi	r2,r4,24
  80c2a0:	20000515 	stw	zero,20(r4)
  80c2a4:	003fe406 	br	80c238 <_calloc_r+0x54>

0080c2a8 <_fclose_r.part.0>:
  80c2a8:	defffc04 	addi	sp,sp,-16
  80c2ac:	dc800215 	stw	r18,8(sp)
  80c2b0:	dc400115 	stw	r17,4(sp)
  80c2b4:	dc000015 	stw	r16,0(sp)
  80c2b8:	dfc00315 	stw	ra,12(sp)
  80c2bc:	2821883a 	mov	r16,r5
  80c2c0:	2023883a 	mov	r17,r4
  80c2c4:	08070800 	call	807080 <__sflush_r>
  80c2c8:	80c00b17 	ldw	r3,44(r16)
  80c2cc:	1025883a 	mov	r18,r2
  80c2d0:	18000426 	beq	r3,zero,80c2e4 <_fclose_r.part.0+0x3c>
  80c2d4:	81400717 	ldw	r5,28(r16)
  80c2d8:	8809883a 	mov	r4,r17
  80c2dc:	183ee83a 	callr	r3
  80c2e0:	10001916 	blt	r2,zero,80c348 <_fclose_r.part.0+0xa0>
  80c2e4:	8080030b 	ldhu	r2,12(r16)
  80c2e8:	1080200c 	andi	r2,r2,128
  80c2ec:	10001a1e 	bne	r2,zero,80c358 <_fclose_r.part.0+0xb0>
  80c2f0:	81400c17 	ldw	r5,48(r16)
  80c2f4:	28000526 	beq	r5,zero,80c30c <_fclose_r.part.0+0x64>
  80c2f8:	80801004 	addi	r2,r16,64
  80c2fc:	28800226 	beq	r5,r2,80c308 <_fclose_r.part.0+0x60>
  80c300:	8809883a 	mov	r4,r17
  80c304:	08078540 	call	807854 <_free_r>
  80c308:	80000c15 	stw	zero,48(r16)
  80c30c:	81401117 	ldw	r5,68(r16)
  80c310:	28000326 	beq	r5,zero,80c320 <_fclose_r.part.0+0x78>
  80c314:	8809883a 	mov	r4,r17
  80c318:	08078540 	call	807854 <_free_r>
  80c31c:	80001115 	stw	zero,68(r16)
  80c320:	08077000 	call	807700 <__sfp_lock_acquire>
  80c324:	8000030d 	sth	zero,12(r16)
  80c328:	08077040 	call	807704 <__sfp_lock_release>
  80c32c:	9005883a 	mov	r2,r18
  80c330:	dfc00317 	ldw	ra,12(sp)
  80c334:	dc800217 	ldw	r18,8(sp)
  80c338:	dc400117 	ldw	r17,4(sp)
  80c33c:	dc000017 	ldw	r16,0(sp)
  80c340:	dec00404 	addi	sp,sp,16
  80c344:	f800283a 	ret
  80c348:	8080030b 	ldhu	r2,12(r16)
  80c34c:	04bfffc4 	movi	r18,-1
  80c350:	1080200c 	andi	r2,r2,128
  80c354:	103fe626 	beq	r2,zero,80c2f0 <_fclose_r.part.0+0x48>
  80c358:	81400417 	ldw	r5,16(r16)
  80c35c:	8809883a 	mov	r4,r17
  80c360:	08078540 	call	807854 <_free_r>
  80c364:	003fe206 	br	80c2f0 <_fclose_r.part.0+0x48>

0080c368 <_fclose_r>:
  80c368:	28001926 	beq	r5,zero,80c3d0 <_fclose_r+0x68>
  80c36c:	defffd04 	addi	sp,sp,-12
  80c370:	dc000115 	stw	r16,4(sp)
  80c374:	dfc00215 	stw	ra,8(sp)
  80c378:	2021883a 	mov	r16,r4
  80c37c:	20000226 	beq	r4,zero,80c388 <_fclose_r+0x20>
  80c380:	20800e17 	ldw	r2,56(r4)
  80c384:	10000c26 	beq	r2,zero,80c3b8 <_fclose_r+0x50>
  80c388:	2880030f 	ldh	r2,12(r5)
  80c38c:	1000051e 	bne	r2,zero,80c3a4 <_fclose_r+0x3c>
  80c390:	0005883a 	mov	r2,zero
  80c394:	dfc00217 	ldw	ra,8(sp)
  80c398:	dc000117 	ldw	r16,4(sp)
  80c39c:	dec00304 	addi	sp,sp,12
  80c3a0:	f800283a 	ret
  80c3a4:	8009883a 	mov	r4,r16
  80c3a8:	dfc00217 	ldw	ra,8(sp)
  80c3ac:	dc000117 	ldw	r16,4(sp)
  80c3b0:	dec00304 	addi	sp,sp,12
  80c3b4:	080c2a81 	jmpi	80c2a8 <_fclose_r.part.0>
  80c3b8:	d9400015 	stw	r5,0(sp)
  80c3bc:	08076f00 	call	8076f0 <__sinit>
  80c3c0:	d9400017 	ldw	r5,0(sp)
  80c3c4:	2880030f 	ldh	r2,12(r5)
  80c3c8:	103ff126 	beq	r2,zero,80c390 <_fclose_r+0x28>
  80c3cc:	003ff506 	br	80c3a4 <_fclose_r+0x3c>
  80c3d0:	0005883a 	mov	r2,zero
  80c3d4:	f800283a 	ret

0080c3d8 <fclose>:
  80c3d8:	20000826 	beq	r4,zero,80c3fc <fclose+0x24>
  80c3dc:	00802074 	movhi	r2,129
  80c3e0:	200b883a 	mov	r5,r4
  80c3e4:	11121217 	ldw	r4,18504(r2)
  80c3e8:	20000226 	beq	r4,zero,80c3f4 <fclose+0x1c>
  80c3ec:	20800e17 	ldw	r2,56(r4)
  80c3f0:	10000526 	beq	r2,zero,80c408 <fclose+0x30>
  80c3f4:	2880030f 	ldh	r2,12(r5)
  80c3f8:	1000021e 	bne	r2,zero,80c404 <fclose+0x2c>
  80c3fc:	0005883a 	mov	r2,zero
  80c400:	f800283a 	ret
  80c404:	080c2a81 	jmpi	80c2a8 <_fclose_r.part.0>
  80c408:	defffd04 	addi	sp,sp,-12
  80c40c:	d9400115 	stw	r5,4(sp)
  80c410:	d9000015 	stw	r4,0(sp)
  80c414:	dfc00215 	stw	ra,8(sp)
  80c418:	08076f00 	call	8076f0 <__sinit>
  80c41c:	d9400117 	ldw	r5,4(sp)
  80c420:	d9000017 	ldw	r4,0(sp)
  80c424:	2880030f 	ldh	r2,12(r5)
  80c428:	10000326 	beq	r2,zero,80c438 <fclose+0x60>
  80c42c:	dfc00217 	ldw	ra,8(sp)
  80c430:	dec00304 	addi	sp,sp,12
  80c434:	080c2a81 	jmpi	80c2a8 <_fclose_r.part.0>
  80c438:	0005883a 	mov	r2,zero
  80c43c:	dfc00217 	ldw	ra,8(sp)
  80c440:	dec00304 	addi	sp,sp,12
  80c444:	f800283a 	ret

0080c448 <_fiprintf_r>:
  80c448:	defffe04 	addi	sp,sp,-8
  80c44c:	dfc00015 	stw	ra,0(sp)
  80c450:	d9c00115 	stw	r7,4(sp)
  80c454:	d9c00104 	addi	r7,sp,4
  80c458:	080ca1c0 	call	80ca1c <_vfiprintf_r>
  80c45c:	dfc00017 	ldw	ra,0(sp)
  80c460:	dec00204 	addi	sp,sp,8
  80c464:	f800283a 	ret

0080c468 <fiprintf>:
  80c468:	defffd04 	addi	sp,sp,-12
  80c46c:	2005883a 	mov	r2,r4
  80c470:	dfc00015 	stw	ra,0(sp)
  80c474:	d9800115 	stw	r6,4(sp)
  80c478:	d9c00215 	stw	r7,8(sp)
  80c47c:	00c02074 	movhi	r3,129
  80c480:	19121217 	ldw	r4,18504(r3)
  80c484:	280d883a 	mov	r6,r5
  80c488:	d9c00104 	addi	r7,sp,4
  80c48c:	100b883a 	mov	r5,r2
  80c490:	080ca1c0 	call	80ca1c <_vfiprintf_r>
  80c494:	dfc00017 	ldw	ra,0(sp)
  80c498:	dec00304 	addi	sp,sp,12
  80c49c:	f800283a 	ret

0080c4a0 <__fputwc>:
  80c4a0:	defff904 	addi	sp,sp,-28
  80c4a4:	dcc00415 	stw	r19,16(sp)
  80c4a8:	dc800315 	stw	r18,12(sp)
  80c4ac:	dc000115 	stw	r16,4(sp)
  80c4b0:	dfc00615 	stw	ra,24(sp)
  80c4b4:	dd000515 	stw	r20,20(sp)
  80c4b8:	dc400215 	stw	r17,8(sp)
  80c4bc:	2025883a 	mov	r18,r4
  80c4c0:	2827883a 	mov	r19,r5
  80c4c4:	3021883a 	mov	r16,r6
  80c4c8:	080c7cc0 	call	80c7cc <__locale_mb_cur_max>
  80c4cc:	10800058 	cmpnei	r2,r2,1
  80c4d0:	1000071e 	bne	r2,zero,80c4f0 <__fputwc+0x50>
  80c4d4:	98bfffc4 	addi	r2,r19,-1
  80c4d8:	10803fe8 	cmpgeui	r2,r2,255
  80c4dc:	1000041e 	bne	r2,zero,80c4f0 <__fputwc+0x50>
  80c4e0:	980b883a 	mov	r5,r19
  80c4e4:	dcc000c5 	stb	r19,3(sp)
  80c4e8:	05000044 	movi	r20,1
  80c4ec:	00000a06 	br	80c518 <__fputwc+0x78>
  80c4f0:	81c01704 	addi	r7,r16,92
  80c4f4:	980d883a 	mov	r6,r19
  80c4f8:	d94000c4 	addi	r5,sp,3
  80c4fc:	9009883a 	mov	r4,r18
  80c500:	080ca200 	call	80ca20 <_wcrtomb_r>
  80c504:	1029883a 	mov	r20,r2
  80c508:	10bfffd8 	cmpnei	r2,r2,-1
  80c50c:	10003926 	beq	r2,zero,80c5f4 <__fputwc+0x154>
  80c510:	a0001f26 	beq	r20,zero,80c590 <__fputwc+0xf0>
  80c514:	d94000c3 	ldbu	r5,3(sp)
  80c518:	0023883a 	mov	r17,zero
  80c51c:	00000a06 	br	80c548 <__fputwc+0xa8>
  80c520:	80800017 	ldw	r2,0(r16)
  80c524:	11400005 	stb	r5,0(r2)
  80c528:	80c00017 	ldw	r3,0(r16)
  80c52c:	18c00044 	addi	r3,r3,1
  80c530:	80c00015 	stw	r3,0(r16)
  80c534:	8c400044 	addi	r17,r17,1
  80c538:	d88000c4 	addi	r2,sp,3
  80c53c:	1447883a 	add	r3,r2,r17
  80c540:	8d00132e 	bgeu	r17,r20,80c590 <__fputwc+0xf0>
  80c544:	19400003 	ldbu	r5,0(r3)
  80c548:	80c00217 	ldw	r3,8(r16)
  80c54c:	18ffffc4 	addi	r3,r3,-1
  80c550:	80c00215 	stw	r3,8(r16)
  80c554:	183ff20e 	bge	r3,zero,80c520 <__fputwc+0x80>
  80c558:	80800617 	ldw	r2,24(r16)
  80c55c:	18801616 	blt	r3,r2,80c5b8 <__fputwc+0x118>
  80c560:	80800017 	ldw	r2,0(r16)
  80c564:	11400005 	stb	r5,0(r2)
  80c568:	80800017 	ldw	r2,0(r16)
  80c56c:	10c00003 	ldbu	r3,0(r2)
  80c570:	10800044 	addi	r2,r2,1
  80c574:	18c002a0 	cmpeqi	r3,r3,10
  80c578:	1800171e 	bne	r3,zero,80c5d8 <__fputwc+0x138>
  80c57c:	80800015 	stw	r2,0(r16)
  80c580:	8c400044 	addi	r17,r17,1
  80c584:	d88000c4 	addi	r2,sp,3
  80c588:	1447883a 	add	r3,r2,r17
  80c58c:	8d3fed36 	bltu	r17,r20,80c544 <__fputwc+0xa4>
  80c590:	9829883a 	mov	r20,r19
  80c594:	a005883a 	mov	r2,r20
  80c598:	dfc00617 	ldw	ra,24(sp)
  80c59c:	dd000517 	ldw	r20,20(sp)
  80c5a0:	dcc00417 	ldw	r19,16(sp)
  80c5a4:	dc800317 	ldw	r18,12(sp)
  80c5a8:	dc400217 	ldw	r17,8(sp)
  80c5ac:	dc000117 	ldw	r16,4(sp)
  80c5b0:	dec00704 	addi	sp,sp,28
  80c5b4:	f800283a 	ret
  80c5b8:	29403fcc 	andi	r5,r5,255
  80c5bc:	800d883a 	mov	r6,r16
  80c5c0:	9009883a 	mov	r4,r18
  80c5c4:	080bf500 	call	80bf50 <__swbuf_r>
  80c5c8:	10bfffe0 	cmpeqi	r2,r2,-1
  80c5cc:	103fd926 	beq	r2,zero,80c534 <__fputwc+0x94>
  80c5d0:	053fffc4 	movi	r20,-1
  80c5d4:	003fef06 	br	80c594 <__fputwc+0xf4>
  80c5d8:	800d883a 	mov	r6,r16
  80c5dc:	01400284 	movi	r5,10
  80c5e0:	9009883a 	mov	r4,r18
  80c5e4:	080bf500 	call	80bf50 <__swbuf_r>
  80c5e8:	10bfffe0 	cmpeqi	r2,r2,-1
  80c5ec:	103fd126 	beq	r2,zero,80c534 <__fputwc+0x94>
  80c5f0:	003ff706 	br	80c5d0 <__fputwc+0x130>
  80c5f4:	8080030b 	ldhu	r2,12(r16)
  80c5f8:	10801014 	ori	r2,r2,64
  80c5fc:	8080030d 	sth	r2,12(r16)
  80c600:	003fe406 	br	80c594 <__fputwc+0xf4>

0080c604 <_fputwc_r>:
  80c604:	3080030b 	ldhu	r2,12(r6)
  80c608:	10c8000c 	andi	r3,r2,8192
  80c60c:	1800051e 	bne	r3,zero,80c624 <_fputwc_r+0x20>
  80c610:	30c01917 	ldw	r3,100(r6)
  80c614:	10880014 	ori	r2,r2,8192
  80c618:	3080030d 	sth	r2,12(r6)
  80c61c:	18880014 	ori	r2,r3,8192
  80c620:	30801915 	stw	r2,100(r6)
  80c624:	080c4a01 	jmpi	80c4a0 <__fputwc>

0080c628 <fputwc>:
  80c628:	defffc04 	addi	sp,sp,-16
  80c62c:	00802074 	movhi	r2,129
  80c630:	dc000215 	stw	r16,8(sp)
  80c634:	14121217 	ldw	r16,18504(r2)
  80c638:	dfc00315 	stw	ra,12(sp)
  80c63c:	280d883a 	mov	r6,r5
  80c640:	200b883a 	mov	r5,r4
  80c644:	80000226 	beq	r16,zero,80c650 <fputwc+0x28>
  80c648:	80800e17 	ldw	r2,56(r16)
  80c64c:	10000d26 	beq	r2,zero,80c684 <fputwc+0x5c>
  80c650:	3080030b 	ldhu	r2,12(r6)
  80c654:	10c8000c 	andi	r3,r2,8192
  80c658:	1800051e 	bne	r3,zero,80c670 <fputwc+0x48>
  80c65c:	30c01917 	ldw	r3,100(r6)
  80c660:	10880014 	ori	r2,r2,8192
  80c664:	3080030d 	sth	r2,12(r6)
  80c668:	18880014 	ori	r2,r3,8192
  80c66c:	30801915 	stw	r2,100(r6)
  80c670:	8009883a 	mov	r4,r16
  80c674:	dfc00317 	ldw	ra,12(sp)
  80c678:	dc000217 	ldw	r16,8(sp)
  80c67c:	dec00404 	addi	sp,sp,16
  80c680:	080c4a01 	jmpi	80c4a0 <__fputwc>
  80c684:	d9000015 	stw	r4,0(sp)
  80c688:	8009883a 	mov	r4,r16
  80c68c:	d9800115 	stw	r6,4(sp)
  80c690:	08076f00 	call	8076f0 <__sinit>
  80c694:	d9800117 	ldw	r6,4(sp)
  80c698:	d9400017 	ldw	r5,0(sp)
  80c69c:	003fec06 	br	80c650 <fputwc+0x28>

0080c6a0 <_fstat_r>:
  80c6a0:	2807883a 	mov	r3,r5
  80c6a4:	defffe04 	addi	sp,sp,-8
  80c6a8:	dc000015 	stw	r16,0(sp)
  80c6ac:	00802074 	movhi	r2,129
  80c6b0:	300b883a 	mov	r5,r6
  80c6b4:	2021883a 	mov	r16,r4
  80c6b8:	1809883a 	mov	r4,r3
  80c6bc:	dfc00115 	stw	ra,4(sp)
  80c6c0:	10195715 	stw	zero,25948(r2)
  80c6c4:	080e9ac0 	call	80e9ac <fstat>
  80c6c8:	10ffffd8 	cmpnei	r3,r2,-1
  80c6cc:	18000426 	beq	r3,zero,80c6e0 <_fstat_r+0x40>
  80c6d0:	dfc00117 	ldw	ra,4(sp)
  80c6d4:	dc000017 	ldw	r16,0(sp)
  80c6d8:	dec00204 	addi	sp,sp,8
  80c6dc:	f800283a 	ret
  80c6e0:	00c02074 	movhi	r3,129
  80c6e4:	18d95717 	ldw	r3,25948(r3)
  80c6e8:	183ff926 	beq	r3,zero,80c6d0 <_fstat_r+0x30>
  80c6ec:	80c00015 	stw	r3,0(r16)
  80c6f0:	dfc00117 	ldw	ra,4(sp)
  80c6f4:	dc000017 	ldw	r16,0(sp)
  80c6f8:	dec00204 	addi	sp,sp,8
  80c6fc:	f800283a 	ret

0080c700 <_isatty_r>:
  80c700:	defffe04 	addi	sp,sp,-8
  80c704:	dc000015 	stw	r16,0(sp)
  80c708:	00802074 	movhi	r2,129
  80c70c:	2021883a 	mov	r16,r4
  80c710:	2809883a 	mov	r4,r5
  80c714:	dfc00115 	stw	ra,4(sp)
  80c718:	10195715 	stw	zero,25948(r2)
  80c71c:	080ed5c0 	call	80ed5c <isatty>
  80c720:	10ffffd8 	cmpnei	r3,r2,-1
  80c724:	18000426 	beq	r3,zero,80c738 <_isatty_r+0x38>
  80c728:	dfc00117 	ldw	ra,4(sp)
  80c72c:	dc000017 	ldw	r16,0(sp)
  80c730:	dec00204 	addi	sp,sp,8
  80c734:	f800283a 	ret
  80c738:	00c02074 	movhi	r3,129
  80c73c:	18d95717 	ldw	r3,25948(r3)
  80c740:	183ff926 	beq	r3,zero,80c728 <_isatty_r+0x28>
  80c744:	80c00015 	stw	r3,0(r16)
  80c748:	dfc00117 	ldw	ra,4(sp)
  80c74c:	dc000017 	ldw	r16,0(sp)
  80c750:	dec00204 	addi	sp,sp,8
  80c754:	f800283a 	ret

0080c758 <_setlocale_r>:
  80c758:	30001626 	beq	r6,zero,80c7b4 <_setlocale_r+0x5c>
  80c75c:	01402074 	movhi	r5,129
  80c760:	defffe04 	addi	sp,sp,-8
  80c764:	294a4004 	addi	r5,r5,10496
  80c768:	3009883a 	mov	r4,r6
  80c76c:	dc000015 	stw	r16,0(sp)
  80c770:	dfc00115 	stw	ra,4(sp)
  80c774:	3021883a 	mov	r16,r6
  80c778:	080c9640 	call	80c964 <strcmp>
  80c77c:	1000061e 	bne	r2,zero,80c798 <_setlocale_r+0x40>
  80c780:	00802074 	movhi	r2,129
  80c784:	108a3f04 	addi	r2,r2,10492
  80c788:	dfc00117 	ldw	ra,4(sp)
  80c78c:	dc000017 	ldw	r16,0(sp)
  80c790:	dec00204 	addi	sp,sp,8
  80c794:	f800283a 	ret
  80c798:	80800003 	ldbu	r2,0(r16)
  80c79c:	10bfef44 	addi	r2,r2,-67
  80c7a0:	10000726 	beq	r2,zero,80c7c0 <_setlocale_r+0x68>
  80c7a4:	80800003 	ldbu	r2,0(r16)
  80c7a8:	103ff526 	beq	r2,zero,80c780 <_setlocale_r+0x28>
  80c7ac:	0005883a 	mov	r2,zero
  80c7b0:	003ff506 	br	80c788 <_setlocale_r+0x30>
  80c7b4:	00802074 	movhi	r2,129
  80c7b8:	108a3f04 	addi	r2,r2,10492
  80c7bc:	f800283a 	ret
  80c7c0:	80800043 	ldbu	r2,1(r16)
  80c7c4:	103fee26 	beq	r2,zero,80c780 <_setlocale_r+0x28>
  80c7c8:	003ff606 	br	80c7a4 <_setlocale_r+0x4c>

0080c7cc <__locale_mb_cur_max>:
  80c7cc:	00802074 	movhi	r2,129
  80c7d0:	108d4707 	ldb	r2,13596(r2)
  80c7d4:	f800283a 	ret

0080c7d8 <setlocale>:
  80c7d8:	28001626 	beq	r5,zero,80c834 <setlocale+0x5c>
  80c7dc:	defffe04 	addi	sp,sp,-8
  80c7e0:	dc000015 	stw	r16,0(sp)
  80c7e4:	2821883a 	mov	r16,r5
  80c7e8:	01402074 	movhi	r5,129
  80c7ec:	294a4004 	addi	r5,r5,10496
  80c7f0:	8009883a 	mov	r4,r16
  80c7f4:	dfc00115 	stw	ra,4(sp)
  80c7f8:	080c9640 	call	80c964 <strcmp>
  80c7fc:	1000061e 	bne	r2,zero,80c818 <setlocale+0x40>
  80c800:	00802074 	movhi	r2,129
  80c804:	108a3f04 	addi	r2,r2,10492
  80c808:	dfc00117 	ldw	ra,4(sp)
  80c80c:	dc000017 	ldw	r16,0(sp)
  80c810:	dec00204 	addi	sp,sp,8
  80c814:	f800283a 	ret
  80c818:	80800003 	ldbu	r2,0(r16)
  80c81c:	10bfef44 	addi	r2,r2,-67
  80c820:	10000726 	beq	r2,zero,80c840 <setlocale+0x68>
  80c824:	80800003 	ldbu	r2,0(r16)
  80c828:	103ff526 	beq	r2,zero,80c800 <setlocale+0x28>
  80c82c:	0005883a 	mov	r2,zero
  80c830:	003ff506 	br	80c808 <setlocale+0x30>
  80c834:	00802074 	movhi	r2,129
  80c838:	108a3f04 	addi	r2,r2,10492
  80c83c:	f800283a 	ret
  80c840:	80800043 	ldbu	r2,1(r16)
  80c844:	103fee26 	beq	r2,zero,80c800 <setlocale+0x28>
  80c848:	003ff606 	br	80c824 <setlocale+0x4c>

0080c84c <_lseek_r>:
  80c84c:	2807883a 	mov	r3,r5
  80c850:	defffe04 	addi	sp,sp,-8
  80c854:	dc000015 	stw	r16,0(sp)
  80c858:	300b883a 	mov	r5,r6
  80c85c:	00802074 	movhi	r2,129
  80c860:	380d883a 	mov	r6,r7
  80c864:	2021883a 	mov	r16,r4
  80c868:	1809883a 	mov	r4,r3
  80c86c:	dfc00115 	stw	ra,4(sp)
  80c870:	10195715 	stw	zero,25948(r2)
  80c874:	080f09c0 	call	80f09c <lseek>
  80c878:	10ffffd8 	cmpnei	r3,r2,-1
  80c87c:	18000426 	beq	r3,zero,80c890 <_lseek_r+0x44>
  80c880:	dfc00117 	ldw	ra,4(sp)
  80c884:	dc000017 	ldw	r16,0(sp)
  80c888:	dec00204 	addi	sp,sp,8
  80c88c:	f800283a 	ret
  80c890:	00c02074 	movhi	r3,129
  80c894:	18d95717 	ldw	r3,25948(r3)
  80c898:	183ff926 	beq	r3,zero,80c880 <_lseek_r+0x34>
  80c89c:	80c00015 	stw	r3,0(r16)
  80c8a0:	dfc00117 	ldw	ra,4(sp)
  80c8a4:	dc000017 	ldw	r16,0(sp)
  80c8a8:	dec00204 	addi	sp,sp,8
  80c8ac:	f800283a 	ret

0080c8b0 <_mbtowc_r>:
  80c8b0:	00802074 	movhi	r2,129
  80c8b4:	108d3617 	ldw	r2,13528(r2)
  80c8b8:	1000683a 	jmp	r2

0080c8bc <__ascii_mbtowc>:
  80c8bc:	deffff04 	addi	sp,sp,-4
  80c8c0:	28000826 	beq	r5,zero,80c8e4 <__ascii_mbtowc+0x28>
  80c8c4:	30000926 	beq	r6,zero,80c8ec <__ascii_mbtowc+0x30>
  80c8c8:	38000b26 	beq	r7,zero,80c8f8 <__ascii_mbtowc+0x3c>
  80c8cc:	30800003 	ldbu	r2,0(r6)
  80c8d0:	28800015 	stw	r2,0(r5)
  80c8d4:	30800003 	ldbu	r2,0(r6)
  80c8d8:	1004c03a 	cmpne	r2,r2,zero
  80c8dc:	dec00104 	addi	sp,sp,4
  80c8e0:	f800283a 	ret
  80c8e4:	d80b883a 	mov	r5,sp
  80c8e8:	303ff71e 	bne	r6,zero,80c8c8 <__ascii_mbtowc+0xc>
  80c8ec:	0005883a 	mov	r2,zero
  80c8f0:	dec00104 	addi	sp,sp,4
  80c8f4:	f800283a 	ret
  80c8f8:	00bfff84 	movi	r2,-2
  80c8fc:	003ff706 	br	80c8dc <__ascii_mbtowc+0x20>

0080c900 <_read_r>:
  80c900:	2807883a 	mov	r3,r5
  80c904:	defffe04 	addi	sp,sp,-8
  80c908:	dc000015 	stw	r16,0(sp)
  80c90c:	300b883a 	mov	r5,r6
  80c910:	00802074 	movhi	r2,129
  80c914:	380d883a 	mov	r6,r7
  80c918:	2021883a 	mov	r16,r4
  80c91c:	1809883a 	mov	r4,r3
  80c920:	dfc00115 	stw	ra,4(sp)
  80c924:	10195715 	stw	zero,25948(r2)
  80c928:	080f27c0 	call	80f27c <read>
  80c92c:	10ffffd8 	cmpnei	r3,r2,-1
  80c930:	18000426 	beq	r3,zero,80c944 <_read_r+0x44>
  80c934:	dfc00117 	ldw	ra,4(sp)
  80c938:	dc000017 	ldw	r16,0(sp)
  80c93c:	dec00204 	addi	sp,sp,8
  80c940:	f800283a 	ret
  80c944:	00c02074 	movhi	r3,129
  80c948:	18d95717 	ldw	r3,25948(r3)
  80c94c:	183ff926 	beq	r3,zero,80c934 <_read_r+0x34>
  80c950:	80c00015 	stw	r3,0(r16)
  80c954:	dfc00117 	ldw	ra,4(sp)
  80c958:	dc000017 	ldw	r16,0(sp)
  80c95c:	dec00204 	addi	sp,sp,8
  80c960:	f800283a 	ret

0080c964 <strcmp>:
  80c964:	2144b03a 	or	r2,r4,r5
  80c968:	108000cc 	andi	r2,r2,3
  80c96c:	1000141e 	bne	r2,zero,80c9c0 <strcmp+0x5c>
  80c970:	20800017 	ldw	r2,0(r4)
  80c974:	28c00017 	ldw	r3,0(r5)
  80c978:	10c0111e 	bne	r2,r3,80c9c0 <strcmp+0x5c>
  80c97c:	01ffbff4 	movhi	r7,65279
  80c980:	01a02074 	movhi	r6,32897
  80c984:	39ffbfc4 	addi	r7,r7,-257
  80c988:	31a02004 	addi	r6,r6,-32640
  80c98c:	00000306 	br	80c99c <strcmp+0x38>
  80c990:	20800017 	ldw	r2,0(r4)
  80c994:	28c00017 	ldw	r3,0(r5)
  80c998:	10c0091e 	bne	r2,r3,80c9c0 <strcmp+0x5c>
  80c99c:	11c7883a 	add	r3,r2,r7
  80c9a0:	0084303a 	nor	r2,zero,r2
  80c9a4:	1884703a 	and	r2,r3,r2
  80c9a8:	1184703a 	and	r2,r2,r6
  80c9ac:	21000104 	addi	r4,r4,4
  80c9b0:	29400104 	addi	r5,r5,4
  80c9b4:	103ff626 	beq	r2,zero,80c990 <strcmp+0x2c>
  80c9b8:	0005883a 	mov	r2,zero
  80c9bc:	f800283a 	ret
  80c9c0:	20c00003 	ldbu	r3,0(r4)
  80c9c4:	18803fcc 	andi	r2,r3,255
  80c9c8:	1080201c 	xori	r2,r2,128
  80c9cc:	10bfe004 	addi	r2,r2,-128
  80c9d0:	1000071e 	bne	r2,zero,80c9f0 <strcmp+0x8c>
  80c9d4:	00000a06 	br	80ca00 <strcmp+0x9c>
  80c9d8:	20c00003 	ldbu	r3,0(r4)
  80c9dc:	29400044 	addi	r5,r5,1
  80c9e0:	18803fcc 	andi	r2,r3,255
  80c9e4:	1080201c 	xori	r2,r2,128
  80c9e8:	10bfe004 	addi	r2,r2,-128
  80c9ec:	10000726 	beq	r2,zero,80ca0c <strcmp+0xa8>
  80c9f0:	29800007 	ldb	r6,0(r5)
  80c9f4:	21000044 	addi	r4,r4,1
  80c9f8:	30bff726 	beq	r6,r2,80c9d8 <strcmp+0x74>
  80c9fc:	18803fcc 	andi	r2,r3,255
  80ca00:	28c00003 	ldbu	r3,0(r5)
  80ca04:	10c5c83a 	sub	r2,r2,r3
  80ca08:	f800283a 	ret
  80ca0c:	28c00003 	ldbu	r3,0(r5)
  80ca10:	0005883a 	mov	r2,zero
  80ca14:	10c5c83a 	sub	r2,r2,r3
  80ca18:	f800283a 	ret

0080ca1c <_vfiprintf_r>:
  80ca1c:	080ab301 	jmpi	80ab30 <___vfiprintf_internal_r>

0080ca20 <_wcrtomb_r>:
  80ca20:	defffa04 	addi	sp,sp,-24
  80ca24:	dc400415 	stw	r17,16(sp)
  80ca28:	dc000315 	stw	r16,12(sp)
  80ca2c:	00802074 	movhi	r2,129
  80ca30:	dfc00515 	stw	ra,20(sp)
  80ca34:	108d3517 	ldw	r2,13524(r2)
  80ca38:	2023883a 	mov	r17,r4
  80ca3c:	3821883a 	mov	r16,r7
  80ca40:	28000826 	beq	r5,zero,80ca64 <_wcrtomb_r+0x44>
  80ca44:	103ee83a 	callr	r2
  80ca48:	10ffffd8 	cmpnei	r3,r2,-1
  80ca4c:	18000a26 	beq	r3,zero,80ca78 <_wcrtomb_r+0x58>
  80ca50:	dfc00517 	ldw	ra,20(sp)
  80ca54:	dc400417 	ldw	r17,16(sp)
  80ca58:	dc000317 	ldw	r16,12(sp)
  80ca5c:	dec00604 	addi	sp,sp,24
  80ca60:	f800283a 	ret
  80ca64:	000d883a 	mov	r6,zero
  80ca68:	d9400084 	addi	r5,sp,2
  80ca6c:	103ee83a 	callr	r2
  80ca70:	10ffffd8 	cmpnei	r3,r2,-1
  80ca74:	183ff61e 	bne	r3,zero,80ca50 <_wcrtomb_r+0x30>
  80ca78:	00802284 	movi	r2,138
  80ca7c:	80000015 	stw	zero,0(r16)
  80ca80:	88800015 	stw	r2,0(r17)
  80ca84:	00bfffc4 	movi	r2,-1
  80ca88:	003ff106 	br	80ca50 <_wcrtomb_r+0x30>

0080ca8c <wcrtomb>:
  80ca8c:	defffa04 	addi	sp,sp,-24
  80ca90:	00c02074 	movhi	r3,129
  80ca94:	dc400415 	stw	r17,16(sp)
  80ca98:	dc000315 	stw	r16,12(sp)
  80ca9c:	1c521217 	ldw	r17,18504(r3)
  80caa0:	dfc00515 	stw	ra,20(sp)
  80caa4:	00c02074 	movhi	r3,129
  80caa8:	18cd3517 	ldw	r3,13524(r3)
  80caac:	3021883a 	mov	r16,r6
  80cab0:	20000c26 	beq	r4,zero,80cae4 <wcrtomb+0x58>
  80cab4:	280d883a 	mov	r6,r5
  80cab8:	800f883a 	mov	r7,r16
  80cabc:	200b883a 	mov	r5,r4
  80cac0:	8809883a 	mov	r4,r17
  80cac4:	183ee83a 	callr	r3
  80cac8:	10ffffd8 	cmpnei	r3,r2,-1
  80cacc:	18000c26 	beq	r3,zero,80cb00 <wcrtomb+0x74>
  80cad0:	dfc00517 	ldw	ra,20(sp)
  80cad4:	dc400417 	ldw	r17,16(sp)
  80cad8:	dc000317 	ldw	r16,12(sp)
  80cadc:	dec00604 	addi	sp,sp,24
  80cae0:	f800283a 	ret
  80cae4:	300f883a 	mov	r7,r6
  80cae8:	d9400084 	addi	r5,sp,2
  80caec:	000d883a 	mov	r6,zero
  80caf0:	8809883a 	mov	r4,r17
  80caf4:	183ee83a 	callr	r3
  80caf8:	10ffffd8 	cmpnei	r3,r2,-1
  80cafc:	183ff41e 	bne	r3,zero,80cad0 <wcrtomb+0x44>
  80cb00:	00802284 	movi	r2,138
  80cb04:	80000015 	stw	zero,0(r16)
  80cb08:	88800015 	stw	r2,0(r17)
  80cb0c:	00bfffc4 	movi	r2,-1
  80cb10:	003fef06 	br	80cad0 <wcrtomb+0x44>

0080cb14 <_wctomb_r>:
  80cb14:	00802074 	movhi	r2,129
  80cb18:	108d3517 	ldw	r2,13524(r2)
  80cb1c:	1000683a 	jmp	r2

0080cb20 <__ascii_wctomb>:
  80cb20:	28000926 	beq	r5,zero,80cb48 <__ascii_wctomb+0x28>
  80cb24:	30804030 	cmpltui	r2,r6,256
  80cb28:	10000326 	beq	r2,zero,80cb38 <__ascii_wctomb+0x18>
  80cb2c:	29800005 	stb	r6,0(r5)
  80cb30:	00800044 	movi	r2,1
  80cb34:	f800283a 	ret
  80cb38:	00802284 	movi	r2,138
  80cb3c:	20800015 	stw	r2,0(r4)
  80cb40:	00bfffc4 	movi	r2,-1
  80cb44:	f800283a 	ret
  80cb48:	0005883a 	mov	r2,zero
  80cb4c:	f800283a 	ret

0080cb50 <abort>:
  80cb50:	deffff04 	addi	sp,sp,-4
  80cb54:	01000184 	movi	r4,6
  80cb58:	dfc00015 	stw	ra,0(sp)
  80cb5c:	080cddc0 	call	80cddc <raise>
  80cb60:	01000044 	movi	r4,1
  80cb64:	080e9380 	call	80e938 <_exit>

0080cb68 <_init_signal_r>:
  80cb68:	2080b717 	ldw	r2,732(r4)
  80cb6c:	10000226 	beq	r2,zero,80cb78 <_init_signal_r+0x10>
  80cb70:	0005883a 	mov	r2,zero
  80cb74:	f800283a 	ret
  80cb78:	defffe04 	addi	sp,sp,-8
  80cb7c:	01402004 	movi	r5,128
  80cb80:	dc000015 	stw	r16,0(sp)
  80cb84:	dfc00115 	stw	ra,4(sp)
  80cb88:	2021883a 	mov	r16,r4
  80cb8c:	08083c00 	call	8083c0 <_malloc_r>
  80cb90:	8080b715 	stw	r2,732(r16)
  80cb94:	1009883a 	mov	r4,r2
  80cb98:	10000826 	beq	r2,zero,80cbbc <_init_signal_r+0x54>
  80cb9c:	01802004 	movi	r6,128
  80cba0:	000b883a 	mov	r5,zero
  80cba4:	0808e9c0 	call	808e9c <memset>
  80cba8:	0005883a 	mov	r2,zero
  80cbac:	dfc00117 	ldw	ra,4(sp)
  80cbb0:	dc000017 	ldw	r16,0(sp)
  80cbb4:	dec00204 	addi	sp,sp,8
  80cbb8:	f800283a 	ret
  80cbbc:	00bfffc4 	movi	r2,-1
  80cbc0:	003ffa06 	br	80cbac <_init_signal_r+0x44>

0080cbc4 <_signal_r>:
  80cbc4:	defffc04 	addi	sp,sp,-16
  80cbc8:	dc400115 	stw	r17,4(sp)
  80cbcc:	dfc00315 	stw	ra,12(sp)
  80cbd0:	dc800215 	stw	r18,8(sp)
  80cbd4:	dc000015 	stw	r16,0(sp)
  80cbd8:	28800830 	cmpltui	r2,r5,32
  80cbdc:	2023883a 	mov	r17,r4
  80cbe0:	10000e26 	beq	r2,zero,80cc1c <_signal_r+0x58>
  80cbe4:	20c0b717 	ldw	r3,732(r4)
  80cbe8:	2821883a 	mov	r16,r5
  80cbec:	3025883a 	mov	r18,r6
  80cbf0:	18000e26 	beq	r3,zero,80cc2c <_signal_r+0x68>
  80cbf4:	802090ba 	slli	r16,r16,2
  80cbf8:	1c21883a 	add	r16,r3,r16
  80cbfc:	80800017 	ldw	r2,0(r16)
  80cc00:	84800015 	stw	r18,0(r16)
  80cc04:	dfc00317 	ldw	ra,12(sp)
  80cc08:	dc800217 	ldw	r18,8(sp)
  80cc0c:	dc400117 	ldw	r17,4(sp)
  80cc10:	dc000017 	ldw	r16,0(sp)
  80cc14:	dec00404 	addi	sp,sp,16
  80cc18:	f800283a 	ret
  80cc1c:	00800584 	movi	r2,22
  80cc20:	20800015 	stw	r2,0(r4)
  80cc24:	00bfffc4 	movi	r2,-1
  80cc28:	003ff606 	br	80cc04 <_signal_r+0x40>
  80cc2c:	01402004 	movi	r5,128
  80cc30:	08083c00 	call	8083c0 <_malloc_r>
  80cc34:	8880b715 	stw	r2,732(r17)
  80cc38:	10000626 	beq	r2,zero,80cc54 <_signal_r+0x90>
  80cc3c:	01802004 	movi	r6,128
  80cc40:	000b883a 	mov	r5,zero
  80cc44:	1009883a 	mov	r4,r2
  80cc48:	0808e9c0 	call	808e9c <memset>
  80cc4c:	1007883a 	mov	r3,r2
  80cc50:	003fe806 	br	80cbf4 <_signal_r+0x30>
  80cc54:	00bfffc4 	movi	r2,-1
  80cc58:	003fea06 	br	80cc04 <_signal_r+0x40>

0080cc5c <_raise_r>:
  80cc5c:	28800830 	cmpltui	r2,r5,32
  80cc60:	10002b26 	beq	r2,zero,80cd10 <_raise_r+0xb4>
  80cc64:	2080b717 	ldw	r2,732(r4)
  80cc68:	defffd04 	addi	sp,sp,-12
  80cc6c:	dc000115 	stw	r16,4(sp)
  80cc70:	dfc00215 	stw	ra,8(sp)
  80cc74:	2821883a 	mov	r16,r5
  80cc78:	10001026 	beq	r2,zero,80ccbc <_raise_r+0x60>
  80cc7c:	280690ba 	slli	r3,r5,2
  80cc80:	10c5883a 	add	r2,r2,r3
  80cc84:	10c00017 	ldw	r3,0(r2)
  80cc88:	18000c26 	beq	r3,zero,80ccbc <_raise_r+0x60>
  80cc8c:	19400060 	cmpeqi	r5,r3,1
  80cc90:	28001a1e 	bne	r5,zero,80ccfc <_raise_r+0xa0>
  80cc94:	197fffd8 	cmpnei	r5,r3,-1
  80cc98:	28001126 	beq	r5,zero,80cce0 <_raise_r+0x84>
  80cc9c:	10000015 	stw	zero,0(r2)
  80cca0:	8009883a 	mov	r4,r16
  80cca4:	183ee83a 	callr	r3
  80cca8:	0005883a 	mov	r2,zero
  80ccac:	dfc00217 	ldw	ra,8(sp)
  80ccb0:	dc000117 	ldw	r16,4(sp)
  80ccb4:	dec00304 	addi	sp,sp,12
  80ccb8:	f800283a 	ret
  80ccbc:	d9000015 	stw	r4,0(sp)
  80ccc0:	080d0b40 	call	80d0b4 <_getpid_r>
  80ccc4:	d9000017 	ldw	r4,0(sp)
  80ccc8:	800d883a 	mov	r6,r16
  80cccc:	100b883a 	mov	r5,r2
  80ccd0:	dfc00217 	ldw	ra,8(sp)
  80ccd4:	dc000117 	ldw	r16,4(sp)
  80ccd8:	dec00304 	addi	sp,sp,12
  80ccdc:	080d0541 	jmpi	80d054 <_kill_r>
  80cce0:	00800584 	movi	r2,22
  80cce4:	20800015 	stw	r2,0(r4)
  80cce8:	00800044 	movi	r2,1
  80ccec:	dfc00217 	ldw	ra,8(sp)
  80ccf0:	dc000117 	ldw	r16,4(sp)
  80ccf4:	dec00304 	addi	sp,sp,12
  80ccf8:	f800283a 	ret
  80ccfc:	0005883a 	mov	r2,zero
  80cd00:	dfc00217 	ldw	ra,8(sp)
  80cd04:	dc000117 	ldw	r16,4(sp)
  80cd08:	dec00304 	addi	sp,sp,12
  80cd0c:	f800283a 	ret
  80cd10:	00800584 	movi	r2,22
  80cd14:	20800015 	stw	r2,0(r4)
  80cd18:	00bfffc4 	movi	r2,-1
  80cd1c:	f800283a 	ret

0080cd20 <__sigtramp_r>:
  80cd20:	28800830 	cmpltui	r2,r5,32
  80cd24:	10002b26 	beq	r2,zero,80cdd4 <__sigtramp_r+0xb4>
  80cd28:	20c0b717 	ldw	r3,732(r4)
  80cd2c:	defffd04 	addi	sp,sp,-12
  80cd30:	dc400115 	stw	r17,4(sp)
  80cd34:	dc000015 	stw	r16,0(sp)
  80cd38:	dfc00215 	stw	ra,8(sp)
  80cd3c:	2821883a 	mov	r16,r5
  80cd40:	2023883a 	mov	r17,r4
  80cd44:	18001326 	beq	r3,zero,80cd94 <__sigtramp_r+0x74>
  80cd48:	800490ba 	slli	r2,r16,2
  80cd4c:	1887883a 	add	r3,r3,r2
  80cd50:	18800017 	ldw	r2,0(r3)
  80cd54:	10000d26 	beq	r2,zero,80cd8c <__sigtramp_r+0x6c>
  80cd58:	113fffe0 	cmpeqi	r4,r2,-1
  80cd5c:	2000191e 	bne	r4,zero,80cdc4 <__sigtramp_r+0xa4>
  80cd60:	11000060 	cmpeqi	r4,r2,1
  80cd64:	2000151e 	bne	r4,zero,80cdbc <__sigtramp_r+0x9c>
  80cd68:	18000015 	stw	zero,0(r3)
  80cd6c:	8009883a 	mov	r4,r16
  80cd70:	103ee83a 	callr	r2
  80cd74:	0005883a 	mov	r2,zero
  80cd78:	dfc00217 	ldw	ra,8(sp)
  80cd7c:	dc400117 	ldw	r17,4(sp)
  80cd80:	dc000017 	ldw	r16,0(sp)
  80cd84:	dec00304 	addi	sp,sp,12
  80cd88:	f800283a 	ret
  80cd8c:	00800044 	movi	r2,1
  80cd90:	003ff906 	br	80cd78 <__sigtramp_r+0x58>
  80cd94:	01402004 	movi	r5,128
  80cd98:	08083c00 	call	8083c0 <_malloc_r>
  80cd9c:	8880b715 	stw	r2,732(r17)
  80cda0:	10000a26 	beq	r2,zero,80cdcc <__sigtramp_r+0xac>
  80cda4:	01802004 	movi	r6,128
  80cda8:	000b883a 	mov	r5,zero
  80cdac:	1009883a 	mov	r4,r2
  80cdb0:	0808e9c0 	call	808e9c <memset>
  80cdb4:	1007883a 	mov	r3,r2
  80cdb8:	003fe306 	br	80cd48 <__sigtramp_r+0x28>
  80cdbc:	008000c4 	movi	r2,3
  80cdc0:	003fed06 	br	80cd78 <__sigtramp_r+0x58>
  80cdc4:	00800084 	movi	r2,2
  80cdc8:	003feb06 	br	80cd78 <__sigtramp_r+0x58>
  80cdcc:	00bfffc4 	movi	r2,-1
  80cdd0:	003fe906 	br	80cd78 <__sigtramp_r+0x58>
  80cdd4:	00bfffc4 	movi	r2,-1
  80cdd8:	f800283a 	ret

0080cddc <raise>:
  80cddc:	defffd04 	addi	sp,sp,-12
  80cde0:	dc400115 	stw	r17,4(sp)
  80cde4:	00c02074 	movhi	r3,129
  80cde8:	dfc00215 	stw	ra,8(sp)
  80cdec:	dc000015 	stw	r16,0(sp)
  80cdf0:	20800830 	cmpltui	r2,r4,32
  80cdf4:	1c521217 	ldw	r17,18504(r3)
  80cdf8:	10002326 	beq	r2,zero,80ce88 <raise+0xac>
  80cdfc:	8880b717 	ldw	r2,732(r17)
  80ce00:	2021883a 	mov	r16,r4
  80ce04:	10001026 	beq	r2,zero,80ce48 <raise+0x6c>
  80ce08:	200690ba 	slli	r3,r4,2
  80ce0c:	10c5883a 	add	r2,r2,r3
  80ce10:	10c00017 	ldw	r3,0(r2)
  80ce14:	18000c26 	beq	r3,zero,80ce48 <raise+0x6c>
  80ce18:	19400060 	cmpeqi	r5,r3,1
  80ce1c:	2800181e 	bne	r5,zero,80ce80 <raise+0xa4>
  80ce20:	197fffd8 	cmpnei	r5,r3,-1
  80ce24:	28001226 	beq	r5,zero,80ce70 <raise+0x94>
  80ce28:	10000015 	stw	zero,0(r2)
  80ce2c:	183ee83a 	callr	r3
  80ce30:	0005883a 	mov	r2,zero
  80ce34:	dfc00217 	ldw	ra,8(sp)
  80ce38:	dc400117 	ldw	r17,4(sp)
  80ce3c:	dc000017 	ldw	r16,0(sp)
  80ce40:	dec00304 	addi	sp,sp,12
  80ce44:	f800283a 	ret
  80ce48:	8809883a 	mov	r4,r17
  80ce4c:	080d0b40 	call	80d0b4 <_getpid_r>
  80ce50:	800d883a 	mov	r6,r16
  80ce54:	100b883a 	mov	r5,r2
  80ce58:	8809883a 	mov	r4,r17
  80ce5c:	dfc00217 	ldw	ra,8(sp)
  80ce60:	dc400117 	ldw	r17,4(sp)
  80ce64:	dc000017 	ldw	r16,0(sp)
  80ce68:	dec00304 	addi	sp,sp,12
  80ce6c:	080d0541 	jmpi	80d054 <_kill_r>
  80ce70:	00800584 	movi	r2,22
  80ce74:	88800015 	stw	r2,0(r17)
  80ce78:	00800044 	movi	r2,1
  80ce7c:	003fed06 	br	80ce34 <raise+0x58>
  80ce80:	0005883a 	mov	r2,zero
  80ce84:	003feb06 	br	80ce34 <raise+0x58>
  80ce88:	00800584 	movi	r2,22
  80ce8c:	88800015 	stw	r2,0(r17)
  80ce90:	00bfffc4 	movi	r2,-1
  80ce94:	003fe706 	br	80ce34 <raise+0x58>

0080ce98 <signal>:
  80ce98:	defffc04 	addi	sp,sp,-16
  80ce9c:	dc800215 	stw	r18,8(sp)
  80cea0:	00c02074 	movhi	r3,129
  80cea4:	dfc00315 	stw	ra,12(sp)
  80cea8:	dc400115 	stw	r17,4(sp)
  80ceac:	dc000015 	stw	r16,0(sp)
  80ceb0:	20800830 	cmpltui	r2,r4,32
  80ceb4:	1c921217 	ldw	r18,18504(r3)
  80ceb8:	10000e26 	beq	r2,zero,80cef4 <signal+0x5c>
  80cebc:	2021883a 	mov	r16,r4
  80cec0:	9100b717 	ldw	r4,732(r18)
  80cec4:	2823883a 	mov	r17,r5
  80cec8:	20000e26 	beq	r4,zero,80cf04 <signal+0x6c>
  80cecc:	802090ba 	slli	r16,r16,2
  80ced0:	2421883a 	add	r16,r4,r16
  80ced4:	80800017 	ldw	r2,0(r16)
  80ced8:	84400015 	stw	r17,0(r16)
  80cedc:	dfc00317 	ldw	ra,12(sp)
  80cee0:	dc800217 	ldw	r18,8(sp)
  80cee4:	dc400117 	ldw	r17,4(sp)
  80cee8:	dc000017 	ldw	r16,0(sp)
  80ceec:	dec00404 	addi	sp,sp,16
  80cef0:	f800283a 	ret
  80cef4:	00800584 	movi	r2,22
  80cef8:	90800015 	stw	r2,0(r18)
  80cefc:	00bfffc4 	movi	r2,-1
  80cf00:	003ff606 	br	80cedc <signal+0x44>
  80cf04:	9009883a 	mov	r4,r18
  80cf08:	01402004 	movi	r5,128
  80cf0c:	08083c00 	call	8083c0 <_malloc_r>
  80cf10:	9080b715 	stw	r2,732(r18)
  80cf14:	1009883a 	mov	r4,r2
  80cf18:	10000526 	beq	r2,zero,80cf30 <signal+0x98>
  80cf1c:	01802004 	movi	r6,128
  80cf20:	000b883a 	mov	r5,zero
  80cf24:	0808e9c0 	call	808e9c <memset>
  80cf28:	1009883a 	mov	r4,r2
  80cf2c:	003fe706 	br	80cecc <signal+0x34>
  80cf30:	00bfffc4 	movi	r2,-1
  80cf34:	003fe906 	br	80cedc <signal+0x44>

0080cf38 <_init_signal>:
  80cf38:	defffe04 	addi	sp,sp,-8
  80cf3c:	00802074 	movhi	r2,129
  80cf40:	dc000015 	stw	r16,0(sp)
  80cf44:	14121217 	ldw	r16,18504(r2)
  80cf48:	dfc00115 	stw	ra,4(sp)
  80cf4c:	8080b717 	ldw	r2,732(r16)
  80cf50:	10000526 	beq	r2,zero,80cf68 <_init_signal+0x30>
  80cf54:	0005883a 	mov	r2,zero
  80cf58:	dfc00117 	ldw	ra,4(sp)
  80cf5c:	dc000017 	ldw	r16,0(sp)
  80cf60:	dec00204 	addi	sp,sp,8
  80cf64:	f800283a 	ret
  80cf68:	8009883a 	mov	r4,r16
  80cf6c:	01402004 	movi	r5,128
  80cf70:	08083c00 	call	8083c0 <_malloc_r>
  80cf74:	8080b715 	stw	r2,732(r16)
  80cf78:	1009883a 	mov	r4,r2
  80cf7c:	10000426 	beq	r2,zero,80cf90 <_init_signal+0x58>
  80cf80:	01802004 	movi	r6,128
  80cf84:	000b883a 	mov	r5,zero
  80cf88:	0808e9c0 	call	808e9c <memset>
  80cf8c:	003ff106 	br	80cf54 <_init_signal+0x1c>
  80cf90:	00bfffc4 	movi	r2,-1
  80cf94:	003ff006 	br	80cf58 <_init_signal+0x20>

0080cf98 <__sigtramp>:
  80cf98:	defffd04 	addi	sp,sp,-12
  80cf9c:	dc400115 	stw	r17,4(sp)
  80cfa0:	00c02074 	movhi	r3,129
  80cfa4:	dfc00215 	stw	ra,8(sp)
  80cfa8:	dc000015 	stw	r16,0(sp)
  80cfac:	20800830 	cmpltui	r2,r4,32
  80cfb0:	1c521217 	ldw	r17,18504(r3)
  80cfb4:	10002526 	beq	r2,zero,80d04c <__sigtramp+0xb4>
  80cfb8:	88c0b717 	ldw	r3,732(r17)
  80cfbc:	2021883a 	mov	r16,r4
  80cfc0:	18001326 	beq	r3,zero,80d010 <__sigtramp+0x78>
  80cfc4:	800890ba 	slli	r4,r16,2
  80cfc8:	1907883a 	add	r3,r3,r4
  80cfcc:	18800017 	ldw	r2,0(r3)
  80cfd0:	10000d26 	beq	r2,zero,80d008 <__sigtramp+0x70>
  80cfd4:	113fffe0 	cmpeqi	r4,r2,-1
  80cfd8:	20001a1e 	bne	r4,zero,80d044 <__sigtramp+0xac>
  80cfdc:	11000060 	cmpeqi	r4,r2,1
  80cfe0:	2000161e 	bne	r4,zero,80d03c <__sigtramp+0xa4>
  80cfe4:	18000015 	stw	zero,0(r3)
  80cfe8:	8009883a 	mov	r4,r16
  80cfec:	103ee83a 	callr	r2
  80cff0:	0005883a 	mov	r2,zero
  80cff4:	dfc00217 	ldw	ra,8(sp)
  80cff8:	dc400117 	ldw	r17,4(sp)
  80cffc:	dc000017 	ldw	r16,0(sp)
  80d000:	dec00304 	addi	sp,sp,12
  80d004:	f800283a 	ret
  80d008:	00800044 	movi	r2,1
  80d00c:	003ff906 	br	80cff4 <__sigtramp+0x5c>
  80d010:	01402004 	movi	r5,128
  80d014:	8809883a 	mov	r4,r17
  80d018:	08083c00 	call	8083c0 <_malloc_r>
  80d01c:	8880b715 	stw	r2,732(r17)
  80d020:	10000a26 	beq	r2,zero,80d04c <__sigtramp+0xb4>
  80d024:	01802004 	movi	r6,128
  80d028:	000b883a 	mov	r5,zero
  80d02c:	1009883a 	mov	r4,r2
  80d030:	0808e9c0 	call	808e9c <memset>
  80d034:	1007883a 	mov	r3,r2
  80d038:	003fe206 	br	80cfc4 <__sigtramp+0x2c>
  80d03c:	008000c4 	movi	r2,3
  80d040:	003fec06 	br	80cff4 <__sigtramp+0x5c>
  80d044:	00800084 	movi	r2,2
  80d048:	003fea06 	br	80cff4 <__sigtramp+0x5c>
  80d04c:	00bfffc4 	movi	r2,-1
  80d050:	003fe806 	br	80cff4 <__sigtramp+0x5c>

0080d054 <_kill_r>:
  80d054:	2807883a 	mov	r3,r5
  80d058:	defffe04 	addi	sp,sp,-8
  80d05c:	dc000015 	stw	r16,0(sp)
  80d060:	00802074 	movhi	r2,129
  80d064:	300b883a 	mov	r5,r6
  80d068:	2021883a 	mov	r16,r4
  80d06c:	1809883a 	mov	r4,r3
  80d070:	dfc00115 	stw	ra,4(sp)
  80d074:	10195715 	stw	zero,25948(r2)
  80d078:	080ee480 	call	80ee48 <kill>
  80d07c:	10ffffd8 	cmpnei	r3,r2,-1
  80d080:	18000426 	beq	r3,zero,80d094 <_kill_r+0x40>
  80d084:	dfc00117 	ldw	ra,4(sp)
  80d088:	dc000017 	ldw	r16,0(sp)
  80d08c:	dec00204 	addi	sp,sp,8
  80d090:	f800283a 	ret
  80d094:	00c02074 	movhi	r3,129
  80d098:	18d95717 	ldw	r3,25948(r3)
  80d09c:	183ff926 	beq	r3,zero,80d084 <_kill_r+0x30>
  80d0a0:	80c00015 	stw	r3,0(r16)
  80d0a4:	dfc00117 	ldw	ra,4(sp)
  80d0a8:	dc000017 	ldw	r16,0(sp)
  80d0ac:	dec00204 	addi	sp,sp,8
  80d0b0:	f800283a 	ret

0080d0b4 <_getpid_r>:
  80d0b4:	080ea681 	jmpi	80ea68 <getpid>

0080d0b8 <__udivdi3>:
  80d0b8:	defff504 	addi	sp,sp,-44
  80d0bc:	dd000515 	stw	r20,20(sp)
  80d0c0:	dc800315 	stw	r18,12(sp)
  80d0c4:	dfc00a15 	stw	ra,40(sp)
  80d0c8:	df000915 	stw	fp,36(sp)
  80d0cc:	ddc00815 	stw	r23,32(sp)
  80d0d0:	dd800715 	stw	r22,28(sp)
  80d0d4:	dd400615 	stw	r21,24(sp)
  80d0d8:	dcc00415 	stw	r19,16(sp)
  80d0dc:	dc400215 	stw	r17,8(sp)
  80d0e0:	dc000115 	stw	r16,4(sp)
  80d0e4:	2029883a 	mov	r20,r4
  80d0e8:	2825883a 	mov	r18,r5
  80d0ec:	3800461e 	bne	r7,zero,80d208 <__udivdi3+0x150>
  80d0f0:	3823883a 	mov	r17,r7
  80d0f4:	3021883a 	mov	r16,r6
  80d0f8:	2027883a 	mov	r19,r4
  80d0fc:	2980622e 	bgeu	r5,r6,80d288 <__udivdi3+0x1d0>
  80d100:	00bfffd4 	movui	r2,65535
  80d104:	282b883a 	mov	r21,r5
  80d108:	1180aa2e 	bgeu	r2,r6,80d3b4 <__udivdi3+0x2fc>
  80d10c:	00804034 	movhi	r2,256
  80d110:	30815a36 	bltu	r6,r2,80d67c <__udivdi3+0x5c4>
  80d114:	3006d63a 	srli	r3,r6,24
  80d118:	04400604 	movi	r17,24
  80d11c:	00802074 	movhi	r2,129
  80d120:	1885883a 	add	r2,r3,r2
  80d124:	10895b03 	ldbu	r2,9580(r2)
  80d128:	00c00804 	movi	r3,32
  80d12c:	1463883a 	add	r17,r2,r17
  80d130:	1c45c83a 	sub	r2,r3,r17
  80d134:	1c400526 	beq	r3,r17,80d14c <__udivdi3+0x94>
  80d138:	9086983a 	sll	r3,r18,r2
  80d13c:	a462d83a 	srl	r17,r20,r17
  80d140:	30a0983a 	sll	r16,r6,r2
  80d144:	a0a6983a 	sll	r19,r20,r2
  80d148:	88eab03a 	or	r21,r17,r3
  80d14c:	802cd43a 	srli	r22,r16,16
  80d150:	a809883a 	mov	r4,r21
  80d154:	853fffcc 	andi	r20,r16,65535
  80d158:	b00b883a 	mov	r5,r22
  80d15c:	08031540 	call	803154 <__umodsi3>
  80d160:	a809883a 	mov	r4,r21
  80d164:	b00b883a 	mov	r5,r22
  80d168:	1025883a 	mov	r18,r2
  80d16c:	08030f00 	call	8030f0 <__udivsi3>
  80d170:	a009883a 	mov	r4,r20
  80d174:	100b883a 	mov	r5,r2
  80d178:	102b883a 	mov	r21,r2
  80d17c:	08031b00 	call	8031b0 <__mulsi3>
  80d180:	9024943a 	slli	r18,r18,16
  80d184:	9808d43a 	srli	r4,r19,16
  80d188:	9108b03a 	or	r4,r18,r4
  80d18c:	2080052e 	bgeu	r4,r2,80d1a4 <__udivdi3+0xec>
  80d190:	2409883a 	add	r4,r4,r16
  80d194:	a8ffffc4 	addi	r3,r21,-1
  80d198:	24000136 	bltu	r4,r16,80d1a0 <__udivdi3+0xe8>
  80d19c:	20814836 	bltu	r4,r2,80d6c0 <__udivdi3+0x608>
  80d1a0:	182b883a 	mov	r21,r3
  80d1a4:	20a3c83a 	sub	r17,r4,r2
  80d1a8:	8809883a 	mov	r4,r17
  80d1ac:	b00b883a 	mov	r5,r22
  80d1b0:	08031540 	call	803154 <__umodsi3>
  80d1b4:	8809883a 	mov	r4,r17
  80d1b8:	1023883a 	mov	r17,r2
  80d1bc:	b00b883a 	mov	r5,r22
  80d1c0:	8822943a 	slli	r17,r17,16
  80d1c4:	08030f00 	call	8030f0 <__udivsi3>
  80d1c8:	100b883a 	mov	r5,r2
  80d1cc:	a009883a 	mov	r4,r20
  80d1d0:	9cffffcc 	andi	r19,r19,65535
  80d1d4:	1025883a 	mov	r18,r2
  80d1d8:	8ce6b03a 	or	r19,r17,r19
  80d1dc:	08031b00 	call	8031b0 <__mulsi3>
  80d1e0:	9880052e 	bgeu	r19,r2,80d1f8 <__udivdi3+0x140>
  80d1e4:	84e7883a 	add	r19,r16,r19
  80d1e8:	90ffffc4 	addi	r3,r18,-1
  80d1ec:	9c000136 	bltu	r19,r16,80d1f4 <__udivdi3+0x13c>
  80d1f0:	98813136 	bltu	r19,r2,80d6b8 <__udivdi3+0x600>
  80d1f4:	1825883a 	mov	r18,r3
  80d1f8:	a80c943a 	slli	r6,r21,16
  80d1fc:	0007883a 	mov	r3,zero
  80d200:	3484b03a 	or	r2,r6,r18
  80d204:	00000306 	br	80d214 <__udivdi3+0x15c>
  80d208:	29c00e2e 	bgeu	r5,r7,80d244 <__udivdi3+0x18c>
  80d20c:	0007883a 	mov	r3,zero
  80d210:	0005883a 	mov	r2,zero
  80d214:	dfc00a17 	ldw	ra,40(sp)
  80d218:	df000917 	ldw	fp,36(sp)
  80d21c:	ddc00817 	ldw	r23,32(sp)
  80d220:	dd800717 	ldw	r22,28(sp)
  80d224:	dd400617 	ldw	r21,24(sp)
  80d228:	dd000517 	ldw	r20,20(sp)
  80d22c:	dcc00417 	ldw	r19,16(sp)
  80d230:	dc800317 	ldw	r18,12(sp)
  80d234:	dc400217 	ldw	r17,8(sp)
  80d238:	dc000117 	ldw	r16,4(sp)
  80d23c:	dec00b04 	addi	sp,sp,44
  80d240:	f800283a 	ret
  80d244:	00bfffd4 	movui	r2,65535
  80d248:	11c05f2e 	bgeu	r2,r7,80d3c8 <__udivdi3+0x310>
  80d24c:	00804034 	movhi	r2,256
  80d250:	3880fc36 	bltu	r7,r2,80d644 <__udivdi3+0x58c>
  80d254:	3804d63a 	srli	r2,r7,24
  80d258:	01000604 	movi	r4,24
  80d25c:	00c02074 	movhi	r3,129
  80d260:	10c7883a 	add	r3,r2,r3
  80d264:	18895b03 	ldbu	r2,9580(r3)
  80d268:	00c00804 	movi	r3,32
  80d26c:	1105883a 	add	r2,r2,r4
  80d270:	18a3c83a 	sub	r17,r3,r2
  80d274:	1880901e 	bne	r3,r2,80d4b8 <__udivdi3+0x400>
  80d278:	3c80f736 	bltu	r7,r18,80d658 <__udivdi3+0x5a0>
  80d27c:	a185403a 	cmpgeu	r2,r20,r6
  80d280:	0007883a 	mov	r3,zero
  80d284:	003fe306 	br	80d214 <__udivdi3+0x15c>
  80d288:	3000041e 	bne	r6,zero,80d29c <__udivdi3+0x1e4>
  80d28c:	000b883a 	mov	r5,zero
  80d290:	01000044 	movi	r4,1
  80d294:	08030f00 	call	8030f0 <__udivsi3>
  80d298:	1021883a 	mov	r16,r2
  80d29c:	00bfffd4 	movui	r2,65535
  80d2a0:	14003f2e 	bgeu	r2,r16,80d3a0 <__udivdi3+0x2e8>
  80d2a4:	00804034 	movhi	r2,256
  80d2a8:	8080f136 	bltu	r16,r2,80d670 <__udivdi3+0x5b8>
  80d2ac:	8006d63a 	srli	r3,r16,24
  80d2b0:	04400604 	movi	r17,24
  80d2b4:	00802074 	movhi	r2,129
  80d2b8:	1885883a 	add	r2,r3,r2
  80d2bc:	10895b03 	ldbu	r2,9580(r2)
  80d2c0:	00c00804 	movi	r3,32
  80d2c4:	1463883a 	add	r17,r2,r17
  80d2c8:	1c45c83a 	sub	r2,r3,r17
  80d2cc:	1c40431e 	bne	r3,r17,80d3dc <__udivdi3+0x324>
  80d2d0:	802cd43a 	srli	r22,r16,16
  80d2d4:	9423c83a 	sub	r17,r18,r16
  80d2d8:	853fffcc 	andi	r20,r16,65535
  80d2dc:	00c00044 	movi	r3,1
  80d2e0:	b00b883a 	mov	r5,r22
  80d2e4:	8809883a 	mov	r4,r17
  80d2e8:	d8c00015 	stw	r3,0(sp)
  80d2ec:	08031540 	call	803154 <__umodsi3>
  80d2f0:	b00b883a 	mov	r5,r22
  80d2f4:	8809883a 	mov	r4,r17
  80d2f8:	1025883a 	mov	r18,r2
  80d2fc:	08030f00 	call	8030f0 <__udivsi3>
  80d300:	1009883a 	mov	r4,r2
  80d304:	a00b883a 	mov	r5,r20
  80d308:	102b883a 	mov	r21,r2
  80d30c:	08031b00 	call	8031b0 <__mulsi3>
  80d310:	9024943a 	slli	r18,r18,16
  80d314:	9808d43a 	srli	r4,r19,16
  80d318:	d8c00017 	ldw	r3,0(sp)
  80d31c:	9108b03a 	or	r4,r18,r4
  80d320:	2080052e 	bgeu	r4,r2,80d338 <__udivdi3+0x280>
  80d324:	2409883a 	add	r4,r4,r16
  80d328:	a97fffc4 	addi	r5,r21,-1
  80d32c:	24000136 	bltu	r4,r16,80d334 <__udivdi3+0x27c>
  80d330:	2080e636 	bltu	r4,r2,80d6cc <__udivdi3+0x614>
  80d334:	282b883a 	mov	r21,r5
  80d338:	20a3c83a 	sub	r17,r4,r2
  80d33c:	8809883a 	mov	r4,r17
  80d340:	b00b883a 	mov	r5,r22
  80d344:	d8c00015 	stw	r3,0(sp)
  80d348:	08031540 	call	803154 <__umodsi3>
  80d34c:	8809883a 	mov	r4,r17
  80d350:	1023883a 	mov	r17,r2
  80d354:	b00b883a 	mov	r5,r22
  80d358:	8822943a 	slli	r17,r17,16
  80d35c:	08030f00 	call	8030f0 <__udivsi3>
  80d360:	a00b883a 	mov	r5,r20
  80d364:	1009883a 	mov	r4,r2
  80d368:	9cffffcc 	andi	r19,r19,65535
  80d36c:	1025883a 	mov	r18,r2
  80d370:	8ce6b03a 	or	r19,r17,r19
  80d374:	08031b00 	call	8031b0 <__mulsi3>
  80d378:	d8c00017 	ldw	r3,0(sp)
  80d37c:	9880052e 	bgeu	r19,r2,80d394 <__udivdi3+0x2dc>
  80d380:	84e7883a 	add	r19,r16,r19
  80d384:	913fffc4 	addi	r4,r18,-1
  80d388:	9c000136 	bltu	r19,r16,80d390 <__udivdi3+0x2d8>
  80d38c:	9880c836 	bltu	r19,r2,80d6b0 <__udivdi3+0x5f8>
  80d390:	2025883a 	mov	r18,r4
  80d394:	a80c943a 	slli	r6,r21,16
  80d398:	3484b03a 	or	r2,r6,r18
  80d39c:	003f9d06 	br	80d214 <__udivdi3+0x15c>
  80d3a0:	80804030 	cmpltui	r2,r16,256
  80d3a4:	1000b81e 	bne	r2,zero,80d688 <__udivdi3+0x5d0>
  80d3a8:	8006d23a 	srli	r3,r16,8
  80d3ac:	04400204 	movi	r17,8
  80d3b0:	003fc006 	br	80d2b4 <__udivdi3+0x1fc>
  80d3b4:	30804030 	cmpltui	r2,r6,256
  80d3b8:	1000a51e 	bne	r2,zero,80d650 <__udivdi3+0x598>
  80d3bc:	3006d23a 	srli	r3,r6,8
  80d3c0:	04400204 	movi	r17,8
  80d3c4:	003f5506 	br	80d11c <__udivdi3+0x64>
  80d3c8:	38804030 	cmpltui	r2,r7,256
  80d3cc:	1000a51e 	bne	r2,zero,80d664 <__udivdi3+0x5ac>
  80d3d0:	3804d23a 	srli	r2,r7,8
  80d3d4:	01000204 	movi	r4,8
  80d3d8:	003fa006 	br	80d25c <__udivdi3+0x1a4>
  80d3dc:	80a0983a 	sll	r16,r16,r2
  80d3e0:	946ed83a 	srl	r23,r18,r17
  80d3e4:	9086983a 	sll	r3,r18,r2
  80d3e8:	802cd43a 	srli	r22,r16,16
  80d3ec:	a462d83a 	srl	r17,r20,r17
  80d3f0:	b809883a 	mov	r4,r23
  80d3f4:	b00b883a 	mov	r5,r22
  80d3f8:	88eab03a 	or	r21,r17,r3
  80d3fc:	a0a6983a 	sll	r19,r20,r2
  80d400:	08031540 	call	803154 <__umodsi3>
  80d404:	b809883a 	mov	r4,r23
  80d408:	b00b883a 	mov	r5,r22
  80d40c:	1025883a 	mov	r18,r2
  80d410:	853fffcc 	andi	r20,r16,65535
  80d414:	08030f00 	call	8030f0 <__udivsi3>
  80d418:	a009883a 	mov	r4,r20
  80d41c:	100b883a 	mov	r5,r2
  80d420:	102f883a 	mov	r23,r2
  80d424:	08031b00 	call	8031b0 <__mulsi3>
  80d428:	9024943a 	slli	r18,r18,16
  80d42c:	a808d43a 	srli	r4,r21,16
  80d430:	9108b03a 	or	r4,r18,r4
  80d434:	2080062e 	bgeu	r4,r2,80d450 <__udivdi3+0x398>
  80d438:	2409883a 	add	r4,r4,r16
  80d43c:	b8ffffc4 	addi	r3,r23,-1
  80d440:	24009936 	bltu	r4,r16,80d6a8 <__udivdi3+0x5f0>
  80d444:	2080982e 	bgeu	r4,r2,80d6a8 <__udivdi3+0x5f0>
  80d448:	bdffff84 	addi	r23,r23,-2
  80d44c:	2409883a 	add	r4,r4,r16
  80d450:	20a3c83a 	sub	r17,r4,r2
  80d454:	8809883a 	mov	r4,r17
  80d458:	b00b883a 	mov	r5,r22
  80d45c:	08031540 	call	803154 <__umodsi3>
  80d460:	1025883a 	mov	r18,r2
  80d464:	8809883a 	mov	r4,r17
  80d468:	b00b883a 	mov	r5,r22
  80d46c:	9024943a 	slli	r18,r18,16
  80d470:	08030f00 	call	8030f0 <__udivsi3>
  80d474:	100b883a 	mov	r5,r2
  80d478:	a009883a 	mov	r4,r20
  80d47c:	ac7fffcc 	andi	r17,r21,65535
  80d480:	1039883a 	mov	fp,r2
  80d484:	9462b03a 	or	r17,r18,r17
  80d488:	08031b00 	call	8031b0 <__mulsi3>
  80d48c:	8880062e 	bgeu	r17,r2,80d4a8 <__udivdi3+0x3f0>
  80d490:	8c23883a 	add	r17,r17,r16
  80d494:	e0ffffc4 	addi	r3,fp,-1
  80d498:	8c007f36 	bltu	r17,r16,80d698 <__udivdi3+0x5e0>
  80d49c:	88807e2e 	bgeu	r17,r2,80d698 <__udivdi3+0x5e0>
  80d4a0:	e73fff84 	addi	fp,fp,-2
  80d4a4:	8c23883a 	add	r17,r17,r16
  80d4a8:	b806943a 	slli	r3,r23,16
  80d4ac:	88a3c83a 	sub	r17,r17,r2
  80d4b0:	1f06b03a 	or	r3,r3,fp
  80d4b4:	003f8a06 	br	80d2e0 <__udivdi3+0x228>
  80d4b8:	30a6d83a 	srl	r19,r6,r2
  80d4bc:	3c4e983a 	sll	r7,r7,r17
  80d4c0:	90a0d83a 	srl	r16,r18,r2
  80d4c4:	9446983a 	sll	r3,r18,r17
  80d4c8:	99e6b03a 	or	r19,r19,r7
  80d4cc:	a084d83a 	srl	r2,r20,r2
  80d4d0:	9838d43a 	srli	fp,r19,16
  80d4d4:	8009883a 	mov	r4,r16
  80d4d8:	10eab03a 	or	r21,r2,r3
  80d4dc:	e00b883a 	mov	r5,fp
  80d4e0:	346c983a 	sll	r22,r6,r17
  80d4e4:	dd400015 	stw	r21,0(sp)
  80d4e8:	08031540 	call	803154 <__umodsi3>
  80d4ec:	8009883a 	mov	r4,r16
  80d4f0:	e00b883a 	mov	r5,fp
  80d4f4:	102f883a 	mov	r23,r2
  80d4f8:	9cbfffcc 	andi	r18,r19,65535
  80d4fc:	08030f00 	call	8030f0 <__udivsi3>
  80d500:	9009883a 	mov	r4,r18
  80d504:	100b883a 	mov	r5,r2
  80d508:	1021883a 	mov	r16,r2
  80d50c:	08031b00 	call	8031b0 <__mulsi3>
  80d510:	b82e943a 	slli	r23,r23,16
  80d514:	a808d43a 	srli	r4,r21,16
  80d518:	b908b03a 	or	r4,r23,r4
  80d51c:	2080062e 	bgeu	r4,r2,80d538 <__udivdi3+0x480>
  80d520:	24c9883a 	add	r4,r4,r19
  80d524:	817fffc4 	addi	r5,r16,-1
  80d528:	24c05d36 	bltu	r4,r19,80d6a0 <__udivdi3+0x5e8>
  80d52c:	20805c2e 	bgeu	r4,r2,80d6a0 <__udivdi3+0x5e8>
  80d530:	843fff84 	addi	r16,r16,-2
  80d534:	24c9883a 	add	r4,r4,r19
  80d538:	20abc83a 	sub	r21,r4,r2
  80d53c:	a809883a 	mov	r4,r21
  80d540:	e00b883a 	mov	r5,fp
  80d544:	08031540 	call	803154 <__umodsi3>
  80d548:	a809883a 	mov	r4,r21
  80d54c:	e00b883a 	mov	r5,fp
  80d550:	102b883a 	mov	r21,r2
  80d554:	08030f00 	call	8030f0 <__udivsi3>
  80d558:	9009883a 	mov	r4,r18
  80d55c:	100b883a 	mov	r5,r2
  80d560:	102f883a 	mov	r23,r2
  80d564:	08031b00 	call	8031b0 <__mulsi3>
  80d568:	d8c00017 	ldw	r3,0(sp)
  80d56c:	a82a943a 	slli	r21,r21,16
  80d570:	100d883a 	mov	r6,r2
  80d574:	1cbfffcc 	andi	r18,r3,65535
  80d578:	aca4b03a 	or	r18,r21,r18
  80d57c:	9080062e 	bgeu	r18,r2,80d598 <__udivdi3+0x4e0>
  80d580:	94e5883a 	add	r18,r18,r19
  80d584:	b8bfffc4 	addi	r2,r23,-1
  80d588:	94c04136 	bltu	r18,r19,80d690 <__udivdi3+0x5d8>
  80d58c:	9180402e 	bgeu	r18,r6,80d690 <__udivdi3+0x5d8>
  80d590:	bdffff84 	addi	r23,r23,-2
  80d594:	94e5883a 	add	r18,r18,r19
  80d598:	8004943a 	slli	r2,r16,16
  80d59c:	bd7fffcc 	andi	r21,r23,65535
  80d5a0:	b73fffcc 	andi	fp,r22,65535
  80d5a4:	15e0b03a 	or	r16,r2,r23
  80d5a8:	8026d43a 	srli	r19,r16,16
  80d5ac:	a809883a 	mov	r4,r21
  80d5b0:	e00b883a 	mov	r5,fp
  80d5b4:	91a5c83a 	sub	r18,r18,r6
  80d5b8:	b02cd43a 	srli	r22,r22,16
  80d5bc:	08031b00 	call	8031b0 <__mulsi3>
  80d5c0:	9809883a 	mov	r4,r19
  80d5c4:	e00b883a 	mov	r5,fp
  80d5c8:	102f883a 	mov	r23,r2
  80d5cc:	08031b00 	call	8031b0 <__mulsi3>
  80d5d0:	9809883a 	mov	r4,r19
  80d5d4:	b00b883a 	mov	r5,r22
  80d5d8:	1027883a 	mov	r19,r2
  80d5dc:	08031b00 	call	8031b0 <__mulsi3>
  80d5e0:	a809883a 	mov	r4,r21
  80d5e4:	b00b883a 	mov	r5,r22
  80d5e8:	102b883a 	mov	r21,r2
  80d5ec:	08031b00 	call	8031b0 <__mulsi3>
  80d5f0:	b806d43a 	srli	r3,r23,16
  80d5f4:	14c5883a 	add	r2,r2,r19
  80d5f8:	1887883a 	add	r3,r3,r2
  80d5fc:	1cc0022e 	bgeu	r3,r19,80d608 <__udivdi3+0x550>
  80d600:	00800074 	movhi	r2,1
  80d604:	a8ab883a 	add	r21,r21,r2
  80d608:	1804d43a 	srli	r2,r3,16
  80d60c:	156b883a 	add	r21,r2,r21
  80d610:	95400936 	bltu	r18,r21,80d638 <__udivdi3+0x580>
  80d614:	95400326 	beq	r18,r21,80d624 <__udivdi3+0x56c>
  80d618:	8005883a 	mov	r2,r16
  80d61c:	0007883a 	mov	r3,zero
  80d620:	003efc06 	br	80d214 <__udivdi3+0x15c>
  80d624:	1806943a 	slli	r3,r3,16
  80d628:	a44c983a 	sll	r6,r20,r17
  80d62c:	bdffffcc 	andi	r23,r23,65535
  80d630:	1dc7883a 	add	r3,r3,r23
  80d634:	30fff82e 	bgeu	r6,r3,80d618 <__udivdi3+0x560>
  80d638:	80bfffc4 	addi	r2,r16,-1
  80d63c:	0007883a 	mov	r3,zero
  80d640:	003ef406 	br	80d214 <__udivdi3+0x15c>
  80d644:	3804d43a 	srli	r2,r7,16
  80d648:	01000404 	movi	r4,16
  80d64c:	003f0306 	br	80d25c <__udivdi3+0x1a4>
  80d650:	3007883a 	mov	r3,r6
  80d654:	003eb106 	br	80d11c <__udivdi3+0x64>
  80d658:	0007883a 	mov	r3,zero
  80d65c:	00800044 	movi	r2,1
  80d660:	003eec06 	br	80d214 <__udivdi3+0x15c>
  80d664:	3805883a 	mov	r2,r7
  80d668:	0009883a 	mov	r4,zero
  80d66c:	003efb06 	br	80d25c <__udivdi3+0x1a4>
  80d670:	8006d43a 	srli	r3,r16,16
  80d674:	04400404 	movi	r17,16
  80d678:	003f0e06 	br	80d2b4 <__udivdi3+0x1fc>
  80d67c:	3006d43a 	srli	r3,r6,16
  80d680:	04400404 	movi	r17,16
  80d684:	003ea506 	br	80d11c <__udivdi3+0x64>
  80d688:	8007883a 	mov	r3,r16
  80d68c:	003f0906 	br	80d2b4 <__udivdi3+0x1fc>
  80d690:	102f883a 	mov	r23,r2
  80d694:	003fc006 	br	80d598 <__udivdi3+0x4e0>
  80d698:	1839883a 	mov	fp,r3
  80d69c:	003f8206 	br	80d4a8 <__udivdi3+0x3f0>
  80d6a0:	2821883a 	mov	r16,r5
  80d6a4:	003fa406 	br	80d538 <__udivdi3+0x480>
  80d6a8:	182f883a 	mov	r23,r3
  80d6ac:	003f6806 	br	80d450 <__udivdi3+0x398>
  80d6b0:	94bfff84 	addi	r18,r18,-2
  80d6b4:	003f3706 	br	80d394 <__udivdi3+0x2dc>
  80d6b8:	94bfff84 	addi	r18,r18,-2
  80d6bc:	003ece06 	br	80d1f8 <__udivdi3+0x140>
  80d6c0:	ad7fff84 	addi	r21,r21,-2
  80d6c4:	2409883a 	add	r4,r4,r16
  80d6c8:	003eb606 	br	80d1a4 <__udivdi3+0xec>
  80d6cc:	ad7fff84 	addi	r21,r21,-2
  80d6d0:	2409883a 	add	r4,r4,r16
  80d6d4:	003f1806 	br	80d338 <__udivdi3+0x280>

0080d6d8 <__umoddi3>:
  80d6d8:	defff304 	addi	sp,sp,-52
  80d6dc:	dc400415 	stw	r17,16(sp)
  80d6e0:	dc000315 	stw	r16,12(sp)
  80d6e4:	dfc00c15 	stw	ra,48(sp)
  80d6e8:	df000b15 	stw	fp,44(sp)
  80d6ec:	ddc00a15 	stw	r23,40(sp)
  80d6f0:	dd800915 	stw	r22,36(sp)
  80d6f4:	dd400815 	stw	r21,32(sp)
  80d6f8:	dd000715 	stw	r20,28(sp)
  80d6fc:	dcc00615 	stw	r19,24(sp)
  80d700:	dc800515 	stw	r18,20(sp)
  80d704:	2823883a 	mov	r17,r5
  80d708:	2021883a 	mov	r16,r4
  80d70c:	38003b1e 	bne	r7,zero,80d7fc <__umoddi3+0x124>
  80d710:	3825883a 	mov	r18,r7
  80d714:	3029883a 	mov	r20,r6
  80d718:	2027883a 	mov	r19,r4
  80d71c:	29805b2e 	bgeu	r5,r6,80d88c <__umoddi3+0x1b4>
  80d720:	00bfffd4 	movui	r2,65535
  80d724:	282d883a 	mov	r22,r5
  80d728:	11809a2e 	bgeu	r2,r6,80d994 <__umoddi3+0x2bc>
  80d72c:	00804034 	movhi	r2,256
  80d730:	30814436 	bltu	r6,r2,80dc44 <__umoddi3+0x56c>
  80d734:	3006d63a 	srli	r3,r6,24
  80d738:	04800604 	movi	r18,24
  80d73c:	00802074 	movhi	r2,129
  80d740:	1885883a 	add	r2,r3,r2
  80d744:	10895b03 	ldbu	r2,9580(r2)
  80d748:	00c00804 	movi	r3,32
  80d74c:	1485883a 	add	r2,r2,r18
  80d750:	18a5c83a 	sub	r18,r3,r2
  80d754:	18800526 	beq	r3,r2,80d76c <__umoddi3+0x94>
  80d758:	8ca2983a 	sll	r17,r17,r18
  80d75c:	8084d83a 	srl	r2,r16,r2
  80d760:	34a8983a 	sll	r20,r6,r18
  80d764:	84a6983a 	sll	r19,r16,r18
  80d768:	146cb03a 	or	r22,r2,r17
  80d76c:	a02ed43a 	srli	r23,r20,16
  80d770:	b009883a 	mov	r4,r22
  80d774:	a57fffcc 	andi	r21,r20,65535
  80d778:	b80b883a 	mov	r5,r23
  80d77c:	08031540 	call	803154 <__umodsi3>
  80d780:	b80b883a 	mov	r5,r23
  80d784:	b009883a 	mov	r4,r22
  80d788:	1023883a 	mov	r17,r2
  80d78c:	08030f00 	call	8030f0 <__udivsi3>
  80d790:	a809883a 	mov	r4,r21
  80d794:	100b883a 	mov	r5,r2
  80d798:	08031b00 	call	8031b0 <__mulsi3>
  80d79c:	8822943a 	slli	r17,r17,16
  80d7a0:	9808d43a 	srli	r4,r19,16
  80d7a4:	8908b03a 	or	r4,r17,r4
  80d7a8:	2080042e 	bgeu	r4,r2,80d7bc <__umoddi3+0xe4>
  80d7ac:	2509883a 	add	r4,r4,r20
  80d7b0:	25000236 	bltu	r4,r20,80d7bc <__umoddi3+0xe4>
  80d7b4:	2080012e 	bgeu	r4,r2,80d7bc <__umoddi3+0xe4>
  80d7b8:	2509883a 	add	r4,r4,r20
  80d7bc:	20a1c83a 	sub	r16,r4,r2
  80d7c0:	b80b883a 	mov	r5,r23
  80d7c4:	8009883a 	mov	r4,r16
  80d7c8:	08031540 	call	803154 <__umodsi3>
  80d7cc:	b80b883a 	mov	r5,r23
  80d7d0:	8009883a 	mov	r4,r16
  80d7d4:	1023883a 	mov	r17,r2
  80d7d8:	08030f00 	call	8030f0 <__udivsi3>
  80d7dc:	8822943a 	slli	r17,r17,16
  80d7e0:	100b883a 	mov	r5,r2
  80d7e4:	a809883a 	mov	r4,r21
  80d7e8:	08031b00 	call	8031b0 <__mulsi3>
  80d7ec:	98ffffcc 	andi	r3,r19,65535
  80d7f0:	88c6b03a 	or	r3,r17,r3
  80d7f4:	18805e2e 	bgeu	r3,r2,80d970 <__umoddi3+0x298>
  80d7f8:	00005906 	br	80d960 <__umoddi3+0x288>
  80d7fc:	2005883a 	mov	r2,r4
  80d800:	29c00d2e 	bgeu	r5,r7,80d838 <__umoddi3+0x160>
  80d804:	2807883a 	mov	r3,r5
  80d808:	dfc00c17 	ldw	ra,48(sp)
  80d80c:	df000b17 	ldw	fp,44(sp)
  80d810:	ddc00a17 	ldw	r23,40(sp)
  80d814:	dd800917 	ldw	r22,36(sp)
  80d818:	dd400817 	ldw	r21,32(sp)
  80d81c:	dd000717 	ldw	r20,28(sp)
  80d820:	dcc00617 	ldw	r19,24(sp)
  80d824:	dc800517 	ldw	r18,20(sp)
  80d828:	dc400417 	ldw	r17,16(sp)
  80d82c:	dc000317 	ldw	r16,12(sp)
  80d830:	dec00d04 	addi	sp,sp,52
  80d834:	f800283a 	ret
  80d838:	013fffd4 	movui	r4,65535
  80d83c:	2807883a 	mov	r3,r5
  80d840:	21c0592e 	bgeu	r4,r7,80d9a8 <__umoddi3+0x2d0>
  80d844:	01004034 	movhi	r4,256
  80d848:	39010336 	bltu	r7,r4,80dc58 <__umoddi3+0x580>
  80d84c:	3808d63a 	srli	r4,r7,24
  80d850:	02000604 	movi	r8,24
  80d854:	01402074 	movhi	r5,129
  80d858:	214b883a 	add	r5,r4,r5
  80d85c:	2d095b03 	ldbu	r20,9580(r5)
  80d860:	01000804 	movi	r4,32
  80d864:	a229883a 	add	r20,r20,r8
  80d868:	252bc83a 	sub	r21,r4,r20
  80d86c:	2500531e 	bne	r4,r20,80d9bc <__umoddi3+0x2e4>
  80d870:	3c400136 	bltu	r7,r17,80d878 <__umoddi3+0x1a0>
  80d874:	81bfe436 	bltu	r16,r6,80d808 <__umoddi3+0x130>
  80d878:	8185c83a 	sub	r2,r16,r6
  80d87c:	89cfc83a 	sub	r7,r17,r7
  80d880:	8087803a 	cmpltu	r3,r16,r2
  80d884:	38c7c83a 	sub	r3,r7,r3
  80d888:	003fdf06 	br	80d808 <__umoddi3+0x130>
  80d88c:	3000041e 	bne	r6,zero,80d8a0 <__umoddi3+0x1c8>
  80d890:	000b883a 	mov	r5,zero
  80d894:	01000044 	movi	r4,1
  80d898:	08030f00 	call	8030f0 <__udivsi3>
  80d89c:	1029883a 	mov	r20,r2
  80d8a0:	00bfffd4 	movui	r2,65535
  80d8a4:	1500362e 	bgeu	r2,r20,80d980 <__umoddi3+0x2a8>
  80d8a8:	00804034 	movhi	r2,256
  80d8ac:	a080ed36 	bltu	r20,r2,80dc64 <__umoddi3+0x58c>
  80d8b0:	a006d63a 	srli	r3,r20,24
  80d8b4:	04800604 	movi	r18,24
  80d8b8:	00802074 	movhi	r2,129
  80d8bc:	1885883a 	add	r2,r3,r2
  80d8c0:	15895b03 	ldbu	r22,9580(r2)
  80d8c4:	00800804 	movi	r2,32
  80d8c8:	b4ad883a 	add	r22,r22,r18
  80d8cc:	15a5c83a 	sub	r18,r2,r22
  80d8d0:	1580a51e 	bne	r2,r22,80db68 <__umoddi3+0x490>
  80d8d4:	a02ed43a 	srli	r23,r20,16
  80d8d8:	8d23c83a 	sub	r17,r17,r20
  80d8dc:	a57fffcc 	andi	r21,r20,65535
  80d8e0:	8809883a 	mov	r4,r17
  80d8e4:	b80b883a 	mov	r5,r23
  80d8e8:	08031540 	call	803154 <__umodsi3>
  80d8ec:	8809883a 	mov	r4,r17
  80d8f0:	b80b883a 	mov	r5,r23
  80d8f4:	1023883a 	mov	r17,r2
  80d8f8:	08030f00 	call	8030f0 <__udivsi3>
  80d8fc:	1009883a 	mov	r4,r2
  80d900:	a80b883a 	mov	r5,r21
  80d904:	08031b00 	call	8031b0 <__mulsi3>
  80d908:	8822943a 	slli	r17,r17,16
  80d90c:	9808d43a 	srli	r4,r19,16
  80d910:	8908b03a 	or	r4,r17,r4
  80d914:	2080032e 	bgeu	r4,r2,80d924 <__umoddi3+0x24c>
  80d918:	2509883a 	add	r4,r4,r20
  80d91c:	25000136 	bltu	r4,r20,80d924 <__umoddi3+0x24c>
  80d920:	2080dc36 	bltu	r4,r2,80dc94 <__umoddi3+0x5bc>
  80d924:	20a1c83a 	sub	r16,r4,r2
  80d928:	b80b883a 	mov	r5,r23
  80d92c:	8009883a 	mov	r4,r16
  80d930:	08031540 	call	803154 <__umodsi3>
  80d934:	b80b883a 	mov	r5,r23
  80d938:	8009883a 	mov	r4,r16
  80d93c:	1023883a 	mov	r17,r2
  80d940:	8822943a 	slli	r17,r17,16
  80d944:	08030f00 	call	8030f0 <__udivsi3>
  80d948:	a80b883a 	mov	r5,r21
  80d94c:	1009883a 	mov	r4,r2
  80d950:	08031b00 	call	8031b0 <__mulsi3>
  80d954:	9cffffcc 	andi	r19,r19,65535
  80d958:	8cc6b03a 	or	r3,r17,r19
  80d95c:	1880042e 	bgeu	r3,r2,80d970 <__umoddi3+0x298>
  80d960:	1d07883a 	add	r3,r3,r20
  80d964:	1d000236 	bltu	r3,r20,80d970 <__umoddi3+0x298>
  80d968:	1880012e 	bgeu	r3,r2,80d970 <__umoddi3+0x298>
  80d96c:	1d07883a 	add	r3,r3,r20
  80d970:	1885c83a 	sub	r2,r3,r2
  80d974:	1484d83a 	srl	r2,r2,r18
  80d978:	0007883a 	mov	r3,zero
  80d97c:	003fa206 	br	80d808 <__umoddi3+0x130>
  80d980:	a0804030 	cmpltui	r2,r20,256
  80d984:	1000ba1e 	bne	r2,zero,80dc70 <__umoddi3+0x598>
  80d988:	a006d23a 	srli	r3,r20,8
  80d98c:	04800204 	movi	r18,8
  80d990:	003fc906 	br	80d8b8 <__umoddi3+0x1e0>
  80d994:	30804030 	cmpltui	r2,r6,256
  80d998:	1000ad1e 	bne	r2,zero,80dc50 <__umoddi3+0x578>
  80d99c:	3006d23a 	srli	r3,r6,8
  80d9a0:	04800204 	movi	r18,8
  80d9a4:	003f6506 	br	80d73c <__umoddi3+0x64>
  80d9a8:	39004030 	cmpltui	r4,r7,256
  80d9ac:	2000b21e 	bne	r4,zero,80dc78 <__umoddi3+0x5a0>
  80d9b0:	3808d23a 	srli	r4,r7,8
  80d9b4:	02000204 	movi	r8,8
  80d9b8:	003fa606 	br	80d854 <__umoddi3+0x17c>
  80d9bc:	3d4e983a 	sll	r7,r7,r21
  80d9c0:	3508d83a 	srl	r4,r6,r20
  80d9c4:	8d2cd83a 	srl	r22,r17,r20
  80d9c8:	8504d83a 	srl	r2,r16,r20
  80d9cc:	21e4b03a 	or	r18,r4,r7
  80d9d0:	8d62983a 	sll	r17,r17,r21
  80d9d4:	9026d43a 	srli	r19,r18,16
  80d9d8:	354c983a 	sll	r6,r6,r21
  80d9dc:	1444b03a 	or	r2,r2,r17
  80d9e0:	b009883a 	mov	r4,r22
  80d9e4:	980b883a 	mov	r5,r19
  80d9e8:	d9800115 	stw	r6,4(sp)
  80d9ec:	d8800015 	stw	r2,0(sp)
  80d9f0:	08031540 	call	803154 <__umodsi3>
  80d9f4:	980b883a 	mov	r5,r19
  80d9f8:	b009883a 	mov	r4,r22
  80d9fc:	102f883a 	mov	r23,r2
  80da00:	947fffcc 	andi	r17,r18,65535
  80da04:	08030f00 	call	8030f0 <__udivsi3>
  80da08:	8809883a 	mov	r4,r17
  80da0c:	100b883a 	mov	r5,r2
  80da10:	1039883a 	mov	fp,r2
  80da14:	08031b00 	call	8031b0 <__mulsi3>
  80da18:	d8c00017 	ldw	r3,0(sp)
  80da1c:	b82e943a 	slli	r23,r23,16
  80da20:	8560983a 	sll	r16,r16,r21
  80da24:	1808d43a 	srli	r4,r3,16
  80da28:	b908b03a 	or	r4,r23,r4
  80da2c:	2080062e 	bgeu	r4,r2,80da48 <__umoddi3+0x370>
  80da30:	2489883a 	add	r4,r4,r18
  80da34:	e17fffc4 	addi	r5,fp,-1
  80da38:	24809436 	bltu	r4,r18,80dc8c <__umoddi3+0x5b4>
  80da3c:	2080932e 	bgeu	r4,r2,80dc8c <__umoddi3+0x5b4>
  80da40:	e73fff84 	addi	fp,fp,-2
  80da44:	2489883a 	add	r4,r4,r18
  80da48:	20adc83a 	sub	r22,r4,r2
  80da4c:	980b883a 	mov	r5,r19
  80da50:	b009883a 	mov	r4,r22
  80da54:	08031540 	call	803154 <__umodsi3>
  80da58:	980b883a 	mov	r5,r19
  80da5c:	b009883a 	mov	r4,r22
  80da60:	102f883a 	mov	r23,r2
  80da64:	08030f00 	call	8030f0 <__udivsi3>
  80da68:	100b883a 	mov	r5,r2
  80da6c:	8809883a 	mov	r4,r17
  80da70:	d8800215 	stw	r2,8(sp)
  80da74:	08031b00 	call	8031b0 <__mulsi3>
  80da78:	d8c00017 	ldw	r3,0(sp)
  80da7c:	b82e943a 	slli	r23,r23,16
  80da80:	d9400217 	ldw	r5,8(sp)
  80da84:	1c7fffcc 	andi	r17,r3,65535
  80da88:	bc62b03a 	or	r17,r23,r17
  80da8c:	8880062e 	bgeu	r17,r2,80daa8 <__umoddi3+0x3d0>
  80da90:	8ca3883a 	add	r17,r17,r18
  80da94:	28ffffc4 	addi	r3,r5,-1
  80da98:	8c807a36 	bltu	r17,r18,80dc84 <__umoddi3+0x5ac>
  80da9c:	8880792e 	bgeu	r17,r2,80dc84 <__umoddi3+0x5ac>
  80daa0:	297fff84 	addi	r5,r5,-2
  80daa4:	8ca3883a 	add	r17,r17,r18
  80daa8:	e02c943a 	slli	r22,fp,16
  80daac:	d9c00117 	ldw	r7,4(sp)
  80dab0:	29bfffcc 	andi	r6,r5,65535
  80dab4:	b16cb03a 	or	r22,r22,r5
  80dab8:	38ffffcc 	andi	r3,r7,65535
  80dabc:	b02cd43a 	srli	r22,r22,16
  80dac0:	180b883a 	mov	r5,r3
  80dac4:	3009883a 	mov	r4,r6
  80dac8:	3838d43a 	srli	fp,r7,16
  80dacc:	182f883a 	mov	r23,r3
  80dad0:	d9800015 	stw	r6,0(sp)
  80dad4:	88a3c83a 	sub	r17,r17,r2
  80dad8:	08031b00 	call	8031b0 <__mulsi3>
  80dadc:	b80b883a 	mov	r5,r23
  80dae0:	b009883a 	mov	r4,r22
  80dae4:	102f883a 	mov	r23,r2
  80dae8:	08031b00 	call	8031b0 <__mulsi3>
  80daec:	e00b883a 	mov	r5,fp
  80daf0:	b009883a 	mov	r4,r22
  80daf4:	102d883a 	mov	r22,r2
  80daf8:	08031b00 	call	8031b0 <__mulsi3>
  80dafc:	d9800017 	ldw	r6,0(sp)
  80db00:	e00b883a 	mov	r5,fp
  80db04:	1039883a 	mov	fp,r2
  80db08:	3009883a 	mov	r4,r6
  80db0c:	08031b00 	call	8031b0 <__mulsi3>
  80db10:	b808d43a 	srli	r4,r23,16
  80db14:	1585883a 	add	r2,r2,r22
  80db18:	2089883a 	add	r4,r4,r2
  80db1c:	2580022e 	bgeu	r4,r22,80db28 <__umoddi3+0x450>
  80db20:	00800074 	movhi	r2,1
  80db24:	e0b9883a 	add	fp,fp,r2
  80db28:	2006d43a 	srli	r3,r4,16
  80db2c:	2008943a 	slli	r4,r4,16
  80db30:	bdffffcc 	andi	r23,r23,65535
  80db34:	1f07883a 	add	r3,r3,fp
  80db38:	25c9883a 	add	r4,r4,r23
  80db3c:	88c03a36 	bltu	r17,r3,80dc28 <__umoddi3+0x550>
  80db40:	88c03826 	beq	r17,r3,80dc24 <__umoddi3+0x54c>
  80db44:	8109c83a 	sub	r4,r16,r4
  80db48:	8121803a 	cmpltu	r16,r16,r4
  80db4c:	88c7c83a 	sub	r3,r17,r3
  80db50:	1c07c83a 	sub	r3,r3,r16
  80db54:	1d04983a 	sll	r2,r3,r20
  80db58:	2548d83a 	srl	r4,r4,r21
  80db5c:	1d46d83a 	srl	r3,r3,r21
  80db60:	1104b03a 	or	r2,r2,r4
  80db64:	003f2806 	br	80d808 <__umoddi3+0x130>
  80db68:	a4a8983a 	sll	r20,r20,r18
  80db6c:	8da6d83a 	srl	r19,r17,r22
  80db70:	8ca2983a 	sll	r17,r17,r18
  80db74:	a02ed43a 	srli	r23,r20,16
  80db78:	9809883a 	mov	r4,r19
  80db7c:	85acd83a 	srl	r22,r16,r22
  80db80:	b80b883a 	mov	r5,r23
  80db84:	08031540 	call	803154 <__umodsi3>
  80db88:	9809883a 	mov	r4,r19
  80db8c:	b80b883a 	mov	r5,r23
  80db90:	b46cb03a 	or	r22,r22,r17
  80db94:	a57fffcc 	andi	r21,r20,65535
  80db98:	1023883a 	mov	r17,r2
  80db9c:	08030f00 	call	8030f0 <__udivsi3>
  80dba0:	a809883a 	mov	r4,r21
  80dba4:	100b883a 	mov	r5,r2
  80dba8:	08031b00 	call	8031b0 <__mulsi3>
  80dbac:	8822943a 	slli	r17,r17,16
  80dbb0:	b008d43a 	srli	r4,r22,16
  80dbb4:	84a6983a 	sll	r19,r16,r18
  80dbb8:	8908b03a 	or	r4,r17,r4
  80dbbc:	2080042e 	bgeu	r4,r2,80dbd0 <__umoddi3+0x4f8>
  80dbc0:	2509883a 	add	r4,r4,r20
  80dbc4:	25000236 	bltu	r4,r20,80dbd0 <__umoddi3+0x4f8>
  80dbc8:	2080012e 	bgeu	r4,r2,80dbd0 <__umoddi3+0x4f8>
  80dbcc:	2509883a 	add	r4,r4,r20
  80dbd0:	20a1c83a 	sub	r16,r4,r2
  80dbd4:	8009883a 	mov	r4,r16
  80dbd8:	b80b883a 	mov	r5,r23
  80dbdc:	08031540 	call	803154 <__umodsi3>
  80dbe0:	8009883a 	mov	r4,r16
  80dbe4:	1021883a 	mov	r16,r2
  80dbe8:	b80b883a 	mov	r5,r23
  80dbec:	8020943a 	slli	r16,r16,16
  80dbf0:	08030f00 	call	8030f0 <__udivsi3>
  80dbf4:	100b883a 	mov	r5,r2
  80dbf8:	a809883a 	mov	r4,r21
  80dbfc:	b47fffcc 	andi	r17,r22,65535
  80dc00:	08031b00 	call	8031b0 <__mulsi3>
  80dc04:	8462b03a 	or	r17,r16,r17
  80dc08:	8880042e 	bgeu	r17,r2,80dc1c <__umoddi3+0x544>
  80dc0c:	8d23883a 	add	r17,r17,r20
  80dc10:	8d000236 	bltu	r17,r20,80dc1c <__umoddi3+0x544>
  80dc14:	8880012e 	bgeu	r17,r2,80dc1c <__umoddi3+0x544>
  80dc18:	8d23883a 	add	r17,r17,r20
  80dc1c:	88a3c83a 	sub	r17,r17,r2
  80dc20:	003f2f06 	br	80d8e0 <__umoddi3+0x208>
  80dc24:	813fc72e 	bgeu	r16,r4,80db44 <__umoddi3+0x46c>
  80dc28:	d8800117 	ldw	r2,4(sp)
  80dc2c:	20a7c83a 	sub	r19,r4,r2
  80dc30:	24c9803a 	cmpltu	r4,r4,r19
  80dc34:	2489883a 	add	r4,r4,r18
  80dc38:	1907c83a 	sub	r3,r3,r4
  80dc3c:	9809883a 	mov	r4,r19
  80dc40:	003fc006 	br	80db44 <__umoddi3+0x46c>
  80dc44:	3006d43a 	srli	r3,r6,16
  80dc48:	04800404 	movi	r18,16
  80dc4c:	003ebb06 	br	80d73c <__umoddi3+0x64>
  80dc50:	3007883a 	mov	r3,r6
  80dc54:	003eb906 	br	80d73c <__umoddi3+0x64>
  80dc58:	3808d43a 	srli	r4,r7,16
  80dc5c:	02000404 	movi	r8,16
  80dc60:	003efc06 	br	80d854 <__umoddi3+0x17c>
  80dc64:	a006d43a 	srli	r3,r20,16
  80dc68:	04800404 	movi	r18,16
  80dc6c:	003f1206 	br	80d8b8 <__umoddi3+0x1e0>
  80dc70:	a007883a 	mov	r3,r20
  80dc74:	003f1006 	br	80d8b8 <__umoddi3+0x1e0>
  80dc78:	3809883a 	mov	r4,r7
  80dc7c:	0011883a 	mov	r8,zero
  80dc80:	003ef406 	br	80d854 <__umoddi3+0x17c>
  80dc84:	180b883a 	mov	r5,r3
  80dc88:	003f8706 	br	80daa8 <__umoddi3+0x3d0>
  80dc8c:	2839883a 	mov	fp,r5
  80dc90:	003f6d06 	br	80da48 <__umoddi3+0x370>
  80dc94:	2509883a 	add	r4,r4,r20
  80dc98:	003f2206 	br	80d924 <__umoddi3+0x24c>

0080dc9c <__eqdf2>:
  80dc9c:	2810d53a 	srli	r8,r5,20
  80dca0:	3806d53a 	srli	r3,r7,20
  80dca4:	00800434 	movhi	r2,16
  80dca8:	4201ffcc 	andi	r8,r8,2047
  80dcac:	10bfffc4 	addi	r2,r2,-1
  80dcb0:	4241ffd8 	cmpnei	r9,r8,2047
  80dcb4:	2814d7fa 	srli	r10,r5,31
  80dcb8:	3816d7fa 	srli	r11,r7,31
  80dcbc:	288a703a 	and	r5,r5,r2
  80dcc0:	388e703a 	and	r7,r7,r2
  80dcc4:	1881ffcc 	andi	r2,r3,2047
  80dcc8:	48000626 	beq	r9,zero,80dce4 <__eqdf2+0x48>
  80dccc:	10c1ffe0 	cmpeqi	r3,r2,2047
  80dcd0:	1800021e 	bne	r3,zero,80dcdc <__eqdf2+0x40>
  80dcd4:	4080011e 	bne	r8,r2,80dcdc <__eqdf2+0x40>
  80dcd8:	29c00826 	beq	r5,r7,80dcfc <__eqdf2+0x60>
  80dcdc:	00800044 	movi	r2,1
  80dce0:	f800283a 	ret
  80dce4:	2906b03a 	or	r3,r5,r4
  80dce8:	183ffc1e 	bne	r3,zero,80dcdc <__eqdf2+0x40>
  80dcec:	1081ffd8 	cmpnei	r2,r2,2047
  80dcf0:	103ffa1e 	bne	r2,zero,80dcdc <__eqdf2+0x40>
  80dcf4:	398eb03a 	or	r7,r7,r6
  80dcf8:	383ff81e 	bne	r7,zero,80dcdc <__eqdf2+0x40>
  80dcfc:	21bff71e 	bne	r4,r6,80dcdc <__eqdf2+0x40>
  80dd00:	52c00426 	beq	r10,r11,80dd14 <__eqdf2+0x78>
  80dd04:	403ff51e 	bne	r8,zero,80dcdc <__eqdf2+0x40>
  80dd08:	290ab03a 	or	r5,r5,r4
  80dd0c:	2804c03a 	cmpne	r2,r5,zero
  80dd10:	f800283a 	ret
  80dd14:	0005883a 	mov	r2,zero
  80dd18:	f800283a 	ret

0080dd1c <__gedf2>:
  80dd1c:	2810d53a 	srli	r8,r5,20
  80dd20:	3812d53a 	srli	r9,r7,20
  80dd24:	00c00434 	movhi	r3,16
  80dd28:	4201ffcc 	andi	r8,r8,2047
  80dd2c:	18ffffc4 	addi	r3,r3,-1
  80dd30:	4281ffd8 	cmpnei	r10,r8,2047
  80dd34:	2816d7fa 	srli	r11,r5,31
  80dd38:	3804d7fa 	srli	r2,r7,31
  80dd3c:	28ca703a 	and	r5,r5,r3
  80dd40:	38ce703a 	and	r7,r7,r3
  80dd44:	48c1ffcc 	andi	r3,r9,2047
  80dd48:	50000a26 	beq	r10,zero,80dd74 <__gedf2+0x58>
  80dd4c:	1a41ffd8 	cmpnei	r9,r3,2047
  80dd50:	48000c26 	beq	r9,zero,80dd84 <__gedf2+0x68>
  80dd54:	4000171e 	bne	r8,zero,80ddb4 <__gedf2+0x98>
  80dd58:	2912b03a 	or	r9,r5,r4
  80dd5c:	1800121e 	bne	r3,zero,80dda8 <__gedf2+0x8c>
  80dd60:	3994b03a 	or	r10,r7,r6
  80dd64:	5000101e 	bne	r10,zero,80dda8 <__gedf2+0x8c>
  80dd68:	48000a1e 	bne	r9,zero,80dd94 <__gedf2+0x78>
  80dd6c:	0005883a 	mov	r2,zero
  80dd70:	f800283a 	ret
  80dd74:	2912b03a 	or	r9,r5,r4
  80dd78:	48001d1e 	bne	r9,zero,80ddf0 <__gedf2+0xd4>
  80dd7c:	1a41ffe0 	cmpeqi	r9,r3,2047
  80dd80:	48000c26 	beq	r9,zero,80ddb4 <__gedf2+0x98>
  80dd84:	3992b03a 	or	r9,r7,r6
  80dd88:	4800191e 	bne	r9,zero,80ddf0 <__gedf2+0xd4>
  80dd8c:	40000526 	beq	r8,zero,80dda4 <__gedf2+0x88>
  80dd90:	58800c26 	beq	r11,r2,80ddc4 <__gedf2+0xa8>
  80dd94:	00800044 	movi	r2,1
  80dd98:	58000526 	beq	r11,zero,80ddb0 <__gedf2+0x94>
  80dd9c:	00bfffc4 	movi	r2,-1
  80dda0:	f800283a 	ret
  80dda4:	2912b03a 	or	r9,r5,r4
  80dda8:	483ff91e 	bne	r9,zero,80dd90 <__gedf2+0x74>
  80ddac:	103ffb26 	beq	r2,zero,80dd9c <__gedf2+0x80>
  80ddb0:	f800283a 	ret
  80ddb4:	183ff61e 	bne	r3,zero,80dd90 <__gedf2+0x74>
  80ddb8:	3992b03a 	or	r9,r7,r6
  80ddbc:	483ff41e 	bne	r9,zero,80dd90 <__gedf2+0x74>
  80ddc0:	003ff406 	br	80dd94 <__gedf2+0x78>
  80ddc4:	1a000716 	blt	r3,r8,80dde4 <__gedf2+0xc8>
  80ddc8:	40fff816 	blt	r8,r3,80ddac <__gedf2+0x90>
  80ddcc:	397ff136 	bltu	r7,r5,80dd94 <__gedf2+0x78>
  80ddd0:	29c00926 	beq	r5,r7,80ddf8 <__gedf2+0xdc>
  80ddd4:	29ffe52e 	bgeu	r5,r7,80dd6c <__gedf2+0x50>
  80ddd8:	583ff026 	beq	r11,zero,80dd9c <__gedf2+0x80>
  80dddc:	5805883a 	mov	r2,r11
  80dde0:	f800283a 	ret
  80dde4:	103fed1e 	bne	r2,zero,80dd9c <__gedf2+0x80>
  80dde8:	00800044 	movi	r2,1
  80ddec:	f800283a 	ret
  80ddf0:	00bfff84 	movi	r2,-2
  80ddf4:	f800283a 	ret
  80ddf8:	313fe636 	bltu	r6,r4,80dd94 <__gedf2+0x78>
  80ddfc:	21bfdb2e 	bgeu	r4,r6,80dd6c <__gedf2+0x50>
  80de00:	003ff506 	br	80ddd8 <__gedf2+0xbc>

0080de04 <__ledf2>:
  80de04:	2810d53a 	srli	r8,r5,20
  80de08:	3812d53a 	srli	r9,r7,20
  80de0c:	00c00434 	movhi	r3,16
  80de10:	4201ffcc 	andi	r8,r8,2047
  80de14:	18ffffc4 	addi	r3,r3,-1
  80de18:	4281ffd8 	cmpnei	r10,r8,2047
  80de1c:	2816d7fa 	srli	r11,r5,31
  80de20:	3804d7fa 	srli	r2,r7,31
  80de24:	28ca703a 	and	r5,r5,r3
  80de28:	38ce703a 	and	r7,r7,r3
  80de2c:	48c1ffcc 	andi	r3,r9,2047
  80de30:	50000a26 	beq	r10,zero,80de5c <__ledf2+0x58>
  80de34:	1a41ffd8 	cmpnei	r9,r3,2047
  80de38:	48000c26 	beq	r9,zero,80de6c <__ledf2+0x68>
  80de3c:	4000191e 	bne	r8,zero,80dea4 <__ledf2+0xa0>
  80de40:	2912b03a 	or	r9,r5,r4
  80de44:	18000d1e 	bne	r3,zero,80de7c <__ledf2+0x78>
  80de48:	3994b03a 	or	r10,r7,r6
  80de4c:	50000b1e 	bne	r10,zero,80de7c <__ledf2+0x78>
  80de50:	48000c1e 	bne	r9,zero,80de84 <__ledf2+0x80>
  80de54:	0005883a 	mov	r2,zero
  80de58:	f800283a 	ret
  80de5c:	2912b03a 	or	r9,r5,r4
  80de60:	48000c1e 	bne	r9,zero,80de94 <__ledf2+0x90>
  80de64:	1a41ffe0 	cmpeqi	r9,r3,2047
  80de68:	48000e26 	beq	r9,zero,80dea4 <__ledf2+0xa0>
  80de6c:	3992b03a 	or	r9,r7,r6
  80de70:	4800081e 	bne	r9,zero,80de94 <__ledf2+0x90>
  80de74:	4000021e 	bne	r8,zero,80de80 <__ledf2+0x7c>
  80de78:	2912b03a 	or	r9,r5,r4
  80de7c:	48000726 	beq	r9,zero,80de9c <__ledf2+0x98>
  80de80:	58800c26 	beq	r11,r2,80deb4 <__ledf2+0xb0>
  80de84:	00800044 	movi	r2,1
  80de88:	58000526 	beq	r11,zero,80dea0 <__ledf2+0x9c>
  80de8c:	00bfffc4 	movi	r2,-1
  80de90:	f800283a 	ret
  80de94:	00800084 	movi	r2,2
  80de98:	f800283a 	ret
  80de9c:	103ffb26 	beq	r2,zero,80de8c <__ledf2+0x88>
  80dea0:	f800283a 	ret
  80dea4:	183ff61e 	bne	r3,zero,80de80 <__ledf2+0x7c>
  80dea8:	3992b03a 	or	r9,r7,r6
  80deac:	483ff41e 	bne	r9,zero,80de80 <__ledf2+0x7c>
  80deb0:	003ff406 	br	80de84 <__ledf2+0x80>
  80deb4:	1a00030e 	bge	r3,r8,80dec4 <__ledf2+0xc0>
  80deb8:	103ff41e 	bne	r2,zero,80de8c <__ledf2+0x88>
  80debc:	00800044 	movi	r2,1
  80dec0:	f800283a 	ret
  80dec4:	40fff516 	blt	r8,r3,80de9c <__ledf2+0x98>
  80dec8:	397fee36 	bltu	r7,r5,80de84 <__ledf2+0x80>
  80decc:	29c00426 	beq	r5,r7,80dee0 <__ledf2+0xdc>
  80ded0:	29ffe02e 	bgeu	r5,r7,80de54 <__ledf2+0x50>
  80ded4:	583fed26 	beq	r11,zero,80de8c <__ledf2+0x88>
  80ded8:	5805883a 	mov	r2,r11
  80dedc:	f800283a 	ret
  80dee0:	313fe836 	bltu	r6,r4,80de84 <__ledf2+0x80>
  80dee4:	21bfdb2e 	bgeu	r4,r6,80de54 <__ledf2+0x50>
  80dee8:	003ffa06 	br	80ded4 <__ledf2+0xd0>

0080deec <__subdf3>:
  80deec:	00800434 	movhi	r2,16
  80def0:	3810d53a 	srli	r8,r7,20
  80def4:	10bfffc4 	addi	r2,r2,-1
  80def8:	2806d53a 	srli	r3,r5,20
  80defc:	2892703a 	and	r9,r5,r2
  80df00:	3884703a 	and	r2,r7,r2
  80df04:	280ad7fa 	srli	r5,r5,31
  80df08:	481290fa 	slli	r9,r9,3
  80df0c:	2018d77a 	srli	r12,r4,29
  80df10:	100490fa 	slli	r2,r2,3
  80df14:	3016d77a 	srli	r11,r6,29
  80df18:	defffb04 	addi	sp,sp,-20
  80df1c:	4201ffcc 	andi	r8,r8,2047
  80df20:	dc800215 	stw	r18,8(sp)
  80df24:	dc400115 	stw	r17,4(sp)
  80df28:	1c81ffcc 	andi	r18,r3,2047
  80df2c:	dfc00415 	stw	ra,16(sp)
  80df30:	dcc00315 	stw	r19,12(sp)
  80df34:	dc000015 	stw	r16,0(sp)
  80df38:	4281ffd8 	cmpnei	r10,r8,2047
  80df3c:	2823883a 	mov	r17,r5
  80df40:	201c90fa 	slli	r14,r4,3
  80df44:	380ed7fa 	srli	r7,r7,31
  80df48:	301a90fa 	slli	r13,r6,3
  80df4c:	29403fcc 	andi	r5,r5,255
  80df50:	6252b03a 	or	r9,r12,r9
  80df54:	589eb03a 	or	r15,r11,r2
  80df58:	9207c83a 	sub	r3,r18,r8
  80df5c:	50006826 	beq	r10,zero,80e100 <__subdf3+0x214>
  80df60:	3ac0005c 	xori	r11,r7,1
  80df64:	2ac07326 	beq	r5,r11,80e134 <__subdf3+0x248>
  80df68:	00c0590e 	bge	zero,r3,80e0d0 <__subdf3+0x1e4>
  80df6c:	4000691e 	bne	r8,zero,80e114 <__subdf3+0x228>
  80df70:	7b44b03a 	or	r2,r15,r13
  80df74:	1000fb26 	beq	r2,zero,80e364 <__subdf3+0x478>
  80df78:	18bfffc4 	addi	r2,r3,-1
  80df7c:	10019126 	beq	r2,zero,80e5c4 <__subdf3+0x6d8>
  80df80:	18c1ffd8 	cmpnei	r3,r3,2047
  80df84:	1800c326 	beq	r3,zero,80e294 <__subdf3+0x3a8>
  80df88:	1007883a 	mov	r3,r2
  80df8c:	18800e48 	cmpgei	r2,r3,57
  80df90:	1000651e 	bne	r2,zero,80e128 <__subdf3+0x23c>
  80df94:	18800808 	cmpgei	r2,r3,32
  80df98:	1001331e 	bne	r2,zero,80e468 <__subdf3+0x57c>
  80df9c:	00800804 	movi	r2,32
  80dfa0:	10c5c83a 	sub	r2,r2,r3
  80dfa4:	78a0983a 	sll	r16,r15,r2
  80dfa8:	68c8d83a 	srl	r4,r13,r3
  80dfac:	689a983a 	sll	r13,r13,r2
  80dfb0:	78c4d83a 	srl	r2,r15,r3
  80dfb4:	8120b03a 	or	r16,r16,r4
  80dfb8:	681ac03a 	cmpne	r13,r13,zero
  80dfbc:	8360b03a 	or	r16,r16,r13
  80dfc0:	4893c83a 	sub	r9,r9,r2
  80dfc4:	7421c83a 	sub	r16,r14,r16
  80dfc8:	7409803a 	cmpltu	r4,r14,r16
  80dfcc:	4909c83a 	sub	r4,r9,r4
  80dfd0:	2080202c 	andhi	r2,r4,128
  80dfd4:	10009326 	beq	r2,zero,80e224 <__subdf3+0x338>
  80dfd8:	04c02034 	movhi	r19,128
  80dfdc:	9cffffc4 	addi	r19,r19,-1
  80dfe0:	24e6703a 	and	r19,r4,r19
  80dfe4:	9800b926 	beq	r19,zero,80e2cc <__subdf3+0x3e0>
  80dfe8:	9809883a 	mov	r4,r19
  80dfec:	0802fa80 	call	802fa8 <__clzsi2>
  80dff0:	10fffe04 	addi	r3,r2,-8
  80dff4:	01000804 	movi	r4,32
  80dff8:	20c9c83a 	sub	r4,r4,r3
  80dffc:	8108d83a 	srl	r4,r16,r4
  80e000:	98e6983a 	sll	r19,r19,r3
  80e004:	80e0983a 	sll	r16,r16,r3
  80e008:	24c8b03a 	or	r4,r4,r19
  80e00c:	1c80b816 	blt	r3,r18,80e2f0 <__subdf3+0x404>
  80e010:	1c87c83a 	sub	r3,r3,r18
  80e014:	19400044 	addi	r5,r3,1
  80e018:	28800808 	cmpgei	r2,r5,32
  80e01c:	1000751e 	bne	r2,zero,80e1f4 <__subdf3+0x308>
  80e020:	00800804 	movi	r2,32
  80e024:	1145c83a 	sub	r2,r2,r5
  80e028:	8146d83a 	srl	r3,r16,r5
  80e02c:	80a0983a 	sll	r16,r16,r2
  80e030:	2084983a 	sll	r2,r4,r2
  80e034:	2148d83a 	srl	r4,r4,r5
  80e038:	8020c03a 	cmpne	r16,r16,zero
  80e03c:	10c4b03a 	or	r2,r2,r3
  80e040:	1420b03a 	or	r16,r2,r16
  80e044:	0025883a 	mov	r18,zero
  80e048:	808001cc 	andi	r2,r16,7
  80e04c:	10000726 	beq	r2,zero,80e06c <__subdf3+0x180>
  80e050:	808003cc 	andi	r2,r16,15
  80e054:	10800120 	cmpeqi	r2,r2,4
  80e058:	1000041e 	bne	r2,zero,80e06c <__subdf3+0x180>
  80e05c:	80800104 	addi	r2,r16,4
  80e060:	1421803a 	cmpltu	r16,r2,r16
  80e064:	2409883a 	add	r4,r4,r16
  80e068:	1021883a 	mov	r16,r2
  80e06c:	2080202c 	andhi	r2,r4,128
  80e070:	10006e26 	beq	r2,zero,80e22c <__subdf3+0x340>
  80e074:	90c00044 	addi	r3,r18,1
  80e078:	1881ffe0 	cmpeqi	r2,r3,2047
  80e07c:	18c1ffcc 	andi	r3,r3,2047
  80e080:	1000801e 	bne	r2,zero,80e284 <__subdf3+0x398>
  80e084:	00bfe034 	movhi	r2,65408
  80e088:	10bfffc4 	addi	r2,r2,-1
  80e08c:	2088703a 	and	r4,r4,r2
  80e090:	2004977a 	slli	r2,r4,29
  80e094:	2008927a 	slli	r4,r4,9
  80e098:	8020d0fa 	srli	r16,r16,3
  80e09c:	2008d33a 	srli	r4,r4,12
  80e0a0:	1404b03a 	or	r2,r2,r16
  80e0a4:	1806953a 	slli	r3,r3,20
  80e0a8:	882297fa 	slli	r17,r17,31
  80e0ac:	1906b03a 	or	r3,r3,r4
  80e0b0:	1c46b03a 	or	r3,r3,r17
  80e0b4:	dfc00417 	ldw	ra,16(sp)
  80e0b8:	dcc00317 	ldw	r19,12(sp)
  80e0bc:	dc800217 	ldw	r18,8(sp)
  80e0c0:	dc400117 	ldw	r17,4(sp)
  80e0c4:	dc000017 	ldw	r16,0(sp)
  80e0c8:	dec00504 	addi	sp,sp,20
  80e0cc:	f800283a 	ret
  80e0d0:	18002c26 	beq	r3,zero,80e184 <__subdf3+0x298>
  80e0d4:	4487c83a 	sub	r3,r8,r18
  80e0d8:	5823883a 	mov	r17,r11
  80e0dc:	9000bb1e 	bne	r18,zero,80e3cc <__subdf3+0x4e0>
  80e0e0:	4b84b03a 	or	r2,r9,r14
  80e0e4:	10011726 	beq	r2,zero,80e544 <__subdf3+0x658>
  80e0e8:	18bfffc4 	addi	r2,r3,-1
  80e0ec:	10016326 	beq	r2,zero,80e67c <__subdf3+0x790>
  80e0f0:	18c1ffd8 	cmpnei	r3,r3,2047
  80e0f4:	18012c26 	beq	r3,zero,80e5a8 <__subdf3+0x6bc>
  80e0f8:	1007883a 	mov	r3,r2
  80e0fc:	0000b506 	br	80e3d4 <__subdf3+0x4e8>
  80e100:	7b44b03a 	or	r2,r15,r13
  80e104:	103f9626 	beq	r2,zero,80df60 <__subdf3+0x74>
  80e108:	3ac03fcc 	andi	r11,r7,255
  80e10c:	29c07d26 	beq	r5,r7,80e304 <__subdf3+0x418>
  80e110:	00ffef0e 	bge	zero,r3,80e0d0 <__subdf3+0x1e4>
  80e114:	9081ffd8 	cmpnei	r2,r18,2047
  80e118:	10005e26 	beq	r2,zero,80e294 <__subdf3+0x3a8>
  80e11c:	18800e48 	cmpgei	r2,r3,57
  80e120:	7bc02034 	orhi	r15,r15,128
  80e124:	103f9b26 	beq	r2,zero,80df94 <__subdf3+0xa8>
  80e128:	7b60b03a 	or	r16,r15,r13
  80e12c:	8020c03a 	cmpne	r16,r16,zero
  80e130:	003fa406 	br	80dfc4 <__subdf3+0xd8>
  80e134:	00c0730e 	bge	zero,r3,80e304 <__subdf3+0x418>
  80e138:	40002626 	beq	r8,zero,80e1d4 <__subdf3+0x2e8>
  80e13c:	9081ffd8 	cmpnei	r2,r18,2047
  80e140:	10005426 	beq	r2,zero,80e294 <__subdf3+0x3a8>
  80e144:	7bc02034 	orhi	r15,r15,128
  80e148:	18800e48 	cmpgei	r2,r3,57
  80e14c:	1000431e 	bne	r2,zero,80e25c <__subdf3+0x370>
  80e150:	18800808 	cmpgei	r2,r3,32
  80e154:	1000de26 	beq	r2,zero,80e4d0 <__subdf3+0x5e4>
  80e158:	1c3ff804 	addi	r16,r3,-32
  80e15c:	18800820 	cmpeqi	r2,r3,32
  80e160:	7c0ad83a 	srl	r5,r15,r16
  80e164:	1000041e 	bne	r2,zero,80e178 <__subdf3+0x28c>
  80e168:	00801004 	movi	r2,64
  80e16c:	10c5c83a 	sub	r2,r2,r3
  80e170:	7884983a 	sll	r2,r15,r2
  80e174:	689ab03a 	or	r13,r13,r2
  80e178:	6820c03a 	cmpne	r16,r13,zero
  80e17c:	8160b03a 	or	r16,r16,r5
  80e180:	00003806 	br	80e264 <__subdf3+0x378>
  80e184:	90800044 	addi	r2,r18,1
  80e188:	1081ff8c 	andi	r2,r2,2046
  80e18c:	1000a01e 	bne	r2,zero,80e410 <__subdf3+0x524>
  80e190:	4b8ab03a 	or	r5,r9,r14
  80e194:	7b44b03a 	or	r2,r15,r13
  80e198:	9000f11e 	bne	r18,zero,80e560 <__subdf3+0x674>
  80e19c:	28012e26 	beq	r5,zero,80e658 <__subdf3+0x76c>
  80e1a0:	10010e26 	beq	r2,zero,80e5dc <__subdf3+0x6f0>
  80e1a4:	7361c83a 	sub	r16,r14,r13
  80e1a8:	7405803a 	cmpltu	r2,r14,r16
  80e1ac:	4bc9c83a 	sub	r4,r9,r15
  80e1b0:	2089c83a 	sub	r4,r4,r2
  80e1b4:	2080202c 	andhi	r2,r4,128
  80e1b8:	10016d26 	beq	r2,zero,80e770 <__subdf3+0x884>
  80e1bc:	6ba1c83a 	sub	r16,r13,r14
  80e1c0:	7a49c83a 	sub	r4,r15,r9
  80e1c4:	6c1b803a 	cmpltu	r13,r13,r16
  80e1c8:	2349c83a 	sub	r4,r4,r13
  80e1cc:	5823883a 	mov	r17,r11
  80e1d0:	003f9d06 	br	80e048 <__subdf3+0x15c>
  80e1d4:	7b44b03a 	or	r2,r15,r13
  80e1d8:	10006226 	beq	r2,zero,80e364 <__subdf3+0x478>
  80e1dc:	18bfffc4 	addi	r2,r3,-1
  80e1e0:	1000e926 	beq	r2,zero,80e588 <__subdf3+0x69c>
  80e1e4:	18c1ffd8 	cmpnei	r3,r3,2047
  80e1e8:	18012a26 	beq	r3,zero,80e694 <__subdf3+0x7a8>
  80e1ec:	1007883a 	mov	r3,r2
  80e1f0:	003fd506 	br	80e148 <__subdf3+0x25c>
  80e1f4:	18fff844 	addi	r3,r3,-31
  80e1f8:	28800820 	cmpeqi	r2,r5,32
  80e1fc:	20c6d83a 	srl	r3,r4,r3
  80e200:	1000041e 	bne	r2,zero,80e214 <__subdf3+0x328>
  80e204:	00801004 	movi	r2,64
  80e208:	114bc83a 	sub	r5,r2,r5
  80e20c:	2148983a 	sll	r4,r4,r5
  80e210:	8120b03a 	or	r16,r16,r4
  80e214:	8020c03a 	cmpne	r16,r16,zero
  80e218:	80e0b03a 	or	r16,r16,r3
  80e21c:	0009883a 	mov	r4,zero
  80e220:	0025883a 	mov	r18,zero
  80e224:	808001cc 	andi	r2,r16,7
  80e228:	103f891e 	bne	r2,zero,80e050 <__subdf3+0x164>
  80e22c:	8020d0fa 	srli	r16,r16,3
  80e230:	2004977a 	slli	r2,r4,29
  80e234:	2012d0fa 	srli	r9,r4,3
  80e238:	9007883a 	mov	r3,r18
  80e23c:	8084b03a 	or	r2,r16,r2
  80e240:	1901ffe0 	cmpeqi	r4,r3,2047
  80e244:	2000191e 	bne	r4,zero,80e2ac <__subdf3+0x3c0>
  80e248:	01000434 	movhi	r4,16
  80e24c:	213fffc4 	addi	r4,r4,-1
  80e250:	4908703a 	and	r4,r9,r4
  80e254:	18c1ffcc 	andi	r3,r3,2047
  80e258:	003f9206 	br	80e0a4 <__subdf3+0x1b8>
  80e25c:	7b60b03a 	or	r16,r15,r13
  80e260:	8020c03a 	cmpne	r16,r16,zero
  80e264:	83a1883a 	add	r16,r16,r14
  80e268:	8389803a 	cmpltu	r4,r16,r14
  80e26c:	2249883a 	add	r4,r4,r9
  80e270:	2080202c 	andhi	r2,r4,128
  80e274:	103feb26 	beq	r2,zero,80e224 <__subdf3+0x338>
  80e278:	94800044 	addi	r18,r18,1
  80e27c:	9081ffe0 	cmpeqi	r2,r18,2047
  80e280:	10006f26 	beq	r2,zero,80e440 <__subdf3+0x554>
  80e284:	00c1ffc4 	movi	r3,2047
  80e288:	0009883a 	mov	r4,zero
  80e28c:	0005883a 	mov	r2,zero
  80e290:	003f8406 	br	80e0a4 <__subdf3+0x1b8>
  80e294:	4806977a 	slli	r3,r9,29
  80e298:	00880034 	movhi	r2,8192
  80e29c:	10bfffc4 	addi	r2,r2,-1
  80e2a0:	4812d0fa 	srli	r9,r9,3
  80e2a4:	2088703a 	and	r4,r4,r2
  80e2a8:	20c4b03a 	or	r2,r4,r3
  80e2ac:	4886b03a 	or	r3,r9,r2
  80e2b0:	18013726 	beq	r3,zero,80e790 <__subdf3+0x8a4>
  80e2b4:	00c00434 	movhi	r3,16
  80e2b8:	18ffffc4 	addi	r3,r3,-1
  80e2bc:	49000234 	orhi	r4,r9,8
  80e2c0:	20c8703a 	and	r4,r4,r3
  80e2c4:	00c1ffc4 	movi	r3,2047
  80e2c8:	003f7606 	br	80e0a4 <__subdf3+0x1b8>
  80e2cc:	8009883a 	mov	r4,r16
  80e2d0:	0802fa80 	call	802fa8 <__clzsi2>
  80e2d4:	10c00604 	addi	r3,r2,24
  80e2d8:	19000808 	cmpgei	r4,r3,32
  80e2dc:	203f4526 	beq	r4,zero,80dff4 <__subdf3+0x108>
  80e2e0:	113ffe04 	addi	r4,r2,-8
  80e2e4:	8108983a 	sll	r4,r16,r4
  80e2e8:	0021883a 	mov	r16,zero
  80e2ec:	1cbf480e 	bge	r3,r18,80e010 <__subdf3+0x124>
  80e2f0:	00bfe034 	movhi	r2,65408
  80e2f4:	10bfffc4 	addi	r2,r2,-1
  80e2f8:	90e5c83a 	sub	r18,r18,r3
  80e2fc:	2088703a 	and	r4,r4,r2
  80e300:	003f5106 	br	80e048 <__subdf3+0x15c>
  80e304:	18001e26 	beq	r3,zero,80e380 <__subdf3+0x494>
  80e308:	4487c83a 	sub	r3,r8,r18
  80e30c:	90006826 	beq	r18,zero,80e4b0 <__subdf3+0x5c4>
  80e310:	5000a526 	beq	r10,zero,80e5a8 <__subdf3+0x6bc>
  80e314:	4a402034 	orhi	r9,r9,128
  80e318:	18800e48 	cmpgei	r2,r3,57
  80e31c:	1000b61e 	bne	r2,zero,80e5f8 <__subdf3+0x70c>
  80e320:	18800808 	cmpgei	r2,r3,32
  80e324:	1001021e 	bne	r2,zero,80e730 <__subdf3+0x844>
  80e328:	00800804 	movi	r2,32
  80e32c:	10c5c83a 	sub	r2,r2,r3
  80e330:	48a0983a 	sll	r16,r9,r2
  80e334:	70c8d83a 	srl	r4,r14,r3
  80e338:	7084983a 	sll	r2,r14,r2
  80e33c:	48d2d83a 	srl	r9,r9,r3
  80e340:	8120b03a 	or	r16,r16,r4
  80e344:	1004c03a 	cmpne	r2,r2,zero
  80e348:	80a0b03a 	or	r16,r16,r2
  80e34c:	7a5f883a 	add	r15,r15,r9
  80e350:	8361883a 	add	r16,r16,r13
  80e354:	8349803a 	cmpltu	r4,r16,r13
  80e358:	23c9883a 	add	r4,r4,r15
  80e35c:	4025883a 	mov	r18,r8
  80e360:	003fc306 	br	80e270 <__subdf3+0x384>
  80e364:	480a977a 	slli	r5,r9,29
  80e368:	00880034 	movhi	r2,8192
  80e36c:	10bfffc4 	addi	r2,r2,-1
  80e370:	2088703a 	and	r4,r4,r2
  80e374:	4812d0fa 	srli	r9,r9,3
  80e378:	2144b03a 	or	r2,r4,r5
  80e37c:	003fb006 	br	80e240 <__subdf3+0x354>
  80e380:	90800044 	addi	r2,r18,1
  80e384:	1141ff8c 	andi	r5,r2,2046
  80e388:	28005c1e 	bne	r5,zero,80e4fc <__subdf3+0x610>
  80e38c:	4b84b03a 	or	r2,r9,r14
  80e390:	9000a71e 	bne	r18,zero,80e630 <__subdf3+0x744>
  80e394:	1000df26 	beq	r2,zero,80e714 <__subdf3+0x828>
  80e398:	7b44b03a 	or	r2,r15,r13
  80e39c:	10008f26 	beq	r2,zero,80e5dc <__subdf3+0x6f0>
  80e3a0:	7361883a 	add	r16,r14,r13
  80e3a4:	4bc9883a 	add	r4,r9,r15
  80e3a8:	839d803a 	cmpltu	r14,r16,r14
  80e3ac:	2389883a 	add	r4,r4,r14
  80e3b0:	2080202c 	andhi	r2,r4,128
  80e3b4:	103f9b26 	beq	r2,zero,80e224 <__subdf3+0x338>
  80e3b8:	00bfe034 	movhi	r2,65408
  80e3bc:	10bfffc4 	addi	r2,r2,-1
  80e3c0:	2088703a 	and	r4,r4,r2
  80e3c4:	04800044 	movi	r18,1
  80e3c8:	003f9606 	br	80e224 <__subdf3+0x338>
  80e3cc:	50007626 	beq	r10,zero,80e5a8 <__subdf3+0x6bc>
  80e3d0:	4a402034 	orhi	r9,r9,128
  80e3d4:	18800e48 	cmpgei	r2,r3,57
  80e3d8:	10002e1e 	bne	r2,zero,80e494 <__subdf3+0x5a8>
  80e3dc:	18800808 	cmpgei	r2,r3,32
  80e3e0:	1000881e 	bne	r2,zero,80e604 <__subdf3+0x718>
  80e3e4:	00800804 	movi	r2,32
  80e3e8:	10c5c83a 	sub	r2,r2,r3
  80e3ec:	48a0983a 	sll	r16,r9,r2
  80e3f0:	70c8d83a 	srl	r4,r14,r3
  80e3f4:	709c983a 	sll	r14,r14,r2
  80e3f8:	48d2d83a 	srl	r9,r9,r3
  80e3fc:	8120b03a 	or	r16,r16,r4
  80e400:	701cc03a 	cmpne	r14,r14,zero
  80e404:	83a0b03a 	or	r16,r16,r14
  80e408:	7a5fc83a 	sub	r15,r15,r9
  80e40c:	00002306 	br	80e49c <__subdf3+0x5b0>
  80e410:	7361c83a 	sub	r16,r14,r13
  80e414:	4be7c83a 	sub	r19,r9,r15
  80e418:	7409803a 	cmpltu	r4,r14,r16
  80e41c:	9927c83a 	sub	r19,r19,r4
  80e420:	9880202c 	andhi	r2,r19,128
  80e424:	1000411e 	bne	r2,zero,80e52c <__subdf3+0x640>
  80e428:	84c4b03a 	or	r2,r16,r19
  80e42c:	103eed1e 	bne	r2,zero,80dfe4 <__subdf3+0xf8>
  80e430:	0013883a 	mov	r9,zero
  80e434:	0023883a 	mov	r17,zero
  80e438:	003f8306 	br	80e248 <__subdf3+0x35c>
  80e43c:	04800084 	movi	r18,2
  80e440:	00bfe034 	movhi	r2,65408
  80e444:	10bfffc4 	addi	r2,r2,-1
  80e448:	8006d07a 	srli	r3,r16,1
  80e44c:	2088703a 	and	r4,r4,r2
  80e450:	200497fa 	slli	r2,r4,31
  80e454:	8400004c 	andi	r16,r16,1
  80e458:	1c20b03a 	or	r16,r3,r16
  80e45c:	2008d07a 	srli	r4,r4,1
  80e460:	1420b03a 	or	r16,r2,r16
  80e464:	003ef806 	br	80e048 <__subdf3+0x15c>
  80e468:	1c3ff804 	addi	r16,r3,-32
  80e46c:	18800820 	cmpeqi	r2,r3,32
  80e470:	7c0ad83a 	srl	r5,r15,r16
  80e474:	1000041e 	bne	r2,zero,80e488 <__subdf3+0x59c>
  80e478:	00801004 	movi	r2,64
  80e47c:	10c5c83a 	sub	r2,r2,r3
  80e480:	7884983a 	sll	r2,r15,r2
  80e484:	689ab03a 	or	r13,r13,r2
  80e488:	6820c03a 	cmpne	r16,r13,zero
  80e48c:	8160b03a 	or	r16,r16,r5
  80e490:	003ecc06 	br	80dfc4 <__subdf3+0xd8>
  80e494:	4b92b03a 	or	r9,r9,r14
  80e498:	4820c03a 	cmpne	r16,r9,zero
  80e49c:	6c21c83a 	sub	r16,r13,r16
  80e4a0:	6c09803a 	cmpltu	r4,r13,r16
  80e4a4:	7909c83a 	sub	r4,r15,r4
  80e4a8:	4025883a 	mov	r18,r8
  80e4ac:	003ec806 	br	80dfd0 <__subdf3+0xe4>
  80e4b0:	4b84b03a 	or	r2,r9,r14
  80e4b4:	10007e26 	beq	r2,zero,80e6b0 <__subdf3+0x7c4>
  80e4b8:	18bfffc4 	addi	r2,r3,-1
  80e4bc:	1000a726 	beq	r2,zero,80e75c <__subdf3+0x870>
  80e4c0:	18c1ffd8 	cmpnei	r3,r3,2047
  80e4c4:	18003826 	beq	r3,zero,80e5a8 <__subdf3+0x6bc>
  80e4c8:	1007883a 	mov	r3,r2
  80e4cc:	003f9206 	br	80e318 <__subdf3+0x42c>
  80e4d0:	00800804 	movi	r2,32
  80e4d4:	10c5c83a 	sub	r2,r2,r3
  80e4d8:	78a0983a 	sll	r16,r15,r2
  80e4dc:	68c8d83a 	srl	r4,r13,r3
  80e4e0:	689a983a 	sll	r13,r13,r2
  80e4e4:	78c4d83a 	srl	r2,r15,r3
  80e4e8:	8120b03a 	or	r16,r16,r4
  80e4ec:	681ac03a 	cmpne	r13,r13,zero
  80e4f0:	8360b03a 	or	r16,r16,r13
  80e4f4:	4893883a 	add	r9,r9,r2
  80e4f8:	003f5a06 	br	80e264 <__subdf3+0x378>
  80e4fc:	10c1ffe0 	cmpeqi	r3,r2,2047
  80e500:	183f601e 	bne	r3,zero,80e284 <__subdf3+0x398>
  80e504:	735b883a 	add	r13,r14,r13
  80e508:	6b9d803a 	cmpltu	r14,r13,r14
  80e50c:	4bc9883a 	add	r4,r9,r15
  80e510:	2389883a 	add	r4,r4,r14
  80e514:	202097fa 	slli	r16,r4,31
  80e518:	681ad07a 	srli	r13,r13,1
  80e51c:	2008d07a 	srli	r4,r4,1
  80e520:	1025883a 	mov	r18,r2
  80e524:	8360b03a 	or	r16,r16,r13
  80e528:	003f3e06 	br	80e224 <__subdf3+0x338>
  80e52c:	6ba1c83a 	sub	r16,r13,r14
  80e530:	7a49c83a 	sub	r4,r15,r9
  80e534:	6c1b803a 	cmpltu	r13,r13,r16
  80e538:	2367c83a 	sub	r19,r4,r13
  80e53c:	5823883a 	mov	r17,r11
  80e540:	003ea806 	br	80dfe4 <__subdf3+0xf8>
  80e544:	7808977a 	slli	r4,r15,29
  80e548:	00880034 	movhi	r2,8192
  80e54c:	10bfffc4 	addi	r2,r2,-1
  80e550:	308c703a 	and	r6,r6,r2
  80e554:	7812d0fa 	srli	r9,r15,3
  80e558:	3104b03a 	or	r2,r6,r4
  80e55c:	003f3806 	br	80e240 <__subdf3+0x354>
  80e560:	28005a1e 	bne	r5,zero,80e6cc <__subdf3+0x7e0>
  80e564:	10008526 	beq	r2,zero,80e77c <__subdf3+0x890>
  80e568:	7806977a 	slli	r3,r15,29
  80e56c:	00880034 	movhi	r2,8192
  80e570:	10bfffc4 	addi	r2,r2,-1
  80e574:	3084703a 	and	r2,r6,r2
  80e578:	7812d0fa 	srli	r9,r15,3
  80e57c:	10c4b03a 	or	r2,r2,r3
  80e580:	5823883a 	mov	r17,r11
  80e584:	003f4906 	br	80e2ac <__subdf3+0x3c0>
  80e588:	7361883a 	add	r16,r14,r13
  80e58c:	4bc9883a 	add	r4,r9,r15
  80e590:	839d803a 	cmpltu	r14,r16,r14
  80e594:	2389883a 	add	r4,r4,r14
  80e598:	2080202c 	andhi	r2,r4,128
  80e59c:	103fa71e 	bne	r2,zero,80e43c <__subdf3+0x550>
  80e5a0:	04800044 	movi	r18,1
  80e5a4:	003f1f06 	br	80e224 <__subdf3+0x338>
  80e5a8:	7806977a 	slli	r3,r15,29
  80e5ac:	00880034 	movhi	r2,8192
  80e5b0:	10bfffc4 	addi	r2,r2,-1
  80e5b4:	3084703a 	and	r2,r6,r2
  80e5b8:	7812d0fa 	srli	r9,r15,3
  80e5bc:	10c4b03a 	or	r2,r2,r3
  80e5c0:	003f3a06 	br	80e2ac <__subdf3+0x3c0>
  80e5c4:	7361c83a 	sub	r16,r14,r13
  80e5c8:	4bc9c83a 	sub	r4,r9,r15
  80e5cc:	741d803a 	cmpltu	r14,r14,r16
  80e5d0:	2389c83a 	sub	r4,r4,r14
  80e5d4:	04800044 	movi	r18,1
  80e5d8:	003e7d06 	br	80dfd0 <__subdf3+0xe4>
  80e5dc:	480a977a 	slli	r5,r9,29
  80e5e0:	00880034 	movhi	r2,8192
  80e5e4:	10bfffc4 	addi	r2,r2,-1
  80e5e8:	2084703a 	and	r2,r4,r2
  80e5ec:	4812d0fa 	srli	r9,r9,3
  80e5f0:	1144b03a 	or	r2,r2,r5
  80e5f4:	003f1406 	br	80e248 <__subdf3+0x35c>
  80e5f8:	4b92b03a 	or	r9,r9,r14
  80e5fc:	4820c03a 	cmpne	r16,r9,zero
  80e600:	003f5306 	br	80e350 <__subdf3+0x464>
  80e604:	1c3ff804 	addi	r16,r3,-32
  80e608:	19000820 	cmpeqi	r4,r3,32
  80e60c:	4c04d83a 	srl	r2,r9,r16
  80e610:	2000041e 	bne	r4,zero,80e624 <__subdf3+0x738>
  80e614:	01001004 	movi	r4,64
  80e618:	20c7c83a 	sub	r3,r4,r3
  80e61c:	48d2983a 	sll	r9,r9,r3
  80e620:	725cb03a 	or	r14,r14,r9
  80e624:	7020c03a 	cmpne	r16,r14,zero
  80e628:	80a0b03a 	or	r16,r16,r2
  80e62c:	003f9b06 	br	80e49c <__subdf3+0x5b0>
  80e630:	103fdd26 	beq	r2,zero,80e5a8 <__subdf3+0x6bc>
  80e634:	7b5ab03a 	or	r13,r15,r13
  80e638:	480a977a 	slli	r5,r9,29
  80e63c:	4812d0fa 	srli	r9,r9,3
  80e640:	6800251e 	bne	r13,zero,80e6d8 <__subdf3+0x7ec>
  80e644:	00880034 	movhi	r2,8192
  80e648:	10bfffc4 	addi	r2,r2,-1
  80e64c:	2084703a 	and	r2,r4,r2
  80e650:	1144b03a 	or	r2,r2,r5
  80e654:	003f1506 	br	80e2ac <__subdf3+0x3c0>
  80e658:	103f7526 	beq	r2,zero,80e430 <__subdf3+0x544>
  80e65c:	7808977a 	slli	r4,r15,29
  80e660:	00880034 	movhi	r2,8192
  80e664:	10bfffc4 	addi	r2,r2,-1
  80e668:	3084703a 	and	r2,r6,r2
  80e66c:	7812d0fa 	srli	r9,r15,3
  80e670:	1104b03a 	or	r2,r2,r4
  80e674:	5823883a 	mov	r17,r11
  80e678:	003ef306 	br	80e248 <__subdf3+0x35c>
  80e67c:	6ba1c83a 	sub	r16,r13,r14
  80e680:	7a49c83a 	sub	r4,r15,r9
  80e684:	6c1b803a 	cmpltu	r13,r13,r16
  80e688:	2349c83a 	sub	r4,r4,r13
  80e68c:	04800044 	movi	r18,1
  80e690:	003e4f06 	br	80dfd0 <__subdf3+0xe4>
  80e694:	4806977a 	slli	r3,r9,29
  80e698:	00880034 	movhi	r2,8192
  80e69c:	10bfffc4 	addi	r2,r2,-1
  80e6a0:	2084703a 	and	r2,r4,r2
  80e6a4:	4812d0fa 	srli	r9,r9,3
  80e6a8:	10c4b03a 	or	r2,r2,r3
  80e6ac:	003eff06 	br	80e2ac <__subdf3+0x3c0>
  80e6b0:	7808977a 	slli	r4,r15,29
  80e6b4:	00880034 	movhi	r2,8192
  80e6b8:	10bfffc4 	addi	r2,r2,-1
  80e6bc:	3084703a 	and	r2,r6,r2
  80e6c0:	7812d0fa 	srli	r9,r15,3
  80e6c4:	1104b03a 	or	r2,r2,r4
  80e6c8:	003edd06 	br	80e240 <__subdf3+0x354>
  80e6cc:	480a977a 	slli	r5,r9,29
  80e6d0:	4812d0fa 	srli	r9,r9,3
  80e6d4:	103fdb26 	beq	r2,zero,80e644 <__subdf3+0x758>
  80e6d8:	00c80034 	movhi	r3,8192
  80e6dc:	18ffffc4 	addi	r3,r3,-1
  80e6e0:	20c4703a 	and	r2,r4,r3
  80e6e4:	4900022c 	andhi	r4,r9,8
  80e6e8:	1144b03a 	or	r2,r2,r5
  80e6ec:	203eef26 	beq	r4,zero,80e2ac <__subdf3+0x3c0>
  80e6f0:	7808d0fa 	srli	r4,r15,3
  80e6f4:	2140022c 	andhi	r5,r4,8
  80e6f8:	283eec1e 	bne	r5,zero,80e2ac <__subdf3+0x3c0>
  80e6fc:	7804977a 	slli	r2,r15,29
  80e700:	30cc703a 	and	r6,r6,r3
  80e704:	5823883a 	mov	r17,r11
  80e708:	3084b03a 	or	r2,r6,r2
  80e70c:	2013883a 	mov	r9,r4
  80e710:	003ee606 	br	80e2ac <__subdf3+0x3c0>
  80e714:	7808977a 	slli	r4,r15,29
  80e718:	00880034 	movhi	r2,8192
  80e71c:	10bfffc4 	addi	r2,r2,-1
  80e720:	3084703a 	and	r2,r6,r2
  80e724:	7812d0fa 	srli	r9,r15,3
  80e728:	1104b03a 	or	r2,r2,r4
  80e72c:	003ec606 	br	80e248 <__subdf3+0x35c>
  80e730:	18bff804 	addi	r2,r3,-32
  80e734:	19000820 	cmpeqi	r4,r3,32
  80e738:	4884d83a 	srl	r2,r9,r2
  80e73c:	2000041e 	bne	r4,zero,80e750 <__subdf3+0x864>
  80e740:	01001004 	movi	r4,64
  80e744:	20c7c83a 	sub	r3,r4,r3
  80e748:	48d2983a 	sll	r9,r9,r3
  80e74c:	725cb03a 	or	r14,r14,r9
  80e750:	7020c03a 	cmpne	r16,r14,zero
  80e754:	80a0b03a 	or	r16,r16,r2
  80e758:	003efd06 	br	80e350 <__subdf3+0x464>
  80e75c:	7361883a 	add	r16,r14,r13
  80e760:	4bc9883a 	add	r4,r9,r15
  80e764:	835b803a 	cmpltu	r13,r16,r13
  80e768:	2349883a 	add	r4,r4,r13
  80e76c:	003f8a06 	br	80e598 <__subdf3+0x6ac>
  80e770:	8104b03a 	or	r2,r16,r4
  80e774:	103f2e26 	beq	r2,zero,80e430 <__subdf3+0x544>
  80e778:	003eaa06 	br	80e224 <__subdf3+0x338>
  80e77c:	02400434 	movhi	r9,16
  80e780:	0023883a 	mov	r17,zero
  80e784:	00bfffc4 	movi	r2,-1
  80e788:	4a7fffc4 	addi	r9,r9,-1
  80e78c:	003ec906 	br	80e2b4 <__subdf3+0x3c8>
  80e790:	0005883a 	mov	r2,zero
  80e794:	00c1ffc4 	movi	r3,2047
  80e798:	0009883a 	mov	r4,zero
  80e79c:	003e4106 	br	80e0a4 <__subdf3+0x1b8>

0080e7a0 <__unorddf2>:
  80e7a0:	2806d53a 	srli	r3,r5,20
  80e7a4:	3810d53a 	srli	r8,r7,20
  80e7a8:	02400434 	movhi	r9,16
  80e7ac:	18c1ffcc 	andi	r3,r3,2047
  80e7b0:	4a7fffc4 	addi	r9,r9,-1
  80e7b4:	18c1ffd8 	cmpnei	r3,r3,2047
  80e7b8:	2a4a703a 	and	r5,r5,r9
  80e7bc:	3a4e703a 	and	r7,r7,r9
  80e7c0:	4201ffcc 	andi	r8,r8,2047
  80e7c4:	18000426 	beq	r3,zero,80e7d8 <__unorddf2+0x38>
  80e7c8:	4201ffd8 	cmpnei	r8,r8,2047
  80e7cc:	40000626 	beq	r8,zero,80e7e8 <__unorddf2+0x48>
  80e7d0:	0005883a 	mov	r2,zero
  80e7d4:	f800283a 	ret
  80e7d8:	290ab03a 	or	r5,r5,r4
  80e7dc:	283ffa26 	beq	r5,zero,80e7c8 <__unorddf2+0x28>
  80e7e0:	00800044 	movi	r2,1
  80e7e4:	f800283a 	ret
  80e7e8:	398eb03a 	or	r7,r7,r6
  80e7ec:	3804c03a 	cmpne	r2,r7,zero
  80e7f0:	f800283a 	ret

0080e7f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e7f4:	defffe04 	addi	sp,sp,-8
  80e7f8:	dfc00115 	stw	ra,4(sp)
  80e7fc:	df000015 	stw	fp,0(sp)
  80e800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e804:	d0a00917 	ldw	r2,-32732(gp)
  80e808:	10000326 	beq	r2,zero,80e818 <alt_get_errno+0x24>
  80e80c:	d0a00917 	ldw	r2,-32732(gp)
  80e810:	103ee83a 	callr	r2
  80e814:	00000106 	br	80e81c <alt_get_errno+0x28>
  80e818:	d0a74604 	addi	r2,gp,-25320
}
  80e81c:	e037883a 	mov	sp,fp
  80e820:	dfc00117 	ldw	ra,4(sp)
  80e824:	df000017 	ldw	fp,0(sp)
  80e828:	dec00204 	addi	sp,sp,8
  80e82c:	f800283a 	ret

0080e830 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80e830:	defffb04 	addi	sp,sp,-20
  80e834:	dfc00415 	stw	ra,16(sp)
  80e838:	df000315 	stw	fp,12(sp)
  80e83c:	df000304 	addi	fp,sp,12
  80e840:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80e844:	e0bffd17 	ldw	r2,-12(fp)
  80e848:	10000916 	blt	r2,zero,80e870 <close+0x40>
  80e84c:	e0fffd17 	ldw	r3,-12(fp)
  80e850:	1805883a 	mov	r2,r3
  80e854:	1085883a 	add	r2,r2,r2
  80e858:	10c5883a 	add	r2,r2,r3
  80e85c:	100490ba 	slli	r2,r2,2
  80e860:	00c02074 	movhi	r3,129
  80e864:	18cd6204 	addi	r3,r3,13704
  80e868:	10c5883a 	add	r2,r2,r3
  80e86c:	00000106 	br	80e874 <close+0x44>
  80e870:	0005883a 	mov	r2,zero
  80e874:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
  80e878:	e0bfff17 	ldw	r2,-4(fp)
  80e87c:	10001926 	beq	r2,zero,80e8e4 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80e880:	e0bfff17 	ldw	r2,-4(fp)
  80e884:	10800017 	ldw	r2,0(r2)
  80e888:	10800417 	ldw	r2,16(r2)
  80e88c:	10000626 	beq	r2,zero,80e8a8 <close+0x78>
  80e890:	e0bfff17 	ldw	r2,-4(fp)
  80e894:	10800017 	ldw	r2,0(r2)
  80e898:	10800417 	ldw	r2,16(r2)
  80e89c:	e13fff17 	ldw	r4,-4(fp)
  80e8a0:	103ee83a 	callr	r2
  80e8a4:	00000106 	br	80e8ac <close+0x7c>
  80e8a8:	0005883a 	mov	r2,zero
  80e8ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80e8b0:	e13ffd17 	ldw	r4,-12(fp)
  80e8b4:	080f3840 	call	80f384 <alt_release_fd>
    if (rval < 0)
  80e8b8:	e0bffe17 	ldw	r2,-8(fp)
  80e8bc:	1000070e 	bge	r2,zero,80e8dc <close+0xac>
    {
      ALT_ERRNO = -rval;
  80e8c0:	080e7f40 	call	80e7f4 <alt_get_errno>
  80e8c4:	1007883a 	mov	r3,r2
  80e8c8:	e0bffe17 	ldw	r2,-8(fp)
  80e8cc:	0085c83a 	sub	r2,zero,r2
  80e8d0:	18800015 	stw	r2,0(r3)
      return -1;
  80e8d4:	00bfffc4 	movi	r2,-1
  80e8d8:	00000706 	br	80e8f8 <close+0xc8>
    }
    return 0;
  80e8dc:	0005883a 	mov	r2,zero
  80e8e0:	00000506 	br	80e8f8 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e8e4:	080e7f40 	call	80e7f4 <alt_get_errno>
  80e8e8:	1007883a 	mov	r3,r2
  80e8ec:	00801444 	movi	r2,81
  80e8f0:	18800015 	stw	r2,0(r3)
    return -1;
  80e8f4:	00bfffc4 	movi	r2,-1
  }
}
  80e8f8:	e037883a 	mov	sp,fp
  80e8fc:	dfc00117 	ldw	ra,4(sp)
  80e900:	df000017 	ldw	fp,0(sp)
  80e904:	dec00204 	addi	sp,sp,8
  80e908:	f800283a 	ret

0080e90c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80e90c:	defffc04 	addi	sp,sp,-16
  80e910:	df000315 	stw	fp,12(sp)
  80e914:	df000304 	addi	fp,sp,12
  80e918:	e13fff15 	stw	r4,-4(fp)
  80e91c:	e17ffe15 	stw	r5,-8(fp)
  80e920:	e1bffd15 	stw	r6,-12(fp)
  return len;
  80e924:	e0bffd17 	ldw	r2,-12(fp)
}
  80e928:	e037883a 	mov	sp,fp
  80e92c:	df000017 	ldw	fp,0(sp)
  80e930:	dec00104 	addi	sp,sp,4
  80e934:	f800283a 	ret

0080e938 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80e938:	defffd04 	addi	sp,sp,-12
  80e93c:	df000215 	stw	fp,8(sp)
  80e940:	df000204 	addi	fp,sp,8
  80e944:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80e948:	0001883a 	nop
  80e94c:	e0bffe17 	ldw	r2,-8(fp)
  80e950:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80e954:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80e958:	10000226 	beq	r2,zero,80e964 <_exit+0x2c>
    ALT_SIM_FAIL();
  80e95c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
  80e960:	00000106 	br	80e968 <_exit+0x30>
    ALT_SIM_PASS();
  80e964:	002af0b0 	cmpltui	zero,zero,43970
}
  80e968:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80e96c:	003fff06 	br	80e96c <_exit+0x34>

0080e970 <alt_get_errno>:
{
  80e970:	defffe04 	addi	sp,sp,-8
  80e974:	dfc00115 	stw	ra,4(sp)
  80e978:	df000015 	stw	fp,0(sp)
  80e97c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e980:	d0a00917 	ldw	r2,-32732(gp)
  80e984:	10000326 	beq	r2,zero,80e994 <alt_get_errno+0x24>
  80e988:	d0a00917 	ldw	r2,-32732(gp)
  80e98c:	103ee83a 	callr	r2
  80e990:	00000106 	br	80e998 <alt_get_errno+0x28>
  80e994:	d0a74604 	addi	r2,gp,-25320
}
  80e998:	e037883a 	mov	sp,fp
  80e99c:	dfc00117 	ldw	ra,4(sp)
  80e9a0:	df000017 	ldw	fp,0(sp)
  80e9a4:	dec00204 	addi	sp,sp,8
  80e9a8:	f800283a 	ret

0080e9ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80e9ac:	defffb04 	addi	sp,sp,-20
  80e9b0:	dfc00415 	stw	ra,16(sp)
  80e9b4:	df000315 	stw	fp,12(sp)
  80e9b8:	df000304 	addi	fp,sp,12
  80e9bc:	e13ffe15 	stw	r4,-8(fp)
  80e9c0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e9c4:	e0bffe17 	ldw	r2,-8(fp)
  80e9c8:	10000916 	blt	r2,zero,80e9f0 <fstat+0x44>
  80e9cc:	e0fffe17 	ldw	r3,-8(fp)
  80e9d0:	1805883a 	mov	r2,r3
  80e9d4:	1085883a 	add	r2,r2,r2
  80e9d8:	10c5883a 	add	r2,r2,r3
  80e9dc:	100490ba 	slli	r2,r2,2
  80e9e0:	00c02074 	movhi	r3,129
  80e9e4:	18cd6204 	addi	r3,r3,13704
  80e9e8:	10c5883a 	add	r2,r2,r3
  80e9ec:	00000106 	br	80e9f4 <fstat+0x48>
  80e9f0:	0005883a 	mov	r2,zero
  80e9f4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80e9f8:	e0bfff17 	ldw	r2,-4(fp)
  80e9fc:	10001026 	beq	r2,zero,80ea40 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ea00:	e0bfff17 	ldw	r2,-4(fp)
  80ea04:	10800017 	ldw	r2,0(r2)
  80ea08:	10800817 	ldw	r2,32(r2)
  80ea0c:	10000726 	beq	r2,zero,80ea2c <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
  80ea10:	e0bfff17 	ldw	r2,-4(fp)
  80ea14:	10800017 	ldw	r2,0(r2)
  80ea18:	10800817 	ldw	r2,32(r2)
  80ea1c:	e17ffd17 	ldw	r5,-12(fp)
  80ea20:	e13fff17 	ldw	r4,-4(fp)
  80ea24:	103ee83a 	callr	r2
  80ea28:	00000a06 	br	80ea54 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ea2c:	e0bffd17 	ldw	r2,-12(fp)
  80ea30:	00c80004 	movi	r3,8192
  80ea34:	10c00115 	stw	r3,4(r2)
      return 0;
  80ea38:	0005883a 	mov	r2,zero
  80ea3c:	00000506 	br	80ea54 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ea40:	080e9700 	call	80e970 <alt_get_errno>
  80ea44:	1007883a 	mov	r3,r2
  80ea48:	00801444 	movi	r2,81
  80ea4c:	18800015 	stw	r2,0(r3)
    return -1;
  80ea50:	00bfffc4 	movi	r2,-1
  }
}
  80ea54:	e037883a 	mov	sp,fp
  80ea58:	dfc00117 	ldw	ra,4(sp)
  80ea5c:	df000017 	ldw	fp,0(sp)
  80ea60:	dec00204 	addi	sp,sp,8
  80ea64:	f800283a 	ret

0080ea68 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80ea68:	deffff04 	addi	sp,sp,-4
  80ea6c:	df000015 	stw	fp,0(sp)
  80ea70:	d839883a 	mov	fp,sp
  return 0;
  80ea74:	0005883a 	mov	r2,zero
}
  80ea78:	e037883a 	mov	sp,fp
  80ea7c:	df000017 	ldw	fp,0(sp)
  80ea80:	dec00104 	addi	sp,sp,4
  80ea84:	f800283a 	ret

0080ea88 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ea88:	defff904 	addi	sp,sp,-28
  80ea8c:	dfc00615 	stw	ra,24(sp)
  80ea90:	df000515 	stw	fp,20(sp)
  80ea94:	df000504 	addi	fp,sp,20
  80ea98:	e13fff15 	stw	r4,-4(fp)
  80ea9c:	e17ffe15 	stw	r5,-8(fp)
  80eaa0:	e1bffd15 	stw	r6,-12(fp)
  80eaa4:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80eaa8:	e0800217 	ldw	r2,8(fp)
  80eaac:	d8800015 	stw	r2,0(sp)
  80eab0:	e1fffc17 	ldw	r7,-16(fp)
  80eab4:	e1bffd17 	ldw	r6,-12(fp)
  80eab8:	e17ffe17 	ldw	r5,-8(fp)
  80eabc:	e13fff17 	ldw	r4,-4(fp)
  80eac0:	080ec380 	call	80ec38 <alt_iic_isr_register>
}  
  80eac4:	e037883a 	mov	sp,fp
  80eac8:	dfc00117 	ldw	ra,4(sp)
  80eacc:	df000017 	ldw	fp,0(sp)
  80ead0:	dec00204 	addi	sp,sp,8
  80ead4:	f800283a 	ret

0080ead8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80ead8:	defff904 	addi	sp,sp,-28
  80eadc:	df000615 	stw	fp,24(sp)
  80eae0:	df000604 	addi	fp,sp,24
  80eae4:	e13ffb15 	stw	r4,-20(fp)
  80eae8:	e17ffa15 	stw	r5,-24(fp)
  80eaec:	e0bffa17 	ldw	r2,-24(fp)
  80eaf0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  80eaf4:	0005303a 	rdctl	r2,status
  80eaf8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eafc:	e0fffe17 	ldw	r3,-8(fp)
  80eb00:	00bfff84 	movi	r2,-2
  80eb04:	1884703a 	and	r2,r3,r2
  80eb08:	1001703a 	wrctl	status,r2
  return context;
  80eb0c:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80eb10:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80eb14:	00c00044 	movi	r3,1
  80eb18:	e0bfff17 	ldw	r2,-4(fp)
  80eb1c:	1884983a 	sll	r2,r3,r2
  80eb20:	1007883a 	mov	r3,r2
  80eb24:	d0a74817 	ldw	r2,-25312(gp)
  80eb28:	1884b03a 	or	r2,r3,r2
  80eb2c:	d0a74815 	stw	r2,-25312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80eb30:	d0a74817 	ldw	r2,-25312(gp)
  80eb34:	100170fa 	wrctl	ienable,r2
  80eb38:	e0bffd17 	ldw	r2,-12(fp)
  80eb3c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  80eb40:	e0bffc17 	ldw	r2,-16(fp)
  80eb44:	1001703a 	wrctl	status,r2
}
  80eb48:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
  80eb4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80eb50:	e037883a 	mov	sp,fp
  80eb54:	df000017 	ldw	fp,0(sp)
  80eb58:	dec00104 	addi	sp,sp,4
  80eb5c:	f800283a 	ret

0080eb60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80eb60:	defff904 	addi	sp,sp,-28
  80eb64:	df000615 	stw	fp,24(sp)
  80eb68:	df000604 	addi	fp,sp,24
  80eb6c:	e13ffb15 	stw	r4,-20(fp)
  80eb70:	e17ffa15 	stw	r5,-24(fp)
  80eb74:	e0bffa17 	ldw	r2,-24(fp)
  80eb78:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  80eb7c:	0005303a 	rdctl	r2,status
  80eb80:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb84:	e0fffe17 	ldw	r3,-8(fp)
  80eb88:	00bfff84 	movi	r2,-2
  80eb8c:	1884703a 	and	r2,r3,r2
  80eb90:	1001703a 	wrctl	status,r2
  return context;
  80eb94:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
  80eb98:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
  80eb9c:	00c00044 	movi	r3,1
  80eba0:	e0bfff17 	ldw	r2,-4(fp)
  80eba4:	1884983a 	sll	r2,r3,r2
  80eba8:	0084303a 	nor	r2,zero,r2
  80ebac:	1007883a 	mov	r3,r2
  80ebb0:	d0a74817 	ldw	r2,-25312(gp)
  80ebb4:	1884703a 	and	r2,r3,r2
  80ebb8:	d0a74815 	stw	r2,-25312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ebbc:	d0a74817 	ldw	r2,-25312(gp)
  80ebc0:	100170fa 	wrctl	ienable,r2
  80ebc4:	e0bffd17 	ldw	r2,-12(fp)
  80ebc8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  80ebcc:	e0bffc17 	ldw	r2,-16(fp)
  80ebd0:	1001703a 	wrctl	status,r2
}
  80ebd4:	0001883a 	nop
  return 0;
  80ebd8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80ebdc:	e037883a 	mov	sp,fp
  80ebe0:	df000017 	ldw	fp,0(sp)
  80ebe4:	dec00104 	addi	sp,sp,4
  80ebe8:	f800283a 	ret

0080ebec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80ebec:	defffc04 	addi	sp,sp,-16
  80ebf0:	df000315 	stw	fp,12(sp)
  80ebf4:	df000304 	addi	fp,sp,12
  80ebf8:	e13ffe15 	stw	r4,-8(fp)
  80ebfc:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80ec00:	000530fa 	rdctl	r2,ienable
  80ec04:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80ec08:	00c00044 	movi	r3,1
  80ec0c:	e0bffd17 	ldw	r2,-12(fp)
  80ec10:	1884983a 	sll	r2,r3,r2
  80ec14:	1007883a 	mov	r3,r2
  80ec18:	e0bfff17 	ldw	r2,-4(fp)
  80ec1c:	1884703a 	and	r2,r3,r2
  80ec20:	1004c03a 	cmpne	r2,r2,zero
  80ec24:	10803fcc 	andi	r2,r2,255
}
  80ec28:	e037883a 	mov	sp,fp
  80ec2c:	df000017 	ldw	fp,0(sp)
  80ec30:	dec00104 	addi	sp,sp,4
  80ec34:	f800283a 	ret

0080ec38 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ec38:	defff504 	addi	sp,sp,-44
  80ec3c:	dfc00a15 	stw	ra,40(sp)
  80ec40:	df000915 	stw	fp,36(sp)
  80ec44:	df000904 	addi	fp,sp,36
  80ec48:	e13ffa15 	stw	r4,-24(fp)
  80ec4c:	e17ff915 	stw	r5,-28(fp)
  80ec50:	e1bff815 	stw	r6,-32(fp)
  80ec54:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
  80ec58:	00bffa84 	movi	r2,-22
  80ec5c:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80ec60:	e0bff917 	ldw	r2,-28(fp)
  80ec64:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ec68:	e0bffe17 	ldw	r2,-8(fp)
  80ec6c:	10800808 	cmpgei	r2,r2,32
  80ec70:	1000251e 	bne	r2,zero,80ed08 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
  80ec74:	0005303a 	rdctl	r2,status
  80ec78:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec7c:	e0fffc17 	ldw	r3,-16(fp)
  80ec80:	00bfff84 	movi	r2,-2
  80ec84:	1884703a 	and	r2,r3,r2
  80ec88:	1001703a 	wrctl	status,r2
  return context;
  80ec8c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80ec90:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
  80ec94:	e0bffe17 	ldw	r2,-8(fp)
  80ec98:	100890fa 	slli	r4,r2,3
  80ec9c:	e0fff817 	ldw	r3,-32(fp)
  80eca0:	00802074 	movhi	r2,129
  80eca4:	2085883a 	add	r2,r4,r2
  80eca8:	10d96c15 	stw	r3,26032(r2)
    alt_irq[id].context = isr_context;
  80ecac:	e0bffe17 	ldw	r2,-8(fp)
  80ecb0:	100890fa 	slli	r4,r2,3
  80ecb4:	e0fff717 	ldw	r3,-36(fp)
  80ecb8:	00802074 	movhi	r2,129
  80ecbc:	2085883a 	add	r2,r4,r2
  80ecc0:	10d96d15 	stw	r3,26036(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80ecc4:	e0bff817 	ldw	r2,-32(fp)
  80ecc8:	10000526 	beq	r2,zero,80ece0 <alt_iic_isr_register+0xa8>
  80eccc:	e0bffe17 	ldw	r2,-8(fp)
  80ecd0:	100b883a 	mov	r5,r2
  80ecd4:	e13ffa17 	ldw	r4,-24(fp)
  80ecd8:	080ead80 	call	80ead8 <alt_ic_irq_enable>
  80ecdc:	00000406 	br	80ecf0 <alt_iic_isr_register+0xb8>
  80ece0:	e0bffe17 	ldw	r2,-8(fp)
  80ece4:	100b883a 	mov	r5,r2
  80ece8:	e13ffa17 	ldw	r4,-24(fp)
  80ecec:	080eb600 	call	80eb60 <alt_ic_irq_disable>
  80ecf0:	e0bfff15 	stw	r2,-4(fp)
  80ecf4:	e0bffd17 	ldw	r2,-12(fp)
  80ecf8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  80ecfc:	e0bffb17 	ldw	r2,-20(fp)
  80ed00:	1001703a 	wrctl	status,r2
}
  80ed04:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
  80ed08:	e0bfff17 	ldw	r2,-4(fp)
}
  80ed0c:	e037883a 	mov	sp,fp
  80ed10:	dfc00117 	ldw	ra,4(sp)
  80ed14:	df000017 	ldw	fp,0(sp)
  80ed18:	dec00204 	addi	sp,sp,8
  80ed1c:	f800283a 	ret

0080ed20 <alt_get_errno>:
{
  80ed20:	defffe04 	addi	sp,sp,-8
  80ed24:	dfc00115 	stw	ra,4(sp)
  80ed28:	df000015 	stw	fp,0(sp)
  80ed2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ed30:	d0a00917 	ldw	r2,-32732(gp)
  80ed34:	10000326 	beq	r2,zero,80ed44 <alt_get_errno+0x24>
  80ed38:	d0a00917 	ldw	r2,-32732(gp)
  80ed3c:	103ee83a 	callr	r2
  80ed40:	00000106 	br	80ed48 <alt_get_errno+0x28>
  80ed44:	d0a74604 	addi	r2,gp,-25320
}
  80ed48:	e037883a 	mov	sp,fp
  80ed4c:	dfc00117 	ldw	ra,4(sp)
  80ed50:	df000017 	ldw	fp,0(sp)
  80ed54:	dec00204 	addi	sp,sp,8
  80ed58:	f800283a 	ret

0080ed5c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80ed5c:	deffea04 	addi	sp,sp,-88
  80ed60:	dfc01515 	stw	ra,84(sp)
  80ed64:	df001415 	stw	fp,80(sp)
  80ed68:	df001404 	addi	fp,sp,80
  80ed6c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ed70:	e0bfec17 	ldw	r2,-80(fp)
  80ed74:	10000916 	blt	r2,zero,80ed9c <isatty+0x40>
  80ed78:	e0ffec17 	ldw	r3,-80(fp)
  80ed7c:	1805883a 	mov	r2,r3
  80ed80:	1085883a 	add	r2,r2,r2
  80ed84:	10c5883a 	add	r2,r2,r3
  80ed88:	100490ba 	slli	r2,r2,2
  80ed8c:	00c02074 	movhi	r3,129
  80ed90:	18cd6204 	addi	r3,r3,13704
  80ed94:	10c5883a 	add	r2,r2,r3
  80ed98:	00000106 	br	80eda0 <isatty+0x44>
  80ed9c:	0005883a 	mov	r2,zero
  80eda0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80eda4:	e0bfff17 	ldw	r2,-4(fp)
  80eda8:	10000e26 	beq	r2,zero,80ede4 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80edac:	e0bfff17 	ldw	r2,-4(fp)
  80edb0:	10800017 	ldw	r2,0(r2)
  80edb4:	10800817 	ldw	r2,32(r2)
  80edb8:	1000021e 	bne	r2,zero,80edc4 <isatty+0x68>
    {
      return 1;
  80edbc:	00800044 	movi	r2,1
  80edc0:	00000d06 	br	80edf8 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80edc4:	e0bfed04 	addi	r2,fp,-76
  80edc8:	100b883a 	mov	r5,r2
  80edcc:	e13fec17 	ldw	r4,-80(fp)
  80edd0:	080e9ac0 	call	80e9ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80edd4:	e0bfee17 	ldw	r2,-72(fp)
  80edd8:	10880020 	cmpeqi	r2,r2,8192
  80eddc:	10803fcc 	andi	r2,r2,255
  80ede0:	00000506 	br	80edf8 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ede4:	080ed200 	call	80ed20 <alt_get_errno>
  80ede8:	1007883a 	mov	r3,r2
  80edec:	00801444 	movi	r2,81
  80edf0:	18800015 	stw	r2,0(r3)
    return 0;
  80edf4:	0005883a 	mov	r2,zero
  }
}
  80edf8:	e037883a 	mov	sp,fp
  80edfc:	dfc00117 	ldw	ra,4(sp)
  80ee00:	df000017 	ldw	fp,0(sp)
  80ee04:	dec00204 	addi	sp,sp,8
  80ee08:	f800283a 	ret

0080ee0c <alt_get_errno>:
{
  80ee0c:	defffe04 	addi	sp,sp,-8
  80ee10:	dfc00115 	stw	ra,4(sp)
  80ee14:	df000015 	stw	fp,0(sp)
  80ee18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ee1c:	d0a00917 	ldw	r2,-32732(gp)
  80ee20:	10000326 	beq	r2,zero,80ee30 <alt_get_errno+0x24>
  80ee24:	d0a00917 	ldw	r2,-32732(gp)
  80ee28:	103ee83a 	callr	r2
  80ee2c:	00000106 	br	80ee34 <alt_get_errno+0x28>
  80ee30:	d0a74604 	addi	r2,gp,-25320
}
  80ee34:	e037883a 	mov	sp,fp
  80ee38:	dfc00117 	ldw	ra,4(sp)
  80ee3c:	df000017 	ldw	fp,0(sp)
  80ee40:	dec00204 	addi	sp,sp,8
  80ee44:	f800283a 	ret

0080ee48 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  80ee48:	defffb04 	addi	sp,sp,-20
  80ee4c:	dfc00415 	stw	ra,16(sp)
  80ee50:	df000315 	stw	fp,12(sp)
  80ee54:	df000304 	addi	fp,sp,12
  80ee58:	e13ffe15 	stw	r4,-8(fp)
  80ee5c:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
  80ee60:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
  80ee64:	e0bffe17 	ldw	r2,-8(fp)
  80ee68:	00802e16 	blt	zero,r2,80ef24 <kill+0xdc>
  80ee6c:	e0bffd17 	ldw	r2,-12(fp)
  80ee70:	10800828 	cmpgeui	r2,r2,32
  80ee74:	1000281e 	bne	r2,zero,80ef18 <kill+0xd0>
  80ee78:	e0bffd17 	ldw	r2,-12(fp)
  80ee7c:	100690ba 	slli	r3,r2,2
  80ee80:	00802074 	movhi	r2,129
  80ee84:	1885883a 	add	r2,r3,r2
  80ee88:	10bba417 	ldw	r2,-4464(r2)
  80ee8c:	1000683a 	jmp	r2
  80ee90:	0080ef38 	rdprs	r2,zero,956
  80ee94:	0080ef18 	cmpnei	r2,zero,956
  80ee98:	0080ef18 	cmpnei	r2,zero,956
  80ee9c:	0080ef10 	cmplti	r2,zero,956
  80eea0:	0080ef10 	cmplti	r2,zero,956
  80eea4:	0080ef10 	cmplti	r2,zero,956
  80eea8:	0080ef10 	cmplti	r2,zero,956
  80eeac:	0080ef18 	cmpnei	r2,zero,956
  80eeb0:	0080ef10 	cmplti	r2,zero,956
  80eeb4:	0080ef10 	cmplti	r2,zero,956
  80eeb8:	0080ef10 	cmplti	r2,zero,956
  80eebc:	0080ef10 	cmplti	r2,zero,956
  80eec0:	0080ef10 	cmplti	r2,zero,956
  80eec4:	0080ef10 	cmplti	r2,zero,956
  80eec8:	0080ef10 	cmplti	r2,zero,956
  80eecc:	0080ef10 	cmplti	r2,zero,956
  80eed0:	0080ef38 	rdprs	r2,zero,956
  80eed4:	0080ef18 	cmpnei	r2,zero,956
  80eed8:	0080ef18 	cmpnei	r2,zero,956
  80eedc:	0080ef18 	cmpnei	r2,zero,956
  80eee0:	0080ef38 	rdprs	r2,zero,956
  80eee4:	0080ef18 	cmpnei	r2,zero,956
  80eee8:	0080ef18 	cmpnei	r2,zero,956
  80eeec:	0080ef10 	cmplti	r2,zero,956
  80eef0:	0080ef10 	cmplti	r2,zero,956
  80eef4:	0080ef10 	cmplti	r2,zero,956
  80eef8:	0080ef10 	cmplti	r2,zero,956
  80eefc:	0080ef10 	cmplti	r2,zero,956
  80ef00:	0080ef18 	cmpnei	r2,zero,956
  80ef04:	0080ef18 	cmpnei	r2,zero,956
  80ef08:	0080ef10 	cmplti	r2,zero,956
  80ef0c:	0080ef10 	cmplti	r2,zero,956
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  80ef10:	0009883a 	mov	r4,zero
  80ef14:	080e9380 	call	80e938 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  80ef18:	00800584 	movi	r2,22
  80ef1c:	e0bfff15 	stw	r2,-4(fp)
  80ef20:	00000606 	br	80ef3c <kill+0xf4>
    }
  }

  else if (pid > 0)
  80ef24:	e0bffe17 	ldw	r2,-8(fp)
  80ef28:	0080040e 	bge	zero,r2,80ef3c <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  80ef2c:	008000c4 	movi	r2,3
  80ef30:	e0bfff15 	stw	r2,-4(fp)
  80ef34:	00000106 	br	80ef3c <kill+0xf4>
      break;
  80ef38:	0001883a 	nop
  }

  if (status)
  80ef3c:	e0bfff17 	ldw	r2,-4(fp)
  80ef40:	10000626 	beq	r2,zero,80ef5c <kill+0x114>
  {
    ALT_ERRNO = status;
  80ef44:	080ee0c0 	call	80ee0c <alt_get_errno>
  80ef48:	1007883a 	mov	r3,r2
  80ef4c:	e0bfff17 	ldw	r2,-4(fp)
  80ef50:	18800015 	stw	r2,0(r3)
    return -1;
  80ef54:	00bfffc4 	movi	r2,-1
  80ef58:	00000106 	br	80ef60 <kill+0x118>
  }

  return 0;
  80ef5c:	0005883a 	mov	r2,zero
}
  80ef60:	e037883a 	mov	sp,fp
  80ef64:	dfc00117 	ldw	ra,4(sp)
  80ef68:	df000017 	ldw	fp,0(sp)
  80ef6c:	dec00204 	addi	sp,sp,8
  80ef70:	f800283a 	ret

0080ef74 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ef74:	defffc04 	addi	sp,sp,-16
  80ef78:	df000315 	stw	fp,12(sp)
  80ef7c:	df000304 	addi	fp,sp,12
  80ef80:	e13fff15 	stw	r4,-4(fp)
  80ef84:	e17ffe15 	stw	r5,-8(fp)
  80ef88:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
  80ef8c:	e0fffe17 	ldw	r3,-8(fp)
  80ef90:	e0bfff17 	ldw	r2,-4(fp)
  80ef94:	18800c26 	beq	r3,r2,80efc8 <alt_load_section+0x54>
  {
    while( to != end )
  80ef98:	00000806 	br	80efbc <alt_load_section+0x48>
    {
      *to++ = *from++;
  80ef9c:	e0ffff17 	ldw	r3,-4(fp)
  80efa0:	18800104 	addi	r2,r3,4
  80efa4:	e0bfff15 	stw	r2,-4(fp)
  80efa8:	e0bffe17 	ldw	r2,-8(fp)
  80efac:	11000104 	addi	r4,r2,4
  80efb0:	e13ffe15 	stw	r4,-8(fp)
  80efb4:	18c00017 	ldw	r3,0(r3)
  80efb8:	10c00015 	stw	r3,0(r2)
    while( to != end )
  80efbc:	e0fffe17 	ldw	r3,-8(fp)
  80efc0:	e0bffd17 	ldw	r2,-12(fp)
  80efc4:	18bff51e 	bne	r3,r2,80ef9c <alt_load_section+0x28>
    }
  }
}
  80efc8:	0001883a 	nop
  80efcc:	e037883a 	mov	sp,fp
  80efd0:	df000017 	ldw	fp,0(sp)
  80efd4:	dec00104 	addi	sp,sp,4
  80efd8:	f800283a 	ret

0080efdc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80efdc:	defffe04 	addi	sp,sp,-8
  80efe0:	dfc00115 	stw	ra,4(sp)
  80efe4:	df000015 	stw	fp,0(sp)
  80efe8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80efec:	01802074 	movhi	r6,129
  80eff0:	31922304 	addi	r6,r6,18572
  80eff4:	01402074 	movhi	r5,129
  80eff8:	294af204 	addi	r5,r5,11208
  80effc:	01002074 	movhi	r4,129
  80f000:	21122304 	addi	r4,r4,18572
  80f004:	080ef740 	call	80ef74 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f008:	01802034 	movhi	r6,128
  80f00c:	31808e04 	addi	r6,r6,568
  80f010:	01402034 	movhi	r5,128
  80f014:	29400804 	addi	r5,r5,32
  80f018:	01002034 	movhi	r4,128
  80f01c:	21000804 	addi	r4,r4,32
  80f020:	080ef740 	call	80ef74 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f024:	01802074 	movhi	r6,129
  80f028:	318af204 	addi	r6,r6,11208
  80f02c:	01402074 	movhi	r5,129
  80f030:	2948d504 	addi	r5,r5,9044
  80f034:	01002074 	movhi	r4,129
  80f038:	2108d504 	addi	r4,r4,9044
  80f03c:	080ef740 	call	80ef74 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f040:	08112dc0 	call	8112dc <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f044:	08116840 	call	811684 <alt_icache_flush_all>
}
  80f048:	0001883a 	nop
  80f04c:	e037883a 	mov	sp,fp
  80f050:	dfc00117 	ldw	ra,4(sp)
  80f054:	df000017 	ldw	fp,0(sp)
  80f058:	dec00204 	addi	sp,sp,8
  80f05c:	f800283a 	ret

0080f060 <alt_get_errno>:
{
  80f060:	defffe04 	addi	sp,sp,-8
  80f064:	dfc00115 	stw	ra,4(sp)
  80f068:	df000015 	stw	fp,0(sp)
  80f06c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f070:	d0a00917 	ldw	r2,-32732(gp)
  80f074:	10000326 	beq	r2,zero,80f084 <alt_get_errno+0x24>
  80f078:	d0a00917 	ldw	r2,-32732(gp)
  80f07c:	103ee83a 	callr	r2
  80f080:	00000106 	br	80f088 <alt_get_errno+0x28>
  80f084:	d0a74604 	addi	r2,gp,-25320
}
  80f088:	e037883a 	mov	sp,fp
  80f08c:	dfc00117 	ldw	ra,4(sp)
  80f090:	df000017 	ldw	fp,0(sp)
  80f094:	dec00204 	addi	sp,sp,8
  80f098:	f800283a 	ret

0080f09c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f09c:	defff904 	addi	sp,sp,-28
  80f0a0:	dfc00615 	stw	ra,24(sp)
  80f0a4:	df000515 	stw	fp,20(sp)
  80f0a8:	df000504 	addi	fp,sp,20
  80f0ac:	e13ffd15 	stw	r4,-12(fp)
  80f0b0:	e17ffc15 	stw	r5,-16(fp)
  80f0b4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f0b8:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f0bc:	e0bffd17 	ldw	r2,-12(fp)
  80f0c0:	10000916 	blt	r2,zero,80f0e8 <lseek+0x4c>
  80f0c4:	e0fffd17 	ldw	r3,-12(fp)
  80f0c8:	1805883a 	mov	r2,r3
  80f0cc:	1085883a 	add	r2,r2,r2
  80f0d0:	10c5883a 	add	r2,r2,r3
  80f0d4:	100490ba 	slli	r2,r2,2
  80f0d8:	00c02074 	movhi	r3,129
  80f0dc:	18cd6204 	addi	r3,r3,13704
  80f0e0:	10c5883a 	add	r2,r2,r3
  80f0e4:	00000106 	br	80f0ec <lseek+0x50>
  80f0e8:	0005883a 	mov	r2,zero
  80f0ec:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
  80f0f0:	e0bffe17 	ldw	r2,-8(fp)
  80f0f4:	10001026 	beq	r2,zero,80f138 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f0f8:	e0bffe17 	ldw	r2,-8(fp)
  80f0fc:	10800017 	ldw	r2,0(r2)
  80f100:	10800717 	ldw	r2,28(r2)
  80f104:	10000926 	beq	r2,zero,80f12c <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f108:	e0bffe17 	ldw	r2,-8(fp)
  80f10c:	10800017 	ldw	r2,0(r2)
  80f110:	10800717 	ldw	r2,28(r2)
  80f114:	e1bffb17 	ldw	r6,-20(fp)
  80f118:	e17ffc17 	ldw	r5,-16(fp)
  80f11c:	e13ffe17 	ldw	r4,-8(fp)
  80f120:	103ee83a 	callr	r2
  80f124:	e0bfff15 	stw	r2,-4(fp)
  80f128:	00000506 	br	80f140 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f12c:	00bfde84 	movi	r2,-134
  80f130:	e0bfff15 	stw	r2,-4(fp)
  80f134:	00000206 	br	80f140 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f138:	00bfebc4 	movi	r2,-81
  80f13c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
  80f140:	e0bfff17 	ldw	r2,-4(fp)
  80f144:	1000070e 	bge	r2,zero,80f164 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
  80f148:	080f0600 	call	80f060 <alt_get_errno>
  80f14c:	1007883a 	mov	r3,r2
  80f150:	e0bfff17 	ldw	r2,-4(fp)
  80f154:	0085c83a 	sub	r2,zero,r2
  80f158:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f15c:	00bfffc4 	movi	r2,-1
  80f160:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
  80f164:	e0bfff17 	ldw	r2,-4(fp)
}
  80f168:	e037883a 	mov	sp,fp
  80f16c:	dfc00117 	ldw	ra,4(sp)
  80f170:	df000017 	ldw	fp,0(sp)
  80f174:	dec00204 	addi	sp,sp,8
  80f178:	f800283a 	ret

0080f17c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f17c:	defffd04 	addi	sp,sp,-12
  80f180:	dfc00215 	stw	ra,8(sp)
  80f184:	df000115 	stw	fp,4(sp)
  80f188:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f18c:	0009883a 	mov	r4,zero
  80f190:	080f6980 	call	80f698 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80f194:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f198:	080f6d40 	call	80f6d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f19c:	01802074 	movhi	r6,129
  80f1a0:	318ae704 	addi	r6,r6,11164
  80f1a4:	01402074 	movhi	r5,129
  80f1a8:	294ae704 	addi	r5,r5,11164
  80f1ac:	01002074 	movhi	r4,129
  80f1b0:	210ae704 	addi	r4,r4,11164
  80f1b4:	08118240 	call	811824 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f1b8:	081152c0 	call	81152c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f1bc:	01002074 	movhi	r4,129
  80f1c0:	21056404 	addi	r4,r4,5520
  80f1c4:	0811f380 	call	811f38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f1c8:	d0a74917 	ldw	r2,-25308(gp)
  80f1cc:	d0e74a17 	ldw	r3,-25304(gp)
  80f1d0:	d1274b17 	ldw	r4,-25300(gp)
  80f1d4:	200d883a 	mov	r6,r4
  80f1d8:	180b883a 	mov	r5,r3
  80f1dc:	1009883a 	mov	r4,r2
  80f1e0:	08007740 	call	800774 <main>
  80f1e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f1e8:	01000044 	movi	r4,1
  80f1ec:	080e8300 	call	80e830 <close>
  exit (result);
  80f1f0:	e13fff17 	ldw	r4,-4(fp)
  80f1f4:	0811f4c0 	call	811f4c <exit>

0080f1f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f1f8:	defffe04 	addi	sp,sp,-8
  80f1fc:	df000115 	stw	fp,4(sp)
  80f200:	df000104 	addi	fp,sp,4
  80f204:	e13fff15 	stw	r4,-4(fp)
}
  80f208:	0001883a 	nop
  80f20c:	e037883a 	mov	sp,fp
  80f210:	df000017 	ldw	fp,0(sp)
  80f214:	dec00104 	addi	sp,sp,4
  80f218:	f800283a 	ret

0080f21c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f21c:	defffe04 	addi	sp,sp,-8
  80f220:	df000115 	stw	fp,4(sp)
  80f224:	df000104 	addi	fp,sp,4
  80f228:	e13fff15 	stw	r4,-4(fp)
}
  80f22c:	0001883a 	nop
  80f230:	e037883a 	mov	sp,fp
  80f234:	df000017 	ldw	fp,0(sp)
  80f238:	dec00104 	addi	sp,sp,4
  80f23c:	f800283a 	ret

0080f240 <alt_get_errno>:
{
  80f240:	defffe04 	addi	sp,sp,-8
  80f244:	dfc00115 	stw	ra,4(sp)
  80f248:	df000015 	stw	fp,0(sp)
  80f24c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f250:	d0a00917 	ldw	r2,-32732(gp)
  80f254:	10000326 	beq	r2,zero,80f264 <alt_get_errno+0x24>
  80f258:	d0a00917 	ldw	r2,-32732(gp)
  80f25c:	103ee83a 	callr	r2
  80f260:	00000106 	br	80f268 <alt_get_errno+0x28>
  80f264:	d0a74604 	addi	r2,gp,-25320
}
  80f268:	e037883a 	mov	sp,fp
  80f26c:	dfc00117 	ldw	ra,4(sp)
  80f270:	df000017 	ldw	fp,0(sp)
  80f274:	dec00204 	addi	sp,sp,8
  80f278:	f800283a 	ret

0080f27c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f27c:	defff904 	addi	sp,sp,-28
  80f280:	dfc00615 	stw	ra,24(sp)
  80f284:	df000515 	stw	fp,20(sp)
  80f288:	df000504 	addi	fp,sp,20
  80f28c:	e13ffd15 	stw	r4,-12(fp)
  80f290:	e17ffc15 	stw	r5,-16(fp)
  80f294:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f298:	e0bffd17 	ldw	r2,-12(fp)
  80f29c:	10000916 	blt	r2,zero,80f2c4 <read+0x48>
  80f2a0:	e0fffd17 	ldw	r3,-12(fp)
  80f2a4:	1805883a 	mov	r2,r3
  80f2a8:	1085883a 	add	r2,r2,r2
  80f2ac:	10c5883a 	add	r2,r2,r3
  80f2b0:	100490ba 	slli	r2,r2,2
  80f2b4:	00c02074 	movhi	r3,129
  80f2b8:	18cd6204 	addi	r3,r3,13704
  80f2bc:	10c5883a 	add	r2,r2,r3
  80f2c0:	00000106 	br	80f2c8 <read+0x4c>
  80f2c4:	0005883a 	mov	r2,zero
  80f2c8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80f2cc:	e0bfff17 	ldw	r2,-4(fp)
  80f2d0:	10002226 	beq	r2,zero,80f35c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f2d4:	e0bfff17 	ldw	r2,-4(fp)
  80f2d8:	10800217 	ldw	r2,8(r2)
  80f2dc:	108000cc 	andi	r2,r2,3
  80f2e0:	10800060 	cmpeqi	r2,r2,1
  80f2e4:	1000181e 	bne	r2,zero,80f348 <read+0xcc>
        (fd->dev->read))
  80f2e8:	e0bfff17 	ldw	r2,-4(fp)
  80f2ec:	10800017 	ldw	r2,0(r2)
  80f2f0:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f2f4:	10001426 	beq	r2,zero,80f348 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f2f8:	e0bfff17 	ldw	r2,-4(fp)
  80f2fc:	10800017 	ldw	r2,0(r2)
  80f300:	10800517 	ldw	r2,20(r2)
  80f304:	e0fffb17 	ldw	r3,-20(fp)
  80f308:	180d883a 	mov	r6,r3
  80f30c:	e17ffc17 	ldw	r5,-16(fp)
  80f310:	e13fff17 	ldw	r4,-4(fp)
  80f314:	103ee83a 	callr	r2
  80f318:	e0bffe15 	stw	r2,-8(fp)
  80f31c:	e0bffe17 	ldw	r2,-8(fp)
  80f320:	1000070e 	bge	r2,zero,80f340 <read+0xc4>
        {
          ALT_ERRNO = -rval;
  80f324:	080f2400 	call	80f240 <alt_get_errno>
  80f328:	1007883a 	mov	r3,r2
  80f32c:	e0bffe17 	ldw	r2,-8(fp)
  80f330:	0085c83a 	sub	r2,zero,r2
  80f334:	18800015 	stw	r2,0(r3)
          return -1;
  80f338:	00bfffc4 	movi	r2,-1
  80f33c:	00000c06 	br	80f370 <read+0xf4>
        }
        return rval;
  80f340:	e0bffe17 	ldw	r2,-8(fp)
  80f344:	00000a06 	br	80f370 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f348:	080f2400 	call	80f240 <alt_get_errno>
  80f34c:	1007883a 	mov	r3,r2
  80f350:	00800344 	movi	r2,13
  80f354:	18800015 	stw	r2,0(r3)
  80f358:	00000406 	br	80f36c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f35c:	080f2400 	call	80f240 <alt_get_errno>
  80f360:	1007883a 	mov	r3,r2
  80f364:	00801444 	movi	r2,81
  80f368:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f36c:	00bfffc4 	movi	r2,-1
}
  80f370:	e037883a 	mov	sp,fp
  80f374:	dfc00117 	ldw	ra,4(sp)
  80f378:	df000017 	ldw	fp,0(sp)
  80f37c:	dec00204 	addi	sp,sp,8
  80f380:	f800283a 	ret

0080f384 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80f384:	defffe04 	addi	sp,sp,-8
  80f388:	df000115 	stw	fp,4(sp)
  80f38c:	df000104 	addi	fp,sp,4
  80f390:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80f394:	e0bfff17 	ldw	r2,-4(fp)
  80f398:	108000d0 	cmplti	r2,r2,3
  80f39c:	1000101e 	bne	r2,zero,80f3e0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
  80f3a0:	e0ffff17 	ldw	r3,-4(fp)
  80f3a4:	1805883a 	mov	r2,r3
  80f3a8:	1085883a 	add	r2,r2,r2
  80f3ac:	10c5883a 	add	r2,r2,r3
  80f3b0:	100490ba 	slli	r2,r2,2
  80f3b4:	00c02074 	movhi	r3,129
  80f3b8:	10c7883a 	add	r3,r2,r3
  80f3bc:	180d6415 	stw	zero,13712(r3)
    alt_fd_list[fd].dev      = 0;
  80f3c0:	e0ffff17 	ldw	r3,-4(fp)
  80f3c4:	1805883a 	mov	r2,r3
  80f3c8:	1085883a 	add	r2,r2,r2
  80f3cc:	10c5883a 	add	r2,r2,r3
  80f3d0:	100490ba 	slli	r2,r2,2
  80f3d4:	00c02074 	movhi	r3,129
  80f3d8:	10c7883a 	add	r3,r2,r3
  80f3dc:	180d6215 	stw	zero,13704(r3)
  }
}
  80f3e0:	0001883a 	nop
  80f3e4:	e037883a 	mov	sp,fp
  80f3e8:	df000017 	ldw	fp,0(sp)
  80f3ec:	dec00104 	addi	sp,sp,4
  80f3f0:	f800283a 	ret

0080f3f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80f3f4:	defff904 	addi	sp,sp,-28
  80f3f8:	df000615 	stw	fp,24(sp)
  80f3fc:	df000604 	addi	fp,sp,24
  80f400:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
  80f404:	0005303a 	rdctl	r2,status
  80f408:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f40c:	e0fffd17 	ldw	r3,-12(fp)
  80f410:	00bfff84 	movi	r2,-2
  80f414:	1884703a 	and	r2,r3,r2
  80f418:	1001703a 	wrctl	status,r2
  return context;
  80f41c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80f420:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80f424:	d0a00b17 	ldw	r2,-32724(gp)
  80f428:	10c000c4 	addi	r3,r2,3
  80f42c:	00bfff04 	movi	r2,-4
  80f430:	1884703a 	and	r2,r3,r2
  80f434:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80f438:	d0e00b17 	ldw	r3,-32724(gp)
  80f43c:	e0bffa17 	ldw	r2,-24(fp)
  80f440:	1887883a 	add	r3,r3,r2
  80f444:	00804034 	movhi	r2,256
  80f448:	10800004 	addi	r2,r2,0
  80f44c:	10c0072e 	bgeu	r2,r3,80f46c <sbrk+0x78>
  80f450:	e0bfff17 	ldw	r2,-4(fp)
  80f454:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  80f458:	e0bffc17 	ldw	r2,-16(fp)
  80f45c:	1001703a 	wrctl	status,r2
}
  80f460:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80f464:	00bfffc4 	movi	r2,-1
  80f468:	00000c06 	br	80f49c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80f46c:	d0a00b17 	ldw	r2,-32724(gp)
  80f470:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
  80f474:	d0e00b17 	ldw	r3,-32724(gp)
  80f478:	e0bffa17 	ldw	r2,-24(fp)
  80f47c:	1885883a 	add	r2,r3,r2
  80f480:	d0a00b15 	stw	r2,-32724(gp)
  80f484:	e0bfff17 	ldw	r2,-4(fp)
  80f488:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  80f48c:	e0bffb17 	ldw	r2,-20(fp)
  80f490:	1001703a 	wrctl	status,r2
}
  80f494:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80f498:	e0bffe17 	ldw	r2,-8(fp)
} 
  80f49c:	e037883a 	mov	sp,fp
  80f4a0:	df000017 	ldw	fp,0(sp)
  80f4a4:	dec00104 	addi	sp,sp,4
  80f4a8:	f800283a 	ret

0080f4ac <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
  80f4ac:	defffa04 	addi	sp,sp,-24
  80f4b0:	dfc00515 	stw	ra,20(sp)
  80f4b4:	df000415 	stw	fp,16(sp)
  80f4b8:	df000404 	addi	fp,sp,16
  80f4bc:	e13ffc15 	stw	r4,-16(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  80f4c0:	e0bffc17 	ldw	r2,-16(fp)
  80f4c4:	108007c4 	addi	r2,r2,31
  80f4c8:	1004d17a 	srli	r2,r2,5
  80f4cc:	e0bfff15 	stw	r2,-4(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
  80f4d0:	e0bfff17 	ldw	r2,-4(fp)
  80f4d4:	1004917a 	slli	r2,r2,5
  80f4d8:	e0bffe15 	stw	r2,-8(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
  80f4dc:	e17ffe17 	ldw	r5,-8(fp)
  80f4e0:	01000804 	movi	r4,32
  80f4e4:	0811f800 	call	811f80 <memalign>
  80f4e8:	e0bffd15 	stw	r2,-12(fp)

  if (ptr == NULL) {
  80f4ec:	e0bffd17 	ldw	r2,-12(fp)
  80f4f0:	1000021e 	bne	r2,zero,80f4fc <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
  80f4f4:	0005883a 	mov	r2,zero
  80f4f8:	00000506 	br	80f510 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
  80f4fc:	e17ffe17 	ldw	r5,-8(fp)
  80f500:	e13ffd17 	ldw	r4,-12(fp)
  80f504:	08112640 	call	811264 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
  80f508:	e0bffd17 	ldw	r2,-12(fp)
  80f50c:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
  80f510:	e037883a 	mov	sp,fp
  80f514:	dfc00117 	ldw	ra,4(sp)
  80f518:	df000017 	ldw	fp,0(sp)
  80f51c:	dec00204 	addi	sp,sp,8
  80f520:	f800283a 	ret

0080f524 <alt_get_errno>:
{
  80f524:	defffe04 	addi	sp,sp,-8
  80f528:	dfc00115 	stw	ra,4(sp)
  80f52c:	df000015 	stw	fp,0(sp)
  80f530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f534:	d0a00917 	ldw	r2,-32732(gp)
  80f538:	10000326 	beq	r2,zero,80f548 <alt_get_errno+0x24>
  80f53c:	d0a00917 	ldw	r2,-32732(gp)
  80f540:	103ee83a 	callr	r2
  80f544:	00000106 	br	80f54c <alt_get_errno+0x28>
  80f548:	d0a74604 	addi	r2,gp,-25320
}
  80f54c:	e037883a 	mov	sp,fp
  80f550:	dfc00117 	ldw	ra,4(sp)
  80f554:	df000017 	ldw	fp,0(sp)
  80f558:	dec00204 	addi	sp,sp,8
  80f55c:	f800283a 	ret

0080f560 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80f560:	defff904 	addi	sp,sp,-28
  80f564:	dfc00615 	stw	ra,24(sp)
  80f568:	df000515 	stw	fp,20(sp)
  80f56c:	df000504 	addi	fp,sp,20
  80f570:	e13ffd15 	stw	r4,-12(fp)
  80f574:	e17ffc15 	stw	r5,-16(fp)
  80f578:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f57c:	e0bffd17 	ldw	r2,-12(fp)
  80f580:	10000916 	blt	r2,zero,80f5a8 <write+0x48>
  80f584:	e0fffd17 	ldw	r3,-12(fp)
  80f588:	1805883a 	mov	r2,r3
  80f58c:	1085883a 	add	r2,r2,r2
  80f590:	10c5883a 	add	r2,r2,r3
  80f594:	100490ba 	slli	r2,r2,2
  80f598:	00c02074 	movhi	r3,129
  80f59c:	18cd6204 	addi	r3,r3,13704
  80f5a0:	10c5883a 	add	r2,r2,r3
  80f5a4:	00000106 	br	80f5ac <write+0x4c>
  80f5a8:	0005883a 	mov	r2,zero
  80f5ac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  80f5b0:	e0bfff17 	ldw	r2,-4(fp)
  80f5b4:	10002126 	beq	r2,zero,80f63c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80f5b8:	e0bfff17 	ldw	r2,-4(fp)
  80f5bc:	10800217 	ldw	r2,8(r2)
  80f5c0:	108000cc 	andi	r2,r2,3
  80f5c4:	10001826 	beq	r2,zero,80f628 <write+0xc8>
  80f5c8:	e0bfff17 	ldw	r2,-4(fp)
  80f5cc:	10800017 	ldw	r2,0(r2)
  80f5d0:	10800617 	ldw	r2,24(r2)
  80f5d4:	10001426 	beq	r2,zero,80f628 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80f5d8:	e0bfff17 	ldw	r2,-4(fp)
  80f5dc:	10800017 	ldw	r2,0(r2)
  80f5e0:	10800617 	ldw	r2,24(r2)
  80f5e4:	e0fffb17 	ldw	r3,-20(fp)
  80f5e8:	180d883a 	mov	r6,r3
  80f5ec:	e17ffc17 	ldw	r5,-16(fp)
  80f5f0:	e13fff17 	ldw	r4,-4(fp)
  80f5f4:	103ee83a 	callr	r2
  80f5f8:	e0bffe15 	stw	r2,-8(fp)
  80f5fc:	e0bffe17 	ldw	r2,-8(fp)
  80f600:	1000070e 	bge	r2,zero,80f620 <write+0xc0>
      {
        ALT_ERRNO = -rval;
  80f604:	080f5240 	call	80f524 <alt_get_errno>
  80f608:	1007883a 	mov	r3,r2
  80f60c:	e0bffe17 	ldw	r2,-8(fp)
  80f610:	0085c83a 	sub	r2,zero,r2
  80f614:	18800015 	stw	r2,0(r3)
        return -1;
  80f618:	00bfffc4 	movi	r2,-1
  80f61c:	00000c06 	br	80f650 <write+0xf0>
      }
      return rval;
  80f620:	e0bffe17 	ldw	r2,-8(fp)
  80f624:	00000a06 	br	80f650 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80f628:	080f5240 	call	80f524 <alt_get_errno>
  80f62c:	1007883a 	mov	r3,r2
  80f630:	00800344 	movi	r2,13
  80f634:	18800015 	stw	r2,0(r3)
  80f638:	00000406 	br	80f64c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80f63c:	080f5240 	call	80f524 <alt_get_errno>
  80f640:	1007883a 	mov	r3,r2
  80f644:	00801444 	movi	r2,81
  80f648:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f64c:	00bfffc4 	movi	r2,-1
}
  80f650:	e037883a 	mov	sp,fp
  80f654:	dfc00117 	ldw	ra,4(sp)
  80f658:	df000017 	ldw	fp,0(sp)
  80f65c:	dec00204 	addi	sp,sp,8
  80f660:	f800283a 	ret

0080f664 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80f664:	defffd04 	addi	sp,sp,-12
  80f668:	dfc00215 	stw	ra,8(sp)
  80f66c:	df000115 	stw	fp,4(sp)
  80f670:	df000104 	addi	fp,sp,4
  80f674:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80f678:	d1600604 	addi	r5,gp,-32744
  80f67c:	e13fff17 	ldw	r4,-4(fp)
  80f680:	08113640 	call	811364 <alt_dev_llist_insert>
}
  80f684:	e037883a 	mov	sp,fp
  80f688:	dfc00117 	ldw	ra,4(sp)
  80f68c:	df000017 	ldw	fp,0(sp)
  80f690:	dec00204 	addi	sp,sp,8
  80f694:	f800283a 	ret

0080f698 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80f698:	defffd04 	addi	sp,sp,-12
  80f69c:	dfc00215 	stw	ra,8(sp)
  80f6a0:	df000115 	stw	fp,4(sp)
  80f6a4:	df000104 	addi	fp,sp,4
  80f6a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80f6ac:	0811cc40 	call	811cc4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80f6b0:	00800044 	movi	r2,1
  80f6b4:	1001703a 	wrctl	status,r2
}
  80f6b8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
  80f6bc:	0001883a 	nop
  80f6c0:	e037883a 	mov	sp,fp
  80f6c4:	dfc00117 	ldw	ra,4(sp)
  80f6c8:	df000017 	ldw	fp,0(sp)
  80f6cc:	dec00204 	addi	sp,sp,8
  80f6d0:	f800283a 	ret

0080f6d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80f6d4:	defffd04 	addi	sp,sp,-12
  80f6d8:	dfc00215 	stw	ra,8(sp)
  80f6dc:	df000115 	stw	fp,4(sp)
  80f6e0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  80f6e4:	01c0fa04 	movi	r7,1000
  80f6e8:	01800084 	movi	r6,2
  80f6ec:	000b883a 	mov	r5,zero
  80f6f0:	01004134 	movhi	r4,260
  80f6f4:	21041804 	addi	r4,r4,4192
  80f6f8:	0810e480 	call	810e48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  80f6fc:	00804134 	movhi	r2,260
  80f700:	10840004 	addi	r2,r2,4096
  80f704:	d0a74c15 	stw	r2,-25296(gp)
  80f708:	0080bef4 	movhi	r2,763
  80f70c:	10bc2004 	addi	r2,r2,-3968
  80f710:	d0a74d15 	stw	r2,-25292(gp)
    ALTERA_AVALON_DMA_INIT ( DMA_0, dma_0);
  80f714:	00800184 	movi	r2,6
  80f718:	d8800015 	stw	r2,0(sp)
  80f71c:	000f883a 	mov	r7,zero
  80f720:	01804134 	movhi	r6,260
  80f724:	31842004 	addi	r6,r6,4224
  80f728:	01402074 	movhi	r5,129
  80f72c:	294df204 	addi	r5,r5,14280
  80f730:	01002074 	movhi	r4,129
  80f734:	210deb04 	addi	r4,r4,14252
  80f738:	08102a40 	call	8102a4 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80f73c:	01800044 	movi	r6,1
  80f740:	000b883a 	mov	r5,zero
  80f744:	01002074 	movhi	r4,129
  80f748:	210e0304 	addi	r4,r4,14348
  80f74c:	08104bc0 	call	8104bc <altera_avalon_jtag_uart_init>
  80f750:	01002074 	movhi	r4,129
  80f754:	210df904 	addi	r4,r4,14308
  80f758:	080f6640 	call	80f664 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
  80f75c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  80f760:	0001883a 	nop
}
  80f764:	0001883a 	nop
  80f768:	e037883a 	mov	sp,fp
  80f76c:	dfc00117 	ldw	ra,4(sp)
  80f770:	df000017 	ldw	fp,0(sp)
  80f774:	dec00204 	addi	sp,sp,8
  80f778:	f800283a 	ret

0080f77c <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
  80f77c:	defffd04 	addi	sp,sp,-12
  80f780:	dfc00215 	stw	ra,8(sp)
  80f784:	df000115 	stw	fp,4(sp)
  80f788:	df000104 	addi	fp,sp,4
  80f78c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
  80f790:	d1600e04 	addi	r5,gp,-32712
  80f794:	e13fff17 	ldw	r4,-4(fp)
  80f798:	08113640 	call	811364 <alt_dev_llist_insert>
}
  80f79c:	e037883a 	mov	sp,fp
  80f7a0:	dfc00117 	ldw	ra,4(sp)
  80f7a4:	df000017 	ldw	fp,0(sp)
  80f7a8:	dec00204 	addi	sp,sp,8
  80f7ac:	f800283a 	ret

0080f7b0 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
  80f7b0:	defffd04 	addi	sp,sp,-12
  80f7b4:	dfc00215 	stw	ra,8(sp)
  80f7b8:	df000115 	stw	fp,4(sp)
  80f7bc:	df000104 	addi	fp,sp,4
  80f7c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
  80f7c4:	d1600c04 	addi	r5,gp,-32720
  80f7c8:	e13fff17 	ldw	r4,-4(fp)
  80f7cc:	08113640 	call	811364 <alt_dev_llist_insert>
}
  80f7d0:	e037883a 	mov	sp,fp
  80f7d4:	dfc00117 	ldw	ra,4(sp)
  80f7d8:	df000017 	ldw	fp,0(sp)
  80f7dc:	dec00204 	addi	sp,sp,8
  80f7e0:	f800283a 	ret

0080f7e4 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  80f7e4:	defffc04 	addi	sp,sp,-16
  80f7e8:	df000315 	stw	fp,12(sp)
  80f7ec:	df000304 	addi	fp,sp,12
  80f7f0:	e13ffd15 	stw	r4,-12(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  80f7f4:	e0bffd17 	ldw	r2,-12(fp)
  80f7f8:	10c00117 	ldw	r3,4(r2)
  80f7fc:	e0bffd17 	ldw	r2,-12(fp)
  80f800:	10800217 	ldw	r2,8(r2)
  80f804:	18802e26 	beq	r3,r2,80f8c0 <alt_avalon_dma_launch_bidir+0xdc>
  80f808:	e0bffd17 	ldw	r2,-12(fp)
  80f80c:	10c00317 	ldw	r3,12(r2)
  80f810:	e0bffd17 	ldw	r2,-12(fp)
  80f814:	10800417 	ldw	r2,16(r2)
  80f818:	18802926 	beq	r3,r2,80f8c0 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
  80f81c:	e0bffd17 	ldw	r2,-12(fp)
  80f820:	00c00044 	movi	r3,1
  80f824:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
  80f828:	e0bffd17 	ldw	r2,-12(fp)
  80f82c:	10800117 	ldw	r2,4(r2)
  80f830:	1004913a 	slli	r2,r2,4
  80f834:	10800904 	addi	r2,r2,36
  80f838:	e0fffd17 	ldw	r3,-12(fp)
  80f83c:	1885883a 	add	r2,r3,r2
  80f840:	e0bfff15 	stw	r2,-4(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
  80f844:	e0bffd17 	ldw	r2,-12(fp)
  80f848:	10800317 	ldw	r2,12(r2)
  80f84c:	1004913a 	slli	r2,r2,4
  80f850:	10801904 	addi	r2,r2,100
  80f854:	e0fffd17 	ldw	r3,-12(fp)
  80f858:	1885883a 	add	r2,r3,r2
  80f85c:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  80f860:	e0bffd17 	ldw	r2,-12(fp)
  80f864:	10800017 	ldw	r2,0(r2)
  80f868:	10800104 	addi	r2,r2,4
  80f86c:	e0ffff17 	ldw	r3,-4(fp)
  80f870:	18c00017 	ldw	r3,0(r3)
  80f874:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  80f878:	e0bffd17 	ldw	r2,-12(fp)
  80f87c:	10800017 	ldw	r2,0(r2)
  80f880:	10800204 	addi	r2,r2,8
  80f884:	e0fffe17 	ldw	r3,-8(fp)
  80f888:	18c00017 	ldw	r3,0(r3)
  80f88c:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
  80f890:	e0bffd17 	ldw	r2,-12(fp)
  80f894:	10800017 	ldw	r2,0(r2)
  80f898:	11000304 	addi	r4,r2,12
  80f89c:	e0bfff17 	ldw	r2,-4(fp)
  80f8a0:	11400117 	ldw	r5,4(r2)
  80f8a4:	e0bffe17 	ldw	r2,-8(fp)
  80f8a8:	10c00117 	ldw	r3,4(r2)
  80f8ac:	2805883a 	mov	r2,r5
  80f8b0:	1880012e 	bgeu	r3,r2,80f8b8 <alt_avalon_dma_launch_bidir+0xd4>
  80f8b4:	1805883a 	mov	r2,r3
  80f8b8:	20800035 	stwio	r2,0(r4)
  80f8bc:	00000306 	br	80f8cc <alt_avalon_dma_launch_bidir+0xe8>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
  80f8c0:	e0bffd17 	ldw	r2,-12(fp)
  80f8c4:	10000815 	stw	zero,32(r2)
  }
}
  80f8c8:	0001883a 	nop
  80f8cc:	0001883a 	nop
  80f8d0:	e037883a 	mov	sp,fp
  80f8d4:	df000017 	ldw	fp,0(sp)
  80f8d8:	dec00104 	addi	sp,sp,4
  80f8dc:	f800283a 	ret

0080f8e0 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
  80f8e0:	defffd04 	addi	sp,sp,-12
  80f8e4:	df000215 	stw	fp,8(sp)
  80f8e8:	df000204 	addi	fp,sp,8
  80f8ec:	e13ffe15 	stw	r4,-8(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
  80f8f0:	e0bffe17 	ldw	r2,-8(fp)
  80f8f4:	10c00117 	ldw	r3,4(r2)
  80f8f8:	e0bffe17 	ldw	r2,-8(fp)
  80f8fc:	10800217 	ldw	r2,8(r2)
  80f900:	18801726 	beq	r3,r2,80f960 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
  80f904:	e0bffe17 	ldw	r2,-8(fp)
  80f908:	00c00044 	movi	r3,1
  80f90c:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
  80f910:	e0bffe17 	ldw	r2,-8(fp)
  80f914:	10800117 	ldw	r2,4(r2)
  80f918:	1004913a 	slli	r2,r2,4
  80f91c:	10800904 	addi	r2,r2,36
  80f920:	e0fffe17 	ldw	r3,-8(fp)
  80f924:	1885883a 	add	r2,r3,r2
  80f928:	e0bfff15 	stw	r2,-4(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  80f92c:	e0bffe17 	ldw	r2,-8(fp)
  80f930:	10800017 	ldw	r2,0(r2)
  80f934:	10800104 	addi	r2,r2,4
  80f938:	e0ffff17 	ldw	r3,-4(fp)
  80f93c:	18c00017 	ldw	r3,0(r3)
  80f940:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  80f944:	e0bffe17 	ldw	r2,-8(fp)
  80f948:	10800017 	ldw	r2,0(r2)
  80f94c:	10800304 	addi	r2,r2,12
  80f950:	e0ffff17 	ldw	r3,-4(fp)
  80f954:	18c00117 	ldw	r3,4(r3)
  80f958:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
  80f95c:	00000206 	br	80f968 <alt_avalon_dma_launch_txonly+0x88>
    priv->active = 0;
  80f960:	e0bffe17 	ldw	r2,-8(fp)
  80f964:	10000815 	stw	zero,32(r2)
}
  80f968:	0001883a 	nop
  80f96c:	e037883a 	mov	sp,fp
  80f970:	df000017 	ldw	fp,0(sp)
  80f974:	dec00104 	addi	sp,sp,4
  80f978:	f800283a 	ret

0080f97c <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
  80f97c:	defffd04 	addi	sp,sp,-12
  80f980:	df000215 	stw	fp,8(sp)
  80f984:	df000204 	addi	fp,sp,8
  80f988:	e13ffe15 	stw	r4,-8(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
  80f98c:	e0bffe17 	ldw	r2,-8(fp)
  80f990:	10c00317 	ldw	r3,12(r2)
  80f994:	e0bffe17 	ldw	r2,-8(fp)
  80f998:	10800417 	ldw	r2,16(r2)
  80f99c:	18801726 	beq	r3,r2,80f9fc <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
  80f9a0:	e0bffe17 	ldw	r2,-8(fp)
  80f9a4:	00c00044 	movi	r3,1
  80f9a8:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
  80f9ac:	e0bffe17 	ldw	r2,-8(fp)
  80f9b0:	10800317 	ldw	r2,12(r2)
  80f9b4:	1004913a 	slli	r2,r2,4
  80f9b8:	10801904 	addi	r2,r2,100
  80f9bc:	e0fffe17 	ldw	r3,-8(fp)
  80f9c0:	1885883a 	add	r2,r3,r2
  80f9c4:	e0bfff15 	stw	r2,-4(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  80f9c8:	e0bffe17 	ldw	r2,-8(fp)
  80f9cc:	10800017 	ldw	r2,0(r2)
  80f9d0:	10800204 	addi	r2,r2,8
  80f9d4:	e0ffff17 	ldw	r3,-4(fp)
  80f9d8:	18c00017 	ldw	r3,0(r3)
  80f9dc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  80f9e0:	e0bffe17 	ldw	r2,-8(fp)
  80f9e4:	10800017 	ldw	r2,0(r2)
  80f9e8:	10800304 	addi	r2,r2,12
  80f9ec:	e0ffff17 	ldw	r3,-4(fp)
  80f9f0:	18c00117 	ldw	r3,4(r3)
  80f9f4:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
  80f9f8:	00000206 	br	80fa04 <alt_avalon_dma_launch_rxonly+0x88>
    priv->active = 0;
  80f9fc:	e0bffe17 	ldw	r2,-8(fp)
  80fa00:	10000815 	stw	zero,32(r2)
}
  80fa04:	0001883a 	nop
  80fa08:	e037883a 	mov	sp,fp
  80fa0c:	df000017 	ldw	fp,0(sp)
  80fa10:	dec00104 	addi	sp,sp,4
  80fa14:	f800283a 	ret

0080fa18 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
  80fa18:	defffa04 	addi	sp,sp,-24
  80fa1c:	df000515 	stw	fp,20(sp)
  80fa20:	df000504 	addi	fp,sp,20
  80fa24:	e13ffd15 	stw	r4,-12(fp)
  80fa28:	e17ffc15 	stw	r5,-16(fp)
  80fa2c:	e1bffb15 	stw	r6,-20(fp)
  int     status = 0;
  80fa30:	e03fff15 	stw	zero,-4(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
  80fa34:	e0bffd17 	ldw	r2,-12(fp)
  80fa38:	10c00117 	ldw	r3,4(r2)
  80fa3c:	e0bffd17 	ldw	r2,-12(fp)
  80fa40:	10800217 	ldw	r2,8(r2)
  80fa44:	18800a1e 	bne	r3,r2,80fa70 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
  80fa48:	e0bffd17 	ldw	r2,-12(fp)
  80fa4c:	10c00317 	ldw	r3,12(r2)
  80fa50:	e0bffd17 	ldw	r2,-12(fp)
  80fa54:	10800417 	ldw	r2,16(r2)
  if ((priv->tx_start != priv->tx_end) ||
  80fa58:	1880051e 	bne	r3,r2,80fa70 <alt_avalon_dma_ioctl+0x58>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  80fa5c:	e0bffd17 	ldw	r2,-12(fp)
  80fa60:	10800017 	ldw	r2,0(r2)
  80fa64:	10800304 	addi	r2,r2,12
  80fa68:	10800037 	ldwio	r2,0(r2)
      (priv->rx_start != priv->rx_end) ||
  80fa6c:	10000226 	beq	r2,zero,80fa78 <alt_avalon_dma_ioctl+0x60>
  {
    return -EIO;
  80fa70:	00bffec4 	movi	r2,-5
  80fa74:	0000b806 	br	80fd58 <alt_avalon_dma_ioctl+0x340>
  80fa78:	e0bffc17 	ldw	r2,-16(fp)
  80fa7c:	108002a8 	cmpgeui	r2,r2,10
  80fa80:	1000771e 	bne	r2,zero,80fc60 <alt_avalon_dma_ioctl+0x248>
  80fa84:	e0bffc17 	ldw	r2,-16(fp)
  80fa88:	100690ba 	slli	r3,r2,2
  80fa8c:	00802074 	movhi	r2,129
  80fa90:	1885883a 	add	r2,r3,r2
  80fa94:	10bea717 	ldw	r2,-1380(r2)
  80fa98:	1000683a 	jmp	r2
  80fa9c:	0080fc60 	cmpeqi	r2,zero,1009
  80faa0:	0080fac4 	movi	r2,1003
  80faa4:	0080fb1c 	xori	r2,zero,1004
  80faa8:	0080fb48 	cmpgei	r2,zero,1005
  80faac:	0080fba0 	cmpeqi	r2,zero,1006
  80fab0:	0080fbcc 	andi	r2,zero,1007
  80fab4:	0080fbe8 	cmpgeui	r2,zero,1007
  80fab8:	0080fc08 	cmpgei	r2,zero,1008
  80fabc:	0080fc28 	cmpgeui	r2,zero,1008
  80fac0:	0080fc48 	cmpgei	r2,zero,1009
  /* Now process the ioctl. */

  switch (req)
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
  80fac4:	e0bffd17 	ldw	r2,-12(fp)
  80fac8:	10800517 	ldw	r2,20(r2)
  80facc:	1080100c 	andi	r2,r2,64
  80fad0:	10000f1e 	bne	r2,zero,80fb10 <alt_avalon_dma_ioctl+0xf8>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
  80fad4:	e0bffd17 	ldw	r2,-12(fp)
  80fad8:	10800017 	ldw	r2,0(r2)
  80fadc:	10800104 	addi	r2,r2,4
  80fae0:	e0fffb17 	ldw	r3,-20(fp)
  80fae4:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
  80fae8:	e0bffd17 	ldw	r2,-12(fp)
  80faec:	10800517 	ldw	r2,20(r2)
  80faf0:	10c00814 	ori	r3,r2,32
  80faf4:	e0bffd17 	ldw	r2,-12(fp)
  80faf8:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
  80fafc:	e0fffd17 	ldw	r3,-12(fp)
  80fb00:	00802074 	movhi	r2,129
  80fb04:	10be5f04 	addi	r2,r2,-1668
  80fb08:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
  80fb0c:	00005606 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
      status = -EIO;
  80fb10:	00bffec4 	movi	r2,-5
  80fb14:	e0bfff15 	stw	r2,-4(fp)
    break;
  80fb18:	00005306 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
  80fb1c:	e0bffd17 	ldw	r2,-12(fp)
  80fb20:	10c00517 	ldw	r3,20(r2)
  80fb24:	00bff7c4 	movi	r2,-33
  80fb28:	1886703a 	and	r3,r3,r2
  80fb2c:	e0bffd17 	ldw	r2,-12(fp)
  80fb30:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  80fb34:	e0fffd17 	ldw	r3,-12(fp)
  80fb38:	00802074 	movhi	r2,129
  80fb3c:	10bdf904 	addi	r2,r2,-2076
  80fb40:	18800715 	stw	r2,28(r3)
    break;
  80fb44:	00004806 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
  80fb48:	e0bffd17 	ldw	r2,-12(fp)
  80fb4c:	10800517 	ldw	r2,20(r2)
  80fb50:	1080080c 	andi	r2,r2,32
  80fb54:	10000f1e 	bne	r2,zero,80fb94 <alt_avalon_dma_ioctl+0x17c>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
  80fb58:	e0bffd17 	ldw	r2,-12(fp)
  80fb5c:	10800017 	ldw	r2,0(r2)
  80fb60:	10800204 	addi	r2,r2,8
  80fb64:	e0fffb17 	ldw	r3,-20(fp)
  80fb68:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
  80fb6c:	e0bffd17 	ldw	r2,-12(fp)
  80fb70:	10800517 	ldw	r2,20(r2)
  80fb74:	10c01014 	ori	r3,r2,64
  80fb78:	e0bffd17 	ldw	r2,-12(fp)
  80fb7c:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
  80fb80:	e0fffd17 	ldw	r3,-12(fp)
  80fb84:	00802074 	movhi	r2,129
  80fb88:	10be3804 	addi	r2,r2,-1824
  80fb8c:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
  80fb90:	00003506 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
      status = -EIO;
  80fb94:	00bffec4 	movi	r2,-5
  80fb98:	e0bfff15 	stw	r2,-4(fp)
    break;
  80fb9c:	00003206 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
  80fba0:	e0bffd17 	ldw	r2,-12(fp)
  80fba4:	10c00517 	ldw	r3,20(r2)
  80fba8:	00bfefc4 	movi	r2,-65
  80fbac:	1886703a 	and	r3,r3,r2
  80fbb0:	e0bffd17 	ldw	r2,-12(fp)
  80fbb4:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  80fbb8:	e0fffd17 	ldw	r3,-12(fp)
  80fbbc:	00802074 	movhi	r2,129
  80fbc0:	10bdf904 	addi	r2,r2,-2076
  80fbc4:	18800715 	stw	r2,28(r3)
    break;
  80fbc8:	00002706 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80fbcc:	e0bffd17 	ldw	r2,-12(fp)
  80fbd0:	10c00517 	ldw	r3,20(r2)
  80fbd4:	00bffc04 	movi	r2,-16
  80fbd8:	1886703a 	and	r3,r3,r2
  80fbdc:	e0bffd17 	ldw	r2,-12(fp)
  80fbe0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
  80fbe4:	00002006 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80fbe8:	e0bffd17 	ldw	r2,-12(fp)
  80fbec:	10c00517 	ldw	r3,20(r2)
  80fbf0:	00bffc04 	movi	r2,-16
  80fbf4:	1884703a 	and	r2,r3,r2
  80fbf8:	10c00054 	ori	r3,r2,1
  80fbfc:	e0bffd17 	ldw	r2,-12(fp)
  80fc00:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
  80fc04:	00001806 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80fc08:	e0bffd17 	ldw	r2,-12(fp)
  80fc0c:	10c00517 	ldw	r3,20(r2)
  80fc10:	00bffc04 	movi	r2,-16
  80fc14:	1884703a 	and	r2,r3,r2
  80fc18:	10c000d4 	ori	r3,r2,3
  80fc1c:	e0bffd17 	ldw	r2,-12(fp)
  80fc20:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
  80fc24:	00001006 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80fc28:	e0bffd17 	ldw	r2,-12(fp)
  80fc2c:	10c00517 	ldw	r3,20(r2)
  80fc30:	00bffc04 	movi	r2,-16
  80fc34:	1884703a 	and	r2,r3,r2
  80fc38:	10c001d4 	ori	r3,r2,7
  80fc3c:	e0bffd17 	ldw	r2,-12(fp)
  80fc40:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
  80fc44:	00000806 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80fc48:	e0bffd17 	ldw	r2,-12(fp)
  80fc4c:	10800517 	ldw	r2,20(r2)
  80fc50:	10c003d4 	ori	r3,r2,15
  80fc54:	e0bffd17 	ldw	r2,-12(fp)
  80fc58:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
  80fc5c:	00000206 	br	80fc68 <alt_avalon_dma_ioctl+0x250>
  default:
    status = -ENOTTY;
  80fc60:	00bff9c4 	movi	r2,-25
  80fc64:	e0bfff15 	stw	r2,-4(fp)
  }

  if (!status)
  80fc68:	e0bfff17 	ldw	r2,-4(fp)
  80fc6c:	1000391e 	bne	r2,zero,80fd54 <alt_avalon_dma_ioctl+0x33c>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
  80fc70:	e0bffd17 	ldw	r2,-12(fp)
  80fc74:	10800517 	ldw	r2,20(r2)
  80fc78:	108003cc 	andi	r2,r2,15
  80fc7c:	10c001e0 	cmpeqi	r3,r2,7
  80fc80:	1800131e 	bne	r3,zero,80fcd0 <alt_avalon_dma_ioctl+0x2b8>
  80fc84:	10c00228 	cmpgeui	r3,r2,8
  80fc88:	1800141e 	bne	r3,zero,80fcdc <alt_avalon_dma_ioctl+0x2c4>
  80fc8c:	10c000e0 	cmpeqi	r3,r2,3
  80fc90:	18000c1e 	bne	r3,zero,80fcc4 <alt_avalon_dma_ioctl+0x2ac>
  80fc94:	10c00128 	cmpgeui	r3,r2,4
  80fc98:	1800101e 	bne	r3,zero,80fcdc <alt_avalon_dma_ioctl+0x2c4>
  80fc9c:	10000326 	beq	r2,zero,80fcac <alt_avalon_dma_ioctl+0x294>
  80fca0:	10800060 	cmpeqi	r2,r2,1
  80fca4:	1000041e 	bne	r2,zero,80fcb8 <alt_avalon_dma_ioctl+0x2a0>
  80fca8:	00000c06 	br	80fcdc <alt_avalon_dma_ioctl+0x2c4>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
  80fcac:	00800044 	movi	r2,1
  80fcb0:	e0bffe15 	stw	r2,-8(fp)
       break;
  80fcb4:	00000b06 	br	80fce4 <alt_avalon_dma_ioctl+0x2cc>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
  80fcb8:	00800084 	movi	r2,2
  80fcbc:	e0bffe15 	stw	r2,-8(fp)
       break;
  80fcc0:	00000806 	br	80fce4 <alt_avalon_dma_ioctl+0x2cc>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
  80fcc4:	00800104 	movi	r2,4
  80fcc8:	e0bffe15 	stw	r2,-8(fp)
       break;
  80fccc:	00000506 	br	80fce4 <alt_avalon_dma_ioctl+0x2cc>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
  80fcd0:	00810004 	movi	r2,1024
  80fcd4:	e0bffe15 	stw	r2,-8(fp)
       break;
  80fcd8:	00000206 	br	80fce4 <alt_avalon_dma_ioctl+0x2cc>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
  80fcdc:	00820004 	movi	r2,2048
  80fce0:	e0bffe15 	stw	r2,-8(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
  80fce4:	e0bffd17 	ldw	r2,-12(fp)
  80fce8:	10800517 	ldw	r2,20(r2)
  80fcec:	1080080c 	andi	r2,r2,32
  80fcf0:	10000726 	beq	r2,zero,80fd10 <alt_avalon_dma_ioctl+0x2f8>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80fcf4:	e0bffd17 	ldw	r2,-12(fp)
  80fcf8:	10800017 	ldw	r2,0(r2)
  80fcfc:	10800604 	addi	r2,r2,24
  80fd00:	e0fffe17 	ldw	r3,-8(fp)
  80fd04:	18c07e14 	ori	r3,r3,504
  80fd08:	10c00035 	stwio	r3,0(r2)
  80fd0c:	00001106 	br	80fd54 <alt_avalon_dma_ioctl+0x33c>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
  80fd10:	e0bffd17 	ldw	r2,-12(fp)
  80fd14:	10800517 	ldw	r2,20(r2)
  80fd18:	1080100c 	andi	r2,r2,64
  80fd1c:	10000726 	beq	r2,zero,80fd3c <alt_avalon_dma_ioctl+0x324>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80fd20:	e0bffd17 	ldw	r2,-12(fp)
  80fd24:	10800017 	ldw	r2,0(r2)
  80fd28:	10800604 	addi	r2,r2,24
  80fd2c:	e0fffe17 	ldw	r3,-8(fp)
  80fd30:	18c0be14 	ori	r3,r3,760
  80fd34:	10c00035 	stwio	r3,0(r2)
  80fd38:	00000606 	br	80fd54 <alt_avalon_dma_ioctl+0x33c>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80fd3c:	e0bffd17 	ldw	r2,-12(fp)
  80fd40:	10800017 	ldw	r2,0(r2)
  80fd44:	10800604 	addi	r2,r2,24
  80fd48:	e0fffe17 	ldw	r3,-8(fp)
  80fd4c:	18c03e14 	ori	r3,r3,248
  80fd50:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
  80fd54:	e0bfff17 	ldw	r2,-4(fp)
}
  80fd58:	e037883a 	mov	sp,fp
  80fd5c:	df000017 	ldw	fp,0(sp)
  80fd60:	dec00104 	addi	sp,sp,4
  80fd64:	f800283a 	ret

0080fd68 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
  80fd68:	defffb04 	addi	sp,sp,-20
  80fd6c:	dfc00415 	stw	ra,16(sp)
  80fd70:	df000315 	stw	fp,12(sp)
  80fd74:	df000304 	addi	fp,sp,12
  80fd78:	e13fff15 	stw	r4,-4(fp)
  80fd7c:	e17ffe15 	stw	r5,-8(fp)
  80fd80:	e1bffd15 	stw	r6,-12(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
  80fd84:	e0bfff17 	ldw	r2,-4(fp)
  80fd88:	10800617 	ldw	r2,24(r2)
  80fd8c:	e1bffd17 	ldw	r6,-12(fp)
  80fd90:	e17ffe17 	ldw	r5,-8(fp)
  80fd94:	1009883a 	mov	r4,r2
  80fd98:	080fa180 	call	80fa18 <alt_avalon_dma_ioctl>
             req,
             arg);
}
  80fd9c:	e037883a 	mov	sp,fp
  80fda0:	dfc00117 	ldw	ra,4(sp)
  80fda4:	df000017 	ldw	fp,0(sp)
  80fda8:	dec00204 	addi	sp,sp,8
  80fdac:	f800283a 	ret

0080fdb0 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
  80fdb0:	defffb04 	addi	sp,sp,-20
  80fdb4:	dfc00415 	stw	ra,16(sp)
  80fdb8:	df000315 	stw	fp,12(sp)
  80fdbc:	df000304 	addi	fp,sp,12
  80fdc0:	e13fff15 	stw	r4,-4(fp)
  80fdc4:	e17ffe15 	stw	r5,-8(fp)
  80fdc8:	e1bffd15 	stw	r6,-12(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
  80fdcc:	e0bfff17 	ldw	r2,-4(fp)
  80fdd0:	10800617 	ldw	r2,24(r2)
  80fdd4:	e1bffd17 	ldw	r6,-12(fp)
  80fdd8:	e17ffe17 	ldw	r5,-8(fp)
  80fddc:	1009883a 	mov	r4,r2
  80fde0:	080fa180 	call	80fa18 <alt_avalon_dma_ioctl>
             req,
             arg);
}
  80fde4:	e037883a 	mov	sp,fp
  80fde8:	dfc00117 	ldw	ra,4(sp)
  80fdec:	df000017 	ldw	fp,0(sp)
  80fdf0:	dec00204 	addi	sp,sp,8
  80fdf4:	f800283a 	ret

0080fdf8 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
  80fdf8:	defff404 	addi	sp,sp,-48
  80fdfc:	dfc00b15 	stw	ra,44(sp)
  80fe00:	df000a15 	stw	fp,40(sp)
  80fe04:	df000a04 	addi	fp,sp,40
  80fe08:	e13ff915 	stw	r4,-28(fp)
  80fe0c:	e17ff815 	stw	r5,-32(fp)
  80fe10:	e1bff715 	stw	r6,-36(fp)
  80fe14:	e1fff615 	stw	r7,-40(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
  80fe18:	e0bff917 	ldw	r2,-28(fp)
  80fe1c:	10800617 	ldw	r2,24(r2)
  80fe20:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  80fe24:	e0bfff17 	ldw	r2,-4(fp)
  80fe28:	10800517 	ldw	r2,20(r2)
  80fe2c:	108003cc 	andi	r2,r2,15
  80fe30:	e0bffe15 	stw	r2,-8(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
  80fe34:	e0fff817 	ldw	r3,-32(fp)
  80fe38:	e0bffe17 	ldw	r2,-8(fp)
  80fe3c:	1884703a 	and	r2,r3,r2
  80fe40:	1000081e 	bne	r2,zero,80fe64 <alt_avalon_dma_prepare+0x6c>
  80fe44:	e0fff717 	ldw	r3,-36(fp)
  80fe48:	e0bffe17 	ldw	r2,-8(fp)
  80fe4c:	1884703a 	and	r2,r3,r2
  80fe50:	1000041e 	bne	r2,zero,80fe64 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
  80fe54:	e0bfff17 	ldw	r2,-4(fp)
  80fe58:	10c00617 	ldw	r3,24(r2)
  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
  80fe5c:	e0bff717 	ldw	r2,-36(fp)
  80fe60:	1880022e 	bgeu	r3,r2,80fe6c <alt_avalon_dma_prepare+0x74>
  {
    return -EINVAL;
  80fe64:	00bffa84 	movi	r2,-22
  80fe68:	00002c06 	br	80ff1c <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
  80fe6c:	e0bfff17 	ldw	r2,-4(fp)
  80fe70:	10800317 	ldw	r2,12(r2)
  80fe74:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->rx_end;
  80fe78:	e0bfff17 	ldw	r2,-4(fp)
  80fe7c:	10800417 	ldw	r2,16(r2)
  80fe80:	e0bffc15 	stw	r2,-16(fp)
  slot  = &priv->rx_buf[end];
  80fe84:	e0bffc17 	ldw	r2,-16(fp)
  80fe88:	1004913a 	slli	r2,r2,4
  80fe8c:	10801904 	addi	r2,r2,100
  80fe90:	e0ffff17 	ldw	r3,-4(fp)
  80fe94:	1885883a 	add	r2,r3,r2
  80fe98:	e0bffb15 	stw	r2,-20(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80fe9c:	e0bffc17 	ldw	r2,-16(fp)
  80fea0:	10800044 	addi	r2,r2,1
  80fea4:	108000cc 	andi	r2,r2,3
  80fea8:	e0bffa15 	stw	r2,-24(fp)

  if (next == start)
  80feac:	e0fffa17 	ldw	r3,-24(fp)
  80feb0:	e0bffd17 	ldw	r2,-12(fp)
  80feb4:	1880021e 	bne	r3,r2,80fec0 <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
  80feb8:	00bff904 	movi	r2,-28
  80febc:	00001706 	br	80ff1c <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
  80fec0:	e0bffb17 	ldw	r2,-20(fp)
  80fec4:	e0fff817 	ldw	r3,-32(fp)
  80fec8:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
  80fecc:	e0bffb17 	ldw	r2,-20(fp)
  80fed0:	e0fff717 	ldw	r3,-36(fp)
  80fed4:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
  80fed8:	e0bffb17 	ldw	r2,-20(fp)
  80fedc:	e0fff617 	ldw	r3,-40(fp)
  80fee0:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
  80fee4:	e0bffb17 	ldw	r2,-20(fp)
  80fee8:	e0c00217 	ldw	r3,8(fp)
  80feec:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
  80fef0:	e0bfff17 	ldw	r2,-4(fp)
  80fef4:	e0fffa17 	ldw	r3,-24(fp)
  80fef8:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
  80fefc:	e0bfff17 	ldw	r2,-4(fp)
  80ff00:	10800817 	ldw	r2,32(r2)
  80ff04:	1000041e 	bne	r2,zero,80ff18 <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
  80ff08:	e0bfff17 	ldw	r2,-4(fp)
  80ff0c:	10800717 	ldw	r2,28(r2)
  80ff10:	e13fff17 	ldw	r4,-4(fp)
  80ff14:	103ee83a 	callr	r2
  }

  return 0;
  80ff18:	0005883a 	mov	r2,zero
}
  80ff1c:	e037883a 	mov	sp,fp
  80ff20:	dfc00117 	ldw	ra,4(sp)
  80ff24:	df000017 	ldw	fp,0(sp)
  80ff28:	dec00204 	addi	sp,sp,8
  80ff2c:	f800283a 	ret

0080ff30 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
  80ff30:	defffb04 	addi	sp,sp,-20
  80ff34:	df000415 	stw	fp,16(sp)
  80ff38:	df000404 	addi	fp,sp,16
  80ff3c:	e13ffc15 	stw	r4,-16(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  80ff40:	e0bffc17 	ldw	r2,-16(fp)
  80ff44:	10800617 	ldw	r2,24(r2)
  80ff48:	e0bfff15 	stw	r2,-4(fp)

  start = priv->tx_start;
  80ff4c:	e0bfff17 	ldw	r2,-4(fp)
  80ff50:	10800117 	ldw	r2,4(r2)
  80ff54:	e0bffe15 	stw	r2,-8(fp)
  end   = priv->tx_end;
  80ff58:	e0bfff17 	ldw	r2,-4(fp)
  80ff5c:	10800217 	ldw	r2,8(r2)
  80ff60:	e0bffd15 	stw	r2,-12(fp)

  return (start > end) ? start - end - 1 :
  80ff64:	e0bffe17 	ldw	r2,-8(fp)
  80ff68:	e0fffd17 	ldw	r3,-12(fp)
  80ff6c:	1880052e 	bgeu	r3,r2,80ff84 <alt_avalon_dma_space+0x54>
  80ff70:	e0fffe17 	ldw	r3,-8(fp)
  80ff74:	e0bffd17 	ldw	r2,-12(fp)
  80ff78:	1885c83a 	sub	r2,r3,r2
  80ff7c:	10bfffc4 	addi	r2,r2,-1
  80ff80:	00000406 	br	80ff94 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
  80ff84:	e0fffe17 	ldw	r3,-8(fp)
  80ff88:	e0bffd17 	ldw	r2,-12(fp)
  80ff8c:	1885c83a 	sub	r2,r3,r2
  80ff90:	108000c4 	addi	r2,r2,3
}
  80ff94:	e037883a 	mov	sp,fp
  80ff98:	df000017 	ldw	fp,0(sp)
  80ff9c:	dec00104 	addi	sp,sp,4
  80ffa0:	f800283a 	ret

0080ffa4 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
  80ffa4:	defff404 	addi	sp,sp,-48
  80ffa8:	dfc00b15 	stw	ra,44(sp)
  80ffac:	df000a15 	stw	fp,40(sp)
  80ffb0:	df000a04 	addi	fp,sp,40
  80ffb4:	e13ff915 	stw	r4,-28(fp)
  80ffb8:	e17ff815 	stw	r5,-32(fp)
  80ffbc:	e1bff715 	stw	r6,-36(fp)
  80ffc0:	e1fff615 	stw	r7,-40(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  80ffc4:	e0bff917 	ldw	r2,-28(fp)
  80ffc8:	10800617 	ldw	r2,24(r2)
  80ffcc:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  80ffd0:	e0bfff17 	ldw	r2,-4(fp)
  80ffd4:	10800517 	ldw	r2,20(r2)
  80ffd8:	108003cc 	andi	r2,r2,15
  80ffdc:	e0bffe15 	stw	r2,-8(fp)

  if ((((alt_u32) from) & align_mask) ||
  80ffe0:	e0fff817 	ldw	r3,-32(fp)
  80ffe4:	e0bffe17 	ldw	r2,-8(fp)
  80ffe8:	1884703a 	and	r2,r3,r2
  80ffec:	1000081e 	bne	r2,zero,810010 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
  80fff0:	e0fff717 	ldw	r3,-36(fp)
  80fff4:	e0bffe17 	ldw	r2,-8(fp)
  80fff8:	1884703a 	and	r2,r3,r2
  if ((((alt_u32) from) & align_mask) ||
  80fffc:	1000041e 	bne	r2,zero,810010 <alt_avalon_dma_send+0x6c>
        (len > priv->max_length))
  810000:	e0bfff17 	ldw	r2,-4(fp)
  810004:	10c00617 	ldw	r3,24(r2)
        (len & align_mask)            ||
  810008:	e0bff717 	ldw	r2,-36(fp)
  81000c:	1880022e 	bgeu	r3,r2,810018 <alt_avalon_dma_send+0x74>
  {
    return -EINVAL;
  810010:	00bffa84 	movi	r2,-22
  810014:	00002c06 	br	8100c8 <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
  810018:	e0bfff17 	ldw	r2,-4(fp)
  81001c:	10800117 	ldw	r2,4(r2)
  810020:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
  810024:	e0bfff17 	ldw	r2,-4(fp)
  810028:	10800217 	ldw	r2,8(r2)
  81002c:	e0bffc15 	stw	r2,-16(fp)
  slot  = &priv->tx_buf[end];
  810030:	e0bffc17 	ldw	r2,-16(fp)
  810034:	1004913a 	slli	r2,r2,4
  810038:	10800904 	addi	r2,r2,36
  81003c:	e0ffff17 	ldw	r3,-4(fp)
  810040:	1885883a 	add	r2,r3,r2
  810044:	e0bffb15 	stw	r2,-20(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  810048:	e0bffc17 	ldw	r2,-16(fp)
  81004c:	10800044 	addi	r2,r2,1
  810050:	108000cc 	andi	r2,r2,3
  810054:	e0bffa15 	stw	r2,-24(fp)

  if (next == start)
  810058:	e0fffa17 	ldw	r3,-24(fp)
  81005c:	e0bffd17 	ldw	r2,-12(fp)
  810060:	1880021e 	bne	r3,r2,81006c <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
  810064:	00bff904 	movi	r2,-28
  810068:	00001706 	br	8100c8 <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
  81006c:	e0bffb17 	ldw	r2,-20(fp)
  810070:	e0fff817 	ldw	r3,-32(fp)
  810074:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
  810078:	e0bffb17 	ldw	r2,-20(fp)
  81007c:	e0fff717 	ldw	r3,-36(fp)
  810080:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
  810084:	e0bffb17 	ldw	r2,-20(fp)
  810088:	e0fff617 	ldw	r3,-40(fp)
  81008c:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
  810090:	e0bffb17 	ldw	r2,-20(fp)
  810094:	e0c00217 	ldw	r3,8(fp)
  810098:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
  81009c:	e0bfff17 	ldw	r2,-4(fp)
  8100a0:	e0fffa17 	ldw	r3,-24(fp)
  8100a4:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
  8100a8:	e0bfff17 	ldw	r2,-4(fp)
  8100ac:	10800817 	ldw	r2,32(r2)
  8100b0:	1000041e 	bne	r2,zero,8100c4 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
  8100b4:	e0bfff17 	ldw	r2,-4(fp)
  8100b8:	10800717 	ldw	r2,28(r2)
  8100bc:	e13fff17 	ldw	r4,-4(fp)
  8100c0:	103ee83a 	callr	r2
  }

  return 0;
  8100c4:	0005883a 	mov	r2,zero
}
  8100c8:	e037883a 	mov	sp,fp
  8100cc:	dfc00117 	ldw	ra,4(sp)
  8100d0:	df000017 	ldw	fp,0(sp)
  8100d4:	dec00204 	addi	sp,sp,8
  8100d8:	f800283a 	ret

008100dc <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
  8100dc:	defff104 	addi	sp,sp,-60
  8100e0:	dfc00e15 	stw	ra,56(sp)
  8100e4:	df000d15 	stw	fp,52(sp)
  8100e8:	df000d04 	addi	fp,sp,52
  8100ec:	e13ff315 	stw	r4,-52(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
  8100f0:	e0bff317 	ldw	r2,-52(fp)
  8100f4:	e0bfff15 	stw	r2,-4(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  8100f8:	e0bfff17 	ldw	r2,-4(fp)
  8100fc:	10800517 	ldw	r2,20(r2)
  810100:	1080080c 	andi	r2,r2,32
  810104:	e0bffe15 	stw	r2,-8(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
  810108:	e0bfff17 	ldw	r2,-4(fp)
  81010c:	10800517 	ldw	r2,20(r2)
  810110:	1080100c 	andi	r2,r2,64
  810114:	e0bffd15 	stw	r2,-12(fp)

  tx_start = priv->tx_start;
  810118:	e0bfff17 	ldw	r2,-4(fp)
  81011c:	10800117 	ldw	r2,4(r2)
  810120:	e0bffc15 	stw	r2,-16(fp)
  rx_start = priv->rx_start;
  810124:	e0bfff17 	ldw	r2,-4(fp)
  810128:	10800317 	ldw	r2,12(r2)
  81012c:	e0bffb15 	stw	r2,-20(fp)

  tx_slot = &priv->tx_buf[tx_start];
  810130:	e0bffc17 	ldw	r2,-16(fp)
  810134:	1004913a 	slli	r2,r2,4
  810138:	10800904 	addi	r2,r2,36
  81013c:	e0ffff17 	ldw	r3,-4(fp)
  810140:	1885883a 	add	r2,r3,r2
  810144:	e0bffa15 	stw	r2,-24(fp)
  rx_slot = &priv->rx_buf[rx_start];
  810148:	e0bffb17 	ldw	r2,-20(fp)
  81014c:	1004913a 	slli	r2,r2,4
  810150:	10801904 	addi	r2,r2,100
  810154:	e0ffff17 	ldw	r3,-4(fp)
  810158:	1885883a 	add	r2,r3,r2
  81015c:	e0bff915 	stw	r2,-28(fp)

  /* Increment the descriptors */

  if (!stream_tx)
  810160:	e0bffe17 	ldw	r2,-8(fp)
  810164:	1000051e 	bne	r2,zero,81017c <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  810168:	e0bffc17 	ldw	r2,-16(fp)
  81016c:	10800044 	addi	r2,r2,1
  810170:	10c000cc 	andi	r3,r2,3
  810174:	e0bfff17 	ldw	r2,-4(fp)
  810178:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
  81017c:	e0bffd17 	ldw	r2,-12(fp)
  810180:	1000051e 	bne	r2,zero,810198 <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  810184:	e0bffb17 	ldw	r2,-20(fp)
  810188:	10800044 	addi	r2,r2,1
  81018c:	10c000cc 	andi	r3,r2,3
  810190:	e0bfff17 	ldw	r2,-4(fp)
  810194:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
  810198:	e0bfff17 	ldw	r2,-4(fp)
  81019c:	10800017 	ldw	r2,0(r2)
  8101a0:	0007883a 	mov	r3,zero
  8101a4:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
  8101a8:	e0bfff17 	ldw	r2,-4(fp)
  8101ac:	10800017 	ldw	r2,0(r2)
  8101b0:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
  8101b4:	e0bfff17 	ldw	r2,-4(fp)
  8101b8:	10800717 	ldw	r2,28(r2)
  8101bc:	e13fff17 	ldw	r4,-4(fp)
  8101c0:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
  8101c4:	e0bffe17 	ldw	r2,-8(fp)
  8101c8:	1000161e 	bne	r2,zero,810224 <alt_avalon_dma_irq+0x148>
  8101cc:	e0bffa17 	ldw	r2,-24(fp)
  8101d0:	10800217 	ldw	r2,8(r2)
  8101d4:	10001326 	beq	r2,zero,810224 <alt_avalon_dma_irq+0x148>
  NIOS2_READ_STATUS (context);
  8101d8:	0005303a 	rdctl	r2,status
  8101dc:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8101e0:	e0fff617 	ldw	r3,-40(fp)
  8101e4:	00bfff84 	movi	r2,-2
  8101e8:	1884703a 	and	r2,r3,r2
  8101ec:	1001703a 	wrctl	status,r2
  return context;
  8101f0:	e0bff617 	ldw	r2,-40(fp)
  {
    cpu_sr = alt_irq_disable_all();
  8101f4:	e0bff815 	stw	r2,-32(fp)
    tx_slot->done (tx_slot->handle);
  8101f8:	e0bffa17 	ldw	r2,-24(fp)
  8101fc:	10800217 	ldw	r2,8(r2)
  810200:	e0fffa17 	ldw	r3,-24(fp)
  810204:	18c00317 	ldw	r3,12(r3)
  810208:	1809883a 	mov	r4,r3
  81020c:	103ee83a 	callr	r2
  810210:	e0bff817 	ldw	r2,-32(fp)
  810214:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
  810218:	e0bff717 	ldw	r2,-36(fp)
  81021c:	1001703a 	wrctl	status,r2
}
  810220:	0001883a 	nop
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
  810224:	e0bffd17 	ldw	r2,-12(fp)
  810228:	1000181e 	bne	r2,zero,81028c <alt_avalon_dma_irq+0x1b0>
  81022c:	e0bff917 	ldw	r2,-28(fp)
  810230:	10800217 	ldw	r2,8(r2)
  810234:	10001526 	beq	r2,zero,81028c <alt_avalon_dma_irq+0x1b0>
  NIOS2_READ_STATUS (context);
  810238:	0005303a 	rdctl	r2,status
  81023c:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810240:	e0fff417 	ldw	r3,-48(fp)
  810244:	00bfff84 	movi	r2,-2
  810248:	1884703a 	and	r2,r3,r2
  81024c:	1001703a 	wrctl	status,r2
  return context;
  810250:	e0bff417 	ldw	r2,-48(fp)
  {
    cpu_sr = alt_irq_disable_all();
  810254:	e0bff815 	stw	r2,-32(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
  810258:	e0bff917 	ldw	r2,-28(fp)
  81025c:	10800217 	ldw	r2,8(r2)
  810260:	e0fff917 	ldw	r3,-28(fp)
  810264:	19000317 	ldw	r4,12(r3)
  810268:	e0fff917 	ldw	r3,-28(fp)
  81026c:	18c00017 	ldw	r3,0(r3)
  810270:	180b883a 	mov	r5,r3
  810274:	103ee83a 	callr	r2
  810278:	e0bff817 	ldw	r2,-32(fp)
  81027c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
  810280:	e0bff517 	ldw	r2,-44(fp)
  810284:	1001703a 	wrctl	status,r2
}
  810288:	0001883a 	nop
    alt_irq_enable_all(cpu_sr);
  }
}
  81028c:	0001883a 	nop
  810290:	e037883a 	mov	sp,fp
  810294:	dfc00117 	ldw	ra,4(sp)
  810298:	df000017 	ldw	fp,0(sp)
  81029c:	dec00204 	addi	sp,sp,8
  8102a0:	f800283a 	ret

008102a4 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
  8102a4:	defff904 	addi	sp,sp,-28
  8102a8:	dfc00615 	stw	ra,24(sp)
  8102ac:	df000515 	stw	fp,20(sp)
  8102b0:	df000504 	addi	fp,sp,20
  8102b4:	e13fff15 	stw	r4,-4(fp)
  8102b8:	e17ffe15 	stw	r5,-8(fp)
  8102bc:	e1bffd15 	stw	r6,-12(fp)
  8102c0:	e1fffc15 	stw	r7,-16(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  8102c4:	e0bffd17 	ldw	r2,-12(fp)
  8102c8:	10800604 	addi	r2,r2,24
  8102cc:	00c40004 	movi	r3,4096
  8102d0:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  8102d4:	e0bffd17 	ldw	r2,-12(fp)
  8102d8:	10800604 	addi	r2,r2,24
  8102dc:	00c40004 	movi	r3,4096
  8102e0:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
  8102e4:	e0bffd17 	ldw	r2,-12(fp)
  8102e8:	10800604 	addi	r2,r2,24
  8102ec:	00c03f04 	movi	r3,252
  8102f0:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
  8102f4:	0007883a 	mov	r3,zero
  8102f8:	e0bffd17 	ldw	r2,-12(fp)
  8102fc:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
  810300:	e0bfff17 	ldw	r2,-4(fp)
  810304:	10800617 	ldw	r2,24(r2)
  810308:	d8000015 	stw	zero,0(sp)
  81030c:	100f883a 	mov	r7,r2
  810310:	01802074 	movhi	r6,129
  810314:	31803704 	addi	r6,r6,220
  810318:	e1400217 	ldw	r5,8(fp)
  81031c:	e13ffc17 	ldw	r4,-16(fp)
  810320:	080ea880 	call	80ea88 <alt_ic_isr_register>
  810324:	10000616 	blt	r2,zero,810340 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
  810328:	e0bfff17 	ldw	r2,-4(fp)
  81032c:	1009883a 	mov	r4,r2
  810330:	080f77c0 	call	80f77c <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
  810334:	e0bffe17 	ldw	r2,-8(fp)
  810338:	1009883a 	mov	r4,r2
  81033c:	080f7b00 	call	80f7b0 <alt_dma_rxchan_reg>
  }
}
  810340:	0001883a 	nop
  810344:	e037883a 	mov	sp,fp
  810348:	dfc00117 	ldw	ra,4(sp)
  81034c:	df000017 	ldw	fp,0(sp)
  810350:	dec00204 	addi	sp,sp,8
  810354:	f800283a 	ret

00810358 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810358:	defffa04 	addi	sp,sp,-24
  81035c:	dfc00515 	stw	ra,20(sp)
  810360:	df000415 	stw	fp,16(sp)
  810364:	df000404 	addi	fp,sp,16
  810368:	e13ffe15 	stw	r4,-8(fp)
  81036c:	e17ffd15 	stw	r5,-12(fp)
  810370:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810374:	e0bffe17 	ldw	r2,-8(fp)
  810378:	10800017 	ldw	r2,0(r2)
  81037c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810380:	e0bfff17 	ldw	r2,-4(fp)
  810384:	10c00a04 	addi	r3,r2,40
  810388:	e0bffe17 	ldw	r2,-8(fp)
  81038c:	10800217 	ldw	r2,8(r2)
  810390:	100f883a 	mov	r7,r2
  810394:	e1bffc17 	ldw	r6,-16(fp)
  810398:	e17ffd17 	ldw	r5,-12(fp)
  81039c:	1809883a 	mov	r4,r3
  8103a0:	08109840 	call	810984 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8103a4:	e037883a 	mov	sp,fp
  8103a8:	dfc00117 	ldw	ra,4(sp)
  8103ac:	df000017 	ldw	fp,0(sp)
  8103b0:	dec00204 	addi	sp,sp,8
  8103b4:	f800283a 	ret

008103b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8103b8:	defffa04 	addi	sp,sp,-24
  8103bc:	dfc00515 	stw	ra,20(sp)
  8103c0:	df000415 	stw	fp,16(sp)
  8103c4:	df000404 	addi	fp,sp,16
  8103c8:	e13ffe15 	stw	r4,-8(fp)
  8103cc:	e17ffd15 	stw	r5,-12(fp)
  8103d0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8103d4:	e0bffe17 	ldw	r2,-8(fp)
  8103d8:	10800017 	ldw	r2,0(r2)
  8103dc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8103e0:	e0bfff17 	ldw	r2,-4(fp)
  8103e4:	10c00a04 	addi	r3,r2,40
  8103e8:	e0bffe17 	ldw	r2,-8(fp)
  8103ec:	10800217 	ldw	r2,8(r2)
  8103f0:	100f883a 	mov	r7,r2
  8103f4:	e1bffc17 	ldw	r6,-16(fp)
  8103f8:	e17ffd17 	ldw	r5,-12(fp)
  8103fc:	1809883a 	mov	r4,r3
  810400:	0810ba40 	call	810ba4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810404:	e037883a 	mov	sp,fp
  810408:	dfc00117 	ldw	ra,4(sp)
  81040c:	df000017 	ldw	fp,0(sp)
  810410:	dec00204 	addi	sp,sp,8
  810414:	f800283a 	ret

00810418 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810418:	defffc04 	addi	sp,sp,-16
  81041c:	dfc00315 	stw	ra,12(sp)
  810420:	df000215 	stw	fp,8(sp)
  810424:	df000204 	addi	fp,sp,8
  810428:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81042c:	e0bffe17 	ldw	r2,-8(fp)
  810430:	10800017 	ldw	r2,0(r2)
  810434:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810438:	e0bfff17 	ldw	r2,-4(fp)
  81043c:	10c00a04 	addi	r3,r2,40
  810440:	e0bffe17 	ldw	r2,-8(fp)
  810444:	10800217 	ldw	r2,8(r2)
  810448:	100b883a 	mov	r5,r2
  81044c:	1809883a 	mov	r4,r3
  810450:	08108280 	call	810828 <altera_avalon_jtag_uart_close>
}
  810454:	e037883a 	mov	sp,fp
  810458:	dfc00117 	ldw	ra,4(sp)
  81045c:	df000017 	ldw	fp,0(sp)
  810460:	dec00204 	addi	sp,sp,8
  810464:	f800283a 	ret

00810468 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810468:	defffa04 	addi	sp,sp,-24
  81046c:	dfc00515 	stw	ra,20(sp)
  810470:	df000415 	stw	fp,16(sp)
  810474:	df000404 	addi	fp,sp,16
  810478:	e13ffe15 	stw	r4,-8(fp)
  81047c:	e17ffd15 	stw	r5,-12(fp)
  810480:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810484:	e0bffe17 	ldw	r2,-8(fp)
  810488:	10800017 	ldw	r2,0(r2)
  81048c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810490:	e0bfff17 	ldw	r2,-4(fp)
  810494:	10800a04 	addi	r2,r2,40
  810498:	e1bffc17 	ldw	r6,-16(fp)
  81049c:	e17ffd17 	ldw	r5,-12(fp)
  8104a0:	1009883a 	mov	r4,r2
  8104a4:	08108900 	call	810890 <altera_avalon_jtag_uart_ioctl>
}
  8104a8:	e037883a 	mov	sp,fp
  8104ac:	dfc00117 	ldw	ra,4(sp)
  8104b0:	df000017 	ldw	fp,0(sp)
  8104b4:	dec00204 	addi	sp,sp,8
  8104b8:	f800283a 	ret

008104bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8104bc:	defffa04 	addi	sp,sp,-24
  8104c0:	dfc00515 	stw	ra,20(sp)
  8104c4:	df000415 	stw	fp,16(sp)
  8104c8:	df000404 	addi	fp,sp,16
  8104cc:	e13fff15 	stw	r4,-4(fp)
  8104d0:	e17ffe15 	stw	r5,-8(fp)
  8104d4:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8104d8:	e0bfff17 	ldw	r2,-4(fp)
  8104dc:	00c00044 	movi	r3,1
  8104e0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8104e4:	e0bfff17 	ldw	r2,-4(fp)
  8104e8:	10800017 	ldw	r2,0(r2)
  8104ec:	10800104 	addi	r2,r2,4
  8104f0:	1007883a 	mov	r3,r2
  8104f4:	e0bfff17 	ldw	r2,-4(fp)
  8104f8:	10800817 	ldw	r2,32(r2)
  8104fc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810500:	e0bffe17 	ldw	r2,-8(fp)
  810504:	e0fffd17 	ldw	r3,-12(fp)
  810508:	d8000015 	stw	zero,0(sp)
  81050c:	e1ffff17 	ldw	r7,-4(fp)
  810510:	01802074 	movhi	r6,129
  810514:	31815f04 	addi	r6,r6,1404
  810518:	180b883a 	mov	r5,r3
  81051c:	1009883a 	mov	r4,r2
  810520:	080ea880 	call	80ea88 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810524:	e0bfff17 	ldw	r2,-4(fp)
  810528:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  81052c:	e0bfff17 	ldw	r2,-4(fp)
  810530:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810534:	d0e74f17 	ldw	r3,-25284(gp)
  810538:	e1ffff17 	ldw	r7,-4(fp)
  81053c:	01802074 	movhi	r6,129
  810540:	3181e204 	addi	r6,r6,1928
  810544:	180b883a 	mov	r5,r3
  810548:	1009883a 	mov	r4,r2
  81054c:	08111300 	call	811130 <alt_alarm_start>
  810550:	1000040e 	bge	r2,zero,810564 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810554:	e0ffff17 	ldw	r3,-4(fp)
  810558:	00a00034 	movhi	r2,32768
  81055c:	10bfffc4 	addi	r2,r2,-1
  810560:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  810564:	0001883a 	nop
  810568:	e037883a 	mov	sp,fp
  81056c:	dfc00117 	ldw	ra,4(sp)
  810570:	df000017 	ldw	fp,0(sp)
  810574:	dec00204 	addi	sp,sp,8
  810578:	f800283a 	ret

0081057c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81057c:	defff804 	addi	sp,sp,-32
  810580:	df000715 	stw	fp,28(sp)
  810584:	df000704 	addi	fp,sp,28
  810588:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81058c:	e0bff917 	ldw	r2,-28(fp)
  810590:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  810594:	e0bffd17 	ldw	r2,-12(fp)
  810598:	10800017 	ldw	r2,0(r2)
  81059c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8105a0:	e0bffc17 	ldw	r2,-16(fp)
  8105a4:	10800104 	addi	r2,r2,4
  8105a8:	10800037 	ldwio	r2,0(r2)
  8105ac:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8105b0:	e0bffb17 	ldw	r2,-20(fp)
  8105b4:	1080c00c 	andi	r2,r2,768
  8105b8:	10006d26 	beq	r2,zero,810770 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8105bc:	e0bffb17 	ldw	r2,-20(fp)
  8105c0:	1080400c 	andi	r2,r2,256
  8105c4:	10003526 	beq	r2,zero,81069c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8105c8:	00800074 	movhi	r2,1
  8105cc:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8105d0:	e0bffd17 	ldw	r2,-12(fp)
  8105d4:	10800a17 	ldw	r2,40(r2)
  8105d8:	10800044 	addi	r2,r2,1
  8105dc:	1081ffcc 	andi	r2,r2,2047
  8105e0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  8105e4:	e0bffd17 	ldw	r2,-12(fp)
  8105e8:	10800b17 	ldw	r2,44(r2)
  8105ec:	e0fffa17 	ldw	r3,-24(fp)
  8105f0:	18801526 	beq	r3,r2,810648 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8105f4:	e0bffc17 	ldw	r2,-16(fp)
  8105f8:	10800037 	ldwio	r2,0(r2)
  8105fc:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810600:	e0bfff17 	ldw	r2,-4(fp)
  810604:	10a0000c 	andi	r2,r2,32768
  810608:	10001126 	beq	r2,zero,810650 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81060c:	e0bffd17 	ldw	r2,-12(fp)
  810610:	10800a17 	ldw	r2,40(r2)
  810614:	e0ffff17 	ldw	r3,-4(fp)
  810618:	1809883a 	mov	r4,r3
  81061c:	e0fffd17 	ldw	r3,-12(fp)
  810620:	1885883a 	add	r2,r3,r2
  810624:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810628:	e0bffd17 	ldw	r2,-12(fp)
  81062c:	10800a17 	ldw	r2,40(r2)
  810630:	10800044 	addi	r2,r2,1
  810634:	10c1ffcc 	andi	r3,r2,2047
  810638:	e0bffd17 	ldw	r2,-12(fp)
  81063c:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  810640:	0001883a 	nop
      {
  810644:	003fe206 	br	8105d0 <altera_avalon_jtag_uart_irq+0x54>
          break;
  810648:	0001883a 	nop
  81064c:	00000106 	br	810654 <altera_avalon_jtag_uart_irq+0xd8>
          break;
  810650:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810654:	e0bfff17 	ldw	r2,-4(fp)
  810658:	10bfffec 	andhi	r2,r2,65535
  81065c:	10000f26 	beq	r2,zero,81069c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810660:	e0bffd17 	ldw	r2,-12(fp)
  810664:	10c00817 	ldw	r3,32(r2)
  810668:	00bfff84 	movi	r2,-2
  81066c:	1886703a 	and	r3,r3,r2
  810670:	e0bffd17 	ldw	r2,-12(fp)
  810674:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810678:	e0bffc17 	ldw	r2,-16(fp)
  81067c:	10800104 	addi	r2,r2,4
  810680:	1007883a 	mov	r3,r2
  810684:	e0bffd17 	ldw	r2,-12(fp)
  810688:	10800817 	ldw	r2,32(r2)
  81068c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810690:	e0bffc17 	ldw	r2,-16(fp)
  810694:	10800104 	addi	r2,r2,4
  810698:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81069c:	e0bffb17 	ldw	r2,-20(fp)
  8106a0:	1080800c 	andi	r2,r2,512
  8106a4:	103fbe26 	beq	r2,zero,8105a0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8106a8:	e0bffb17 	ldw	r2,-20(fp)
  8106ac:	1004d43a 	srli	r2,r2,16
  8106b0:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8106b4:	00001406 	br	810708 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8106b8:	e0bffc17 	ldw	r2,-16(fp)
  8106bc:	e0fffd17 	ldw	r3,-12(fp)
  8106c0:	18c00d17 	ldw	r3,52(r3)
  8106c4:	e13ffd17 	ldw	r4,-12(fp)
  8106c8:	20c7883a 	add	r3,r4,r3
  8106cc:	18c20e03 	ldbu	r3,2104(r3)
  8106d0:	18c03fcc 	andi	r3,r3,255
  8106d4:	18c0201c 	xori	r3,r3,128
  8106d8:	18ffe004 	addi	r3,r3,-128
  8106dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8106e0:	e0bffd17 	ldw	r2,-12(fp)
  8106e4:	10800d17 	ldw	r2,52(r2)
  8106e8:	10800044 	addi	r2,r2,1
  8106ec:	10c1ffcc 	andi	r3,r2,2047
  8106f0:	e0bffd17 	ldw	r2,-12(fp)
  8106f4:	10c00d15 	stw	r3,52(r2)
  8106f8:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8106fc:	e0bffe17 	ldw	r2,-8(fp)
  810700:	10bfffc4 	addi	r2,r2,-1
  810704:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
  810708:	e0bffe17 	ldw	r2,-8(fp)
  81070c:	10000526 	beq	r2,zero,810724 <altera_avalon_jtag_uart_irq+0x1a8>
  810710:	e0bffd17 	ldw	r2,-12(fp)
  810714:	10c00d17 	ldw	r3,52(r2)
  810718:	e0bffd17 	ldw	r2,-12(fp)
  81071c:	10800c17 	ldw	r2,48(r2)
  810720:	18bfe51e 	bne	r3,r2,8106b8 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
  810724:	e0bffe17 	ldw	r2,-8(fp)
  810728:	103f9d26 	beq	r2,zero,8105a0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81072c:	e0bffd17 	ldw	r2,-12(fp)
  810730:	10c00817 	ldw	r3,32(r2)
  810734:	00bfff44 	movi	r2,-3
  810738:	1886703a 	and	r3,r3,r2
  81073c:	e0bffd17 	ldw	r2,-12(fp)
  810740:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810744:	e0bffd17 	ldw	r2,-12(fp)
  810748:	10800017 	ldw	r2,0(r2)
  81074c:	10800104 	addi	r2,r2,4
  810750:	1007883a 	mov	r3,r2
  810754:	e0bffd17 	ldw	r2,-12(fp)
  810758:	10800817 	ldw	r2,32(r2)
  81075c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810760:	e0bffc17 	ldw	r2,-16(fp)
  810764:	10800104 	addi	r2,r2,4
  810768:	10800037 	ldwio	r2,0(r2)
  {
  81076c:	003f8c06 	br	8105a0 <altera_avalon_jtag_uart_irq+0x24>
      break;
  810770:	0001883a 	nop
      }
    }
  }
}
  810774:	0001883a 	nop
  810778:	e037883a 	mov	sp,fp
  81077c:	df000017 	ldw	fp,0(sp)
  810780:	dec00104 	addi	sp,sp,4
  810784:	f800283a 	ret

00810788 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810788:	defffc04 	addi	sp,sp,-16
  81078c:	df000315 	stw	fp,12(sp)
  810790:	df000304 	addi	fp,sp,12
  810794:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810798:	e0bffd17 	ldw	r2,-12(fp)
  81079c:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8107a0:	e0bfff17 	ldw	r2,-4(fp)
  8107a4:	10800017 	ldw	r2,0(r2)
  8107a8:	10800104 	addi	r2,r2,4
  8107ac:	10800037 	ldwio	r2,0(r2)
  8107b0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8107b4:	e0bffe17 	ldw	r2,-8(fp)
  8107b8:	1081000c 	andi	r2,r2,1024
  8107bc:	10000b26 	beq	r2,zero,8107ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8107c0:	e0bfff17 	ldw	r2,-4(fp)
  8107c4:	10800017 	ldw	r2,0(r2)
  8107c8:	10800104 	addi	r2,r2,4
  8107cc:	1007883a 	mov	r3,r2
  8107d0:	e0bfff17 	ldw	r2,-4(fp)
  8107d4:	10800817 	ldw	r2,32(r2)
  8107d8:	10810014 	ori	r2,r2,1024
  8107dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8107e0:	e0bfff17 	ldw	r2,-4(fp)
  8107e4:	10000915 	stw	zero,36(r2)
  8107e8:	00000a06 	br	810814 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8107ec:	e0bfff17 	ldw	r2,-4(fp)
  8107f0:	10c00917 	ldw	r3,36(r2)
  8107f4:	00a00034 	movhi	r2,32768
  8107f8:	10bfff04 	addi	r2,r2,-4
  8107fc:	10c00536 	bltu	r2,r3,810814 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810800:	e0bfff17 	ldw	r2,-4(fp)
  810804:	10800917 	ldw	r2,36(r2)
  810808:	10c00044 	addi	r3,r2,1
  81080c:	e0bfff17 	ldw	r2,-4(fp)
  810810:	10c00915 	stw	r3,36(r2)
  810814:	d0a74f17 	ldw	r2,-25284(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810818:	e037883a 	mov	sp,fp
  81081c:	df000017 	ldw	fp,0(sp)
  810820:	dec00104 	addi	sp,sp,4
  810824:	f800283a 	ret

00810828 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810828:	defffd04 	addi	sp,sp,-12
  81082c:	df000215 	stw	fp,8(sp)
  810830:	df000204 	addi	fp,sp,8
  810834:	e13fff15 	stw	r4,-4(fp)
  810838:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81083c:	00000506 	br	810854 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810840:	e0bffe17 	ldw	r2,-8(fp)
  810844:	1090000c 	andi	r2,r2,16384
  810848:	10000226 	beq	r2,zero,810854 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  81084c:	00bffd44 	movi	r2,-11
  810850:	00000b06 	br	810880 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810854:	e0bfff17 	ldw	r2,-4(fp)
  810858:	10c00d17 	ldw	r3,52(r2)
  81085c:	e0bfff17 	ldw	r2,-4(fp)
  810860:	10800c17 	ldw	r2,48(r2)
  810864:	18800526 	beq	r3,r2,81087c <altera_avalon_jtag_uart_close+0x54>
  810868:	e0bfff17 	ldw	r2,-4(fp)
  81086c:	10c00917 	ldw	r3,36(r2)
  810870:	e0bfff17 	ldw	r2,-4(fp)
  810874:	10800117 	ldw	r2,4(r2)
  810878:	18bff136 	bltu	r3,r2,810840 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
  81087c:	0005883a 	mov	r2,zero
}
  810880:	e037883a 	mov	sp,fp
  810884:	df000017 	ldw	fp,0(sp)
  810888:	dec00104 	addi	sp,sp,4
  81088c:	f800283a 	ret

00810890 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810890:	defffa04 	addi	sp,sp,-24
  810894:	df000515 	stw	fp,20(sp)
  810898:	df000504 	addi	fp,sp,20
  81089c:	e13ffd15 	stw	r4,-12(fp)
  8108a0:	e17ffc15 	stw	r5,-16(fp)
  8108a4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
  8108a8:	00bff9c4 	movi	r2,-25
  8108ac:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
  8108b0:	e0bffc17 	ldw	r2,-16(fp)
  8108b4:	109a8060 	cmpeqi	r2,r2,27137
  8108b8:	1000041e 	bne	r2,zero,8108cc <altera_avalon_jtag_uart_ioctl+0x3c>
  8108bc:	e0bffc17 	ldw	r2,-16(fp)
  8108c0:	109a80a0 	cmpeqi	r2,r2,27138
  8108c4:	1000181e 	bne	r2,zero,810928 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  8108c8:	00002906 	br	810970 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
  8108cc:	e0bffd17 	ldw	r2,-12(fp)
  8108d0:	10c00117 	ldw	r3,4(r2)
  8108d4:	00a00034 	movhi	r2,32768
  8108d8:	10bfffc4 	addi	r2,r2,-1
  8108dc:	18802126 	beq	r3,r2,810964 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
  8108e0:	e0bffb17 	ldw	r2,-20(fp)
  8108e4:	10800017 	ldw	r2,0(r2)
  8108e8:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8108ec:	e0bffe17 	ldw	r2,-8(fp)
  8108f0:	10800090 	cmplti	r2,r2,2
  8108f4:	1000061e 	bne	r2,zero,810910 <altera_avalon_jtag_uart_ioctl+0x80>
  8108f8:	e0fffe17 	ldw	r3,-8(fp)
  8108fc:	00a00034 	movhi	r2,32768
  810900:	10bfffc4 	addi	r2,r2,-1
  810904:	18800226 	beq	r3,r2,810910 <altera_avalon_jtag_uart_ioctl+0x80>
  810908:	e0bffe17 	ldw	r2,-8(fp)
  81090c:	00000206 	br	810918 <altera_avalon_jtag_uart_ioctl+0x88>
  810910:	00a00034 	movhi	r2,32768
  810914:	10bfff84 	addi	r2,r2,-2
  810918:	e0fffd17 	ldw	r3,-12(fp)
  81091c:	18800115 	stw	r2,4(r3)
      rc = 0;
  810920:	e03fff15 	stw	zero,-4(fp)
    break;
  810924:	00000f06 	br	810964 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
  810928:	e0bffd17 	ldw	r2,-12(fp)
  81092c:	10c00117 	ldw	r3,4(r2)
  810930:	00a00034 	movhi	r2,32768
  810934:	10bfffc4 	addi	r2,r2,-1
  810938:	18800c26 	beq	r3,r2,81096c <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81093c:	e0bffd17 	ldw	r2,-12(fp)
  810940:	10c00917 	ldw	r3,36(r2)
  810944:	e0bffd17 	ldw	r2,-12(fp)
  810948:	10800117 	ldw	r2,4(r2)
  81094c:	1885803a 	cmpltu	r2,r3,r2
  810950:	10c03fcc 	andi	r3,r2,255
  810954:	e0bffb17 	ldw	r2,-20(fp)
  810958:	10c00015 	stw	r3,0(r2)
      rc = 0;
  81095c:	e03fff15 	stw	zero,-4(fp)
    break;
  810960:	00000206 	br	81096c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
  810964:	0001883a 	nop
  810968:	00000106 	br	810970 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
  81096c:	0001883a 	nop
  }

  return rc;
  810970:	e0bfff17 	ldw	r2,-4(fp)
}
  810974:	e037883a 	mov	sp,fp
  810978:	df000017 	ldw	fp,0(sp)
  81097c:	dec00104 	addi	sp,sp,4
  810980:	f800283a 	ret

00810984 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  810984:	defff304 	addi	sp,sp,-52
  810988:	dfc00c15 	stw	ra,48(sp)
  81098c:	df000b15 	stw	fp,44(sp)
  810990:	df000b04 	addi	fp,sp,44
  810994:	e13ff815 	stw	r4,-32(fp)
  810998:	e17ff715 	stw	r5,-36(fp)
  81099c:	e1bff615 	stw	r6,-40(fp)
  8109a0:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
  8109a4:	e0bff717 	ldw	r2,-36(fp)
  8109a8:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8109ac:	00004706 	br	810acc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8109b0:	e0bff817 	ldw	r2,-32(fp)
  8109b4:	10800a17 	ldw	r2,40(r2)
  8109b8:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
  8109bc:	e0bff817 	ldw	r2,-32(fp)
  8109c0:	10800b17 	ldw	r2,44(r2)
  8109c4:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
  8109c8:	e0fffd17 	ldw	r3,-12(fp)
  8109cc:	e0bffc17 	ldw	r2,-16(fp)
  8109d0:	18800536 	bltu	r3,r2,8109e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8109d4:	e0fffd17 	ldw	r3,-12(fp)
  8109d8:	e0bffc17 	ldw	r2,-16(fp)
  8109dc:	1885c83a 	sub	r2,r3,r2
  8109e0:	e0bffe15 	stw	r2,-8(fp)
  8109e4:	00000406 	br	8109f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8109e8:	00c20004 	movi	r3,2048
  8109ec:	e0bffc17 	ldw	r2,-16(fp)
  8109f0:	1885c83a 	sub	r2,r3,r2
  8109f4:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  8109f8:	e0bffe17 	ldw	r2,-8(fp)
  8109fc:	10001e26 	beq	r2,zero,810a78 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  810a00:	e0fff617 	ldw	r3,-40(fp)
  810a04:	e0bffe17 	ldw	r2,-8(fp)
  810a08:	1880022e 	bgeu	r3,r2,810a14 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  810a0c:	e0bff617 	ldw	r2,-40(fp)
  810a10:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  810a14:	e0bff817 	ldw	r2,-32(fp)
  810a18:	10c00e04 	addi	r3,r2,56
  810a1c:	e0bffc17 	ldw	r2,-16(fp)
  810a20:	1885883a 	add	r2,r3,r2
  810a24:	e1bffe17 	ldw	r6,-8(fp)
  810a28:	100b883a 	mov	r5,r2
  810a2c:	e13fff17 	ldw	r4,-4(fp)
  810a30:	0808c700 	call	808c70 <memcpy>
      ptr   += n;
  810a34:	e0ffff17 	ldw	r3,-4(fp)
  810a38:	e0bffe17 	ldw	r2,-8(fp)
  810a3c:	1885883a 	add	r2,r3,r2
  810a40:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
  810a44:	e0fff617 	ldw	r3,-40(fp)
  810a48:	e0bffe17 	ldw	r2,-8(fp)
  810a4c:	1885c83a 	sub	r2,r3,r2
  810a50:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810a54:	e0fffc17 	ldw	r3,-16(fp)
  810a58:	e0bffe17 	ldw	r2,-8(fp)
  810a5c:	1885883a 	add	r2,r3,r2
  810a60:	10c1ffcc 	andi	r3,r2,2047
  810a64:	e0bff817 	ldw	r2,-32(fp)
  810a68:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  810a6c:	e0bff617 	ldw	r2,-40(fp)
  810a70:	00bfcf16 	blt	zero,r2,8109b0 <altera_avalon_jtag_uart_read+0x2c>
  810a74:	00000106 	br	810a7c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
  810a78:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
  810a7c:	e0ffff17 	ldw	r3,-4(fp)
  810a80:	e0bff717 	ldw	r2,-36(fp)
  810a84:	1880141e 	bne	r3,r2,810ad8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  810a88:	e0bff517 	ldw	r2,-44(fp)
  810a8c:	1090000c 	andi	r2,r2,16384
  810a90:	1000131e 	bne	r2,zero,810ae0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  810a94:	0001883a 	nop
  810a98:	e0bff817 	ldw	r2,-32(fp)
  810a9c:	10800a17 	ldw	r2,40(r2)
  810aa0:	e0fffd17 	ldw	r3,-12(fp)
  810aa4:	1880051e 	bne	r3,r2,810abc <altera_avalon_jtag_uart_read+0x138>
  810aa8:	e0bff817 	ldw	r2,-32(fp)
  810aac:	10c00917 	ldw	r3,36(r2)
  810ab0:	e0bff817 	ldw	r2,-32(fp)
  810ab4:	10800117 	ldw	r2,4(r2)
  810ab8:	18bff736 	bltu	r3,r2,810a98 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  810abc:	e0bff817 	ldw	r2,-32(fp)
  810ac0:	10800a17 	ldw	r2,40(r2)
  810ac4:	e0fffd17 	ldw	r3,-12(fp)
  810ac8:	18800726 	beq	r3,r2,810ae8 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
  810acc:	e0bff617 	ldw	r2,-40(fp)
  810ad0:	00bfb716 	blt	zero,r2,8109b0 <altera_avalon_jtag_uart_read+0x2c>
  810ad4:	00000506 	br	810aec <altera_avalon_jtag_uart_read+0x168>
      break;
  810ad8:	0001883a 	nop
  810adc:	00000306 	br	810aec <altera_avalon_jtag_uart_read+0x168>
      break;
  810ae0:	0001883a 	nop
  810ae4:	00000106 	br	810aec <altera_avalon_jtag_uart_read+0x168>
      break;
  810ae8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  810aec:	e0ffff17 	ldw	r3,-4(fp)
  810af0:	e0bff717 	ldw	r2,-36(fp)
  810af4:	18801926 	beq	r3,r2,810b5c <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
  810af8:	0005303a 	rdctl	r2,status
  810afc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b00:	e0fff917 	ldw	r3,-28(fp)
  810b04:	00bfff84 	movi	r2,-2
  810b08:	1884703a 	and	r2,r3,r2
  810b0c:	1001703a 	wrctl	status,r2
  return context;
  810b10:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  810b14:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810b18:	e0bff817 	ldw	r2,-32(fp)
  810b1c:	10800817 	ldw	r2,32(r2)
  810b20:	10c00054 	ori	r3,r2,1
  810b24:	e0bff817 	ldw	r2,-32(fp)
  810b28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810b2c:	e0bff817 	ldw	r2,-32(fp)
  810b30:	10800017 	ldw	r2,0(r2)
  810b34:	10800104 	addi	r2,r2,4
  810b38:	1007883a 	mov	r3,r2
  810b3c:	e0bff817 	ldw	r2,-32(fp)
  810b40:	10800817 	ldw	r2,32(r2)
  810b44:	18800035 	stwio	r2,0(r3)
  810b48:	e0bffb17 	ldw	r2,-20(fp)
  810b4c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  810b50:	e0bffa17 	ldw	r2,-24(fp)
  810b54:	1001703a 	wrctl	status,r2
}
  810b58:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  810b5c:	e0ffff17 	ldw	r3,-4(fp)
  810b60:	e0bff717 	ldw	r2,-36(fp)
  810b64:	18800426 	beq	r3,r2,810b78 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
  810b68:	e0ffff17 	ldw	r3,-4(fp)
  810b6c:	e0bff717 	ldw	r2,-36(fp)
  810b70:	1885c83a 	sub	r2,r3,r2
  810b74:	00000606 	br	810b90 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  810b78:	e0bff517 	ldw	r2,-44(fp)
  810b7c:	1090000c 	andi	r2,r2,16384
  810b80:	10000226 	beq	r2,zero,810b8c <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
  810b84:	00bffd44 	movi	r2,-11
  810b88:	00000106 	br	810b90 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  810b8c:	00bffec4 	movi	r2,-5
}
  810b90:	e037883a 	mov	sp,fp
  810b94:	dfc00117 	ldw	ra,4(sp)
  810b98:	df000017 	ldw	fp,0(sp)
  810b9c:	dec00204 	addi	sp,sp,8
  810ba0:	f800283a 	ret

00810ba4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  810ba4:	defff304 	addi	sp,sp,-52
  810ba8:	dfc00c15 	stw	ra,48(sp)
  810bac:	df000b15 	stw	fp,44(sp)
  810bb0:	df000b04 	addi	fp,sp,44
  810bb4:	e13ff815 	stw	r4,-32(fp)
  810bb8:	e17ff715 	stw	r5,-36(fp)
  810bbc:	e1bff615 	stw	r6,-40(fp)
  810bc0:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  810bc4:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810bc8:	e0bff717 	ldw	r2,-36(fp)
  810bcc:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810bd0:	00003706 	br	810cb0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  810bd4:	e0bff817 	ldw	r2,-32(fp)
  810bd8:	10800c17 	ldw	r2,48(r2)
  810bdc:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
  810be0:	e0bff817 	ldw	r2,-32(fp)
  810be4:	10800d17 	ldw	r2,52(r2)
  810be8:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
  810bec:	e0fffc17 	ldw	r3,-16(fp)
  810bf0:	e0bfff17 	ldw	r2,-4(fp)
  810bf4:	1880062e 	bgeu	r3,r2,810c10 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  810bf8:	e0ffff17 	ldw	r3,-4(fp)
  810bfc:	e0bffc17 	ldw	r2,-16(fp)
  810c00:	1885c83a 	sub	r2,r3,r2
  810c04:	10bfffc4 	addi	r2,r2,-1
  810c08:	e0bffe15 	stw	r2,-8(fp)
  810c0c:	00000b06 	br	810c3c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  810c10:	e0bfff17 	ldw	r2,-4(fp)
  810c14:	10000526 	beq	r2,zero,810c2c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  810c18:	00c20004 	movi	r3,2048
  810c1c:	e0bffc17 	ldw	r2,-16(fp)
  810c20:	1885c83a 	sub	r2,r3,r2
  810c24:	e0bffe15 	stw	r2,-8(fp)
  810c28:	00000406 	br	810c3c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  810c2c:	00c1ffc4 	movi	r3,2047
  810c30:	e0bffc17 	ldw	r2,-16(fp)
  810c34:	1885c83a 	sub	r2,r3,r2
  810c38:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  810c3c:	e0bffe17 	ldw	r2,-8(fp)
  810c40:	10001e26 	beq	r2,zero,810cbc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  810c44:	e0fff617 	ldw	r3,-40(fp)
  810c48:	e0bffe17 	ldw	r2,-8(fp)
  810c4c:	1880022e 	bgeu	r3,r2,810c58 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  810c50:	e0bff617 	ldw	r2,-40(fp)
  810c54:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  810c58:	e0bff817 	ldw	r2,-32(fp)
  810c5c:	10c20e04 	addi	r3,r2,2104
  810c60:	e0bffc17 	ldw	r2,-16(fp)
  810c64:	1885883a 	add	r2,r3,r2
  810c68:	e1bffe17 	ldw	r6,-8(fp)
  810c6c:	e17ff717 	ldw	r5,-36(fp)
  810c70:	1009883a 	mov	r4,r2
  810c74:	0808c700 	call	808c70 <memcpy>
      ptr   += n;
  810c78:	e0fff717 	ldw	r3,-36(fp)
  810c7c:	e0bffe17 	ldw	r2,-8(fp)
  810c80:	1885883a 	add	r2,r3,r2
  810c84:	e0bff715 	stw	r2,-36(fp)
      count -= n;
  810c88:	e0fff617 	ldw	r3,-40(fp)
  810c8c:	e0bffe17 	ldw	r2,-8(fp)
  810c90:	1885c83a 	sub	r2,r3,r2
  810c94:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810c98:	e0fffc17 	ldw	r3,-16(fp)
  810c9c:	e0bffe17 	ldw	r2,-8(fp)
  810ca0:	1885883a 	add	r2,r3,r2
  810ca4:	10c1ffcc 	andi	r3,r2,2047
  810ca8:	e0bff817 	ldw	r2,-32(fp)
  810cac:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
  810cb0:	e0bff617 	ldw	r2,-40(fp)
  810cb4:	00bfc716 	blt	zero,r2,810bd4 <altera_avalon_jtag_uart_write+0x30>
  810cb8:	00000106 	br	810cc0 <altera_avalon_jtag_uart_write+0x11c>
        break;
  810cbc:	0001883a 	nop
  NIOS2_READ_STATUS (context);
  810cc0:	0005303a 	rdctl	r2,status
  810cc4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810cc8:	e0fff917 	ldw	r3,-28(fp)
  810ccc:	00bfff84 	movi	r2,-2
  810cd0:	1884703a 	and	r2,r3,r2
  810cd4:	1001703a 	wrctl	status,r2
  return context;
  810cd8:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  810cdc:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810ce0:	e0bff817 	ldw	r2,-32(fp)
  810ce4:	10800817 	ldw	r2,32(r2)
  810ce8:	10c00094 	ori	r3,r2,2
  810cec:	e0bff817 	ldw	r2,-32(fp)
  810cf0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810cf4:	e0bff817 	ldw	r2,-32(fp)
  810cf8:	10800017 	ldw	r2,0(r2)
  810cfc:	10800104 	addi	r2,r2,4
  810d00:	1007883a 	mov	r3,r2
  810d04:	e0bff817 	ldw	r2,-32(fp)
  810d08:	10800817 	ldw	r2,32(r2)
  810d0c:	18800035 	stwio	r2,0(r3)
  810d10:	e0bffb17 	ldw	r2,-20(fp)
  810d14:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  810d18:	e0bffa17 	ldw	r2,-24(fp)
  810d1c:	1001703a 	wrctl	status,r2
}
  810d20:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  810d24:	e0bff617 	ldw	r2,-40(fp)
  810d28:	0080100e 	bge	zero,r2,810d6c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  810d2c:	e0bff517 	ldw	r2,-44(fp)
  810d30:	1090000c 	andi	r2,r2,16384
  810d34:	1000101e 	bne	r2,zero,810d78 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  810d38:	0001883a 	nop
  810d3c:	e0bff817 	ldw	r2,-32(fp)
  810d40:	10800d17 	ldw	r2,52(r2)
  810d44:	e0ffff17 	ldw	r3,-4(fp)
  810d48:	1880051e 	bne	r3,r2,810d60 <altera_avalon_jtag_uart_write+0x1bc>
  810d4c:	e0bff817 	ldw	r2,-32(fp)
  810d50:	10c00917 	ldw	r3,36(r2)
  810d54:	e0bff817 	ldw	r2,-32(fp)
  810d58:	10800117 	ldw	r2,4(r2)
  810d5c:	18bff736 	bltu	r3,r2,810d3c <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  810d60:	e0bff817 	ldw	r2,-32(fp)
  810d64:	10800917 	ldw	r2,36(r2)
  810d68:	1000051e 	bne	r2,zero,810d80 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
  810d6c:	e0bff617 	ldw	r2,-40(fp)
  810d70:	00bfcf16 	blt	zero,r2,810cb0 <altera_avalon_jtag_uart_write+0x10c>
  810d74:	00000306 	br	810d84 <altera_avalon_jtag_uart_write+0x1e0>
        break;
  810d78:	0001883a 	nop
  810d7c:	00000106 	br	810d84 <altera_avalon_jtag_uart_write+0x1e0>
         break;
  810d80:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  810d84:	e0fff717 	ldw	r3,-36(fp)
  810d88:	e0bffd17 	ldw	r2,-12(fp)
  810d8c:	18800426 	beq	r3,r2,810da0 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
  810d90:	e0fff717 	ldw	r3,-36(fp)
  810d94:	e0bffd17 	ldw	r2,-12(fp)
  810d98:	1885c83a 	sub	r2,r3,r2
  810d9c:	00000606 	br	810db8 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
  810da0:	e0bff517 	ldw	r2,-44(fp)
  810da4:	1090000c 	andi	r2,r2,16384
  810da8:	10000226 	beq	r2,zero,810db4 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
  810dac:	00bffd44 	movi	r2,-11
  810db0:	00000106 	br	810db8 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  810db4:	00bffec4 	movi	r2,-5
}
  810db8:	e037883a 	mov	sp,fp
  810dbc:	dfc00117 	ldw	ra,4(sp)
  810dc0:	df000017 	ldw	fp,0(sp)
  810dc4:	dec00204 	addi	sp,sp,8
  810dc8:	f800283a 	ret

00810dcc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  810dcc:	defffa04 	addi	sp,sp,-24
  810dd0:	dfc00515 	stw	ra,20(sp)
  810dd4:	df000415 	stw	fp,16(sp)
  810dd8:	df000404 	addi	fp,sp,16
  810ddc:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  810de0:	0007883a 	mov	r3,zero
  810de4:	e0bffc17 	ldw	r2,-16(fp)
  810de8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  810dec:	e0bffc17 	ldw	r2,-16(fp)
  810df0:	10800104 	addi	r2,r2,4
  810df4:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
  810df8:	0005303a 	rdctl	r2,status
  810dfc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e00:	e0fffd17 	ldw	r3,-12(fp)
  810e04:	00bfff84 	movi	r2,-2
  810e08:	1884703a 	and	r2,r3,r2
  810e0c:	1001703a 	wrctl	status,r2
  return context;
  810e10:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  810e14:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
  810e18:	0811bbc0 	call	811bbc <alt_tick>
  810e1c:	e0bfff17 	ldw	r2,-4(fp)
  810e20:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  810e24:	e0bffe17 	ldw	r2,-8(fp)
  810e28:	1001703a 	wrctl	status,r2
}
  810e2c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
  810e30:	0001883a 	nop
  810e34:	e037883a 	mov	sp,fp
  810e38:	dfc00117 	ldw	ra,4(sp)
  810e3c:	df000017 	ldw	fp,0(sp)
  810e40:	dec00204 	addi	sp,sp,8
  810e44:	f800283a 	ret

00810e48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  810e48:	defff804 	addi	sp,sp,-32
  810e4c:	dfc00715 	stw	ra,28(sp)
  810e50:	df000615 	stw	fp,24(sp)
  810e54:	df000604 	addi	fp,sp,24
  810e58:	e13ffe15 	stw	r4,-8(fp)
  810e5c:	e17ffd15 	stw	r5,-12(fp)
  810e60:	e1bffc15 	stw	r6,-16(fp)
  810e64:	e1fffb15 	stw	r7,-20(fp)
  810e68:	e0bffb17 	ldw	r2,-20(fp)
  810e6c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  810e70:	d0a74f17 	ldw	r2,-25284(gp)
  810e74:	1000031e 	bne	r2,zero,810e84 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
  810e78:	e0bfff17 	ldw	r2,-4(fp)
  810e7c:	d0a74f15 	stw	r2,-25284(gp)
    return 0;
  810e80:	00000106 	br	810e88 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
  810e84:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  810e88:	e0bffe17 	ldw	r2,-8(fp)
  810e8c:	10800104 	addi	r2,r2,4
  810e90:	00c001c4 	movi	r3,7
  810e94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  810e98:	d8000015 	stw	zero,0(sp)
  810e9c:	e1fffe17 	ldw	r7,-8(fp)
  810ea0:	01802074 	movhi	r6,129
  810ea4:	31837304 	addi	r6,r6,3532
  810ea8:	e17ffc17 	ldw	r5,-16(fp)
  810eac:	e13ffd17 	ldw	r4,-12(fp)
  810eb0:	080ea880 	call	80ea88 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  810eb4:	0001883a 	nop
  810eb8:	e037883a 	mov	sp,fp
  810ebc:	dfc00117 	ldw	ra,4(sp)
  810ec0:	df000017 	ldw	fp,0(sp)
  810ec4:	dec00204 	addi	sp,sp,8
  810ec8:	f800283a 	ret

00810ecc <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  810ecc:	defffe04 	addi	sp,sp,-8
  810ed0:	df000115 	stw	fp,4(sp)
  810ed4:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
  810ed8:	d0a74c17 	ldw	r2,-25296(gp)
  810edc:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
  810ee0:	d0a74d17 	ldw	r2,-25292(gp)
  810ee4:	1000021e 	bne	r2,zero,810ef0 <alt_timestamp_start+0x24>
  {
    return -1;
  810ee8:	00bfffc4 	movi	r2,-1
  810eec:	00001906 	br	810f54 <alt_timestamp_start+0x88>
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  810ef0:	e0bfff17 	ldw	r2,-4(fp)
  810ef4:	10800104 	addi	r2,r2,4
  810ef8:	00c00204 	movi	r3,8
  810efc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
  810f00:	e0bfff17 	ldw	r2,-4(fp)
  810f04:	10800204 	addi	r2,r2,8
  810f08:	00ffffd4 	movui	r3,65535
  810f0c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
  810f10:	e0bfff17 	ldw	r2,-4(fp)
  810f14:	10800304 	addi	r2,r2,12
  810f18:	00ffffd4 	movui	r3,65535
  810f1c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
  810f20:	e0bfff17 	ldw	r2,-4(fp)
  810f24:	10800404 	addi	r2,r2,16
  810f28:	00ffffd4 	movui	r3,65535
  810f2c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
  810f30:	e0bfff17 	ldw	r2,-4(fp)
  810f34:	10800504 	addi	r2,r2,20
  810f38:	00ffffd4 	movui	r3,65535
  810f3c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
  810f40:	e0bfff17 	ldw	r2,-4(fp)
  810f44:	10800104 	addi	r2,r2,4
  810f48:	00c00104 	movi	r3,4
  810f4c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
  810f50:	0005883a 	mov	r2,zero
}
  810f54:	e037883a 	mov	sp,fp
  810f58:	df000017 	ldw	fp,0(sp)
  810f5c:	dec00104 	addi	sp,sp,4
  810f60:	f800283a 	ret

00810f64 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  810f64:	deffeb04 	addi	sp,sp,-84
  810f68:	dfc01415 	stw	ra,80(sp)
  810f6c:	df001315 	stw	fp,76(sp)
  810f70:	ddc01215 	stw	r23,72(sp)
  810f74:	dd801115 	stw	r22,68(sp)
  810f78:	dd401015 	stw	r21,64(sp)
  810f7c:	dd000f15 	stw	r20,60(sp)
  810f80:	dcc00e15 	stw	r19,56(sp)
  810f84:	dc800d15 	stw	r18,52(sp)
  810f88:	dc400c15 	stw	r17,48(sp)
  810f8c:	dc000b15 	stw	r16,44(sp)
  810f90:	df001304 	addi	fp,sp,76

  void* base = altera_avalon_timer_ts_base;
  810f94:	d7e74c17 	ldw	ra,-25296(gp)
  810f98:	e7fff715 	stw	ra,-36(fp)

  if (!altera_avalon_timer_ts_freq)
  810f9c:	d7e74d17 	ldw	ra,-25292(gp)
  810fa0:	f800031e 	bne	ra,zero,810fb0 <alt_timestamp+0x4c>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
  810fa4:	013fffc4 	movi	r4,-1
  810fa8:	017fffc4 	movi	r5,-1
  810fac:	00004706 	br	8110cc <alt_timestamp+0x168>
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
  810fb0:	e7fff717 	ldw	ra,-36(fp)
  810fb4:	ffc00604 	addi	ra,ra,24
  810fb8:	000d883a 	mov	r6,zero
  810fbc:	f9800035 	stwio	r6,0(ra)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
  810fc0:	e7fff717 	ldw	ra,-36(fp)
  810fc4:	ffc00604 	addi	ra,ra,24
  810fc8:	ffc00037 	ldwio	ra,0(ra)
  810fcc:	f82d883a 	mov	r22,ra
  810fd0:	f83fd7fa 	srai	ra,ra,31
  810fd4:	f82f883a 	mov	r23,ra
  810fd8:	b7ffffcc 	andi	ra,r22,65535
  810fdc:	e7fff515 	stw	ra,-44(fp)
  810fe0:	b82c703a 	and	r22,r23,zero
  810fe4:	e5bff615 	stw	r22,-40(fp)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
  810fe8:	e5bff717 	ldw	r22,-36(fp)
  810fec:	b5800704 	addi	r22,r22,28
  810ff0:	b5800037 	ldwio	r22,0(r22)
  810ff4:	b029883a 	mov	r20,r22
  810ff8:	b02dd7fa 	srai	r22,r22,31
  810ffc:	b02b883a 	mov	r21,r22
  811000:	a5bfffcc 	andi	r22,r20,65535
  811004:	e5bff315 	stw	r22,-52(fp)
  811008:	a828703a 	and	r20,r21,zero
  81100c:	e53ff415 	stw	r20,-48(fp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
  811010:	e53ff717 	ldw	r20,-36(fp)
  811014:	a5000804 	addi	r20,r20,32
  811018:	a5000037 	ldwio	r20,0(r20)
  81101c:	a025883a 	mov	r18,r20
  811020:	a029d7fa 	srai	r20,r20,31
  811024:	a027883a 	mov	r19,r20
  811028:	953fffcc 	andi	r20,r18,65535
  81102c:	e53ff115 	stw	r20,-60(fp)
  811030:	9824703a 	and	r18,r19,zero
  811034:	e4bff215 	stw	r18,-56(fp)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
  811038:	e4bff717 	ldw	r18,-36(fp)
  81103c:	94800904 	addi	r18,r18,36
  811040:	94800037 	ldwio	r18,0(r18)
  811044:	9021883a 	mov	r16,r18
  811048:	9025d7fa 	srai	r18,r18,31
  81104c:	9023883a 	mov	r17,r18
  811050:	84bfffcc 	andi	r18,r16,65535
  811054:	e4bfef15 	stw	r18,-68(fp)
  811058:	8820703a 	and	r16,r17,zero
  81105c:	e43ff015 	stw	r16,-64(fp)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
  811060:	e43fef17 	ldw	r16,-68(fp)
  811064:	801e943a 	slli	r15,r16,16
  811068:	001d883a 	mov	r14,zero
  81106c:	e43ff117 	ldw	r16,-60(fp)
  811070:	801a983a 	sll	r13,r16,zero
  811074:	0019883a 	mov	r12,zero
  811078:	7314b03a 	or	r10,r14,r12
  81107c:	7b56b03a 	or	r11,r15,r13
  811080:	e33ff317 	ldw	r12,-52(fp)
  811084:	6018d43a 	srli	r12,r12,16
  811088:	e37ff417 	ldw	r13,-48(fp)
  81108c:	6806943a 	slli	r3,r13,16
  811090:	60c6b03a 	or	r3,r12,r3
  811094:	e33ff317 	ldw	r12,-52(fp)
  811098:	6004943a 	slli	r2,r12,16
  81109c:	5090b03a 	or	r8,r10,r2
  8110a0:	58d2b03a 	or	r9,r11,r3
  8110a4:	e0bff517 	ldw	r2,-44(fp)
  8110a8:	1204b03a 	or	r2,r2,r8
  8110ac:	e0bfed15 	stw	r2,-76(fp)
  8110b0:	e0bff617 	ldw	r2,-40(fp)
  8110b4:	1244b03a 	or	r2,r2,r9
  8110b8:	e0bfee15 	stw	r2,-72(fp)
  8110bc:	e0bfed17 	ldw	r2,-76(fp)
  8110c0:	0088303a 	nor	r4,zero,r2
  8110c4:	e0bfee17 	ldw	r2,-72(fp)
  8110c8:	008a303a 	nor	r5,zero,r2
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
  8110cc:	200d883a 	mov	r6,r4
  8110d0:	280f883a 	mov	r7,r5
  8110d4:	3005883a 	mov	r2,r6
  8110d8:	3807883a 	mov	r3,r7
  8110dc:	e6fff804 	addi	sp,fp,-32
  8110e0:	dfc00917 	ldw	ra,36(sp)
  8110e4:	df000817 	ldw	fp,32(sp)
  8110e8:	ddc00717 	ldw	r23,28(sp)
  8110ec:	dd800617 	ldw	r22,24(sp)
  8110f0:	dd400517 	ldw	r21,20(sp)
  8110f4:	dd000417 	ldw	r20,16(sp)
  8110f8:	dcc00317 	ldw	r19,12(sp)
  8110fc:	dc800217 	ldw	r18,8(sp)
  811100:	dc400117 	ldw	r17,4(sp)
  811104:	dc000017 	ldw	r16,0(sp)
  811108:	dec00a04 	addi	sp,sp,40
  81110c:	f800283a 	ret

00811110 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  811110:	deffff04 	addi	sp,sp,-4
  811114:	df000015 	stw	fp,0(sp)
  811118:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  81111c:	d0a74d17 	ldw	r2,-25292(gp)
}
  811120:	e037883a 	mov	sp,fp
  811124:	df000017 	ldw	fp,0(sp)
  811128:	dec00104 	addi	sp,sp,4
  81112c:	f800283a 	ret

00811130 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  811130:	defff504 	addi	sp,sp,-44
  811134:	df000a15 	stw	fp,40(sp)
  811138:	df000a04 	addi	fp,sp,40
  81113c:	e13ff915 	stw	r4,-28(fp)
  811140:	e17ff815 	stw	r5,-32(fp)
  811144:	e1bff715 	stw	r6,-36(fp)
  811148:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81114c:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
  811150:	d0a74f17 	ldw	r2,-25284(gp)
  
  if (alt_ticks_per_second ())
  811154:	10003e26 	beq	r2,zero,811250 <alt_alarm_start+0x120>
  {
    if (alarm)
  811158:	e0bff917 	ldw	r2,-28(fp)
  81115c:	10003a26 	beq	r2,zero,811248 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
  811160:	e0bff917 	ldw	r2,-28(fp)
  811164:	e0fff717 	ldw	r3,-36(fp)
  811168:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  81116c:	e0bff917 	ldw	r2,-28(fp)
  811170:	e0fff617 	ldw	r3,-40(fp)
  811174:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
  811178:	0005303a 	rdctl	r2,status
  81117c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811180:	e0fffd17 	ldw	r3,-12(fp)
  811184:	00bfff84 	movi	r2,-2
  811188:	1884703a 	and	r2,r3,r2
  81118c:	1001703a 	wrctl	status,r2
  return context;
  811190:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
  811194:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  811198:	d0a75017 	ldw	r2,-25280(gp)
      
      current_nticks = alt_nticks();
  81119c:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8111a0:	e0fff817 	ldw	r3,-32(fp)
  8111a4:	e0bfff17 	ldw	r2,-4(fp)
  8111a8:	1885883a 	add	r2,r3,r2
  8111ac:	10c00044 	addi	r3,r2,1
  8111b0:	e0bff917 	ldw	r2,-28(fp)
  8111b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8111b8:	e0bff917 	ldw	r2,-28(fp)
  8111bc:	10c00217 	ldw	r3,8(r2)
  8111c0:	e0bfff17 	ldw	r2,-4(fp)
  8111c4:	1880042e 	bgeu	r3,r2,8111d8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  8111c8:	e0bff917 	ldw	r2,-28(fp)
  8111cc:	00c00044 	movi	r3,1
  8111d0:	10c00405 	stb	r3,16(r2)
  8111d4:	00000206 	br	8111e0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8111d8:	e0bff917 	ldw	r2,-28(fp)
  8111dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8111e0:	e0bff917 	ldw	r2,-28(fp)
  8111e4:	d0e01004 	addi	r3,gp,-32704
  8111e8:	e0fffb15 	stw	r3,-20(fp)
  8111ec:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8111f0:	e0bffa17 	ldw	r2,-24(fp)
  8111f4:	e0fffb17 	ldw	r3,-20(fp)
  8111f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8111fc:	e0bffb17 	ldw	r2,-20(fp)
  811200:	10c00017 	ldw	r3,0(r2)
  811204:	e0bffa17 	ldw	r2,-24(fp)
  811208:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81120c:	e0bffb17 	ldw	r2,-20(fp)
  811210:	10800017 	ldw	r2,0(r2)
  811214:	e0fffa17 	ldw	r3,-24(fp)
  811218:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81121c:	e0bffb17 	ldw	r2,-20(fp)
  811220:	e0fffa17 	ldw	r3,-24(fp)
  811224:	10c00015 	stw	r3,0(r2)
}
  811228:	0001883a 	nop
  81122c:	e0bffe17 	ldw	r2,-8(fp)
  811230:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  811234:	e0bffc17 	ldw	r2,-16(fp)
  811238:	1001703a 	wrctl	status,r2
}
  81123c:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
  811240:	0005883a 	mov	r2,zero
  811244:	00000306 	br	811254 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
  811248:	00bffa84 	movi	r2,-22
  81124c:	00000106 	br	811254 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
  811250:	00bfde84 	movi	r2,-134
  }
}
  811254:	e037883a 	mov	sp,fp
  811258:	df000017 	ldw	fp,0(sp)
  81125c:	dec00104 	addi	sp,sp,4
  811260:	f800283a 	ret

00811264 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  811264:	defffb04 	addi	sp,sp,-20
  811268:	df000415 	stw	fp,16(sp)
  81126c:	df000404 	addi	fp,sp,16
  811270:	e13ffd15 	stw	r4,-12(fp)
  811274:	e17ffc15 	stw	r5,-16(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
  811278:	e0fffd17 	ldw	r3,-12(fp)
  81127c:	e0bffc17 	ldw	r2,-16(fp)
  811280:	1885883a 	add	r2,r3,r2
  811284:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
  811288:	e0bffd17 	ldw	r2,-12(fp)
  81128c:	e0bfff15 	stw	r2,-4(fp)
  811290:	00000506 	br	8112a8 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
  811294:	e0bfff17 	ldw	r2,-4(fp)
  811298:	1000001b 	flushda	0(r2)
  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
  81129c:	e0bfff17 	ldw	r2,-4(fp)
  8112a0:	10800804 	addi	r2,r2,32
  8112a4:	e0bfff15 	stw	r2,-4(fp)
  8112a8:	e0ffff17 	ldw	r3,-4(fp)
  8112ac:	e0bffe17 	ldw	r2,-8(fp)
  8112b0:	18bff836 	bltu	r3,r2,811294 <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
  8112b4:	e0bffd17 	ldw	r2,-12(fp)
  8112b8:	108007cc 	andi	r2,r2,31
  8112bc:	10000226 	beq	r2,zero,8112c8 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
  8112c0:	e0bfff17 	ldw	r2,-4(fp)
  8112c4:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8112c8:	0001883a 	nop
  8112cc:	e037883a 	mov	sp,fp
  8112d0:	df000017 	ldw	fp,0(sp)
  8112d4:	dec00104 	addi	sp,sp,4
  8112d8:	f800283a 	ret

008112dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8112dc:	defffe04 	addi	sp,sp,-8
  8112e0:	df000115 	stw	fp,4(sp)
  8112e4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8112e8:	e03fff15 	stw	zero,-4(fp)
  8112ec:	00000506 	br	811304 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8112f0:	e0bfff17 	ldw	r2,-4(fp)
  8112f4:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8112f8:	e0bfff17 	ldw	r2,-4(fp)
  8112fc:	10800804 	addi	r2,r2,32
  811300:	e0bfff15 	stw	r2,-4(fp)
  811304:	e0bfff17 	ldw	r2,-4(fp)
  811308:	10820030 	cmpltui	r2,r2,2048
  81130c:	103ff81e 	bne	r2,zero,8112f0 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  811310:	0001883a 	nop
  811314:	0001883a 	nop
  811318:	e037883a 	mov	sp,fp
  81131c:	df000017 	ldw	fp,0(sp)
  811320:	dec00104 	addi	sp,sp,4
  811324:	f800283a 	ret

00811328 <alt_get_errno>:
{
  811328:	defffe04 	addi	sp,sp,-8
  81132c:	dfc00115 	stw	ra,4(sp)
  811330:	df000015 	stw	fp,0(sp)
  811334:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811338:	d0a00917 	ldw	r2,-32732(gp)
  81133c:	10000326 	beq	r2,zero,81134c <alt_get_errno+0x24>
  811340:	d0a00917 	ldw	r2,-32732(gp)
  811344:	103ee83a 	callr	r2
  811348:	00000106 	br	811350 <alt_get_errno+0x28>
  81134c:	d0a74604 	addi	r2,gp,-25320
}
  811350:	e037883a 	mov	sp,fp
  811354:	dfc00117 	ldw	ra,4(sp)
  811358:	df000017 	ldw	fp,0(sp)
  81135c:	dec00204 	addi	sp,sp,8
  811360:	f800283a 	ret

00811364 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  811364:	defffa04 	addi	sp,sp,-24
  811368:	dfc00515 	stw	ra,20(sp)
  81136c:	df000415 	stw	fp,16(sp)
  811370:	df000404 	addi	fp,sp,16
  811374:	e13ffd15 	stw	r4,-12(fp)
  811378:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81137c:	e0bffd17 	ldw	r2,-12(fp)
  811380:	10000326 	beq	r2,zero,811390 <alt_dev_llist_insert+0x2c>
  811384:	e0bffd17 	ldw	r2,-12(fp)
  811388:	10800217 	ldw	r2,8(r2)
  81138c:	1000061e 	bne	r2,zero,8113a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  811390:	08113280 	call	811328 <alt_get_errno>
  811394:	1007883a 	mov	r3,r2
  811398:	00800584 	movi	r2,22
  81139c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8113a0:	00bffa84 	movi	r2,-22
  8113a4:	00001406 	br	8113f8 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8113a8:	e0bffd17 	ldw	r2,-12(fp)
  8113ac:	e0fffc17 	ldw	r3,-16(fp)
  8113b0:	e0ffff15 	stw	r3,-4(fp)
  8113b4:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
  8113b8:	e0bffe17 	ldw	r2,-8(fp)
  8113bc:	e0ffff17 	ldw	r3,-4(fp)
  8113c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8113c4:	e0bfff17 	ldw	r2,-4(fp)
  8113c8:	10c00017 	ldw	r3,0(r2)
  8113cc:	e0bffe17 	ldw	r2,-8(fp)
  8113d0:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  8113d4:	e0bfff17 	ldw	r2,-4(fp)
  8113d8:	10800017 	ldw	r2,0(r2)
  8113dc:	e0fffe17 	ldw	r3,-8(fp)
  8113e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8113e4:	e0bfff17 	ldw	r2,-4(fp)
  8113e8:	e0fffe17 	ldw	r3,-8(fp)
  8113ec:	10c00015 	stw	r3,0(r2)
}
  8113f0:	0001883a 	nop

  return 0;  
  8113f4:	0005883a 	mov	r2,zero
}
  8113f8:	e037883a 	mov	sp,fp
  8113fc:	dfc00117 	ldw	ra,4(sp)
  811400:	df000017 	ldw	fp,0(sp)
  811404:	dec00204 	addi	sp,sp,8
  811408:	f800283a 	ret

0081140c <alt_get_errno>:
{
  81140c:	defffe04 	addi	sp,sp,-8
  811410:	dfc00115 	stw	ra,4(sp)
  811414:	df000015 	stw	fp,0(sp)
  811418:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81141c:	d0a00917 	ldw	r2,-32732(gp)
  811420:	10000326 	beq	r2,zero,811430 <alt_get_errno+0x24>
  811424:	d0a00917 	ldw	r2,-32732(gp)
  811428:	103ee83a 	callr	r2
  81142c:	00000106 	br	811434 <alt_get_errno+0x28>
  811430:	d0a74604 	addi	r2,gp,-25320
}
  811434:	e037883a 	mov	sp,fp
  811438:	dfc00117 	ldw	ra,4(sp)
  81143c:	df000017 	ldw	fp,0(sp)
  811440:	dec00204 	addi	sp,sp,8
  811444:	f800283a 	ret

00811448 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
  811448:	defffc04 	addi	sp,sp,-16
  81144c:	dfc00315 	stw	ra,12(sp)
  811450:	df000215 	stw	fp,8(sp)
  811454:	df000204 	addi	fp,sp,8
  811458:	e13ffe15 	stw	r4,-8(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
  81145c:	d1600c04 	addi	r5,gp,-32720
  811460:	e13ffe17 	ldw	r4,-8(fp)
  811464:	08115f40 	call	8115f4 <alt_find_dev>
  811468:	e0bfff15 	stw	r2,-4(fp)

  if (!dev)
  81146c:	e0bfff17 	ldw	r2,-4(fp)
  811470:	1000041e 	bne	r2,zero,811484 <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
  811474:	081140c0 	call	81140c <alt_get_errno>
  811478:	1007883a 	mov	r3,r2
  81147c:	008004c4 	movi	r2,19
  811480:	18800015 	stw	r2,0(r3)
  }

  return dev;
  811484:	e0bfff17 	ldw	r2,-4(fp)
}
  811488:	e037883a 	mov	sp,fp
  81148c:	dfc00117 	ldw	ra,4(sp)
  811490:	df000017 	ldw	fp,0(sp)
  811494:	dec00204 	addi	sp,sp,8
  811498:	f800283a 	ret

0081149c <alt_get_errno>:
{
  81149c:	defffe04 	addi	sp,sp,-8
  8114a0:	dfc00115 	stw	ra,4(sp)
  8114a4:	df000015 	stw	fp,0(sp)
  8114a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8114ac:	d0a00917 	ldw	r2,-32732(gp)
  8114b0:	10000326 	beq	r2,zero,8114c0 <alt_get_errno+0x24>
  8114b4:	d0a00917 	ldw	r2,-32732(gp)
  8114b8:	103ee83a 	callr	r2
  8114bc:	00000106 	br	8114c4 <alt_get_errno+0x28>
  8114c0:	d0a74604 	addi	r2,gp,-25320
}
  8114c4:	e037883a 	mov	sp,fp
  8114c8:	dfc00117 	ldw	ra,4(sp)
  8114cc:	df000017 	ldw	fp,0(sp)
  8114d0:	dec00204 	addi	sp,sp,8
  8114d4:	f800283a 	ret

008114d8 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
  8114d8:	defffc04 	addi	sp,sp,-16
  8114dc:	dfc00315 	stw	ra,12(sp)
  8114e0:	df000215 	stw	fp,8(sp)
  8114e4:	df000204 	addi	fp,sp,8
  8114e8:	e13ffe15 	stw	r4,-8(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
  8114ec:	d1600e04 	addi	r5,gp,-32712
  8114f0:	e13ffe17 	ldw	r4,-8(fp)
  8114f4:	08115f40 	call	8115f4 <alt_find_dev>
  8114f8:	e0bfff15 	stw	r2,-4(fp)

  if (!dev)
  8114fc:	e0bfff17 	ldw	r2,-4(fp)
  811500:	1000041e 	bne	r2,zero,811514 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
  811504:	081149c0 	call	81149c <alt_get_errno>
  811508:	1007883a 	mov	r3,r2
  81150c:	008004c4 	movi	r2,19
  811510:	18800015 	stw	r2,0(r3)
  }

  return dev;
  811514:	e0bfff17 	ldw	r2,-4(fp)
}
  811518:	e037883a 	mov	sp,fp
  81151c:	dfc00117 	ldw	ra,4(sp)
  811520:	df000017 	ldw	fp,0(sp)
  811524:	dec00204 	addi	sp,sp,8
  811528:	f800283a 	ret

0081152c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81152c:	defffd04 	addi	sp,sp,-12
  811530:	dfc00215 	stw	ra,8(sp)
  811534:	df000115 	stw	fp,4(sp)
  811538:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81153c:	00802074 	movhi	r2,129
  811540:	1088d404 	addi	r2,r2,9040
  811544:	e0bfff15 	stw	r2,-4(fp)
  811548:	00000606 	br	811564 <_do_ctors+0x38>
        (*ctor) (); 
  81154c:	e0bfff17 	ldw	r2,-4(fp)
  811550:	10800017 	ldw	r2,0(r2)
  811554:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811558:	e0bfff17 	ldw	r2,-4(fp)
  81155c:	10bfff04 	addi	r2,r2,-4
  811560:	e0bfff15 	stw	r2,-4(fp)
  811564:	e0ffff17 	ldw	r3,-4(fp)
  811568:	00802074 	movhi	r2,129
  81156c:	1088d504 	addi	r2,r2,9044
  811570:	18bff62e 	bgeu	r3,r2,81154c <_do_ctors+0x20>
}
  811574:	0001883a 	nop
  811578:	0001883a 	nop
  81157c:	e037883a 	mov	sp,fp
  811580:	dfc00117 	ldw	ra,4(sp)
  811584:	df000017 	ldw	fp,0(sp)
  811588:	dec00204 	addi	sp,sp,8
  81158c:	f800283a 	ret

00811590 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  811590:	defffd04 	addi	sp,sp,-12
  811594:	dfc00215 	stw	ra,8(sp)
  811598:	df000115 	stw	fp,4(sp)
  81159c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8115a0:	00802074 	movhi	r2,129
  8115a4:	1088d404 	addi	r2,r2,9040
  8115a8:	e0bfff15 	stw	r2,-4(fp)
  8115ac:	00000606 	br	8115c8 <_do_dtors+0x38>
        (*dtor) (); 
  8115b0:	e0bfff17 	ldw	r2,-4(fp)
  8115b4:	10800017 	ldw	r2,0(r2)
  8115b8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8115bc:	e0bfff17 	ldw	r2,-4(fp)
  8115c0:	10bfff04 	addi	r2,r2,-4
  8115c4:	e0bfff15 	stw	r2,-4(fp)
  8115c8:	e0ffff17 	ldw	r3,-4(fp)
  8115cc:	00802074 	movhi	r2,129
  8115d0:	1088d504 	addi	r2,r2,9044
  8115d4:	18bff62e 	bgeu	r3,r2,8115b0 <_do_dtors+0x20>
}
  8115d8:	0001883a 	nop
  8115dc:	0001883a 	nop
  8115e0:	e037883a 	mov	sp,fp
  8115e4:	dfc00117 	ldw	ra,4(sp)
  8115e8:	df000017 	ldw	fp,0(sp)
  8115ec:	dec00204 	addi	sp,sp,8
  8115f0:	f800283a 	ret

008115f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8115f4:	defffa04 	addi	sp,sp,-24
  8115f8:	dfc00515 	stw	ra,20(sp)
  8115fc:	df000415 	stw	fp,16(sp)
  811600:	df000404 	addi	fp,sp,16
  811604:	e13ffd15 	stw	r4,-12(fp)
  811608:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81160c:	e0bffc17 	ldw	r2,-16(fp)
  811610:	10800017 	ldw	r2,0(r2)
  811614:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  811618:	e13ffd17 	ldw	r4,-12(fp)
  81161c:	080333c0 	call	80333c <strlen>
  811620:	10800044 	addi	r2,r2,1
  811624:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811628:	00000d06 	br	811660 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81162c:	e0bfff17 	ldw	r2,-4(fp)
  811630:	10800217 	ldw	r2,8(r2)
  811634:	e0fffe17 	ldw	r3,-8(fp)
  811638:	180d883a 	mov	r6,r3
  81163c:	e17ffd17 	ldw	r5,-12(fp)
  811640:	1009883a 	mov	r4,r2
  811644:	081212c0 	call	81212c <memcmp>
  811648:	1000021e 	bne	r2,zero,811654 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81164c:	e0bfff17 	ldw	r2,-4(fp)
  811650:	00000706 	br	811670 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  811654:	e0bfff17 	ldw	r2,-4(fp)
  811658:	10800017 	ldw	r2,0(r2)
  81165c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
  811660:	e0ffff17 	ldw	r3,-4(fp)
  811664:	e0bffc17 	ldw	r2,-16(fp)
  811668:	18bff01e 	bne	r3,r2,81162c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
  81166c:	0005883a 	mov	r2,zero
}
  811670:	e037883a 	mov	sp,fp
  811674:	dfc00117 	ldw	ra,4(sp)
  811678:	df000017 	ldw	fp,0(sp)
  81167c:	dec00204 	addi	sp,sp,8
  811680:	f800283a 	ret

00811684 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  811684:	defffe04 	addi	sp,sp,-8
  811688:	dfc00115 	stw	ra,4(sp)
  81168c:	df000015 	stw	fp,0(sp)
  811690:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  811694:	01420004 	movi	r5,2048
  811698:	0009883a 	mov	r4,zero
  81169c:	0811ea80 	call	811ea8 <alt_icache_flush>
#endif
}
  8116a0:	0001883a 	nop
  8116a4:	e037883a 	mov	sp,fp
  8116a8:	dfc00117 	ldw	ra,4(sp)
  8116ac:	df000017 	ldw	fp,0(sp)
  8116b0:	dec00204 	addi	sp,sp,8
  8116b4:	f800283a 	ret

008116b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8116b8:	defffe04 	addi	sp,sp,-8
  8116bc:	df000115 	stw	fp,4(sp)
  8116c0:	df000104 	addi	fp,sp,4
  8116c4:	e13fff15 	stw	r4,-4(fp)
  8116c8:	e0bfff17 	ldw	r2,-4(fp)
  8116cc:	10bffe84 	addi	r2,r2,-6
  8116d0:	10c00428 	cmpgeui	r3,r2,16
  8116d4:	1800191e 	bne	r3,zero,81173c <alt_exception_cause_generated_bad_addr+0x84>
  8116d8:	100690ba 	slli	r3,r2,2
  8116dc:	00802074 	movhi	r2,129
  8116e0:	1885883a 	add	r2,r3,r2
  8116e4:	1085bb17 	ldw	r2,5868(r2)
  8116e8:	1000683a 	jmp	r2
  8116ec:	0081172c 	andhi	r2,zero,1116
  8116f0:	0081172c 	andhi	r2,zero,1116
  8116f4:	0081173c 	xorhi	r2,zero,1116
  8116f8:	0081173c 	xorhi	r2,zero,1116
  8116fc:	0081173c 	xorhi	r2,zero,1116
  811700:	0081172c 	andhi	r2,zero,1116
  811704:	00811734 	movhi	r2,1116
  811708:	0081173c 	xorhi	r2,zero,1116
  81170c:	0081172c 	andhi	r2,zero,1116
  811710:	0081172c 	andhi	r2,zero,1116
  811714:	0081173c 	xorhi	r2,zero,1116
  811718:	0081172c 	andhi	r2,zero,1116
  81171c:	00811734 	movhi	r2,1116
  811720:	0081173c 	xorhi	r2,zero,1116
  811724:	0081173c 	xorhi	r2,zero,1116
  811728:	0081172c 	andhi	r2,zero,1116
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81172c:	00800044 	movi	r2,1
  811730:	00000306 	br	811740 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  811734:	0005883a 	mov	r2,zero
  811738:	00000106 	br	811740 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
  81173c:	0005883a 	mov	r2,zero
  }
}
  811740:	e037883a 	mov	sp,fp
  811744:	df000017 	ldw	fp,0(sp)
  811748:	dec00104 	addi	sp,sp,4
  81174c:	f800283a 	ret

00811750 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811750:	defff904 	addi	sp,sp,-28
  811754:	dfc00615 	stw	ra,24(sp)
  811758:	df000515 	stw	fp,20(sp)
  81175c:	df000504 	addi	fp,sp,20
  811760:	e13ffe15 	stw	r4,-8(fp)
  811764:	e17ffd15 	stw	r5,-12(fp)
  811768:	e1bffc15 	stw	r6,-16(fp)
  81176c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
  811770:	e1bffb17 	ldw	r6,-20(fp)
  811774:	e17ffc17 	ldw	r5,-16(fp)
  811778:	e13ffd17 	ldw	r4,-12(fp)
  81177c:	08119b80 	call	8119b8 <open>
  811780:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
  811784:	e0bfff17 	ldw	r2,-4(fp)
  811788:	10002016 	blt	r2,zero,81180c <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
  81178c:	e0ffff17 	ldw	r3,-4(fp)
  811790:	1805883a 	mov	r2,r3
  811794:	1085883a 	add	r2,r2,r2
  811798:	10c5883a 	add	r2,r2,r3
  81179c:	100490ba 	slli	r2,r2,2
  8117a0:	00c02074 	movhi	r3,129
  8117a4:	10c7883a 	add	r3,r2,r3
  8117a8:	18cd6217 	ldw	r3,13704(r3)
  8117ac:	e0bffe17 	ldw	r2,-8(fp)
  8117b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8117b4:	e0ffff17 	ldw	r3,-4(fp)
  8117b8:	1805883a 	mov	r2,r3
  8117bc:	1085883a 	add	r2,r2,r2
  8117c0:	10c5883a 	add	r2,r2,r3
  8117c4:	100490ba 	slli	r2,r2,2
  8117c8:	00c02074 	movhi	r3,129
  8117cc:	10c7883a 	add	r3,r2,r3
  8117d0:	18cd6317 	ldw	r3,13708(r3)
  8117d4:	e0bffe17 	ldw	r2,-8(fp)
  8117d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8117dc:	e0ffff17 	ldw	r3,-4(fp)
  8117e0:	1805883a 	mov	r2,r3
  8117e4:	1085883a 	add	r2,r2,r2
  8117e8:	10c5883a 	add	r2,r2,r3
  8117ec:	100490ba 	slli	r2,r2,2
  8117f0:	00c02074 	movhi	r3,129
  8117f4:	10c7883a 	add	r3,r2,r3
  8117f8:	18cd6417 	ldw	r3,13712(r3)
  8117fc:	e0bffe17 	ldw	r2,-8(fp)
  811800:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811804:	e13fff17 	ldw	r4,-4(fp)
  811808:	080f3840 	call	80f384 <alt_release_fd>
  }
} 
  81180c:	0001883a 	nop
  811810:	e037883a 	mov	sp,fp
  811814:	dfc00117 	ldw	ra,4(sp)
  811818:	df000017 	ldw	fp,0(sp)
  81181c:	dec00204 	addi	sp,sp,8
  811820:	f800283a 	ret

00811824 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  811824:	defffb04 	addi	sp,sp,-20
  811828:	dfc00415 	stw	ra,16(sp)
  81182c:	df000315 	stw	fp,12(sp)
  811830:	df000304 	addi	fp,sp,12
  811834:	e13fff15 	stw	r4,-4(fp)
  811838:	e17ffe15 	stw	r5,-8(fp)
  81183c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  811840:	01c07fc4 	movi	r7,511
  811844:	01800044 	movi	r6,1
  811848:	e17fff17 	ldw	r5,-4(fp)
  81184c:	01002074 	movhi	r4,129
  811850:	210d6504 	addi	r4,r4,13716
  811854:	08117500 	call	811750 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  811858:	01c07fc4 	movi	r7,511
  81185c:	000d883a 	mov	r6,zero
  811860:	e17ffe17 	ldw	r5,-8(fp)
  811864:	01002074 	movhi	r4,129
  811868:	210d6204 	addi	r4,r4,13704
  81186c:	08117500 	call	811750 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811870:	01c07fc4 	movi	r7,511
  811874:	01800044 	movi	r6,1
  811878:	e17ffd17 	ldw	r5,-12(fp)
  81187c:	01002074 	movhi	r4,129
  811880:	210d6804 	addi	r4,r4,13728
  811884:	08117500 	call	811750 <alt_open_fd>
}  
  811888:	0001883a 	nop
  81188c:	e037883a 	mov	sp,fp
  811890:	dfc00117 	ldw	ra,4(sp)
  811894:	df000017 	ldw	fp,0(sp)
  811898:	dec00204 	addi	sp,sp,8
  81189c:	f800283a 	ret

008118a0 <alt_get_errno>:
{
  8118a0:	defffe04 	addi	sp,sp,-8
  8118a4:	dfc00115 	stw	ra,4(sp)
  8118a8:	df000015 	stw	fp,0(sp)
  8118ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8118b0:	d0a00917 	ldw	r2,-32732(gp)
  8118b4:	10000326 	beq	r2,zero,8118c4 <alt_get_errno+0x24>
  8118b8:	d0a00917 	ldw	r2,-32732(gp)
  8118bc:	103ee83a 	callr	r2
  8118c0:	00000106 	br	8118c8 <alt_get_errno+0x28>
  8118c4:	d0a74604 	addi	r2,gp,-25320
}
  8118c8:	e037883a 	mov	sp,fp
  8118cc:	dfc00117 	ldw	ra,4(sp)
  8118d0:	df000017 	ldw	fp,0(sp)
  8118d4:	dec00204 	addi	sp,sp,8
  8118d8:	f800283a 	ret

008118dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8118dc:	defffd04 	addi	sp,sp,-12
  8118e0:	df000215 	stw	fp,8(sp)
  8118e4:	df000204 	addi	fp,sp,8
  8118e8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8118ec:	e0bffe17 	ldw	r2,-8(fp)
  8118f0:	10800217 	ldw	r2,8(r2)
  8118f4:	10d00034 	orhi	r3,r2,16384
  8118f8:	e0bffe17 	ldw	r2,-8(fp)
  8118fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811900:	e03fff15 	stw	zero,-4(fp)
  811904:	00002306 	br	811994 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811908:	e0ffff17 	ldw	r3,-4(fp)
  81190c:	1805883a 	mov	r2,r3
  811910:	1085883a 	add	r2,r2,r2
  811914:	10c5883a 	add	r2,r2,r3
  811918:	100490ba 	slli	r2,r2,2
  81191c:	00c02074 	movhi	r3,129
  811920:	10c7883a 	add	r3,r2,r3
  811924:	18cd6217 	ldw	r3,13704(r3)
  811928:	e0bffe17 	ldw	r2,-8(fp)
  81192c:	10800017 	ldw	r2,0(r2)
  811930:	1880151e 	bne	r3,r2,811988 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  811934:	e0ffff17 	ldw	r3,-4(fp)
  811938:	1805883a 	mov	r2,r3
  81193c:	1085883a 	add	r2,r2,r2
  811940:	10c5883a 	add	r2,r2,r3
  811944:	100490ba 	slli	r2,r2,2
  811948:	00c02074 	movhi	r3,129
  81194c:	10c7883a 	add	r3,r2,r3
  811950:	188d6417 	ldw	r2,13712(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
  811954:	10000c0e 	bge	r2,zero,811988 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
  811958:	e0ffff17 	ldw	r3,-4(fp)
  81195c:	1805883a 	mov	r2,r3
  811960:	1085883a 	add	r2,r2,r2
  811964:	10c5883a 	add	r2,r2,r3
  811968:	100490ba 	slli	r2,r2,2
  81196c:	00c02074 	movhi	r3,129
  811970:	18cd6204 	addi	r3,r3,13704
  811974:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  811978:	e0fffe17 	ldw	r3,-8(fp)
  81197c:	18800226 	beq	r3,r2,811988 <alt_file_locked+0xac>
    {
      return -EACCES;
  811980:	00bffcc4 	movi	r2,-13
  811984:	00000806 	br	8119a8 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
  811988:	e0bfff17 	ldw	r2,-4(fp)
  81198c:	10800044 	addi	r2,r2,1
  811990:	e0bfff15 	stw	r2,-4(fp)
  811994:	d0a00817 	ldw	r2,-32736(gp)
  811998:	1007883a 	mov	r3,r2
  81199c:	e0bfff17 	ldw	r2,-4(fp)
  8119a0:	18bfd92e 	bgeu	r3,r2,811908 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8119a4:	0005883a 	mov	r2,zero
}
  8119a8:	e037883a 	mov	sp,fp
  8119ac:	df000017 	ldw	fp,0(sp)
  8119b0:	dec00104 	addi	sp,sp,4
  8119b4:	f800283a 	ret

008119b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8119b8:	defff604 	addi	sp,sp,-40
  8119bc:	dfc00915 	stw	ra,36(sp)
  8119c0:	df000815 	stw	fp,32(sp)
  8119c4:	df000804 	addi	fp,sp,32
  8119c8:	e13ffa15 	stw	r4,-24(fp)
  8119cc:	e17ff915 	stw	r5,-28(fp)
  8119d0:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8119d4:	00bfffc4 	movi	r2,-1
  8119d8:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
  8119dc:	00bffb44 	movi	r2,-19
  8119e0:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
  8119e4:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8119e8:	d1600604 	addi	r5,gp,-32744
  8119ec:	e13ffa17 	ldw	r4,-24(fp)
  8119f0:	08115f40 	call	8115f4 <alt_find_dev>
  8119f4:	e0bfff15 	stw	r2,-4(fp)
  8119f8:	e0bfff17 	ldw	r2,-4(fp)
  8119fc:	1000051e 	bne	r2,zero,811a14 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  811a00:	e13ffa17 	ldw	r4,-24(fp)
  811a04:	0811ce80 	call	811ce8 <alt_find_file>
  811a08:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
  811a0c:	00800044 	movi	r2,1
  811a10:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811a14:	e0bfff17 	ldw	r2,-4(fp)
  811a18:	10002c26 	beq	r2,zero,811acc <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811a1c:	e13fff17 	ldw	r4,-4(fp)
  811a20:	0811df00 	call	811df0 <alt_get_fd>
  811a24:	e0bffe15 	stw	r2,-8(fp)
  811a28:	e0bffe17 	ldw	r2,-8(fp)
  811a2c:	1000030e 	bge	r2,zero,811a3c <open+0x84>
    {
      status = index;
  811a30:	e0bffe17 	ldw	r2,-8(fp)
  811a34:	e0bffd15 	stw	r2,-12(fp)
  811a38:	00002606 	br	811ad4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  811a3c:	e0fffe17 	ldw	r3,-8(fp)
  811a40:	1805883a 	mov	r2,r3
  811a44:	1085883a 	add	r2,r2,r2
  811a48:	10c5883a 	add	r2,r2,r3
  811a4c:	100490ba 	slli	r2,r2,2
  811a50:	00c02074 	movhi	r3,129
  811a54:	18cd6204 	addi	r3,r3,13704
  811a58:	10c5883a 	add	r2,r2,r3
  811a5c:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811a60:	e0fff917 	ldw	r3,-28(fp)
  811a64:	00900034 	movhi	r2,16384
  811a68:	10bfffc4 	addi	r2,r2,-1
  811a6c:	1886703a 	and	r3,r3,r2
  811a70:	e0bffb17 	ldw	r2,-20(fp)
  811a74:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  811a78:	e0bffc17 	ldw	r2,-16(fp)
  811a7c:	1000051e 	bne	r2,zero,811a94 <open+0xdc>
  811a80:	e13ffb17 	ldw	r4,-20(fp)
  811a84:	08118dc0 	call	8118dc <alt_file_locked>
  811a88:	e0bffd15 	stw	r2,-12(fp)
  811a8c:	e0bffd17 	ldw	r2,-12(fp)
  811a90:	10001016 	blt	r2,zero,811ad4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811a94:	e0bfff17 	ldw	r2,-4(fp)
  811a98:	10800317 	ldw	r2,12(r2)
  811a9c:	10000826 	beq	r2,zero,811ac0 <open+0x108>
  811aa0:	e0bfff17 	ldw	r2,-4(fp)
  811aa4:	10800317 	ldw	r2,12(r2)
  811aa8:	e1fff817 	ldw	r7,-32(fp)
  811aac:	e1bff917 	ldw	r6,-28(fp)
  811ab0:	e17ffa17 	ldw	r5,-24(fp)
  811ab4:	e13ffb17 	ldw	r4,-20(fp)
  811ab8:	103ee83a 	callr	r2
  811abc:	00000106 	br	811ac4 <open+0x10c>
  811ac0:	0005883a 	mov	r2,zero
  811ac4:	e0bffd15 	stw	r2,-12(fp)
  811ac8:	00000206 	br	811ad4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811acc:	00bffb44 	movi	r2,-19
  811ad0:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811ad4:	e0bffd17 	ldw	r2,-12(fp)
  811ad8:	1000090e 	bge	r2,zero,811b00 <open+0x148>
  {
    alt_release_fd (index);  
  811adc:	e13ffe17 	ldw	r4,-8(fp)
  811ae0:	080f3840 	call	80f384 <alt_release_fd>
    ALT_ERRNO = -status;
  811ae4:	08118a00 	call	8118a0 <alt_get_errno>
  811ae8:	1007883a 	mov	r3,r2
  811aec:	e0bffd17 	ldw	r2,-12(fp)
  811af0:	0085c83a 	sub	r2,zero,r2
  811af4:	18800015 	stw	r2,0(r3)
    return -1;
  811af8:	00bfffc4 	movi	r2,-1
  811afc:	00000106 	br	811b04 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  811b00:	e0bffe17 	ldw	r2,-8(fp)
}
  811b04:	e037883a 	mov	sp,fp
  811b08:	dfc00117 	ldw	ra,4(sp)
  811b0c:	df000017 	ldw	fp,0(sp)
  811b10:	dec00204 	addi	sp,sp,8
  811b14:	f800283a 	ret

00811b18 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  811b18:	defffa04 	addi	sp,sp,-24
  811b1c:	df000515 	stw	fp,20(sp)
  811b20:	df000504 	addi	fp,sp,20
  811b24:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
  811b28:	0005303a 	rdctl	r2,status
  811b2c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b30:	e0fffc17 	ldw	r3,-16(fp)
  811b34:	00bfff84 	movi	r2,-2
  811b38:	1884703a 	and	r2,r3,r2
  811b3c:	1001703a 	wrctl	status,r2
  return context;
  811b40:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  811b44:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
  811b48:	e0bffb17 	ldw	r2,-20(fp)
  811b4c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811b50:	e0bffd17 	ldw	r2,-12(fp)
  811b54:	10800017 	ldw	r2,0(r2)
  811b58:	e0fffd17 	ldw	r3,-12(fp)
  811b5c:	18c00117 	ldw	r3,4(r3)
  811b60:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  811b64:	e0bffd17 	ldw	r2,-12(fp)
  811b68:	10800117 	ldw	r2,4(r2)
  811b6c:	e0fffd17 	ldw	r3,-12(fp)
  811b70:	18c00017 	ldw	r3,0(r3)
  811b74:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811b78:	e0bffd17 	ldw	r2,-12(fp)
  811b7c:	e0fffd17 	ldw	r3,-12(fp)
  811b80:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  811b84:	e0bffd17 	ldw	r2,-12(fp)
  811b88:	e0fffd17 	ldw	r3,-12(fp)
  811b8c:	10c00015 	stw	r3,0(r2)
} 
  811b90:	0001883a 	nop
  811b94:	e0bfff17 	ldw	r2,-4(fp)
  811b98:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  811b9c:	e0bffe17 	ldw	r2,-8(fp)
  811ba0:	1001703a 	wrctl	status,r2
}
  811ba4:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
  811ba8:	0001883a 	nop
  811bac:	e037883a 	mov	sp,fp
  811bb0:	df000017 	ldw	fp,0(sp)
  811bb4:	dec00104 	addi	sp,sp,4
  811bb8:	f800283a 	ret

00811bbc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811bbc:	defffb04 	addi	sp,sp,-20
  811bc0:	dfc00415 	stw	ra,16(sp)
  811bc4:	df000315 	stw	fp,12(sp)
  811bc8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811bcc:	d0a01017 	ldw	r2,-32704(gp)
  811bd0:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811bd4:	d0a75017 	ldw	r2,-25280(gp)
  811bd8:	10800044 	addi	r2,r2,1
  811bdc:	d0a75015 	stw	r2,-25280(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811be0:	00002e06 	br	811c9c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  811be4:	e0bfff17 	ldw	r2,-4(fp)
  811be8:	10800017 	ldw	r2,0(r2)
  811bec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811bf0:	e0bfff17 	ldw	r2,-4(fp)
  811bf4:	10800403 	ldbu	r2,16(r2)
  811bf8:	10803fcc 	andi	r2,r2,255
  811bfc:	10000426 	beq	r2,zero,811c10 <alt_tick+0x54>
  811c00:	d0a75017 	ldw	r2,-25280(gp)
  811c04:	1000021e 	bne	r2,zero,811c10 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  811c08:	e0bfff17 	ldw	r2,-4(fp)
  811c0c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811c10:	e0bfff17 	ldw	r2,-4(fp)
  811c14:	10800217 	ldw	r2,8(r2)
  811c18:	d0e75017 	ldw	r3,-25280(gp)
  811c1c:	18801d36 	bltu	r3,r2,811c94 <alt_tick+0xd8>
  811c20:	e0bfff17 	ldw	r2,-4(fp)
  811c24:	10800403 	ldbu	r2,16(r2)
  811c28:	10803fcc 	andi	r2,r2,255
  811c2c:	1000191e 	bne	r2,zero,811c94 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  811c30:	e0bfff17 	ldw	r2,-4(fp)
  811c34:	10800317 	ldw	r2,12(r2)
  811c38:	e0ffff17 	ldw	r3,-4(fp)
  811c3c:	18c00517 	ldw	r3,20(r3)
  811c40:	1809883a 	mov	r4,r3
  811c44:	103ee83a 	callr	r2
  811c48:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811c4c:	e0bffd17 	ldw	r2,-12(fp)
  811c50:	1000031e 	bne	r2,zero,811c60 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  811c54:	e13fff17 	ldw	r4,-4(fp)
  811c58:	0811b180 	call	811b18 <alt_alarm_stop>
  811c5c:	00000d06 	br	811c94 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  811c60:	e0bfff17 	ldw	r2,-4(fp)
  811c64:	10c00217 	ldw	r3,8(r2)
  811c68:	e0bffd17 	ldw	r2,-12(fp)
  811c6c:	1887883a 	add	r3,r3,r2
  811c70:	e0bfff17 	ldw	r2,-4(fp)
  811c74:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811c78:	e0bfff17 	ldw	r2,-4(fp)
  811c7c:	10c00217 	ldw	r3,8(r2)
  811c80:	d0a75017 	ldw	r2,-25280(gp)
  811c84:	1880032e 	bgeu	r3,r2,811c94 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  811c88:	e0bfff17 	ldw	r2,-4(fp)
  811c8c:	00c00044 	movi	r3,1
  811c90:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  811c94:	e0bffe17 	ldw	r2,-8(fp)
  811c98:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
  811c9c:	e0ffff17 	ldw	r3,-4(fp)
  811ca0:	d0a01004 	addi	r2,gp,-32704
  811ca4:	18bfcf1e 	bne	r3,r2,811be4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  811ca8:	0001883a 	nop
}
  811cac:	0001883a 	nop
  811cb0:	e037883a 	mov	sp,fp
  811cb4:	dfc00117 	ldw	ra,4(sp)
  811cb8:	df000017 	ldw	fp,0(sp)
  811cbc:	dec00204 	addi	sp,sp,8
  811cc0:	f800283a 	ret

00811cc4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  811cc4:	deffff04 	addi	sp,sp,-4
  811cc8:	df000015 	stw	fp,0(sp)
  811ccc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  811cd0:	000170fa 	wrctl	ienable,zero
}
  811cd4:	0001883a 	nop
  811cd8:	e037883a 	mov	sp,fp
  811cdc:	df000017 	ldw	fp,0(sp)
  811ce0:	dec00104 	addi	sp,sp,4
  811ce4:	f800283a 	ret

00811ce8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  811ce8:	defffb04 	addi	sp,sp,-20
  811cec:	dfc00415 	stw	ra,16(sp)
  811cf0:	df000315 	stw	fp,12(sp)
  811cf4:	df000304 	addi	fp,sp,12
  811cf8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  811cfc:	d0a00417 	ldw	r2,-32752(gp)
  811d00:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811d04:	00003106 	br	811dcc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  811d08:	e0bfff17 	ldw	r2,-4(fp)
  811d0c:	10800217 	ldw	r2,8(r2)
  811d10:	1009883a 	mov	r4,r2
  811d14:	080333c0 	call	80333c <strlen>
  811d18:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  811d1c:	e0bfff17 	ldw	r2,-4(fp)
  811d20:	10c00217 	ldw	r3,8(r2)
  811d24:	e0bffe17 	ldw	r2,-8(fp)
  811d28:	10bfffc4 	addi	r2,r2,-1
  811d2c:	1885883a 	add	r2,r3,r2
  811d30:	10800003 	ldbu	r2,0(r2)
  811d34:	10803fcc 	andi	r2,r2,255
  811d38:	1080201c 	xori	r2,r2,128
  811d3c:	10bfe004 	addi	r2,r2,-128
  811d40:	10800bd8 	cmpnei	r2,r2,47
  811d44:	1000031e 	bne	r2,zero,811d54 <alt_find_file+0x6c>
    {
      len -= 1;
  811d48:	e0bffe17 	ldw	r2,-8(fp)
  811d4c:	10bfffc4 	addi	r2,r2,-1
  811d50:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811d54:	e0bffe17 	ldw	r2,-8(fp)
  811d58:	e0fffd17 	ldw	r3,-12(fp)
  811d5c:	1885883a 	add	r2,r3,r2
  811d60:	10800003 	ldbu	r2,0(r2)
  811d64:	10803fcc 	andi	r2,r2,255
  811d68:	1080201c 	xori	r2,r2,128
  811d6c:	10bfe004 	addi	r2,r2,-128
  811d70:	10800be0 	cmpeqi	r2,r2,47
  811d74:	1000081e 	bne	r2,zero,811d98 <alt_find_file+0xb0>
  811d78:	e0bffe17 	ldw	r2,-8(fp)
  811d7c:	e0fffd17 	ldw	r3,-12(fp)
  811d80:	1885883a 	add	r2,r3,r2
  811d84:	10800003 	ldbu	r2,0(r2)
  811d88:	10803fcc 	andi	r2,r2,255
  811d8c:	1080201c 	xori	r2,r2,128
  811d90:	10bfe004 	addi	r2,r2,-128
  811d94:	10000a1e 	bne	r2,zero,811dc0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  811d98:	e0bfff17 	ldw	r2,-4(fp)
  811d9c:	10800217 	ldw	r2,8(r2)
  811da0:	e0fffe17 	ldw	r3,-8(fp)
  811da4:	180d883a 	mov	r6,r3
  811da8:	e17ffd17 	ldw	r5,-12(fp)
  811dac:	1009883a 	mov	r4,r2
  811db0:	081212c0 	call	81212c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
  811db4:	1000021e 	bne	r2,zero,811dc0 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
  811db8:	e0bfff17 	ldw	r2,-4(fp)
  811dbc:	00000706 	br	811ddc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  811dc0:	e0bfff17 	ldw	r2,-4(fp)
  811dc4:	10800017 	ldw	r2,0(r2)
  811dc8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
  811dcc:	e0ffff17 	ldw	r3,-4(fp)
  811dd0:	d0a00404 	addi	r2,gp,-32752
  811dd4:	18bfcc1e 	bne	r3,r2,811d08 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
  811dd8:	0005883a 	mov	r2,zero
}
  811ddc:	e037883a 	mov	sp,fp
  811de0:	dfc00117 	ldw	ra,4(sp)
  811de4:	df000017 	ldw	fp,0(sp)
  811de8:	dec00204 	addi	sp,sp,8
  811dec:	f800283a 	ret

00811df0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  811df0:	defffc04 	addi	sp,sp,-16
  811df4:	df000315 	stw	fp,12(sp)
  811df8:	df000304 	addi	fp,sp,12
  811dfc:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
  811e00:	00bffa04 	movi	r2,-24
  811e04:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811e08:	e03fff15 	stw	zero,-4(fp)
  811e0c:	00001d06 	br	811e84 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  811e10:	e0ffff17 	ldw	r3,-4(fp)
  811e14:	1805883a 	mov	r2,r3
  811e18:	1085883a 	add	r2,r2,r2
  811e1c:	10c5883a 	add	r2,r2,r3
  811e20:	100490ba 	slli	r2,r2,2
  811e24:	00c02074 	movhi	r3,129
  811e28:	10c7883a 	add	r3,r2,r3
  811e2c:	188d6217 	ldw	r2,13704(r3)
  811e30:	1000111e 	bne	r2,zero,811e78 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  811e34:	e0ffff17 	ldw	r3,-4(fp)
  811e38:	1805883a 	mov	r2,r3
  811e3c:	1085883a 	add	r2,r2,r2
  811e40:	10c5883a 	add	r2,r2,r3
  811e44:	100490ba 	slli	r2,r2,2
  811e48:	e13ffd17 	ldw	r4,-12(fp)
  811e4c:	00c02074 	movhi	r3,129
  811e50:	10c7883a 	add	r3,r2,r3
  811e54:	190d6215 	stw	r4,13704(r3)
      if (i > alt_max_fd)
  811e58:	d0e00817 	ldw	r3,-32736(gp)
  811e5c:	e0bfff17 	ldw	r2,-4(fp)
  811e60:	1880020e 	bge	r3,r2,811e6c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  811e64:	e0bfff17 	ldw	r2,-4(fp)
  811e68:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  811e6c:	e0bfff17 	ldw	r2,-4(fp)
  811e70:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  811e74:	00000706 	br	811e94 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
  811e78:	e0bfff17 	ldw	r2,-4(fp)
  811e7c:	10800044 	addi	r2,r2,1
  811e80:	e0bfff15 	stw	r2,-4(fp)
  811e84:	e0bfff17 	ldw	r2,-4(fp)
  811e88:	10800810 	cmplti	r2,r2,32
  811e8c:	103fe01e 	bne	r2,zero,811e10 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
  811e90:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811e94:	e0bffe17 	ldw	r2,-8(fp)
}
  811e98:	e037883a 	mov	sp,fp
  811e9c:	df000017 	ldw	fp,0(sp)
  811ea0:	dec00104 	addi	sp,sp,4
  811ea4:	f800283a 	ret

00811ea8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  811ea8:	defffb04 	addi	sp,sp,-20
  811eac:	df000415 	stw	fp,16(sp)
  811eb0:	df000404 	addi	fp,sp,16
  811eb4:	e13ffd15 	stw	r4,-12(fp)
  811eb8:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  811ebc:	e0bffc17 	ldw	r2,-16(fp)
  811ec0:	10820070 	cmpltui	r2,r2,2049
  811ec4:	1000021e 	bne	r2,zero,811ed0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811ec8:	00820004 	movi	r2,2048
  811ecc:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
  811ed0:	e0fffd17 	ldw	r3,-12(fp)
  811ed4:	e0bffc17 	ldw	r2,-16(fp)
  811ed8:	1885883a 	add	r2,r3,r2
  811edc:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811ee0:	e0bffd17 	ldw	r2,-12(fp)
  811ee4:	e0bfff15 	stw	r2,-4(fp)
  811ee8:	00000506 	br	811f00 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811eec:	e0bfff17 	ldw	r2,-4(fp)
  811ef0:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811ef4:	e0bfff17 	ldw	r2,-4(fp)
  811ef8:	10800804 	addi	r2,r2,32
  811efc:	e0bfff15 	stw	r2,-4(fp)
  811f00:	e0ffff17 	ldw	r3,-4(fp)
  811f04:	e0bffe17 	ldw	r2,-8(fp)
  811f08:	18bff836 	bltu	r3,r2,811eec <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  811f0c:	e0bffd17 	ldw	r2,-12(fp)
  811f10:	108007cc 	andi	r2,r2,31
  811f14:	10000226 	beq	r2,zero,811f20 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  811f18:	e0bfff17 	ldw	r2,-4(fp)
  811f1c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  811f20:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  811f24:	0001883a 	nop
  811f28:	e037883a 	mov	sp,fp
  811f2c:	df000017 	ldw	fp,0(sp)
  811f30:	dec00104 	addi	sp,sp,4
  811f34:	f800283a 	ret

00811f38 <atexit>:
  811f38:	200b883a 	mov	r5,r4
  811f3c:	000f883a 	mov	r7,zero
  811f40:	000d883a 	mov	r6,zero
  811f44:	0009883a 	mov	r4,zero
  811f48:	08121a41 	jmpi	8121a4 <__register_exitproc>

00811f4c <exit>:
  811f4c:	defffe04 	addi	sp,sp,-8
  811f50:	000b883a 	mov	r5,zero
  811f54:	dc000015 	stw	r16,0(sp)
  811f58:	dfc00115 	stw	ra,4(sp)
  811f5c:	2021883a 	mov	r16,r4
  811f60:	08122340 	call	812234 <__call_exitprocs>
  811f64:	00802074 	movhi	r2,129
  811f68:	11121117 	ldw	r4,18500(r2)
  811f6c:	20800f17 	ldw	r2,60(r4)
  811f70:	10000126 	beq	r2,zero,811f78 <exit+0x2c>
  811f74:	103ee83a 	callr	r2
  811f78:	8009883a 	mov	r4,r16
  811f7c:	080e9380 	call	80e938 <_exit>

00811f80 <memalign>:
  811f80:	00c02074 	movhi	r3,129
  811f84:	2005883a 	mov	r2,r4
  811f88:	19121217 	ldw	r4,18504(r3)
  811f8c:	280d883a 	mov	r6,r5
  811f90:	100b883a 	mov	r5,r2
  811f94:	0811f981 	jmpi	811f98 <_memalign_r>

00811f98 <_memalign_r>:
  811f98:	28800268 	cmpgeui	r2,r5,9
  811f9c:	10005226 	beq	r2,zero,8120e8 <_memalign_r+0x150>
  811fa0:	defffa04 	addi	sp,sp,-24
  811fa4:	dc800215 	stw	r18,8(sp)
  811fa8:	348002c4 	addi	r18,r6,11
  811fac:	dcc00315 	stw	r19,12(sp)
  811fb0:	dc000015 	stw	r16,0(sp)
  811fb4:	dfc00515 	stw	ra,20(sp)
  811fb8:	dd000415 	stw	r20,16(sp)
  811fbc:	dc400115 	stw	r17,4(sp)
  811fc0:	908005f0 	cmpltui	r2,r18,23
  811fc4:	2821883a 	mov	r16,r5
  811fc8:	2027883a 	mov	r19,r4
  811fcc:	1000381e 	bne	r2,zero,8120b0 <_memalign_r+0x118>
  811fd0:	00bffe04 	movi	r2,-8
  811fd4:	90a4703a 	and	r18,r18,r2
  811fd8:	90003716 	blt	r18,zero,8120b8 <_memalign_r+0x120>
  811fdc:	91803636 	bltu	r18,r6,8120b8 <_memalign_r+0x120>
  811fe0:	80800428 	cmpgeui	r2,r16,16
  811fe4:	1000011e 	bne	r2,zero,811fec <_memalign_r+0x54>
  811fe8:	04000404 	movi	r16,16
  811fec:	81400404 	addi	r5,r16,16
  811ff0:	2c8b883a 	add	r5,r5,r18
  811ff4:	9809883a 	mov	r4,r19
  811ff8:	08083c00 	call	8083c0 <_malloc_r>
  811ffc:	1023883a 	mov	r17,r2
  812000:	10003026 	beq	r2,zero,8120c4 <_memalign_r+0x12c>
  812004:	9809883a 	mov	r4,r19
  812008:	080f1f80 	call	80f1f8 <__malloc_lock>
  81200c:	800b883a 	mov	r5,r16
  812010:	8809883a 	mov	r4,r17
  812014:	08031540 	call	803154 <__umodsi3>
  812018:	8d3ffe04 	addi	r20,r17,-8
  81201c:	10001b26 	beq	r2,zero,81208c <_memalign_r+0xf4>
  812020:	80bfffc4 	addi	r2,r16,-1
  812024:	0407c83a 	sub	r3,zero,r16
  812028:	8885883a 	add	r2,r17,r2
  81202c:	10c4703a 	and	r2,r2,r3
  812030:	10bffe04 	addi	r2,r2,-8
  812034:	1507c83a 	sub	r3,r2,r20
  812038:	19000408 	cmpgei	r4,r3,16
  81203c:	20002c26 	beq	r4,zero,8120f0 <_memalign_r+0x158>
  812040:	1029883a 	mov	r20,r2
  812044:	88bfff17 	ldw	r2,-4(r17)
  812048:	013fff04 	movi	r4,-4
  81204c:	880b883a 	mov	r5,r17
  812050:	1104703a 	and	r2,r2,r4
  812054:	10c5c83a 	sub	r2,r2,r3
  812058:	11000054 	ori	r4,r2,1
  81205c:	a1000115 	stw	r4,4(r20)
  812060:	a085883a 	add	r2,r20,r2
  812064:	11800117 	ldw	r6,4(r2)
  812068:	9809883a 	mov	r4,r19
  81206c:	31800054 	ori	r6,r6,1
  812070:	11800115 	stw	r6,4(r2)
  812074:	88bfff17 	ldw	r2,-4(r17)
  812078:	1080004c 	andi	r2,r2,1
  81207c:	10c4b03a 	or	r2,r2,r3
  812080:	88bfff15 	stw	r2,-4(r17)
  812084:	08078540 	call	807854 <_free_r>
  812088:	a4400204 	addi	r17,r20,8
  81208c:	a0800117 	ldw	r2,4(r20)
  812090:	00ffff04 	movi	r3,-4
  812094:	10c4703a 	and	r2,r2,r3
  812098:	1485c83a 	sub	r2,r2,r18
  81209c:	10c00410 	cmplti	r3,r2,16
  8120a0:	18001726 	beq	r3,zero,812100 <_memalign_r+0x168>
  8120a4:	9809883a 	mov	r4,r19
  8120a8:	080f21c0 	call	80f21c <__malloc_unlock>
  8120ac:	00000506 	br	8120c4 <_memalign_r+0x12c>
  8120b0:	04800404 	movi	r18,16
  8120b4:	91bfca2e 	bgeu	r18,r6,811fe0 <_memalign_r+0x48>
  8120b8:	00800304 	movi	r2,12
  8120bc:	98800015 	stw	r2,0(r19)
  8120c0:	0023883a 	mov	r17,zero
  8120c4:	8805883a 	mov	r2,r17
  8120c8:	dfc00517 	ldw	ra,20(sp)
  8120cc:	dd000417 	ldw	r20,16(sp)
  8120d0:	dcc00317 	ldw	r19,12(sp)
  8120d4:	dc800217 	ldw	r18,8(sp)
  8120d8:	dc400117 	ldw	r17,4(sp)
  8120dc:	dc000017 	ldw	r16,0(sp)
  8120e0:	dec00604 	addi	sp,sp,24
  8120e4:	f800283a 	ret
  8120e8:	300b883a 	mov	r5,r6
  8120ec:	08083c01 	jmpi	8083c0 <_malloc_r>
  8120f0:	1405883a 	add	r2,r2,r16
  8120f4:	1507c83a 	sub	r3,r2,r20
  8120f8:	1029883a 	mov	r20,r2
  8120fc:	003fd106 	br	812044 <_memalign_r+0xac>
  812100:	a48b883a 	add	r5,r20,r18
  812104:	10800054 	ori	r2,r2,1
  812108:	28800115 	stw	r2,4(r5)
  81210c:	a0800117 	ldw	r2,4(r20)
  812110:	29400204 	addi	r5,r5,8
  812114:	9809883a 	mov	r4,r19
  812118:	1080004c 	andi	r2,r2,1
  81211c:	14a4b03a 	or	r18,r2,r18
  812120:	a4800115 	stw	r18,4(r20)
  812124:	08078540 	call	807854 <_free_r>
  812128:	003fde06 	br	8120a4 <_memalign_r+0x10c>

0081212c <memcmp>:
  81212c:	30800130 	cmpltui	r2,r6,4
  812130:	10000b1e 	bne	r2,zero,812160 <memcmp+0x34>
  812134:	2144b03a 	or	r2,r4,r5
  812138:	108000cc 	andi	r2,r2,3
  81213c:	1000171e 	bne	r2,zero,81219c <memcmp+0x70>
  812140:	20c00017 	ldw	r3,0(r4)
  812144:	28800017 	ldw	r2,0(r5)
  812148:	1880141e 	bne	r3,r2,81219c <memcmp+0x70>
  81214c:	31bfff04 	addi	r6,r6,-4
  812150:	30800128 	cmpgeui	r2,r6,4
  812154:	21000104 	addi	r4,r4,4
  812158:	29400104 	addi	r5,r5,4
  81215c:	103ff81e 	bne	r2,zero,812140 <memcmp+0x14>
  812160:	30bfffc4 	addi	r2,r6,-1
  812164:	30000b26 	beq	r6,zero,812194 <memcmp+0x68>
  812168:	11800044 	addi	r6,r2,1
  81216c:	218d883a 	add	r6,r4,r6
  812170:	00000106 	br	812178 <memcmp+0x4c>
  812174:	21800726 	beq	r4,r6,812194 <memcmp+0x68>
  812178:	20800003 	ldbu	r2,0(r4)
  81217c:	28c00003 	ldbu	r3,0(r5)
  812180:	21000044 	addi	r4,r4,1
  812184:	29400044 	addi	r5,r5,1
  812188:	10fffa26 	beq	r2,r3,812174 <memcmp+0x48>
  81218c:	10c5c83a 	sub	r2,r2,r3
  812190:	f800283a 	ret
  812194:	0005883a 	mov	r2,zero
  812198:	f800283a 	ret
  81219c:	30bfffc4 	addi	r2,r6,-1
  8121a0:	003ff106 	br	812168 <memcmp+0x3c>

008121a4 <__register_exitproc>:
  8121a4:	00802074 	movhi	r2,129
  8121a8:	10d21117 	ldw	r3,18500(r2)
  8121ac:	18805217 	ldw	r2,328(r3)
  8121b0:	10001726 	beq	r2,zero,812210 <__register_exitproc+0x6c>
  8121b4:	10c00117 	ldw	r3,4(r2)
  8121b8:	1a000808 	cmpgei	r8,r3,32
  8121bc:	40001b1e 	bne	r8,zero,81222c <__register_exitproc+0x88>
  8121c0:	20000b26 	beq	r4,zero,8121f0 <__register_exitproc+0x4c>
  8121c4:	181090ba 	slli	r8,r3,2
  8121c8:	02400044 	movi	r9,1
  8121cc:	48d2983a 	sll	r9,r9,r3
  8121d0:	1211883a 	add	r8,r2,r8
  8121d4:	41802215 	stw	r6,136(r8)
  8121d8:	11806217 	ldw	r6,392(r2)
  8121dc:	21000098 	cmpnei	r4,r4,2
  8121e0:	324cb03a 	or	r6,r6,r9
  8121e4:	11806215 	stw	r6,392(r2)
  8121e8:	41c04215 	stw	r7,264(r8)
  8121ec:	20000b26 	beq	r4,zero,81221c <__register_exitproc+0x78>
  8121f0:	19000084 	addi	r4,r3,2
  8121f4:	200890ba 	slli	r4,r4,2
  8121f8:	18c00044 	addi	r3,r3,1
  8121fc:	10c00115 	stw	r3,4(r2)
  812200:	1105883a 	add	r2,r2,r4
  812204:	11400015 	stw	r5,0(r2)
  812208:	0005883a 	mov	r2,zero
  81220c:	f800283a 	ret
  812210:	18805304 	addi	r2,r3,332
  812214:	18805215 	stw	r2,328(r3)
  812218:	003fe606 	br	8121b4 <__register_exitproc+0x10>
  81221c:	11006317 	ldw	r4,396(r2)
  812220:	2252b03a 	or	r9,r4,r9
  812224:	12406315 	stw	r9,396(r2)
  812228:	003ff106 	br	8121f0 <__register_exitproc+0x4c>
  81222c:	00bfffc4 	movi	r2,-1
  812230:	f800283a 	ret

00812234 <__call_exitprocs>:
  812234:	defff704 	addi	sp,sp,-36
  812238:	00802074 	movhi	r2,129
  81223c:	dcc00315 	stw	r19,12(sp)
  812240:	14d21117 	ldw	r19,18500(r2)
  812244:	dc800215 	stw	r18,8(sp)
  812248:	dfc00815 	stw	ra,32(sp)
  81224c:	9c805217 	ldw	r18,328(r19)
  812250:	ddc00715 	stw	r23,28(sp)
  812254:	dd800615 	stw	r22,24(sp)
  812258:	dd400515 	stw	r21,20(sp)
  81225c:	dd000415 	stw	r20,16(sp)
  812260:	dc400115 	stw	r17,4(sp)
  812264:	dc000015 	stw	r16,0(sp)
  812268:	90001026 	beq	r18,zero,8122ac <__call_exitprocs+0x78>
  81226c:	202b883a 	mov	r21,r4
  812270:	282d883a 	mov	r22,r5
  812274:	05000044 	movi	r20,1
  812278:	94000117 	ldw	r16,4(r18)
  81227c:	847fffc4 	addi	r17,r16,-1
  812280:	88000a16 	blt	r17,zero,8122ac <__call_exitprocs+0x78>
  812284:	84000044 	addi	r16,r16,1
  812288:	802090ba 	slli	r16,r16,2
  81228c:	9421883a 	add	r16,r18,r16
  812290:	b0001126 	beq	r22,zero,8122d8 <__call_exitprocs+0xa4>
  812294:	80804017 	ldw	r2,256(r16)
  812298:	15800f26 	beq	r2,r22,8122d8 <__call_exitprocs+0xa4>
  81229c:	8c7fffc4 	addi	r17,r17,-1
  8122a0:	88bfffd8 	cmpnei	r2,r17,-1
  8122a4:	843fff04 	addi	r16,r16,-4
  8122a8:	103ff91e 	bne	r2,zero,812290 <__call_exitprocs+0x5c>
  8122ac:	dfc00817 	ldw	ra,32(sp)
  8122b0:	ddc00717 	ldw	r23,28(sp)
  8122b4:	dd800617 	ldw	r22,24(sp)
  8122b8:	dd400517 	ldw	r21,20(sp)
  8122bc:	dd000417 	ldw	r20,16(sp)
  8122c0:	dcc00317 	ldw	r19,12(sp)
  8122c4:	dc800217 	ldw	r18,8(sp)
  8122c8:	dc400117 	ldw	r17,4(sp)
  8122cc:	dc000017 	ldw	r16,0(sp)
  8122d0:	dec00904 	addi	sp,sp,36
  8122d4:	f800283a 	ret
  8122d8:	90800117 	ldw	r2,4(r18)
  8122dc:	81800017 	ldw	r6,0(r16)
  8122e0:	10bfffc4 	addi	r2,r2,-1
  8122e4:	14401726 	beq	r2,r17,812344 <__call_exitprocs+0x110>
  8122e8:	80000015 	stw	zero,0(r16)
  8122ec:	303feb26 	beq	r6,zero,81229c <__call_exitprocs+0x68>
  8122f0:	a446983a 	sll	r3,r20,r17
  8122f4:	90806217 	ldw	r2,392(r18)
  8122f8:	95c00117 	ldw	r23,4(r18)
  8122fc:	1884703a 	and	r2,r3,r2
  812300:	1000081e 	bne	r2,zero,812324 <__call_exitprocs+0xf0>
  812304:	303ee83a 	callr	r6
  812308:	90c00117 	ldw	r3,4(r18)
  81230c:	98805217 	ldw	r2,328(r19)
  812310:	1dc0011e 	bne	r3,r23,812318 <__call_exitprocs+0xe4>
  812314:	90bfe126 	beq	r18,r2,81229c <__call_exitprocs+0x68>
  812318:	103fe426 	beq	r2,zero,8122ac <__call_exitprocs+0x78>
  81231c:	1025883a 	mov	r18,r2
  812320:	003fd506 	br	812278 <__call_exitprocs+0x44>
  812324:	90806317 	ldw	r2,396(r18)
  812328:	81002017 	ldw	r4,128(r16)
  81232c:	1886703a 	and	r3,r3,r2
  812330:	1800061e 	bne	r3,zero,81234c <__call_exitprocs+0x118>
  812334:	200b883a 	mov	r5,r4
  812338:	a809883a 	mov	r4,r21
  81233c:	303ee83a 	callr	r6
  812340:	003ff106 	br	812308 <__call_exitprocs+0xd4>
  812344:	94400115 	stw	r17,4(r18)
  812348:	003fe806 	br	8122ec <__call_exitprocs+0xb8>
  81234c:	303ee83a 	callr	r6
  812350:	003fed06 	br	812308 <__call_exitprocs+0xd4>
