
dummy.elf:     file format elf32-littlenios2
dummy.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800238

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000058e4 memsz 0x000058e4 flags r-x
    LOAD off    0x00006904 vaddr 0x00805904 paddr 0x00807370 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008ddc vaddr 0x00808ddc paddr 0x00808ddc align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005694  00800238  00800238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  008058cc  008058cc  000068cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00805904  00807370  00006904  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00808ddc  00808ddc  00008ddc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00808f30  00808f30  00008370  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008370  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a60  00000000  00000000  000083a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00017fe2  00000000  00000000  00008e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006b5c  00000000  00000000  00020de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00009ac4  00000000  00000000  0002793e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000015e4  00000000  00000000  00031404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002924  00000000  00000000  000329e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005fc0  00000000  00000000  0003530c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003b2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a8  00000000  00000000  0003b300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0003e16f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003e172  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003e175  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003e176  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003e177  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003e17b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003e17f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003e183  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003e18c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003e195  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0003e19e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003d  00000000  00000000  0003e1aa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800238 l    d  .text	00000000 .text
008058cc l    d  .rodata	00000000 .rodata
00805904 l    d  .rwdata	00000000 .rwdata
00808ddc l    d  .bss	00000000 .bss
00808f30 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/runsh/Desktop/Main/IC/EIE3/summer/pathfinder/quartus/software/dummy_bsp//obj/HAL/src/crt0.o
00800280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0080042c l     F .text	00000008 __fp_lock
00800440 l     F .text	00000008 __fp_unlock
00800448 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00805904 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
008022c8 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00803130 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803248 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00803274 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080336c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00803458 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00803544 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00803724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00807360 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00803990 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00803ad0 l     F .text	00000034 alt_dev_reg
008062d8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00803dcc l     F .text	0000020c altera_avalon_jtag_uart_irq
00803fd8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080461c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080489c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00804d14 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00804e64 l     F .text	0000003c alt_get_errno
00804ea0 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00808e04 g     O .bss	00000004 alt_instruction_exception_handler
00802efc g     F .text	00000058 _isatty_r
00803660 g     F .text	0000007c alt_main
008002b8 g     F .text	000000cc _puts_r
00808e30 g     O .bss	00000100 alt_irq
00802b8c g     F .text	00000064 _lseek_r
00807370 g       *ABS*	00000000 __flash_rwdata_start
00808f30 g       *ABS*	00000000 __alt_heap_start
00802044 g     F .text	0000005c __sseek
00800790 g     F .text	00000010 __sinit
008005b0 g     F .text	00000078 __sfmoreglue
00803700 g     F .text	00000024 __malloc_unlock
00801790 g     F .text	0000012c memmove
0080077c g     F .text	00000014 _cleanup
00805288 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802e9c g     F .text	00000060 _fstat_r
00808de8 g     O .bss	00000004 errno
00801fbc g     F .text	00000008 __seofread
00808df0 g     O .bss	00000004 alt_argv
0080f338 g       *ABS*	00000000 _gp
00806158 g     O .rwdata	00000180 alt_fd_list
008052ac g     F .text	00000090 alt_find_dev
00801690 g     F .text	00000100 memcpy
00800434 g     F .text	0000000c _cleanup_r
00804de8 g     F .text	0000007c alt_io_redirect
008058cc g       *ABS*	00000000 __DTOR_END__
00800384 g     F .text	00000010 puts
0080558c g     F .text	00000098 alt_exception_cause_generated_bad_addr
008041d4 g     F .text	00000220 altera_avalon_jtag_uart_read
00803048 g     F .text	00000064 .hidden __udivsi3
008033a8 g     F .text	000000b0 isatty
008054fc g     F .text	00000090 alt_icache_flush
00808de4 g     O .bss	00000004 __malloc_top_pad
008007d8 g     F .text	000004c8 __sfvwrite_r
00801f10 g     F .text	00000058 _sbrk_r
00802e38 g     F .text	00000064 _read_r
00807358 g     O .rwdata	00000004 alt_max_fd
00802388 g     F .text	00000070 _fclose_r
008026f0 g     F .text	00000084 fflush
00808de0 g     O .bss	00000004 __malloc_max_sbrked_mem
00803580 g     F .text	000000e0 lseek
00807338 g     O .rwdata	00000004 _global_impure_ptr
008019ac g     F .text	00000564 _realloc_r
00808f30 g       *ABS*	00000000 __bss_end
00804c2c g     F .text	000000e8 alt_iic_isr_register
00805180 g     F .text	00000108 alt_tick
008007b0 g     F .text	00000014 __fp_lock_all
00804be0 g     F .text	0000004c alt_ic_irq_enabled
008050dc g     F .text	000000a4 alt_alarm_stop
00808df8 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000c8 alt_irq_handler
00806130 g     O .rwdata	00000028 alt_dev_null
00804850 g     F .text	0000004c alt_dcache_flush_all
00807370 g       *ABS*	00000000 __ram_rwdata_end
00807350 g     O .rwdata	00000008 alt_dev_list
008039cc g     F .text	00000104 write
00805904 g       *ABS*	00000000 __ram_rodata_end
008032b0 g     F .text	000000bc fstat
008030ac g     F .text	0000005c .hidden __umodsi3
00808f30 g       *ABS*	00000000 end
00803d0c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
008058cc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00804698 g     F .text	00000084 alt_avalon_timer_sc_init
008043f4 g     F .text	00000228 altera_avalon_jtag_uart_write
008007a0 g     F .text	00000004 __sfp_lock_acquire
008015c0 g     F .text	000000d0 memchr
00802890 g     F .text	000002fc _free_r
00805774 g     F .text	00000120 __call_exitprocs
00807340 g     O .rwdata	00000004 __malloc_sbrk_base
00800238 g     F .text	0000004c _start
00808dfc g     O .bss	00000004 _alt_tick_rate
00808e00 g     O .bss	00000004 _alt_nticks
00803760 g     F .text	00000108 read
00803b40 g     F .text	00000068 alt_sys_init
008056e4 g     F .text	00000090 __register_exitproc
00804078 g     F .text	00000068 altera_avalon_jtag_uart_close
00803108 g     F .text	00000028 .hidden __mulsi3
00805904 g       *ABS*	00000000 __ram_rwdata_start
008058cc g       *ABS*	00000000 __ram_rodata_start
00808e08 g     O .bss	00000028 __malloc_current_mallinfo
00803ba8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00805444 g     F .text	000000b8 alt_get_fd
00802270 g     F .text	00000058 _close_r
0080566c g     F .text	00000078 memcmp
00803c68 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00808f30 g       *ABS*	00000000 __alt_stack_base
00803cb8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080210c g     F .text	00000164 __swsetup_r
00800628 g     F .text	00000154 __sfp
00805d28 g     O .rwdata	00000408 __malloc_av_
008007ac g     F .text	00000004 __sinit_lock_release
00801f68 g     F .text	00000054 __sread
0080533c g     F .text	00000108 alt_find_file
008048d8 g     F .text	000000a8 alt_dev_llist_insert
008036dc g     F .text	00000024 __malloc_lock
008038d8 g     F .text	000000b8 sbrk
00802690 g     F .text	00000060 _fflush_r
00808ddc g       *ABS*	00000000 __bss_start
008018bc g     F .text	000000f0 memset
00800284 g     F .text	00000034 main
00808df4 g     O .bss	00000004 alt_envp
00808ddc g     O .bss	00000004 __malloc_max_total_mem
00803c08 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008020a0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008023f8 g     F .text	00000070 fclose
00800de0 g     F .text	000007e0 _malloc_r
0080735c g     O .rwdata	00000004 alt_errno
00800ca0 g     F .text	00000098 _fwalk
00802f54 g     F .text	00000080 .hidden __divsi3
00802774 g     F .text	0000011c _malloc_trim_r
008058cc g       *ABS*	00000000 __CTOR_END__
008058cc g       *ABS*	00000000 __flash_rodata_start
008058cc g       *ABS*	00000000 __DTOR_LIST__
00803b04 g     F .text	0000003c alt_irq_init
00803868 g     F .text	00000070 alt_release_fd
00805624 g     F .text	00000014 atexit
008020a8 g     F .text	00000064 _write_r
0080733c g     O .rwdata	00000004 _impure_ptr
00808dec g     O .bss	00000004 alt_argc
00802468 g     F .text	00000228 __sflush_r
008049e4 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
008007c4 g     F .text	00000014 __fp_unlock_all
00807348 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00802da0 g     F .text	00000098 __swhatbuf_r
00804a7c g     F .text	00000050 alt_ic_isr_register
00807370 g       *ABS*	00000000 _edata
00808f30 g       *ABS*	00000000 _end
00800238 g       *ABS*	00000000 __ram_exceptions_end
008040e0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00804b54 g     F .text	0000008c alt_ic_irq_disable
00801fc4 g     F .text	00000080 __swrite
00807344 g     O .rwdata	00000004 __malloc_trim_threshold
00805638 g     F .text	00000034 exit
00800d38 g     F .text	000000a8 _fwalk_reent
00802fd4 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008007a4 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00805894 g     F .text	00000038 _exit
0080471c g     F .text	00000134 alt_alarm_start
00802bf0 g     F .text	000001b0 __smakebuf_r
00800394 g     F .text	00000098 strlen
00804f7c g     F .text	00000160 open
00804a48 g     F .text	00000034 alt_icache_flush_all
00807364 g     O .rwdata	00000004 alt_priority_mask
00804acc g     F .text	00000088 alt_ic_irq_enable
00807368 g     O .rwdata	00000008 alt_alarm_list
00804980 g     F .text	00000064 _do_ctors
0080316c g     F .text	000000dc close
008034c0 g     F .text	00000084 alt_load
008007a8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08408e14 	ori	at,at,568
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001c40 	call	8001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0ffff17 	ldw	r3,-4(fp)
  800130:	e0bffe17 	ldw	r2,-8(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001126 	beq	r2,zero,800180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	e0bffd17 	ldw	r2,-12(fp)
  800140:	100690fa 	slli	r3,r2,3
  800144:	00802074 	movhi	r2,129
  800148:	1885883a 	add	r2,r3,r2
  80014c:	10e38c17 	ldw	r3,-29136(r2)
  800150:	e0bffd17 	ldw	r2,-12(fp)
  800154:	100890fa 	slli	r4,r2,3
  800158:	00802074 	movhi	r2,129
  80015c:	2085883a 	add	r2,r4,r2
  800160:	10a38d17 	ldw	r2,-29132(r2)
  800164:	1009883a 	mov	r4,r2
  800168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  80016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
  800170:	0005313a 	rdctl	r2,ipending
  800174:	e0bffb15 	stw	r2,-20(fp)
  return active;
  800178:	e0bffb17 	ldw	r2,-20(fp)
  80017c:	00000706 	br	80019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
  800180:	e0bffe17 	ldw	r2,-8(fp)
  800184:	1085883a 	add	r2,r2,r2
  800188:	e0bffe15 	stw	r2,-8(fp)
      i++;
  80018c:	e0bffd17 	ldw	r2,-12(fp)
  800190:	10800044 	addi	r2,r2,1
  800194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
  800198:	003fe406 	br	80012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
  80019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  8001a0:	e0bfff17 	ldw	r2,-4(fp)
  8001a4:	103fde1e 	bne	r2,zero,800120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a8:	0001883a 	nop
}
  8001ac:	0001883a 	nop
  8001b0:	e037883a 	mov	sp,fp
  8001b4:	dfc00117 	ldw	ra,4(sp)
  8001b8:	df000017 	ldw	fp,0(sp)
  8001bc:	dec00204 	addi	sp,sp,8
  8001c0:	f800283a 	ret

008001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001c4:	defffb04 	addi	sp,sp,-20
  8001c8:	dfc00415 	stw	ra,16(sp)
  8001cc:	df000315 	stw	fp,12(sp)
  8001d0:	df000304 	addi	fp,sp,12
  8001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001d8:	000531fa 	rdctl	r2,exception
  8001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001e0:	e0bfff17 	ldw	r2,-4(fp)
  8001e4:	1004d0ba 	srli	r2,r2,2
  8001e8:	108007cc 	andi	r2,r2,31
  8001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001f0:	0005333a 	rdctl	r2,badaddr
  8001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f8:	d0a6b317 	ldw	r2,-25908(gp)
  8001fc:	10000726 	beq	r2,zero,80021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800200:	d0a6b317 	ldw	r2,-25908(gp)
  800204:	e0ffff17 	ldw	r3,-4(fp)
  800208:	e1bffe17 	ldw	r6,-8(fp)
  80020c:	e17ffd17 	ldw	r5,-12(fp)
  800210:	1809883a 	mov	r4,r3
  800214:	103ee83a 	callr	r2
  800218:	00000206 	br	800224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800220:	0005883a 	mov	r2,zero
}
  800224:	e037883a 	mov	sp,fp
  800228:	dfc00117 	ldw	ra,4(sp)
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00204 	addi	sp,sp,8
  800234:	f800283a 	ret

Disassembly of section .text:

00800238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800244:	00bffd16 	blt	zero,r2,80023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800248:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800250:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800254:	d6bcce14 	ori	gp,gp,62264
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800258:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  80025c:	10a37714 	ori	r2,r2,36316

    movhi r3, %hi(__bss_end)
  800260:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800264:	18e3cc14 	ori	r3,r3,36656

    beq r2, r3, 1f
  800268:	10c00326 	beq	r2,r3,800278 <_start+0x40>

0:
    stw zero, (r2)
  80026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800274:	10fffd36 	bltu	r2,r3,80026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800278:	08034c00 	call	8034c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80027c:	08036600 	call	803660 <alt_main>

00800280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800280:	003fff06 	br	800280 <alt_after_alt_main>

00800284 <main>:

#include <stdio.h>
#include <system.h>

int main()
{
  800284:	defffe04 	addi	sp,sp,-8
  800288:	dfc00115 	stw	ra,4(sp)
  80028c:	df000015 	stw	fp,0(sp)
  800290:	d839883a 	mov	fp,sp
  printf("calc\n");
  800294:	01002034 	movhi	r4,128
  800298:	21163304 	addi	r4,r4,22732
  80029c:	08003840 	call	800384 <puts>

  return 0;
  8002a0:	0005883a 	mov	r2,zero
}
  8002a4:	e037883a 	mov	sp,fp
  8002a8:	dfc00117 	ldw	ra,4(sp)
  8002ac:	df000017 	ldw	fp,0(sp)
  8002b0:	dec00204 	addi	sp,sp,8
  8002b4:	f800283a 	ret

008002b8 <_puts_r>:
  8002b8:	defff504 	addi	sp,sp,-44
  8002bc:	dc000815 	stw	r16,32(sp)
  8002c0:	2021883a 	mov	r16,r4
  8002c4:	2809883a 	mov	r4,r5
  8002c8:	dc400915 	stw	r17,36(sp)
  8002cc:	dfc00a15 	stw	ra,40(sp)
  8002d0:	2823883a 	mov	r17,r5
  8002d4:	08003940 	call	800394 <strlen>
  8002d8:	11000044 	addi	r4,r2,1
  8002dc:	d8800515 	stw	r2,20(sp)
  8002e0:	00800044 	movi	r2,1
  8002e4:	00c02034 	movhi	r3,128
  8002e8:	d8800715 	stw	r2,28(sp)
  8002ec:	d8800404 	addi	r2,sp,16
  8002f0:	18d63504 	addi	r3,r3,22740
  8002f4:	d8800115 	stw	r2,4(sp)
  8002f8:	00800084 	movi	r2,2
  8002fc:	dc400415 	stw	r17,16(sp)
  800300:	d8c00615 	stw	r3,24(sp)
  800304:	d9000315 	stw	r4,12(sp)
  800308:	d8800215 	stw	r2,8(sp)
  80030c:	81400217 	ldw	r5,8(r16)
  800310:	80000226 	beq	r16,zero,80031c <_puts_r+0x64>
  800314:	80800e17 	ldw	r2,56(r16)
  800318:	10001326 	beq	r2,zero,800368 <_puts_r+0xb0>
  80031c:	2880030b 	ldhu	r2,12(r5)
  800320:	10c8000c 	andi	r3,r2,8192
  800324:	1800061e 	bne	r3,zero,800340 <_puts_r+0x88>
  800328:	28c01917 	ldw	r3,100(r5)
  80032c:	0137ffc4 	movi	r4,-8193
  800330:	10880014 	ori	r2,r2,8192
  800334:	1906703a 	and	r3,r3,r4
  800338:	2880030d 	sth	r2,12(r5)
  80033c:	28c01915 	stw	r3,100(r5)
  800340:	d9800104 	addi	r6,sp,4
  800344:	8009883a 	mov	r4,r16
  800348:	08007d80 	call	8007d8 <__sfvwrite_r>
  80034c:	10000b1e 	bne	r2,zero,80037c <_puts_r+0xc4>
  800350:	00800284 	movi	r2,10
  800354:	dfc00a17 	ldw	ra,40(sp)
  800358:	dc400917 	ldw	r17,36(sp)
  80035c:	dc000817 	ldw	r16,32(sp)
  800360:	dec00b04 	addi	sp,sp,44
  800364:	f800283a 	ret
  800368:	8009883a 	mov	r4,r16
  80036c:	d9400015 	stw	r5,0(sp)
  800370:	08007900 	call	800790 <__sinit>
  800374:	d9400017 	ldw	r5,0(sp)
  800378:	003fe806 	br	80031c <_puts_r+0x64>
  80037c:	00bfffc4 	movi	r2,-1
  800380:	003ff406 	br	800354 <_puts_r+0x9c>

00800384 <puts>:
  800384:	00802034 	movhi	r2,128
  800388:	200b883a 	mov	r5,r4
  80038c:	111ccf17 	ldw	r4,29500(r2)
  800390:	08002b81 	jmpi	8002b8 <_puts_r>

00800394 <strlen>:
  800394:	208000cc 	andi	r2,r4,3
  800398:	10000926 	beq	r2,zero,8003c0 <strlen+0x2c>
  80039c:	2005883a 	mov	r2,r4
  8003a0:	00000306 	br	8003b0 <strlen+0x1c>
  8003a4:	10800044 	addi	r2,r2,1
  8003a8:	10c000cc 	andi	r3,r2,3
  8003ac:	18000526 	beq	r3,zero,8003c4 <strlen+0x30>
  8003b0:	10c00007 	ldb	r3,0(r2)
  8003b4:	183ffb1e 	bne	r3,zero,8003a4 <strlen+0x10>
  8003b8:	1105c83a 	sub	r2,r2,r4
  8003bc:	f800283a 	ret
  8003c0:	2005883a 	mov	r2,r4
  8003c4:	11400017 	ldw	r5,0(r2)
  8003c8:	01ffbff4 	movhi	r7,65279
  8003cc:	39ffbfc4 	addi	r7,r7,-257
  8003d0:	29c7883a 	add	r3,r5,r7
  8003d4:	01a02074 	movhi	r6,32897
  8003d8:	014a303a 	nor	r5,zero,r5
  8003dc:	1946703a 	and	r3,r3,r5
  8003e0:	31a02004 	addi	r6,r6,-32640
  8003e4:	1986703a 	and	r3,r3,r6
  8003e8:	1800071e 	bne	r3,zero,800408 <strlen+0x74>
  8003ec:	11400117 	ldw	r5,4(r2)
  8003f0:	10800104 	addi	r2,r2,4
  8003f4:	29c7883a 	add	r3,r5,r7
  8003f8:	014a303a 	nor	r5,zero,r5
  8003fc:	1946703a 	and	r3,r3,r5
  800400:	1986703a 	and	r3,r3,r6
  800404:	183ff926 	beq	r3,zero,8003ec <strlen+0x58>
  800408:	10c00007 	ldb	r3,0(r2)
  80040c:	183fea26 	beq	r3,zero,8003b8 <strlen+0x24>
  800410:	10c00047 	ldb	r3,1(r2)
  800414:	10800044 	addi	r2,r2,1
  800418:	183fe726 	beq	r3,zero,8003b8 <strlen+0x24>
  80041c:	10c00047 	ldb	r3,1(r2)
  800420:	10800044 	addi	r2,r2,1
  800424:	183ffa1e 	bne	r3,zero,800410 <strlen+0x7c>
  800428:	003fe306 	br	8003b8 <strlen+0x24>

0080042c <__fp_lock>:
  80042c:	0005883a 	mov	r2,zero
  800430:	f800283a 	ret

00800434 <_cleanup_r>:
  800434:	01402034 	movhi	r5,128
  800438:	2948e204 	addi	r5,r5,9096
  80043c:	0800d381 	jmpi	800d38 <_fwalk_reent>

00800440 <__fp_unlock>:
  800440:	0005883a 	mov	r2,zero
  800444:	f800283a 	ret

00800448 <__sinit.part.0>:
  800448:	00c02034 	movhi	r3,128
  80044c:	20800117 	ldw	r2,4(r4)
  800450:	18c10d04 	addi	r3,r3,1076
  800454:	20c00f15 	stw	r3,60(r4)
  800458:	2140bb04 	addi	r5,r4,748
  80045c:	00c000c4 	movi	r3,3
  800460:	20c0b915 	stw	r3,740(r4)
  800464:	2140ba15 	stw	r5,744(r4)
  800468:	2000b815 	stw	zero,736(r4)
  80046c:	10001705 	stb	zero,92(r2)
  800470:	10001745 	stb	zero,93(r2)
  800474:	10001785 	stb	zero,94(r2)
  800478:	100017c5 	stb	zero,95(r2)
  80047c:	10001805 	stb	zero,96(r2)
  800480:	10001845 	stb	zero,97(r2)
  800484:	10001885 	stb	zero,98(r2)
  800488:	100018c5 	stb	zero,99(r2)
  80048c:	00c00104 	movi	r3,4
  800490:	10c00315 	stw	r3,12(r2)
  800494:	02002034 	movhi	r8,128
  800498:	20c00217 	ldw	r3,8(r4)
  80049c:	01c02034 	movhi	r7,128
  8004a0:	01802034 	movhi	r6,128
  8004a4:	01402034 	movhi	r5,128
  8004a8:	4207da04 	addi	r8,r8,8040
  8004ac:	39c7f104 	addi	r7,r7,8132
  8004b0:	31881104 	addi	r6,r6,8260
  8004b4:	29482804 	addi	r5,r5,8352
  8004b8:	02400074 	movhi	r9,1
  8004bc:	10001915 	stw	zero,100(r2)
  8004c0:	10000015 	stw	zero,0(r2)
  8004c4:	10000115 	stw	zero,4(r2)
  8004c8:	10000215 	stw	zero,8(r2)
  8004cc:	10000415 	stw	zero,16(r2)
  8004d0:	10000515 	stw	zero,20(r2)
  8004d4:	10000615 	stw	zero,24(r2)
  8004d8:	10800715 	stw	r2,28(r2)
  8004dc:	12000815 	stw	r8,32(r2)
  8004e0:	11c00915 	stw	r7,36(r2)
  8004e4:	11800a15 	stw	r6,40(r2)
  8004e8:	11400b15 	stw	r5,44(r2)
  8004ec:	4a400284 	addi	r9,r9,10
  8004f0:	1a400315 	stw	r9,12(r3)
  8004f4:	18001915 	stw	zero,100(r3)
  8004f8:	18000015 	stw	zero,0(r3)
  8004fc:	18000115 	stw	zero,4(r3)
  800500:	18000215 	stw	zero,8(r3)
  800504:	18000415 	stw	zero,16(r3)
  800508:	18001705 	stb	zero,92(r3)
  80050c:	18001745 	stb	zero,93(r3)
  800510:	18001785 	stb	zero,94(r3)
  800514:	180017c5 	stb	zero,95(r3)
  800518:	18001805 	stb	zero,96(r3)
  80051c:	18001845 	stb	zero,97(r3)
  800520:	18001885 	stb	zero,98(r3)
  800524:	180018c5 	stb	zero,99(r3)
  800528:	20800317 	ldw	r2,12(r4)
  80052c:	024000b4 	movhi	r9,2
  800530:	18000515 	stw	zero,20(r3)
  800534:	18000615 	stw	zero,24(r3)
  800538:	18c00715 	stw	r3,28(r3)
  80053c:	1a000815 	stw	r8,32(r3)
  800540:	19c00915 	stw	r7,36(r3)
  800544:	19800a15 	stw	r6,40(r3)
  800548:	19400b15 	stw	r5,44(r3)
  80054c:	4a400484 	addi	r9,r9,18
  800550:	10001915 	stw	zero,100(r2)
  800554:	10000015 	stw	zero,0(r2)
  800558:	10000115 	stw	zero,4(r2)
  80055c:	10000215 	stw	zero,8(r2)
  800560:	12400315 	stw	r9,12(r2)
  800564:	10000415 	stw	zero,16(r2)
  800568:	10000515 	stw	zero,20(r2)
  80056c:	10000615 	stw	zero,24(r2)
  800570:	10001705 	stb	zero,92(r2)
  800574:	10001745 	stb	zero,93(r2)
  800578:	10001785 	stb	zero,94(r2)
  80057c:	100017c5 	stb	zero,95(r2)
  800580:	10001805 	stb	zero,96(r2)
  800584:	10001845 	stb	zero,97(r2)
  800588:	10001885 	stb	zero,98(r2)
  80058c:	100018c5 	stb	zero,99(r2)
  800590:	10800715 	stw	r2,28(r2)
  800594:	12000815 	stw	r8,32(r2)
  800598:	11c00915 	stw	r7,36(r2)
  80059c:	11800a15 	stw	r6,40(r2)
  8005a0:	11400b15 	stw	r5,44(r2)
  8005a4:	00800044 	movi	r2,1
  8005a8:	20800e15 	stw	r2,56(r4)
  8005ac:	f800283a 	ret

008005b0 <__sfmoreglue>:
  8005b0:	defffc04 	addi	sp,sp,-16
  8005b4:	dc800215 	stw	r18,8(sp)
  8005b8:	2825883a 	mov	r18,r5
  8005bc:	dc000015 	stw	r16,0(sp)
  8005c0:	01401a04 	movi	r5,104
  8005c4:	2021883a 	mov	r16,r4
  8005c8:	913fffc4 	addi	r4,r18,-1
  8005cc:	dfc00315 	stw	ra,12(sp)
  8005d0:	dc400115 	stw	r17,4(sp)
  8005d4:	08031080 	call	803108 <__mulsi3>
  8005d8:	8009883a 	mov	r4,r16
  8005dc:	11401d04 	addi	r5,r2,116
  8005e0:	1023883a 	mov	r17,r2
  8005e4:	0800de00 	call	800de0 <_malloc_r>
  8005e8:	1021883a 	mov	r16,r2
  8005ec:	10000726 	beq	r2,zero,80060c <__sfmoreglue+0x5c>
  8005f0:	11000304 	addi	r4,r2,12
  8005f4:	10000015 	stw	zero,0(r2)
  8005f8:	14800115 	stw	r18,4(r2)
  8005fc:	11000215 	stw	r4,8(r2)
  800600:	89801a04 	addi	r6,r17,104
  800604:	000b883a 	mov	r5,zero
  800608:	08018bc0 	call	8018bc <memset>
  80060c:	8005883a 	mov	r2,r16
  800610:	dfc00317 	ldw	ra,12(sp)
  800614:	dc800217 	ldw	r18,8(sp)
  800618:	dc400117 	ldw	r17,4(sp)
  80061c:	dc000017 	ldw	r16,0(sp)
  800620:	dec00404 	addi	sp,sp,16
  800624:	f800283a 	ret

00800628 <__sfp>:
  800628:	defffb04 	addi	sp,sp,-20
  80062c:	00802034 	movhi	r2,128
  800630:	dc000015 	stw	r16,0(sp)
  800634:	141cce17 	ldw	r16,29496(r2)
  800638:	dc400115 	stw	r17,4(sp)
  80063c:	dfc00415 	stw	ra,16(sp)
  800640:	80800e17 	ldw	r2,56(r16)
  800644:	dcc00315 	stw	r19,12(sp)
  800648:	dc800215 	stw	r18,8(sp)
  80064c:	2023883a 	mov	r17,r4
  800650:	10003126 	beq	r2,zero,800718 <__sfp+0xf0>
  800654:	8100ba17 	ldw	r4,744(r16)
  800658:	8140b917 	ldw	r5,740(r16)
  80065c:	04c00104 	movi	r19,4
  800660:	8400b804 	addi	r16,r16,736
  800664:	297fffc4 	addi	r5,r5,-1
  800668:	2800050e 	bge	r5,zero,800680 <__sfp+0x58>
  80066c:	00002406 	br	800700 <__sfp+0xd8>
  800670:	297fffc4 	addi	r5,r5,-1
  800674:	28bfffd8 	cmpnei	r2,r5,-1
  800678:	21001a04 	addi	r4,r4,104
  80067c:	10002026 	beq	r2,zero,800700 <__sfp+0xd8>
  800680:	2080030f 	ldh	r2,12(r4)
  800684:	103ffa1e 	bne	r2,zero,800670 <__sfp+0x48>
  800688:	00bffff4 	movhi	r2,65535
  80068c:	10800044 	addi	r2,r2,1
  800690:	20001915 	stw	zero,100(r4)
  800694:	20000015 	stw	zero,0(r4)
  800698:	20000115 	stw	zero,4(r4)
  80069c:	20000215 	stw	zero,8(r4)
  8006a0:	20800315 	stw	r2,12(r4)
  8006a4:	20000415 	stw	zero,16(r4)
  8006a8:	20000515 	stw	zero,20(r4)
  8006ac:	20000615 	stw	zero,24(r4)
  8006b0:	20001705 	stb	zero,92(r4)
  8006b4:	20001745 	stb	zero,93(r4)
  8006b8:	20001785 	stb	zero,94(r4)
  8006bc:	200017c5 	stb	zero,95(r4)
  8006c0:	20001805 	stb	zero,96(r4)
  8006c4:	20001845 	stb	zero,97(r4)
  8006c8:	20001885 	stb	zero,98(r4)
  8006cc:	200018c5 	stb	zero,99(r4)
  8006d0:	20000c15 	stw	zero,48(r4)
  8006d4:	20000d15 	stw	zero,52(r4)
  8006d8:	20001115 	stw	zero,68(r4)
  8006dc:	20001215 	stw	zero,72(r4)
  8006e0:	2005883a 	mov	r2,r4
  8006e4:	dfc00417 	ldw	ra,16(sp)
  8006e8:	dcc00317 	ldw	r19,12(sp)
  8006ec:	dc800217 	ldw	r18,8(sp)
  8006f0:	dc400117 	ldw	r17,4(sp)
  8006f4:	dc000017 	ldw	r16,0(sp)
  8006f8:	dec00504 	addi	sp,sp,20
  8006fc:	f800283a 	ret
  800700:	80800017 	ldw	r2,0(r16)
  800704:	10000726 	beq	r2,zero,800724 <__sfp+0xfc>
  800708:	11000217 	ldw	r4,8(r2)
  80070c:	11400117 	ldw	r5,4(r2)
  800710:	1021883a 	mov	r16,r2
  800714:	003fd306 	br	800664 <__sfp+0x3c>
  800718:	8009883a 	mov	r4,r16
  80071c:	08004480 	call	800448 <__sinit.part.0>
  800720:	003fcc06 	br	800654 <__sfp+0x2c>
  800724:	01406b04 	movi	r5,428
  800728:	8809883a 	mov	r4,r17
  80072c:	0800de00 	call	800de0 <_malloc_r>
  800730:	1025883a 	mov	r18,r2
  800734:	10000c26 	beq	r2,zero,800768 <__sfp+0x140>
  800738:	11000304 	addi	r4,r2,12
  80073c:	11000215 	stw	r4,8(r2)
  800740:	000b883a 	mov	r5,zero
  800744:	10000015 	stw	zero,0(r2)
  800748:	14c00115 	stw	r19,4(r2)
  80074c:	01806804 	movi	r6,416
  800750:	08018bc0 	call	8018bc <memset>
  800754:	1009883a 	mov	r4,r2
  800758:	84800015 	stw	r18,0(r16)
  80075c:	014000c4 	movi	r5,3
  800760:	9021883a 	mov	r16,r18
  800764:	003fc606 	br	800680 <__sfp+0x58>
  800768:	80000015 	stw	zero,0(r16)
  80076c:	00800304 	movi	r2,12
  800770:	88800015 	stw	r2,0(r17)
  800774:	0009883a 	mov	r4,zero
  800778:	003fd906 	br	8006e0 <__sfp+0xb8>

0080077c <_cleanup>:
  80077c:	00802034 	movhi	r2,128
  800780:	111cce17 	ldw	r4,29496(r2)
  800784:	01402034 	movhi	r5,128
  800788:	2948e204 	addi	r5,r5,9096
  80078c:	0800d381 	jmpi	800d38 <_fwalk_reent>

00800790 <__sinit>:
  800790:	20800e17 	ldw	r2,56(r4)
  800794:	10000126 	beq	r2,zero,80079c <__sinit+0xc>
  800798:	f800283a 	ret
  80079c:	08004481 	jmpi	800448 <__sinit.part.0>

008007a0 <__sfp_lock_acquire>:
  8007a0:	f800283a 	ret

008007a4 <__sfp_lock_release>:
  8007a4:	f800283a 	ret

008007a8 <__sinit_lock_acquire>:
  8007a8:	f800283a 	ret

008007ac <__sinit_lock_release>:
  8007ac:	f800283a 	ret

008007b0 <__fp_lock_all>:
  8007b0:	00802034 	movhi	r2,128
  8007b4:	111ccf17 	ldw	r4,29500(r2)
  8007b8:	01402034 	movhi	r5,128
  8007bc:	29410b04 	addi	r5,r5,1068
  8007c0:	0800ca01 	jmpi	800ca0 <_fwalk>

008007c4 <__fp_unlock_all>:
  8007c4:	00802034 	movhi	r2,128
  8007c8:	111ccf17 	ldw	r4,29500(r2)
  8007cc:	01402034 	movhi	r5,128
  8007d0:	29411004 	addi	r5,r5,1088
  8007d4:	0800ca01 	jmpi	800ca0 <_fwalk>

008007d8 <__sfvwrite_r>:
  8007d8:	30800217 	ldw	r2,8(r6)
  8007dc:	1000a326 	beq	r2,zero,800a6c <__sfvwrite_r+0x294>
  8007e0:	29c0030b 	ldhu	r7,12(r5)
  8007e4:	defff404 	addi	sp,sp,-48
  8007e8:	ddc00915 	stw	r23,36(sp)
  8007ec:	dd400715 	stw	r21,28(sp)
  8007f0:	dc000215 	stw	r16,8(sp)
  8007f4:	dfc00b15 	stw	ra,44(sp)
  8007f8:	df000a15 	stw	fp,40(sp)
  8007fc:	dd800815 	stw	r22,32(sp)
  800800:	dd000615 	stw	r20,24(sp)
  800804:	dcc00515 	stw	r19,20(sp)
  800808:	dc800415 	stw	r18,16(sp)
  80080c:	dc400315 	stw	r17,12(sp)
  800810:	3880020c 	andi	r2,r7,8
  800814:	302f883a 	mov	r23,r6
  800818:	202b883a 	mov	r21,r4
  80081c:	2821883a 	mov	r16,r5
  800820:	10002226 	beq	r2,zero,8008ac <__sfvwrite_r+0xd4>
  800824:	28800417 	ldw	r2,16(r5)
  800828:	10002026 	beq	r2,zero,8008ac <__sfvwrite_r+0xd4>
  80082c:	3880008c 	andi	r2,r7,2
  800830:	bc400017 	ldw	r17,0(r23)
  800834:	10002526 	beq	r2,zero,8008cc <__sfvwrite_r+0xf4>
  800838:	80800917 	ldw	r2,36(r16)
  80083c:	81400717 	ldw	r5,28(r16)
  800840:	05200034 	movhi	r20,32768
  800844:	0027883a 	mov	r19,zero
  800848:	0025883a 	mov	r18,zero
  80084c:	a53f0004 	addi	r20,r20,-1024
  800850:	980d883a 	mov	r6,r19
  800854:	a809883a 	mov	r4,r21
  800858:	90001026 	beq	r18,zero,80089c <__sfvwrite_r+0xc4>
  80085c:	900f883a 	mov	r7,r18
  800860:	a480012e 	bgeu	r20,r18,800868 <__sfvwrite_r+0x90>
  800864:	a00f883a 	mov	r7,r20
  800868:	103ee83a 	callr	r2
  80086c:	00807a0e 	bge	zero,r2,800a58 <__sfvwrite_r+0x280>
  800870:	b9000217 	ldw	r4,8(r23)
  800874:	98a7883a 	add	r19,r19,r2
  800878:	90a5c83a 	sub	r18,r18,r2
  80087c:	2085c83a 	sub	r2,r4,r2
  800880:	b8800215 	stw	r2,8(r23)
  800884:	10006326 	beq	r2,zero,800a14 <__sfvwrite_r+0x23c>
  800888:	80800917 	ldw	r2,36(r16)
  80088c:	81400717 	ldw	r5,28(r16)
  800890:	980d883a 	mov	r6,r19
  800894:	a809883a 	mov	r4,r21
  800898:	903ff01e 	bne	r18,zero,80085c <__sfvwrite_r+0x84>
  80089c:	8cc00017 	ldw	r19,0(r17)
  8008a0:	8c800117 	ldw	r18,4(r17)
  8008a4:	8c400204 	addi	r17,r17,8
  8008a8:	003fe906 	br	800850 <__sfvwrite_r+0x78>
  8008ac:	800b883a 	mov	r5,r16
  8008b0:	a809883a 	mov	r4,r21
  8008b4:	080210c0 	call	80210c <__swsetup_r>
  8008b8:	1000f71e 	bne	r2,zero,800c98 <__sfvwrite_r+0x4c0>
  8008bc:	81c0030b 	ldhu	r7,12(r16)
  8008c0:	bc400017 	ldw	r17,0(r23)
  8008c4:	3880008c 	andi	r2,r7,2
  8008c8:	103fdb1e 	bne	r2,zero,800838 <__sfvwrite_r+0x60>
  8008cc:	3880004c 	andi	r2,r7,1
  8008d0:	84800217 	ldw	r18,8(r16)
  8008d4:	82000017 	ldw	r8,0(r16)
  8008d8:	1000661e 	bne	r2,zero,800a74 <__sfvwrite_r+0x29c>
  8008dc:	00a00034 	movhi	r2,32768
  8008e0:	10bfff84 	addi	r2,r2,-2
  8008e4:	00e00034 	movhi	r3,32768
  8008e8:	d8800015 	stw	r2,0(sp)
  8008ec:	18bfffc4 	addi	r2,r3,-1
  8008f0:	0039883a 	mov	fp,zero
  8008f4:	0027883a 	mov	r19,zero
  8008f8:	d8800115 	stw	r2,4(sp)
  8008fc:	98004126 	beq	r19,zero,800a04 <__sfvwrite_r+0x22c>
  800900:	3880800c 	andi	r2,r7,512
  800904:	10009726 	beq	r2,zero,800b64 <__sfvwrite_r+0x38c>
  800908:	902d883a 	mov	r22,r18
  80090c:	9c80be36 	bltu	r19,r18,800c08 <__sfvwrite_r+0x430>
  800910:	3881200c 	andi	r2,r7,1152
  800914:	10002626 	beq	r2,zero,8009b0 <__sfvwrite_r+0x1d8>
  800918:	81800517 	ldw	r6,20(r16)
  80091c:	81400417 	ldw	r5,16(r16)
  800920:	98800044 	addi	r2,r19,1
  800924:	3189883a 	add	r4,r6,r6
  800928:	2189883a 	add	r4,r4,r6
  80092c:	2028d7fa 	srli	r20,r4,31
  800930:	4165c83a 	sub	r18,r8,r5
  800934:	1485883a 	add	r2,r2,r18
  800938:	a109883a 	add	r4,r20,r4
  80093c:	2029d07a 	srai	r20,r4,1
  800940:	a00d883a 	mov	r6,r20
  800944:	a080022e 	bgeu	r20,r2,800950 <__sfvwrite_r+0x178>
  800948:	1029883a 	mov	r20,r2
  80094c:	100d883a 	mov	r6,r2
  800950:	39c1000c 	andi	r7,r7,1024
  800954:	3800c026 	beq	r7,zero,800c58 <__sfvwrite_r+0x480>
  800958:	a809883a 	mov	r4,r21
  80095c:	300b883a 	mov	r5,r6
  800960:	0800de00 	call	800de0 <_malloc_r>
  800964:	1009883a 	mov	r4,r2
  800968:	1000c726 	beq	r2,zero,800c88 <__sfvwrite_r+0x4b0>
  80096c:	81400417 	ldw	r5,16(r16)
  800970:	900d883a 	mov	r6,r18
  800974:	08016900 	call	801690 <memcpy>
  800978:	1009883a 	mov	r4,r2
  80097c:	8080030b 	ldhu	r2,12(r16)
  800980:	00fedfc4 	movi	r3,-1153
  800984:	10c4703a 	and	r2,r2,r3
  800988:	10802014 	ori	r2,r2,128
  80098c:	8080030d 	sth	r2,12(r16)
  800990:	2491883a 	add	r8,r4,r18
  800994:	a485c83a 	sub	r2,r20,r18
  800998:	81000415 	stw	r4,16(r16)
  80099c:	82000015 	stw	r8,0(r16)
  8009a0:	85000515 	stw	r20,20(r16)
  8009a4:	9825883a 	mov	r18,r19
  8009a8:	80800215 	stw	r2,8(r16)
  8009ac:	982d883a 	mov	r22,r19
  8009b0:	4009883a 	mov	r4,r8
  8009b4:	b00d883a 	mov	r6,r22
  8009b8:	e00b883a 	mov	r5,fp
  8009bc:	08017900 	call	801790 <memmove>
  8009c0:	81000217 	ldw	r4,8(r16)
  8009c4:	80800017 	ldw	r2,0(r16)
  8009c8:	9829883a 	mov	r20,r19
  8009cc:	24a5c83a 	sub	r18,r4,r18
  8009d0:	1585883a 	add	r2,r2,r22
  8009d4:	84800215 	stw	r18,8(r16)
  8009d8:	80800015 	stw	r2,0(r16)
  8009dc:	0027883a 	mov	r19,zero
  8009e0:	b8800217 	ldw	r2,8(r23)
  8009e4:	e539883a 	add	fp,fp,r20
  8009e8:	1529c83a 	sub	r20,r2,r20
  8009ec:	bd000215 	stw	r20,8(r23)
  8009f0:	a0000826 	beq	r20,zero,800a14 <__sfvwrite_r+0x23c>
  8009f4:	81c0030b 	ldhu	r7,12(r16)
  8009f8:	84800217 	ldw	r18,8(r16)
  8009fc:	82000017 	ldw	r8,0(r16)
  800a00:	983fbf1e 	bne	r19,zero,800900 <__sfvwrite_r+0x128>
  800a04:	8f000017 	ldw	fp,0(r17)
  800a08:	8cc00117 	ldw	r19,4(r17)
  800a0c:	8c400204 	addi	r17,r17,8
  800a10:	003fba06 	br	8008fc <__sfvwrite_r+0x124>
  800a14:	0005883a 	mov	r2,zero
  800a18:	dfc00b17 	ldw	ra,44(sp)
  800a1c:	df000a17 	ldw	fp,40(sp)
  800a20:	ddc00917 	ldw	r23,36(sp)
  800a24:	dd800817 	ldw	r22,32(sp)
  800a28:	dd400717 	ldw	r21,28(sp)
  800a2c:	dd000617 	ldw	r20,24(sp)
  800a30:	dcc00517 	ldw	r19,20(sp)
  800a34:	dc800417 	ldw	r18,16(sp)
  800a38:	dc400317 	ldw	r17,12(sp)
  800a3c:	dc000217 	ldw	r16,8(sp)
  800a40:	dec00c04 	addi	sp,sp,48
  800a44:	f800283a 	ret
  800a48:	800b883a 	mov	r5,r16
  800a4c:	a809883a 	mov	r4,r21
  800a50:	08026900 	call	802690 <_fflush_r>
  800a54:	10002026 	beq	r2,zero,800ad8 <__sfvwrite_r+0x300>
  800a58:	8080030b 	ldhu	r2,12(r16)
  800a5c:	10801014 	ori	r2,r2,64
  800a60:	8080030d 	sth	r2,12(r16)
  800a64:	00bfffc4 	movi	r2,-1
  800a68:	003feb06 	br	800a18 <__sfvwrite_r+0x240>
  800a6c:	0005883a 	mov	r2,zero
  800a70:	f800283a 	ret
  800a74:	002d883a 	mov	r22,zero
  800a78:	0027883a 	mov	r19,zero
  800a7c:	0005883a 	mov	r2,zero
  800a80:	0039883a 	mov	fp,zero
  800a84:	b0001d26 	beq	r22,zero,800afc <__sfvwrite_r+0x324>
  800a88:	10002026 	beq	r2,zero,800b0c <__sfvwrite_r+0x334>
  800a8c:	9829883a 	mov	r20,r19
  800a90:	b500012e 	bgeu	r22,r20,800a98 <__sfvwrite_r+0x2c0>
  800a94:	b029883a 	mov	r20,r22
  800a98:	80800417 	ldw	r2,16(r16)
  800a9c:	81c00517 	ldw	r7,20(r16)
  800aa0:	1200022e 	bgeu	r2,r8,800aac <__sfvwrite_r+0x2d4>
  800aa4:	3ca5883a 	add	r18,r7,r18
  800aa8:	95002216 	blt	r18,r20,800b34 <__sfvwrite_r+0x35c>
  800aac:	a1c05916 	blt	r20,r7,800c14 <__sfvwrite_r+0x43c>
  800ab0:	80800917 	ldw	r2,36(r16)
  800ab4:	81400717 	ldw	r5,28(r16)
  800ab8:	e00d883a 	mov	r6,fp
  800abc:	a809883a 	mov	r4,r21
  800ac0:	103ee83a 	callr	r2
  800ac4:	1025883a 	mov	r18,r2
  800ac8:	00bfe30e 	bge	zero,r2,800a58 <__sfvwrite_r+0x280>
  800acc:	9ca7c83a 	sub	r19,r19,r18
  800ad0:	983fdd26 	beq	r19,zero,800a48 <__sfvwrite_r+0x270>
  800ad4:	00800044 	movi	r2,1
  800ad8:	b9800217 	ldw	r6,8(r23)
  800adc:	e4b9883a 	add	fp,fp,r18
  800ae0:	b4adc83a 	sub	r22,r22,r18
  800ae4:	34a5c83a 	sub	r18,r6,r18
  800ae8:	bc800215 	stw	r18,8(r23)
  800aec:	903fc926 	beq	r18,zero,800a14 <__sfvwrite_r+0x23c>
  800af0:	84800217 	ldw	r18,8(r16)
  800af4:	82000017 	ldw	r8,0(r16)
  800af8:	b03fe31e 	bne	r22,zero,800a88 <__sfvwrite_r+0x2b0>
  800afc:	8d800117 	ldw	r22,4(r17)
  800b00:	8f000017 	ldw	fp,0(r17)
  800b04:	8c400204 	addi	r17,r17,8
  800b08:	b03ffc26 	beq	r22,zero,800afc <__sfvwrite_r+0x324>
  800b0c:	b00d883a 	mov	r6,r22
  800b10:	01400284 	movi	r5,10
  800b14:	e009883a 	mov	r4,fp
  800b18:	da000015 	stw	r8,0(sp)
  800b1c:	08015c00 	call	8015c0 <memchr>
  800b20:	da000017 	ldw	r8,0(sp)
  800b24:	10004926 	beq	r2,zero,800c4c <__sfvwrite_r+0x474>
  800b28:	10800044 	addi	r2,r2,1
  800b2c:	1727c83a 	sub	r19,r2,fp
  800b30:	003fd606 	br	800a8c <__sfvwrite_r+0x2b4>
  800b34:	e00b883a 	mov	r5,fp
  800b38:	4009883a 	mov	r4,r8
  800b3c:	900d883a 	mov	r6,r18
  800b40:	08017900 	call	801790 <memmove>
  800b44:	80800017 	ldw	r2,0(r16)
  800b48:	800b883a 	mov	r5,r16
  800b4c:	a809883a 	mov	r4,r21
  800b50:	1485883a 	add	r2,r2,r18
  800b54:	80800015 	stw	r2,0(r16)
  800b58:	08026900 	call	802690 <_fflush_r>
  800b5c:	103fdb26 	beq	r2,zero,800acc <__sfvwrite_r+0x2f4>
  800b60:	003fbd06 	br	800a58 <__sfvwrite_r+0x280>
  800b64:	80800417 	ldw	r2,16(r16)
  800b68:	12001436 	bltu	r2,r8,800bbc <__sfvwrite_r+0x3e4>
  800b6c:	85000517 	ldw	r20,20(r16)
  800b70:	9d001236 	bltu	r19,r20,800bbc <__sfvwrite_r+0x3e4>
  800b74:	d8800017 	ldw	r2,0(sp)
  800b78:	14c0322e 	bgeu	r2,r19,800c44 <__sfvwrite_r+0x46c>
  800b7c:	d9000117 	ldw	r4,4(sp)
  800b80:	a00b883a 	mov	r5,r20
  800b84:	0802f540 	call	802f54 <__divsi3>
  800b88:	a00b883a 	mov	r5,r20
  800b8c:	1009883a 	mov	r4,r2
  800b90:	08031080 	call	803108 <__mulsi3>
  800b94:	82000917 	ldw	r8,36(r16)
  800b98:	81400717 	ldw	r5,28(r16)
  800b9c:	100f883a 	mov	r7,r2
  800ba0:	e00d883a 	mov	r6,fp
  800ba4:	a809883a 	mov	r4,r21
  800ba8:	403ee83a 	callr	r8
  800bac:	1029883a 	mov	r20,r2
  800bb0:	00bfa90e 	bge	zero,r2,800a58 <__sfvwrite_r+0x280>
  800bb4:	9d27c83a 	sub	r19,r19,r20
  800bb8:	003f8906 	br	8009e0 <__sfvwrite_r+0x208>
  800bbc:	9029883a 	mov	r20,r18
  800bc0:	9c80012e 	bgeu	r19,r18,800bc8 <__sfvwrite_r+0x3f0>
  800bc4:	9829883a 	mov	r20,r19
  800bc8:	4009883a 	mov	r4,r8
  800bcc:	a00d883a 	mov	r6,r20
  800bd0:	e00b883a 	mov	r5,fp
  800bd4:	08017900 	call	801790 <memmove>
  800bd8:	80800217 	ldw	r2,8(r16)
  800bdc:	81000017 	ldw	r4,0(r16)
  800be0:	1505c83a 	sub	r2,r2,r20
  800be4:	2509883a 	add	r4,r4,r20
  800be8:	80800215 	stw	r2,8(r16)
  800bec:	81000015 	stw	r4,0(r16)
  800bf0:	103ff01e 	bne	r2,zero,800bb4 <__sfvwrite_r+0x3dc>
  800bf4:	800b883a 	mov	r5,r16
  800bf8:	a809883a 	mov	r4,r21
  800bfc:	08026900 	call	802690 <_fflush_r>
  800c00:	103fec26 	beq	r2,zero,800bb4 <__sfvwrite_r+0x3dc>
  800c04:	003f9406 	br	800a58 <__sfvwrite_r+0x280>
  800c08:	9825883a 	mov	r18,r19
  800c0c:	982d883a 	mov	r22,r19
  800c10:	003f6706 	br	8009b0 <__sfvwrite_r+0x1d8>
  800c14:	4009883a 	mov	r4,r8
  800c18:	a00d883a 	mov	r6,r20
  800c1c:	e00b883a 	mov	r5,fp
  800c20:	08017900 	call	801790 <memmove>
  800c24:	81000217 	ldw	r4,8(r16)
  800c28:	80800017 	ldw	r2,0(r16)
  800c2c:	a025883a 	mov	r18,r20
  800c30:	2509c83a 	sub	r4,r4,r20
  800c34:	1505883a 	add	r2,r2,r20
  800c38:	81000215 	stw	r4,8(r16)
  800c3c:	80800015 	stw	r2,0(r16)
  800c40:	003fa206 	br	800acc <__sfvwrite_r+0x2f4>
  800c44:	9809883a 	mov	r4,r19
  800c48:	003fcd06 	br	800b80 <__sfvwrite_r+0x3a8>
  800c4c:	b5000044 	addi	r20,r22,1
  800c50:	a027883a 	mov	r19,r20
  800c54:	003f8e06 	br	800a90 <__sfvwrite_r+0x2b8>
  800c58:	a809883a 	mov	r4,r21
  800c5c:	08019ac0 	call	8019ac <_realloc_r>
  800c60:	1009883a 	mov	r4,r2
  800c64:	103f4a1e 	bne	r2,zero,800990 <__sfvwrite_r+0x1b8>
  800c68:	81400417 	ldw	r5,16(r16)
  800c6c:	a809883a 	mov	r4,r21
  800c70:	08028900 	call	802890 <_free_r>
  800c74:	8080030b 	ldhu	r2,12(r16)
  800c78:	00c00304 	movi	r3,12
  800c7c:	a8c00015 	stw	r3,0(r21)
  800c80:	10bfdfcc 	andi	r2,r2,65407
  800c84:	003f7506 	br	800a5c <__sfvwrite_r+0x284>
  800c88:	00c00304 	movi	r3,12
  800c8c:	8080030b 	ldhu	r2,12(r16)
  800c90:	a8c00015 	stw	r3,0(r21)
  800c94:	003f7106 	br	800a5c <__sfvwrite_r+0x284>
  800c98:	00bfffc4 	movi	r2,-1
  800c9c:	003f5e06 	br	800a18 <__sfvwrite_r+0x240>

00800ca0 <_fwalk>:
  800ca0:	defffa04 	addi	sp,sp,-24
  800ca4:	dd000415 	stw	r20,16(sp)
  800ca8:	dcc00315 	stw	r19,12(sp)
  800cac:	dc800215 	stw	r18,8(sp)
  800cb0:	dfc00515 	stw	ra,20(sp)
  800cb4:	dc400115 	stw	r17,4(sp)
  800cb8:	dc000015 	stw	r16,0(sp)
  800cbc:	2827883a 	mov	r19,r5
  800cc0:	2480b804 	addi	r18,r4,736
  800cc4:	0029883a 	mov	r20,zero
  800cc8:	94400117 	ldw	r17,4(r18)
  800ccc:	94000217 	ldw	r16,8(r18)
  800cd0:	8c7fffc4 	addi	r17,r17,-1
  800cd4:	88000d16 	blt	r17,zero,800d0c <_fwalk+0x6c>
  800cd8:	8080030b 	ldhu	r2,12(r16)
  800cdc:	8c7fffc4 	addi	r17,r17,-1
  800ce0:	108000b0 	cmpltui	r2,r2,2
  800ce4:	1000061e 	bne	r2,zero,800d00 <_fwalk+0x60>
  800ce8:	8080038f 	ldh	r2,14(r16)
  800cec:	8009883a 	mov	r4,r16
  800cf0:	10bfffe0 	cmpeqi	r2,r2,-1
  800cf4:	1000021e 	bne	r2,zero,800d00 <_fwalk+0x60>
  800cf8:	983ee83a 	callr	r19
  800cfc:	a0a8b03a 	or	r20,r20,r2
  800d00:	88bfffd8 	cmpnei	r2,r17,-1
  800d04:	84001a04 	addi	r16,r16,104
  800d08:	103ff31e 	bne	r2,zero,800cd8 <_fwalk+0x38>
  800d0c:	94800017 	ldw	r18,0(r18)
  800d10:	903fed1e 	bne	r18,zero,800cc8 <_fwalk+0x28>
  800d14:	a005883a 	mov	r2,r20
  800d18:	dfc00517 	ldw	ra,20(sp)
  800d1c:	dd000417 	ldw	r20,16(sp)
  800d20:	dcc00317 	ldw	r19,12(sp)
  800d24:	dc800217 	ldw	r18,8(sp)
  800d28:	dc400117 	ldw	r17,4(sp)
  800d2c:	dc000017 	ldw	r16,0(sp)
  800d30:	dec00604 	addi	sp,sp,24
  800d34:	f800283a 	ret

00800d38 <_fwalk_reent>:
  800d38:	defff904 	addi	sp,sp,-28
  800d3c:	dd400515 	stw	r21,20(sp)
  800d40:	dd000415 	stw	r20,16(sp)
  800d44:	dcc00315 	stw	r19,12(sp)
  800d48:	dc800215 	stw	r18,8(sp)
  800d4c:	dfc00615 	stw	ra,24(sp)
  800d50:	dc400115 	stw	r17,4(sp)
  800d54:	dc000015 	stw	r16,0(sp)
  800d58:	202b883a 	mov	r21,r4
  800d5c:	2827883a 	mov	r19,r5
  800d60:	2480b804 	addi	r18,r4,736
  800d64:	0029883a 	mov	r20,zero
  800d68:	94400117 	ldw	r17,4(r18)
  800d6c:	94000217 	ldw	r16,8(r18)
  800d70:	8c7fffc4 	addi	r17,r17,-1
  800d74:	88000e16 	blt	r17,zero,800db0 <_fwalk_reent+0x78>
  800d78:	8080030b 	ldhu	r2,12(r16)
  800d7c:	8c7fffc4 	addi	r17,r17,-1
  800d80:	108000b0 	cmpltui	r2,r2,2
  800d84:	1000071e 	bne	r2,zero,800da4 <_fwalk_reent+0x6c>
  800d88:	8080038f 	ldh	r2,14(r16)
  800d8c:	800b883a 	mov	r5,r16
  800d90:	a809883a 	mov	r4,r21
  800d94:	10bfffe0 	cmpeqi	r2,r2,-1
  800d98:	1000021e 	bne	r2,zero,800da4 <_fwalk_reent+0x6c>
  800d9c:	983ee83a 	callr	r19
  800da0:	a0a8b03a 	or	r20,r20,r2
  800da4:	88bfffd8 	cmpnei	r2,r17,-1
  800da8:	84001a04 	addi	r16,r16,104
  800dac:	103ff21e 	bne	r2,zero,800d78 <_fwalk_reent+0x40>
  800db0:	94800017 	ldw	r18,0(r18)
  800db4:	903fec1e 	bne	r18,zero,800d68 <_fwalk_reent+0x30>
  800db8:	a005883a 	mov	r2,r20
  800dbc:	dfc00617 	ldw	ra,24(sp)
  800dc0:	dd400517 	ldw	r21,20(sp)
  800dc4:	dd000417 	ldw	r20,16(sp)
  800dc8:	dcc00317 	ldw	r19,12(sp)
  800dcc:	dc800217 	ldw	r18,8(sp)
  800dd0:	dc400117 	ldw	r17,4(sp)
  800dd4:	dc000017 	ldw	r16,0(sp)
  800dd8:	dec00704 	addi	sp,sp,28
  800ddc:	f800283a 	ret

00800de0 <_malloc_r>:
  800de0:	defff604 	addi	sp,sp,-40
  800de4:	dc400115 	stw	r17,4(sp)
  800de8:	2c4002c4 	addi	r17,r5,11
  800dec:	dc800215 	stw	r18,8(sp)
  800df0:	dfc00915 	stw	ra,36(sp)
  800df4:	df000815 	stw	fp,32(sp)
  800df8:	ddc00715 	stw	r23,28(sp)
  800dfc:	dd800615 	stw	r22,24(sp)
  800e00:	dd400515 	stw	r21,20(sp)
  800e04:	dd000415 	stw	r20,16(sp)
  800e08:	dcc00315 	stw	r19,12(sp)
  800e0c:	dc000015 	stw	r16,0(sp)
  800e10:	888005e8 	cmpgeui	r2,r17,23
  800e14:	2025883a 	mov	r18,r4
  800e18:	10001b1e 	bne	r2,zero,800e88 <_malloc_r+0xa8>
  800e1c:	29400468 	cmpgeui	r5,r5,17
  800e20:	2800821e 	bne	r5,zero,80102c <_malloc_r+0x24c>
  800e24:	08036dc0 	call	8036dc <__malloc_lock>
  800e28:	04400404 	movi	r17,16
  800e2c:	00800604 	movi	r2,24
  800e30:	01c00084 	movi	r7,2
  800e34:	04c02034 	movhi	r19,128
  800e38:	9cd74a04 	addi	r19,r19,23848
  800e3c:	9885883a 	add	r2,r19,r2
  800e40:	14000117 	ldw	r16,4(r2)
  800e44:	10fffe04 	addi	r3,r2,-8
  800e48:	80c08b26 	beq	r16,r3,801078 <_malloc_r+0x298>
  800e4c:	80800117 	ldw	r2,4(r16)
  800e50:	81000317 	ldw	r4,12(r16)
  800e54:	00ffff04 	movi	r3,-4
  800e58:	10c4703a 	and	r2,r2,r3
  800e5c:	81400217 	ldw	r5,8(r16)
  800e60:	8085883a 	add	r2,r16,r2
  800e64:	10c00117 	ldw	r3,4(r2)
  800e68:	29000315 	stw	r4,12(r5)
  800e6c:	21400215 	stw	r5,8(r4)
  800e70:	18c00054 	ori	r3,r3,1
  800e74:	10c00115 	stw	r3,4(r2)
  800e78:	9009883a 	mov	r4,r18
  800e7c:	08037000 	call	803700 <__malloc_unlock>
  800e80:	80800204 	addi	r2,r16,8
  800e84:	00006c06 	br	801038 <_malloc_r+0x258>
  800e88:	00bffe04 	movi	r2,-8
  800e8c:	88a2703a 	and	r17,r17,r2
  800e90:	88006616 	blt	r17,zero,80102c <_malloc_r+0x24c>
  800e94:	89406536 	bltu	r17,r5,80102c <_malloc_r+0x24c>
  800e98:	08036dc0 	call	8036dc <__malloc_lock>
  800e9c:	88807e28 	cmpgeui	r2,r17,504
  800ea0:	10012226 	beq	r2,zero,80132c <_malloc_r+0x54c>
  800ea4:	8804d27a 	srli	r2,r17,9
  800ea8:	10006f26 	beq	r2,zero,801068 <_malloc_r+0x288>
  800eac:	10c00168 	cmpgeui	r3,r2,5
  800eb0:	1800fe1e 	bne	r3,zero,8012ac <_malloc_r+0x4cc>
  800eb4:	8804d1ba 	srli	r2,r17,6
  800eb8:	11c00e44 	addi	r7,r2,57
  800ebc:	380890fa 	slli	r4,r7,3
  800ec0:	12000e04 	addi	r8,r2,56
  800ec4:	04c02034 	movhi	r19,128
  800ec8:	9cd74a04 	addi	r19,r19,23848
  800ecc:	9909883a 	add	r4,r19,r4
  800ed0:	24000117 	ldw	r16,4(r4)
  800ed4:	213ffe04 	addi	r4,r4,-8
  800ed8:	24000b26 	beq	r4,r16,800f08 <_malloc_r+0x128>
  800edc:	01bfff04 	movi	r6,-4
  800ee0:	00000306 	br	800ef0 <_malloc_r+0x110>
  800ee4:	1800d60e 	bge	r3,zero,801240 <_malloc_r+0x460>
  800ee8:	84000317 	ldw	r16,12(r16)
  800eec:	24000626 	beq	r4,r16,800f08 <_malloc_r+0x128>
  800ef0:	80800117 	ldw	r2,4(r16)
  800ef4:	1184703a 	and	r2,r2,r6
  800ef8:	1447c83a 	sub	r3,r2,r17
  800efc:	19400408 	cmpgei	r5,r3,16
  800f00:	283ff826 	beq	r5,zero,800ee4 <_malloc_r+0x104>
  800f04:	400f883a 	mov	r7,r8
  800f08:	9c000417 	ldw	r16,16(r19)
  800f0c:	02402034 	movhi	r9,128
  800f10:	4a574c04 	addi	r9,r9,23856
  800f14:	82405f26 	beq	r16,r9,801094 <_malloc_r+0x2b4>
  800f18:	80c00117 	ldw	r3,4(r16)
  800f1c:	00bfff04 	movi	r2,-4
  800f20:	1884703a 	and	r2,r3,r2
  800f24:	1447c83a 	sub	r3,r2,r17
  800f28:	19000410 	cmplti	r4,r3,16
  800f2c:	20010a26 	beq	r4,zero,801358 <_malloc_r+0x578>
  800f30:	9a400515 	stw	r9,20(r19)
  800f34:	9a400415 	stw	r9,16(r19)
  800f38:	1800ff0e 	bge	r3,zero,801338 <_malloc_r+0x558>
  800f3c:	10c08028 	cmpgeui	r3,r2,512
  800f40:	1800c11e 	bne	r3,zero,801248 <_malloc_r+0x468>
  800f44:	1006d0fa 	srli	r3,r2,3
  800f48:	1008d17a 	srli	r4,r2,5
  800f4c:	00800044 	movi	r2,1
  800f50:	18c00044 	addi	r3,r3,1
  800f54:	180690fa 	slli	r3,r3,3
  800f58:	99400117 	ldw	r5,4(r19)
  800f5c:	1104983a 	sll	r2,r2,r4
  800f60:	98c7883a 	add	r3,r19,r3
  800f64:	19000017 	ldw	r4,0(r3)
  800f68:	1144b03a 	or	r2,r2,r5
  800f6c:	197ffe04 	addi	r5,r3,-8
  800f70:	81400315 	stw	r5,12(r16)
  800f74:	81000215 	stw	r4,8(r16)
  800f78:	98800115 	stw	r2,4(r19)
  800f7c:	1c000015 	stw	r16,0(r3)
  800f80:	24000315 	stw	r16,12(r4)
  800f84:	3807d0ba 	srai	r3,r7,2
  800f88:	01000044 	movi	r4,1
  800f8c:	20c8983a 	sll	r4,r4,r3
  800f90:	11004536 	bltu	r2,r4,8010a8 <_malloc_r+0x2c8>
  800f94:	2086703a 	and	r3,r4,r2
  800f98:	18000a1e 	bne	r3,zero,800fc4 <_malloc_r+0x1e4>
  800f9c:	00ffff04 	movi	r3,-4
  800fa0:	2109883a 	add	r4,r4,r4
  800fa4:	38ce703a 	and	r7,r7,r3
  800fa8:	2086703a 	and	r3,r4,r2
  800fac:	39c00104 	addi	r7,r7,4
  800fb0:	1800041e 	bne	r3,zero,800fc4 <_malloc_r+0x1e4>
  800fb4:	2109883a 	add	r4,r4,r4
  800fb8:	2086703a 	and	r3,r4,r2
  800fbc:	39c00104 	addi	r7,r7,4
  800fc0:	183ffc26 	beq	r3,zero,800fb4 <_malloc_r+0x1d4>
  800fc4:	02bfff04 	movi	r10,-4
  800fc8:	381690fa 	slli	r11,r7,3
  800fcc:	3819883a 	mov	r12,r7
  800fd0:	9ad7883a 	add	r11,r19,r11
  800fd4:	5811883a 	mov	r8,r11
  800fd8:	40800317 	ldw	r2,12(r8)
  800fdc:	4080bc26 	beq	r8,r2,8012d0 <_malloc_r+0x4f0>
  800fe0:	10c00117 	ldw	r3,4(r2)
  800fe4:	1021883a 	mov	r16,r2
  800fe8:	10800317 	ldw	r2,12(r2)
  800fec:	1a86703a 	and	r3,r3,r10
  800ff0:	1c4bc83a 	sub	r5,r3,r17
  800ff4:	29800410 	cmplti	r6,r5,16
  800ff8:	3000ba26 	beq	r6,zero,8012e4 <_malloc_r+0x504>
  800ffc:	283ff716 	blt	r5,zero,800fdc <_malloc_r+0x1fc>
  801000:	80c7883a 	add	r3,r16,r3
  801004:	19400117 	ldw	r5,4(r3)
  801008:	81800217 	ldw	r6,8(r16)
  80100c:	9009883a 	mov	r4,r18
  801010:	29400054 	ori	r5,r5,1
  801014:	19400115 	stw	r5,4(r3)
  801018:	30800315 	stw	r2,12(r6)
  80101c:	11800215 	stw	r6,8(r2)
  801020:	08037000 	call	803700 <__malloc_unlock>
  801024:	80800204 	addi	r2,r16,8
  801028:	00000306 	br	801038 <_malloc_r+0x258>
  80102c:	00800304 	movi	r2,12
  801030:	90800015 	stw	r2,0(r18)
  801034:	0005883a 	mov	r2,zero
  801038:	dfc00917 	ldw	ra,36(sp)
  80103c:	df000817 	ldw	fp,32(sp)
  801040:	ddc00717 	ldw	r23,28(sp)
  801044:	dd800617 	ldw	r22,24(sp)
  801048:	dd400517 	ldw	r21,20(sp)
  80104c:	dd000417 	ldw	r20,16(sp)
  801050:	dcc00317 	ldw	r19,12(sp)
  801054:	dc800217 	ldw	r18,8(sp)
  801058:	dc400117 	ldw	r17,4(sp)
  80105c:	dc000017 	ldw	r16,0(sp)
  801060:	dec00a04 	addi	sp,sp,40
  801064:	f800283a 	ret
  801068:	01008004 	movi	r4,512
  80106c:	01c01004 	movi	r7,64
  801070:	02000fc4 	movi	r8,63
  801074:	003f9306 	br	800ec4 <_malloc_r+0xe4>
  801078:	14000317 	ldw	r16,12(r2)
  80107c:	39c00084 	addi	r7,r7,2
  801080:	143f721e 	bne	r2,r16,800e4c <_malloc_r+0x6c>
  801084:	9c000417 	ldw	r16,16(r19)
  801088:	02402034 	movhi	r9,128
  80108c:	4a574c04 	addi	r9,r9,23856
  801090:	827fa11e 	bne	r16,r9,800f18 <_malloc_r+0x138>
  801094:	3807d0ba 	srai	r3,r7,2
  801098:	01000044 	movi	r4,1
  80109c:	98800117 	ldw	r2,4(r19)
  8010a0:	20c8983a 	sll	r4,r4,r3
  8010a4:	113fbb2e 	bgeu	r2,r4,800f94 <_malloc_r+0x1b4>
  8010a8:	9c000217 	ldw	r16,8(r19)
  8010ac:	00bfff04 	movi	r2,-4
  8010b0:	85400117 	ldw	r21,4(r16)
  8010b4:	a8ac703a 	and	r22,r21,r2
  8010b8:	b4400336 	bltu	r22,r17,8010c8 <_malloc_r+0x2e8>
  8010bc:	b445c83a 	sub	r2,r22,r17
  8010c0:	10c00408 	cmpgei	r3,r2,16
  8010c4:	1800541e 	bne	r3,zero,801218 <_malloc_r+0x438>
  8010c8:	00802034 	movhi	r2,128
  8010cc:	109cd017 	ldw	r2,29504(r2)
  8010d0:	00c02074 	movhi	r3,129
  8010d4:	1d637917 	ldw	r21,-29212(r3)
  8010d8:	10bfffd8 	cmpnei	r2,r2,-1
  8010dc:	85b9883a 	add	fp,r16,r22
  8010e0:	8d6b883a 	add	r21,r17,r21
  8010e4:	1000d626 	beq	r2,zero,801440 <_malloc_r+0x660>
  8010e8:	ad4403c4 	addi	r21,r21,4111
  8010ec:	00bc0004 	movi	r2,-4096
  8010f0:	a8aa703a 	and	r21,r21,r2
  8010f4:	a80b883a 	mov	r5,r21
  8010f8:	9009883a 	mov	r4,r18
  8010fc:	0801f100 	call	801f10 <_sbrk_r>
  801100:	102f883a 	mov	r23,r2
  801104:	10bfffd8 	cmpnei	r2,r2,-1
  801108:	1000a826 	beq	r2,zero,8013ac <_malloc_r+0x5cc>
  80110c:	bf00a636 	bltu	r23,fp,8013a8 <_malloc_r+0x5c8>
  801110:	00802074 	movhi	r2,129
  801114:	15238217 	ldw	r20,-29176(r2)
  801118:	ad29883a 	add	r20,r21,r20
  80111c:	15238215 	stw	r20,-29176(r2)
  801120:	a007883a 	mov	r3,r20
  801124:	e5c0ec26 	beq	fp,r23,8014d8 <_malloc_r+0x6f8>
  801128:	00802034 	movhi	r2,128
  80112c:	109cd017 	ldw	r2,29504(r2)
  801130:	10bfffd8 	cmpnei	r2,r2,-1
  801134:	1000ef26 	beq	r2,zero,8014f4 <_malloc_r+0x714>
  801138:	bf39c83a 	sub	fp,r23,fp
  80113c:	e0c7883a 	add	r3,fp,r3
  801140:	00802074 	movhi	r2,129
  801144:	10e38215 	stw	r3,-29176(r2)
  801148:	bf0001cc 	andi	fp,r23,7
  80114c:	e000c526 	beq	fp,zero,801464 <_malloc_r+0x684>
  801150:	bf2fc83a 	sub	r23,r23,fp
  801154:	bdc00204 	addi	r23,r23,8
  801158:	05040204 	movi	r20,4104
  80115c:	a729c83a 	sub	r20,r20,fp
  801160:	bd6b883a 	add	r21,r23,r21
  801164:	a569c83a 	sub	r20,r20,r21
  801168:	a503ffcc 	andi	r20,r20,4095
  80116c:	a00b883a 	mov	r5,r20
  801170:	9009883a 	mov	r4,r18
  801174:	0801f100 	call	801f10 <_sbrk_r>
  801178:	10ffffe0 	cmpeqi	r3,r2,-1
  80117c:	1800f31e 	bne	r3,zero,80154c <_malloc_r+0x76c>
  801180:	15c5c83a 	sub	r2,r2,r23
  801184:	152b883a 	add	r21,r2,r20
  801188:	00802074 	movhi	r2,129
  80118c:	11638217 	ldw	r5,-29176(r2)
  801190:	9dc00215 	stw	r23,8(r19)
  801194:	ad400054 	ori	r21,r21,1
  801198:	a169883a 	add	r20,r20,r5
  80119c:	15238215 	stw	r20,-29176(r2)
  8011a0:	bd400115 	stw	r21,4(r23)
  8011a4:	84c0d626 	beq	r16,r19,801500 <_malloc_r+0x720>
  8011a8:	b0800428 	cmpgeui	r2,r22,16
  8011ac:	1000d626 	beq	r2,zero,801508 <_malloc_r+0x728>
  8011b0:	80c00117 	ldw	r3,4(r16)
  8011b4:	013ffe04 	movi	r4,-8
  8011b8:	b0bffd04 	addi	r2,r22,-12
  8011bc:	1104703a 	and	r2,r2,r4
  8011c0:	18c0004c 	andi	r3,r3,1
  8011c4:	1886b03a 	or	r3,r3,r2
  8011c8:	80c00115 	stw	r3,4(r16)
  8011cc:	01000144 	movi	r4,5
  8011d0:	8087883a 	add	r3,r16,r2
  8011d4:	19000115 	stw	r4,4(r3)
  8011d8:	19000215 	stw	r4,8(r3)
  8011dc:	10800428 	cmpgeui	r2,r2,16
  8011e0:	1000df1e 	bne	r2,zero,801560 <_malloc_r+0x780>
  8011e4:	bd400117 	ldw	r21,4(r23)
  8011e8:	b821883a 	mov	r16,r23
  8011ec:	00802074 	movhi	r2,129
  8011f0:	10a37817 	ldw	r2,-29216(r2)
  8011f4:	1500022e 	bgeu	r2,r20,801200 <_malloc_r+0x420>
  8011f8:	00802074 	movhi	r2,129
  8011fc:	15237815 	stw	r20,-29216(r2)
  801200:	00802074 	movhi	r2,129
  801204:	10a37717 	ldw	r2,-29220(r2)
  801208:	15006a2e 	bgeu	r2,r20,8013b4 <_malloc_r+0x5d4>
  80120c:	00802074 	movhi	r2,129
  801210:	15237715 	stw	r20,-29220(r2)
  801214:	00006706 	br	8013b4 <_malloc_r+0x5d4>
  801218:	88c00054 	ori	r3,r17,1
  80121c:	80c00115 	stw	r3,4(r16)
  801220:	8463883a 	add	r17,r16,r17
  801224:	10800054 	ori	r2,r2,1
  801228:	9c400215 	stw	r17,8(r19)
  80122c:	88800115 	stw	r2,4(r17)
  801230:	9009883a 	mov	r4,r18
  801234:	08037000 	call	803700 <__malloc_unlock>
  801238:	80800204 	addi	r2,r16,8
  80123c:	003f7e06 	br	801038 <_malloc_r+0x258>
  801240:	81000317 	ldw	r4,12(r16)
  801244:	003f0506 	br	800e5c <_malloc_r+0x7c>
  801248:	1006d27a 	srli	r3,r2,9
  80124c:	19000168 	cmpgeui	r4,r3,5
  801250:	20005026 	beq	r4,zero,801394 <_malloc_r+0x5b4>
  801254:	19000568 	cmpgeui	r4,r3,21
  801258:	20008c1e 	bne	r4,zero,80148c <_malloc_r+0x6ac>
  80125c:	19401704 	addi	r5,r3,92
  801260:	280a90fa 	slli	r5,r5,3
  801264:	190016c4 	addi	r4,r3,91
  801268:	994b883a 	add	r5,r19,r5
  80126c:	28c00017 	ldw	r3,0(r5)
  801270:	297ffe04 	addi	r5,r5,-8
  801274:	28c07426 	beq	r5,r3,801448 <_malloc_r+0x668>
  801278:	01bfff04 	movi	r6,-4
  80127c:	19000117 	ldw	r4,4(r3)
  801280:	2188703a 	and	r4,r4,r6
  801284:	1100022e 	bgeu	r2,r4,801290 <_malloc_r+0x4b0>
  801288:	18c00217 	ldw	r3,8(r3)
  80128c:	28fffb1e 	bne	r5,r3,80127c <_malloc_r+0x49c>
  801290:	19400317 	ldw	r5,12(r3)
  801294:	98800117 	ldw	r2,4(r19)
  801298:	81400315 	stw	r5,12(r16)
  80129c:	80c00215 	stw	r3,8(r16)
  8012a0:	2c000215 	stw	r16,8(r5)
  8012a4:	1c000315 	stw	r16,12(r3)
  8012a8:	003f3606 	br	800f84 <_malloc_r+0x1a4>
  8012ac:	10c00568 	cmpgeui	r3,r2,21
  8012b0:	18004a26 	beq	r3,zero,8013dc <_malloc_r+0x5fc>
  8012b4:	10c01568 	cmpgeui	r3,r2,85
  8012b8:	18007b1e 	bne	r3,zero,8014a8 <_malloc_r+0x6c8>
  8012bc:	8804d33a 	srli	r2,r17,12
  8012c0:	11c01bc4 	addi	r7,r2,111
  8012c4:	380890fa 	slli	r4,r7,3
  8012c8:	12001b84 	addi	r8,r2,110
  8012cc:	003efd06 	br	800ec4 <_malloc_r+0xe4>
  8012d0:	63000044 	addi	r12,r12,1
  8012d4:	608000cc 	andi	r2,r12,3
  8012d8:	42000204 	addi	r8,r8,8
  8012dc:	103f3e1e 	bne	r2,zero,800fd8 <_malloc_r+0x1f8>
  8012e0:	00004506 	br	8013f8 <_malloc_r+0x618>
  8012e4:	81000217 	ldw	r4,8(r16)
  8012e8:	89800054 	ori	r6,r17,1
  8012ec:	81800115 	stw	r6,4(r16)
  8012f0:	20800315 	stw	r2,12(r4)
  8012f4:	11000215 	stw	r4,8(r2)
  8012f8:	8463883a 	add	r17,r16,r17
  8012fc:	9c400515 	stw	r17,20(r19)
  801300:	9c400415 	stw	r17,16(r19)
  801304:	28800054 	ori	r2,r5,1
  801308:	88800115 	stw	r2,4(r17)
  80130c:	8a400315 	stw	r9,12(r17)
  801310:	8a400215 	stw	r9,8(r17)
  801314:	80c7883a 	add	r3,r16,r3
  801318:	19400015 	stw	r5,0(r3)
  80131c:	9009883a 	mov	r4,r18
  801320:	08037000 	call	803700 <__malloc_unlock>
  801324:	80800204 	addi	r2,r16,8
  801328:	003f4306 	br	801038 <_malloc_r+0x258>
  80132c:	880ed0fa 	srli	r7,r17,3
  801330:	88800204 	addi	r2,r17,8
  801334:	003ebf06 	br	800e34 <_malloc_r+0x54>
  801338:	8085883a 	add	r2,r16,r2
  80133c:	10c00117 	ldw	r3,4(r2)
  801340:	9009883a 	mov	r4,r18
  801344:	18c00054 	ori	r3,r3,1
  801348:	10c00115 	stw	r3,4(r2)
  80134c:	08037000 	call	803700 <__malloc_unlock>
  801350:	80800204 	addi	r2,r16,8
  801354:	003f3806 	br	801038 <_malloc_r+0x258>
  801358:	89000054 	ori	r4,r17,1
  80135c:	81000115 	stw	r4,4(r16)
  801360:	8463883a 	add	r17,r16,r17
  801364:	9c400515 	stw	r17,20(r19)
  801368:	9c400415 	stw	r17,16(r19)
  80136c:	19000054 	ori	r4,r3,1
  801370:	89000115 	stw	r4,4(r17)
  801374:	8085883a 	add	r2,r16,r2
  801378:	8a400315 	stw	r9,12(r17)
  80137c:	8a400215 	stw	r9,8(r17)
  801380:	10c00015 	stw	r3,0(r2)
  801384:	9009883a 	mov	r4,r18
  801388:	08037000 	call	803700 <__malloc_unlock>
  80138c:	80800204 	addi	r2,r16,8
  801390:	003f2906 	br	801038 <_malloc_r+0x258>
  801394:	1006d1ba 	srli	r3,r2,6
  801398:	19400e44 	addi	r5,r3,57
  80139c:	280a90fa 	slli	r5,r5,3
  8013a0:	19000e04 	addi	r4,r3,56
  8013a4:	003fb006 	br	801268 <_malloc_r+0x488>
  8013a8:	84c04626 	beq	r16,r19,8014c4 <_malloc_r+0x6e4>
  8013ac:	9c000217 	ldw	r16,8(r19)
  8013b0:	85400117 	ldw	r21,4(r16)
  8013b4:	00bfff04 	movi	r2,-4
  8013b8:	a8aa703a 	and	r21,r21,r2
  8013bc:	ac45c83a 	sub	r2,r21,r17
  8013c0:	ac400236 	bltu	r21,r17,8013cc <_malloc_r+0x5ec>
  8013c4:	10c00408 	cmpgei	r3,r2,16
  8013c8:	183f931e 	bne	r3,zero,801218 <_malloc_r+0x438>
  8013cc:	9009883a 	mov	r4,r18
  8013d0:	08037000 	call	803700 <__malloc_unlock>
  8013d4:	0005883a 	mov	r2,zero
  8013d8:	003f1706 	br	801038 <_malloc_r+0x258>
  8013dc:	11c01704 	addi	r7,r2,92
  8013e0:	380890fa 	slli	r4,r7,3
  8013e4:	120016c4 	addi	r8,r2,91
  8013e8:	003eb606 	br	800ec4 <_malloc_r+0xe4>
  8013ec:	58800217 	ldw	r2,8(r11)
  8013f0:	39ffffc4 	addi	r7,r7,-1
  8013f4:	12c0701e 	bne	r2,r11,8015b8 <_malloc_r+0x7d8>
  8013f8:	388000cc 	andi	r2,r7,3
  8013fc:	5afffe04 	addi	r11,r11,-8
  801400:	103ffa1e 	bne	r2,zero,8013ec <_malloc_r+0x60c>
  801404:	98c00117 	ldw	r3,4(r19)
  801408:	0104303a 	nor	r2,zero,r4
  80140c:	10c4703a 	and	r2,r2,r3
  801410:	98800115 	stw	r2,4(r19)
  801414:	2109883a 	add	r4,r4,r4
  801418:	113f2336 	bltu	r2,r4,8010a8 <_malloc_r+0x2c8>
  80141c:	203f2226 	beq	r4,zero,8010a8 <_malloc_r+0x2c8>
  801420:	2086703a 	and	r3,r4,r2
  801424:	1800041e 	bne	r3,zero,801438 <_malloc_r+0x658>
  801428:	2109883a 	add	r4,r4,r4
  80142c:	2086703a 	and	r3,r4,r2
  801430:	63000104 	addi	r12,r12,4
  801434:	183ffc26 	beq	r3,zero,801428 <_malloc_r+0x648>
  801438:	600f883a 	mov	r7,r12
  80143c:	003ee206 	br	800fc8 <_malloc_r+0x1e8>
  801440:	ad400404 	addi	r21,r21,16
  801444:	003f2b06 	br	8010f4 <_malloc_r+0x314>
  801448:	2009d0ba 	srai	r4,r4,2
  80144c:	00800044 	movi	r2,1
  801450:	99800117 	ldw	r6,4(r19)
  801454:	1104983a 	sll	r2,r2,r4
  801458:	1184b03a 	or	r2,r2,r6
  80145c:	98800115 	stw	r2,4(r19)
  801460:	003f8d06 	br	801298 <_malloc_r+0x4b8>
  801464:	bd69883a 	add	r20,r23,r21
  801468:	0529c83a 	sub	r20,zero,r20
  80146c:	a503ffcc 	andi	r20,r20,4095
  801470:	a00b883a 	mov	r5,r20
  801474:	9009883a 	mov	r4,r18
  801478:	0801f100 	call	801f10 <_sbrk_r>
  80147c:	10ffffe0 	cmpeqi	r3,r2,-1
  801480:	183f3f26 	beq	r3,zero,801180 <_malloc_r+0x3a0>
  801484:	0029883a 	mov	r20,zero
  801488:	003f3f06 	br	801188 <_malloc_r+0x3a8>
  80148c:	19001568 	cmpgeui	r4,r3,85
  801490:	2000201e 	bne	r4,zero,801514 <_malloc_r+0x734>
  801494:	1006d33a 	srli	r3,r2,12
  801498:	19401bc4 	addi	r5,r3,111
  80149c:	280a90fa 	slli	r5,r5,3
  8014a0:	19001b84 	addi	r4,r3,110
  8014a4:	003f7006 	br	801268 <_malloc_r+0x488>
  8014a8:	10c05568 	cmpgeui	r3,r2,341
  8014ac:	1800201e 	bne	r3,zero,801530 <_malloc_r+0x750>
  8014b0:	8804d3fa 	srli	r2,r17,15
  8014b4:	11c01e04 	addi	r7,r2,120
  8014b8:	380890fa 	slli	r4,r7,3
  8014bc:	12001dc4 	addi	r8,r2,119
  8014c0:	003e8006 	br	800ec4 <_malloc_r+0xe4>
  8014c4:	00802074 	movhi	r2,129
  8014c8:	10e38217 	ldw	r3,-29176(r2)
  8014cc:	a8c7883a 	add	r3,r21,r3
  8014d0:	10e38215 	stw	r3,-29176(r2)
  8014d4:	003f1406 	br	801128 <_malloc_r+0x348>
  8014d8:	e083ffcc 	andi	r2,fp,4095
  8014dc:	103f121e 	bne	r2,zero,801128 <_malloc_r+0x348>
  8014e0:	9c000217 	ldw	r16,8(r19)
  8014e4:	b56b883a 	add	r21,r22,r21
  8014e8:	ad400054 	ori	r21,r21,1
  8014ec:	85400115 	stw	r21,4(r16)
  8014f0:	003f3e06 	br	8011ec <_malloc_r+0x40c>
  8014f4:	00802034 	movhi	r2,128
  8014f8:	15dcd015 	stw	r23,29504(r2)
  8014fc:	003f1206 	br	801148 <_malloc_r+0x368>
  801500:	b821883a 	mov	r16,r23
  801504:	003f3906 	br	8011ec <_malloc_r+0x40c>
  801508:	00800044 	movi	r2,1
  80150c:	b8800115 	stw	r2,4(r23)
  801510:	003fae06 	br	8013cc <_malloc_r+0x5ec>
  801514:	19005568 	cmpgeui	r4,r3,341
  801518:	2000191e 	bne	r4,zero,801580 <_malloc_r+0x7a0>
  80151c:	1006d3fa 	srli	r3,r2,15
  801520:	19401e04 	addi	r5,r3,120
  801524:	280a90fa 	slli	r5,r5,3
  801528:	19001dc4 	addi	r4,r3,119
  80152c:	003f4e06 	br	801268 <_malloc_r+0x488>
  801530:	10815568 	cmpgeui	r2,r2,1365
  801534:	1000191e 	bne	r2,zero,80159c <_malloc_r+0x7bc>
  801538:	8804d4ba 	srli	r2,r17,18
  80153c:	11c01f44 	addi	r7,r2,125
  801540:	380890fa 	slli	r4,r7,3
  801544:	12001f04 	addi	r8,r2,124
  801548:	003e5e06 	br	800ec4 <_malloc_r+0xe4>
  80154c:	e73ffe04 	addi	fp,fp,-8
  801550:	af2b883a 	add	r21,r21,fp
  801554:	adebc83a 	sub	r21,r21,r23
  801558:	0029883a 	mov	r20,zero
  80155c:	003f0a06 	br	801188 <_malloc_r+0x3a8>
  801560:	81400204 	addi	r5,r16,8
  801564:	9009883a 	mov	r4,r18
  801568:	08028900 	call	802890 <_free_r>
  80156c:	9c000217 	ldw	r16,8(r19)
  801570:	00802074 	movhi	r2,129
  801574:	15238217 	ldw	r20,-29176(r2)
  801578:	85400117 	ldw	r21,4(r16)
  80157c:	003f1b06 	br	8011ec <_malloc_r+0x40c>
  801580:	18c15568 	cmpgeui	r3,r3,1365
  801584:	1800091e 	bne	r3,zero,8015ac <_malloc_r+0x7cc>
  801588:	1006d4ba 	srli	r3,r2,18
  80158c:	19401f44 	addi	r5,r3,125
  801590:	280a90fa 	slli	r5,r5,3
  801594:	19001f04 	addi	r4,r3,124
  801598:	003f3306 	br	801268 <_malloc_r+0x488>
  80159c:	0100fe04 	movi	r4,1016
  8015a0:	01c01fc4 	movi	r7,127
  8015a4:	02001f84 	movi	r8,126
  8015a8:	003e4606 	br	800ec4 <_malloc_r+0xe4>
  8015ac:	0140fe04 	movi	r5,1016
  8015b0:	01001f84 	movi	r4,126
  8015b4:	003f2c06 	br	801268 <_malloc_r+0x488>
  8015b8:	98800117 	ldw	r2,4(r19)
  8015bc:	003f9506 	br	801414 <_malloc_r+0x634>

008015c0 <memchr>:
  8015c0:	208000cc 	andi	r2,r4,3
  8015c4:	280f883a 	mov	r7,r5
  8015c8:	10000e26 	beq	r2,zero,801604 <memchr+0x44>
  8015cc:	30bfffc4 	addi	r2,r6,-1
  8015d0:	30001726 	beq	r6,zero,801630 <memchr+0x70>
  8015d4:	29803fcc 	andi	r6,r5,255
  8015d8:	00000606 	br	8015f4 <memchr+0x34>
  8015dc:	21000044 	addi	r4,r4,1
  8015e0:	20c000cc 	andi	r3,r4,3
  8015e4:	18000826 	beq	r3,zero,801608 <memchr+0x48>
  8015e8:	10bfffc4 	addi	r2,r2,-1
  8015ec:	10ffffe0 	cmpeqi	r3,r2,-1
  8015f0:	18000f1e 	bne	r3,zero,801630 <memchr+0x70>
  8015f4:	20c00003 	ldbu	r3,0(r4)
  8015f8:	19bff81e 	bne	r3,r6,8015dc <memchr+0x1c>
  8015fc:	2005883a 	mov	r2,r4
  801600:	f800283a 	ret
  801604:	3005883a 	mov	r2,r6
  801608:	10c00128 	cmpgeui	r3,r2,4
  80160c:	18000a1e 	bne	r3,zero,801638 <memchr+0x78>
  801610:	10001e26 	beq	r2,zero,80168c <memchr+0xcc>
  801614:	2087883a 	add	r3,r4,r2
  801618:	39803fcc 	andi	r6,r7,255
  80161c:	2005883a 	mov	r2,r4
  801620:	11000003 	ldbu	r4,0(r2)
  801624:	21bff626 	beq	r4,r6,801600 <memchr+0x40>
  801628:	10800044 	addi	r2,r2,1
  80162c:	18bffc1e 	bne	r3,r2,801620 <memchr+0x60>
  801630:	0005883a 	mov	r2,zero
  801634:	f800283a 	ret
  801638:	29403fcc 	andi	r5,r5,255
  80163c:	280c923a 	slli	r6,r5,8
  801640:	027fbff4 	movhi	r9,65279
  801644:	02202074 	movhi	r8,32897
  801648:	314ab03a 	or	r5,r6,r5
  80164c:	280c943a 	slli	r6,r5,16
  801650:	4a7fbfc4 	addi	r9,r9,-257
  801654:	42202004 	addi	r8,r8,-32640
  801658:	314cb03a 	or	r6,r6,r5
  80165c:	20c00017 	ldw	r3,0(r4)
  801660:	30c6f03a 	xor	r3,r6,r3
  801664:	1a4b883a 	add	r5,r3,r9
  801668:	00c6303a 	nor	r3,zero,r3
  80166c:	28c6703a 	and	r3,r5,r3
  801670:	1a06703a 	and	r3,r3,r8
  801674:	183fe71e 	bne	r3,zero,801614 <memchr+0x54>
  801678:	10bfff04 	addi	r2,r2,-4
  80167c:	10c00128 	cmpgeui	r3,r2,4
  801680:	21000104 	addi	r4,r4,4
  801684:	183ff51e 	bne	r3,zero,80165c <memchr+0x9c>
  801688:	003fe106 	br	801610 <memchr+0x50>
  80168c:	f800283a 	ret

00801690 <memcpy>:
  801690:	30c00430 	cmpltui	r3,r6,16
  801694:	2005883a 	mov	r2,r4
  801698:	18002d1e 	bne	r3,zero,801750 <memcpy+0xc0>
  80169c:	2906b03a 	or	r3,r5,r4
  8016a0:	18c000cc 	andi	r3,r3,3
  8016a4:	1800351e 	bne	r3,zero,80177c <memcpy+0xec>
  8016a8:	32fffc04 	addi	r11,r6,-16
  8016ac:	5816d13a 	srli	r11,r11,4
  8016b0:	280f883a 	mov	r7,r5
  8016b4:	2007883a 	mov	r3,r4
  8016b8:	5ac00044 	addi	r11,r11,1
  8016bc:	5816913a 	slli	r11,r11,4
  8016c0:	22d5883a 	add	r10,r4,r11
  8016c4:	39000117 	ldw	r4,4(r7)
  8016c8:	3a400017 	ldw	r9,0(r7)
  8016cc:	3a000217 	ldw	r8,8(r7)
  8016d0:	19000115 	stw	r4,4(r3)
  8016d4:	39000317 	ldw	r4,12(r7)
  8016d8:	1a400015 	stw	r9,0(r3)
  8016dc:	1a000215 	stw	r8,8(r3)
  8016e0:	19000315 	stw	r4,12(r3)
  8016e4:	18c00404 	addi	r3,r3,16
  8016e8:	39c00404 	addi	r7,r7,16
  8016ec:	50fff51e 	bne	r10,r3,8016c4 <memcpy+0x34>
  8016f0:	3100030c 	andi	r4,r6,12
  8016f4:	2acb883a 	add	r5,r5,r11
  8016f8:	320003cc 	andi	r8,r6,15
  8016fc:	20002226 	beq	r4,zero,801788 <memcpy+0xf8>
  801700:	280f883a 	mov	r7,r5
  801704:	1813883a 	mov	r9,r3
  801708:	39c00104 	addi	r7,r7,4
  80170c:	3abfff17 	ldw	r10,-4(r7)
  801710:	41c9c83a 	sub	r4,r8,r7
  801714:	2909883a 	add	r4,r5,r4
  801718:	4a800015 	stw	r10,0(r9)
  80171c:	21000128 	cmpgeui	r4,r4,4
  801720:	4a400104 	addi	r9,r9,4
  801724:	203ff81e 	bne	r4,zero,801708 <memcpy+0x78>
  801728:	413fff04 	addi	r4,r8,-4
  80172c:	2008d0ba 	srli	r4,r4,2
  801730:	318000cc 	andi	r6,r6,3
  801734:	31ffffc4 	addi	r7,r6,-1
  801738:	21000044 	addi	r4,r4,1
  80173c:	200890ba 	slli	r4,r4,2
  801740:	1907883a 	add	r3,r3,r4
  801744:	290b883a 	add	r5,r5,r4
  801748:	3000041e 	bne	r6,zero,80175c <memcpy+0xcc>
  80174c:	f800283a 	ret
  801750:	2007883a 	mov	r3,r4
  801754:	31ffffc4 	addi	r7,r6,-1
  801758:	303ffc26 	beq	r6,zero,80174c <memcpy+0xbc>
  80175c:	39c00044 	addi	r7,r7,1
  801760:	19cf883a 	add	r7,r3,r7
  801764:	29800003 	ldbu	r6,0(r5)
  801768:	18c00044 	addi	r3,r3,1
  80176c:	29400044 	addi	r5,r5,1
  801770:	19bfffc5 	stb	r6,-1(r3)
  801774:	38fffb1e 	bne	r7,r3,801764 <memcpy+0xd4>
  801778:	f800283a 	ret
  80177c:	31ffffc4 	addi	r7,r6,-1
  801780:	2007883a 	mov	r3,r4
  801784:	003ff506 	br	80175c <memcpy+0xcc>
  801788:	400d883a 	mov	r6,r8
  80178c:	003ff106 	br	801754 <memcpy+0xc4>

00801790 <memmove>:
  801790:	2005883a 	mov	r2,r4
  801794:	29000a2e 	bgeu	r5,r4,8017c0 <memmove+0x30>
  801798:	2989883a 	add	r4,r5,r6
  80179c:	1100082e 	bgeu	r2,r4,8017c0 <memmove+0x30>
  8017a0:	1187883a 	add	r3,r2,r6
  8017a4:	30003e26 	beq	r6,zero,8018a0 <memmove+0x110>
  8017a8:	217fffc3 	ldbu	r5,-1(r4)
  8017ac:	18ffffc4 	addi	r3,r3,-1
  8017b0:	213fffc4 	addi	r4,r4,-1
  8017b4:	19400005 	stb	r5,0(r3)
  8017b8:	10fffb1e 	bne	r2,r3,8017a8 <memmove+0x18>
  8017bc:	f800283a 	ret
  8017c0:	30c00430 	cmpltui	r3,r6,16
  8017c4:	18000b26 	beq	r3,zero,8017f4 <memmove+0x64>
  8017c8:	1007883a 	mov	r3,r2
  8017cc:	31ffffc4 	addi	r7,r6,-1
  8017d0:	30003726 	beq	r6,zero,8018b0 <memmove+0x120>
  8017d4:	39c00044 	addi	r7,r7,1
  8017d8:	29cf883a 	add	r7,r5,r7
  8017dc:	29800003 	ldbu	r6,0(r5)
  8017e0:	29400044 	addi	r5,r5,1
  8017e4:	18c00044 	addi	r3,r3,1
  8017e8:	19bfffc5 	stb	r6,-1(r3)
  8017ec:	29fffb1e 	bne	r5,r7,8017dc <memmove+0x4c>
  8017f0:	f800283a 	ret
  8017f4:	2886b03a 	or	r3,r5,r2
  8017f8:	18c000cc 	andi	r3,r3,3
  8017fc:	1800291e 	bne	r3,zero,8018a4 <memmove+0x114>
  801800:	327ffc04 	addi	r9,r6,-16
  801804:	4812d13a 	srli	r9,r9,4
  801808:	280f883a 	mov	r7,r5
  80180c:	1007883a 	mov	r3,r2
  801810:	4a400044 	addi	r9,r9,1
  801814:	4812913a 	slli	r9,r9,4
  801818:	1251883a 	add	r8,r2,r9
  80181c:	39000017 	ldw	r4,0(r7)
  801820:	39c00404 	addi	r7,r7,16
  801824:	18c00404 	addi	r3,r3,16
  801828:	193ffc15 	stw	r4,-16(r3)
  80182c:	393ffd17 	ldw	r4,-12(r7)
  801830:	193ffd15 	stw	r4,-12(r3)
  801834:	393ffe17 	ldw	r4,-8(r7)
  801838:	193ffe15 	stw	r4,-8(r3)
  80183c:	393fff17 	ldw	r4,-4(r7)
  801840:	193fff15 	stw	r4,-4(r3)
  801844:	40fff51e 	bne	r8,r3,80181c <memmove+0x8c>
  801848:	3100030c 	andi	r4,r6,12
  80184c:	2a4b883a 	add	r5,r5,r9
  801850:	320003cc 	andi	r8,r6,15
  801854:	20001726 	beq	r4,zero,8018b4 <memmove+0x124>
  801858:	2813883a 	mov	r9,r5
  80185c:	180f883a 	mov	r7,r3
  801860:	4a800017 	ldw	r10,0(r9)
  801864:	39c00104 	addi	r7,r7,4
  801868:	41c9c83a 	sub	r4,r8,r7
  80186c:	1909883a 	add	r4,r3,r4
  801870:	21000128 	cmpgeui	r4,r4,4
  801874:	3abfff15 	stw	r10,-4(r7)
  801878:	4a400104 	addi	r9,r9,4
  80187c:	203ff81e 	bne	r4,zero,801860 <memmove+0xd0>
  801880:	413fff04 	addi	r4,r8,-4
  801884:	2008d0ba 	srli	r4,r4,2
  801888:	318000cc 	andi	r6,r6,3
  80188c:	21000044 	addi	r4,r4,1
  801890:	200890ba 	slli	r4,r4,2
  801894:	1907883a 	add	r3,r3,r4
  801898:	290b883a 	add	r5,r5,r4
  80189c:	003fcb06 	br	8017cc <memmove+0x3c>
  8018a0:	f800283a 	ret
  8018a4:	31ffffc4 	addi	r7,r6,-1
  8018a8:	1007883a 	mov	r3,r2
  8018ac:	003fc906 	br	8017d4 <memmove+0x44>
  8018b0:	f800283a 	ret
  8018b4:	400d883a 	mov	r6,r8
  8018b8:	003fc406 	br	8017cc <memmove+0x3c>

008018bc <memset>:
  8018bc:	20c000cc 	andi	r3,r4,3
  8018c0:	2005883a 	mov	r2,r4
  8018c4:	18003626 	beq	r3,zero,8019a0 <memset+0xe4>
  8018c8:	31ffffc4 	addi	r7,r6,-1
  8018cc:	30003326 	beq	r6,zero,80199c <memset+0xe0>
  8018d0:	2811883a 	mov	r8,r5
  8018d4:	2007883a 	mov	r3,r4
  8018d8:	00000306 	br	8018e8 <memset+0x2c>
  8018dc:	39ffffc4 	addi	r7,r7,-1
  8018e0:	39bfffe0 	cmpeqi	r6,r7,-1
  8018e4:	30002d1e 	bne	r6,zero,80199c <memset+0xe0>
  8018e8:	18c00044 	addi	r3,r3,1
  8018ec:	198000cc 	andi	r6,r3,3
  8018f0:	1a3fffc5 	stb	r8,-1(r3)
  8018f4:	303ff91e 	bne	r6,zero,8018dc <memset+0x20>
  8018f8:	39000130 	cmpltui	r4,r7,4
  8018fc:	2000221e 	bne	r4,zero,801988 <memset+0xcc>
  801900:	29003fcc 	andi	r4,r5,255
  801904:	200c923a 	slli	r6,r4,8
  801908:	3a000430 	cmpltui	r8,r7,16
  80190c:	3108b03a 	or	r4,r6,r4
  801910:	200c943a 	slli	r6,r4,16
  801914:	310cb03a 	or	r6,r6,r4
  801918:	40000e1e 	bne	r8,zero,801954 <memset+0x98>
  80191c:	393ffc04 	addi	r4,r7,-16
  801920:	2008d13a 	srli	r4,r4,4
  801924:	21000044 	addi	r4,r4,1
  801928:	2008913a 	slli	r4,r4,4
  80192c:	1909883a 	add	r4,r3,r4
  801930:	19800015 	stw	r6,0(r3)
  801934:	19800115 	stw	r6,4(r3)
  801938:	19800215 	stw	r6,8(r3)
  80193c:	19800315 	stw	r6,12(r3)
  801940:	18c00404 	addi	r3,r3,16
  801944:	20fffa1e 	bne	r4,r3,801930 <memset+0x74>
  801948:	3900030c 	andi	r4,r7,12
  80194c:	39c003cc 	andi	r7,r7,15
  801950:	20000d26 	beq	r4,zero,801988 <memset+0xcc>
  801954:	1811883a 	mov	r8,r3
  801958:	42000104 	addi	r8,r8,4
  80195c:	3a09c83a 	sub	r4,r7,r8
  801960:	1909883a 	add	r4,r3,r4
  801964:	21000128 	cmpgeui	r4,r4,4
  801968:	41bfff15 	stw	r6,-4(r8)
  80196c:	203ffa1e 	bne	r4,zero,801958 <memset+0x9c>
  801970:	393fff04 	addi	r4,r7,-4
  801974:	2008d0ba 	srli	r4,r4,2
  801978:	39c000cc 	andi	r7,r7,3
  80197c:	21000044 	addi	r4,r4,1
  801980:	200890ba 	slli	r4,r4,2
  801984:	1907883a 	add	r3,r3,r4
  801988:	38000426 	beq	r7,zero,80199c <memset+0xe0>
  80198c:	19cf883a 	add	r7,r3,r7
  801990:	18c00044 	addi	r3,r3,1
  801994:	197fffc5 	stb	r5,-1(r3)
  801998:	38fffd1e 	bne	r7,r3,801990 <memset+0xd4>
  80199c:	f800283a 	ret
  8019a0:	2007883a 	mov	r3,r4
  8019a4:	300f883a 	mov	r7,r6
  8019a8:	003fd306 	br	8018f8 <memset+0x3c>

008019ac <_realloc_r>:
  8019ac:	defff504 	addi	sp,sp,-44
  8019b0:	dc800315 	stw	r18,12(sp)
  8019b4:	dfc00a15 	stw	ra,40(sp)
  8019b8:	df000915 	stw	fp,36(sp)
  8019bc:	ddc00815 	stw	r23,32(sp)
  8019c0:	dd800715 	stw	r22,28(sp)
  8019c4:	dd400615 	stw	r21,24(sp)
  8019c8:	dd000515 	stw	r20,20(sp)
  8019cc:	dcc00415 	stw	r19,16(sp)
  8019d0:	dc400215 	stw	r17,8(sp)
  8019d4:	dc000115 	stw	r16,4(sp)
  8019d8:	3025883a 	mov	r18,r6
  8019dc:	28008b26 	beq	r5,zero,801c0c <_realloc_r+0x260>
  8019e0:	2821883a 	mov	r16,r5
  8019e4:	2027883a 	mov	r19,r4
  8019e8:	944002c4 	addi	r17,r18,11
  8019ec:	08036dc0 	call	8036dc <__malloc_lock>
  8019f0:	888005f0 	cmpltui	r2,r17,23
  8019f4:	1000521e 	bne	r2,zero,801b40 <_realloc_r+0x194>
  8019f8:	017ffe04 	movi	r5,-8
  8019fc:	8962703a 	and	r17,r17,r5
  801a00:	8807883a 	mov	r3,r17
  801a04:	88005116 	blt	r17,zero,801b4c <_realloc_r+0x1a0>
  801a08:	8c805036 	bltu	r17,r18,801b4c <_realloc_r+0x1a0>
  801a0c:	80bfff17 	ldw	r2,-4(r16)
  801a10:	017fff04 	movi	r5,-4
  801a14:	857ffe04 	addi	r21,r16,-8
  801a18:	1168703a 	and	r20,r2,r5
  801a1c:	ad2d883a 	add	r22,r21,r20
  801a20:	a0c0390e 	bge	r20,r3,801b08 <_realloc_r+0x15c>
  801a24:	07002034 	movhi	fp,128
  801a28:	e7174a04 	addi	fp,fp,23848
  801a2c:	e2000217 	ldw	r8,8(fp)
  801a30:	b1000117 	ldw	r4,4(r22)
  801a34:	45808e26 	beq	r8,r22,801c70 <_realloc_r+0x2c4>
  801a38:	01bfff84 	movi	r6,-2
  801a3c:	218c703a 	and	r6,r4,r6
  801a40:	b18d883a 	add	r6,r22,r6
  801a44:	31800117 	ldw	r6,4(r6)
  801a48:	3180004c 	andi	r6,r6,1
  801a4c:	30004f1e 	bne	r6,zero,801b8c <_realloc_r+0x1e0>
  801a50:	2148703a 	and	r4,r4,r5
  801a54:	a10b883a 	add	r5,r20,r4
  801a58:	28c0bf0e 	bge	r5,r3,801d58 <_realloc_r+0x3ac>
  801a5c:	1080004c 	andi	r2,r2,1
  801a60:	10004c1e 	bne	r2,zero,801b94 <_realloc_r+0x1e8>
  801a64:	81fffe17 	ldw	r7,-8(r16)
  801a68:	00bfff04 	movi	r2,-4
  801a6c:	a9cfc83a 	sub	r7,r21,r7
  801a70:	39400117 	ldw	r5,4(r7)
  801a74:	288a703a 	and	r5,r5,r2
  801a78:	b0000426 	beq	r22,zero,801a8c <_realloc_r+0xe0>
  801a7c:	a16f883a 	add	r23,r20,r5
  801a80:	b92f883a 	add	r23,r23,r4
  801a84:	4580bf26 	beq	r8,r22,801d84 <_realloc_r+0x3d8>
  801a88:	b8c0930e 	bge	r23,r3,801cd8 <_realloc_r+0x32c>
  801a8c:	38004126 	beq	r7,zero,801b94 <_realloc_r+0x1e8>
  801a90:	a16f883a 	add	r23,r20,r5
  801a94:	b8c03f16 	blt	r23,r3,801b94 <_realloc_r+0x1e8>
  801a98:	38800317 	ldw	r2,12(r7)
  801a9c:	38c00217 	ldw	r3,8(r7)
  801aa0:	a1bfff04 	addi	r6,r20,-4
  801aa4:	31400968 	cmpgeui	r5,r6,37
  801aa8:	18800315 	stw	r2,12(r3)
  801aac:	10c00215 	stw	r3,8(r2)
  801ab0:	39000204 	addi	r4,r7,8
  801ab4:	3ded883a 	add	r22,r7,r23
  801ab8:	2800941e 	bne	r5,zero,801d0c <_realloc_r+0x360>
  801abc:	30800530 	cmpltui	r2,r6,20
  801ac0:	80c00017 	ldw	r3,0(r16)
  801ac4:	1000df1e 	bne	r2,zero,801e44 <_realloc_r+0x498>
  801ac8:	38c00215 	stw	r3,8(r7)
  801acc:	80c00117 	ldw	r3,4(r16)
  801ad0:	30800728 	cmpgeui	r2,r6,28
  801ad4:	38c00315 	stw	r3,12(r7)
  801ad8:	1000dc1e 	bne	r2,zero,801e4c <_realloc_r+0x4a0>
  801adc:	80c00217 	ldw	r3,8(r16)
  801ae0:	38800404 	addi	r2,r7,16
  801ae4:	84000204 	addi	r16,r16,8
  801ae8:	10c00015 	stw	r3,0(r2)
  801aec:	80c00117 	ldw	r3,4(r16)
  801af0:	b829883a 	mov	r20,r23
  801af4:	382b883a 	mov	r21,r7
  801af8:	10c00115 	stw	r3,4(r2)
  801afc:	80c00217 	ldw	r3,8(r16)
  801b00:	2021883a 	mov	r16,r4
  801b04:	10c00215 	stw	r3,8(r2)
  801b08:	a9800117 	ldw	r6,4(r21)
  801b0c:	a445c83a 	sub	r2,r20,r17
  801b10:	10c00430 	cmpltui	r3,r2,16
  801b14:	3180004c 	andi	r6,r6,1
  801b18:	18004926 	beq	r3,zero,801c40 <_realloc_r+0x294>
  801b1c:	a18cb03a 	or	r6,r20,r6
  801b20:	a9800115 	stw	r6,4(r21)
  801b24:	b0800117 	ldw	r2,4(r22)
  801b28:	10800054 	ori	r2,r2,1
  801b2c:	b0800115 	stw	r2,4(r22)
  801b30:	9809883a 	mov	r4,r19
  801b34:	08037000 	call	803700 <__malloc_unlock>
  801b38:	8025883a 	mov	r18,r16
  801b3c:	00000606 	br	801b58 <_realloc_r+0x1ac>
  801b40:	04400404 	movi	r17,16
  801b44:	00c00404 	movi	r3,16
  801b48:	8cbfb02e 	bgeu	r17,r18,801a0c <_realloc_r+0x60>
  801b4c:	00800304 	movi	r2,12
  801b50:	98800015 	stw	r2,0(r19)
  801b54:	0025883a 	mov	r18,zero
  801b58:	9005883a 	mov	r2,r18
  801b5c:	dfc00a17 	ldw	ra,40(sp)
  801b60:	df000917 	ldw	fp,36(sp)
  801b64:	ddc00817 	ldw	r23,32(sp)
  801b68:	dd800717 	ldw	r22,28(sp)
  801b6c:	dd400617 	ldw	r21,24(sp)
  801b70:	dd000517 	ldw	r20,20(sp)
  801b74:	dcc00417 	ldw	r19,16(sp)
  801b78:	dc800317 	ldw	r18,12(sp)
  801b7c:	dc400217 	ldw	r17,8(sp)
  801b80:	dc000117 	ldw	r16,4(sp)
  801b84:	dec00b04 	addi	sp,sp,44
  801b88:	f800283a 	ret
  801b8c:	1080004c 	andi	r2,r2,1
  801b90:	10006c26 	beq	r2,zero,801d44 <_realloc_r+0x398>
  801b94:	900b883a 	mov	r5,r18
  801b98:	9809883a 	mov	r4,r19
  801b9c:	0800de00 	call	800de0 <_malloc_r>
  801ba0:	1025883a 	mov	r18,r2
  801ba4:	10001626 	beq	r2,zero,801c00 <_realloc_r+0x254>
  801ba8:	80bfff17 	ldw	r2,-4(r16)
  801bac:	013fff84 	movi	r4,-2
  801bb0:	90fffe04 	addi	r3,r18,-8
  801bb4:	1104703a 	and	r2,r2,r4
  801bb8:	a885883a 	add	r2,r21,r2
  801bbc:	10c05b26 	beq	r2,r3,801d2c <_realloc_r+0x380>
  801bc0:	a1bfff04 	addi	r6,r20,-4
  801bc4:	30800968 	cmpgeui	r2,r6,37
  801bc8:	10006a1e 	bne	r2,zero,801d74 <_realloc_r+0x3c8>
  801bcc:	30800530 	cmpltui	r2,r6,20
  801bd0:	81000017 	ldw	r4,0(r16)
  801bd4:	10003726 	beq	r2,zero,801cb4 <_realloc_r+0x308>
  801bd8:	9005883a 	mov	r2,r18
  801bdc:	8007883a 	mov	r3,r16
  801be0:	11000015 	stw	r4,0(r2)
  801be4:	19000117 	ldw	r4,4(r3)
  801be8:	11000115 	stw	r4,4(r2)
  801bec:	18c00217 	ldw	r3,8(r3)
  801bf0:	10c00215 	stw	r3,8(r2)
  801bf4:	800b883a 	mov	r5,r16
  801bf8:	9809883a 	mov	r4,r19
  801bfc:	08028900 	call	802890 <_free_r>
  801c00:	9809883a 	mov	r4,r19
  801c04:	08037000 	call	803700 <__malloc_unlock>
  801c08:	003fd306 	br	801b58 <_realloc_r+0x1ac>
  801c0c:	300b883a 	mov	r5,r6
  801c10:	dfc00a17 	ldw	ra,40(sp)
  801c14:	df000917 	ldw	fp,36(sp)
  801c18:	ddc00817 	ldw	r23,32(sp)
  801c1c:	dd800717 	ldw	r22,28(sp)
  801c20:	dd400617 	ldw	r21,24(sp)
  801c24:	dd000517 	ldw	r20,20(sp)
  801c28:	dcc00417 	ldw	r19,16(sp)
  801c2c:	dc800317 	ldw	r18,12(sp)
  801c30:	dc400217 	ldw	r17,8(sp)
  801c34:	dc000117 	ldw	r16,4(sp)
  801c38:	dec00b04 	addi	sp,sp,44
  801c3c:	0800de01 	jmpi	800de0 <_malloc_r>
  801c40:	344cb03a 	or	r6,r6,r17
  801c44:	a9800115 	stw	r6,4(r21)
  801c48:	ac4b883a 	add	r5,r21,r17
  801c4c:	10800054 	ori	r2,r2,1
  801c50:	28800115 	stw	r2,4(r5)
  801c54:	b0800117 	ldw	r2,4(r22)
  801c58:	29400204 	addi	r5,r5,8
  801c5c:	9809883a 	mov	r4,r19
  801c60:	10800054 	ori	r2,r2,1
  801c64:	b0800115 	stw	r2,4(r22)
  801c68:	08028900 	call	802890 <_free_r>
  801c6c:	003fb006 	br	801b30 <_realloc_r+0x184>
  801c70:	2148703a 	and	r4,r4,r5
  801c74:	a10b883a 	add	r5,r20,r4
  801c78:	89800404 	addi	r6,r17,16
  801c7c:	29bf7716 	blt	r5,r6,801a5c <_realloc_r+0xb0>
  801c80:	ac6b883a 	add	r21,r21,r17
  801c84:	2c45c83a 	sub	r2,r5,r17
  801c88:	e5400215 	stw	r21,8(fp)
  801c8c:	10800054 	ori	r2,r2,1
  801c90:	a8800115 	stw	r2,4(r21)
  801c94:	80bfff17 	ldw	r2,-4(r16)
  801c98:	9809883a 	mov	r4,r19
  801c9c:	8025883a 	mov	r18,r16
  801ca0:	1080004c 	andi	r2,r2,1
  801ca4:	1462b03a 	or	r17,r2,r17
  801ca8:	847fff15 	stw	r17,-4(r16)
  801cac:	08037000 	call	803700 <__malloc_unlock>
  801cb0:	003fa906 	br	801b58 <_realloc_r+0x1ac>
  801cb4:	91000015 	stw	r4,0(r18)
  801cb8:	80c00117 	ldw	r3,4(r16)
  801cbc:	30800728 	cmpgeui	r2,r6,28
  801cc0:	90c00115 	stw	r3,4(r18)
  801cc4:	1000551e 	bne	r2,zero,801e1c <_realloc_r+0x470>
  801cc8:	81000217 	ldw	r4,8(r16)
  801ccc:	80c00204 	addi	r3,r16,8
  801cd0:	90800204 	addi	r2,r18,8
  801cd4:	003fc206 	br	801be0 <_realloc_r+0x234>
  801cd8:	b0800317 	ldw	r2,12(r22)
  801cdc:	b0c00217 	ldw	r3,8(r22)
  801ce0:	a1bfff04 	addi	r6,r20,-4
  801ce4:	31400968 	cmpgeui	r5,r6,37
  801ce8:	18800315 	stw	r2,12(r3)
  801cec:	10c00215 	stw	r3,8(r2)
  801cf0:	38c00217 	ldw	r3,8(r7)
  801cf4:	38800317 	ldw	r2,12(r7)
  801cf8:	39000204 	addi	r4,r7,8
  801cfc:	3ded883a 	add	r22,r7,r23
  801d00:	18800315 	stw	r2,12(r3)
  801d04:	10c00215 	stw	r3,8(r2)
  801d08:	283f6c26 	beq	r5,zero,801abc <_realloc_r+0x110>
  801d0c:	800b883a 	mov	r5,r16
  801d10:	d9c00015 	stw	r7,0(sp)
  801d14:	08017900 	call	801790 <memmove>
  801d18:	d9c00017 	ldw	r7,0(sp)
  801d1c:	1021883a 	mov	r16,r2
  801d20:	b829883a 	mov	r20,r23
  801d24:	382b883a 	mov	r21,r7
  801d28:	003f7706 	br	801b08 <_realloc_r+0x15c>
  801d2c:	90bfff17 	ldw	r2,-4(r18)
  801d30:	00ffff04 	movi	r3,-4
  801d34:	10c4703a 	and	r2,r2,r3
  801d38:	a0a9883a 	add	r20,r20,r2
  801d3c:	ad2d883a 	add	r22,r21,r20
  801d40:	003f7106 	br	801b08 <_realloc_r+0x15c>
  801d44:	81fffe17 	ldw	r7,-8(r16)
  801d48:	a9cfc83a 	sub	r7,r21,r7
  801d4c:	38800117 	ldw	r2,4(r7)
  801d50:	114a703a 	and	r5,r2,r5
  801d54:	003f4d06 	br	801a8c <_realloc_r+0xe0>
  801d58:	b0800317 	ldw	r2,12(r22)
  801d5c:	b0c00217 	ldw	r3,8(r22)
  801d60:	2829883a 	mov	r20,r5
  801d64:	a96d883a 	add	r22,r21,r5
  801d68:	18800315 	stw	r2,12(r3)
  801d6c:	10c00215 	stw	r3,8(r2)
  801d70:	003f6506 	br	801b08 <_realloc_r+0x15c>
  801d74:	800b883a 	mov	r5,r16
  801d78:	9009883a 	mov	r4,r18
  801d7c:	08017900 	call	801790 <memmove>
  801d80:	003f9c06 	br	801bf4 <_realloc_r+0x248>
  801d84:	88800404 	addi	r2,r17,16
  801d88:	b8bf4016 	blt	r23,r2,801a8c <_realloc_r+0xe0>
  801d8c:	38800317 	ldw	r2,12(r7)
  801d90:	38c00217 	ldw	r3,8(r7)
  801d94:	a1bfff04 	addi	r6,r20,-4
  801d98:	31000968 	cmpgeui	r4,r6,37
  801d9c:	18800315 	stw	r2,12(r3)
  801da0:	10c00215 	stw	r3,8(r2)
  801da4:	3c800204 	addi	r18,r7,8
  801da8:	20003b1e 	bne	r4,zero,801e98 <_realloc_r+0x4ec>
  801dac:	30800530 	cmpltui	r2,r6,20
  801db0:	80c00017 	ldw	r3,0(r16)
  801db4:	1000361e 	bne	r2,zero,801e90 <_realloc_r+0x4e4>
  801db8:	38c00215 	stw	r3,8(r7)
  801dbc:	80c00117 	ldw	r3,4(r16)
  801dc0:	30800728 	cmpgeui	r2,r6,28
  801dc4:	38c00315 	stw	r3,12(r7)
  801dc8:	1000401e 	bne	r2,zero,801ecc <_realloc_r+0x520>
  801dcc:	80c00217 	ldw	r3,8(r16)
  801dd0:	38800404 	addi	r2,r7,16
  801dd4:	84000204 	addi	r16,r16,8
  801dd8:	10c00015 	stw	r3,0(r2)
  801ddc:	80c00117 	ldw	r3,4(r16)
  801de0:	10c00115 	stw	r3,4(r2)
  801de4:	80c00217 	ldw	r3,8(r16)
  801de8:	10c00215 	stw	r3,8(r2)
  801dec:	3c47883a 	add	r3,r7,r17
  801df0:	bc45c83a 	sub	r2,r23,r17
  801df4:	e0c00215 	stw	r3,8(fp)
  801df8:	10800054 	ori	r2,r2,1
  801dfc:	18800115 	stw	r2,4(r3)
  801e00:	38800117 	ldw	r2,4(r7)
  801e04:	9809883a 	mov	r4,r19
  801e08:	1080004c 	andi	r2,r2,1
  801e0c:	1462b03a 	or	r17,r2,r17
  801e10:	3c400115 	stw	r17,4(r7)
  801e14:	08037000 	call	803700 <__malloc_unlock>
  801e18:	003f4f06 	br	801b58 <_realloc_r+0x1ac>
  801e1c:	80800217 	ldw	r2,8(r16)
  801e20:	31800920 	cmpeqi	r6,r6,36
  801e24:	90800215 	stw	r2,8(r18)
  801e28:	80800317 	ldw	r2,12(r16)
  801e2c:	90800315 	stw	r2,12(r18)
  801e30:	81000417 	ldw	r4,16(r16)
  801e34:	30000f1e 	bne	r6,zero,801e74 <_realloc_r+0x4c8>
  801e38:	80c00404 	addi	r3,r16,16
  801e3c:	90800404 	addi	r2,r18,16
  801e40:	003f6706 	br	801be0 <_realloc_r+0x234>
  801e44:	2005883a 	mov	r2,r4
  801e48:	003f2706 	br	801ae8 <_realloc_r+0x13c>
  801e4c:	80800217 	ldw	r2,8(r16)
  801e50:	31800920 	cmpeqi	r6,r6,36
  801e54:	38800415 	stw	r2,16(r7)
  801e58:	80800317 	ldw	r2,12(r16)
  801e5c:	38800515 	stw	r2,20(r7)
  801e60:	80c00417 	ldw	r3,16(r16)
  801e64:	3000121e 	bne	r6,zero,801eb0 <_realloc_r+0x504>
  801e68:	38800604 	addi	r2,r7,24
  801e6c:	84000404 	addi	r16,r16,16
  801e70:	003f1d06 	br	801ae8 <_realloc_r+0x13c>
  801e74:	91000415 	stw	r4,16(r18)
  801e78:	81000517 	ldw	r4,20(r16)
  801e7c:	80c00604 	addi	r3,r16,24
  801e80:	90800604 	addi	r2,r18,24
  801e84:	91000515 	stw	r4,20(r18)
  801e88:	81000617 	ldw	r4,24(r16)
  801e8c:	003f5406 	br	801be0 <_realloc_r+0x234>
  801e90:	9005883a 	mov	r2,r18
  801e94:	003fd006 	br	801dd8 <_realloc_r+0x42c>
  801e98:	800b883a 	mov	r5,r16
  801e9c:	9009883a 	mov	r4,r18
  801ea0:	d9c00015 	stw	r7,0(sp)
  801ea4:	08017900 	call	801790 <memmove>
  801ea8:	d9c00017 	ldw	r7,0(sp)
  801eac:	003fcf06 	br	801dec <_realloc_r+0x440>
  801eb0:	84000604 	addi	r16,r16,24
  801eb4:	38c00615 	stw	r3,24(r7)
  801eb8:	80ffff17 	ldw	r3,-4(r16)
  801ebc:	38800804 	addi	r2,r7,32
  801ec0:	38c00715 	stw	r3,28(r7)
  801ec4:	80c00017 	ldw	r3,0(r16)
  801ec8:	003f0706 	br	801ae8 <_realloc_r+0x13c>
  801ecc:	80800217 	ldw	r2,8(r16)
  801ed0:	31800920 	cmpeqi	r6,r6,36
  801ed4:	38800415 	stw	r2,16(r7)
  801ed8:	80800317 	ldw	r2,12(r16)
  801edc:	38800515 	stw	r2,20(r7)
  801ee0:	80c00417 	ldw	r3,16(r16)
  801ee4:	3000031e 	bne	r6,zero,801ef4 <_realloc_r+0x548>
  801ee8:	38800604 	addi	r2,r7,24
  801eec:	84000404 	addi	r16,r16,16
  801ef0:	003fb906 	br	801dd8 <_realloc_r+0x42c>
  801ef4:	84000604 	addi	r16,r16,24
  801ef8:	38c00615 	stw	r3,24(r7)
  801efc:	80ffff17 	ldw	r3,-4(r16)
  801f00:	38800804 	addi	r2,r7,32
  801f04:	38c00715 	stw	r3,28(r7)
  801f08:	80c00017 	ldw	r3,0(r16)
  801f0c:	003fb206 	br	801dd8 <_realloc_r+0x42c>

00801f10 <_sbrk_r>:
  801f10:	defffe04 	addi	sp,sp,-8
  801f14:	dc000015 	stw	r16,0(sp)
  801f18:	00802074 	movhi	r2,129
  801f1c:	2021883a 	mov	r16,r4
  801f20:	2809883a 	mov	r4,r5
  801f24:	dfc00115 	stw	ra,4(sp)
  801f28:	10237a15 	stw	zero,-29208(r2)
  801f2c:	08038d80 	call	8038d8 <sbrk>
  801f30:	10ffffd8 	cmpnei	r3,r2,-1
  801f34:	18000426 	beq	r3,zero,801f48 <_sbrk_r+0x38>
  801f38:	dfc00117 	ldw	ra,4(sp)
  801f3c:	dc000017 	ldw	r16,0(sp)
  801f40:	dec00204 	addi	sp,sp,8
  801f44:	f800283a 	ret
  801f48:	00c02074 	movhi	r3,129
  801f4c:	18e37a17 	ldw	r3,-29208(r3)
  801f50:	183ff926 	beq	r3,zero,801f38 <_sbrk_r+0x28>
  801f54:	80c00015 	stw	r3,0(r16)
  801f58:	dfc00117 	ldw	ra,4(sp)
  801f5c:	dc000017 	ldw	r16,0(sp)
  801f60:	dec00204 	addi	sp,sp,8
  801f64:	f800283a 	ret

00801f68 <__sread>:
  801f68:	defffe04 	addi	sp,sp,-8
  801f6c:	dc000015 	stw	r16,0(sp)
  801f70:	2821883a 	mov	r16,r5
  801f74:	2940038f 	ldh	r5,14(r5)
  801f78:	dfc00115 	stw	ra,4(sp)
  801f7c:	0802e380 	call	802e38 <_read_r>
  801f80:	10000716 	blt	r2,zero,801fa0 <__sread+0x38>
  801f84:	80c01417 	ldw	r3,80(r16)
  801f88:	1887883a 	add	r3,r3,r2
  801f8c:	80c01415 	stw	r3,80(r16)
  801f90:	dfc00117 	ldw	ra,4(sp)
  801f94:	dc000017 	ldw	r16,0(sp)
  801f98:	dec00204 	addi	sp,sp,8
  801f9c:	f800283a 	ret
  801fa0:	80c0030b 	ldhu	r3,12(r16)
  801fa4:	18fbffcc 	andi	r3,r3,61439
  801fa8:	80c0030d 	sth	r3,12(r16)
  801fac:	dfc00117 	ldw	ra,4(sp)
  801fb0:	dc000017 	ldw	r16,0(sp)
  801fb4:	dec00204 	addi	sp,sp,8
  801fb8:	f800283a 	ret

00801fbc <__seofread>:
  801fbc:	0005883a 	mov	r2,zero
  801fc0:	f800283a 	ret

00801fc4 <__swrite>:
  801fc4:	2880030b 	ldhu	r2,12(r5)
  801fc8:	defffb04 	addi	sp,sp,-20
  801fcc:	dcc00315 	stw	r19,12(sp)
  801fd0:	dc800215 	stw	r18,8(sp)
  801fd4:	dc400115 	stw	r17,4(sp)
  801fd8:	dc000015 	stw	r16,0(sp)
  801fdc:	dfc00415 	stw	ra,16(sp)
  801fe0:	10c0400c 	andi	r3,r2,256
  801fe4:	2821883a 	mov	r16,r5
  801fe8:	2023883a 	mov	r17,r4
  801fec:	2940038f 	ldh	r5,14(r5)
  801ff0:	3025883a 	mov	r18,r6
  801ff4:	3827883a 	mov	r19,r7
  801ff8:	18000c1e 	bne	r3,zero,80202c <__swrite+0x68>
  801ffc:	10bbffcc 	andi	r2,r2,61439
  802000:	980f883a 	mov	r7,r19
  802004:	900d883a 	mov	r6,r18
  802008:	8809883a 	mov	r4,r17
  80200c:	8080030d 	sth	r2,12(r16)
  802010:	dfc00417 	ldw	ra,16(sp)
  802014:	dcc00317 	ldw	r19,12(sp)
  802018:	dc800217 	ldw	r18,8(sp)
  80201c:	dc400117 	ldw	r17,4(sp)
  802020:	dc000017 	ldw	r16,0(sp)
  802024:	dec00504 	addi	sp,sp,20
  802028:	08020a81 	jmpi	8020a8 <_write_r>
  80202c:	01c00084 	movi	r7,2
  802030:	000d883a 	mov	r6,zero
  802034:	0802b8c0 	call	802b8c <_lseek_r>
  802038:	8080030b 	ldhu	r2,12(r16)
  80203c:	8140038f 	ldh	r5,14(r16)
  802040:	003fee06 	br	801ffc <__swrite+0x38>

00802044 <__sseek>:
  802044:	defffe04 	addi	sp,sp,-8
  802048:	dc000015 	stw	r16,0(sp)
  80204c:	2821883a 	mov	r16,r5
  802050:	2940038f 	ldh	r5,14(r5)
  802054:	dfc00115 	stw	ra,4(sp)
  802058:	0802b8c0 	call	802b8c <_lseek_r>
  80205c:	10ffffd8 	cmpnei	r3,r2,-1
  802060:	18000826 	beq	r3,zero,802084 <__sseek+0x40>
  802064:	80c0030b 	ldhu	r3,12(r16)
  802068:	80801415 	stw	r2,80(r16)
  80206c:	18c40014 	ori	r3,r3,4096
  802070:	80c0030d 	sth	r3,12(r16)
  802074:	dfc00117 	ldw	ra,4(sp)
  802078:	dc000017 	ldw	r16,0(sp)
  80207c:	dec00204 	addi	sp,sp,8
  802080:	f800283a 	ret
  802084:	80c0030b 	ldhu	r3,12(r16)
  802088:	18fbffcc 	andi	r3,r3,61439
  80208c:	80c0030d 	sth	r3,12(r16)
  802090:	dfc00117 	ldw	ra,4(sp)
  802094:	dc000017 	ldw	r16,0(sp)
  802098:	dec00204 	addi	sp,sp,8
  80209c:	f800283a 	ret

008020a0 <__sclose>:
  8020a0:	2940038f 	ldh	r5,14(r5)
  8020a4:	08022701 	jmpi	802270 <_close_r>

008020a8 <_write_r>:
  8020a8:	2807883a 	mov	r3,r5
  8020ac:	defffe04 	addi	sp,sp,-8
  8020b0:	dc000015 	stw	r16,0(sp)
  8020b4:	300b883a 	mov	r5,r6
  8020b8:	00802074 	movhi	r2,129
  8020bc:	380d883a 	mov	r6,r7
  8020c0:	2021883a 	mov	r16,r4
  8020c4:	1809883a 	mov	r4,r3
  8020c8:	dfc00115 	stw	ra,4(sp)
  8020cc:	10237a15 	stw	zero,-29208(r2)
  8020d0:	08039cc0 	call	8039cc <write>
  8020d4:	10ffffd8 	cmpnei	r3,r2,-1
  8020d8:	18000426 	beq	r3,zero,8020ec <_write_r+0x44>
  8020dc:	dfc00117 	ldw	ra,4(sp)
  8020e0:	dc000017 	ldw	r16,0(sp)
  8020e4:	dec00204 	addi	sp,sp,8
  8020e8:	f800283a 	ret
  8020ec:	00c02074 	movhi	r3,129
  8020f0:	18e37a17 	ldw	r3,-29208(r3)
  8020f4:	183ff926 	beq	r3,zero,8020dc <_write_r+0x34>
  8020f8:	80c00015 	stw	r3,0(r16)
  8020fc:	dfc00117 	ldw	ra,4(sp)
  802100:	dc000017 	ldw	r16,0(sp)
  802104:	dec00204 	addi	sp,sp,8
  802108:	f800283a 	ret

0080210c <__swsetup_r>:
  80210c:	00802034 	movhi	r2,128
  802110:	109ccf17 	ldw	r2,29500(r2)
  802114:	defffd04 	addi	sp,sp,-12
  802118:	dc400115 	stw	r17,4(sp)
  80211c:	dc000015 	stw	r16,0(sp)
  802120:	dfc00215 	stw	ra,8(sp)
  802124:	2023883a 	mov	r17,r4
  802128:	2821883a 	mov	r16,r5
  80212c:	10000226 	beq	r2,zero,802138 <__swsetup_r+0x2c>
  802130:	10c00e17 	ldw	r3,56(r2)
  802134:	18001f26 	beq	r3,zero,8021b4 <__swsetup_r+0xa8>
  802138:	8180030b 	ldhu	r6,12(r16)
  80213c:	30c0020c 	andi	r3,r6,8
  802140:	3005883a 	mov	r2,r6
  802144:	18002126 	beq	r3,zero,8021cc <__swsetup_r+0xc0>
  802148:	80c00417 	ldw	r3,16(r16)
  80214c:	18002826 	beq	r3,zero,8021f0 <__swsetup_r+0xe4>
  802150:	1100004c 	andi	r4,r2,1
  802154:	20000b1e 	bne	r4,zero,802184 <__swsetup_r+0x78>
  802158:	1100008c 	andi	r4,r2,2
  80215c:	20002e1e 	bne	r4,zero,802218 <__swsetup_r+0x10c>
  802160:	81000517 	ldw	r4,20(r16)
  802164:	81000215 	stw	r4,8(r16)
  802168:	18000b26 	beq	r3,zero,802198 <__swsetup_r+0x8c>
  80216c:	0005883a 	mov	r2,zero
  802170:	dfc00217 	ldw	ra,8(sp)
  802174:	dc400117 	ldw	r17,4(sp)
  802178:	dc000017 	ldw	r16,0(sp)
  80217c:	dec00304 	addi	sp,sp,12
  802180:	f800283a 	ret
  802184:	81000517 	ldw	r4,20(r16)
  802188:	80000215 	stw	zero,8(r16)
  80218c:	0109c83a 	sub	r4,zero,r4
  802190:	81000615 	stw	r4,24(r16)
  802194:	183ff51e 	bne	r3,zero,80216c <__swsetup_r+0x60>
  802198:	10c0200c 	andi	r3,r2,128
  80219c:	0005883a 	mov	r2,zero
  8021a0:	183ff326 	beq	r3,zero,802170 <__swsetup_r+0x64>
  8021a4:	31801014 	ori	r6,r6,64
  8021a8:	8180030d 	sth	r6,12(r16)
  8021ac:	00bfffc4 	movi	r2,-1
  8021b0:	003fef06 	br	802170 <__swsetup_r+0x64>
  8021b4:	1009883a 	mov	r4,r2
  8021b8:	08007900 	call	800790 <__sinit>
  8021bc:	8180030b 	ldhu	r6,12(r16)
  8021c0:	30c0020c 	andi	r3,r6,8
  8021c4:	3005883a 	mov	r2,r6
  8021c8:	183fdf1e 	bne	r3,zero,802148 <__swsetup_r+0x3c>
  8021cc:	3080040c 	andi	r2,r6,16
  8021d0:	10002126 	beq	r2,zero,802258 <__swsetup_r+0x14c>
  8021d4:	3080010c 	andi	r2,r6,4
  8021d8:	1000111e 	bne	r2,zero,802220 <__swsetup_r+0x114>
  8021dc:	80c00417 	ldw	r3,16(r16)
  8021e0:	30800214 	ori	r2,r6,8
  8021e4:	8080030d 	sth	r2,12(r16)
  8021e8:	100d883a 	mov	r6,r2
  8021ec:	183fd81e 	bne	r3,zero,802150 <__swsetup_r+0x44>
  8021f0:	1100a00c 	andi	r4,r2,640
  8021f4:	21008020 	cmpeqi	r4,r4,512
  8021f8:	203fd51e 	bne	r4,zero,802150 <__swsetup_r+0x44>
  8021fc:	800b883a 	mov	r5,r16
  802200:	8809883a 	mov	r4,r17
  802204:	0802bf00 	call	802bf0 <__smakebuf_r>
  802208:	8180030b 	ldhu	r6,12(r16)
  80220c:	80c00417 	ldw	r3,16(r16)
  802210:	3005883a 	mov	r2,r6
  802214:	003fce06 	br	802150 <__swsetup_r+0x44>
  802218:	0009883a 	mov	r4,zero
  80221c:	003fd106 	br	802164 <__swsetup_r+0x58>
  802220:	81400c17 	ldw	r5,48(r16)
  802224:	28000626 	beq	r5,zero,802240 <__swsetup_r+0x134>
  802228:	80801004 	addi	r2,r16,64
  80222c:	28800326 	beq	r5,r2,80223c <__swsetup_r+0x130>
  802230:	8809883a 	mov	r4,r17
  802234:	08028900 	call	802890 <_free_r>
  802238:	8180030b 	ldhu	r6,12(r16)
  80223c:	80000c15 	stw	zero,48(r16)
  802240:	80c00417 	ldw	r3,16(r16)
  802244:	00bff6c4 	movi	r2,-37
  802248:	118c703a 	and	r6,r2,r6
  80224c:	80000115 	stw	zero,4(r16)
  802250:	80c00015 	stw	r3,0(r16)
  802254:	003fe206 	br	8021e0 <__swsetup_r+0xd4>
  802258:	00800244 	movi	r2,9
  80225c:	88800015 	stw	r2,0(r17)
  802260:	31801014 	ori	r6,r6,64
  802264:	8180030d 	sth	r6,12(r16)
  802268:	00bfffc4 	movi	r2,-1
  80226c:	003fc006 	br	802170 <__swsetup_r+0x64>

00802270 <_close_r>:
  802270:	defffe04 	addi	sp,sp,-8
  802274:	dc000015 	stw	r16,0(sp)
  802278:	00802074 	movhi	r2,129
  80227c:	2021883a 	mov	r16,r4
  802280:	2809883a 	mov	r4,r5
  802284:	dfc00115 	stw	ra,4(sp)
  802288:	10237a15 	stw	zero,-29208(r2)
  80228c:	080316c0 	call	80316c <close>
  802290:	10ffffd8 	cmpnei	r3,r2,-1
  802294:	18000426 	beq	r3,zero,8022a8 <_close_r+0x38>
  802298:	dfc00117 	ldw	ra,4(sp)
  80229c:	dc000017 	ldw	r16,0(sp)
  8022a0:	dec00204 	addi	sp,sp,8
  8022a4:	f800283a 	ret
  8022a8:	00c02074 	movhi	r3,129
  8022ac:	18e37a17 	ldw	r3,-29208(r3)
  8022b0:	183ff926 	beq	r3,zero,802298 <_close_r+0x28>
  8022b4:	80c00015 	stw	r3,0(r16)
  8022b8:	dfc00117 	ldw	ra,4(sp)
  8022bc:	dc000017 	ldw	r16,0(sp)
  8022c0:	dec00204 	addi	sp,sp,8
  8022c4:	f800283a 	ret

008022c8 <_fclose_r.part.0>:
  8022c8:	defffc04 	addi	sp,sp,-16
  8022cc:	dc800215 	stw	r18,8(sp)
  8022d0:	dc400115 	stw	r17,4(sp)
  8022d4:	dc000015 	stw	r16,0(sp)
  8022d8:	dfc00315 	stw	ra,12(sp)
  8022dc:	2821883a 	mov	r16,r5
  8022e0:	2023883a 	mov	r17,r4
  8022e4:	08024680 	call	802468 <__sflush_r>
  8022e8:	80c00b17 	ldw	r3,44(r16)
  8022ec:	1025883a 	mov	r18,r2
  8022f0:	18000426 	beq	r3,zero,802304 <_fclose_r.part.0+0x3c>
  8022f4:	81400717 	ldw	r5,28(r16)
  8022f8:	8809883a 	mov	r4,r17
  8022fc:	183ee83a 	callr	r3
  802300:	10001916 	blt	r2,zero,802368 <_fclose_r.part.0+0xa0>
  802304:	8080030b 	ldhu	r2,12(r16)
  802308:	1080200c 	andi	r2,r2,128
  80230c:	10001a1e 	bne	r2,zero,802378 <_fclose_r.part.0+0xb0>
  802310:	81400c17 	ldw	r5,48(r16)
  802314:	28000526 	beq	r5,zero,80232c <_fclose_r.part.0+0x64>
  802318:	80801004 	addi	r2,r16,64
  80231c:	28800226 	beq	r5,r2,802328 <_fclose_r.part.0+0x60>
  802320:	8809883a 	mov	r4,r17
  802324:	08028900 	call	802890 <_free_r>
  802328:	80000c15 	stw	zero,48(r16)
  80232c:	81401117 	ldw	r5,68(r16)
  802330:	28000326 	beq	r5,zero,802340 <_fclose_r.part.0+0x78>
  802334:	8809883a 	mov	r4,r17
  802338:	08028900 	call	802890 <_free_r>
  80233c:	80001115 	stw	zero,68(r16)
  802340:	08007a00 	call	8007a0 <__sfp_lock_acquire>
  802344:	8000030d 	sth	zero,12(r16)
  802348:	08007a40 	call	8007a4 <__sfp_lock_release>
  80234c:	9005883a 	mov	r2,r18
  802350:	dfc00317 	ldw	ra,12(sp)
  802354:	dc800217 	ldw	r18,8(sp)
  802358:	dc400117 	ldw	r17,4(sp)
  80235c:	dc000017 	ldw	r16,0(sp)
  802360:	dec00404 	addi	sp,sp,16
  802364:	f800283a 	ret
  802368:	8080030b 	ldhu	r2,12(r16)
  80236c:	04bfffc4 	movi	r18,-1
  802370:	1080200c 	andi	r2,r2,128
  802374:	103fe626 	beq	r2,zero,802310 <_fclose_r.part.0+0x48>
  802378:	81400417 	ldw	r5,16(r16)
  80237c:	8809883a 	mov	r4,r17
  802380:	08028900 	call	802890 <_free_r>
  802384:	003fe206 	br	802310 <_fclose_r.part.0+0x48>

00802388 <_fclose_r>:
  802388:	28001926 	beq	r5,zero,8023f0 <_fclose_r+0x68>
  80238c:	defffd04 	addi	sp,sp,-12
  802390:	dc000115 	stw	r16,4(sp)
  802394:	dfc00215 	stw	ra,8(sp)
  802398:	2021883a 	mov	r16,r4
  80239c:	20000226 	beq	r4,zero,8023a8 <_fclose_r+0x20>
  8023a0:	20800e17 	ldw	r2,56(r4)
  8023a4:	10000c26 	beq	r2,zero,8023d8 <_fclose_r+0x50>
  8023a8:	2880030f 	ldh	r2,12(r5)
  8023ac:	1000051e 	bne	r2,zero,8023c4 <_fclose_r+0x3c>
  8023b0:	0005883a 	mov	r2,zero
  8023b4:	dfc00217 	ldw	ra,8(sp)
  8023b8:	dc000117 	ldw	r16,4(sp)
  8023bc:	dec00304 	addi	sp,sp,12
  8023c0:	f800283a 	ret
  8023c4:	8009883a 	mov	r4,r16
  8023c8:	dfc00217 	ldw	ra,8(sp)
  8023cc:	dc000117 	ldw	r16,4(sp)
  8023d0:	dec00304 	addi	sp,sp,12
  8023d4:	08022c81 	jmpi	8022c8 <_fclose_r.part.0>
  8023d8:	d9400015 	stw	r5,0(sp)
  8023dc:	08007900 	call	800790 <__sinit>
  8023e0:	d9400017 	ldw	r5,0(sp)
  8023e4:	2880030f 	ldh	r2,12(r5)
  8023e8:	103ff126 	beq	r2,zero,8023b0 <_fclose_r+0x28>
  8023ec:	003ff506 	br	8023c4 <_fclose_r+0x3c>
  8023f0:	0005883a 	mov	r2,zero
  8023f4:	f800283a 	ret

008023f8 <fclose>:
  8023f8:	20000826 	beq	r4,zero,80241c <fclose+0x24>
  8023fc:	00802034 	movhi	r2,128
  802400:	200b883a 	mov	r5,r4
  802404:	111ccf17 	ldw	r4,29500(r2)
  802408:	20000226 	beq	r4,zero,802414 <fclose+0x1c>
  80240c:	20800e17 	ldw	r2,56(r4)
  802410:	10000526 	beq	r2,zero,802428 <fclose+0x30>
  802414:	2880030f 	ldh	r2,12(r5)
  802418:	1000021e 	bne	r2,zero,802424 <fclose+0x2c>
  80241c:	0005883a 	mov	r2,zero
  802420:	f800283a 	ret
  802424:	08022c81 	jmpi	8022c8 <_fclose_r.part.0>
  802428:	defffd04 	addi	sp,sp,-12
  80242c:	d9400115 	stw	r5,4(sp)
  802430:	d9000015 	stw	r4,0(sp)
  802434:	dfc00215 	stw	ra,8(sp)
  802438:	08007900 	call	800790 <__sinit>
  80243c:	d9400117 	ldw	r5,4(sp)
  802440:	d9000017 	ldw	r4,0(sp)
  802444:	2880030f 	ldh	r2,12(r5)
  802448:	10000326 	beq	r2,zero,802458 <fclose+0x60>
  80244c:	dfc00217 	ldw	ra,8(sp)
  802450:	dec00304 	addi	sp,sp,12
  802454:	08022c81 	jmpi	8022c8 <_fclose_r.part.0>
  802458:	0005883a 	mov	r2,zero
  80245c:	dfc00217 	ldw	ra,8(sp)
  802460:	dec00304 	addi	sp,sp,12
  802464:	f800283a 	ret

00802468 <__sflush_r>:
  802468:	2880030b 	ldhu	r2,12(r5)
  80246c:	defffb04 	addi	sp,sp,-20
  802470:	dcc00315 	stw	r19,12(sp)
  802474:	dc000015 	stw	r16,0(sp)
  802478:	dfc00415 	stw	ra,16(sp)
  80247c:	dc800215 	stw	r18,8(sp)
  802480:	dc400115 	stw	r17,4(sp)
  802484:	10c0020c 	andi	r3,r2,8
  802488:	2821883a 	mov	r16,r5
  80248c:	2027883a 	mov	r19,r4
  802490:	18003f1e 	bne	r3,zero,802590 <__sflush_r+0x128>
  802494:	28c00117 	ldw	r3,4(r5)
  802498:	10820014 	ori	r2,r2,2048
  80249c:	2880030d 	sth	r2,12(r5)
  8024a0:	00c0550e 	bge	zero,r3,8025f8 <__sflush_r+0x190>
  8024a4:	82000a17 	ldw	r8,40(r16)
  8024a8:	40003126 	beq	r8,zero,802570 <__sflush_r+0x108>
  8024ac:	9c400017 	ldw	r17,0(r19)
  8024b0:	1104000c 	andi	r4,r2,4096
  8024b4:	98000015 	stw	zero,0(r19)
  8024b8:	81400717 	ldw	r5,28(r16)
  8024bc:	1007883a 	mov	r3,r2
  8024c0:	2000521e 	bne	r4,zero,80260c <__sflush_r+0x1a4>
  8024c4:	01c00044 	movi	r7,1
  8024c8:	000d883a 	mov	r6,zero
  8024cc:	9809883a 	mov	r4,r19
  8024d0:	403ee83a 	callr	r8
  8024d4:	10ffffd8 	cmpnei	r3,r2,-1
  8024d8:	18005826 	beq	r3,zero,80263c <__sflush_r+0x1d4>
  8024dc:	80c0030b 	ldhu	r3,12(r16)
  8024e0:	82000a17 	ldw	r8,40(r16)
  8024e4:	81400717 	ldw	r5,28(r16)
  8024e8:	18c0010c 	andi	r3,r3,4
  8024ec:	18000626 	beq	r3,zero,802508 <__sflush_r+0xa0>
  8024f0:	81000117 	ldw	r4,4(r16)
  8024f4:	80c00c17 	ldw	r3,48(r16)
  8024f8:	1105c83a 	sub	r2,r2,r4
  8024fc:	18000226 	beq	r3,zero,802508 <__sflush_r+0xa0>
  802500:	80c00f17 	ldw	r3,60(r16)
  802504:	10c5c83a 	sub	r2,r2,r3
  802508:	100d883a 	mov	r6,r2
  80250c:	000f883a 	mov	r7,zero
  802510:	9809883a 	mov	r4,r19
  802514:	403ee83a 	callr	r8
  802518:	10ffffd8 	cmpnei	r3,r2,-1
  80251c:	18003d1e 	bne	r3,zero,802614 <__sflush_r+0x1ac>
  802520:	99000017 	ldw	r4,0(r19)
  802524:	80c0030b 	ldhu	r3,12(r16)
  802528:	20004e26 	beq	r4,zero,802664 <__sflush_r+0x1fc>
  80252c:	21400760 	cmpeqi	r5,r4,29
  802530:	2800021e 	bne	r5,zero,80253c <__sflush_r+0xd4>
  802534:	210005a0 	cmpeqi	r4,r4,22
  802538:	20002c26 	beq	r4,zero,8025ec <__sflush_r+0x184>
  80253c:	80800417 	ldw	r2,16(r16)
  802540:	18fdffcc 	andi	r3,r3,63487
  802544:	80c0030d 	sth	r3,12(r16)
  802548:	80000115 	stw	zero,4(r16)
  80254c:	80800015 	stw	r2,0(r16)
  802550:	81400c17 	ldw	r5,48(r16)
  802554:	9c400015 	stw	r17,0(r19)
  802558:	28000526 	beq	r5,zero,802570 <__sflush_r+0x108>
  80255c:	80801004 	addi	r2,r16,64
  802560:	28800226 	beq	r5,r2,80256c <__sflush_r+0x104>
  802564:	9809883a 	mov	r4,r19
  802568:	08028900 	call	802890 <_free_r>
  80256c:	80000c15 	stw	zero,48(r16)
  802570:	0005883a 	mov	r2,zero
  802574:	dfc00417 	ldw	ra,16(sp)
  802578:	dcc00317 	ldw	r19,12(sp)
  80257c:	dc800217 	ldw	r18,8(sp)
  802580:	dc400117 	ldw	r17,4(sp)
  802584:	dc000017 	ldw	r16,0(sp)
  802588:	dec00504 	addi	sp,sp,20
  80258c:	f800283a 	ret
  802590:	2c800417 	ldw	r18,16(r5)
  802594:	903ff626 	beq	r18,zero,802570 <__sflush_r+0x108>
  802598:	2c400017 	ldw	r17,0(r5)
  80259c:	108000cc 	andi	r2,r2,3
  8025a0:	2c800015 	stw	r18,0(r5)
  8025a4:	8ca3c83a 	sub	r17,r17,r18
  8025a8:	1000161e 	bne	r2,zero,802604 <__sflush_r+0x19c>
  8025ac:	28800517 	ldw	r2,20(r5)
  8025b0:	80800215 	stw	r2,8(r16)
  8025b4:	04400316 	blt	zero,r17,8025c4 <__sflush_r+0x15c>
  8025b8:	003fed06 	br	802570 <__sflush_r+0x108>
  8025bc:	90a5883a 	add	r18,r18,r2
  8025c0:	047feb0e 	bge	zero,r17,802570 <__sflush_r+0x108>
  8025c4:	80800917 	ldw	r2,36(r16)
  8025c8:	81400717 	ldw	r5,28(r16)
  8025cc:	880f883a 	mov	r7,r17
  8025d0:	900d883a 	mov	r6,r18
  8025d4:	9809883a 	mov	r4,r19
  8025d8:	103ee83a 	callr	r2
  8025dc:	88a3c83a 	sub	r17,r17,r2
  8025e0:	00bff616 	blt	zero,r2,8025bc <__sflush_r+0x154>
  8025e4:	80c0030b 	ldhu	r3,12(r16)
  8025e8:	00bfffc4 	movi	r2,-1
  8025ec:	18c01014 	ori	r3,r3,64
  8025f0:	80c0030d 	sth	r3,12(r16)
  8025f4:	003fdf06 	br	802574 <__sflush_r+0x10c>
  8025f8:	28c00f17 	ldw	r3,60(r5)
  8025fc:	00ffa916 	blt	zero,r3,8024a4 <__sflush_r+0x3c>
  802600:	003fdb06 	br	802570 <__sflush_r+0x108>
  802604:	0005883a 	mov	r2,zero
  802608:	003fe906 	br	8025b0 <__sflush_r+0x148>
  80260c:	80801417 	ldw	r2,80(r16)
  802610:	003fb506 	br	8024e8 <__sflush_r+0x80>
  802614:	80c0030b 	ldhu	r3,12(r16)
  802618:	81000417 	ldw	r4,16(r16)
  80261c:	80000115 	stw	zero,4(r16)
  802620:	197dffcc 	andi	r5,r3,63487
  802624:	8140030d 	sth	r5,12(r16)
  802628:	81000015 	stw	r4,0(r16)
  80262c:	18c4000c 	andi	r3,r3,4096
  802630:	183fc726 	beq	r3,zero,802550 <__sflush_r+0xe8>
  802634:	80801415 	stw	r2,80(r16)
  802638:	003fc506 	br	802550 <__sflush_r+0xe8>
  80263c:	98c00017 	ldw	r3,0(r19)
  802640:	183fa626 	beq	r3,zero,8024dc <__sflush_r+0x74>
  802644:	19000760 	cmpeqi	r4,r3,29
  802648:	20000e1e 	bne	r4,zero,802684 <__sflush_r+0x21c>
  80264c:	18c00598 	cmpnei	r3,r3,22
  802650:	18000c26 	beq	r3,zero,802684 <__sflush_r+0x21c>
  802654:	80c0030b 	ldhu	r3,12(r16)
  802658:	18c01014 	ori	r3,r3,64
  80265c:	80c0030d 	sth	r3,12(r16)
  802660:	003fc406 	br	802574 <__sflush_r+0x10c>
  802664:	81000417 	ldw	r4,16(r16)
  802668:	197dffcc 	andi	r5,r3,63487
  80266c:	8140030d 	sth	r5,12(r16)
  802670:	80000115 	stw	zero,4(r16)
  802674:	81000015 	stw	r4,0(r16)
  802678:	18c4000c 	andi	r3,r3,4096
  80267c:	183fb426 	beq	r3,zero,802550 <__sflush_r+0xe8>
  802680:	003fec06 	br	802634 <__sflush_r+0x1cc>
  802684:	9c400015 	stw	r17,0(r19)
  802688:	0005883a 	mov	r2,zero
  80268c:	003fb906 	br	802574 <__sflush_r+0x10c>

00802690 <_fflush_r>:
  802690:	defffd04 	addi	sp,sp,-12
  802694:	dc000115 	stw	r16,4(sp)
  802698:	dfc00215 	stw	ra,8(sp)
  80269c:	2021883a 	mov	r16,r4
  8026a0:	20000226 	beq	r4,zero,8026ac <_fflush_r+0x1c>
  8026a4:	20800e17 	ldw	r2,56(r4)
  8026a8:	10000726 	beq	r2,zero,8026c8 <_fflush_r+0x38>
  8026ac:	2880030f 	ldh	r2,12(r5)
  8026b0:	10000a1e 	bne	r2,zero,8026dc <_fflush_r+0x4c>
  8026b4:	0005883a 	mov	r2,zero
  8026b8:	dfc00217 	ldw	ra,8(sp)
  8026bc:	dc000117 	ldw	r16,4(sp)
  8026c0:	dec00304 	addi	sp,sp,12
  8026c4:	f800283a 	ret
  8026c8:	d9400015 	stw	r5,0(sp)
  8026cc:	08007900 	call	800790 <__sinit>
  8026d0:	d9400017 	ldw	r5,0(sp)
  8026d4:	2880030f 	ldh	r2,12(r5)
  8026d8:	103ff626 	beq	r2,zero,8026b4 <_fflush_r+0x24>
  8026dc:	8009883a 	mov	r4,r16
  8026e0:	dfc00217 	ldw	ra,8(sp)
  8026e4:	dc000117 	ldw	r16,4(sp)
  8026e8:	dec00304 	addi	sp,sp,12
  8026ec:	08024681 	jmpi	802468 <__sflush_r>

008026f0 <fflush>:
  8026f0:	20001726 	beq	r4,zero,802750 <fflush+0x60>
  8026f4:	00802034 	movhi	r2,128
  8026f8:	200b883a 	mov	r5,r4
  8026fc:	111ccf17 	ldw	r4,29500(r2)
  802700:	20000226 	beq	r4,zero,80270c <fflush+0x1c>
  802704:	20800e17 	ldw	r2,56(r4)
  802708:	10000526 	beq	r2,zero,802720 <fflush+0x30>
  80270c:	2880030f 	ldh	r2,12(r5)
  802710:	1000021e 	bne	r2,zero,80271c <fflush+0x2c>
  802714:	0005883a 	mov	r2,zero
  802718:	f800283a 	ret
  80271c:	08024681 	jmpi	802468 <__sflush_r>
  802720:	defffd04 	addi	sp,sp,-12
  802724:	d9400115 	stw	r5,4(sp)
  802728:	d9000015 	stw	r4,0(sp)
  80272c:	dfc00215 	stw	ra,8(sp)
  802730:	08007900 	call	800790 <__sinit>
  802734:	d9400117 	ldw	r5,4(sp)
  802738:	d9000017 	ldw	r4,0(sp)
  80273c:	2880030f 	ldh	r2,12(r5)
  802740:	10000826 	beq	r2,zero,802764 <fflush+0x74>
  802744:	dfc00217 	ldw	ra,8(sp)
  802748:	dec00304 	addi	sp,sp,12
  80274c:	08024681 	jmpi	802468 <__sflush_r>
  802750:	00802034 	movhi	r2,128
  802754:	111cce17 	ldw	r4,29496(r2)
  802758:	01402034 	movhi	r5,128
  80275c:	2949a404 	addi	r5,r5,9872
  802760:	0800d381 	jmpi	800d38 <_fwalk_reent>
  802764:	0005883a 	mov	r2,zero
  802768:	dfc00217 	ldw	ra,8(sp)
  80276c:	dec00304 	addi	sp,sp,12
  802770:	f800283a 	ret

00802774 <_malloc_trim_r>:
  802774:	defffb04 	addi	sp,sp,-20
  802778:	dcc00315 	stw	r19,12(sp)
  80277c:	04c02034 	movhi	r19,128
  802780:	dc800215 	stw	r18,8(sp)
  802784:	dc400115 	stw	r17,4(sp)
  802788:	dc000015 	stw	r16,0(sp)
  80278c:	dfc00415 	stw	ra,16(sp)
  802790:	2821883a 	mov	r16,r5
  802794:	9cd74a04 	addi	r19,r19,23848
  802798:	2025883a 	mov	r18,r4
  80279c:	08036dc0 	call	8036dc <__malloc_lock>
  8027a0:	98800217 	ldw	r2,8(r19)
  8027a4:	14400117 	ldw	r17,4(r2)
  8027a8:	00bfff04 	movi	r2,-4
  8027ac:	88a2703a 	and	r17,r17,r2
  8027b0:	8c21c83a 	sub	r16,r17,r16
  8027b4:	8403fbc4 	addi	r16,r16,4079
  8027b8:	8020d33a 	srli	r16,r16,12
  8027bc:	843fffc4 	addi	r16,r16,-1
  8027c0:	8020933a 	slli	r16,r16,12
  8027c4:	80840008 	cmpgei	r2,r16,4096
  8027c8:	10000626 	beq	r2,zero,8027e4 <_malloc_trim_r+0x70>
  8027cc:	000b883a 	mov	r5,zero
  8027d0:	9009883a 	mov	r4,r18
  8027d4:	0801f100 	call	801f10 <_sbrk_r>
  8027d8:	98c00217 	ldw	r3,8(r19)
  8027dc:	1c47883a 	add	r3,r3,r17
  8027e0:	10c00a26 	beq	r2,r3,80280c <_malloc_trim_r+0x98>
  8027e4:	9009883a 	mov	r4,r18
  8027e8:	08037000 	call	803700 <__malloc_unlock>
  8027ec:	0005883a 	mov	r2,zero
  8027f0:	dfc00417 	ldw	ra,16(sp)
  8027f4:	dcc00317 	ldw	r19,12(sp)
  8027f8:	dc800217 	ldw	r18,8(sp)
  8027fc:	dc400117 	ldw	r17,4(sp)
  802800:	dc000017 	ldw	r16,0(sp)
  802804:	dec00504 	addi	sp,sp,20
  802808:	f800283a 	ret
  80280c:	040bc83a 	sub	r5,zero,r16
  802810:	9009883a 	mov	r4,r18
  802814:	0801f100 	call	801f10 <_sbrk_r>
  802818:	10bfffd8 	cmpnei	r2,r2,-1
  80281c:	10000d26 	beq	r2,zero,802854 <_malloc_trim_r+0xe0>
  802820:	00802074 	movhi	r2,129
  802824:	10a38217 	ldw	r2,-29176(r2)
  802828:	98c00217 	ldw	r3,8(r19)
  80282c:	8c23c83a 	sub	r17,r17,r16
  802830:	8c400054 	ori	r17,r17,1
  802834:	1421c83a 	sub	r16,r2,r16
  802838:	1c400115 	stw	r17,4(r3)
  80283c:	00802074 	movhi	r2,129
  802840:	9009883a 	mov	r4,r18
  802844:	14238215 	stw	r16,-29176(r2)
  802848:	08037000 	call	803700 <__malloc_unlock>
  80284c:	00800044 	movi	r2,1
  802850:	003fe706 	br	8027f0 <_malloc_trim_r+0x7c>
  802854:	000b883a 	mov	r5,zero
  802858:	9009883a 	mov	r4,r18
  80285c:	0801f100 	call	801f10 <_sbrk_r>
  802860:	99000217 	ldw	r4,8(r19)
  802864:	1107c83a 	sub	r3,r2,r4
  802868:	19400410 	cmplti	r5,r3,16
  80286c:	283fdd1e 	bne	r5,zero,8027e4 <_malloc_trim_r+0x70>
  802870:	01402034 	movhi	r5,128
  802874:	295cd017 	ldw	r5,29504(r5)
  802878:	18c00054 	ori	r3,r3,1
  80287c:	20c00115 	stw	r3,4(r4)
  802880:	1145c83a 	sub	r2,r2,r5
  802884:	01402074 	movhi	r5,129
  802888:	28a38215 	stw	r2,-29176(r5)
  80288c:	003fd506 	br	8027e4 <_malloc_trim_r+0x70>

00802890 <_free_r>:
  802890:	28004f26 	beq	r5,zero,8029d0 <_free_r+0x140>
  802894:	defffd04 	addi	sp,sp,-12
  802898:	dc400115 	stw	r17,4(sp)
  80289c:	dc000015 	stw	r16,0(sp)
  8028a0:	2023883a 	mov	r17,r4
  8028a4:	2821883a 	mov	r16,r5
  8028a8:	dfc00215 	stw	ra,8(sp)
  8028ac:	08036dc0 	call	8036dc <__malloc_lock>
  8028b0:	81ffff17 	ldw	r7,-4(r16)
  8028b4:	00bfff84 	movi	r2,-2
  8028b8:	80fffe04 	addi	r3,r16,-8
  8028bc:	3884703a 	and	r2,r7,r2
  8028c0:	01002034 	movhi	r4,128
  8028c4:	188d883a 	add	r6,r3,r2
  8028c8:	21174a04 	addi	r4,r4,23848
  8028cc:	31400117 	ldw	r5,4(r6)
  8028d0:	22000217 	ldw	r8,8(r4)
  8028d4:	027fff04 	movi	r9,-4
  8028d8:	2a4a703a 	and	r5,r5,r9
  8028dc:	41806426 	beq	r8,r6,802a70 <_free_r+0x1e0>
  8028e0:	31400115 	stw	r5,4(r6)
  8028e4:	39c0004c 	andi	r7,r7,1
  8028e8:	3151883a 	add	r8,r6,r5
  8028ec:	3800281e 	bne	r7,zero,802990 <_free_r+0x100>
  8028f0:	82bffe17 	ldw	r10,-8(r16)
  8028f4:	42000117 	ldw	r8,4(r8)
  8028f8:	01c02034 	movhi	r7,128
  8028fc:	1a87c83a 	sub	r3,r3,r10
  802900:	1a400217 	ldw	r9,8(r3)
  802904:	39d74c04 	addi	r7,r7,23856
  802908:	1285883a 	add	r2,r2,r10
  80290c:	4200004c 	andi	r8,r8,1
  802910:	49c04c26 	beq	r9,r7,802a44 <_free_r+0x1b4>
  802914:	1a800317 	ldw	r10,12(r3)
  802918:	4a800315 	stw	r10,12(r9)
  80291c:	52400215 	stw	r9,8(r10)
  802920:	40007126 	beq	r8,zero,802ae8 <_free_r+0x258>
  802924:	11400054 	ori	r5,r2,1
  802928:	19400115 	stw	r5,4(r3)
  80292c:	30800015 	stw	r2,0(r6)
  802930:	11408028 	cmpgeui	r5,r2,512
  802934:	28002c1e 	bne	r5,zero,8029e8 <_free_r+0x158>
  802938:	100ad0fa 	srli	r5,r2,3
  80293c:	100cd17a 	srli	r6,r2,5
  802940:	00800044 	movi	r2,1
  802944:	29400044 	addi	r5,r5,1
  802948:	280a90fa 	slli	r5,r5,3
  80294c:	21c00117 	ldw	r7,4(r4)
  802950:	1184983a 	sll	r2,r2,r6
  802954:	214b883a 	add	r5,r4,r5
  802958:	29800017 	ldw	r6,0(r5)
  80295c:	11c4b03a 	or	r2,r2,r7
  802960:	29fffe04 	addi	r7,r5,-8
  802964:	19c00315 	stw	r7,12(r3)
  802968:	19800215 	stw	r6,8(r3)
  80296c:	20800115 	stw	r2,4(r4)
  802970:	28c00015 	stw	r3,0(r5)
  802974:	30c00315 	stw	r3,12(r6)
  802978:	8809883a 	mov	r4,r17
  80297c:	dfc00217 	ldw	ra,8(sp)
  802980:	dc400117 	ldw	r17,4(sp)
  802984:	dc000017 	ldw	r16,0(sp)
  802988:	dec00304 	addi	sp,sp,12
  80298c:	08037001 	jmpi	803700 <__malloc_unlock>
  802990:	41c00117 	ldw	r7,4(r8)
  802994:	39c0004c 	andi	r7,r7,1
  802998:	38000e1e 	bne	r7,zero,8029d4 <_free_r+0x144>
  80299c:	01c02034 	movhi	r7,128
  8029a0:	1145883a 	add	r2,r2,r5
  8029a4:	39d74c04 	addi	r7,r7,23856
  8029a8:	31400217 	ldw	r5,8(r6)
  8029ac:	12400054 	ori	r9,r2,1
  8029b0:	1891883a 	add	r8,r3,r2
  8029b4:	29c05226 	beq	r5,r7,802b00 <_free_r+0x270>
  8029b8:	31800317 	ldw	r6,12(r6)
  8029bc:	29800315 	stw	r6,12(r5)
  8029c0:	31400215 	stw	r5,8(r6)
  8029c4:	1a400115 	stw	r9,4(r3)
  8029c8:	40800015 	stw	r2,0(r8)
  8029cc:	003fd806 	br	802930 <_free_r+0xa0>
  8029d0:	f800283a 	ret
  8029d4:	11400054 	ori	r5,r2,1
  8029d8:	817fff15 	stw	r5,-4(r16)
  8029dc:	30800015 	stw	r2,0(r6)
  8029e0:	11408028 	cmpgeui	r5,r2,512
  8029e4:	283fd426 	beq	r5,zero,802938 <_free_r+0xa8>
  8029e8:	100ad27a 	srli	r5,r2,9
  8029ec:	29800168 	cmpgeui	r6,r5,5
  8029f0:	3000341e 	bne	r6,zero,802ac4 <_free_r+0x234>
  8029f4:	100ad1ba 	srli	r5,r2,6
  8029f8:	29800e44 	addi	r6,r5,57
  8029fc:	300c90fa 	slli	r6,r6,3
  802a00:	29c00e04 	addi	r7,r5,56
  802a04:	218d883a 	add	r6,r4,r6
  802a08:	31400017 	ldw	r5,0(r6)
  802a0c:	31bffe04 	addi	r6,r6,-8
  802a10:	31404226 	beq	r6,r5,802b1c <_free_r+0x28c>
  802a14:	01ffff04 	movi	r7,-4
  802a18:	29000117 	ldw	r4,4(r5)
  802a1c:	21c8703a 	and	r4,r4,r7
  802a20:	1100022e 	bgeu	r2,r4,802a2c <_free_r+0x19c>
  802a24:	29400217 	ldw	r5,8(r5)
  802a28:	317ffb1e 	bne	r6,r5,802a18 <_free_r+0x188>
  802a2c:	29800317 	ldw	r6,12(r5)
  802a30:	19800315 	stw	r6,12(r3)
  802a34:	19400215 	stw	r5,8(r3)
  802a38:	30c00215 	stw	r3,8(r6)
  802a3c:	28c00315 	stw	r3,12(r5)
  802a40:	003fcd06 	br	802978 <_free_r+0xe8>
  802a44:	40004d1e 	bne	r8,zero,802b7c <_free_r+0x2ec>
  802a48:	31000317 	ldw	r4,12(r6)
  802a4c:	31800217 	ldw	r6,8(r6)
  802a50:	2885883a 	add	r2,r5,r2
  802a54:	11400054 	ori	r5,r2,1
  802a58:	31000315 	stw	r4,12(r6)
  802a5c:	21800215 	stw	r6,8(r4)
  802a60:	19400115 	stw	r5,4(r3)
  802a64:	1887883a 	add	r3,r3,r2
  802a68:	18800015 	stw	r2,0(r3)
  802a6c:	003fc206 	br	802978 <_free_r+0xe8>
  802a70:	39c0004c 	andi	r7,r7,1
  802a74:	1145883a 	add	r2,r2,r5
  802a78:	3800071e 	bne	r7,zero,802a98 <_free_r+0x208>
  802a7c:	81fffe17 	ldw	r7,-8(r16)
  802a80:	19c7c83a 	sub	r3,r3,r7
  802a84:	19400317 	ldw	r5,12(r3)
  802a88:	19800217 	ldw	r6,8(r3)
  802a8c:	11c5883a 	add	r2,r2,r7
  802a90:	31400315 	stw	r5,12(r6)
  802a94:	29800215 	stw	r6,8(r5)
  802a98:	01402034 	movhi	r5,128
  802a9c:	11800054 	ori	r6,r2,1
  802aa0:	295cd117 	ldw	r5,29508(r5)
  802aa4:	19800115 	stw	r6,4(r3)
  802aa8:	20c00215 	stw	r3,8(r4)
  802aac:	117fb236 	bltu	r2,r5,802978 <_free_r+0xe8>
  802ab0:	00802074 	movhi	r2,129
  802ab4:	11637917 	ldw	r5,-29212(r2)
  802ab8:	8809883a 	mov	r4,r17
  802abc:	08027740 	call	802774 <_malloc_trim_r>
  802ac0:	003fad06 	br	802978 <_free_r+0xe8>
  802ac4:	29800568 	cmpgeui	r6,r5,21
  802ac8:	30000926 	beq	r6,zero,802af0 <_free_r+0x260>
  802acc:	29801568 	cmpgeui	r6,r5,85
  802ad0:	3000191e 	bne	r6,zero,802b38 <_free_r+0x2a8>
  802ad4:	100ad33a 	srli	r5,r2,12
  802ad8:	29801bc4 	addi	r6,r5,111
  802adc:	300c90fa 	slli	r6,r6,3
  802ae0:	29c01b84 	addi	r7,r5,110
  802ae4:	003fc706 	br	802a04 <_free_r+0x174>
  802ae8:	1145883a 	add	r2,r2,r5
  802aec:	003fae06 	br	8029a8 <_free_r+0x118>
  802af0:	29801704 	addi	r6,r5,92
  802af4:	300c90fa 	slli	r6,r6,3
  802af8:	29c016c4 	addi	r7,r5,91
  802afc:	003fc106 	br	802a04 <_free_r+0x174>
  802b00:	20c00515 	stw	r3,20(r4)
  802b04:	20c00415 	stw	r3,16(r4)
  802b08:	19c00315 	stw	r7,12(r3)
  802b0c:	19c00215 	stw	r7,8(r3)
  802b10:	1a400115 	stw	r9,4(r3)
  802b14:	40800015 	stw	r2,0(r8)
  802b18:	003f9706 	br	802978 <_free_r+0xe8>
  802b1c:	380fd0ba 	srai	r7,r7,2
  802b20:	00800044 	movi	r2,1
  802b24:	22000117 	ldw	r8,4(r4)
  802b28:	11ce983a 	sll	r7,r2,r7
  802b2c:	3a0eb03a 	or	r7,r7,r8
  802b30:	21c00115 	stw	r7,4(r4)
  802b34:	003fbe06 	br	802a30 <_free_r+0x1a0>
  802b38:	29805568 	cmpgeui	r6,r5,341
  802b3c:	3000051e 	bne	r6,zero,802b54 <_free_r+0x2c4>
  802b40:	100ad3fa 	srli	r5,r2,15
  802b44:	29801e04 	addi	r6,r5,120
  802b48:	300c90fa 	slli	r6,r6,3
  802b4c:	29c01dc4 	addi	r7,r5,119
  802b50:	003fac06 	br	802a04 <_free_r+0x174>
  802b54:	29415568 	cmpgeui	r5,r5,1365
  802b58:	2800051e 	bne	r5,zero,802b70 <_free_r+0x2e0>
  802b5c:	100ad4ba 	srli	r5,r2,18
  802b60:	29801f44 	addi	r6,r5,125
  802b64:	300c90fa 	slli	r6,r6,3
  802b68:	29c01f04 	addi	r7,r5,124
  802b6c:	003fa506 	br	802a04 <_free_r+0x174>
  802b70:	0180fe04 	movi	r6,1016
  802b74:	01c01f84 	movi	r7,126
  802b78:	003fa206 	br	802a04 <_free_r+0x174>
  802b7c:	11000054 	ori	r4,r2,1
  802b80:	19000115 	stw	r4,4(r3)
  802b84:	30800015 	stw	r2,0(r6)
  802b88:	003f7b06 	br	802978 <_free_r+0xe8>

00802b8c <_lseek_r>:
  802b8c:	2807883a 	mov	r3,r5
  802b90:	defffe04 	addi	sp,sp,-8
  802b94:	dc000015 	stw	r16,0(sp)
  802b98:	300b883a 	mov	r5,r6
  802b9c:	00802074 	movhi	r2,129
  802ba0:	380d883a 	mov	r6,r7
  802ba4:	2021883a 	mov	r16,r4
  802ba8:	1809883a 	mov	r4,r3
  802bac:	dfc00115 	stw	ra,4(sp)
  802bb0:	10237a15 	stw	zero,-29208(r2)
  802bb4:	08035800 	call	803580 <lseek>
  802bb8:	10ffffd8 	cmpnei	r3,r2,-1
  802bbc:	18000426 	beq	r3,zero,802bd0 <_lseek_r+0x44>
  802bc0:	dfc00117 	ldw	ra,4(sp)
  802bc4:	dc000017 	ldw	r16,0(sp)
  802bc8:	dec00204 	addi	sp,sp,8
  802bcc:	f800283a 	ret
  802bd0:	00c02074 	movhi	r3,129
  802bd4:	18e37a17 	ldw	r3,-29208(r3)
  802bd8:	183ff926 	beq	r3,zero,802bc0 <_lseek_r+0x34>
  802bdc:	80c00015 	stw	r3,0(r16)
  802be0:	dfc00117 	ldw	ra,4(sp)
  802be4:	dc000017 	ldw	r16,0(sp)
  802be8:	dec00204 	addi	sp,sp,8
  802bec:	f800283a 	ret

00802bf0 <__smakebuf_r>:
  802bf0:	2880030b 	ldhu	r2,12(r5)
  802bf4:	deffe804 	addi	sp,sp,-96
  802bf8:	dc001215 	stw	r16,72(sp)
  802bfc:	dfc01715 	stw	ra,92(sp)
  802c00:	dd001615 	stw	r20,88(sp)
  802c04:	dcc01515 	stw	r19,84(sp)
  802c08:	dc801415 	stw	r18,80(sp)
  802c0c:	dc401315 	stw	r17,76(sp)
  802c10:	10c0008c 	andi	r3,r2,2
  802c14:	2821883a 	mov	r16,r5
  802c18:	18000d26 	beq	r3,zero,802c50 <__smakebuf_r+0x60>
  802c1c:	288010c4 	addi	r2,r5,67
  802c20:	28800015 	stw	r2,0(r5)
  802c24:	28800415 	stw	r2,16(r5)
  802c28:	00800044 	movi	r2,1
  802c2c:	28800515 	stw	r2,20(r5)
  802c30:	dfc01717 	ldw	ra,92(sp)
  802c34:	dd001617 	ldw	r20,88(sp)
  802c38:	dcc01517 	ldw	r19,84(sp)
  802c3c:	dc801417 	ldw	r18,80(sp)
  802c40:	dc401317 	ldw	r17,76(sp)
  802c44:	dc001217 	ldw	r16,72(sp)
  802c48:	dec01804 	addi	sp,sp,96
  802c4c:	f800283a 	ret
  802c50:	2940038f 	ldh	r5,14(r5)
  802c54:	2023883a 	mov	r17,r4
  802c58:	28002816 	blt	r5,zero,802cfc <__smakebuf_r+0x10c>
  802c5c:	d80d883a 	mov	r6,sp
  802c60:	0802e9c0 	call	802e9c <_fstat_r>
  802c64:	10002416 	blt	r2,zero,802cf8 <__smakebuf_r+0x108>
  802c68:	d8800117 	ldw	r2,4(sp)
  802c6c:	10bc000c 	andi	r2,r2,61440
  802c70:	10880018 	cmpnei	r2,r2,8192
  802c74:	1000461e 	bne	r2,zero,802d90 <__smakebuf_r+0x1a0>
  802c78:	8140038f 	ldh	r5,14(r16)
  802c7c:	8809883a 	mov	r4,r17
  802c80:	0802efc0 	call	802efc <_isatty_r>
  802c84:	10003e26 	beq	r2,zero,802d80 <__smakebuf_r+0x190>
  802c88:	8080030b 	ldhu	r2,12(r16)
  802c8c:	80c010c4 	addi	r3,r16,67
  802c90:	80c00015 	stw	r3,0(r16)
  802c94:	10800054 	ori	r2,r2,1
  802c98:	8080030d 	sth	r2,12(r16)
  802c9c:	00800044 	movi	r2,1
  802ca0:	80c00415 	stw	r3,16(r16)
  802ca4:	80800515 	stw	r2,20(r16)
  802ca8:	04c00044 	movi	r19,1
  802cac:	05010004 	movi	r20,1024
  802cb0:	04820004 	movi	r18,2048
  802cb4:	a00b883a 	mov	r5,r20
  802cb8:	8809883a 	mov	r4,r17
  802cbc:	0800de00 	call	800de0 <_malloc_r>
  802cc0:	10001726 	beq	r2,zero,802d20 <__smakebuf_r+0x130>
  802cc4:	80c0030b 	ldhu	r3,12(r16)
  802cc8:	01002034 	movhi	r4,128
  802ccc:	21010d04 	addi	r4,r4,1076
  802cd0:	89000f15 	stw	r4,60(r17)
  802cd4:	18c02014 	ori	r3,r3,128
  802cd8:	80c0030d 	sth	r3,12(r16)
  802cdc:	80800015 	stw	r2,0(r16)
  802ce0:	80800415 	stw	r2,16(r16)
  802ce4:	85000515 	stw	r20,20(r16)
  802ce8:	98001d1e 	bne	r19,zero,802d60 <__smakebuf_r+0x170>
  802cec:	90c6b03a 	or	r3,r18,r3
  802cf0:	80c0030d 	sth	r3,12(r16)
  802cf4:	003fce06 	br	802c30 <__smakebuf_r+0x40>
  802cf8:	8080030b 	ldhu	r2,12(r16)
  802cfc:	1080200c 	andi	r2,r2,128
  802d00:	0027883a 	mov	r19,zero
  802d04:	10001326 	beq	r2,zero,802d54 <__smakebuf_r+0x164>
  802d08:	05001004 	movi	r20,64
  802d0c:	a00b883a 	mov	r5,r20
  802d10:	8809883a 	mov	r4,r17
  802d14:	0025883a 	mov	r18,zero
  802d18:	0800de00 	call	800de0 <_malloc_r>
  802d1c:	103fe91e 	bne	r2,zero,802cc4 <__smakebuf_r+0xd4>
  802d20:	8080030b 	ldhu	r2,12(r16)
  802d24:	10c0800c 	andi	r3,r2,512
  802d28:	183fc11e 	bne	r3,zero,802c30 <__smakebuf_r+0x40>
  802d2c:	00ffff04 	movi	r3,-4
  802d30:	10c4703a 	and	r2,r2,r3
  802d34:	10800094 	ori	r2,r2,2
  802d38:	80c010c4 	addi	r3,r16,67
  802d3c:	8080030d 	sth	r2,12(r16)
  802d40:	00800044 	movi	r2,1
  802d44:	80c00015 	stw	r3,0(r16)
  802d48:	80c00415 	stw	r3,16(r16)
  802d4c:	80800515 	stw	r2,20(r16)
  802d50:	003fb706 	br	802c30 <__smakebuf_r+0x40>
  802d54:	05010004 	movi	r20,1024
  802d58:	0025883a 	mov	r18,zero
  802d5c:	003fd506 	br	802cb4 <__smakebuf_r+0xc4>
  802d60:	8140038f 	ldh	r5,14(r16)
  802d64:	8809883a 	mov	r4,r17
  802d68:	0802efc0 	call	802efc <_isatty_r>
  802d6c:	80c0030b 	ldhu	r3,12(r16)
  802d70:	103fde26 	beq	r2,zero,802cec <__smakebuf_r+0xfc>
  802d74:	18ffff0c 	andi	r3,r3,65532
  802d78:	18c00054 	ori	r3,r3,1
  802d7c:	003fdb06 	br	802cec <__smakebuf_r+0xfc>
  802d80:	04c00044 	movi	r19,1
  802d84:	05010004 	movi	r20,1024
  802d88:	04820004 	movi	r18,2048
  802d8c:	003fc906 	br	802cb4 <__smakebuf_r+0xc4>
  802d90:	0027883a 	mov	r19,zero
  802d94:	05010004 	movi	r20,1024
  802d98:	04820004 	movi	r18,2048
  802d9c:	003fc506 	br	802cb4 <__smakebuf_r+0xc4>

00802da0 <__swhatbuf_r>:
  802da0:	deffea04 	addi	sp,sp,-88
  802da4:	dc001215 	stw	r16,72(sp)
  802da8:	2821883a 	mov	r16,r5
  802dac:	2940038f 	ldh	r5,14(r5)
  802db0:	dc801415 	stw	r18,80(sp)
  802db4:	dc401315 	stw	r17,76(sp)
  802db8:	dfc01515 	stw	ra,84(sp)
  802dbc:	3023883a 	mov	r17,r6
  802dc0:	3825883a 	mov	r18,r7
  802dc4:	28001016 	blt	r5,zero,802e08 <__swhatbuf_r+0x68>
  802dc8:	d80d883a 	mov	r6,sp
  802dcc:	0802e9c0 	call	802e9c <_fstat_r>
  802dd0:	10000d16 	blt	r2,zero,802e08 <__swhatbuf_r+0x68>
  802dd4:	d8c00117 	ldw	r3,4(sp)
  802dd8:	00820004 	movi	r2,2048
  802ddc:	18fc000c 	andi	r3,r3,61440
  802de0:	18c80020 	cmpeqi	r3,r3,8192
  802de4:	90c00015 	stw	r3,0(r18)
  802de8:	00c10004 	movi	r3,1024
  802dec:	88c00015 	stw	r3,0(r17)
  802df0:	dfc01517 	ldw	ra,84(sp)
  802df4:	dc801417 	ldw	r18,80(sp)
  802df8:	dc401317 	ldw	r17,76(sp)
  802dfc:	dc001217 	ldw	r16,72(sp)
  802e00:	dec01604 	addi	sp,sp,88
  802e04:	f800283a 	ret
  802e08:	8080030b 	ldhu	r2,12(r16)
  802e0c:	90000015 	stw	zero,0(r18)
  802e10:	1080200c 	andi	r2,r2,128
  802e14:	10000426 	beq	r2,zero,802e28 <__swhatbuf_r+0x88>
  802e18:	00801004 	movi	r2,64
  802e1c:	88800015 	stw	r2,0(r17)
  802e20:	0005883a 	mov	r2,zero
  802e24:	003ff206 	br	802df0 <__swhatbuf_r+0x50>
  802e28:	00810004 	movi	r2,1024
  802e2c:	88800015 	stw	r2,0(r17)
  802e30:	0005883a 	mov	r2,zero
  802e34:	003fee06 	br	802df0 <__swhatbuf_r+0x50>

00802e38 <_read_r>:
  802e38:	2807883a 	mov	r3,r5
  802e3c:	defffe04 	addi	sp,sp,-8
  802e40:	dc000015 	stw	r16,0(sp)
  802e44:	300b883a 	mov	r5,r6
  802e48:	00802074 	movhi	r2,129
  802e4c:	380d883a 	mov	r6,r7
  802e50:	2021883a 	mov	r16,r4
  802e54:	1809883a 	mov	r4,r3
  802e58:	dfc00115 	stw	ra,4(sp)
  802e5c:	10237a15 	stw	zero,-29208(r2)
  802e60:	08037600 	call	803760 <read>
  802e64:	10ffffd8 	cmpnei	r3,r2,-1
  802e68:	18000426 	beq	r3,zero,802e7c <_read_r+0x44>
  802e6c:	dfc00117 	ldw	ra,4(sp)
  802e70:	dc000017 	ldw	r16,0(sp)
  802e74:	dec00204 	addi	sp,sp,8
  802e78:	f800283a 	ret
  802e7c:	00c02074 	movhi	r3,129
  802e80:	18e37a17 	ldw	r3,-29208(r3)
  802e84:	183ff926 	beq	r3,zero,802e6c <_read_r+0x34>
  802e88:	80c00015 	stw	r3,0(r16)
  802e8c:	dfc00117 	ldw	ra,4(sp)
  802e90:	dc000017 	ldw	r16,0(sp)
  802e94:	dec00204 	addi	sp,sp,8
  802e98:	f800283a 	ret

00802e9c <_fstat_r>:
  802e9c:	2807883a 	mov	r3,r5
  802ea0:	defffe04 	addi	sp,sp,-8
  802ea4:	dc000015 	stw	r16,0(sp)
  802ea8:	00802074 	movhi	r2,129
  802eac:	300b883a 	mov	r5,r6
  802eb0:	2021883a 	mov	r16,r4
  802eb4:	1809883a 	mov	r4,r3
  802eb8:	dfc00115 	stw	ra,4(sp)
  802ebc:	10237a15 	stw	zero,-29208(r2)
  802ec0:	08032b00 	call	8032b0 <fstat>
  802ec4:	10ffffd8 	cmpnei	r3,r2,-1
  802ec8:	18000426 	beq	r3,zero,802edc <_fstat_r+0x40>
  802ecc:	dfc00117 	ldw	ra,4(sp)
  802ed0:	dc000017 	ldw	r16,0(sp)
  802ed4:	dec00204 	addi	sp,sp,8
  802ed8:	f800283a 	ret
  802edc:	00c02074 	movhi	r3,129
  802ee0:	18e37a17 	ldw	r3,-29208(r3)
  802ee4:	183ff926 	beq	r3,zero,802ecc <_fstat_r+0x30>
  802ee8:	80c00015 	stw	r3,0(r16)
  802eec:	dfc00117 	ldw	ra,4(sp)
  802ef0:	dc000017 	ldw	r16,0(sp)
  802ef4:	dec00204 	addi	sp,sp,8
  802ef8:	f800283a 	ret

00802efc <_isatty_r>:
  802efc:	defffe04 	addi	sp,sp,-8
  802f00:	dc000015 	stw	r16,0(sp)
  802f04:	00802074 	movhi	r2,129
  802f08:	2021883a 	mov	r16,r4
  802f0c:	2809883a 	mov	r4,r5
  802f10:	dfc00115 	stw	ra,4(sp)
  802f14:	10237a15 	stw	zero,-29208(r2)
  802f18:	08033a80 	call	8033a8 <isatty>
  802f1c:	10ffffd8 	cmpnei	r3,r2,-1
  802f20:	18000426 	beq	r3,zero,802f34 <_isatty_r+0x38>
  802f24:	dfc00117 	ldw	ra,4(sp)
  802f28:	dc000017 	ldw	r16,0(sp)
  802f2c:	dec00204 	addi	sp,sp,8
  802f30:	f800283a 	ret
  802f34:	00c02074 	movhi	r3,129
  802f38:	18e37a17 	ldw	r3,-29208(r3)
  802f3c:	183ff926 	beq	r3,zero,802f24 <_isatty_r+0x28>
  802f40:	80c00015 	stw	r3,0(r16)
  802f44:	dfc00117 	ldw	ra,4(sp)
  802f48:	dc000017 	ldw	r16,0(sp)
  802f4c:	dec00204 	addi	sp,sp,8
  802f50:	f800283a 	ret

00802f54 <__divsi3>:
  802f54:	20001a16 	blt	r4,zero,802fc0 <__divsi3+0x6c>
  802f58:	000f883a 	mov	r7,zero
  802f5c:	2800020e 	bge	r5,zero,802f68 <__divsi3+0x14>
  802f60:	014bc83a 	sub	r5,zero,r5
  802f64:	39c0005c 	xori	r7,r7,1
  802f68:	200d883a 	mov	r6,r4
  802f6c:	00c00044 	movi	r3,1
  802f70:	2900092e 	bgeu	r5,r4,802f98 <__divsi3+0x44>
  802f74:	00800804 	movi	r2,32
  802f78:	00c00044 	movi	r3,1
  802f7c:	00000106 	br	802f84 <__divsi3+0x30>
  802f80:	10001226 	beq	r2,zero,802fcc <__divsi3+0x78>
  802f84:	294b883a 	add	r5,r5,r5
  802f88:	10bfffc4 	addi	r2,r2,-1
  802f8c:	18c7883a 	add	r3,r3,r3
  802f90:	293ffb36 	bltu	r5,r4,802f80 <__divsi3+0x2c>
  802f94:	18000d26 	beq	r3,zero,802fcc <__divsi3+0x78>
  802f98:	0005883a 	mov	r2,zero
  802f9c:	31400236 	bltu	r6,r5,802fa8 <__divsi3+0x54>
  802fa0:	314dc83a 	sub	r6,r6,r5
  802fa4:	10c4b03a 	or	r2,r2,r3
  802fa8:	1806d07a 	srli	r3,r3,1
  802fac:	280ad07a 	srli	r5,r5,1
  802fb0:	183ffa1e 	bne	r3,zero,802f9c <__divsi3+0x48>
  802fb4:	38000126 	beq	r7,zero,802fbc <__divsi3+0x68>
  802fb8:	0085c83a 	sub	r2,zero,r2
  802fbc:	f800283a 	ret
  802fc0:	0109c83a 	sub	r4,zero,r4
  802fc4:	01c00044 	movi	r7,1
  802fc8:	003fe406 	br	802f5c <__divsi3+0x8>
  802fcc:	0005883a 	mov	r2,zero
  802fd0:	003ff806 	br	802fb4 <__divsi3+0x60>

00802fd4 <__modsi3>:
  802fd4:	20001916 	blt	r4,zero,80303c <__modsi3+0x68>
  802fd8:	000f883a 	mov	r7,zero
  802fdc:	2005883a 	mov	r2,r4
  802fe0:	2800010e 	bge	r5,zero,802fe8 <__modsi3+0x14>
  802fe4:	014bc83a 	sub	r5,zero,r5
  802fe8:	00c00044 	movi	r3,1
  802fec:	2900092e 	bgeu	r5,r4,803014 <__modsi3+0x40>
  802ff0:	01800804 	movi	r6,32
  802ff4:	00c00044 	movi	r3,1
  802ff8:	00000106 	br	803000 <__modsi3+0x2c>
  802ffc:	30000d26 	beq	r6,zero,803034 <__modsi3+0x60>
  803000:	294b883a 	add	r5,r5,r5
  803004:	31bfffc4 	addi	r6,r6,-1
  803008:	18c7883a 	add	r3,r3,r3
  80300c:	293ffb36 	bltu	r5,r4,802ffc <__modsi3+0x28>
  803010:	18000826 	beq	r3,zero,803034 <__modsi3+0x60>
  803014:	1806d07a 	srli	r3,r3,1
  803018:	11400136 	bltu	r2,r5,803020 <__modsi3+0x4c>
  80301c:	1145c83a 	sub	r2,r2,r5
  803020:	280ad07a 	srli	r5,r5,1
  803024:	183ffb1e 	bne	r3,zero,803014 <__modsi3+0x40>
  803028:	38000126 	beq	r7,zero,803030 <__modsi3+0x5c>
  80302c:	0085c83a 	sub	r2,zero,r2
  803030:	f800283a 	ret
  803034:	2005883a 	mov	r2,r4
  803038:	003ffb06 	br	803028 <__modsi3+0x54>
  80303c:	0109c83a 	sub	r4,zero,r4
  803040:	01c00044 	movi	r7,1
  803044:	003fe506 	br	802fdc <__modsi3+0x8>

00803048 <__udivsi3>:
  803048:	200d883a 	mov	r6,r4
  80304c:	2900152e 	bgeu	r5,r4,8030a4 <__udivsi3+0x5c>
  803050:	28001416 	blt	r5,zero,8030a4 <__udivsi3+0x5c>
  803054:	00800804 	movi	r2,32
  803058:	00c00044 	movi	r3,1
  80305c:	00000206 	br	803068 <__udivsi3+0x20>
  803060:	10000e26 	beq	r2,zero,80309c <__udivsi3+0x54>
  803064:	28000516 	blt	r5,zero,80307c <__udivsi3+0x34>
  803068:	294b883a 	add	r5,r5,r5
  80306c:	10bfffc4 	addi	r2,r2,-1
  803070:	18c7883a 	add	r3,r3,r3
  803074:	293ffa36 	bltu	r5,r4,803060 <__udivsi3+0x18>
  803078:	18000826 	beq	r3,zero,80309c <__udivsi3+0x54>
  80307c:	0005883a 	mov	r2,zero
  803080:	31400236 	bltu	r6,r5,80308c <__udivsi3+0x44>
  803084:	314dc83a 	sub	r6,r6,r5
  803088:	10c4b03a 	or	r2,r2,r3
  80308c:	1806d07a 	srli	r3,r3,1
  803090:	280ad07a 	srli	r5,r5,1
  803094:	183ffa1e 	bne	r3,zero,803080 <__udivsi3+0x38>
  803098:	f800283a 	ret
  80309c:	0005883a 	mov	r2,zero
  8030a0:	f800283a 	ret
  8030a4:	00c00044 	movi	r3,1
  8030a8:	003ff406 	br	80307c <__udivsi3+0x34>

008030ac <__umodsi3>:
  8030ac:	2005883a 	mov	r2,r4
  8030b0:	2900132e 	bgeu	r5,r4,803100 <__umodsi3+0x54>
  8030b4:	28001216 	blt	r5,zero,803100 <__umodsi3+0x54>
  8030b8:	01800804 	movi	r6,32
  8030bc:	00c00044 	movi	r3,1
  8030c0:	00000206 	br	8030cc <__umodsi3+0x20>
  8030c4:	30000c26 	beq	r6,zero,8030f8 <__umodsi3+0x4c>
  8030c8:	28000516 	blt	r5,zero,8030e0 <__umodsi3+0x34>
  8030cc:	294b883a 	add	r5,r5,r5
  8030d0:	31bfffc4 	addi	r6,r6,-1
  8030d4:	18c7883a 	add	r3,r3,r3
  8030d8:	293ffa36 	bltu	r5,r4,8030c4 <__umodsi3+0x18>
  8030dc:	18000626 	beq	r3,zero,8030f8 <__umodsi3+0x4c>
  8030e0:	1806d07a 	srli	r3,r3,1
  8030e4:	11400136 	bltu	r2,r5,8030ec <__umodsi3+0x40>
  8030e8:	1145c83a 	sub	r2,r2,r5
  8030ec:	280ad07a 	srli	r5,r5,1
  8030f0:	183ffb1e 	bne	r3,zero,8030e0 <__umodsi3+0x34>
  8030f4:	f800283a 	ret
  8030f8:	2005883a 	mov	r2,r4
  8030fc:	f800283a 	ret
  803100:	00c00044 	movi	r3,1
  803104:	003ff606 	br	8030e0 <__umodsi3+0x34>

00803108 <__mulsi3>:
  803108:	0005883a 	mov	r2,zero
  80310c:	20000726 	beq	r4,zero,80312c <__mulsi3+0x24>
  803110:	20c0004c 	andi	r3,r4,1
  803114:	2008d07a 	srli	r4,r4,1
  803118:	18000126 	beq	r3,zero,803120 <__mulsi3+0x18>
  80311c:	1145883a 	add	r2,r2,r5
  803120:	294b883a 	add	r5,r5,r5
  803124:	203ffa1e 	bne	r4,zero,803110 <__mulsi3+0x8>
  803128:	f800283a 	ret
  80312c:	f800283a 	ret

00803130 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803130:	defffe04 	addi	sp,sp,-8
  803134:	dfc00115 	stw	ra,4(sp)
  803138:	df000015 	stw	fp,0(sp)
  80313c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803140:	d0a00917 	ldw	r2,-32732(gp)
  803144:	10000326 	beq	r2,zero,803154 <alt_get_errno+0x24>
  803148:	d0a00917 	ldw	r2,-32732(gp)
  80314c:	103ee83a 	callr	r2
  803150:	00000106 	br	803158 <alt_get_errno+0x28>
  803154:	d0a6ac04 	addi	r2,gp,-25936
}
  803158:	e037883a 	mov	sp,fp
  80315c:	dfc00117 	ldw	ra,4(sp)
  803160:	df000017 	ldw	fp,0(sp)
  803164:	dec00204 	addi	sp,sp,8
  803168:	f800283a 	ret

0080316c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80316c:	defffb04 	addi	sp,sp,-20
  803170:	dfc00415 	stw	ra,16(sp)
  803174:	df000315 	stw	fp,12(sp)
  803178:	df000304 	addi	fp,sp,12
  80317c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803180:	e0bffd17 	ldw	r2,-12(fp)
  803184:	10000916 	blt	r2,zero,8031ac <close+0x40>
  803188:	e0fffd17 	ldw	r3,-12(fp)
  80318c:	1805883a 	mov	r2,r3
  803190:	1085883a 	add	r2,r2,r2
  803194:	10c5883a 	add	r2,r2,r3
  803198:	100490ba 	slli	r2,r2,2
  80319c:	00c02034 	movhi	r3,128
  8031a0:	18d85604 	addi	r3,r3,24920
  8031a4:	10c5883a 	add	r2,r2,r3
  8031a8:	00000106 	br	8031b0 <close+0x44>
  8031ac:	0005883a 	mov	r2,zero
  8031b0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
  8031b4:	e0bfff17 	ldw	r2,-4(fp)
  8031b8:	10001926 	beq	r2,zero,803220 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8031bc:	e0bfff17 	ldw	r2,-4(fp)
  8031c0:	10800017 	ldw	r2,0(r2)
  8031c4:	10800417 	ldw	r2,16(r2)
  8031c8:	10000626 	beq	r2,zero,8031e4 <close+0x78>
  8031cc:	e0bfff17 	ldw	r2,-4(fp)
  8031d0:	10800017 	ldw	r2,0(r2)
  8031d4:	10800417 	ldw	r2,16(r2)
  8031d8:	e13fff17 	ldw	r4,-4(fp)
  8031dc:	103ee83a 	callr	r2
  8031e0:	00000106 	br	8031e8 <close+0x7c>
  8031e4:	0005883a 	mov	r2,zero
  8031e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8031ec:	e13ffd17 	ldw	r4,-12(fp)
  8031f0:	08038680 	call	803868 <alt_release_fd>
    if (rval < 0)
  8031f4:	e0bffe17 	ldw	r2,-8(fp)
  8031f8:	1000070e 	bge	r2,zero,803218 <close+0xac>
    {
      ALT_ERRNO = -rval;
  8031fc:	08031300 	call	803130 <alt_get_errno>
  803200:	1007883a 	mov	r3,r2
  803204:	e0bffe17 	ldw	r2,-8(fp)
  803208:	0085c83a 	sub	r2,zero,r2
  80320c:	18800015 	stw	r2,0(r3)
      return -1;
  803210:	00bfffc4 	movi	r2,-1
  803214:	00000706 	br	803234 <close+0xc8>
    }
    return 0;
  803218:	0005883a 	mov	r2,zero
  80321c:	00000506 	br	803234 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803220:	08031300 	call	803130 <alt_get_errno>
  803224:	1007883a 	mov	r3,r2
  803228:	00801444 	movi	r2,81
  80322c:	18800015 	stw	r2,0(r3)
    return -1;
  803230:	00bfffc4 	movi	r2,-1
  }
}
  803234:	e037883a 	mov	sp,fp
  803238:	dfc00117 	ldw	ra,4(sp)
  80323c:	df000017 	ldw	fp,0(sp)
  803240:	dec00204 	addi	sp,sp,8
  803244:	f800283a 	ret

00803248 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803248:	defffc04 	addi	sp,sp,-16
  80324c:	df000315 	stw	fp,12(sp)
  803250:	df000304 	addi	fp,sp,12
  803254:	e13fff15 	stw	r4,-4(fp)
  803258:	e17ffe15 	stw	r5,-8(fp)
  80325c:	e1bffd15 	stw	r6,-12(fp)
  return len;
  803260:	e0bffd17 	ldw	r2,-12(fp)
}
  803264:	e037883a 	mov	sp,fp
  803268:	df000017 	ldw	fp,0(sp)
  80326c:	dec00104 	addi	sp,sp,4
  803270:	f800283a 	ret

00803274 <alt_get_errno>:
{
  803274:	defffe04 	addi	sp,sp,-8
  803278:	dfc00115 	stw	ra,4(sp)
  80327c:	df000015 	stw	fp,0(sp)
  803280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803284:	d0a00917 	ldw	r2,-32732(gp)
  803288:	10000326 	beq	r2,zero,803298 <alt_get_errno+0x24>
  80328c:	d0a00917 	ldw	r2,-32732(gp)
  803290:	103ee83a 	callr	r2
  803294:	00000106 	br	80329c <alt_get_errno+0x28>
  803298:	d0a6ac04 	addi	r2,gp,-25936
}
  80329c:	e037883a 	mov	sp,fp
  8032a0:	dfc00117 	ldw	ra,4(sp)
  8032a4:	df000017 	ldw	fp,0(sp)
  8032a8:	dec00204 	addi	sp,sp,8
  8032ac:	f800283a 	ret

008032b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8032b0:	defffb04 	addi	sp,sp,-20
  8032b4:	dfc00415 	stw	ra,16(sp)
  8032b8:	df000315 	stw	fp,12(sp)
  8032bc:	df000304 	addi	fp,sp,12
  8032c0:	e13ffe15 	stw	r4,-8(fp)
  8032c4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8032c8:	e0bffe17 	ldw	r2,-8(fp)
  8032cc:	10000916 	blt	r2,zero,8032f4 <fstat+0x44>
  8032d0:	e0fffe17 	ldw	r3,-8(fp)
  8032d4:	1805883a 	mov	r2,r3
  8032d8:	1085883a 	add	r2,r2,r2
  8032dc:	10c5883a 	add	r2,r2,r3
  8032e0:	100490ba 	slli	r2,r2,2
  8032e4:	00c02034 	movhi	r3,128
  8032e8:	18d85604 	addi	r3,r3,24920
  8032ec:	10c5883a 	add	r2,r2,r3
  8032f0:	00000106 	br	8032f8 <fstat+0x48>
  8032f4:	0005883a 	mov	r2,zero
  8032f8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  8032fc:	e0bfff17 	ldw	r2,-4(fp)
  803300:	10001026 	beq	r2,zero,803344 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  803304:	e0bfff17 	ldw	r2,-4(fp)
  803308:	10800017 	ldw	r2,0(r2)
  80330c:	10800817 	ldw	r2,32(r2)
  803310:	10000726 	beq	r2,zero,803330 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
  803314:	e0bfff17 	ldw	r2,-4(fp)
  803318:	10800017 	ldw	r2,0(r2)
  80331c:	10800817 	ldw	r2,32(r2)
  803320:	e17ffd17 	ldw	r5,-12(fp)
  803324:	e13fff17 	ldw	r4,-4(fp)
  803328:	103ee83a 	callr	r2
  80332c:	00000a06 	br	803358 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  803330:	e0bffd17 	ldw	r2,-12(fp)
  803334:	00c80004 	movi	r3,8192
  803338:	10c00115 	stw	r3,4(r2)
      return 0;
  80333c:	0005883a 	mov	r2,zero
  803340:	00000506 	br	803358 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803344:	08032740 	call	803274 <alt_get_errno>
  803348:	1007883a 	mov	r3,r2
  80334c:	00801444 	movi	r2,81
  803350:	18800015 	stw	r2,0(r3)
    return -1;
  803354:	00bfffc4 	movi	r2,-1
  }
}
  803358:	e037883a 	mov	sp,fp
  80335c:	dfc00117 	ldw	ra,4(sp)
  803360:	df000017 	ldw	fp,0(sp)
  803364:	dec00204 	addi	sp,sp,8
  803368:	f800283a 	ret

0080336c <alt_get_errno>:
{
  80336c:	defffe04 	addi	sp,sp,-8
  803370:	dfc00115 	stw	ra,4(sp)
  803374:	df000015 	stw	fp,0(sp)
  803378:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80337c:	d0a00917 	ldw	r2,-32732(gp)
  803380:	10000326 	beq	r2,zero,803390 <alt_get_errno+0x24>
  803384:	d0a00917 	ldw	r2,-32732(gp)
  803388:	103ee83a 	callr	r2
  80338c:	00000106 	br	803394 <alt_get_errno+0x28>
  803390:	d0a6ac04 	addi	r2,gp,-25936
}
  803394:	e037883a 	mov	sp,fp
  803398:	dfc00117 	ldw	ra,4(sp)
  80339c:	df000017 	ldw	fp,0(sp)
  8033a0:	dec00204 	addi	sp,sp,8
  8033a4:	f800283a 	ret

008033a8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8033a8:	deffea04 	addi	sp,sp,-88
  8033ac:	dfc01515 	stw	ra,84(sp)
  8033b0:	df001415 	stw	fp,80(sp)
  8033b4:	df001404 	addi	fp,sp,80
  8033b8:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8033bc:	e0bfec17 	ldw	r2,-80(fp)
  8033c0:	10000916 	blt	r2,zero,8033e8 <isatty+0x40>
  8033c4:	e0ffec17 	ldw	r3,-80(fp)
  8033c8:	1805883a 	mov	r2,r3
  8033cc:	1085883a 	add	r2,r2,r2
  8033d0:	10c5883a 	add	r2,r2,r3
  8033d4:	100490ba 	slli	r2,r2,2
  8033d8:	00c02034 	movhi	r3,128
  8033dc:	18d85604 	addi	r3,r3,24920
  8033e0:	10c5883a 	add	r2,r2,r3
  8033e4:	00000106 	br	8033ec <isatty+0x44>
  8033e8:	0005883a 	mov	r2,zero
  8033ec:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  8033f0:	e0bfff17 	ldw	r2,-4(fp)
  8033f4:	10000e26 	beq	r2,zero,803430 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8033f8:	e0bfff17 	ldw	r2,-4(fp)
  8033fc:	10800017 	ldw	r2,0(r2)
  803400:	10800817 	ldw	r2,32(r2)
  803404:	1000021e 	bne	r2,zero,803410 <isatty+0x68>
    {
      return 1;
  803408:	00800044 	movi	r2,1
  80340c:	00000d06 	br	803444 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803410:	e0bfed04 	addi	r2,fp,-76
  803414:	100b883a 	mov	r5,r2
  803418:	e13fec17 	ldw	r4,-80(fp)
  80341c:	08032b00 	call	8032b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803420:	e0bfee17 	ldw	r2,-72(fp)
  803424:	10880020 	cmpeqi	r2,r2,8192
  803428:	10803fcc 	andi	r2,r2,255
  80342c:	00000506 	br	803444 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803430:	080336c0 	call	80336c <alt_get_errno>
  803434:	1007883a 	mov	r3,r2
  803438:	00801444 	movi	r2,81
  80343c:	18800015 	stw	r2,0(r3)
    return 0;
  803440:	0005883a 	mov	r2,zero
  }
}
  803444:	e037883a 	mov	sp,fp
  803448:	dfc00117 	ldw	ra,4(sp)
  80344c:	df000017 	ldw	fp,0(sp)
  803450:	dec00204 	addi	sp,sp,8
  803454:	f800283a 	ret

00803458 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  803458:	defffc04 	addi	sp,sp,-16
  80345c:	df000315 	stw	fp,12(sp)
  803460:	df000304 	addi	fp,sp,12
  803464:	e13fff15 	stw	r4,-4(fp)
  803468:	e17ffe15 	stw	r5,-8(fp)
  80346c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
  803470:	e0fffe17 	ldw	r3,-8(fp)
  803474:	e0bfff17 	ldw	r2,-4(fp)
  803478:	18800c26 	beq	r3,r2,8034ac <alt_load_section+0x54>
  {
    while( to != end )
  80347c:	00000806 	br	8034a0 <alt_load_section+0x48>
    {
      *to++ = *from++;
  803480:	e0ffff17 	ldw	r3,-4(fp)
  803484:	18800104 	addi	r2,r3,4
  803488:	e0bfff15 	stw	r2,-4(fp)
  80348c:	e0bffe17 	ldw	r2,-8(fp)
  803490:	11000104 	addi	r4,r2,4
  803494:	e13ffe15 	stw	r4,-8(fp)
  803498:	18c00017 	ldw	r3,0(r3)
  80349c:	10c00015 	stw	r3,0(r2)
    while( to != end )
  8034a0:	e0fffe17 	ldw	r3,-8(fp)
  8034a4:	e0bffd17 	ldw	r2,-12(fp)
  8034a8:	18bff51e 	bne	r3,r2,803480 <alt_load_section+0x28>
    }
  }
}
  8034ac:	0001883a 	nop
  8034b0:	e037883a 	mov	sp,fp
  8034b4:	df000017 	ldw	fp,0(sp)
  8034b8:	dec00104 	addi	sp,sp,4
  8034bc:	f800283a 	ret

008034c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8034c0:	defffe04 	addi	sp,sp,-8
  8034c4:	dfc00115 	stw	ra,4(sp)
  8034c8:	df000015 	stw	fp,0(sp)
  8034cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8034d0:	01802034 	movhi	r6,128
  8034d4:	319cdc04 	addi	r6,r6,29552
  8034d8:	01402034 	movhi	r5,128
  8034dc:	29564104 	addi	r5,r5,22788
  8034e0:	01002034 	movhi	r4,128
  8034e4:	211cdc04 	addi	r4,r4,29552
  8034e8:	08034580 	call	803458 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8034ec:	01802034 	movhi	r6,128
  8034f0:	31808e04 	addi	r6,r6,568
  8034f4:	01402034 	movhi	r5,128
  8034f8:	29400804 	addi	r5,r5,32
  8034fc:	01002034 	movhi	r4,128
  803500:	21000804 	addi	r4,r4,32
  803504:	08034580 	call	803458 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  803508:	01802034 	movhi	r6,128
  80350c:	31964104 	addi	r6,r6,22788
  803510:	01402034 	movhi	r5,128
  803514:	29563304 	addi	r5,r5,22732
  803518:	01002034 	movhi	r4,128
  80351c:	21163304 	addi	r4,r4,22732
  803520:	08034580 	call	803458 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  803524:	08048500 	call	804850 <alt_dcache_flush_all>
  alt_icache_flush_all();
  803528:	0804a480 	call	804a48 <alt_icache_flush_all>
}
  80352c:	0001883a 	nop
  803530:	e037883a 	mov	sp,fp
  803534:	dfc00117 	ldw	ra,4(sp)
  803538:	df000017 	ldw	fp,0(sp)
  80353c:	dec00204 	addi	sp,sp,8
  803540:	f800283a 	ret

00803544 <alt_get_errno>:
{
  803544:	defffe04 	addi	sp,sp,-8
  803548:	dfc00115 	stw	ra,4(sp)
  80354c:	df000015 	stw	fp,0(sp)
  803550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803554:	d0a00917 	ldw	r2,-32732(gp)
  803558:	10000326 	beq	r2,zero,803568 <alt_get_errno+0x24>
  80355c:	d0a00917 	ldw	r2,-32732(gp)
  803560:	103ee83a 	callr	r2
  803564:	00000106 	br	80356c <alt_get_errno+0x28>
  803568:	d0a6ac04 	addi	r2,gp,-25936
}
  80356c:	e037883a 	mov	sp,fp
  803570:	dfc00117 	ldw	ra,4(sp)
  803574:	df000017 	ldw	fp,0(sp)
  803578:	dec00204 	addi	sp,sp,8
  80357c:	f800283a 	ret

00803580 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803580:	defff904 	addi	sp,sp,-28
  803584:	dfc00615 	stw	ra,24(sp)
  803588:	df000515 	stw	fp,20(sp)
  80358c:	df000504 	addi	fp,sp,20
  803590:	e13ffd15 	stw	r4,-12(fp)
  803594:	e17ffc15 	stw	r5,-16(fp)
  803598:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80359c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8035a0:	e0bffd17 	ldw	r2,-12(fp)
  8035a4:	10000916 	blt	r2,zero,8035cc <lseek+0x4c>
  8035a8:	e0fffd17 	ldw	r3,-12(fp)
  8035ac:	1805883a 	mov	r2,r3
  8035b0:	1085883a 	add	r2,r2,r2
  8035b4:	10c5883a 	add	r2,r2,r3
  8035b8:	100490ba 	slli	r2,r2,2
  8035bc:	00c02034 	movhi	r3,128
  8035c0:	18d85604 	addi	r3,r3,24920
  8035c4:	10c5883a 	add	r2,r2,r3
  8035c8:	00000106 	br	8035d0 <lseek+0x50>
  8035cc:	0005883a 	mov	r2,zero
  8035d0:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
  8035d4:	e0bffe17 	ldw	r2,-8(fp)
  8035d8:	10001026 	beq	r2,zero,80361c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8035dc:	e0bffe17 	ldw	r2,-8(fp)
  8035e0:	10800017 	ldw	r2,0(r2)
  8035e4:	10800717 	ldw	r2,28(r2)
  8035e8:	10000926 	beq	r2,zero,803610 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8035ec:	e0bffe17 	ldw	r2,-8(fp)
  8035f0:	10800017 	ldw	r2,0(r2)
  8035f4:	10800717 	ldw	r2,28(r2)
  8035f8:	e1bffb17 	ldw	r6,-20(fp)
  8035fc:	e17ffc17 	ldw	r5,-16(fp)
  803600:	e13ffe17 	ldw	r4,-8(fp)
  803604:	103ee83a 	callr	r2
  803608:	e0bfff15 	stw	r2,-4(fp)
  80360c:	00000506 	br	803624 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803610:	00bfde84 	movi	r2,-134
  803614:	e0bfff15 	stw	r2,-4(fp)
  803618:	00000206 	br	803624 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80361c:	00bfebc4 	movi	r2,-81
  803620:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
  803624:	e0bfff17 	ldw	r2,-4(fp)
  803628:	1000070e 	bge	r2,zero,803648 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
  80362c:	08035440 	call	803544 <alt_get_errno>
  803630:	1007883a 	mov	r3,r2
  803634:	e0bfff17 	ldw	r2,-4(fp)
  803638:	0085c83a 	sub	r2,zero,r2
  80363c:	18800015 	stw	r2,0(r3)
    rc = -1;
  803640:	00bfffc4 	movi	r2,-1
  803644:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
  803648:	e0bfff17 	ldw	r2,-4(fp)
}
  80364c:	e037883a 	mov	sp,fp
  803650:	dfc00117 	ldw	ra,4(sp)
  803654:	df000017 	ldw	fp,0(sp)
  803658:	dec00204 	addi	sp,sp,8
  80365c:	f800283a 	ret

00803660 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803660:	defffd04 	addi	sp,sp,-12
  803664:	dfc00215 	stw	ra,8(sp)
  803668:	df000115 	stw	fp,4(sp)
  80366c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803670:	0009883a 	mov	r4,zero
  803674:	0803b040 	call	803b04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  803678:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80367c:	0803b400 	call	803b40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803680:	01802034 	movhi	r6,128
  803684:	31963904 	addi	r6,r6,22756
  803688:	01402034 	movhi	r5,128
  80368c:	29563904 	addi	r5,r5,22756
  803690:	01002034 	movhi	r4,128
  803694:	21163904 	addi	r4,r4,22756
  803698:	0804de80 	call	804de8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80369c:	08049800 	call	804980 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8036a0:	01002034 	movhi	r4,128
  8036a4:	21127904 	addi	r4,r4,18916
  8036a8:	08056240 	call	805624 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8036ac:	d0a6ad17 	ldw	r2,-25932(gp)
  8036b0:	d0e6ae17 	ldw	r3,-25928(gp)
  8036b4:	d126af17 	ldw	r4,-25924(gp)
  8036b8:	200d883a 	mov	r6,r4
  8036bc:	180b883a 	mov	r5,r3
  8036c0:	1009883a 	mov	r4,r2
  8036c4:	08002840 	call	800284 <main>
  8036c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8036cc:	01000044 	movi	r4,1
  8036d0:	080316c0 	call	80316c <close>
  exit (result);
  8036d4:	e13fff17 	ldw	r4,-4(fp)
  8036d8:	08056380 	call	805638 <exit>

008036dc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8036dc:	defffe04 	addi	sp,sp,-8
  8036e0:	df000115 	stw	fp,4(sp)
  8036e4:	df000104 	addi	fp,sp,4
  8036e8:	e13fff15 	stw	r4,-4(fp)
}
  8036ec:	0001883a 	nop
  8036f0:	e037883a 	mov	sp,fp
  8036f4:	df000017 	ldw	fp,0(sp)
  8036f8:	dec00104 	addi	sp,sp,4
  8036fc:	f800283a 	ret

00803700 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  803700:	defffe04 	addi	sp,sp,-8
  803704:	df000115 	stw	fp,4(sp)
  803708:	df000104 	addi	fp,sp,4
  80370c:	e13fff15 	stw	r4,-4(fp)
}
  803710:	0001883a 	nop
  803714:	e037883a 	mov	sp,fp
  803718:	df000017 	ldw	fp,0(sp)
  80371c:	dec00104 	addi	sp,sp,4
  803720:	f800283a 	ret

00803724 <alt_get_errno>:
{
  803724:	defffe04 	addi	sp,sp,-8
  803728:	dfc00115 	stw	ra,4(sp)
  80372c:	df000015 	stw	fp,0(sp)
  803730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803734:	d0a00917 	ldw	r2,-32732(gp)
  803738:	10000326 	beq	r2,zero,803748 <alt_get_errno+0x24>
  80373c:	d0a00917 	ldw	r2,-32732(gp)
  803740:	103ee83a 	callr	r2
  803744:	00000106 	br	80374c <alt_get_errno+0x28>
  803748:	d0a6ac04 	addi	r2,gp,-25936
}
  80374c:	e037883a 	mov	sp,fp
  803750:	dfc00117 	ldw	ra,4(sp)
  803754:	df000017 	ldw	fp,0(sp)
  803758:	dec00204 	addi	sp,sp,8
  80375c:	f800283a 	ret

00803760 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  803760:	defff904 	addi	sp,sp,-28
  803764:	dfc00615 	stw	ra,24(sp)
  803768:	df000515 	stw	fp,20(sp)
  80376c:	df000504 	addi	fp,sp,20
  803770:	e13ffd15 	stw	r4,-12(fp)
  803774:	e17ffc15 	stw	r5,-16(fp)
  803778:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80377c:	e0bffd17 	ldw	r2,-12(fp)
  803780:	10000916 	blt	r2,zero,8037a8 <read+0x48>
  803784:	e0fffd17 	ldw	r3,-12(fp)
  803788:	1805883a 	mov	r2,r3
  80378c:	1085883a 	add	r2,r2,r2
  803790:	10c5883a 	add	r2,r2,r3
  803794:	100490ba 	slli	r2,r2,2
  803798:	00c02034 	movhi	r3,128
  80379c:	18d85604 	addi	r3,r3,24920
  8037a0:	10c5883a 	add	r2,r2,r3
  8037a4:	00000106 	br	8037ac <read+0x4c>
  8037a8:	0005883a 	mov	r2,zero
  8037ac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  8037b0:	e0bfff17 	ldw	r2,-4(fp)
  8037b4:	10002226 	beq	r2,zero,803840 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8037b8:	e0bfff17 	ldw	r2,-4(fp)
  8037bc:	10800217 	ldw	r2,8(r2)
  8037c0:	108000cc 	andi	r2,r2,3
  8037c4:	10800060 	cmpeqi	r2,r2,1
  8037c8:	1000181e 	bne	r2,zero,80382c <read+0xcc>
        (fd->dev->read))
  8037cc:	e0bfff17 	ldw	r2,-4(fp)
  8037d0:	10800017 	ldw	r2,0(r2)
  8037d4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8037d8:	10001426 	beq	r2,zero,80382c <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8037dc:	e0bfff17 	ldw	r2,-4(fp)
  8037e0:	10800017 	ldw	r2,0(r2)
  8037e4:	10800517 	ldw	r2,20(r2)
  8037e8:	e0fffb17 	ldw	r3,-20(fp)
  8037ec:	180d883a 	mov	r6,r3
  8037f0:	e17ffc17 	ldw	r5,-16(fp)
  8037f4:	e13fff17 	ldw	r4,-4(fp)
  8037f8:	103ee83a 	callr	r2
  8037fc:	e0bffe15 	stw	r2,-8(fp)
  803800:	e0bffe17 	ldw	r2,-8(fp)
  803804:	1000070e 	bge	r2,zero,803824 <read+0xc4>
        {
          ALT_ERRNO = -rval;
  803808:	08037240 	call	803724 <alt_get_errno>
  80380c:	1007883a 	mov	r3,r2
  803810:	e0bffe17 	ldw	r2,-8(fp)
  803814:	0085c83a 	sub	r2,zero,r2
  803818:	18800015 	stw	r2,0(r3)
          return -1;
  80381c:	00bfffc4 	movi	r2,-1
  803820:	00000c06 	br	803854 <read+0xf4>
        }
        return rval;
  803824:	e0bffe17 	ldw	r2,-8(fp)
  803828:	00000a06 	br	803854 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80382c:	08037240 	call	803724 <alt_get_errno>
  803830:	1007883a 	mov	r3,r2
  803834:	00800344 	movi	r2,13
  803838:	18800015 	stw	r2,0(r3)
  80383c:	00000406 	br	803850 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  803840:	08037240 	call	803724 <alt_get_errno>
  803844:	1007883a 	mov	r3,r2
  803848:	00801444 	movi	r2,81
  80384c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803850:	00bfffc4 	movi	r2,-1
}
  803854:	e037883a 	mov	sp,fp
  803858:	dfc00117 	ldw	ra,4(sp)
  80385c:	df000017 	ldw	fp,0(sp)
  803860:	dec00204 	addi	sp,sp,8
  803864:	f800283a 	ret

00803868 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803868:	defffe04 	addi	sp,sp,-8
  80386c:	df000115 	stw	fp,4(sp)
  803870:	df000104 	addi	fp,sp,4
  803874:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803878:	e0bfff17 	ldw	r2,-4(fp)
  80387c:	108000d0 	cmplti	r2,r2,3
  803880:	1000101e 	bne	r2,zero,8038c4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
  803884:	e0ffff17 	ldw	r3,-4(fp)
  803888:	1805883a 	mov	r2,r3
  80388c:	1085883a 	add	r2,r2,r2
  803890:	10c5883a 	add	r2,r2,r3
  803894:	100490ba 	slli	r2,r2,2
  803898:	00c02034 	movhi	r3,128
  80389c:	10c7883a 	add	r3,r2,r3
  8038a0:	18185815 	stw	zero,24928(r3)
    alt_fd_list[fd].dev      = 0;
  8038a4:	e0ffff17 	ldw	r3,-4(fp)
  8038a8:	1805883a 	mov	r2,r3
  8038ac:	1085883a 	add	r2,r2,r2
  8038b0:	10c5883a 	add	r2,r2,r3
  8038b4:	100490ba 	slli	r2,r2,2
  8038b8:	00c02034 	movhi	r3,128
  8038bc:	10c7883a 	add	r3,r2,r3
  8038c0:	18185615 	stw	zero,24920(r3)
  }
}
  8038c4:	0001883a 	nop
  8038c8:	e037883a 	mov	sp,fp
  8038cc:	df000017 	ldw	fp,0(sp)
  8038d0:	dec00104 	addi	sp,sp,4
  8038d4:	f800283a 	ret

008038d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8038d8:	defff904 	addi	sp,sp,-28
  8038dc:	df000615 	stw	fp,24(sp)
  8038e0:	df000604 	addi	fp,sp,24
  8038e4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
  8038e8:	0005303a 	rdctl	r2,status
  8038ec:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8038f0:	e0fffd17 	ldw	r3,-12(fp)
  8038f4:	00bfff84 	movi	r2,-2
  8038f8:	1884703a 	and	r2,r3,r2
  8038fc:	1001703a 	wrctl	status,r2
  return context;
  803900:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803904:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803908:	d0a00a17 	ldw	r2,-32728(gp)
  80390c:	10c000c4 	addi	r3,r2,3
  803910:	00bfff04 	movi	r2,-4
  803914:	1884703a 	and	r2,r3,r2
  803918:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80391c:	d0e00a17 	ldw	r3,-32728(gp)
  803920:	e0bffa17 	ldw	r2,-24(fp)
  803924:	1887883a 	add	r3,r3,r2
  803928:	00804034 	movhi	r2,256
  80392c:	10800004 	addi	r2,r2,0
  803930:	10c0072e 	bgeu	r2,r3,803950 <sbrk+0x78>
  803934:	e0bfff17 	ldw	r2,-4(fp)
  803938:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  80393c:	e0bffc17 	ldw	r2,-16(fp)
  803940:	1001703a 	wrctl	status,r2
}
  803944:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803948:	00bfffc4 	movi	r2,-1
  80394c:	00000c06 	br	803980 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  803950:	d0a00a17 	ldw	r2,-32728(gp)
  803954:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
  803958:	d0e00a17 	ldw	r3,-32728(gp)
  80395c:	e0bffa17 	ldw	r2,-24(fp)
  803960:	1885883a 	add	r2,r3,r2
  803964:	d0a00a15 	stw	r2,-32728(gp)
  803968:	e0bfff17 	ldw	r2,-4(fp)
  80396c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  803970:	e0bffb17 	ldw	r2,-20(fp)
  803974:	1001703a 	wrctl	status,r2
}
  803978:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80397c:	e0bffe17 	ldw	r2,-8(fp)
} 
  803980:	e037883a 	mov	sp,fp
  803984:	df000017 	ldw	fp,0(sp)
  803988:	dec00104 	addi	sp,sp,4
  80398c:	f800283a 	ret

00803990 <alt_get_errno>:
{
  803990:	defffe04 	addi	sp,sp,-8
  803994:	dfc00115 	stw	ra,4(sp)
  803998:	df000015 	stw	fp,0(sp)
  80399c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8039a0:	d0a00917 	ldw	r2,-32732(gp)
  8039a4:	10000326 	beq	r2,zero,8039b4 <alt_get_errno+0x24>
  8039a8:	d0a00917 	ldw	r2,-32732(gp)
  8039ac:	103ee83a 	callr	r2
  8039b0:	00000106 	br	8039b8 <alt_get_errno+0x28>
  8039b4:	d0a6ac04 	addi	r2,gp,-25936
}
  8039b8:	e037883a 	mov	sp,fp
  8039bc:	dfc00117 	ldw	ra,4(sp)
  8039c0:	df000017 	ldw	fp,0(sp)
  8039c4:	dec00204 	addi	sp,sp,8
  8039c8:	f800283a 	ret

008039cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8039cc:	defff904 	addi	sp,sp,-28
  8039d0:	dfc00615 	stw	ra,24(sp)
  8039d4:	df000515 	stw	fp,20(sp)
  8039d8:	df000504 	addi	fp,sp,20
  8039dc:	e13ffd15 	stw	r4,-12(fp)
  8039e0:	e17ffc15 	stw	r5,-16(fp)
  8039e4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8039e8:	e0bffd17 	ldw	r2,-12(fp)
  8039ec:	10000916 	blt	r2,zero,803a14 <write+0x48>
  8039f0:	e0fffd17 	ldw	r3,-12(fp)
  8039f4:	1805883a 	mov	r2,r3
  8039f8:	1085883a 	add	r2,r2,r2
  8039fc:	10c5883a 	add	r2,r2,r3
  803a00:	100490ba 	slli	r2,r2,2
  803a04:	00c02034 	movhi	r3,128
  803a08:	18d85604 	addi	r3,r3,24920
  803a0c:	10c5883a 	add	r2,r2,r3
  803a10:	00000106 	br	803a18 <write+0x4c>
  803a14:	0005883a 	mov	r2,zero
  803a18:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  803a1c:	e0bfff17 	ldw	r2,-4(fp)
  803a20:	10002126 	beq	r2,zero,803aa8 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803a24:	e0bfff17 	ldw	r2,-4(fp)
  803a28:	10800217 	ldw	r2,8(r2)
  803a2c:	108000cc 	andi	r2,r2,3
  803a30:	10001826 	beq	r2,zero,803a94 <write+0xc8>
  803a34:	e0bfff17 	ldw	r2,-4(fp)
  803a38:	10800017 	ldw	r2,0(r2)
  803a3c:	10800617 	ldw	r2,24(r2)
  803a40:	10001426 	beq	r2,zero,803a94 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803a44:	e0bfff17 	ldw	r2,-4(fp)
  803a48:	10800017 	ldw	r2,0(r2)
  803a4c:	10800617 	ldw	r2,24(r2)
  803a50:	e0fffb17 	ldw	r3,-20(fp)
  803a54:	180d883a 	mov	r6,r3
  803a58:	e17ffc17 	ldw	r5,-16(fp)
  803a5c:	e13fff17 	ldw	r4,-4(fp)
  803a60:	103ee83a 	callr	r2
  803a64:	e0bffe15 	stw	r2,-8(fp)
  803a68:	e0bffe17 	ldw	r2,-8(fp)
  803a6c:	1000070e 	bge	r2,zero,803a8c <write+0xc0>
      {
        ALT_ERRNO = -rval;
  803a70:	08039900 	call	803990 <alt_get_errno>
  803a74:	1007883a 	mov	r3,r2
  803a78:	e0bffe17 	ldw	r2,-8(fp)
  803a7c:	0085c83a 	sub	r2,zero,r2
  803a80:	18800015 	stw	r2,0(r3)
        return -1;
  803a84:	00bfffc4 	movi	r2,-1
  803a88:	00000c06 	br	803abc <write+0xf0>
      }
      return rval;
  803a8c:	e0bffe17 	ldw	r2,-8(fp)
  803a90:	00000a06 	br	803abc <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803a94:	08039900 	call	803990 <alt_get_errno>
  803a98:	1007883a 	mov	r3,r2
  803a9c:	00800344 	movi	r2,13
  803aa0:	18800015 	stw	r2,0(r3)
  803aa4:	00000406 	br	803ab8 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803aa8:	08039900 	call	803990 <alt_get_errno>
  803aac:	1007883a 	mov	r3,r2
  803ab0:	00801444 	movi	r2,81
  803ab4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803ab8:	00bfffc4 	movi	r2,-1
}
  803abc:	e037883a 	mov	sp,fp
  803ac0:	dfc00117 	ldw	ra,4(sp)
  803ac4:	df000017 	ldw	fp,0(sp)
  803ac8:	dec00204 	addi	sp,sp,8
  803acc:	f800283a 	ret

00803ad0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  803ad0:	defffd04 	addi	sp,sp,-12
  803ad4:	dfc00215 	stw	ra,8(sp)
  803ad8:	df000115 	stw	fp,4(sp)
  803adc:	df000104 	addi	fp,sp,4
  803ae0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  803ae4:	d1600604 	addi	r5,gp,-32744
  803ae8:	e13fff17 	ldw	r4,-4(fp)
  803aec:	08048d80 	call	8048d8 <alt_dev_llist_insert>
}
  803af0:	e037883a 	mov	sp,fp
  803af4:	dfc00117 	ldw	ra,4(sp)
  803af8:	df000017 	ldw	fp,0(sp)
  803afc:	dec00204 	addi	sp,sp,8
  803b00:	f800283a 	ret

00803b04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  803b04:	defffd04 	addi	sp,sp,-12
  803b08:	dfc00215 	stw	ra,8(sp)
  803b0c:	df000115 	stw	fp,4(sp)
  803b10:	df000104 	addi	fp,sp,4
  803b14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  803b18:	08052880 	call	805288 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  803b1c:	00800044 	movi	r2,1
  803b20:	1001703a 	wrctl	status,r2
}
  803b24:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
  803b28:	0001883a 	nop
  803b2c:	e037883a 	mov	sp,fp
  803b30:	dfc00117 	ldw	ra,4(sp)
  803b34:	df000017 	ldw	fp,0(sp)
  803b38:	dec00204 	addi	sp,sp,8
  803b3c:	f800283a 	ret

00803b40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  803b40:	defffe04 	addi	sp,sp,-8
  803b44:	dfc00115 	stw	ra,4(sp)
  803b48:	df000015 	stw	fp,0(sp)
  803b4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  803b50:	01c0fa04 	movi	r7,1000
  803b54:	01800044 	movi	r6,1
  803b58:	000b883a 	mov	r5,zero
  803b5c:	01004034 	movhi	r4,256
  803b60:	21041804 	addi	r4,r4,4192
  803b64:	08046980 	call	804698 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  803b68:	01800404 	movi	r6,16
  803b6c:	000b883a 	mov	r5,zero
  803b70:	01002034 	movhi	r4,128
  803b74:	2118c004 	addi	r4,r4,25344
  803b78:	0803d0c0 	call	803d0c <altera_avalon_jtag_uart_init>
  803b7c:	01002034 	movhi	r4,128
  803b80:	2118b604 	addi	r4,r4,25304
  803b84:	0803ad00 	call	803ad0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
  803b88:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  803b8c:	0001883a 	nop
}
  803b90:	0001883a 	nop
  803b94:	e037883a 	mov	sp,fp
  803b98:	dfc00117 	ldw	ra,4(sp)
  803b9c:	df000017 	ldw	fp,0(sp)
  803ba0:	dec00204 	addi	sp,sp,8
  803ba4:	f800283a 	ret

00803ba8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  803ba8:	defffa04 	addi	sp,sp,-24
  803bac:	dfc00515 	stw	ra,20(sp)
  803bb0:	df000415 	stw	fp,16(sp)
  803bb4:	df000404 	addi	fp,sp,16
  803bb8:	e13ffe15 	stw	r4,-8(fp)
  803bbc:	e17ffd15 	stw	r5,-12(fp)
  803bc0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803bc4:	e0bffe17 	ldw	r2,-8(fp)
  803bc8:	10800017 	ldw	r2,0(r2)
  803bcc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  803bd0:	e0bfff17 	ldw	r2,-4(fp)
  803bd4:	10c00a04 	addi	r3,r2,40
  803bd8:	e0bffe17 	ldw	r2,-8(fp)
  803bdc:	10800217 	ldw	r2,8(r2)
  803be0:	100f883a 	mov	r7,r2
  803be4:	e1bffc17 	ldw	r6,-16(fp)
  803be8:	e17ffd17 	ldw	r5,-12(fp)
  803bec:	1809883a 	mov	r4,r3
  803bf0:	08041d40 	call	8041d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  803bf4:	e037883a 	mov	sp,fp
  803bf8:	dfc00117 	ldw	ra,4(sp)
  803bfc:	df000017 	ldw	fp,0(sp)
  803c00:	dec00204 	addi	sp,sp,8
  803c04:	f800283a 	ret

00803c08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  803c08:	defffa04 	addi	sp,sp,-24
  803c0c:	dfc00515 	stw	ra,20(sp)
  803c10:	df000415 	stw	fp,16(sp)
  803c14:	df000404 	addi	fp,sp,16
  803c18:	e13ffe15 	stw	r4,-8(fp)
  803c1c:	e17ffd15 	stw	r5,-12(fp)
  803c20:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803c24:	e0bffe17 	ldw	r2,-8(fp)
  803c28:	10800017 	ldw	r2,0(r2)
  803c2c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  803c30:	e0bfff17 	ldw	r2,-4(fp)
  803c34:	10c00a04 	addi	r3,r2,40
  803c38:	e0bffe17 	ldw	r2,-8(fp)
  803c3c:	10800217 	ldw	r2,8(r2)
  803c40:	100f883a 	mov	r7,r2
  803c44:	e1bffc17 	ldw	r6,-16(fp)
  803c48:	e17ffd17 	ldw	r5,-12(fp)
  803c4c:	1809883a 	mov	r4,r3
  803c50:	08043f40 	call	8043f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  803c54:	e037883a 	mov	sp,fp
  803c58:	dfc00117 	ldw	ra,4(sp)
  803c5c:	df000017 	ldw	fp,0(sp)
  803c60:	dec00204 	addi	sp,sp,8
  803c64:	f800283a 	ret

00803c68 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  803c68:	defffc04 	addi	sp,sp,-16
  803c6c:	dfc00315 	stw	ra,12(sp)
  803c70:	df000215 	stw	fp,8(sp)
  803c74:	df000204 	addi	fp,sp,8
  803c78:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803c7c:	e0bffe17 	ldw	r2,-8(fp)
  803c80:	10800017 	ldw	r2,0(r2)
  803c84:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  803c88:	e0bfff17 	ldw	r2,-4(fp)
  803c8c:	10c00a04 	addi	r3,r2,40
  803c90:	e0bffe17 	ldw	r2,-8(fp)
  803c94:	10800217 	ldw	r2,8(r2)
  803c98:	100b883a 	mov	r5,r2
  803c9c:	1809883a 	mov	r4,r3
  803ca0:	08040780 	call	804078 <altera_avalon_jtag_uart_close>
}
  803ca4:	e037883a 	mov	sp,fp
  803ca8:	dfc00117 	ldw	ra,4(sp)
  803cac:	df000017 	ldw	fp,0(sp)
  803cb0:	dec00204 	addi	sp,sp,8
  803cb4:	f800283a 	ret

00803cb8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  803cb8:	defffa04 	addi	sp,sp,-24
  803cbc:	dfc00515 	stw	ra,20(sp)
  803cc0:	df000415 	stw	fp,16(sp)
  803cc4:	df000404 	addi	fp,sp,16
  803cc8:	e13ffe15 	stw	r4,-8(fp)
  803ccc:	e17ffd15 	stw	r5,-12(fp)
  803cd0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  803cd4:	e0bffe17 	ldw	r2,-8(fp)
  803cd8:	10800017 	ldw	r2,0(r2)
  803cdc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  803ce0:	e0bfff17 	ldw	r2,-4(fp)
  803ce4:	10800a04 	addi	r2,r2,40
  803ce8:	e1bffc17 	ldw	r6,-16(fp)
  803cec:	e17ffd17 	ldw	r5,-12(fp)
  803cf0:	1009883a 	mov	r4,r2
  803cf4:	08040e00 	call	8040e0 <altera_avalon_jtag_uart_ioctl>
}
  803cf8:	e037883a 	mov	sp,fp
  803cfc:	dfc00117 	ldw	ra,4(sp)
  803d00:	df000017 	ldw	fp,0(sp)
  803d04:	dec00204 	addi	sp,sp,8
  803d08:	f800283a 	ret

00803d0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  803d0c:	defffa04 	addi	sp,sp,-24
  803d10:	dfc00515 	stw	ra,20(sp)
  803d14:	df000415 	stw	fp,16(sp)
  803d18:	df000404 	addi	fp,sp,16
  803d1c:	e13fff15 	stw	r4,-4(fp)
  803d20:	e17ffe15 	stw	r5,-8(fp)
  803d24:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803d28:	e0bfff17 	ldw	r2,-4(fp)
  803d2c:	00c00044 	movi	r3,1
  803d30:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  803d34:	e0bfff17 	ldw	r2,-4(fp)
  803d38:	10800017 	ldw	r2,0(r2)
  803d3c:	10800104 	addi	r2,r2,4
  803d40:	1007883a 	mov	r3,r2
  803d44:	e0bfff17 	ldw	r2,-4(fp)
  803d48:	10800817 	ldw	r2,32(r2)
  803d4c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  803d50:	e0bffe17 	ldw	r2,-8(fp)
  803d54:	e0fffd17 	ldw	r3,-12(fp)
  803d58:	d8000015 	stw	zero,0(sp)
  803d5c:	e1ffff17 	ldw	r7,-4(fp)
  803d60:	01802034 	movhi	r6,128
  803d64:	318f7304 	addi	r6,r6,15820
  803d68:	180b883a 	mov	r5,r3
  803d6c:	1009883a 	mov	r4,r2
  803d70:	0804a7c0 	call	804a7c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  803d74:	e0bfff17 	ldw	r2,-4(fp)
  803d78:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  803d7c:	e0bfff17 	ldw	r2,-4(fp)
  803d80:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803d84:	d0e6b117 	ldw	r3,-25916(gp)
  803d88:	e1ffff17 	ldw	r7,-4(fp)
  803d8c:	01802034 	movhi	r6,128
  803d90:	318ff604 	addi	r6,r6,16344
  803d94:	180b883a 	mov	r5,r3
  803d98:	1009883a 	mov	r4,r2
  803d9c:	080471c0 	call	80471c <alt_alarm_start>
  803da0:	1000040e 	bge	r2,zero,803db4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  803da4:	e0ffff17 	ldw	r3,-4(fp)
  803da8:	00a00034 	movhi	r2,32768
  803dac:	10bfffc4 	addi	r2,r2,-1
  803db0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  803db4:	0001883a 	nop
  803db8:	e037883a 	mov	sp,fp
  803dbc:	dfc00117 	ldw	ra,4(sp)
  803dc0:	df000017 	ldw	fp,0(sp)
  803dc4:	dec00204 	addi	sp,sp,8
  803dc8:	f800283a 	ret

00803dcc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  803dcc:	defff804 	addi	sp,sp,-32
  803dd0:	df000715 	stw	fp,28(sp)
  803dd4:	df000704 	addi	fp,sp,28
  803dd8:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  803ddc:	e0bff917 	ldw	r2,-28(fp)
  803de0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  803de4:	e0bffd17 	ldw	r2,-12(fp)
  803de8:	10800017 	ldw	r2,0(r2)
  803dec:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803df0:	e0bffc17 	ldw	r2,-16(fp)
  803df4:	10800104 	addi	r2,r2,4
  803df8:	10800037 	ldwio	r2,0(r2)
  803dfc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  803e00:	e0bffb17 	ldw	r2,-20(fp)
  803e04:	1080c00c 	andi	r2,r2,768
  803e08:	10006d26 	beq	r2,zero,803fc0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  803e0c:	e0bffb17 	ldw	r2,-20(fp)
  803e10:	1080400c 	andi	r2,r2,256
  803e14:	10003526 	beq	r2,zero,803eec <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  803e18:	00800074 	movhi	r2,1
  803e1c:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803e20:	e0bffd17 	ldw	r2,-12(fp)
  803e24:	10800a17 	ldw	r2,40(r2)
  803e28:	10800044 	addi	r2,r2,1
  803e2c:	1081ffcc 	andi	r2,r2,2047
  803e30:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  803e34:	e0bffd17 	ldw	r2,-12(fp)
  803e38:	10800b17 	ldw	r2,44(r2)
  803e3c:	e0fffa17 	ldw	r3,-24(fp)
  803e40:	18801526 	beq	r3,r2,803e98 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  803e44:	e0bffc17 	ldw	r2,-16(fp)
  803e48:	10800037 	ldwio	r2,0(r2)
  803e4c:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  803e50:	e0bfff17 	ldw	r2,-4(fp)
  803e54:	10a0000c 	andi	r2,r2,32768
  803e58:	10001126 	beq	r2,zero,803ea0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  803e5c:	e0bffd17 	ldw	r2,-12(fp)
  803e60:	10800a17 	ldw	r2,40(r2)
  803e64:	e0ffff17 	ldw	r3,-4(fp)
  803e68:	1809883a 	mov	r4,r3
  803e6c:	e0fffd17 	ldw	r3,-12(fp)
  803e70:	1885883a 	add	r2,r3,r2
  803e74:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803e78:	e0bffd17 	ldw	r2,-12(fp)
  803e7c:	10800a17 	ldw	r2,40(r2)
  803e80:	10800044 	addi	r2,r2,1
  803e84:	10c1ffcc 	andi	r3,r2,2047
  803e88:	e0bffd17 	ldw	r2,-12(fp)
  803e8c:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  803e90:	0001883a 	nop
      {
  803e94:	003fe206 	br	803e20 <altera_avalon_jtag_uart_irq+0x54>
          break;
  803e98:	0001883a 	nop
  803e9c:	00000106 	br	803ea4 <altera_avalon_jtag_uart_irq+0xd8>
          break;
  803ea0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  803ea4:	e0bfff17 	ldw	r2,-4(fp)
  803ea8:	10bfffec 	andhi	r2,r2,65535
  803eac:	10000f26 	beq	r2,zero,803eec <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803eb0:	e0bffd17 	ldw	r2,-12(fp)
  803eb4:	10c00817 	ldw	r3,32(r2)
  803eb8:	00bfff84 	movi	r2,-2
  803ebc:	1886703a 	and	r3,r3,r2
  803ec0:	e0bffd17 	ldw	r2,-12(fp)
  803ec4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  803ec8:	e0bffc17 	ldw	r2,-16(fp)
  803ecc:	10800104 	addi	r2,r2,4
  803ed0:	1007883a 	mov	r3,r2
  803ed4:	e0bffd17 	ldw	r2,-12(fp)
  803ed8:	10800817 	ldw	r2,32(r2)
  803edc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803ee0:	e0bffc17 	ldw	r2,-16(fp)
  803ee4:	10800104 	addi	r2,r2,4
  803ee8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  803eec:	e0bffb17 	ldw	r2,-20(fp)
  803ef0:	1080800c 	andi	r2,r2,512
  803ef4:	103fbe26 	beq	r2,zero,803df0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  803ef8:	e0bffb17 	ldw	r2,-20(fp)
  803efc:	1004d43a 	srli	r2,r2,16
  803f00:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  803f04:	00001406 	br	803f58 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  803f08:	e0bffc17 	ldw	r2,-16(fp)
  803f0c:	e0fffd17 	ldw	r3,-12(fp)
  803f10:	18c00d17 	ldw	r3,52(r3)
  803f14:	e13ffd17 	ldw	r4,-12(fp)
  803f18:	20c7883a 	add	r3,r4,r3
  803f1c:	18c20e03 	ldbu	r3,2104(r3)
  803f20:	18c03fcc 	andi	r3,r3,255
  803f24:	18c0201c 	xori	r3,r3,128
  803f28:	18ffe004 	addi	r3,r3,-128
  803f2c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803f30:	e0bffd17 	ldw	r2,-12(fp)
  803f34:	10800d17 	ldw	r2,52(r2)
  803f38:	10800044 	addi	r2,r2,1
  803f3c:	10c1ffcc 	andi	r3,r2,2047
  803f40:	e0bffd17 	ldw	r2,-12(fp)
  803f44:	10c00d15 	stw	r3,52(r2)
  803f48:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  803f4c:	e0bffe17 	ldw	r2,-8(fp)
  803f50:	10bfffc4 	addi	r2,r2,-1
  803f54:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
  803f58:	e0bffe17 	ldw	r2,-8(fp)
  803f5c:	10000526 	beq	r2,zero,803f74 <altera_avalon_jtag_uart_irq+0x1a8>
  803f60:	e0bffd17 	ldw	r2,-12(fp)
  803f64:	10c00d17 	ldw	r3,52(r2)
  803f68:	e0bffd17 	ldw	r2,-12(fp)
  803f6c:	10800c17 	ldw	r2,48(r2)
  803f70:	18bfe51e 	bne	r3,r2,803f08 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
  803f74:	e0bffe17 	ldw	r2,-8(fp)
  803f78:	103f9d26 	beq	r2,zero,803df0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  803f7c:	e0bffd17 	ldw	r2,-12(fp)
  803f80:	10c00817 	ldw	r3,32(r2)
  803f84:	00bfff44 	movi	r2,-3
  803f88:	1886703a 	and	r3,r3,r2
  803f8c:	e0bffd17 	ldw	r2,-12(fp)
  803f90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  803f94:	e0bffd17 	ldw	r2,-12(fp)
  803f98:	10800017 	ldw	r2,0(r2)
  803f9c:	10800104 	addi	r2,r2,4
  803fa0:	1007883a 	mov	r3,r2
  803fa4:	e0bffd17 	ldw	r2,-12(fp)
  803fa8:	10800817 	ldw	r2,32(r2)
  803fac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803fb0:	e0bffc17 	ldw	r2,-16(fp)
  803fb4:	10800104 	addi	r2,r2,4
  803fb8:	10800037 	ldwio	r2,0(r2)
  {
  803fbc:	003f8c06 	br	803df0 <altera_avalon_jtag_uart_irq+0x24>
      break;
  803fc0:	0001883a 	nop
      }
    }
  }
}
  803fc4:	0001883a 	nop
  803fc8:	e037883a 	mov	sp,fp
  803fcc:	df000017 	ldw	fp,0(sp)
  803fd0:	dec00104 	addi	sp,sp,4
  803fd4:	f800283a 	ret

00803fd8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  803fd8:	defffc04 	addi	sp,sp,-16
  803fdc:	df000315 	stw	fp,12(sp)
  803fe0:	df000304 	addi	fp,sp,12
  803fe4:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  803fe8:	e0bffd17 	ldw	r2,-12(fp)
  803fec:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  803ff0:	e0bfff17 	ldw	r2,-4(fp)
  803ff4:	10800017 	ldw	r2,0(r2)
  803ff8:	10800104 	addi	r2,r2,4
  803ffc:	10800037 	ldwio	r2,0(r2)
  804000:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  804004:	e0bffe17 	ldw	r2,-8(fp)
  804008:	1081000c 	andi	r2,r2,1024
  80400c:	10000b26 	beq	r2,zero,80403c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  804010:	e0bfff17 	ldw	r2,-4(fp)
  804014:	10800017 	ldw	r2,0(r2)
  804018:	10800104 	addi	r2,r2,4
  80401c:	1007883a 	mov	r3,r2
  804020:	e0bfff17 	ldw	r2,-4(fp)
  804024:	10800817 	ldw	r2,32(r2)
  804028:	10810014 	ori	r2,r2,1024
  80402c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  804030:	e0bfff17 	ldw	r2,-4(fp)
  804034:	10000915 	stw	zero,36(r2)
  804038:	00000a06 	br	804064 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80403c:	e0bfff17 	ldw	r2,-4(fp)
  804040:	10c00917 	ldw	r3,36(r2)
  804044:	00a00034 	movhi	r2,32768
  804048:	10bfff04 	addi	r2,r2,-4
  80404c:	10c00536 	bltu	r2,r3,804064 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  804050:	e0bfff17 	ldw	r2,-4(fp)
  804054:	10800917 	ldw	r2,36(r2)
  804058:	10c00044 	addi	r3,r2,1
  80405c:	e0bfff17 	ldw	r2,-4(fp)
  804060:	10c00915 	stw	r3,36(r2)
  804064:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  804068:	e037883a 	mov	sp,fp
  80406c:	df000017 	ldw	fp,0(sp)
  804070:	dec00104 	addi	sp,sp,4
  804074:	f800283a 	ret

00804078 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  804078:	defffd04 	addi	sp,sp,-12
  80407c:	df000215 	stw	fp,8(sp)
  804080:	df000204 	addi	fp,sp,8
  804084:	e13fff15 	stw	r4,-4(fp)
  804088:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80408c:	00000506 	br	8040a4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  804090:	e0bffe17 	ldw	r2,-8(fp)
  804094:	1090000c 	andi	r2,r2,16384
  804098:	10000226 	beq	r2,zero,8040a4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80409c:	00bffd44 	movi	r2,-11
  8040a0:	00000b06 	br	8040d0 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8040a4:	e0bfff17 	ldw	r2,-4(fp)
  8040a8:	10c00d17 	ldw	r3,52(r2)
  8040ac:	e0bfff17 	ldw	r2,-4(fp)
  8040b0:	10800c17 	ldw	r2,48(r2)
  8040b4:	18800526 	beq	r3,r2,8040cc <altera_avalon_jtag_uart_close+0x54>
  8040b8:	e0bfff17 	ldw	r2,-4(fp)
  8040bc:	10c00917 	ldw	r3,36(r2)
  8040c0:	e0bfff17 	ldw	r2,-4(fp)
  8040c4:	10800117 	ldw	r2,4(r2)
  8040c8:	18bff136 	bltu	r3,r2,804090 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
  8040cc:	0005883a 	mov	r2,zero
}
  8040d0:	e037883a 	mov	sp,fp
  8040d4:	df000017 	ldw	fp,0(sp)
  8040d8:	dec00104 	addi	sp,sp,4
  8040dc:	f800283a 	ret

008040e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8040e0:	defffa04 	addi	sp,sp,-24
  8040e4:	df000515 	stw	fp,20(sp)
  8040e8:	df000504 	addi	fp,sp,20
  8040ec:	e13ffd15 	stw	r4,-12(fp)
  8040f0:	e17ffc15 	stw	r5,-16(fp)
  8040f4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
  8040f8:	00bff9c4 	movi	r2,-25
  8040fc:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
  804100:	e0bffc17 	ldw	r2,-16(fp)
  804104:	109a8060 	cmpeqi	r2,r2,27137
  804108:	1000041e 	bne	r2,zero,80411c <altera_avalon_jtag_uart_ioctl+0x3c>
  80410c:	e0bffc17 	ldw	r2,-16(fp)
  804110:	109a80a0 	cmpeqi	r2,r2,27138
  804114:	1000181e 	bne	r2,zero,804178 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  804118:	00002906 	br	8041c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
  80411c:	e0bffd17 	ldw	r2,-12(fp)
  804120:	10c00117 	ldw	r3,4(r2)
  804124:	00a00034 	movhi	r2,32768
  804128:	10bfffc4 	addi	r2,r2,-1
  80412c:	18802126 	beq	r3,r2,8041b4 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
  804130:	e0bffb17 	ldw	r2,-20(fp)
  804134:	10800017 	ldw	r2,0(r2)
  804138:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80413c:	e0bffe17 	ldw	r2,-8(fp)
  804140:	10800090 	cmplti	r2,r2,2
  804144:	1000061e 	bne	r2,zero,804160 <altera_avalon_jtag_uart_ioctl+0x80>
  804148:	e0fffe17 	ldw	r3,-8(fp)
  80414c:	00a00034 	movhi	r2,32768
  804150:	10bfffc4 	addi	r2,r2,-1
  804154:	18800226 	beq	r3,r2,804160 <altera_avalon_jtag_uart_ioctl+0x80>
  804158:	e0bffe17 	ldw	r2,-8(fp)
  80415c:	00000206 	br	804168 <altera_avalon_jtag_uart_ioctl+0x88>
  804160:	00a00034 	movhi	r2,32768
  804164:	10bfff84 	addi	r2,r2,-2
  804168:	e0fffd17 	ldw	r3,-12(fp)
  80416c:	18800115 	stw	r2,4(r3)
      rc = 0;
  804170:	e03fff15 	stw	zero,-4(fp)
    break;
  804174:	00000f06 	br	8041b4 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
  804178:	e0bffd17 	ldw	r2,-12(fp)
  80417c:	10c00117 	ldw	r3,4(r2)
  804180:	00a00034 	movhi	r2,32768
  804184:	10bfffc4 	addi	r2,r2,-1
  804188:	18800c26 	beq	r3,r2,8041bc <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80418c:	e0bffd17 	ldw	r2,-12(fp)
  804190:	10c00917 	ldw	r3,36(r2)
  804194:	e0bffd17 	ldw	r2,-12(fp)
  804198:	10800117 	ldw	r2,4(r2)
  80419c:	1885803a 	cmpltu	r2,r3,r2
  8041a0:	10c03fcc 	andi	r3,r2,255
  8041a4:	e0bffb17 	ldw	r2,-20(fp)
  8041a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8041ac:	e03fff15 	stw	zero,-4(fp)
    break;
  8041b0:	00000206 	br	8041bc <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
  8041b4:	0001883a 	nop
  8041b8:	00000106 	br	8041c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
  8041bc:	0001883a 	nop
  }

  return rc;
  8041c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8041c4:	e037883a 	mov	sp,fp
  8041c8:	df000017 	ldw	fp,0(sp)
  8041cc:	dec00104 	addi	sp,sp,4
  8041d0:	f800283a 	ret

008041d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8041d4:	defff304 	addi	sp,sp,-52
  8041d8:	dfc00c15 	stw	ra,48(sp)
  8041dc:	df000b15 	stw	fp,44(sp)
  8041e0:	df000b04 	addi	fp,sp,44
  8041e4:	e13ff815 	stw	r4,-32(fp)
  8041e8:	e17ff715 	stw	r5,-36(fp)
  8041ec:	e1bff615 	stw	r6,-40(fp)
  8041f0:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
  8041f4:	e0bff717 	ldw	r2,-36(fp)
  8041f8:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8041fc:	00004706 	br	80431c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  804200:	e0bff817 	ldw	r2,-32(fp)
  804204:	10800a17 	ldw	r2,40(r2)
  804208:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
  80420c:	e0bff817 	ldw	r2,-32(fp)
  804210:	10800b17 	ldw	r2,44(r2)
  804214:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
  804218:	e0fffd17 	ldw	r3,-12(fp)
  80421c:	e0bffc17 	ldw	r2,-16(fp)
  804220:	18800536 	bltu	r3,r2,804238 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  804224:	e0fffd17 	ldw	r3,-12(fp)
  804228:	e0bffc17 	ldw	r2,-16(fp)
  80422c:	1885c83a 	sub	r2,r3,r2
  804230:	e0bffe15 	stw	r2,-8(fp)
  804234:	00000406 	br	804248 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  804238:	00c20004 	movi	r3,2048
  80423c:	e0bffc17 	ldw	r2,-16(fp)
  804240:	1885c83a 	sub	r2,r3,r2
  804244:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  804248:	e0bffe17 	ldw	r2,-8(fp)
  80424c:	10001e26 	beq	r2,zero,8042c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  804250:	e0fff617 	ldw	r3,-40(fp)
  804254:	e0bffe17 	ldw	r2,-8(fp)
  804258:	1880022e 	bgeu	r3,r2,804264 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80425c:	e0bff617 	ldw	r2,-40(fp)
  804260:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  804264:	e0bff817 	ldw	r2,-32(fp)
  804268:	10c00e04 	addi	r3,r2,56
  80426c:	e0bffc17 	ldw	r2,-16(fp)
  804270:	1885883a 	add	r2,r3,r2
  804274:	e1bffe17 	ldw	r6,-8(fp)
  804278:	100b883a 	mov	r5,r2
  80427c:	e13fff17 	ldw	r4,-4(fp)
  804280:	08016900 	call	801690 <memcpy>
      ptr   += n;
  804284:	e0ffff17 	ldw	r3,-4(fp)
  804288:	e0bffe17 	ldw	r2,-8(fp)
  80428c:	1885883a 	add	r2,r3,r2
  804290:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
  804294:	e0fff617 	ldw	r3,-40(fp)
  804298:	e0bffe17 	ldw	r2,-8(fp)
  80429c:	1885c83a 	sub	r2,r3,r2
  8042a0:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8042a4:	e0fffc17 	ldw	r3,-16(fp)
  8042a8:	e0bffe17 	ldw	r2,-8(fp)
  8042ac:	1885883a 	add	r2,r3,r2
  8042b0:	10c1ffcc 	andi	r3,r2,2047
  8042b4:	e0bff817 	ldw	r2,-32(fp)
  8042b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8042bc:	e0bff617 	ldw	r2,-40(fp)
  8042c0:	00bfcf16 	blt	zero,r2,804200 <altera_avalon_jtag_uart_read+0x2c>
  8042c4:	00000106 	br	8042cc <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
  8042c8:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
  8042cc:	e0ffff17 	ldw	r3,-4(fp)
  8042d0:	e0bff717 	ldw	r2,-36(fp)
  8042d4:	1880141e 	bne	r3,r2,804328 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8042d8:	e0bff517 	ldw	r2,-44(fp)
  8042dc:	1090000c 	andi	r2,r2,16384
  8042e0:	1000131e 	bne	r2,zero,804330 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8042e4:	0001883a 	nop
  8042e8:	e0bff817 	ldw	r2,-32(fp)
  8042ec:	10800a17 	ldw	r2,40(r2)
  8042f0:	e0fffd17 	ldw	r3,-12(fp)
  8042f4:	1880051e 	bne	r3,r2,80430c <altera_avalon_jtag_uart_read+0x138>
  8042f8:	e0bff817 	ldw	r2,-32(fp)
  8042fc:	10c00917 	ldw	r3,36(r2)
  804300:	e0bff817 	ldw	r2,-32(fp)
  804304:	10800117 	ldw	r2,4(r2)
  804308:	18bff736 	bltu	r3,r2,8042e8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80430c:	e0bff817 	ldw	r2,-32(fp)
  804310:	10800a17 	ldw	r2,40(r2)
  804314:	e0fffd17 	ldw	r3,-12(fp)
  804318:	18800726 	beq	r3,r2,804338 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
  80431c:	e0bff617 	ldw	r2,-40(fp)
  804320:	00bfb716 	blt	zero,r2,804200 <altera_avalon_jtag_uart_read+0x2c>
  804324:	00000506 	br	80433c <altera_avalon_jtag_uart_read+0x168>
      break;
  804328:	0001883a 	nop
  80432c:	00000306 	br	80433c <altera_avalon_jtag_uart_read+0x168>
      break;
  804330:	0001883a 	nop
  804334:	00000106 	br	80433c <altera_avalon_jtag_uart_read+0x168>
      break;
  804338:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80433c:	e0ffff17 	ldw	r3,-4(fp)
  804340:	e0bff717 	ldw	r2,-36(fp)
  804344:	18801926 	beq	r3,r2,8043ac <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
  804348:	0005303a 	rdctl	r2,status
  80434c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804350:	e0fff917 	ldw	r3,-28(fp)
  804354:	00bfff84 	movi	r2,-2
  804358:	1884703a 	and	r2,r3,r2
  80435c:	1001703a 	wrctl	status,r2
  return context;
  804360:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  804364:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804368:	e0bff817 	ldw	r2,-32(fp)
  80436c:	10800817 	ldw	r2,32(r2)
  804370:	10c00054 	ori	r3,r2,1
  804374:	e0bff817 	ldw	r2,-32(fp)
  804378:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80437c:	e0bff817 	ldw	r2,-32(fp)
  804380:	10800017 	ldw	r2,0(r2)
  804384:	10800104 	addi	r2,r2,4
  804388:	1007883a 	mov	r3,r2
  80438c:	e0bff817 	ldw	r2,-32(fp)
  804390:	10800817 	ldw	r2,32(r2)
  804394:	18800035 	stwio	r2,0(r3)
  804398:	e0bffb17 	ldw	r2,-20(fp)
  80439c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  8043a0:	e0bffa17 	ldw	r2,-24(fp)
  8043a4:	1001703a 	wrctl	status,r2
}
  8043a8:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8043ac:	e0ffff17 	ldw	r3,-4(fp)
  8043b0:	e0bff717 	ldw	r2,-36(fp)
  8043b4:	18800426 	beq	r3,r2,8043c8 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
  8043b8:	e0ffff17 	ldw	r3,-4(fp)
  8043bc:	e0bff717 	ldw	r2,-36(fp)
  8043c0:	1885c83a 	sub	r2,r3,r2
  8043c4:	00000606 	br	8043e0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8043c8:	e0bff517 	ldw	r2,-44(fp)
  8043cc:	1090000c 	andi	r2,r2,16384
  8043d0:	10000226 	beq	r2,zero,8043dc <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
  8043d4:	00bffd44 	movi	r2,-11
  8043d8:	00000106 	br	8043e0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8043dc:	00bffec4 	movi	r2,-5
}
  8043e0:	e037883a 	mov	sp,fp
  8043e4:	dfc00117 	ldw	ra,4(sp)
  8043e8:	df000017 	ldw	fp,0(sp)
  8043ec:	dec00204 	addi	sp,sp,8
  8043f0:	f800283a 	ret

008043f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8043f4:	defff304 	addi	sp,sp,-52
  8043f8:	dfc00c15 	stw	ra,48(sp)
  8043fc:	df000b15 	stw	fp,44(sp)
  804400:	df000b04 	addi	fp,sp,44
  804404:	e13ff815 	stw	r4,-32(fp)
  804408:	e17ff715 	stw	r5,-36(fp)
  80440c:	e1bff615 	stw	r6,-40(fp)
  804410:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  804414:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  804418:	e0bff717 	ldw	r2,-36(fp)
  80441c:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804420:	00003706 	br	804500 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  804424:	e0bff817 	ldw	r2,-32(fp)
  804428:	10800c17 	ldw	r2,48(r2)
  80442c:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
  804430:	e0bff817 	ldw	r2,-32(fp)
  804434:	10800d17 	ldw	r2,52(r2)
  804438:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
  80443c:	e0fffc17 	ldw	r3,-16(fp)
  804440:	e0bfff17 	ldw	r2,-4(fp)
  804444:	1880062e 	bgeu	r3,r2,804460 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  804448:	e0ffff17 	ldw	r3,-4(fp)
  80444c:	e0bffc17 	ldw	r2,-16(fp)
  804450:	1885c83a 	sub	r2,r3,r2
  804454:	10bfffc4 	addi	r2,r2,-1
  804458:	e0bffe15 	stw	r2,-8(fp)
  80445c:	00000b06 	br	80448c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  804460:	e0bfff17 	ldw	r2,-4(fp)
  804464:	10000526 	beq	r2,zero,80447c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  804468:	00c20004 	movi	r3,2048
  80446c:	e0bffc17 	ldw	r2,-16(fp)
  804470:	1885c83a 	sub	r2,r3,r2
  804474:	e0bffe15 	stw	r2,-8(fp)
  804478:	00000406 	br	80448c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80447c:	00c1ffc4 	movi	r3,2047
  804480:	e0bffc17 	ldw	r2,-16(fp)
  804484:	1885c83a 	sub	r2,r3,r2
  804488:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  80448c:	e0bffe17 	ldw	r2,-8(fp)
  804490:	10001e26 	beq	r2,zero,80450c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  804494:	e0fff617 	ldw	r3,-40(fp)
  804498:	e0bffe17 	ldw	r2,-8(fp)
  80449c:	1880022e 	bgeu	r3,r2,8044a8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8044a0:	e0bff617 	ldw	r2,-40(fp)
  8044a4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8044a8:	e0bff817 	ldw	r2,-32(fp)
  8044ac:	10c20e04 	addi	r3,r2,2104
  8044b0:	e0bffc17 	ldw	r2,-16(fp)
  8044b4:	1885883a 	add	r2,r3,r2
  8044b8:	e1bffe17 	ldw	r6,-8(fp)
  8044bc:	e17ff717 	ldw	r5,-36(fp)
  8044c0:	1009883a 	mov	r4,r2
  8044c4:	08016900 	call	801690 <memcpy>
      ptr   += n;
  8044c8:	e0fff717 	ldw	r3,-36(fp)
  8044cc:	e0bffe17 	ldw	r2,-8(fp)
  8044d0:	1885883a 	add	r2,r3,r2
  8044d4:	e0bff715 	stw	r2,-36(fp)
      count -= n;
  8044d8:	e0fff617 	ldw	r3,-40(fp)
  8044dc:	e0bffe17 	ldw	r2,-8(fp)
  8044e0:	1885c83a 	sub	r2,r3,r2
  8044e4:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8044e8:	e0fffc17 	ldw	r3,-16(fp)
  8044ec:	e0bffe17 	ldw	r2,-8(fp)
  8044f0:	1885883a 	add	r2,r3,r2
  8044f4:	10c1ffcc 	andi	r3,r2,2047
  8044f8:	e0bff817 	ldw	r2,-32(fp)
  8044fc:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
  804500:	e0bff617 	ldw	r2,-40(fp)
  804504:	00bfc716 	blt	zero,r2,804424 <altera_avalon_jtag_uart_write+0x30>
  804508:	00000106 	br	804510 <altera_avalon_jtag_uart_write+0x11c>
        break;
  80450c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
  804510:	0005303a 	rdctl	r2,status
  804514:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804518:	e0fff917 	ldw	r3,-28(fp)
  80451c:	00bfff84 	movi	r2,-2
  804520:	1884703a 	and	r2,r3,r2
  804524:	1001703a 	wrctl	status,r2
  return context;
  804528:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80452c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804530:	e0bff817 	ldw	r2,-32(fp)
  804534:	10800817 	ldw	r2,32(r2)
  804538:	10c00094 	ori	r3,r2,2
  80453c:	e0bff817 	ldw	r2,-32(fp)
  804540:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804544:	e0bff817 	ldw	r2,-32(fp)
  804548:	10800017 	ldw	r2,0(r2)
  80454c:	10800104 	addi	r2,r2,4
  804550:	1007883a 	mov	r3,r2
  804554:	e0bff817 	ldw	r2,-32(fp)
  804558:	10800817 	ldw	r2,32(r2)
  80455c:	18800035 	stwio	r2,0(r3)
  804560:	e0bffb17 	ldw	r2,-20(fp)
  804564:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  804568:	e0bffa17 	ldw	r2,-24(fp)
  80456c:	1001703a 	wrctl	status,r2
}
  804570:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  804574:	e0bff617 	ldw	r2,-40(fp)
  804578:	0080100e 	bge	zero,r2,8045bc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  80457c:	e0bff517 	ldw	r2,-44(fp)
  804580:	1090000c 	andi	r2,r2,16384
  804584:	1000101e 	bne	r2,zero,8045c8 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  804588:	0001883a 	nop
  80458c:	e0bff817 	ldw	r2,-32(fp)
  804590:	10800d17 	ldw	r2,52(r2)
  804594:	e0ffff17 	ldw	r3,-4(fp)
  804598:	1880051e 	bne	r3,r2,8045b0 <altera_avalon_jtag_uart_write+0x1bc>
  80459c:	e0bff817 	ldw	r2,-32(fp)
  8045a0:	10c00917 	ldw	r3,36(r2)
  8045a4:	e0bff817 	ldw	r2,-32(fp)
  8045a8:	10800117 	ldw	r2,4(r2)
  8045ac:	18bff736 	bltu	r3,r2,80458c <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8045b0:	e0bff817 	ldw	r2,-32(fp)
  8045b4:	10800917 	ldw	r2,36(r2)
  8045b8:	1000051e 	bne	r2,zero,8045d0 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
  8045bc:	e0bff617 	ldw	r2,-40(fp)
  8045c0:	00bfcf16 	blt	zero,r2,804500 <altera_avalon_jtag_uart_write+0x10c>
  8045c4:	00000306 	br	8045d4 <altera_avalon_jtag_uart_write+0x1e0>
        break;
  8045c8:	0001883a 	nop
  8045cc:	00000106 	br	8045d4 <altera_avalon_jtag_uart_write+0x1e0>
         break;
  8045d0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8045d4:	e0fff717 	ldw	r3,-36(fp)
  8045d8:	e0bffd17 	ldw	r2,-12(fp)
  8045dc:	18800426 	beq	r3,r2,8045f0 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
  8045e0:	e0fff717 	ldw	r3,-36(fp)
  8045e4:	e0bffd17 	ldw	r2,-12(fp)
  8045e8:	1885c83a 	sub	r2,r3,r2
  8045ec:	00000606 	br	804608 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
  8045f0:	e0bff517 	ldw	r2,-44(fp)
  8045f4:	1090000c 	andi	r2,r2,16384
  8045f8:	10000226 	beq	r2,zero,804604 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
  8045fc:	00bffd44 	movi	r2,-11
  804600:	00000106 	br	804608 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  804604:	00bffec4 	movi	r2,-5
}
  804608:	e037883a 	mov	sp,fp
  80460c:	dfc00117 	ldw	ra,4(sp)
  804610:	df000017 	ldw	fp,0(sp)
  804614:	dec00204 	addi	sp,sp,8
  804618:	f800283a 	ret

0080461c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80461c:	defffa04 	addi	sp,sp,-24
  804620:	dfc00515 	stw	ra,20(sp)
  804624:	df000415 	stw	fp,16(sp)
  804628:	df000404 	addi	fp,sp,16
  80462c:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  804630:	0007883a 	mov	r3,zero
  804634:	e0bffc17 	ldw	r2,-16(fp)
  804638:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80463c:	e0bffc17 	ldw	r2,-16(fp)
  804640:	10800104 	addi	r2,r2,4
  804644:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
  804648:	0005303a 	rdctl	r2,status
  80464c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804650:	e0fffd17 	ldw	r3,-12(fp)
  804654:	00bfff84 	movi	r2,-2
  804658:	1884703a 	and	r2,r3,r2
  80465c:	1001703a 	wrctl	status,r2
  return context;
  804660:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  804664:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
  804668:	08051800 	call	805180 <alt_tick>
  80466c:	e0bfff17 	ldw	r2,-4(fp)
  804670:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  804674:	e0bffe17 	ldw	r2,-8(fp)
  804678:	1001703a 	wrctl	status,r2
}
  80467c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
  804680:	0001883a 	nop
  804684:	e037883a 	mov	sp,fp
  804688:	dfc00117 	ldw	ra,4(sp)
  80468c:	df000017 	ldw	fp,0(sp)
  804690:	dec00204 	addi	sp,sp,8
  804694:	f800283a 	ret

00804698 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  804698:	defff804 	addi	sp,sp,-32
  80469c:	dfc00715 	stw	ra,28(sp)
  8046a0:	df000615 	stw	fp,24(sp)
  8046a4:	df000604 	addi	fp,sp,24
  8046a8:	e13ffe15 	stw	r4,-8(fp)
  8046ac:	e17ffd15 	stw	r5,-12(fp)
  8046b0:	e1bffc15 	stw	r6,-16(fp)
  8046b4:	e1fffb15 	stw	r7,-20(fp)
  8046b8:	e0bffb17 	ldw	r2,-20(fp)
  8046bc:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8046c0:	d0a6b117 	ldw	r2,-25916(gp)
  8046c4:	1000031e 	bne	r2,zero,8046d4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
  8046c8:	e0bfff17 	ldw	r2,-4(fp)
  8046cc:	d0a6b115 	stw	r2,-25916(gp)
    return 0;
  8046d0:	00000106 	br	8046d8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
  8046d4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8046d8:	e0bffe17 	ldw	r2,-8(fp)
  8046dc:	10800104 	addi	r2,r2,4
  8046e0:	00c001c4 	movi	r3,7
  8046e4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8046e8:	d8000015 	stw	zero,0(sp)
  8046ec:	e1fffe17 	ldw	r7,-8(fp)
  8046f0:	01802034 	movhi	r6,128
  8046f4:	31918704 	addi	r6,r6,17948
  8046f8:	e17ffc17 	ldw	r5,-16(fp)
  8046fc:	e13ffd17 	ldw	r4,-12(fp)
  804700:	0804a7c0 	call	804a7c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  804704:	0001883a 	nop
  804708:	e037883a 	mov	sp,fp
  80470c:	dfc00117 	ldw	ra,4(sp)
  804710:	df000017 	ldw	fp,0(sp)
  804714:	dec00204 	addi	sp,sp,8
  804718:	f800283a 	ret

0080471c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80471c:	defff504 	addi	sp,sp,-44
  804720:	df000a15 	stw	fp,40(sp)
  804724:	df000a04 	addi	fp,sp,40
  804728:	e13ff915 	stw	r4,-28(fp)
  80472c:	e17ff815 	stw	r5,-32(fp)
  804730:	e1bff715 	stw	r6,-36(fp)
  804734:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  804738:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
  80473c:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
  804740:	10003e26 	beq	r2,zero,80483c <alt_alarm_start+0x120>
  {
    if (alarm)
  804744:	e0bff917 	ldw	r2,-28(fp)
  804748:	10003a26 	beq	r2,zero,804834 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
  80474c:	e0bff917 	ldw	r2,-28(fp)
  804750:	e0fff717 	ldw	r3,-36(fp)
  804754:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  804758:	e0bff917 	ldw	r2,-28(fp)
  80475c:	e0fff617 	ldw	r3,-40(fp)
  804760:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
  804764:	0005303a 	rdctl	r2,status
  804768:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80476c:	e0fffd17 	ldw	r3,-12(fp)
  804770:	00bfff84 	movi	r2,-2
  804774:	1884703a 	and	r2,r3,r2
  804778:	1001703a 	wrctl	status,r2
  return context;
  80477c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
  804780:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  804784:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
  804788:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80478c:	e0fff817 	ldw	r3,-32(fp)
  804790:	e0bfff17 	ldw	r2,-4(fp)
  804794:	1885883a 	add	r2,r3,r2
  804798:	10c00044 	addi	r3,r2,1
  80479c:	e0bff917 	ldw	r2,-28(fp)
  8047a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8047a4:	e0bff917 	ldw	r2,-28(fp)
  8047a8:	10c00217 	ldw	r3,8(r2)
  8047ac:	e0bfff17 	ldw	r2,-4(fp)
  8047b0:	1880042e 	bgeu	r3,r2,8047c4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  8047b4:	e0bff917 	ldw	r2,-28(fp)
  8047b8:	00c00044 	movi	r3,1
  8047bc:	10c00405 	stb	r3,16(r2)
  8047c0:	00000206 	br	8047cc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8047c4:	e0bff917 	ldw	r2,-28(fp)
  8047c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8047cc:	e0bff917 	ldw	r2,-28(fp)
  8047d0:	d0e00c04 	addi	r3,gp,-32720
  8047d4:	e0fffb15 	stw	r3,-20(fp)
  8047d8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8047dc:	e0bffa17 	ldw	r2,-24(fp)
  8047e0:	e0fffb17 	ldw	r3,-20(fp)
  8047e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8047e8:	e0bffb17 	ldw	r2,-20(fp)
  8047ec:	10c00017 	ldw	r3,0(r2)
  8047f0:	e0bffa17 	ldw	r2,-24(fp)
  8047f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8047f8:	e0bffb17 	ldw	r2,-20(fp)
  8047fc:	10800017 	ldw	r2,0(r2)
  804800:	e0fffa17 	ldw	r3,-24(fp)
  804804:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  804808:	e0bffb17 	ldw	r2,-20(fp)
  80480c:	e0fffa17 	ldw	r3,-24(fp)
  804810:	10c00015 	stw	r3,0(r2)
}
  804814:	0001883a 	nop
  804818:	e0bffe17 	ldw	r2,-8(fp)
  80481c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  804820:	e0bffc17 	ldw	r2,-16(fp)
  804824:	1001703a 	wrctl	status,r2
}
  804828:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
  80482c:	0005883a 	mov	r2,zero
  804830:	00000306 	br	804840 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
  804834:	00bffa84 	movi	r2,-22
  804838:	00000106 	br	804840 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
  80483c:	00bfde84 	movi	r2,-134
  }
}
  804840:	e037883a 	mov	sp,fp
  804844:	df000017 	ldw	fp,0(sp)
  804848:	dec00104 	addi	sp,sp,4
  80484c:	f800283a 	ret

00804850 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  804850:	defffe04 	addi	sp,sp,-8
  804854:	df000115 	stw	fp,4(sp)
  804858:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80485c:	e03fff15 	stw	zero,-4(fp)
  804860:	00000506 	br	804878 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  804864:	e0bfff17 	ldw	r2,-4(fp)
  804868:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80486c:	e0bfff17 	ldw	r2,-4(fp)
  804870:	10800804 	addi	r2,r2,32
  804874:	e0bfff15 	stw	r2,-4(fp)
  804878:	e0bfff17 	ldw	r2,-4(fp)
  80487c:	10820030 	cmpltui	r2,r2,2048
  804880:	103ff81e 	bne	r2,zero,804864 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  804884:	0001883a 	nop
  804888:	0001883a 	nop
  80488c:	e037883a 	mov	sp,fp
  804890:	df000017 	ldw	fp,0(sp)
  804894:	dec00104 	addi	sp,sp,4
  804898:	f800283a 	ret

0080489c <alt_get_errno>:
{
  80489c:	defffe04 	addi	sp,sp,-8
  8048a0:	dfc00115 	stw	ra,4(sp)
  8048a4:	df000015 	stw	fp,0(sp)
  8048a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8048ac:	d0a00917 	ldw	r2,-32732(gp)
  8048b0:	10000326 	beq	r2,zero,8048c0 <alt_get_errno+0x24>
  8048b4:	d0a00917 	ldw	r2,-32732(gp)
  8048b8:	103ee83a 	callr	r2
  8048bc:	00000106 	br	8048c4 <alt_get_errno+0x28>
  8048c0:	d0a6ac04 	addi	r2,gp,-25936
}
  8048c4:	e037883a 	mov	sp,fp
  8048c8:	dfc00117 	ldw	ra,4(sp)
  8048cc:	df000017 	ldw	fp,0(sp)
  8048d0:	dec00204 	addi	sp,sp,8
  8048d4:	f800283a 	ret

008048d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8048d8:	defffa04 	addi	sp,sp,-24
  8048dc:	dfc00515 	stw	ra,20(sp)
  8048e0:	df000415 	stw	fp,16(sp)
  8048e4:	df000404 	addi	fp,sp,16
  8048e8:	e13ffd15 	stw	r4,-12(fp)
  8048ec:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8048f0:	e0bffd17 	ldw	r2,-12(fp)
  8048f4:	10000326 	beq	r2,zero,804904 <alt_dev_llist_insert+0x2c>
  8048f8:	e0bffd17 	ldw	r2,-12(fp)
  8048fc:	10800217 	ldw	r2,8(r2)
  804900:	1000061e 	bne	r2,zero,80491c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  804904:	080489c0 	call	80489c <alt_get_errno>
  804908:	1007883a 	mov	r3,r2
  80490c:	00800584 	movi	r2,22
  804910:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  804914:	00bffa84 	movi	r2,-22
  804918:	00001406 	br	80496c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80491c:	e0bffd17 	ldw	r2,-12(fp)
  804920:	e0fffc17 	ldw	r3,-16(fp)
  804924:	e0ffff15 	stw	r3,-4(fp)
  804928:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
  80492c:	e0bffe17 	ldw	r2,-8(fp)
  804930:	e0ffff17 	ldw	r3,-4(fp)
  804934:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  804938:	e0bfff17 	ldw	r2,-4(fp)
  80493c:	10c00017 	ldw	r3,0(r2)
  804940:	e0bffe17 	ldw	r2,-8(fp)
  804944:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  804948:	e0bfff17 	ldw	r2,-4(fp)
  80494c:	10800017 	ldw	r2,0(r2)
  804950:	e0fffe17 	ldw	r3,-8(fp)
  804954:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  804958:	e0bfff17 	ldw	r2,-4(fp)
  80495c:	e0fffe17 	ldw	r3,-8(fp)
  804960:	10c00015 	stw	r3,0(r2)
}
  804964:	0001883a 	nop

  return 0;  
  804968:	0005883a 	mov	r2,zero
}
  80496c:	e037883a 	mov	sp,fp
  804970:	dfc00117 	ldw	ra,4(sp)
  804974:	df000017 	ldw	fp,0(sp)
  804978:	dec00204 	addi	sp,sp,8
  80497c:	f800283a 	ret

00804980 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  804980:	defffd04 	addi	sp,sp,-12
  804984:	dfc00215 	stw	ra,8(sp)
  804988:	df000115 	stw	fp,4(sp)
  80498c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  804990:	00802034 	movhi	r2,128
  804994:	10963204 	addi	r2,r2,22728
  804998:	e0bfff15 	stw	r2,-4(fp)
  80499c:	00000606 	br	8049b8 <_do_ctors+0x38>
        (*ctor) (); 
  8049a0:	e0bfff17 	ldw	r2,-4(fp)
  8049a4:	10800017 	ldw	r2,0(r2)
  8049a8:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8049ac:	e0bfff17 	ldw	r2,-4(fp)
  8049b0:	10bfff04 	addi	r2,r2,-4
  8049b4:	e0bfff15 	stw	r2,-4(fp)
  8049b8:	e0ffff17 	ldw	r3,-4(fp)
  8049bc:	00802034 	movhi	r2,128
  8049c0:	10963304 	addi	r2,r2,22732
  8049c4:	18bff62e 	bgeu	r3,r2,8049a0 <_do_ctors+0x20>
}
  8049c8:	0001883a 	nop
  8049cc:	0001883a 	nop
  8049d0:	e037883a 	mov	sp,fp
  8049d4:	dfc00117 	ldw	ra,4(sp)
  8049d8:	df000017 	ldw	fp,0(sp)
  8049dc:	dec00204 	addi	sp,sp,8
  8049e0:	f800283a 	ret

008049e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8049e4:	defffd04 	addi	sp,sp,-12
  8049e8:	dfc00215 	stw	ra,8(sp)
  8049ec:	df000115 	stw	fp,4(sp)
  8049f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8049f4:	00802034 	movhi	r2,128
  8049f8:	10963204 	addi	r2,r2,22728
  8049fc:	e0bfff15 	stw	r2,-4(fp)
  804a00:	00000606 	br	804a1c <_do_dtors+0x38>
        (*dtor) (); 
  804a04:	e0bfff17 	ldw	r2,-4(fp)
  804a08:	10800017 	ldw	r2,0(r2)
  804a0c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  804a10:	e0bfff17 	ldw	r2,-4(fp)
  804a14:	10bfff04 	addi	r2,r2,-4
  804a18:	e0bfff15 	stw	r2,-4(fp)
  804a1c:	e0ffff17 	ldw	r3,-4(fp)
  804a20:	00802034 	movhi	r2,128
  804a24:	10963304 	addi	r2,r2,22732
  804a28:	18bff62e 	bgeu	r3,r2,804a04 <_do_dtors+0x20>
}
  804a2c:	0001883a 	nop
  804a30:	0001883a 	nop
  804a34:	e037883a 	mov	sp,fp
  804a38:	dfc00117 	ldw	ra,4(sp)
  804a3c:	df000017 	ldw	fp,0(sp)
  804a40:	dec00204 	addi	sp,sp,8
  804a44:	f800283a 	ret

00804a48 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  804a48:	defffe04 	addi	sp,sp,-8
  804a4c:	dfc00115 	stw	ra,4(sp)
  804a50:	df000015 	stw	fp,0(sp)
  804a54:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  804a58:	01420004 	movi	r5,2048
  804a5c:	0009883a 	mov	r4,zero
  804a60:	08054fc0 	call	8054fc <alt_icache_flush>
#endif
}
  804a64:	0001883a 	nop
  804a68:	e037883a 	mov	sp,fp
  804a6c:	dfc00117 	ldw	ra,4(sp)
  804a70:	df000017 	ldw	fp,0(sp)
  804a74:	dec00204 	addi	sp,sp,8
  804a78:	f800283a 	ret

00804a7c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  804a7c:	defff904 	addi	sp,sp,-28
  804a80:	dfc00615 	stw	ra,24(sp)
  804a84:	df000515 	stw	fp,20(sp)
  804a88:	df000504 	addi	fp,sp,20
  804a8c:	e13fff15 	stw	r4,-4(fp)
  804a90:	e17ffe15 	stw	r5,-8(fp)
  804a94:	e1bffd15 	stw	r6,-12(fp)
  804a98:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  804a9c:	e0800217 	ldw	r2,8(fp)
  804aa0:	d8800015 	stw	r2,0(sp)
  804aa4:	e1fffc17 	ldw	r7,-16(fp)
  804aa8:	e1bffd17 	ldw	r6,-12(fp)
  804aac:	e17ffe17 	ldw	r5,-8(fp)
  804ab0:	e13fff17 	ldw	r4,-4(fp)
  804ab4:	0804c2c0 	call	804c2c <alt_iic_isr_register>
}  
  804ab8:	e037883a 	mov	sp,fp
  804abc:	dfc00117 	ldw	ra,4(sp)
  804ac0:	df000017 	ldw	fp,0(sp)
  804ac4:	dec00204 	addi	sp,sp,8
  804ac8:	f800283a 	ret

00804acc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  804acc:	defff904 	addi	sp,sp,-28
  804ad0:	df000615 	stw	fp,24(sp)
  804ad4:	df000604 	addi	fp,sp,24
  804ad8:	e13ffb15 	stw	r4,-20(fp)
  804adc:	e17ffa15 	stw	r5,-24(fp)
  804ae0:	e0bffa17 	ldw	r2,-24(fp)
  804ae4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  804ae8:	0005303a 	rdctl	r2,status
  804aec:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804af0:	e0fffe17 	ldw	r3,-8(fp)
  804af4:	00bfff84 	movi	r2,-2
  804af8:	1884703a 	and	r2,r3,r2
  804afc:	1001703a 	wrctl	status,r2
  return context;
  804b00:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  804b04:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  804b08:	00c00044 	movi	r3,1
  804b0c:	e0bfff17 	ldw	r2,-4(fp)
  804b10:	1884983a 	sll	r2,r3,r2
  804b14:	1007883a 	mov	r3,r2
  804b18:	d0a6b017 	ldw	r2,-25920(gp)
  804b1c:	1884b03a 	or	r2,r3,r2
  804b20:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804b24:	d0a6b017 	ldw	r2,-25920(gp)
  804b28:	100170fa 	wrctl	ienable,r2
  804b2c:	e0bffd17 	ldw	r2,-12(fp)
  804b30:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  804b34:	e0bffc17 	ldw	r2,-16(fp)
  804b38:	1001703a 	wrctl	status,r2
}
  804b3c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
  804b40:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  804b44:	e037883a 	mov	sp,fp
  804b48:	df000017 	ldw	fp,0(sp)
  804b4c:	dec00104 	addi	sp,sp,4
  804b50:	f800283a 	ret

00804b54 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  804b54:	defff904 	addi	sp,sp,-28
  804b58:	df000615 	stw	fp,24(sp)
  804b5c:	df000604 	addi	fp,sp,24
  804b60:	e13ffb15 	stw	r4,-20(fp)
  804b64:	e17ffa15 	stw	r5,-24(fp)
  804b68:	e0bffa17 	ldw	r2,-24(fp)
  804b6c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  804b70:	0005303a 	rdctl	r2,status
  804b74:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b78:	e0fffe17 	ldw	r3,-8(fp)
  804b7c:	00bfff84 	movi	r2,-2
  804b80:	1884703a 	and	r2,r3,r2
  804b84:	1001703a 	wrctl	status,r2
  return context;
  804b88:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
  804b8c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
  804b90:	00c00044 	movi	r3,1
  804b94:	e0bfff17 	ldw	r2,-4(fp)
  804b98:	1884983a 	sll	r2,r3,r2
  804b9c:	0084303a 	nor	r2,zero,r2
  804ba0:	1007883a 	mov	r3,r2
  804ba4:	d0a6b017 	ldw	r2,-25920(gp)
  804ba8:	1884703a 	and	r2,r3,r2
  804bac:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804bb0:	d0a6b017 	ldw	r2,-25920(gp)
  804bb4:	100170fa 	wrctl	ienable,r2
  804bb8:	e0bffd17 	ldw	r2,-12(fp)
  804bbc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  804bc0:	e0bffc17 	ldw	r2,-16(fp)
  804bc4:	1001703a 	wrctl	status,r2
}
  804bc8:	0001883a 	nop
  return 0;
  804bcc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  804bd0:	e037883a 	mov	sp,fp
  804bd4:	df000017 	ldw	fp,0(sp)
  804bd8:	dec00104 	addi	sp,sp,4
  804bdc:	f800283a 	ret

00804be0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  804be0:	defffc04 	addi	sp,sp,-16
  804be4:	df000315 	stw	fp,12(sp)
  804be8:	df000304 	addi	fp,sp,12
  804bec:	e13ffe15 	stw	r4,-8(fp)
  804bf0:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  804bf4:	000530fa 	rdctl	r2,ienable
  804bf8:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  804bfc:	00c00044 	movi	r3,1
  804c00:	e0bffd17 	ldw	r2,-12(fp)
  804c04:	1884983a 	sll	r2,r3,r2
  804c08:	1007883a 	mov	r3,r2
  804c0c:	e0bfff17 	ldw	r2,-4(fp)
  804c10:	1884703a 	and	r2,r3,r2
  804c14:	1004c03a 	cmpne	r2,r2,zero
  804c18:	10803fcc 	andi	r2,r2,255
}
  804c1c:	e037883a 	mov	sp,fp
  804c20:	df000017 	ldw	fp,0(sp)
  804c24:	dec00104 	addi	sp,sp,4
  804c28:	f800283a 	ret

00804c2c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  804c2c:	defff504 	addi	sp,sp,-44
  804c30:	dfc00a15 	stw	ra,40(sp)
  804c34:	df000915 	stw	fp,36(sp)
  804c38:	df000904 	addi	fp,sp,36
  804c3c:	e13ffa15 	stw	r4,-24(fp)
  804c40:	e17ff915 	stw	r5,-28(fp)
  804c44:	e1bff815 	stw	r6,-32(fp)
  804c48:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
  804c4c:	00bffa84 	movi	r2,-22
  804c50:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  804c54:	e0bff917 	ldw	r2,-28(fp)
  804c58:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  804c5c:	e0bffe17 	ldw	r2,-8(fp)
  804c60:	10800808 	cmpgei	r2,r2,32
  804c64:	1000251e 	bne	r2,zero,804cfc <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
  804c68:	0005303a 	rdctl	r2,status
  804c6c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c70:	e0fffc17 	ldw	r3,-16(fp)
  804c74:	00bfff84 	movi	r2,-2
  804c78:	1884703a 	and	r2,r3,r2
  804c7c:	1001703a 	wrctl	status,r2
  return context;
  804c80:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  804c84:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
  804c88:	e0bffe17 	ldw	r2,-8(fp)
  804c8c:	100890fa 	slli	r4,r2,3
  804c90:	e0fff817 	ldw	r3,-32(fp)
  804c94:	00802074 	movhi	r2,129
  804c98:	2085883a 	add	r2,r4,r2
  804c9c:	10e38c15 	stw	r3,-29136(r2)
    alt_irq[id].context = isr_context;
  804ca0:	e0bffe17 	ldw	r2,-8(fp)
  804ca4:	100890fa 	slli	r4,r2,3
  804ca8:	e0fff717 	ldw	r3,-36(fp)
  804cac:	00802074 	movhi	r2,129
  804cb0:	2085883a 	add	r2,r4,r2
  804cb4:	10e38d15 	stw	r3,-29132(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  804cb8:	e0bff817 	ldw	r2,-32(fp)
  804cbc:	10000526 	beq	r2,zero,804cd4 <alt_iic_isr_register+0xa8>
  804cc0:	e0bffe17 	ldw	r2,-8(fp)
  804cc4:	100b883a 	mov	r5,r2
  804cc8:	e13ffa17 	ldw	r4,-24(fp)
  804ccc:	0804acc0 	call	804acc <alt_ic_irq_enable>
  804cd0:	00000406 	br	804ce4 <alt_iic_isr_register+0xb8>
  804cd4:	e0bffe17 	ldw	r2,-8(fp)
  804cd8:	100b883a 	mov	r5,r2
  804cdc:	e13ffa17 	ldw	r4,-24(fp)
  804ce0:	0804b540 	call	804b54 <alt_ic_irq_disable>
  804ce4:	e0bfff15 	stw	r2,-4(fp)
  804ce8:	e0bffd17 	ldw	r2,-12(fp)
  804cec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  804cf0:	e0bffb17 	ldw	r2,-20(fp)
  804cf4:	1001703a 	wrctl	status,r2
}
  804cf8:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
  804cfc:	e0bfff17 	ldw	r2,-4(fp)
}
  804d00:	e037883a 	mov	sp,fp
  804d04:	dfc00117 	ldw	ra,4(sp)
  804d08:	df000017 	ldw	fp,0(sp)
  804d0c:	dec00204 	addi	sp,sp,8
  804d10:	f800283a 	ret

00804d14 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  804d14:	defff904 	addi	sp,sp,-28
  804d18:	dfc00615 	stw	ra,24(sp)
  804d1c:	df000515 	stw	fp,20(sp)
  804d20:	df000504 	addi	fp,sp,20
  804d24:	e13ffe15 	stw	r4,-8(fp)
  804d28:	e17ffd15 	stw	r5,-12(fp)
  804d2c:	e1bffc15 	stw	r6,-16(fp)
  804d30:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
  804d34:	e1bffb17 	ldw	r6,-20(fp)
  804d38:	e17ffc17 	ldw	r5,-16(fp)
  804d3c:	e13ffd17 	ldw	r4,-12(fp)
  804d40:	0804f7c0 	call	804f7c <open>
  804d44:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
  804d48:	e0bfff17 	ldw	r2,-4(fp)
  804d4c:	10002016 	blt	r2,zero,804dd0 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
  804d50:	e0ffff17 	ldw	r3,-4(fp)
  804d54:	1805883a 	mov	r2,r3
  804d58:	1085883a 	add	r2,r2,r2
  804d5c:	10c5883a 	add	r2,r2,r3
  804d60:	100490ba 	slli	r2,r2,2
  804d64:	00c02034 	movhi	r3,128
  804d68:	10c7883a 	add	r3,r2,r3
  804d6c:	18d85617 	ldw	r3,24920(r3)
  804d70:	e0bffe17 	ldw	r2,-8(fp)
  804d74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  804d78:	e0ffff17 	ldw	r3,-4(fp)
  804d7c:	1805883a 	mov	r2,r3
  804d80:	1085883a 	add	r2,r2,r2
  804d84:	10c5883a 	add	r2,r2,r3
  804d88:	100490ba 	slli	r2,r2,2
  804d8c:	00c02034 	movhi	r3,128
  804d90:	10c7883a 	add	r3,r2,r3
  804d94:	18d85717 	ldw	r3,24924(r3)
  804d98:	e0bffe17 	ldw	r2,-8(fp)
  804d9c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  804da0:	e0ffff17 	ldw	r3,-4(fp)
  804da4:	1805883a 	mov	r2,r3
  804da8:	1085883a 	add	r2,r2,r2
  804dac:	10c5883a 	add	r2,r2,r3
  804db0:	100490ba 	slli	r2,r2,2
  804db4:	00c02034 	movhi	r3,128
  804db8:	10c7883a 	add	r3,r2,r3
  804dbc:	18d85817 	ldw	r3,24928(r3)
  804dc0:	e0bffe17 	ldw	r2,-8(fp)
  804dc4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  804dc8:	e13fff17 	ldw	r4,-4(fp)
  804dcc:	08038680 	call	803868 <alt_release_fd>
  }
} 
  804dd0:	0001883a 	nop
  804dd4:	e037883a 	mov	sp,fp
  804dd8:	dfc00117 	ldw	ra,4(sp)
  804ddc:	df000017 	ldw	fp,0(sp)
  804de0:	dec00204 	addi	sp,sp,8
  804de4:	f800283a 	ret

00804de8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  804de8:	defffb04 	addi	sp,sp,-20
  804dec:	dfc00415 	stw	ra,16(sp)
  804df0:	df000315 	stw	fp,12(sp)
  804df4:	df000304 	addi	fp,sp,12
  804df8:	e13fff15 	stw	r4,-4(fp)
  804dfc:	e17ffe15 	stw	r5,-8(fp)
  804e00:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  804e04:	01c07fc4 	movi	r7,511
  804e08:	01800044 	movi	r6,1
  804e0c:	e17fff17 	ldw	r5,-4(fp)
  804e10:	01002034 	movhi	r4,128
  804e14:	21185904 	addi	r4,r4,24932
  804e18:	0804d140 	call	804d14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  804e1c:	01c07fc4 	movi	r7,511
  804e20:	000d883a 	mov	r6,zero
  804e24:	e17ffe17 	ldw	r5,-8(fp)
  804e28:	01002034 	movhi	r4,128
  804e2c:	21185604 	addi	r4,r4,24920
  804e30:	0804d140 	call	804d14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  804e34:	01c07fc4 	movi	r7,511
  804e38:	01800044 	movi	r6,1
  804e3c:	e17ffd17 	ldw	r5,-12(fp)
  804e40:	01002034 	movhi	r4,128
  804e44:	21185c04 	addi	r4,r4,24944
  804e48:	0804d140 	call	804d14 <alt_open_fd>
}  
  804e4c:	0001883a 	nop
  804e50:	e037883a 	mov	sp,fp
  804e54:	dfc00117 	ldw	ra,4(sp)
  804e58:	df000017 	ldw	fp,0(sp)
  804e5c:	dec00204 	addi	sp,sp,8
  804e60:	f800283a 	ret

00804e64 <alt_get_errno>:
{
  804e64:	defffe04 	addi	sp,sp,-8
  804e68:	dfc00115 	stw	ra,4(sp)
  804e6c:	df000015 	stw	fp,0(sp)
  804e70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804e74:	d0a00917 	ldw	r2,-32732(gp)
  804e78:	10000326 	beq	r2,zero,804e88 <alt_get_errno+0x24>
  804e7c:	d0a00917 	ldw	r2,-32732(gp)
  804e80:	103ee83a 	callr	r2
  804e84:	00000106 	br	804e8c <alt_get_errno+0x28>
  804e88:	d0a6ac04 	addi	r2,gp,-25936
}
  804e8c:	e037883a 	mov	sp,fp
  804e90:	dfc00117 	ldw	ra,4(sp)
  804e94:	df000017 	ldw	fp,0(sp)
  804e98:	dec00204 	addi	sp,sp,8
  804e9c:	f800283a 	ret

00804ea0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  804ea0:	defffd04 	addi	sp,sp,-12
  804ea4:	df000215 	stw	fp,8(sp)
  804ea8:	df000204 	addi	fp,sp,8
  804eac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  804eb0:	e0bffe17 	ldw	r2,-8(fp)
  804eb4:	10800217 	ldw	r2,8(r2)
  804eb8:	10d00034 	orhi	r3,r2,16384
  804ebc:	e0bffe17 	ldw	r2,-8(fp)
  804ec0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804ec4:	e03fff15 	stw	zero,-4(fp)
  804ec8:	00002306 	br	804f58 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804ecc:	e0ffff17 	ldw	r3,-4(fp)
  804ed0:	1805883a 	mov	r2,r3
  804ed4:	1085883a 	add	r2,r2,r2
  804ed8:	10c5883a 	add	r2,r2,r3
  804edc:	100490ba 	slli	r2,r2,2
  804ee0:	00c02034 	movhi	r3,128
  804ee4:	10c7883a 	add	r3,r2,r3
  804ee8:	18d85617 	ldw	r3,24920(r3)
  804eec:	e0bffe17 	ldw	r2,-8(fp)
  804ef0:	10800017 	ldw	r2,0(r2)
  804ef4:	1880151e 	bne	r3,r2,804f4c <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  804ef8:	e0ffff17 	ldw	r3,-4(fp)
  804efc:	1805883a 	mov	r2,r3
  804f00:	1085883a 	add	r2,r2,r2
  804f04:	10c5883a 	add	r2,r2,r3
  804f08:	100490ba 	slli	r2,r2,2
  804f0c:	00c02034 	movhi	r3,128
  804f10:	10c7883a 	add	r3,r2,r3
  804f14:	18985817 	ldw	r2,24928(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
  804f18:	10000c0e 	bge	r2,zero,804f4c <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
  804f1c:	e0ffff17 	ldw	r3,-4(fp)
  804f20:	1805883a 	mov	r2,r3
  804f24:	1085883a 	add	r2,r2,r2
  804f28:	10c5883a 	add	r2,r2,r3
  804f2c:	100490ba 	slli	r2,r2,2
  804f30:	00c02034 	movhi	r3,128
  804f34:	18d85604 	addi	r3,r3,24920
  804f38:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  804f3c:	e0fffe17 	ldw	r3,-8(fp)
  804f40:	18800226 	beq	r3,r2,804f4c <alt_file_locked+0xac>
    {
      return -EACCES;
  804f44:	00bffcc4 	movi	r2,-13
  804f48:	00000806 	br	804f6c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
  804f4c:	e0bfff17 	ldw	r2,-4(fp)
  804f50:	10800044 	addi	r2,r2,1
  804f54:	e0bfff15 	stw	r2,-4(fp)
  804f58:	d0a00817 	ldw	r2,-32736(gp)
  804f5c:	1007883a 	mov	r3,r2
  804f60:	e0bfff17 	ldw	r2,-4(fp)
  804f64:	18bfd92e 	bgeu	r3,r2,804ecc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  804f68:	0005883a 	mov	r2,zero
}
  804f6c:	e037883a 	mov	sp,fp
  804f70:	df000017 	ldw	fp,0(sp)
  804f74:	dec00104 	addi	sp,sp,4
  804f78:	f800283a 	ret

00804f7c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  804f7c:	defff604 	addi	sp,sp,-40
  804f80:	dfc00915 	stw	ra,36(sp)
  804f84:	df000815 	stw	fp,32(sp)
  804f88:	df000804 	addi	fp,sp,32
  804f8c:	e13ffa15 	stw	r4,-24(fp)
  804f90:	e17ff915 	stw	r5,-28(fp)
  804f94:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  804f98:	00bfffc4 	movi	r2,-1
  804f9c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
  804fa0:	00bffb44 	movi	r2,-19
  804fa4:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
  804fa8:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  804fac:	d1600604 	addi	r5,gp,-32744
  804fb0:	e13ffa17 	ldw	r4,-24(fp)
  804fb4:	08052ac0 	call	8052ac <alt_find_dev>
  804fb8:	e0bfff15 	stw	r2,-4(fp)
  804fbc:	e0bfff17 	ldw	r2,-4(fp)
  804fc0:	1000051e 	bne	r2,zero,804fd8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  804fc4:	e13ffa17 	ldw	r4,-24(fp)
  804fc8:	080533c0 	call	80533c <alt_find_file>
  804fcc:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
  804fd0:	00800044 	movi	r2,1
  804fd4:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  804fd8:	e0bfff17 	ldw	r2,-4(fp)
  804fdc:	10002c26 	beq	r2,zero,805090 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  804fe0:	e13fff17 	ldw	r4,-4(fp)
  804fe4:	08054440 	call	805444 <alt_get_fd>
  804fe8:	e0bffe15 	stw	r2,-8(fp)
  804fec:	e0bffe17 	ldw	r2,-8(fp)
  804ff0:	1000030e 	bge	r2,zero,805000 <open+0x84>
    {
      status = index;
  804ff4:	e0bffe17 	ldw	r2,-8(fp)
  804ff8:	e0bffd15 	stw	r2,-12(fp)
  804ffc:	00002606 	br	805098 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  805000:	e0fffe17 	ldw	r3,-8(fp)
  805004:	1805883a 	mov	r2,r3
  805008:	1085883a 	add	r2,r2,r2
  80500c:	10c5883a 	add	r2,r2,r3
  805010:	100490ba 	slli	r2,r2,2
  805014:	00c02034 	movhi	r3,128
  805018:	18d85604 	addi	r3,r3,24920
  80501c:	10c5883a 	add	r2,r2,r3
  805020:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  805024:	e0fff917 	ldw	r3,-28(fp)
  805028:	00900034 	movhi	r2,16384
  80502c:	10bfffc4 	addi	r2,r2,-1
  805030:	1886703a 	and	r3,r3,r2
  805034:	e0bffb17 	ldw	r2,-20(fp)
  805038:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80503c:	e0bffc17 	ldw	r2,-16(fp)
  805040:	1000051e 	bne	r2,zero,805058 <open+0xdc>
  805044:	e13ffb17 	ldw	r4,-20(fp)
  805048:	0804ea00 	call	804ea0 <alt_file_locked>
  80504c:	e0bffd15 	stw	r2,-12(fp)
  805050:	e0bffd17 	ldw	r2,-12(fp)
  805054:	10001016 	blt	r2,zero,805098 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  805058:	e0bfff17 	ldw	r2,-4(fp)
  80505c:	10800317 	ldw	r2,12(r2)
  805060:	10000826 	beq	r2,zero,805084 <open+0x108>
  805064:	e0bfff17 	ldw	r2,-4(fp)
  805068:	10800317 	ldw	r2,12(r2)
  80506c:	e1fff817 	ldw	r7,-32(fp)
  805070:	e1bff917 	ldw	r6,-28(fp)
  805074:	e17ffa17 	ldw	r5,-24(fp)
  805078:	e13ffb17 	ldw	r4,-20(fp)
  80507c:	103ee83a 	callr	r2
  805080:	00000106 	br	805088 <open+0x10c>
  805084:	0005883a 	mov	r2,zero
  805088:	e0bffd15 	stw	r2,-12(fp)
  80508c:	00000206 	br	805098 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  805090:	00bffb44 	movi	r2,-19
  805094:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  805098:	e0bffd17 	ldw	r2,-12(fp)
  80509c:	1000090e 	bge	r2,zero,8050c4 <open+0x148>
  {
    alt_release_fd (index);  
  8050a0:	e13ffe17 	ldw	r4,-8(fp)
  8050a4:	08038680 	call	803868 <alt_release_fd>
    ALT_ERRNO = -status;
  8050a8:	0804e640 	call	804e64 <alt_get_errno>
  8050ac:	1007883a 	mov	r3,r2
  8050b0:	e0bffd17 	ldw	r2,-12(fp)
  8050b4:	0085c83a 	sub	r2,zero,r2
  8050b8:	18800015 	stw	r2,0(r3)
    return -1;
  8050bc:	00bfffc4 	movi	r2,-1
  8050c0:	00000106 	br	8050c8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  8050c4:	e0bffe17 	ldw	r2,-8(fp)
}
  8050c8:	e037883a 	mov	sp,fp
  8050cc:	dfc00117 	ldw	ra,4(sp)
  8050d0:	df000017 	ldw	fp,0(sp)
  8050d4:	dec00204 	addi	sp,sp,8
  8050d8:	f800283a 	ret

008050dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8050dc:	defffa04 	addi	sp,sp,-24
  8050e0:	df000515 	stw	fp,20(sp)
  8050e4:	df000504 	addi	fp,sp,20
  8050e8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
  8050ec:	0005303a 	rdctl	r2,status
  8050f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8050f4:	e0fffc17 	ldw	r3,-16(fp)
  8050f8:	00bfff84 	movi	r2,-2
  8050fc:	1884703a 	and	r2,r3,r2
  805100:	1001703a 	wrctl	status,r2
  return context;
  805104:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  805108:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
  80510c:	e0bffb17 	ldw	r2,-20(fp)
  805110:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  805114:	e0bffd17 	ldw	r2,-12(fp)
  805118:	10800017 	ldw	r2,0(r2)
  80511c:	e0fffd17 	ldw	r3,-12(fp)
  805120:	18c00117 	ldw	r3,4(r3)
  805124:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  805128:	e0bffd17 	ldw	r2,-12(fp)
  80512c:	10800117 	ldw	r2,4(r2)
  805130:	e0fffd17 	ldw	r3,-12(fp)
  805134:	18c00017 	ldw	r3,0(r3)
  805138:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80513c:	e0bffd17 	ldw	r2,-12(fp)
  805140:	e0fffd17 	ldw	r3,-12(fp)
  805144:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  805148:	e0bffd17 	ldw	r2,-12(fp)
  80514c:	e0fffd17 	ldw	r3,-12(fp)
  805150:	10c00015 	stw	r3,0(r2)
} 
  805154:	0001883a 	nop
  805158:	e0bfff17 	ldw	r2,-4(fp)
  80515c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  805160:	e0bffe17 	ldw	r2,-8(fp)
  805164:	1001703a 	wrctl	status,r2
}
  805168:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
  80516c:	0001883a 	nop
  805170:	e037883a 	mov	sp,fp
  805174:	df000017 	ldw	fp,0(sp)
  805178:	dec00104 	addi	sp,sp,4
  80517c:	f800283a 	ret

00805180 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  805180:	defffb04 	addi	sp,sp,-20
  805184:	dfc00415 	stw	ra,16(sp)
  805188:	df000315 	stw	fp,12(sp)
  80518c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  805190:	d0a00c17 	ldw	r2,-32720(gp)
  805194:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  805198:	d0a6b217 	ldw	r2,-25912(gp)
  80519c:	10800044 	addi	r2,r2,1
  8051a0:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8051a4:	00002e06 	br	805260 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8051a8:	e0bfff17 	ldw	r2,-4(fp)
  8051ac:	10800017 	ldw	r2,0(r2)
  8051b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8051b4:	e0bfff17 	ldw	r2,-4(fp)
  8051b8:	10800403 	ldbu	r2,16(r2)
  8051bc:	10803fcc 	andi	r2,r2,255
  8051c0:	10000426 	beq	r2,zero,8051d4 <alt_tick+0x54>
  8051c4:	d0a6b217 	ldw	r2,-25912(gp)
  8051c8:	1000021e 	bne	r2,zero,8051d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8051cc:	e0bfff17 	ldw	r2,-4(fp)
  8051d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8051d4:	e0bfff17 	ldw	r2,-4(fp)
  8051d8:	10800217 	ldw	r2,8(r2)
  8051dc:	d0e6b217 	ldw	r3,-25912(gp)
  8051e0:	18801d36 	bltu	r3,r2,805258 <alt_tick+0xd8>
  8051e4:	e0bfff17 	ldw	r2,-4(fp)
  8051e8:	10800403 	ldbu	r2,16(r2)
  8051ec:	10803fcc 	andi	r2,r2,255
  8051f0:	1000191e 	bne	r2,zero,805258 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8051f4:	e0bfff17 	ldw	r2,-4(fp)
  8051f8:	10800317 	ldw	r2,12(r2)
  8051fc:	e0ffff17 	ldw	r3,-4(fp)
  805200:	18c00517 	ldw	r3,20(r3)
  805204:	1809883a 	mov	r4,r3
  805208:	103ee83a 	callr	r2
  80520c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  805210:	e0bffd17 	ldw	r2,-12(fp)
  805214:	1000031e 	bne	r2,zero,805224 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  805218:	e13fff17 	ldw	r4,-4(fp)
  80521c:	08050dc0 	call	8050dc <alt_alarm_stop>
  805220:	00000d06 	br	805258 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  805224:	e0bfff17 	ldw	r2,-4(fp)
  805228:	10c00217 	ldw	r3,8(r2)
  80522c:	e0bffd17 	ldw	r2,-12(fp)
  805230:	1887883a 	add	r3,r3,r2
  805234:	e0bfff17 	ldw	r2,-4(fp)
  805238:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80523c:	e0bfff17 	ldw	r2,-4(fp)
  805240:	10c00217 	ldw	r3,8(r2)
  805244:	d0a6b217 	ldw	r2,-25912(gp)
  805248:	1880032e 	bgeu	r3,r2,805258 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80524c:	e0bfff17 	ldw	r2,-4(fp)
  805250:	00c00044 	movi	r3,1
  805254:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  805258:	e0bffe17 	ldw	r2,-8(fp)
  80525c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
  805260:	e0ffff17 	ldw	r3,-4(fp)
  805264:	d0a00c04 	addi	r2,gp,-32720
  805268:	18bfcf1e 	bne	r3,r2,8051a8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80526c:	0001883a 	nop
}
  805270:	0001883a 	nop
  805274:	e037883a 	mov	sp,fp
  805278:	dfc00117 	ldw	ra,4(sp)
  80527c:	df000017 	ldw	fp,0(sp)
  805280:	dec00204 	addi	sp,sp,8
  805284:	f800283a 	ret

00805288 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  805288:	deffff04 	addi	sp,sp,-4
  80528c:	df000015 	stw	fp,0(sp)
  805290:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  805294:	000170fa 	wrctl	ienable,zero
}
  805298:	0001883a 	nop
  80529c:	e037883a 	mov	sp,fp
  8052a0:	df000017 	ldw	fp,0(sp)
  8052a4:	dec00104 	addi	sp,sp,4
  8052a8:	f800283a 	ret

008052ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8052ac:	defffa04 	addi	sp,sp,-24
  8052b0:	dfc00515 	stw	ra,20(sp)
  8052b4:	df000415 	stw	fp,16(sp)
  8052b8:	df000404 	addi	fp,sp,16
  8052bc:	e13ffd15 	stw	r4,-12(fp)
  8052c0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8052c4:	e0bffc17 	ldw	r2,-16(fp)
  8052c8:	10800017 	ldw	r2,0(r2)
  8052cc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8052d0:	e13ffd17 	ldw	r4,-12(fp)
  8052d4:	08003940 	call	800394 <strlen>
  8052d8:	10800044 	addi	r2,r2,1
  8052dc:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8052e0:	00000d06 	br	805318 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8052e4:	e0bfff17 	ldw	r2,-4(fp)
  8052e8:	10800217 	ldw	r2,8(r2)
  8052ec:	e0fffe17 	ldw	r3,-8(fp)
  8052f0:	180d883a 	mov	r6,r3
  8052f4:	e17ffd17 	ldw	r5,-12(fp)
  8052f8:	1009883a 	mov	r4,r2
  8052fc:	080566c0 	call	80566c <memcmp>
  805300:	1000021e 	bne	r2,zero,80530c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  805304:	e0bfff17 	ldw	r2,-4(fp)
  805308:	00000706 	br	805328 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80530c:	e0bfff17 	ldw	r2,-4(fp)
  805310:	10800017 	ldw	r2,0(r2)
  805314:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
  805318:	e0ffff17 	ldw	r3,-4(fp)
  80531c:	e0bffc17 	ldw	r2,-16(fp)
  805320:	18bff01e 	bne	r3,r2,8052e4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
  805324:	0005883a 	mov	r2,zero
}
  805328:	e037883a 	mov	sp,fp
  80532c:	dfc00117 	ldw	ra,4(sp)
  805330:	df000017 	ldw	fp,0(sp)
  805334:	dec00204 	addi	sp,sp,8
  805338:	f800283a 	ret

0080533c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80533c:	defffb04 	addi	sp,sp,-20
  805340:	dfc00415 	stw	ra,16(sp)
  805344:	df000315 	stw	fp,12(sp)
  805348:	df000304 	addi	fp,sp,12
  80534c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  805350:	d0a00417 	ldw	r2,-32752(gp)
  805354:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  805358:	00003106 	br	805420 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80535c:	e0bfff17 	ldw	r2,-4(fp)
  805360:	10800217 	ldw	r2,8(r2)
  805364:	1009883a 	mov	r4,r2
  805368:	08003940 	call	800394 <strlen>
  80536c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  805370:	e0bfff17 	ldw	r2,-4(fp)
  805374:	10c00217 	ldw	r3,8(r2)
  805378:	e0bffe17 	ldw	r2,-8(fp)
  80537c:	10bfffc4 	addi	r2,r2,-1
  805380:	1885883a 	add	r2,r3,r2
  805384:	10800003 	ldbu	r2,0(r2)
  805388:	10803fcc 	andi	r2,r2,255
  80538c:	1080201c 	xori	r2,r2,128
  805390:	10bfe004 	addi	r2,r2,-128
  805394:	10800bd8 	cmpnei	r2,r2,47
  805398:	1000031e 	bne	r2,zero,8053a8 <alt_find_file+0x6c>
    {
      len -= 1;
  80539c:	e0bffe17 	ldw	r2,-8(fp)
  8053a0:	10bfffc4 	addi	r2,r2,-1
  8053a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8053a8:	e0bffe17 	ldw	r2,-8(fp)
  8053ac:	e0fffd17 	ldw	r3,-12(fp)
  8053b0:	1885883a 	add	r2,r3,r2
  8053b4:	10800003 	ldbu	r2,0(r2)
  8053b8:	10803fcc 	andi	r2,r2,255
  8053bc:	1080201c 	xori	r2,r2,128
  8053c0:	10bfe004 	addi	r2,r2,-128
  8053c4:	10800be0 	cmpeqi	r2,r2,47
  8053c8:	1000081e 	bne	r2,zero,8053ec <alt_find_file+0xb0>
  8053cc:	e0bffe17 	ldw	r2,-8(fp)
  8053d0:	e0fffd17 	ldw	r3,-12(fp)
  8053d4:	1885883a 	add	r2,r3,r2
  8053d8:	10800003 	ldbu	r2,0(r2)
  8053dc:	10803fcc 	andi	r2,r2,255
  8053e0:	1080201c 	xori	r2,r2,128
  8053e4:	10bfe004 	addi	r2,r2,-128
  8053e8:	10000a1e 	bne	r2,zero,805414 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8053ec:	e0bfff17 	ldw	r2,-4(fp)
  8053f0:	10800217 	ldw	r2,8(r2)
  8053f4:	e0fffe17 	ldw	r3,-8(fp)
  8053f8:	180d883a 	mov	r6,r3
  8053fc:	e17ffd17 	ldw	r5,-12(fp)
  805400:	1009883a 	mov	r4,r2
  805404:	080566c0 	call	80566c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
  805408:	1000021e 	bne	r2,zero,805414 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
  80540c:	e0bfff17 	ldw	r2,-4(fp)
  805410:	00000706 	br	805430 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  805414:	e0bfff17 	ldw	r2,-4(fp)
  805418:	10800017 	ldw	r2,0(r2)
  80541c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
  805420:	e0ffff17 	ldw	r3,-4(fp)
  805424:	d0a00404 	addi	r2,gp,-32752
  805428:	18bfcc1e 	bne	r3,r2,80535c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
  80542c:	0005883a 	mov	r2,zero
}
  805430:	e037883a 	mov	sp,fp
  805434:	dfc00117 	ldw	ra,4(sp)
  805438:	df000017 	ldw	fp,0(sp)
  80543c:	dec00204 	addi	sp,sp,8
  805440:	f800283a 	ret

00805444 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  805444:	defffc04 	addi	sp,sp,-16
  805448:	df000315 	stw	fp,12(sp)
  80544c:	df000304 	addi	fp,sp,12
  805450:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
  805454:	00bffa04 	movi	r2,-24
  805458:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80545c:	e03fff15 	stw	zero,-4(fp)
  805460:	00001d06 	br	8054d8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  805464:	e0ffff17 	ldw	r3,-4(fp)
  805468:	1805883a 	mov	r2,r3
  80546c:	1085883a 	add	r2,r2,r2
  805470:	10c5883a 	add	r2,r2,r3
  805474:	100490ba 	slli	r2,r2,2
  805478:	00c02034 	movhi	r3,128
  80547c:	10c7883a 	add	r3,r2,r3
  805480:	18985617 	ldw	r2,24920(r3)
  805484:	1000111e 	bne	r2,zero,8054cc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  805488:	e0ffff17 	ldw	r3,-4(fp)
  80548c:	1805883a 	mov	r2,r3
  805490:	1085883a 	add	r2,r2,r2
  805494:	10c5883a 	add	r2,r2,r3
  805498:	100490ba 	slli	r2,r2,2
  80549c:	e13ffd17 	ldw	r4,-12(fp)
  8054a0:	00c02034 	movhi	r3,128
  8054a4:	10c7883a 	add	r3,r2,r3
  8054a8:	19185615 	stw	r4,24920(r3)
      if (i > alt_max_fd)
  8054ac:	d0e00817 	ldw	r3,-32736(gp)
  8054b0:	e0bfff17 	ldw	r2,-4(fp)
  8054b4:	1880020e 	bge	r3,r2,8054c0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  8054b8:	e0bfff17 	ldw	r2,-4(fp)
  8054bc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  8054c0:	e0bfff17 	ldw	r2,-4(fp)
  8054c4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8054c8:	00000706 	br	8054e8 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
  8054cc:	e0bfff17 	ldw	r2,-4(fp)
  8054d0:	10800044 	addi	r2,r2,1
  8054d4:	e0bfff15 	stw	r2,-4(fp)
  8054d8:	e0bfff17 	ldw	r2,-4(fp)
  8054dc:	10800810 	cmplti	r2,r2,32
  8054e0:	103fe01e 	bne	r2,zero,805464 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
  8054e4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8054e8:	e0bffe17 	ldw	r2,-8(fp)
}
  8054ec:	e037883a 	mov	sp,fp
  8054f0:	df000017 	ldw	fp,0(sp)
  8054f4:	dec00104 	addi	sp,sp,4
  8054f8:	f800283a 	ret

008054fc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8054fc:	defffb04 	addi	sp,sp,-20
  805500:	df000415 	stw	fp,16(sp)
  805504:	df000404 	addi	fp,sp,16
  805508:	e13ffd15 	stw	r4,-12(fp)
  80550c:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  805510:	e0bffc17 	ldw	r2,-16(fp)
  805514:	10820070 	cmpltui	r2,r2,2049
  805518:	1000021e 	bne	r2,zero,805524 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80551c:	00820004 	movi	r2,2048
  805520:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
  805524:	e0fffd17 	ldw	r3,-12(fp)
  805528:	e0bffc17 	ldw	r2,-16(fp)
  80552c:	1885883a 	add	r2,r3,r2
  805530:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  805534:	e0bffd17 	ldw	r2,-12(fp)
  805538:	e0bfff15 	stw	r2,-4(fp)
  80553c:	00000506 	br	805554 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  805540:	e0bfff17 	ldw	r2,-4(fp)
  805544:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  805548:	e0bfff17 	ldw	r2,-4(fp)
  80554c:	10800804 	addi	r2,r2,32
  805550:	e0bfff15 	stw	r2,-4(fp)
  805554:	e0ffff17 	ldw	r3,-4(fp)
  805558:	e0bffe17 	ldw	r2,-8(fp)
  80555c:	18bff836 	bltu	r3,r2,805540 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  805560:	e0bffd17 	ldw	r2,-12(fp)
  805564:	108007cc 	andi	r2,r2,31
  805568:	10000226 	beq	r2,zero,805574 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80556c:	e0bfff17 	ldw	r2,-4(fp)
  805570:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  805574:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  805578:	0001883a 	nop
  80557c:	e037883a 	mov	sp,fp
  805580:	df000017 	ldw	fp,0(sp)
  805584:	dec00104 	addi	sp,sp,4
  805588:	f800283a 	ret

0080558c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80558c:	defffe04 	addi	sp,sp,-8
  805590:	df000115 	stw	fp,4(sp)
  805594:	df000104 	addi	fp,sp,4
  805598:	e13fff15 	stw	r4,-4(fp)
  80559c:	e0bfff17 	ldw	r2,-4(fp)
  8055a0:	10bffe84 	addi	r2,r2,-6
  8055a4:	10c00428 	cmpgeui	r3,r2,16
  8055a8:	1800191e 	bne	r3,zero,805610 <alt_exception_cause_generated_bad_addr+0x84>
  8055ac:	100690ba 	slli	r3,r2,2
  8055b0:	00802034 	movhi	r2,128
  8055b4:	1885883a 	add	r2,r3,r2
  8055b8:	10957017 	ldw	r2,21952(r2)
  8055bc:	1000683a 	jmp	r2
  8055c0:	00805600 	call	80560 <__reset-0x77faa0>
  8055c4:	00805600 	call	80560 <__reset-0x77faa0>
  8055c8:	00805610 	cmplti	r2,zero,344
  8055cc:	00805610 	cmplti	r2,zero,344
  8055d0:	00805610 	cmplti	r2,zero,344
  8055d4:	00805600 	call	80560 <__reset-0x77faa0>
  8055d8:	00805608 	cmpgei	r2,zero,344
  8055dc:	00805610 	cmplti	r2,zero,344
  8055e0:	00805600 	call	80560 <__reset-0x77faa0>
  8055e4:	00805600 	call	80560 <__reset-0x77faa0>
  8055e8:	00805610 	cmplti	r2,zero,344
  8055ec:	00805600 	call	80560 <__reset-0x77faa0>
  8055f0:	00805608 	cmpgei	r2,zero,344
  8055f4:	00805610 	cmplti	r2,zero,344
  8055f8:	00805610 	cmplti	r2,zero,344
  8055fc:	00805600 	call	80560 <__reset-0x77faa0>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  805600:	00800044 	movi	r2,1
  805604:	00000306 	br	805614 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  805608:	0005883a 	mov	r2,zero
  80560c:	00000106 	br	805614 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
  805610:	0005883a 	mov	r2,zero
  }
}
  805614:	e037883a 	mov	sp,fp
  805618:	df000017 	ldw	fp,0(sp)
  80561c:	dec00104 	addi	sp,sp,4
  805620:	f800283a 	ret

00805624 <atexit>:
  805624:	200b883a 	mov	r5,r4
  805628:	000f883a 	mov	r7,zero
  80562c:	000d883a 	mov	r6,zero
  805630:	0009883a 	mov	r4,zero
  805634:	08056e41 	jmpi	8056e4 <__register_exitproc>

00805638 <exit>:
  805638:	defffe04 	addi	sp,sp,-8
  80563c:	000b883a 	mov	r5,zero
  805640:	dc000015 	stw	r16,0(sp)
  805644:	dfc00115 	stw	ra,4(sp)
  805648:	2021883a 	mov	r16,r4
  80564c:	08057740 	call	805774 <__call_exitprocs>
  805650:	00802034 	movhi	r2,128
  805654:	111cce17 	ldw	r4,29496(r2)
  805658:	20800f17 	ldw	r2,60(r4)
  80565c:	10000126 	beq	r2,zero,805664 <exit+0x2c>
  805660:	103ee83a 	callr	r2
  805664:	8009883a 	mov	r4,r16
  805668:	08058940 	call	805894 <_exit>

0080566c <memcmp>:
  80566c:	30800130 	cmpltui	r2,r6,4
  805670:	10000b1e 	bne	r2,zero,8056a0 <memcmp+0x34>
  805674:	2144b03a 	or	r2,r4,r5
  805678:	108000cc 	andi	r2,r2,3
  80567c:	1000171e 	bne	r2,zero,8056dc <memcmp+0x70>
  805680:	20c00017 	ldw	r3,0(r4)
  805684:	28800017 	ldw	r2,0(r5)
  805688:	1880141e 	bne	r3,r2,8056dc <memcmp+0x70>
  80568c:	31bfff04 	addi	r6,r6,-4
  805690:	30800128 	cmpgeui	r2,r6,4
  805694:	21000104 	addi	r4,r4,4
  805698:	29400104 	addi	r5,r5,4
  80569c:	103ff81e 	bne	r2,zero,805680 <memcmp+0x14>
  8056a0:	30bfffc4 	addi	r2,r6,-1
  8056a4:	30000b26 	beq	r6,zero,8056d4 <memcmp+0x68>
  8056a8:	11800044 	addi	r6,r2,1
  8056ac:	218d883a 	add	r6,r4,r6
  8056b0:	00000106 	br	8056b8 <memcmp+0x4c>
  8056b4:	21800726 	beq	r4,r6,8056d4 <memcmp+0x68>
  8056b8:	20800003 	ldbu	r2,0(r4)
  8056bc:	28c00003 	ldbu	r3,0(r5)
  8056c0:	21000044 	addi	r4,r4,1
  8056c4:	29400044 	addi	r5,r5,1
  8056c8:	10fffa26 	beq	r2,r3,8056b4 <memcmp+0x48>
  8056cc:	10c5c83a 	sub	r2,r2,r3
  8056d0:	f800283a 	ret
  8056d4:	0005883a 	mov	r2,zero
  8056d8:	f800283a 	ret
  8056dc:	30bfffc4 	addi	r2,r6,-1
  8056e0:	003ff106 	br	8056a8 <memcmp+0x3c>

008056e4 <__register_exitproc>:
  8056e4:	00802034 	movhi	r2,128
  8056e8:	10dcce17 	ldw	r3,29496(r2)
  8056ec:	18805217 	ldw	r2,328(r3)
  8056f0:	10001726 	beq	r2,zero,805750 <__register_exitproc+0x6c>
  8056f4:	10c00117 	ldw	r3,4(r2)
  8056f8:	1a000808 	cmpgei	r8,r3,32
  8056fc:	40001b1e 	bne	r8,zero,80576c <__register_exitproc+0x88>
  805700:	20000b26 	beq	r4,zero,805730 <__register_exitproc+0x4c>
  805704:	181090ba 	slli	r8,r3,2
  805708:	02400044 	movi	r9,1
  80570c:	48d2983a 	sll	r9,r9,r3
  805710:	1211883a 	add	r8,r2,r8
  805714:	41802215 	stw	r6,136(r8)
  805718:	11806217 	ldw	r6,392(r2)
  80571c:	21000098 	cmpnei	r4,r4,2
  805720:	324cb03a 	or	r6,r6,r9
  805724:	11806215 	stw	r6,392(r2)
  805728:	41c04215 	stw	r7,264(r8)
  80572c:	20000b26 	beq	r4,zero,80575c <__register_exitproc+0x78>
  805730:	19000084 	addi	r4,r3,2
  805734:	200890ba 	slli	r4,r4,2
  805738:	18c00044 	addi	r3,r3,1
  80573c:	10c00115 	stw	r3,4(r2)
  805740:	1105883a 	add	r2,r2,r4
  805744:	11400015 	stw	r5,0(r2)
  805748:	0005883a 	mov	r2,zero
  80574c:	f800283a 	ret
  805750:	18805304 	addi	r2,r3,332
  805754:	18805215 	stw	r2,328(r3)
  805758:	003fe606 	br	8056f4 <__register_exitproc+0x10>
  80575c:	11006317 	ldw	r4,396(r2)
  805760:	2252b03a 	or	r9,r4,r9
  805764:	12406315 	stw	r9,396(r2)
  805768:	003ff106 	br	805730 <__register_exitproc+0x4c>
  80576c:	00bfffc4 	movi	r2,-1
  805770:	f800283a 	ret

00805774 <__call_exitprocs>:
  805774:	defff704 	addi	sp,sp,-36
  805778:	00802034 	movhi	r2,128
  80577c:	dcc00315 	stw	r19,12(sp)
  805780:	14dcce17 	ldw	r19,29496(r2)
  805784:	dc800215 	stw	r18,8(sp)
  805788:	dfc00815 	stw	ra,32(sp)
  80578c:	9c805217 	ldw	r18,328(r19)
  805790:	ddc00715 	stw	r23,28(sp)
  805794:	dd800615 	stw	r22,24(sp)
  805798:	dd400515 	stw	r21,20(sp)
  80579c:	dd000415 	stw	r20,16(sp)
  8057a0:	dc400115 	stw	r17,4(sp)
  8057a4:	dc000015 	stw	r16,0(sp)
  8057a8:	90001026 	beq	r18,zero,8057ec <__call_exitprocs+0x78>
  8057ac:	202b883a 	mov	r21,r4
  8057b0:	282d883a 	mov	r22,r5
  8057b4:	05000044 	movi	r20,1
  8057b8:	94000117 	ldw	r16,4(r18)
  8057bc:	847fffc4 	addi	r17,r16,-1
  8057c0:	88000a16 	blt	r17,zero,8057ec <__call_exitprocs+0x78>
  8057c4:	84000044 	addi	r16,r16,1
  8057c8:	802090ba 	slli	r16,r16,2
  8057cc:	9421883a 	add	r16,r18,r16
  8057d0:	b0001126 	beq	r22,zero,805818 <__call_exitprocs+0xa4>
  8057d4:	80804017 	ldw	r2,256(r16)
  8057d8:	15800f26 	beq	r2,r22,805818 <__call_exitprocs+0xa4>
  8057dc:	8c7fffc4 	addi	r17,r17,-1
  8057e0:	88bfffd8 	cmpnei	r2,r17,-1
  8057e4:	843fff04 	addi	r16,r16,-4
  8057e8:	103ff91e 	bne	r2,zero,8057d0 <__call_exitprocs+0x5c>
  8057ec:	dfc00817 	ldw	ra,32(sp)
  8057f0:	ddc00717 	ldw	r23,28(sp)
  8057f4:	dd800617 	ldw	r22,24(sp)
  8057f8:	dd400517 	ldw	r21,20(sp)
  8057fc:	dd000417 	ldw	r20,16(sp)
  805800:	dcc00317 	ldw	r19,12(sp)
  805804:	dc800217 	ldw	r18,8(sp)
  805808:	dc400117 	ldw	r17,4(sp)
  80580c:	dc000017 	ldw	r16,0(sp)
  805810:	dec00904 	addi	sp,sp,36
  805814:	f800283a 	ret
  805818:	90800117 	ldw	r2,4(r18)
  80581c:	81800017 	ldw	r6,0(r16)
  805820:	10bfffc4 	addi	r2,r2,-1
  805824:	14401726 	beq	r2,r17,805884 <__call_exitprocs+0x110>
  805828:	80000015 	stw	zero,0(r16)
  80582c:	303feb26 	beq	r6,zero,8057dc <__call_exitprocs+0x68>
  805830:	a446983a 	sll	r3,r20,r17
  805834:	90806217 	ldw	r2,392(r18)
  805838:	95c00117 	ldw	r23,4(r18)
  80583c:	1884703a 	and	r2,r3,r2
  805840:	1000081e 	bne	r2,zero,805864 <__call_exitprocs+0xf0>
  805844:	303ee83a 	callr	r6
  805848:	90c00117 	ldw	r3,4(r18)
  80584c:	98805217 	ldw	r2,328(r19)
  805850:	1dc0011e 	bne	r3,r23,805858 <__call_exitprocs+0xe4>
  805854:	90bfe126 	beq	r18,r2,8057dc <__call_exitprocs+0x68>
  805858:	103fe426 	beq	r2,zero,8057ec <__call_exitprocs+0x78>
  80585c:	1025883a 	mov	r18,r2
  805860:	003fd506 	br	8057b8 <__call_exitprocs+0x44>
  805864:	90806317 	ldw	r2,396(r18)
  805868:	81002017 	ldw	r4,128(r16)
  80586c:	1886703a 	and	r3,r3,r2
  805870:	1800061e 	bne	r3,zero,80588c <__call_exitprocs+0x118>
  805874:	200b883a 	mov	r5,r4
  805878:	a809883a 	mov	r4,r21
  80587c:	303ee83a 	callr	r6
  805880:	003ff106 	br	805848 <__call_exitprocs+0xd4>
  805884:	94400115 	stw	r17,4(r18)
  805888:	003fe806 	br	80582c <__call_exitprocs+0xb8>
  80588c:	303ee83a 	callr	r6
  805890:	003fed06 	br	805848 <__call_exitprocs+0xd4>

00805894 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  805894:	defffd04 	addi	sp,sp,-12
  805898:	df000215 	stw	fp,8(sp)
  80589c:	df000204 	addi	fp,sp,8
  8058a0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8058a4:	0001883a 	nop
  8058a8:	e0bffe17 	ldw	r2,-8(fp)
  8058ac:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8058b0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8058b4:	10000226 	beq	r2,zero,8058c0 <_exit+0x2c>
    ALT_SIM_FAIL();
  8058b8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
  8058bc:	00000106 	br	8058c4 <_exit+0x30>
    ALT_SIM_PASS();
  8058c0:	002af0b0 	cmpltui	zero,zero,43970
}
  8058c4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8058c8:	003fff06 	br	8058c8 <_exit+0x34>
