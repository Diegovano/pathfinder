
example_proj.elf:     file format elf32-littlenios2
example_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00010f48 memsz 0x00010f48 flags r-x
    LOAD off    0x00011f68 vaddr 0x00810f68 paddr 0x00812b40 align 2**12
         filesz 0x00001bd8 memsz 0x00001bd8 flags rw-
    LOAD off    0x00014718 vaddr 0x00814718 paddr 0x00814718 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000109c0  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000364  00810c04  00810c04  00011c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd8  00810f68  00812b40  00011f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00814718  00814718  00014718  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00814878  00814878  00013b40  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013b40  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f58  00000000  00000000  00013b68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024a28  00000000  00000000  00014ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009643  00000000  00000000  000394e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ba99  00000000  00000000  00042b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023c4  00000000  00000000  0004e5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003cf1  00000000  00000000  00050988  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017ad9  00000000  00000000  00054679  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006c154  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001918  00000000  00000000  0006c188  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00070f36  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00070f39  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00070f3c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00070f3d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00070f3e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00070f42  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00070f46  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00070f4a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00070f53  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00070f5c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00070f65  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000032  00000000  00000000  00070f6d  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c3b  00000000  00000000  00070f9f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004e347  00000000  00000000  00075bda  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00810c04 l    d  .rodata	00000000 .rodata
00810f68 l    d  .rwdata	00000000 .rwdata
00814718 l    d  .bss	00000000 .bss
00814878 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../example_proj_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00810daa l     O .rodata	00000010 zeroes.4404
00802c80 l     F .text	000000bc __sbprintf
00810dba l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00802e90 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008049e8 l     F .text	00000008 __fp_unlock
008049fc l     F .text	0000019c __sinit.part.1
00804b98 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00810f68 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
008113ac l     O .rwdata	00000020 lc_ctype_charset
0081138c l     O .rwdata	00000020 lc_message_charset
008113cc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00810dec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080806c l     F .text	000000fc __sprint_r.part.0
00810f10 l     O .rodata	00000010 zeroes.4349
008096a8 l     F .text	000000bc __sbprintf
00810f20 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d68c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080d7a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080d7cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080d8c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080d9a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080da94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080dc70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00812b20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080dee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080e020 l     F .text	00000034 alt_dev_reg
008119b4 l     O .rwdata	000000a4 dma_priv
00811a58 l     O .rwdata	0000001c dma_tx
00811a74 l     O .rwdata	0000001c dma_rx
00811a90 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
0080e114 l     F .text	00000034 alt_dma_txchan_reg
0080e148 l     F .text	00000034 alt_dma_rxchan_reg
0080e274 l     F .text	0000009c alt_avalon_dma_launch_txonly
0080e310 l     F .text	0000009c alt_avalon_dma_launch_rxonly
0080e3ac l     F .text	00000344 alt_avalon_dma_ioctl
0080ea64 l     F .text	000001c0 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080eefc l     F .text	0000020c altera_avalon_jtag_uart_irq
0080f108 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080f740 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080f9a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
0080fa88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
0080fb18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080ffcc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0081012c l     F .text	0000003c alt_get_errno
00810168 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081474c g     O .bss	00000004 alt_instruction_exception_handler
008076b0 g     F .text	00000074 _mprec_log10
0080779c g     F .text	0000008c __any_on
00809c5c g     F .text	00000054 _isatty_r
00810df8 g     O .rodata	00000028 __mprec_tinytens
0080dbac g     F .text	0000007c alt_main
0080081c g     F .text	000000c0 _puts_r
00814778 g     O .bss	00000100 alt_irq
00809cb0 g     F .text	00000060 _lseek_r
00812b40 g       *ABS*	00000000 __flash_rwdata_start
0080c0c8 g     F .text	00000088 .hidden __eqdf2
00814878 g       *ABS*	00000000 __alt_heap_start
008007e0 g     F .text	0000003c printf
00809ec8 g     F .text	0000009c _wcrtomb_r
00807f2c g     F .text	0000005c __sseek
00804d48 g     F .text	00000010 __sinit
0080ec24 g     F .text	000000b4 alt_avalon_dma_init
00809d70 g     F .text	00000140 __swbuf_r
0080581c g     F .text	0000007c _setlocale_r
00804ba0 g     F .text	00000078 __sfmoreglue
0080dc4c g     F .text	00000024 __malloc_unlock
008064ec g     F .text	0000015c memmove
00804d30 g     F .text	00000018 _cleanup
00806770 g     F .text	000000a8 _Balloc
0080c150 g     F .text	000000dc .hidden __gtdf2
00810554 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00809c00 g     F .text	0000005c _fstat_r
00814730 g     O .bss	00000004 errno
00807ea8 g     F .text	00000008 __seofread
00814738 g     O .bss	00000004 alt_argv
0081aaf0 g       *ABS*	00000000 _gp
0080fb54 g     F .text	00000054 alt_dma_txchan_open
00811834 g     O .rwdata	00000180 alt_fd_list
0080fc68 g     F .text	00000090 alt_find_dev
008063a4 g     F .text	00000148 memcpy
008049f0 g     F .text	0000000c _cleanup_r
0080d508 g     F .text	000000dc .hidden __floatsidf
008100b0 g     F .text	0000007c alt_io_redirect
0080c22c g     F .text	000000f4 .hidden __ltdf2
00810c04 g       *ABS*	00000000 __DTOR_END__
008008dc g     F .text	00000014 puts
008107d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00807d8c g     F .text	00000074 __fpclassifyd
0080760c g     F .text	000000a4 __ratio
0080968c g     F .text	0000001c __vfiprintf_internal
0080f300 g     F .text	0000021c altera_avalon_jtag_uart_read
008007b0 g     F .text	00000030 _printf_r
0080ad68 g     F .text	00000064 .hidden __udivsi3
0080d8fc g     F .text	000000ac isatty
00810e48 g     O .rodata	000000c8 __mprec_tens
00805898 g     F .text	0000000c __locale_charset
00810744 g     F .text	00000090 alt_icache_flush
0081472c g     O .bss	00000004 __malloc_top_pad
00812af8 g     O .rwdata	00000004 __mb_cur_max
008058c8 g     F .text	0000000c _localeconv_r
00806ba4 g     F .text	0000003c __i2b
008051cc g     F .text	000004c8 __sfvwrite_r
00807e00 g     F .text	00000054 _sbrk_r
00809d10 g     F .text	00000060 _read_r
00812b18 g     O .rwdata	00000004 alt_max_fd
008098f4 g     F .text	000000f0 _fclose_r
008049b8 g     F .text	00000030 fflush
00814728 g     O .bss	00000004 __malloc_max_sbrked_mem
0080063c g     F .text	00000110 .hidden __extendsfdf2
0080ae4c g     F .text	000008ac .hidden __adddf3
0080e17c g     F .text	000000f8 alt_avalon_dma_launch_bidir
008073b4 g     F .text	0000010c __b2d
0080fac4 g     F .text	00000054 alt_dma_rxchan_open
0080a6ac g     F .text	000005c4 .hidden __umoddi3
0080dad0 g     F .text	000000dc lseek
00812af0 g     O .rwdata	00000004 _global_impure_ptr
00807828 g     F .text	00000564 _realloc_r
00814878 g       *ABS*	00000000 __bss_end
0080fedc g     F .text	000000f0 alt_iic_isr_register
0081044c g     F .text	00000108 alt_tick
0080a0b0 g     F .text	000005fc .hidden __udivdi3
00809b5c g     F .text	00000024 _fputwc_r
00810e20 g     O .rodata	00000028 __mprec_bigtens
00806988 g     F .text	00000104 __s2b
0080d5e4 g     F .text	000000a8 .hidden __floatunsidf
008070f4 g     F .text	00000060 __mcmp
00804d68 g     F .text	00000018 __fp_lock_all
0080fe90 g     F .text	0000004c alt_ic_irq_enabled
008103b0 g     F .text	0000009c alt_alarm_stop
00814740 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
0081180c g     O .rwdata	00000028 alt_dev_null
0080f960 g     F .text	00000048 alt_dcache_flush_all
00806a8c g     F .text	00000068 __hi0bits
0080d488 g     F .text	00000080 .hidden __fixdfsi
00812b40 g       *ABS*	00000000 __ram_rwdata_end
00812b10 g     O .rwdata	00000008 alt_dev_list
0080e8b8 g     F .text	00000074 alt_avalon_dma_space
0080df20 g     F .text	00000100 write
00810f68 g       *ABS*	00000000 __ram_rodata_end
0080d808 g     F .text	000000b8 fstat
0080c22c g     F .text	000000f4 .hidden __ledf2
00806e6c g     F .text	00000140 __pow5mult
00808180 g     F .text	0000150c ___vfiprintf_internal_r
00814720 g     O .bss	00000004 __nlocale_changed
0080adcc g     F .text	00000058 .hidden __umodsi3
00814878 g       *ABS*	00000000 end
0080ee3c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00810c04 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080f7b8 g     F .text	0000007c alt_avalon_timer_sc_init
0080074c g     F .text	00000064 .hidden __clzsi2
0080f51c g     F .text	00000224 altera_avalon_jtag_uart_write
00804d58 g     F .text	00000004 __sfp_lock_acquire
008062c0 g     F .text	000000e4 memchr
00800988 g     F .text	000022dc ___vfprintf_internal_r
00804ebc g     F .text	00000310 _free_r
008058a4 g     F .text	00000010 __locale_mb_cur_max
0080e92c g     F .text	00000138 alt_avalon_dma_send
00810a50 g     F .text	00000180 __call_exitprocs
00812b2c g     O .rwdata	00000008 alt_dma_txchan_list
0081471c g     O .bss	00000004 __mlocale_changed
00812afc g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00814744 g     O .bss	00000004 _alt_tick_rate
00806fac g     F .text	00000148 __lshift
00814748 g     O .bss	00000004 _alt_nticks
0080dcac g     F .text	00000104 read
0080e08c g     F .text	00000088 alt_sys_init
00810938 g     F .text	00000118 __register_exitproc
00806be0 g     F .text	0000028c __multiply
0080f1a8 g     F .text	00000068 altera_avalon_jtag_uart_close
0080ae24 g     F .text	00000028 .hidden __mulsi3
00810f68 g       *ABS*	00000000 __ram_rwdata_start
00810c04 g       *ABS*	00000000 __ram_rodata_start
00814750 g     O .bss	00000028 __malloc_current_mallinfo
008074c0 g     F .text	0000014c __d2b
0080ecd8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00810680 g     F .text	000000c4 alt_get_fd
008097c4 g     F .text	00000054 _close_r
008108bc g     F .text	0000007c memcmp
0080ed98 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00814878 g       *ABS*	00000000 __alt_stack_base
0080ede8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802d3c g     F .text	00000154 __swsetup_r
0080b6f8 g     F .text	000009d0 .hidden __divdf3
00804c18 g     F .text	00000118 __sfp
00807724 g     F .text	00000078 __copybits
00811404 g     O .rwdata	00000408 __malloc_av_
00804d64 g     F .text	00000004 __sinit_lock_release
0080c320 g     F .text	0000086c .hidden __muldf3
00807e54 g     F .text	00000054 __sread
00810578 g     F .text	00000108 alt_find_file
0080f9e4 g     F .text	000000a4 alt_dev_llist_insert
0080dc28 g     F .text	00000024 __malloc_lock
0080de34 g     F .text	000000b0 sbrk
0080495c g     F .text	0000005c _fflush_r
00809818 g     F .text	000000dc _calloc_r
00814718 g       *ABS*	00000000 __bss_start
00806648 g     F .text	00000128 memset
00800290 g     F .text	000003ac main
0080e738 g     F .text	00000048 alt_avalon_dma_rx_ioctl
0081473c g     O .bss	00000004 alt_envp
00814724 g     O .bss	00000004 __malloc_max_total_mem
0080ed38 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00809eb0 g     F .text	00000018 __swbuf
00807f88 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008099e4 g     F .text	00000014 fclose
008030b8 g     F .text	00001688 _dtoa_r
00805ab4 g     F .text	0000080c _malloc_r
0080a024 g     F .text	00000030 __ascii_wctomb
00812b1c g     O .rwdata	00000004 alt_errno
00805694 g     F .text	000000c4 _fwalk
0080ac70 g     F .text	00000084 .hidden __divsi3
00804d98 g     F .text	00000124 _malloc_trim_r
00810c04 g       *ABS*	00000000 __CTOR_END__
00807f90 g     F .text	000000dc strcmp
00810c04 g       *ABS*	00000000 __flash_rodata_start
00810c04 g       *ABS*	00000000 __DTOR_LIST__
0080c0c8 g     F .text	00000088 .hidden __nedf2
0080e054 g     F .text	00000038 alt_irq_init
0080ddb0 g     F .text	00000084 alt_release_fd
00810c62 g     O .rodata	00000100 .hidden __clz_tab
00814718 g     O .bss	00000004 _PathLocale
00810870 g     F .text	00000014 atexit
00809764 g     F .text	00000060 _write_r
008058d4 g     F .text	00000018 setlocale
00812af4 g     O .rwdata	00000004 _impure_ptr
00814734 g     O .bss	00000004 alt_argc
00804740 g     F .text	0000021c __sflush_r
0080fc08 g     F .text	00000060 _do_dtors
008058c0 g     F .text	00000008 __locale_cjk_lang
00800020 g       .exceptions	00000000 alt_irq_entry
00807350 g     F .text	00000064 __ulp
00804d80 g     F .text	00000018 __fp_unlock_all
00812b08 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008058ec g     F .text	0000000c localeconv
0080fd2c g     F .text	00000050 alt_ic_isr_register
00812b40 g       *ABS*	00000000 _edata
00814878 g       *ABS*	00000000 _end
008099f8 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080f210 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080fe04 g     F .text	0000008c alt_ic_irq_disable
00807eb0 g     F .text	0000007c __swrite
00812b00 g     O .rwdata	00000004 __malloc_trim_threshold
008058b4 g     F .text	0000000c __locale_msgcharset
00810884 g     F .text	00000038 exit
00805758 g     F .text	000000c4 _fwalk_reent
00807154 g     F .text	000001fc __mdiff
0080acf4 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00804d5c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00810bd0 g     F .text	00000034 _exit
0080f834 g     F .text	0000012c alt_alarm_start
008058f8 g     F .text	000001bc __smakebuf_r
008008f0 g     F .text	00000098 strlen
00810254 g     F .text	0000015c open
0080c150 g     F .text	000000dc .hidden __gedf2
00812b04 g     O .rwdata	00000004 __wctomb
00808168 g     F .text	00000018 __sprint_r
0080fcf8 g     F .text	00000034 alt_icache_flush_all
00812b34 g     O .rwdata	00000004 alt_priority_mask
0080fd7c g     F .text	00000088 alt_ic_irq_enable
00802c64 g     F .text	0000001c __vfprintf_internal
0080a054 g     F .text	0000005c _wctomb_r
0080e780 g     F .text	00000138 alt_avalon_dma_prepare
0080cb8c g     F .text	000008fc .hidden __subdf3
00812b24 g     O .rwdata	00000008 alt_dma_rxchan_list
00806af4 g     F .text	000000b0 __lo0bits
00812b38 g     O .rwdata	00000008 alt_alarm_list
0080fba8 g     F .text	00000060 _do_ctors
00809f64 g     F .text	000000c0 wcrtomb
0080d6c8 g     F .text	000000d8 close
0080da10 g     F .text	00000084 alt_load
0080e6f0 g     F .text	00000048 alt_avalon_dma_tx_ioctl
00809b80 g     F .text	00000080 fputwc
00804d60 g     F .text	00000004 __sinit_lock_acquire
00806840 g     F .text	00000148 __multadd
00806818 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	1091de04 	addi	r2,r2,18296
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	1091de04 	addi	r2,r2,18296
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a71717 	ldw	r2,-25508(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a71717 	ldw	r2,-25508(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6aabc14 	ori	gp,gp,43760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	1091c614 	ori	r2,r2,18200

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18d21e14 	ori	r3,r3,18552

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080da100 	call	80da10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080dbac0 	call	80dbac <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <main>:
#include <string.h>
#include "sys/alt_dma.h"

#define DMA_ACCESS_0_BASE 0x1001000

void main() {
  800290:	defffd04 	addi	sp,sp,-12
  800294:	dfc00215 	stw	ra,8(sp)
  800298:	df000115 	stw	fp,4(sp)
  80029c:	df000104 	addi	fp,sp,4
  volatile float *FPLMAC = (float *) DMA_ACCESS_0_BASE;
  8002a0:	00804034 	movhi	r2,256
  8002a4:	10840004 	addi	r2,r2,4096
  8002a8:	e0bfff15 	stw	r2,-4(fp)

  printf("write A\n");
  8002ac:	01002074 	movhi	r4,129
  8002b0:	21030104 	addi	r4,r4,3076
  8002b4:	08008dc0 	call	8008dc <puts>
  FPLMAC[0] = 1.0;
  8002b8:	e0bfff17 	ldw	r2,-4(fp)
  8002bc:	00cfe034 	movhi	r3,16256
  8002c0:	10c00015 	stw	r3,0(r2)

  printf("write B\n");
  8002c4:	01002074 	movhi	r4,129
  8002c8:	21030304 	addi	r4,r4,3084
  8002cc:	08008dc0 	call	8008dc <puts>
  FPLMAC[1] = 2.0;
  8002d0:	e0bfff17 	ldw	r2,-4(fp)
  8002d4:	10800104 	addi	r2,r2,4
  8002d8:	00d00034 	movhi	r3,16384
  8002dc:	10c00015 	stw	r3,0(r2)

  printf("write C\n");
  8002e0:	01002074 	movhi	r4,129
  8002e4:	21030504 	addi	r4,r4,3092
  8002e8:	08008dc0 	call	8008dc <puts>
  FPLMAC[2] = 0.0;
  8002ec:	e0bfff17 	ldw	r2,-4(fp)
  8002f0:	10800204 	addi	r2,r2,8
  8002f4:	10000015 	stw	zero,0(r2)

  printf("read A %f\n", FPLMAC[0]);
  8002f8:	e0bfff17 	ldw	r2,-4(fp)
  8002fc:	10c00017 	ldw	r3,0(r2)
  800300:	1809883a 	mov	r4,r3
  800304:	080063c0 	call	80063c <__extendsfdf2>
  800308:	100d883a 	mov	r6,r2
  80030c:	180f883a 	mov	r7,r3
  800310:	300b883a 	mov	r5,r6
  800314:	380d883a 	mov	r6,r7
  800318:	01002074 	movhi	r4,129
  80031c:	21030704 	addi	r4,r4,3100
  800320:	08007e00 	call	8007e0 <printf>
  printf("read B %f\n", FPLMAC[1]);
  800324:	e0bfff17 	ldw	r2,-4(fp)
  800328:	10800104 	addi	r2,r2,4
  80032c:	10c00017 	ldw	r3,0(r2)
  800330:	1809883a 	mov	r4,r3
  800334:	080063c0 	call	80063c <__extendsfdf2>
  800338:	100d883a 	mov	r6,r2
  80033c:	180f883a 	mov	r7,r3
  800340:	300b883a 	mov	r5,r6
  800344:	380d883a 	mov	r6,r7
  800348:	01002074 	movhi	r4,129
  80034c:	21030a04 	addi	r4,r4,3112
  800350:	08007e00 	call	8007e0 <printf>
  printf("read C %f\n", FPLMAC[2]);
  800354:	e0bfff17 	ldw	r2,-4(fp)
  800358:	10800204 	addi	r2,r2,8
  80035c:	10c00017 	ldw	r3,0(r2)
  800360:	1809883a 	mov	r4,r3
  800364:	080063c0 	call	80063c <__extendsfdf2>
  800368:	100d883a 	mov	r6,r2
  80036c:	180f883a 	mov	r7,r3
  800370:	300b883a 	mov	r5,r6
  800374:	380d883a 	mov	r6,r7
  800378:	01002074 	movhi	r4,129
  80037c:	21030d04 	addi	r4,r4,3124
  800380:	08007e00 	call	8007e0 <printf>

  printf("write B 2\n");
  800384:	01002074 	movhi	r4,129
  800388:	21031004 	addi	r4,r4,3136
  80038c:	08008dc0 	call	8008dc <puts>
  FPLMAC[1] = 2.0;
  800390:	e0bfff17 	ldw	r2,-4(fp)
  800394:	10800104 	addi	r2,r2,4
  800398:	00d00034 	movhi	r3,16384
  80039c:	10c00015 	stw	r3,0(r2)

  printf("read A %f\n", FPLMAC[0]);
  8003a0:	e0bfff17 	ldw	r2,-4(fp)
  8003a4:	10c00017 	ldw	r3,0(r2)
  8003a8:	1809883a 	mov	r4,r3
  8003ac:	080063c0 	call	80063c <__extendsfdf2>
  8003b0:	100d883a 	mov	r6,r2
  8003b4:	180f883a 	mov	r7,r3
  8003b8:	300b883a 	mov	r5,r6
  8003bc:	380d883a 	mov	r6,r7
  8003c0:	01002074 	movhi	r4,129
  8003c4:	21030704 	addi	r4,r4,3100
  8003c8:	08007e00 	call	8007e0 <printf>
  printf("read B %f\n", FPLMAC[1]);
  8003cc:	e0bfff17 	ldw	r2,-4(fp)
  8003d0:	10800104 	addi	r2,r2,4
  8003d4:	10c00017 	ldw	r3,0(r2)
  8003d8:	1809883a 	mov	r4,r3
  8003dc:	080063c0 	call	80063c <__extendsfdf2>
  8003e0:	100d883a 	mov	r6,r2
  8003e4:	180f883a 	mov	r7,r3
  8003e8:	300b883a 	mov	r5,r6
  8003ec:	380d883a 	mov	r6,r7
  8003f0:	01002074 	movhi	r4,129
  8003f4:	21030a04 	addi	r4,r4,3112
  8003f8:	08007e00 	call	8007e0 <printf>
  printf("read C %f\n", FPLMAC[2]);
  8003fc:	e0bfff17 	ldw	r2,-4(fp)
  800400:	10800204 	addi	r2,r2,8
  800404:	10c00017 	ldw	r3,0(r2)
  800408:	1809883a 	mov	r4,r3
  80040c:	080063c0 	call	80063c <__extendsfdf2>
  800410:	100d883a 	mov	r6,r2
  800414:	180f883a 	mov	r7,r3
  800418:	300b883a 	mov	r5,r6
  80041c:	380d883a 	mov	r6,r7
  800420:	01002074 	movhi	r4,129
  800424:	21030d04 	addi	r4,r4,3124
  800428:	08007e00 	call	8007e0 <printf>

  printf("write B 2.5\n");
  80042c:	01002074 	movhi	r4,129
  800430:	21031304 	addi	r4,r4,3148
  800434:	08008dc0 	call	8008dc <puts>
  FPLMAC[1] = 2.5;
  800438:	e0bfff17 	ldw	r2,-4(fp)
  80043c:	10800104 	addi	r2,r2,4
  800440:	00d00834 	movhi	r3,16416
  800444:	10c00015 	stw	r3,0(r2)

  printf("read A %f\n", FPLMAC[0]);
  800448:	e0bfff17 	ldw	r2,-4(fp)
  80044c:	10c00017 	ldw	r3,0(r2)
  800450:	1809883a 	mov	r4,r3
  800454:	080063c0 	call	80063c <__extendsfdf2>
  800458:	100d883a 	mov	r6,r2
  80045c:	180f883a 	mov	r7,r3
  800460:	300b883a 	mov	r5,r6
  800464:	380d883a 	mov	r6,r7
  800468:	01002074 	movhi	r4,129
  80046c:	21030704 	addi	r4,r4,3100
  800470:	08007e00 	call	8007e0 <printf>
  printf("read B %f\n", FPLMAC[1]);
  800474:	e0bfff17 	ldw	r2,-4(fp)
  800478:	10800104 	addi	r2,r2,4
  80047c:	10c00017 	ldw	r3,0(r2)
  800480:	1809883a 	mov	r4,r3
  800484:	080063c0 	call	80063c <__extendsfdf2>
  800488:	100d883a 	mov	r6,r2
  80048c:	180f883a 	mov	r7,r3
  800490:	300b883a 	mov	r5,r6
  800494:	380d883a 	mov	r6,r7
  800498:	01002074 	movhi	r4,129
  80049c:	21030a04 	addi	r4,r4,3112
  8004a0:	08007e00 	call	8007e0 <printf>
  printf("read C %f\n", FPLMAC[2]);
  8004a4:	e0bfff17 	ldw	r2,-4(fp)
  8004a8:	10800204 	addi	r2,r2,8
  8004ac:	10c00017 	ldw	r3,0(r2)
  8004b0:	1809883a 	mov	r4,r3
  8004b4:	080063c0 	call	80063c <__extendsfdf2>
  8004b8:	100d883a 	mov	r6,r2
  8004bc:	180f883a 	mov	r7,r3
  8004c0:	300b883a 	mov	r5,r6
  8004c4:	380d883a 	mov	r6,r7
  8004c8:	01002074 	movhi	r4,129
  8004cc:	21030d04 	addi	r4,r4,3124
  8004d0:	08007e00 	call	8007e0 <printf>

  printf("write A 5\n");
  8004d4:	01002074 	movhi	r4,129
  8004d8:	21031604 	addi	r4,r4,3160
  8004dc:	08008dc0 	call	8008dc <puts>
  FPLMAC[0] = 5.0;
  8004e0:	e0bfff17 	ldw	r2,-4(fp)
  8004e4:	00d02834 	movhi	r3,16544
  8004e8:	10c00015 	stw	r3,0(r2)

  printf("write B 2\n");
  8004ec:	01002074 	movhi	r4,129
  8004f0:	21031004 	addi	r4,r4,3136
  8004f4:	08008dc0 	call	8008dc <puts>
  FPLMAC[1] = 2.0;
  8004f8:	e0bfff17 	ldw	r2,-4(fp)
  8004fc:	10800104 	addi	r2,r2,4
  800500:	00d00034 	movhi	r3,16384
  800504:	10c00015 	stw	r3,0(r2)

  printf("read A %f\n", FPLMAC[0]);
  800508:	e0bfff17 	ldw	r2,-4(fp)
  80050c:	10c00017 	ldw	r3,0(r2)
  800510:	1809883a 	mov	r4,r3
  800514:	080063c0 	call	80063c <__extendsfdf2>
  800518:	100d883a 	mov	r6,r2
  80051c:	180f883a 	mov	r7,r3
  800520:	300b883a 	mov	r5,r6
  800524:	380d883a 	mov	r6,r7
  800528:	01002074 	movhi	r4,129
  80052c:	21030704 	addi	r4,r4,3100
  800530:	08007e00 	call	8007e0 <printf>
  printf("read B %f\n", FPLMAC[1]);
  800534:	e0bfff17 	ldw	r2,-4(fp)
  800538:	10800104 	addi	r2,r2,4
  80053c:	10c00017 	ldw	r3,0(r2)
  800540:	1809883a 	mov	r4,r3
  800544:	080063c0 	call	80063c <__extendsfdf2>
  800548:	100d883a 	mov	r6,r2
  80054c:	180f883a 	mov	r7,r3
  800550:	300b883a 	mov	r5,r6
  800554:	380d883a 	mov	r6,r7
  800558:	01002074 	movhi	r4,129
  80055c:	21030a04 	addi	r4,r4,3112
  800560:	08007e00 	call	8007e0 <printf>
  printf("read C %f\n", FPLMAC[2]);
  800564:	e0bfff17 	ldw	r2,-4(fp)
  800568:	10800204 	addi	r2,r2,8
  80056c:	10c00017 	ldw	r3,0(r2)
  800570:	1809883a 	mov	r4,r3
  800574:	080063c0 	call	80063c <__extendsfdf2>
  800578:	100d883a 	mov	r6,r2
  80057c:	180f883a 	mov	r7,r3
  800580:	300b883a 	mov	r5,r6
  800584:	380d883a 	mov	r6,r7
  800588:	01002074 	movhi	r4,129
  80058c:	21030d04 	addi	r4,r4,3124
  800590:	08007e00 	call	8007e0 <printf>

  printf("write C\n");
  800594:	01002074 	movhi	r4,129
  800598:	21030504 	addi	r4,r4,3092
  80059c:	08008dc0 	call	8008dc <puts>
  FPLMAC[2] = 0.0;
  8005a0:	e0bfff17 	ldw	r2,-4(fp)
  8005a4:	10800204 	addi	r2,r2,8
  8005a8:	10000015 	stw	zero,0(r2)

  printf("read A %f\n", FPLMAC[0]);
  8005ac:	e0bfff17 	ldw	r2,-4(fp)
  8005b0:	10c00017 	ldw	r3,0(r2)
  8005b4:	1809883a 	mov	r4,r3
  8005b8:	080063c0 	call	80063c <__extendsfdf2>
  8005bc:	100d883a 	mov	r6,r2
  8005c0:	180f883a 	mov	r7,r3
  8005c4:	300b883a 	mov	r5,r6
  8005c8:	380d883a 	mov	r6,r7
  8005cc:	01002074 	movhi	r4,129
  8005d0:	21030704 	addi	r4,r4,3100
  8005d4:	08007e00 	call	8007e0 <printf>
  printf("read B %f\n", FPLMAC[1]);
  8005d8:	e0bfff17 	ldw	r2,-4(fp)
  8005dc:	10800104 	addi	r2,r2,4
  8005e0:	10c00017 	ldw	r3,0(r2)
  8005e4:	1809883a 	mov	r4,r3
  8005e8:	080063c0 	call	80063c <__extendsfdf2>
  8005ec:	100d883a 	mov	r6,r2
  8005f0:	180f883a 	mov	r7,r3
  8005f4:	300b883a 	mov	r5,r6
  8005f8:	380d883a 	mov	r6,r7
  8005fc:	01002074 	movhi	r4,129
  800600:	21030a04 	addi	r4,r4,3112
  800604:	08007e00 	call	8007e0 <printf>
  printf("read C %f\n", FPLMAC[2]);
  800608:	e0bfff17 	ldw	r2,-4(fp)
  80060c:	10800204 	addi	r2,r2,8
  800610:	10c00017 	ldw	r3,0(r2)
  800614:	1809883a 	mov	r4,r3
  800618:	080063c0 	call	80063c <__extendsfdf2>
  80061c:	100d883a 	mov	r6,r2
  800620:	180f883a 	mov	r7,r3
  800624:	300b883a 	mov	r5,r6
  800628:	380d883a 	mov	r6,r7
  80062c:	01002074 	movhi	r4,129
  800630:	21030d04 	addi	r4,r4,3124
  800634:	08007e00 	call	8007e0 <printf>

  while (1);
  800638:	003fff06 	br	800638 <__alt_data_end+0xff800638>

0080063c <__extendsfdf2>:
  80063c:	200ad5fa 	srli	r5,r4,23
  800640:	defffd04 	addi	sp,sp,-12
  800644:	dc400115 	stw	r17,4(sp)
  800648:	29403fcc 	andi	r5,r5,255
  80064c:	29800044 	addi	r6,r5,1
  800650:	04402034 	movhi	r17,128
  800654:	dc000015 	stw	r16,0(sp)
  800658:	8c7fffc4 	addi	r17,r17,-1
  80065c:	dfc00215 	stw	ra,8(sp)
  800660:	31803fcc 	andi	r6,r6,255
  800664:	00800044 	movi	r2,1
  800668:	8922703a 	and	r17,r17,r4
  80066c:	2020d7fa 	srli	r16,r4,31
  800670:	1180110e 	bge	r2,r6,8006b8 <__extendsfdf2+0x7c>
  800674:	880cd0fa 	srli	r6,r17,3
  800678:	8822977a 	slli	r17,r17,29
  80067c:	2940e004 	addi	r5,r5,896
  800680:	2941ffcc 	andi	r5,r5,2047
  800684:	2804953a 	slli	r2,r5,20
  800688:	01400434 	movhi	r5,16
  80068c:	800697fa 	slli	r3,r16,31
  800690:	297fffc4 	addi	r5,r5,-1
  800694:	314a703a 	and	r5,r6,r5
  800698:	288ab03a 	or	r5,r5,r2
  80069c:	28c6b03a 	or	r3,r5,r3
  8006a0:	8805883a 	mov	r2,r17
  8006a4:	dfc00217 	ldw	ra,8(sp)
  8006a8:	dc400117 	ldw	r17,4(sp)
  8006ac:	dc000017 	ldw	r16,0(sp)
  8006b0:	dec00304 	addi	sp,sp,12
  8006b4:	f800283a 	ret
  8006b8:	2800111e 	bne	r5,zero,800700 <__extendsfdf2+0xc4>
  8006bc:	88001c26 	beq	r17,zero,800730 <__extendsfdf2+0xf4>
  8006c0:	8809883a 	mov	r4,r17
  8006c4:	080074c0 	call	80074c <__clzsi2>
  8006c8:	00c00284 	movi	r3,10
  8006cc:	18801b16 	blt	r3,r2,80073c <__extendsfdf2+0x100>
  8006d0:	018002c4 	movi	r6,11
  8006d4:	308dc83a 	sub	r6,r6,r2
  8006d8:	11000544 	addi	r4,r2,21
  8006dc:	8986d83a 	srl	r3,r17,r6
  8006e0:	8922983a 	sll	r17,r17,r4
  8006e4:	0180e244 	movi	r6,905
  8006e8:	01400434 	movhi	r5,16
  8006ec:	3085c83a 	sub	r2,r6,r2
  8006f0:	297fffc4 	addi	r5,r5,-1
  8006f4:	194c703a 	and	r6,r3,r5
  8006f8:	1141ffcc 	andi	r5,r2,2047
  8006fc:	003fe006 	br	800680 <__alt_data_end+0xff800680>
  800700:	88000826 	beq	r17,zero,800724 <__extendsfdf2+0xe8>
  800704:	880cd0fa 	srli	r6,r17,3
  800708:	00800434 	movhi	r2,16
  80070c:	10bfffc4 	addi	r2,r2,-1
  800710:	31800234 	orhi	r6,r6,8
  800714:	8822977a 	slli	r17,r17,29
  800718:	308c703a 	and	r6,r6,r2
  80071c:	0141ffc4 	movi	r5,2047
  800720:	003fd706 	br	800680 <__alt_data_end+0xff800680>
  800724:	0141ffc4 	movi	r5,2047
  800728:	000d883a 	mov	r6,zero
  80072c:	003fd406 	br	800680 <__alt_data_end+0xff800680>
  800730:	000b883a 	mov	r5,zero
  800734:	000d883a 	mov	r6,zero
  800738:	003fd106 	br	800680 <__alt_data_end+0xff800680>
  80073c:	11bffd44 	addi	r6,r2,-11
  800740:	8986983a 	sll	r3,r17,r6
  800744:	0023883a 	mov	r17,zero
  800748:	003fe606 	br	8006e4 <__alt_data_end+0xff8006e4>

0080074c <__clzsi2>:
  80074c:	00bfffd4 	movui	r2,65535
  800750:	11000536 	bltu	r2,r4,800768 <__clzsi2+0x1c>
  800754:	00803fc4 	movi	r2,255
  800758:	11000f36 	bltu	r2,r4,800798 <__clzsi2+0x4c>
  80075c:	00800804 	movi	r2,32
  800760:	0007883a 	mov	r3,zero
  800764:	00000506 	br	80077c <__clzsi2+0x30>
  800768:	00804034 	movhi	r2,256
  80076c:	10bfffc4 	addi	r2,r2,-1
  800770:	11000c2e 	bgeu	r2,r4,8007a4 <__clzsi2+0x58>
  800774:	00800204 	movi	r2,8
  800778:	00c00604 	movi	r3,24
  80077c:	20c8d83a 	srl	r4,r4,r3
  800780:	00c02074 	movhi	r3,129
  800784:	18c31884 	addi	r3,r3,3170
  800788:	1909883a 	add	r4,r3,r4
  80078c:	20c00003 	ldbu	r3,0(r4)
  800790:	10c5c83a 	sub	r2,r2,r3
  800794:	f800283a 	ret
  800798:	00800604 	movi	r2,24
  80079c:	00c00204 	movi	r3,8
  8007a0:	003ff606 	br	80077c <__alt_data_end+0xff80077c>
  8007a4:	00800404 	movi	r2,16
  8007a8:	1007883a 	mov	r3,r2
  8007ac:	003ff306 	br	80077c <__alt_data_end+0xff80077c>

008007b0 <_printf_r>:
  8007b0:	defffd04 	addi	sp,sp,-12
  8007b4:	2805883a 	mov	r2,r5
  8007b8:	dfc00015 	stw	ra,0(sp)
  8007bc:	d9800115 	stw	r6,4(sp)
  8007c0:	d9c00215 	stw	r7,8(sp)
  8007c4:	21400217 	ldw	r5,8(r4)
  8007c8:	d9c00104 	addi	r7,sp,4
  8007cc:	100d883a 	mov	r6,r2
  8007d0:	08009880 	call	800988 <___vfprintf_internal_r>
  8007d4:	dfc00017 	ldw	ra,0(sp)
  8007d8:	dec00304 	addi	sp,sp,12
  8007dc:	f800283a 	ret

008007e0 <printf>:
  8007e0:	defffc04 	addi	sp,sp,-16
  8007e4:	dfc00015 	stw	ra,0(sp)
  8007e8:	d9400115 	stw	r5,4(sp)
  8007ec:	d9800215 	stw	r6,8(sp)
  8007f0:	d9c00315 	stw	r7,12(sp)
  8007f4:	00802074 	movhi	r2,129
  8007f8:	108abd04 	addi	r2,r2,10996
  8007fc:	10800017 	ldw	r2,0(r2)
  800800:	200b883a 	mov	r5,r4
  800804:	d9800104 	addi	r6,sp,4
  800808:	11000217 	ldw	r4,8(r2)
  80080c:	0802c640 	call	802c64 <__vfprintf_internal>
  800810:	dfc00017 	ldw	ra,0(sp)
  800814:	dec00404 	addi	sp,sp,16
  800818:	f800283a 	ret

0080081c <_puts_r>:
  80081c:	defff604 	addi	sp,sp,-40
  800820:	dc000715 	stw	r16,28(sp)
  800824:	2021883a 	mov	r16,r4
  800828:	2809883a 	mov	r4,r5
  80082c:	dc400815 	stw	r17,32(sp)
  800830:	dfc00915 	stw	ra,36(sp)
  800834:	2823883a 	mov	r17,r5
  800838:	08008f00 	call	8008f0 <strlen>
  80083c:	10c00044 	addi	r3,r2,1
  800840:	d8800115 	stw	r2,4(sp)
  800844:	00802074 	movhi	r2,129
  800848:	10835904 	addi	r2,r2,3428
  80084c:	d8800215 	stw	r2,8(sp)
  800850:	00800044 	movi	r2,1
  800854:	d8800315 	stw	r2,12(sp)
  800858:	00800084 	movi	r2,2
  80085c:	dc400015 	stw	r17,0(sp)
  800860:	d8c00615 	stw	r3,24(sp)
  800864:	dec00415 	stw	sp,16(sp)
  800868:	d8800515 	stw	r2,20(sp)
  80086c:	80000226 	beq	r16,zero,800878 <_puts_r+0x5c>
  800870:	80800e17 	ldw	r2,56(r16)
  800874:	10001426 	beq	r2,zero,8008c8 <_puts_r+0xac>
  800878:	81400217 	ldw	r5,8(r16)
  80087c:	2880030b 	ldhu	r2,12(r5)
  800880:	10c8000c 	andi	r3,r2,8192
  800884:	1800061e 	bne	r3,zero,8008a0 <_puts_r+0x84>
  800888:	29001917 	ldw	r4,100(r5)
  80088c:	00f7ffc4 	movi	r3,-8193
  800890:	10880014 	ori	r2,r2,8192
  800894:	20c6703a 	and	r3,r4,r3
  800898:	2880030d 	sth	r2,12(r5)
  80089c:	28c01915 	stw	r3,100(r5)
  8008a0:	d9800404 	addi	r6,sp,16
  8008a4:	8009883a 	mov	r4,r16
  8008a8:	08051cc0 	call	8051cc <__sfvwrite_r>
  8008ac:	1000091e 	bne	r2,zero,8008d4 <_puts_r+0xb8>
  8008b0:	00800284 	movi	r2,10
  8008b4:	dfc00917 	ldw	ra,36(sp)
  8008b8:	dc400817 	ldw	r17,32(sp)
  8008bc:	dc000717 	ldw	r16,28(sp)
  8008c0:	dec00a04 	addi	sp,sp,40
  8008c4:	f800283a 	ret
  8008c8:	8009883a 	mov	r4,r16
  8008cc:	0804d480 	call	804d48 <__sinit>
  8008d0:	003fe906 	br	800878 <__alt_data_end+0xff800878>
  8008d4:	00bfffc4 	movi	r2,-1
  8008d8:	003ff606 	br	8008b4 <__alt_data_end+0xff8008b4>

008008dc <puts>:
  8008dc:	00802074 	movhi	r2,129
  8008e0:	108abd04 	addi	r2,r2,10996
  8008e4:	200b883a 	mov	r5,r4
  8008e8:	11000017 	ldw	r4,0(r2)
  8008ec:	080081c1 	jmpi	80081c <_puts_r>

008008f0 <strlen>:
  8008f0:	208000cc 	andi	r2,r4,3
  8008f4:	10002026 	beq	r2,zero,800978 <strlen+0x88>
  8008f8:	20800007 	ldb	r2,0(r4)
  8008fc:	10002026 	beq	r2,zero,800980 <strlen+0x90>
  800900:	2005883a 	mov	r2,r4
  800904:	00000206 	br	800910 <strlen+0x20>
  800908:	10c00007 	ldb	r3,0(r2)
  80090c:	18001826 	beq	r3,zero,800970 <strlen+0x80>
  800910:	10800044 	addi	r2,r2,1
  800914:	10c000cc 	andi	r3,r2,3
  800918:	183ffb1e 	bne	r3,zero,800908 <__alt_data_end+0xff800908>
  80091c:	10c00017 	ldw	r3,0(r2)
  800920:	01ffbff4 	movhi	r7,65279
  800924:	39ffbfc4 	addi	r7,r7,-257
  800928:	00ca303a 	nor	r5,zero,r3
  80092c:	01a02074 	movhi	r6,32897
  800930:	19c7883a 	add	r3,r3,r7
  800934:	31a02004 	addi	r6,r6,-32640
  800938:	1946703a 	and	r3,r3,r5
  80093c:	1986703a 	and	r3,r3,r6
  800940:	1800091e 	bne	r3,zero,800968 <strlen+0x78>
  800944:	10800104 	addi	r2,r2,4
  800948:	10c00017 	ldw	r3,0(r2)
  80094c:	19cb883a 	add	r5,r3,r7
  800950:	00c6303a 	nor	r3,zero,r3
  800954:	28c6703a 	and	r3,r5,r3
  800958:	1986703a 	and	r3,r3,r6
  80095c:	183ff926 	beq	r3,zero,800944 <__alt_data_end+0xff800944>
  800960:	00000106 	br	800968 <strlen+0x78>
  800964:	10800044 	addi	r2,r2,1
  800968:	10c00007 	ldb	r3,0(r2)
  80096c:	183ffd1e 	bne	r3,zero,800964 <__alt_data_end+0xff800964>
  800970:	1105c83a 	sub	r2,r2,r4
  800974:	f800283a 	ret
  800978:	2005883a 	mov	r2,r4
  80097c:	003fe706 	br	80091c <__alt_data_end+0xff80091c>
  800980:	0005883a 	mov	r2,zero
  800984:	f800283a 	ret

00800988 <___vfprintf_internal_r>:
  800988:	deffb804 	addi	sp,sp,-288
  80098c:	dfc04715 	stw	ra,284(sp)
  800990:	ddc04515 	stw	r23,276(sp)
  800994:	dd404315 	stw	r21,268(sp)
  800998:	d9002d15 	stw	r4,180(sp)
  80099c:	282f883a 	mov	r23,r5
  8009a0:	302b883a 	mov	r21,r6
  8009a4:	d9c02e15 	stw	r7,184(sp)
  8009a8:	df004615 	stw	fp,280(sp)
  8009ac:	dd804415 	stw	r22,272(sp)
  8009b0:	dd004215 	stw	r20,264(sp)
  8009b4:	dcc04115 	stw	r19,260(sp)
  8009b8:	dc804015 	stw	r18,256(sp)
  8009bc:	dc403f15 	stw	r17,252(sp)
  8009c0:	dc003e15 	stw	r16,248(sp)
  8009c4:	08058c80 	call	8058c8 <_localeconv_r>
  8009c8:	10800017 	ldw	r2,0(r2)
  8009cc:	1009883a 	mov	r4,r2
  8009d0:	d8803415 	stw	r2,208(sp)
  8009d4:	08008f00 	call	8008f0 <strlen>
  8009d8:	d8803715 	stw	r2,220(sp)
  8009dc:	d8802d17 	ldw	r2,180(sp)
  8009e0:	10000226 	beq	r2,zero,8009ec <___vfprintf_internal_r+0x64>
  8009e4:	10800e17 	ldw	r2,56(r2)
  8009e8:	1000fb26 	beq	r2,zero,800dd8 <___vfprintf_internal_r+0x450>
  8009ec:	b880030b 	ldhu	r2,12(r23)
  8009f0:	10c8000c 	andi	r3,r2,8192
  8009f4:	1800061e 	bne	r3,zero,800a10 <___vfprintf_internal_r+0x88>
  8009f8:	b9001917 	ldw	r4,100(r23)
  8009fc:	00f7ffc4 	movi	r3,-8193
  800a00:	10880014 	ori	r2,r2,8192
  800a04:	20c6703a 	and	r3,r4,r3
  800a08:	b880030d 	sth	r2,12(r23)
  800a0c:	b8c01915 	stw	r3,100(r23)
  800a10:	10c0020c 	andi	r3,r2,8
  800a14:	1800c326 	beq	r3,zero,800d24 <___vfprintf_internal_r+0x39c>
  800a18:	b8c00417 	ldw	r3,16(r23)
  800a1c:	1800c126 	beq	r3,zero,800d24 <___vfprintf_internal_r+0x39c>
  800a20:	1080068c 	andi	r2,r2,26
  800a24:	00c00284 	movi	r3,10
  800a28:	10c0c626 	beq	r2,r3,800d44 <___vfprintf_internal_r+0x3bc>
  800a2c:	d8c00404 	addi	r3,sp,16
  800a30:	05002074 	movhi	r20,129
  800a34:	d9001e04 	addi	r4,sp,120
  800a38:	a5036a84 	addi	r20,r20,3498
  800a3c:	d8c01e15 	stw	r3,120(sp)
  800a40:	d8002015 	stw	zero,128(sp)
  800a44:	d8001f15 	stw	zero,124(sp)
  800a48:	d8003315 	stw	zero,204(sp)
  800a4c:	d8003615 	stw	zero,216(sp)
  800a50:	d8003815 	stw	zero,224(sp)
  800a54:	1811883a 	mov	r8,r3
  800a58:	d8003915 	stw	zero,228(sp)
  800a5c:	d8003a15 	stw	zero,232(sp)
  800a60:	d8002f15 	stw	zero,188(sp)
  800a64:	d9002815 	stw	r4,160(sp)
  800a68:	a8800007 	ldb	r2,0(r21)
  800a6c:	10028b26 	beq	r2,zero,80149c <___vfprintf_internal_r+0xb14>
  800a70:	00c00944 	movi	r3,37
  800a74:	a823883a 	mov	r17,r21
  800a78:	10c0021e 	bne	r2,r3,800a84 <___vfprintf_internal_r+0xfc>
  800a7c:	00001406 	br	800ad0 <___vfprintf_internal_r+0x148>
  800a80:	10c00326 	beq	r2,r3,800a90 <___vfprintf_internal_r+0x108>
  800a84:	8c400044 	addi	r17,r17,1
  800a88:	88800007 	ldb	r2,0(r17)
  800a8c:	103ffc1e 	bne	r2,zero,800a80 <__alt_data_end+0xff800a80>
  800a90:	8d61c83a 	sub	r16,r17,r21
  800a94:	80000e26 	beq	r16,zero,800ad0 <___vfprintf_internal_r+0x148>
  800a98:	d8c02017 	ldw	r3,128(sp)
  800a9c:	d8801f17 	ldw	r2,124(sp)
  800aa0:	45400015 	stw	r21,0(r8)
  800aa4:	1c07883a 	add	r3,r3,r16
  800aa8:	10800044 	addi	r2,r2,1
  800aac:	d8c02015 	stw	r3,128(sp)
  800ab0:	44000115 	stw	r16,4(r8)
  800ab4:	d8801f15 	stw	r2,124(sp)
  800ab8:	00c001c4 	movi	r3,7
  800abc:	1880a916 	blt	r3,r2,800d64 <___vfprintf_internal_r+0x3dc>
  800ac0:	42000204 	addi	r8,r8,8
  800ac4:	d9402f17 	ldw	r5,188(sp)
  800ac8:	2c0b883a 	add	r5,r5,r16
  800acc:	d9402f15 	stw	r5,188(sp)
  800ad0:	88800007 	ldb	r2,0(r17)
  800ad4:	1000aa26 	beq	r2,zero,800d80 <___vfprintf_internal_r+0x3f8>
  800ad8:	8d400044 	addi	r21,r17,1
  800adc:	8c400047 	ldb	r17,1(r17)
  800ae0:	0021883a 	mov	r16,zero
  800ae4:	00bfffc4 	movi	r2,-1
  800ae8:	0025883a 	mov	r18,zero
  800aec:	dc002905 	stb	r16,164(sp)
  800af0:	d8002785 	stb	zero,158(sp)
  800af4:	d8002b05 	stb	zero,172(sp)
  800af8:	d8802a15 	stw	r2,168(sp)
  800afc:	d8003115 	stw	zero,196(sp)
  800b00:	04c01604 	movi	r19,88
  800b04:	05800244 	movi	r22,9
  800b08:	9021883a 	mov	r16,r18
  800b0c:	4039883a 	mov	fp,r8
  800b10:	ad400044 	addi	r21,r21,1
  800b14:	88bff804 	addi	r2,r17,-32
  800b18:	98833236 	bltu	r19,r2,8017e4 <___vfprintf_internal_r+0xe5c>
  800b1c:	100490ba 	slli	r2,r2,2
  800b20:	00c02034 	movhi	r3,128
  800b24:	18c2cd04 	addi	r3,r3,2868
  800b28:	10c5883a 	add	r2,r2,r3
  800b2c:	10800017 	ldw	r2,0(r2)
  800b30:	1000683a 	jmp	r2
  800b34:	008016dc 	xori	r2,zero,91
  800b38:	008017e4 	muli	r2,zero,95
  800b3c:	008017e4 	muli	r2,zero,95
  800b40:	008016fc 	xorhi	r2,zero,91
  800b44:	008017e4 	muli	r2,zero,95
  800b48:	008017e4 	muli	r2,zero,95
  800b4c:	008017e4 	muli	r2,zero,95
  800b50:	008017e4 	muli	r2,zero,95
  800b54:	008017e4 	muli	r2,zero,95
  800b58:	008017e4 	muli	r2,zero,95
  800b5c:	00800de4 	muli	r2,zero,55
  800b60:	008015ec 	andhi	r2,zero,87
  800b64:	008017e4 	muli	r2,zero,95
  800b68:	00800ca8 	cmpgeui	r2,zero,50
  800b6c:	00800e08 	cmpgei	r2,zero,56
  800b70:	008017e4 	muli	r2,zero,95
  800b74:	00800e58 	cmpnei	r2,zero,57
  800b78:	00800e64 	muli	r2,zero,57
  800b7c:	00800e64 	muli	r2,zero,57
  800b80:	00800e64 	muli	r2,zero,57
  800b84:	00800e64 	muli	r2,zero,57
  800b88:	00800e64 	muli	r2,zero,57
  800b8c:	00800e64 	muli	r2,zero,57
  800b90:	00800e64 	muli	r2,zero,57
  800b94:	00800e64 	muli	r2,zero,57
  800b98:	00800e64 	muli	r2,zero,57
  800b9c:	008017e4 	muli	r2,zero,95
  800ba0:	008017e4 	muli	r2,zero,95
  800ba4:	008017e4 	muli	r2,zero,95
  800ba8:	008017e4 	muli	r2,zero,95
  800bac:	008017e4 	muli	r2,zero,95
  800bb0:	008017e4 	muli	r2,zero,95
  800bb4:	008017e4 	muli	r2,zero,95
  800bb8:	008017e4 	muli	r2,zero,95
  800bbc:	008017e4 	muli	r2,zero,95
  800bc0:	008017e4 	muli	r2,zero,95
  800bc4:	00800ea0 	cmpeqi	r2,zero,58
  800bc8:	00800f68 	cmpgeui	r2,zero,61
  800bcc:	008017e4 	muli	r2,zero,95
  800bd0:	00800f68 	cmpgeui	r2,zero,61
  800bd4:	008017e4 	muli	r2,zero,95
  800bd8:	008017e4 	muli	r2,zero,95
  800bdc:	008017e4 	muli	r2,zero,95
  800be0:	008017e4 	muli	r2,zero,95
  800be4:	00801014 	movui	r2,64
  800be8:	008017e4 	muli	r2,zero,95
  800bec:	008017e4 	muli	r2,zero,95
  800bf0:	00801020 	cmpeqi	r2,zero,64
  800bf4:	008017e4 	muli	r2,zero,95
  800bf8:	008017e4 	muli	r2,zero,95
  800bfc:	008017e4 	muli	r2,zero,95
  800c00:	008017e4 	muli	r2,zero,95
  800c04:	008017e4 	muli	r2,zero,95
  800c08:	008014a4 	muli	r2,zero,82
  800c0c:	008017e4 	muli	r2,zero,95
  800c10:	008017e4 	muli	r2,zero,95
  800c14:	00801510 	cmplti	r2,zero,84
  800c18:	008017e4 	muli	r2,zero,95
  800c1c:	008017e4 	muli	r2,zero,95
  800c20:	008017e4 	muli	r2,zero,95
  800c24:	008017e4 	muli	r2,zero,95
  800c28:	008017e4 	muli	r2,zero,95
  800c2c:	008017e4 	muli	r2,zero,95
  800c30:	008017e4 	muli	r2,zero,95
  800c34:	008017e4 	muli	r2,zero,95
  800c38:	008017e4 	muli	r2,zero,95
  800c3c:	008017e4 	muli	r2,zero,95
  800c40:	00801788 	cmpgei	r2,zero,94
  800c44:	00801708 	cmpgei	r2,zero,92
  800c48:	00800f68 	cmpgeui	r2,zero,61
  800c4c:	00800f68 	cmpgeui	r2,zero,61
  800c50:	00800f68 	cmpgeui	r2,zero,61
  800c54:	00801728 	cmpgeui	r2,zero,92
  800c58:	00801708 	cmpgei	r2,zero,92
  800c5c:	008017e4 	muli	r2,zero,95
  800c60:	008017e4 	muli	r2,zero,95
  800c64:	00801734 	movhi	r2,92
  800c68:	008017e4 	muli	r2,zero,95
  800c6c:	00801748 	cmpgei	r2,zero,93
  800c70:	008015cc 	andi	r2,zero,87
  800c74:	00800cb4 	movhi	r2,50
  800c78:	00801604 	movi	r2,88
  800c7c:	008017e4 	muli	r2,zero,95
  800c80:	00801610 	cmplti	r2,zero,88
  800c84:	008017e4 	muli	r2,zero,95
  800c88:	00801674 	movhi	r2,89
  800c8c:	008017e4 	muli	r2,zero,95
  800c90:	008017e4 	muli	r2,zero,95
  800c94:	00801694 	movui	r2,90
  800c98:	d8c03117 	ldw	r3,196(sp)
  800c9c:	d8802e15 	stw	r2,184(sp)
  800ca0:	00c7c83a 	sub	r3,zero,r3
  800ca4:	d8c03115 	stw	r3,196(sp)
  800ca8:	84000114 	ori	r16,r16,4
  800cac:	ac400007 	ldb	r17,0(r21)
  800cb0:	003f9706 	br	800b10 <__alt_data_end+0xff800b10>
  800cb4:	00800c04 	movi	r2,48
  800cb8:	d8802705 	stb	r2,156(sp)
  800cbc:	00801e04 	movi	r2,120
  800cc0:	d8802745 	stb	r2,157(sp)
  800cc4:	d9002a17 	ldw	r4,168(sp)
  800cc8:	d8802e17 	ldw	r2,184(sp)
  800ccc:	d8002785 	stb	zero,158(sp)
  800cd0:	e011883a 	mov	r8,fp
  800cd4:	10c00104 	addi	r3,r2,4
  800cd8:	14c00017 	ldw	r19,0(r2)
  800cdc:	002d883a 	mov	r22,zero
  800ce0:	80800094 	ori	r2,r16,2
  800ce4:	2002ca16 	blt	r4,zero,801810 <___vfprintf_internal_r+0xe88>
  800ce8:	00bfdfc4 	movi	r2,-129
  800cec:	80a4703a 	and	r18,r16,r2
  800cf0:	d8c02e15 	stw	r3,184(sp)
  800cf4:	94800094 	ori	r18,r18,2
  800cf8:	9802b41e 	bne	r19,zero,8017cc <___vfprintf_internal_r+0xe44>
  800cfc:	01402074 	movhi	r5,129
  800d00:	29436304 	addi	r5,r5,3468
  800d04:	d9403915 	stw	r5,228(sp)
  800d08:	04401e04 	movi	r17,120
  800d0c:	d8802a17 	ldw	r2,168(sp)
  800d10:	0039883a 	mov	fp,zero
  800d14:	1001fa26 	beq	r2,zero,801500 <___vfprintf_internal_r+0xb78>
  800d18:	0027883a 	mov	r19,zero
  800d1c:	002d883a 	mov	r22,zero
  800d20:	00021906 	br	801588 <___vfprintf_internal_r+0xc00>
  800d24:	d9002d17 	ldw	r4,180(sp)
  800d28:	b80b883a 	mov	r5,r23
  800d2c:	0802d3c0 	call	802d3c <__swsetup_r>
  800d30:	1005dc1e 	bne	r2,zero,8024a4 <___vfprintf_internal_r+0x1b1c>
  800d34:	b880030b 	ldhu	r2,12(r23)
  800d38:	00c00284 	movi	r3,10
  800d3c:	1080068c 	andi	r2,r2,26
  800d40:	10ff3a1e 	bne	r2,r3,800a2c <__alt_data_end+0xff800a2c>
  800d44:	b880038f 	ldh	r2,14(r23)
  800d48:	103f3816 	blt	r2,zero,800a2c <__alt_data_end+0xff800a2c>
  800d4c:	d9c02e17 	ldw	r7,184(sp)
  800d50:	d9002d17 	ldw	r4,180(sp)
  800d54:	a80d883a 	mov	r6,r21
  800d58:	b80b883a 	mov	r5,r23
  800d5c:	0802c800 	call	802c80 <__sbprintf>
  800d60:	00001106 	br	800da8 <___vfprintf_internal_r+0x420>
  800d64:	d9002d17 	ldw	r4,180(sp)
  800d68:	d9801e04 	addi	r6,sp,120
  800d6c:	b80b883a 	mov	r5,r23
  800d70:	08081680 	call	808168 <__sprint_r>
  800d74:	1000081e 	bne	r2,zero,800d98 <___vfprintf_internal_r+0x410>
  800d78:	da000404 	addi	r8,sp,16
  800d7c:	003f5106 	br	800ac4 <__alt_data_end+0xff800ac4>
  800d80:	d8802017 	ldw	r2,128(sp)
  800d84:	10000426 	beq	r2,zero,800d98 <___vfprintf_internal_r+0x410>
  800d88:	d9002d17 	ldw	r4,180(sp)
  800d8c:	d9801e04 	addi	r6,sp,120
  800d90:	b80b883a 	mov	r5,r23
  800d94:	08081680 	call	808168 <__sprint_r>
  800d98:	b880030b 	ldhu	r2,12(r23)
  800d9c:	1080100c 	andi	r2,r2,64
  800da0:	1005c01e 	bne	r2,zero,8024a4 <___vfprintf_internal_r+0x1b1c>
  800da4:	d8802f17 	ldw	r2,188(sp)
  800da8:	dfc04717 	ldw	ra,284(sp)
  800dac:	df004617 	ldw	fp,280(sp)
  800db0:	ddc04517 	ldw	r23,276(sp)
  800db4:	dd804417 	ldw	r22,272(sp)
  800db8:	dd404317 	ldw	r21,268(sp)
  800dbc:	dd004217 	ldw	r20,264(sp)
  800dc0:	dcc04117 	ldw	r19,260(sp)
  800dc4:	dc804017 	ldw	r18,256(sp)
  800dc8:	dc403f17 	ldw	r17,252(sp)
  800dcc:	dc003e17 	ldw	r16,248(sp)
  800dd0:	dec04804 	addi	sp,sp,288
  800dd4:	f800283a 	ret
  800dd8:	d9002d17 	ldw	r4,180(sp)
  800ddc:	0804d480 	call	804d48 <__sinit>
  800de0:	003f0206 	br	8009ec <__alt_data_end+0xff8009ec>
  800de4:	d9002e17 	ldw	r4,184(sp)
  800de8:	d9402e17 	ldw	r5,184(sp)
  800dec:	21000017 	ldw	r4,0(r4)
  800df0:	28800104 	addi	r2,r5,4
  800df4:	d9003115 	stw	r4,196(sp)
  800df8:	203fa716 	blt	r4,zero,800c98 <__alt_data_end+0xff800c98>
  800dfc:	d8802e15 	stw	r2,184(sp)
  800e00:	ac400007 	ldb	r17,0(r21)
  800e04:	003f4206 	br	800b10 <__alt_data_end+0xff800b10>
  800e08:	ac400007 	ldb	r17,0(r21)
  800e0c:	01000a84 	movi	r4,42
  800e10:	a8c00044 	addi	r3,r21,1
  800e14:	89075826 	beq	r17,r4,802b78 <___vfprintf_internal_r+0x21f0>
  800e18:	8cbff404 	addi	r18,r17,-48
  800e1c:	b486ae36 	bltu	r22,r18,8028d8 <___vfprintf_internal_r+0x1f50>
  800e20:	0009883a 	mov	r4,zero
  800e24:	1823883a 	mov	r17,r3
  800e28:	01400284 	movi	r5,10
  800e2c:	080ae240 	call	80ae24 <__mulsi3>
  800e30:	88c00007 	ldb	r3,0(r17)
  800e34:	1489883a 	add	r4,r2,r18
  800e38:	8d400044 	addi	r21,r17,1
  800e3c:	1cbff404 	addi	r18,r3,-48
  800e40:	a823883a 	mov	r17,r21
  800e44:	b4bff82e 	bgeu	r22,r18,800e28 <__alt_data_end+0xff800e28>
  800e48:	1823883a 	mov	r17,r3
  800e4c:	2005f616 	blt	r4,zero,802628 <___vfprintf_internal_r+0x1ca0>
  800e50:	d9002a15 	stw	r4,168(sp)
  800e54:	003f2f06 	br	800b14 <__alt_data_end+0xff800b14>
  800e58:	84002014 	ori	r16,r16,128
  800e5c:	ac400007 	ldb	r17,0(r21)
  800e60:	003f2b06 	br	800b10 <__alt_data_end+0xff800b10>
  800e64:	8cbff404 	addi	r18,r17,-48
  800e68:	d8003115 	stw	zero,196(sp)
  800e6c:	0009883a 	mov	r4,zero
  800e70:	a823883a 	mov	r17,r21
  800e74:	01400284 	movi	r5,10
  800e78:	080ae240 	call	80ae24 <__mulsi3>
  800e7c:	88c00007 	ldb	r3,0(r17)
  800e80:	9089883a 	add	r4,r18,r2
  800e84:	ad400044 	addi	r21,r21,1
  800e88:	1cbff404 	addi	r18,r3,-48
  800e8c:	a823883a 	mov	r17,r21
  800e90:	b4bff82e 	bgeu	r22,r18,800e74 <__alt_data_end+0xff800e74>
  800e94:	1823883a 	mov	r17,r3
  800e98:	d9003115 	stw	r4,196(sp)
  800e9c:	003f1d06 	br	800b14 <__alt_data_end+0xff800b14>
  800ea0:	8025883a 	mov	r18,r16
  800ea4:	dc002903 	ldbu	r16,164(sp)
  800ea8:	e011883a 	mov	r8,fp
  800eac:	84003fcc 	andi	r16,r16,255
  800eb0:	8007531e 	bne	r16,zero,802c00 <___vfprintf_internal_r+0x2278>
  800eb4:	94800414 	ori	r18,r18,16
  800eb8:	9080080c 	andi	r2,r18,32
  800ebc:	1003a326 	beq	r2,zero,801d4c <___vfprintf_internal_r+0x13c4>
  800ec0:	d9002e17 	ldw	r4,184(sp)
  800ec4:	20800117 	ldw	r2,4(r4)
  800ec8:	24c00017 	ldw	r19,0(r4)
  800ecc:	21000204 	addi	r4,r4,8
  800ed0:	d9002e15 	stw	r4,184(sp)
  800ed4:	102d883a 	mov	r22,r2
  800ed8:	10047316 	blt	r2,zero,8020a8 <___vfprintf_internal_r+0x1720>
  800edc:	d9002a17 	ldw	r4,168(sp)
  800ee0:	df002783 	ldbu	fp,158(sp)
  800ee4:	2003e416 	blt	r4,zero,801e78 <___vfprintf_internal_r+0x14f0>
  800ee8:	00ffdfc4 	movi	r3,-129
  800eec:	9d84b03a 	or	r2,r19,r22
  800ef0:	90e4703a 	and	r18,r18,r3
  800ef4:	10018026 	beq	r2,zero,8014f8 <___vfprintf_internal_r+0xb70>
  800ef8:	b003ab26 	beq	r22,zero,801da8 <___vfprintf_internal_r+0x1420>
  800efc:	dc402915 	stw	r17,164(sp)
  800f00:	dc001e04 	addi	r16,sp,120
  800f04:	b023883a 	mov	r17,r22
  800f08:	402d883a 	mov	r22,r8
  800f0c:	9809883a 	mov	r4,r19
  800f10:	880b883a 	mov	r5,r17
  800f14:	01800284 	movi	r6,10
  800f18:	000f883a 	mov	r7,zero
  800f1c:	080a6ac0 	call	80a6ac <__umoddi3>
  800f20:	10800c04 	addi	r2,r2,48
  800f24:	843fffc4 	addi	r16,r16,-1
  800f28:	9809883a 	mov	r4,r19
  800f2c:	880b883a 	mov	r5,r17
  800f30:	80800005 	stb	r2,0(r16)
  800f34:	01800284 	movi	r6,10
  800f38:	000f883a 	mov	r7,zero
  800f3c:	080a0b00 	call	80a0b0 <__udivdi3>
  800f40:	1027883a 	mov	r19,r2
  800f44:	10c4b03a 	or	r2,r2,r3
  800f48:	1823883a 	mov	r17,r3
  800f4c:	103fef1e 	bne	r2,zero,800f0c <__alt_data_end+0xff800f0c>
  800f50:	d8c02817 	ldw	r3,160(sp)
  800f54:	dc402917 	ldw	r17,164(sp)
  800f58:	b011883a 	mov	r8,r22
  800f5c:	1c07c83a 	sub	r3,r3,r16
  800f60:	d8c02b15 	stw	r3,172(sp)
  800f64:	00005f06 	br	8010e4 <___vfprintf_internal_r+0x75c>
  800f68:	8025883a 	mov	r18,r16
  800f6c:	dc002903 	ldbu	r16,164(sp)
  800f70:	e011883a 	mov	r8,fp
  800f74:	84003fcc 	andi	r16,r16,255
  800f78:	80071e1e 	bne	r16,zero,802bf4 <___vfprintf_internal_r+0x226c>
  800f7c:	9080020c 	andi	r2,r18,8
  800f80:	1004af26 	beq	r2,zero,802240 <___vfprintf_internal_r+0x18b8>
  800f84:	d9002e17 	ldw	r4,184(sp)
  800f88:	d9402e17 	ldw	r5,184(sp)
  800f8c:	d8802e17 	ldw	r2,184(sp)
  800f90:	21000017 	ldw	r4,0(r4)
  800f94:	29400117 	ldw	r5,4(r5)
  800f98:	10800204 	addi	r2,r2,8
  800f9c:	d9003615 	stw	r4,216(sp)
  800fa0:	d9403815 	stw	r5,224(sp)
  800fa4:	d8802e15 	stw	r2,184(sp)
  800fa8:	d9003617 	ldw	r4,216(sp)
  800fac:	d9403817 	ldw	r5,224(sp)
  800fb0:	da003d15 	stw	r8,244(sp)
  800fb4:	04000044 	movi	r16,1
  800fb8:	0807d8c0 	call	807d8c <__fpclassifyd>
  800fbc:	da003d17 	ldw	r8,244(sp)
  800fc0:	1404441e 	bne	r2,r16,8020d4 <___vfprintf_internal_r+0x174c>
  800fc4:	d9003617 	ldw	r4,216(sp)
  800fc8:	d9403817 	ldw	r5,224(sp)
  800fcc:	000d883a 	mov	r6,zero
  800fd0:	000f883a 	mov	r7,zero
  800fd4:	080c22c0 	call	80c22c <__ledf2>
  800fd8:	da003d17 	ldw	r8,244(sp)
  800fdc:	1005e316 	blt	r2,zero,80276c <___vfprintf_internal_r+0x1de4>
  800fe0:	df002783 	ldbu	fp,158(sp)
  800fe4:	008011c4 	movi	r2,71
  800fe8:	1445580e 	bge	r2,r17,80254c <___vfprintf_internal_r+0x1bc4>
  800fec:	04002074 	movhi	r16,129
  800ff0:	84035b04 	addi	r16,r16,3436
  800ff4:	00c000c4 	movi	r3,3
  800ff8:	00bfdfc4 	movi	r2,-129
  800ffc:	d8c02915 	stw	r3,164(sp)
  801000:	90a4703a 	and	r18,r18,r2
  801004:	d8c02b15 	stw	r3,172(sp)
  801008:	d8002a15 	stw	zero,168(sp)
  80100c:	d8003215 	stw	zero,200(sp)
  801010:	00003a06 	br	8010fc <___vfprintf_internal_r+0x774>
  801014:	84000214 	ori	r16,r16,8
  801018:	ac400007 	ldb	r17,0(r21)
  80101c:	003ebc06 	br	800b10 <__alt_data_end+0xff800b10>
  801020:	8025883a 	mov	r18,r16
  801024:	dc002903 	ldbu	r16,164(sp)
  801028:	e011883a 	mov	r8,fp
  80102c:	84003fcc 	andi	r16,r16,255
  801030:	8007001e 	bne	r16,zero,802c34 <___vfprintf_internal_r+0x22ac>
  801034:	94800414 	ori	r18,r18,16
  801038:	9080080c 	andi	r2,r18,32
  80103c:	1002fa26 	beq	r2,zero,801c28 <___vfprintf_internal_r+0x12a0>
  801040:	d9002e17 	ldw	r4,184(sp)
  801044:	d9402a17 	ldw	r5,168(sp)
  801048:	d8002785 	stb	zero,158(sp)
  80104c:	20800204 	addi	r2,r4,8
  801050:	24c00017 	ldw	r19,0(r4)
  801054:	25800117 	ldw	r22,4(r4)
  801058:	2804b116 	blt	r5,zero,802320 <___vfprintf_internal_r+0x1998>
  80105c:	013fdfc4 	movi	r4,-129
  801060:	9d86b03a 	or	r3,r19,r22
  801064:	d8802e15 	stw	r2,184(sp)
  801068:	9124703a 	and	r18,r18,r4
  80106c:	1802fb1e 	bne	r3,zero,801c5c <___vfprintf_internal_r+0x12d4>
  801070:	d8c02a17 	ldw	r3,168(sp)
  801074:	0039883a 	mov	fp,zero
  801078:	1805e526 	beq	r3,zero,802810 <___vfprintf_internal_r+0x1e88>
  80107c:	0027883a 	mov	r19,zero
  801080:	002d883a 	mov	r22,zero
  801084:	dc001e04 	addi	r16,sp,120
  801088:	9806d0fa 	srli	r3,r19,3
  80108c:	b008977a 	slli	r4,r22,29
  801090:	b02cd0fa 	srli	r22,r22,3
  801094:	9cc001cc 	andi	r19,r19,7
  801098:	98800c04 	addi	r2,r19,48
  80109c:	843fffc4 	addi	r16,r16,-1
  8010a0:	20e6b03a 	or	r19,r4,r3
  8010a4:	80800005 	stb	r2,0(r16)
  8010a8:	9d86b03a 	or	r3,r19,r22
  8010ac:	183ff61e 	bne	r3,zero,801088 <__alt_data_end+0xff801088>
  8010b0:	90c0004c 	andi	r3,r18,1
  8010b4:	18014126 	beq	r3,zero,8015bc <___vfprintf_internal_r+0xc34>
  8010b8:	10803fcc 	andi	r2,r2,255
  8010bc:	1080201c 	xori	r2,r2,128
  8010c0:	10bfe004 	addi	r2,r2,-128
  8010c4:	00c00c04 	movi	r3,48
  8010c8:	10c13c26 	beq	r2,r3,8015bc <___vfprintf_internal_r+0xc34>
  8010cc:	80ffffc5 	stb	r3,-1(r16)
  8010d0:	d8c02817 	ldw	r3,160(sp)
  8010d4:	80bfffc4 	addi	r2,r16,-1
  8010d8:	1021883a 	mov	r16,r2
  8010dc:	1887c83a 	sub	r3,r3,r2
  8010e0:	d8c02b15 	stw	r3,172(sp)
  8010e4:	d8802b17 	ldw	r2,172(sp)
  8010e8:	d9002a17 	ldw	r4,168(sp)
  8010ec:	1100010e 	bge	r2,r4,8010f4 <___vfprintf_internal_r+0x76c>
  8010f0:	2005883a 	mov	r2,r4
  8010f4:	d8802915 	stw	r2,164(sp)
  8010f8:	d8003215 	stw	zero,200(sp)
  8010fc:	e7003fcc 	andi	fp,fp,255
  801100:	e700201c 	xori	fp,fp,128
  801104:	e73fe004 	addi	fp,fp,-128
  801108:	e0000326 	beq	fp,zero,801118 <___vfprintf_internal_r+0x790>
  80110c:	d8c02917 	ldw	r3,164(sp)
  801110:	18c00044 	addi	r3,r3,1
  801114:	d8c02915 	stw	r3,164(sp)
  801118:	90c0008c 	andi	r3,r18,2
  80111c:	d8c02c15 	stw	r3,176(sp)
  801120:	18000326 	beq	r3,zero,801130 <___vfprintf_internal_r+0x7a8>
  801124:	d8c02917 	ldw	r3,164(sp)
  801128:	18c00084 	addi	r3,r3,2
  80112c:	d8c02915 	stw	r3,164(sp)
  801130:	90c0210c 	andi	r3,r18,132
  801134:	d8c03015 	stw	r3,192(sp)
  801138:	1801c51e 	bne	r3,zero,801850 <___vfprintf_internal_r+0xec8>
  80113c:	d9003117 	ldw	r4,196(sp)
  801140:	d8c02917 	ldw	r3,164(sp)
  801144:	20e7c83a 	sub	r19,r4,r3
  801148:	04c1c10e 	bge	zero,r19,801850 <___vfprintf_internal_r+0xec8>
  80114c:	02400404 	movi	r9,16
  801150:	d8c02017 	ldw	r3,128(sp)
  801154:	d8801f17 	ldw	r2,124(sp)
  801158:	4cc52f0e 	bge	r9,r19,802618 <___vfprintf_internal_r+0x1c90>
  80115c:	01402074 	movhi	r5,129
  801160:	29436e84 	addi	r5,r5,3514
  801164:	dc403b15 	stw	r17,236(sp)
  801168:	d9403515 	stw	r5,212(sp)
  80116c:	9823883a 	mov	r17,r19
  801170:	482d883a 	mov	r22,r9
  801174:	9027883a 	mov	r19,r18
  801178:	070001c4 	movi	fp,7
  80117c:	8025883a 	mov	r18,r16
  801180:	dc002d17 	ldw	r16,180(sp)
  801184:	00000306 	br	801194 <___vfprintf_internal_r+0x80c>
  801188:	8c7ffc04 	addi	r17,r17,-16
  80118c:	42000204 	addi	r8,r8,8
  801190:	b440130e 	bge	r22,r17,8011e0 <___vfprintf_internal_r+0x858>
  801194:	01002074 	movhi	r4,129
  801198:	18c00404 	addi	r3,r3,16
  80119c:	10800044 	addi	r2,r2,1
  8011a0:	21036e84 	addi	r4,r4,3514
  8011a4:	41000015 	stw	r4,0(r8)
  8011a8:	45800115 	stw	r22,4(r8)
  8011ac:	d8c02015 	stw	r3,128(sp)
  8011b0:	d8801f15 	stw	r2,124(sp)
  8011b4:	e0bff40e 	bge	fp,r2,801188 <__alt_data_end+0xff801188>
  8011b8:	d9801e04 	addi	r6,sp,120
  8011bc:	b80b883a 	mov	r5,r23
  8011c0:	8009883a 	mov	r4,r16
  8011c4:	08081680 	call	808168 <__sprint_r>
  8011c8:	103ef31e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  8011cc:	8c7ffc04 	addi	r17,r17,-16
  8011d0:	d8c02017 	ldw	r3,128(sp)
  8011d4:	d8801f17 	ldw	r2,124(sp)
  8011d8:	da000404 	addi	r8,sp,16
  8011dc:	b47fed16 	blt	r22,r17,801194 <__alt_data_end+0xff801194>
  8011e0:	9021883a 	mov	r16,r18
  8011e4:	9825883a 	mov	r18,r19
  8011e8:	8827883a 	mov	r19,r17
  8011ec:	dc403b17 	ldw	r17,236(sp)
  8011f0:	d9403517 	ldw	r5,212(sp)
  8011f4:	98c7883a 	add	r3,r19,r3
  8011f8:	10800044 	addi	r2,r2,1
  8011fc:	41400015 	stw	r5,0(r8)
  801200:	44c00115 	stw	r19,4(r8)
  801204:	d8c02015 	stw	r3,128(sp)
  801208:	d8801f15 	stw	r2,124(sp)
  80120c:	010001c4 	movi	r4,7
  801210:	2082c516 	blt	r4,r2,801d28 <___vfprintf_internal_r+0x13a0>
  801214:	df002787 	ldb	fp,158(sp)
  801218:	42000204 	addi	r8,r8,8
  80121c:	e0000c26 	beq	fp,zero,801250 <___vfprintf_internal_r+0x8c8>
  801220:	d8801f17 	ldw	r2,124(sp)
  801224:	d9002784 	addi	r4,sp,158
  801228:	18c00044 	addi	r3,r3,1
  80122c:	10800044 	addi	r2,r2,1
  801230:	41000015 	stw	r4,0(r8)
  801234:	01000044 	movi	r4,1
  801238:	41000115 	stw	r4,4(r8)
  80123c:	d8c02015 	stw	r3,128(sp)
  801240:	d8801f15 	stw	r2,124(sp)
  801244:	010001c4 	movi	r4,7
  801248:	20825e16 	blt	r4,r2,801bc4 <___vfprintf_internal_r+0x123c>
  80124c:	42000204 	addi	r8,r8,8
  801250:	d8802c17 	ldw	r2,176(sp)
  801254:	10000c26 	beq	r2,zero,801288 <___vfprintf_internal_r+0x900>
  801258:	d8801f17 	ldw	r2,124(sp)
  80125c:	d9002704 	addi	r4,sp,156
  801260:	18c00084 	addi	r3,r3,2
  801264:	10800044 	addi	r2,r2,1
  801268:	41000015 	stw	r4,0(r8)
  80126c:	01000084 	movi	r4,2
  801270:	41000115 	stw	r4,4(r8)
  801274:	d8c02015 	stw	r3,128(sp)
  801278:	d8801f15 	stw	r2,124(sp)
  80127c:	010001c4 	movi	r4,7
  801280:	20825816 	blt	r4,r2,801be4 <___vfprintf_internal_r+0x125c>
  801284:	42000204 	addi	r8,r8,8
  801288:	d9003017 	ldw	r4,192(sp)
  80128c:	00802004 	movi	r2,128
  801290:	2081bb26 	beq	r4,r2,801980 <___vfprintf_internal_r+0xff8>
  801294:	d9402a17 	ldw	r5,168(sp)
  801298:	d8802b17 	ldw	r2,172(sp)
  80129c:	28adc83a 	sub	r22,r5,r2
  8012a0:	0580310e 	bge	zero,r22,801368 <___vfprintf_internal_r+0x9e0>
  8012a4:	07000404 	movi	fp,16
  8012a8:	d8801f17 	ldw	r2,124(sp)
  8012ac:	e584360e 	bge	fp,r22,802388 <___vfprintf_internal_r+0x1a00>
  8012b0:	01402074 	movhi	r5,129
  8012b4:	29436a84 	addi	r5,r5,3498
  8012b8:	dc402a15 	stw	r17,168(sp)
  8012bc:	d9402c15 	stw	r5,176(sp)
  8012c0:	b023883a 	mov	r17,r22
  8012c4:	04c001c4 	movi	r19,7
  8012c8:	a82d883a 	mov	r22,r21
  8012cc:	902b883a 	mov	r21,r18
  8012d0:	8025883a 	mov	r18,r16
  8012d4:	dc002d17 	ldw	r16,180(sp)
  8012d8:	00000306 	br	8012e8 <___vfprintf_internal_r+0x960>
  8012dc:	8c7ffc04 	addi	r17,r17,-16
  8012e0:	42000204 	addi	r8,r8,8
  8012e4:	e440110e 	bge	fp,r17,80132c <___vfprintf_internal_r+0x9a4>
  8012e8:	18c00404 	addi	r3,r3,16
  8012ec:	10800044 	addi	r2,r2,1
  8012f0:	45000015 	stw	r20,0(r8)
  8012f4:	47000115 	stw	fp,4(r8)
  8012f8:	d8c02015 	stw	r3,128(sp)
  8012fc:	d8801f15 	stw	r2,124(sp)
  801300:	98bff60e 	bge	r19,r2,8012dc <__alt_data_end+0xff8012dc>
  801304:	d9801e04 	addi	r6,sp,120
  801308:	b80b883a 	mov	r5,r23
  80130c:	8009883a 	mov	r4,r16
  801310:	08081680 	call	808168 <__sprint_r>
  801314:	103ea01e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801318:	8c7ffc04 	addi	r17,r17,-16
  80131c:	d8c02017 	ldw	r3,128(sp)
  801320:	d8801f17 	ldw	r2,124(sp)
  801324:	da000404 	addi	r8,sp,16
  801328:	e47fef16 	blt	fp,r17,8012e8 <__alt_data_end+0xff8012e8>
  80132c:	9021883a 	mov	r16,r18
  801330:	a825883a 	mov	r18,r21
  801334:	b02b883a 	mov	r21,r22
  801338:	882d883a 	mov	r22,r17
  80133c:	dc402a17 	ldw	r17,168(sp)
  801340:	d9002c17 	ldw	r4,176(sp)
  801344:	1d87883a 	add	r3,r3,r22
  801348:	10800044 	addi	r2,r2,1
  80134c:	41000015 	stw	r4,0(r8)
  801350:	45800115 	stw	r22,4(r8)
  801354:	d8c02015 	stw	r3,128(sp)
  801358:	d8801f15 	stw	r2,124(sp)
  80135c:	010001c4 	movi	r4,7
  801360:	20821016 	blt	r4,r2,801ba4 <___vfprintf_internal_r+0x121c>
  801364:	42000204 	addi	r8,r8,8
  801368:	9080400c 	andi	r2,r18,256
  80136c:	10013a1e 	bne	r2,zero,801858 <___vfprintf_internal_r+0xed0>
  801370:	d9402b17 	ldw	r5,172(sp)
  801374:	d8801f17 	ldw	r2,124(sp)
  801378:	44000015 	stw	r16,0(r8)
  80137c:	1947883a 	add	r3,r3,r5
  801380:	10800044 	addi	r2,r2,1
  801384:	41400115 	stw	r5,4(r8)
  801388:	d8c02015 	stw	r3,128(sp)
  80138c:	d8801f15 	stw	r2,124(sp)
  801390:	010001c4 	movi	r4,7
  801394:	2081f516 	blt	r4,r2,801b6c <___vfprintf_internal_r+0x11e4>
  801398:	42000204 	addi	r8,r8,8
  80139c:	9480010c 	andi	r18,r18,4
  8013a0:	90003226 	beq	r18,zero,80146c <___vfprintf_internal_r+0xae4>
  8013a4:	d9403117 	ldw	r5,196(sp)
  8013a8:	d8802917 	ldw	r2,164(sp)
  8013ac:	28a1c83a 	sub	r16,r5,r2
  8013b0:	04002e0e 	bge	zero,r16,80146c <___vfprintf_internal_r+0xae4>
  8013b4:	04400404 	movi	r17,16
  8013b8:	d8801f17 	ldw	r2,124(sp)
  8013bc:	8c04c40e 	bge	r17,r16,8026d0 <___vfprintf_internal_r+0x1d48>
  8013c0:	01402074 	movhi	r5,129
  8013c4:	29436e84 	addi	r5,r5,3514
  8013c8:	d9403515 	stw	r5,212(sp)
  8013cc:	048001c4 	movi	r18,7
  8013d0:	dcc02d17 	ldw	r19,180(sp)
  8013d4:	00000306 	br	8013e4 <___vfprintf_internal_r+0xa5c>
  8013d8:	843ffc04 	addi	r16,r16,-16
  8013dc:	42000204 	addi	r8,r8,8
  8013e0:	8c00130e 	bge	r17,r16,801430 <___vfprintf_internal_r+0xaa8>
  8013e4:	01002074 	movhi	r4,129
  8013e8:	18c00404 	addi	r3,r3,16
  8013ec:	10800044 	addi	r2,r2,1
  8013f0:	21036e84 	addi	r4,r4,3514
  8013f4:	41000015 	stw	r4,0(r8)
  8013f8:	44400115 	stw	r17,4(r8)
  8013fc:	d8c02015 	stw	r3,128(sp)
  801400:	d8801f15 	stw	r2,124(sp)
  801404:	90bff40e 	bge	r18,r2,8013d8 <__alt_data_end+0xff8013d8>
  801408:	d9801e04 	addi	r6,sp,120
  80140c:	b80b883a 	mov	r5,r23
  801410:	9809883a 	mov	r4,r19
  801414:	08081680 	call	808168 <__sprint_r>
  801418:	103e5f1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  80141c:	843ffc04 	addi	r16,r16,-16
  801420:	d8c02017 	ldw	r3,128(sp)
  801424:	d8801f17 	ldw	r2,124(sp)
  801428:	da000404 	addi	r8,sp,16
  80142c:	8c3fed16 	blt	r17,r16,8013e4 <__alt_data_end+0xff8013e4>
  801430:	d9403517 	ldw	r5,212(sp)
  801434:	1c07883a 	add	r3,r3,r16
  801438:	10800044 	addi	r2,r2,1
  80143c:	41400015 	stw	r5,0(r8)
  801440:	44000115 	stw	r16,4(r8)
  801444:	d8c02015 	stw	r3,128(sp)
  801448:	d8801f15 	stw	r2,124(sp)
  80144c:	010001c4 	movi	r4,7
  801450:	2080060e 	bge	r4,r2,80146c <___vfprintf_internal_r+0xae4>
  801454:	d9002d17 	ldw	r4,180(sp)
  801458:	d9801e04 	addi	r6,sp,120
  80145c:	b80b883a 	mov	r5,r23
  801460:	08081680 	call	808168 <__sprint_r>
  801464:	103e4c1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801468:	d8c02017 	ldw	r3,128(sp)
  80146c:	d8803117 	ldw	r2,196(sp)
  801470:	d9002917 	ldw	r4,164(sp)
  801474:	1100010e 	bge	r2,r4,80147c <___vfprintf_internal_r+0xaf4>
  801478:	2005883a 	mov	r2,r4
  80147c:	d9402f17 	ldw	r5,188(sp)
  801480:	288b883a 	add	r5,r5,r2
  801484:	d9402f15 	stw	r5,188(sp)
  801488:	1801c01e 	bne	r3,zero,801b8c <___vfprintf_internal_r+0x1204>
  80148c:	a8800007 	ldb	r2,0(r21)
  801490:	d8001f15 	stw	zero,124(sp)
  801494:	da000404 	addi	r8,sp,16
  801498:	103d751e 	bne	r2,zero,800a70 <__alt_data_end+0xff800a70>
  80149c:	a823883a 	mov	r17,r21
  8014a0:	003d8b06 	br	800ad0 <__alt_data_end+0xff800ad0>
  8014a4:	8025883a 	mov	r18,r16
  8014a8:	dc002903 	ldbu	r16,164(sp)
  8014ac:	e011883a 	mov	r8,fp
  8014b0:	84003fcc 	andi	r16,r16,255
  8014b4:	8005e51e 	bne	r16,zero,802c4c <___vfprintf_internal_r+0x22c4>
  8014b8:	94800414 	ori	r18,r18,16
  8014bc:	9080080c 	andi	r2,r18,32
  8014c0:	10022b26 	beq	r2,zero,801d70 <___vfprintf_internal_r+0x13e8>
  8014c4:	d9002e17 	ldw	r4,184(sp)
  8014c8:	d9402a17 	ldw	r5,168(sp)
  8014cc:	d8002785 	stb	zero,158(sp)
  8014d0:	20c00204 	addi	r3,r4,8
  8014d4:	24c00017 	ldw	r19,0(r4)
  8014d8:	25800117 	ldw	r22,4(r4)
  8014dc:	28042e16 	blt	r5,zero,802598 <___vfprintf_internal_r+0x1c10>
  8014e0:	013fdfc4 	movi	r4,-129
  8014e4:	9d84b03a 	or	r2,r19,r22
  8014e8:	d8c02e15 	stw	r3,184(sp)
  8014ec:	9124703a 	and	r18,r18,r4
  8014f0:	0039883a 	mov	fp,zero
  8014f4:	103e801e 	bne	r2,zero,800ef8 <__alt_data_end+0xff800ef8>
  8014f8:	d9002a17 	ldw	r4,168(sp)
  8014fc:	2002e01e 	bne	r4,zero,802080 <___vfprintf_internal_r+0x16f8>
  801500:	d8002a15 	stw	zero,168(sp)
  801504:	d8002b15 	stw	zero,172(sp)
  801508:	dc001e04 	addi	r16,sp,120
  80150c:	003ef506 	br	8010e4 <__alt_data_end+0xff8010e4>
  801510:	8025883a 	mov	r18,r16
  801514:	dc002903 	ldbu	r16,164(sp)
  801518:	e011883a 	mov	r8,fp
  80151c:	84003fcc 	andi	r16,r16,255
  801520:	8005ba1e 	bne	r16,zero,802c0c <___vfprintf_internal_r+0x2284>
  801524:	01002074 	movhi	r4,129
  801528:	21035e04 	addi	r4,r4,3448
  80152c:	d9003915 	stw	r4,228(sp)
  801530:	9080080c 	andi	r2,r18,32
  801534:	10006126 	beq	r2,zero,8016bc <___vfprintf_internal_r+0xd34>
  801538:	d9402e17 	ldw	r5,184(sp)
  80153c:	2cc00017 	ldw	r19,0(r5)
  801540:	2d800117 	ldw	r22,4(r5)
  801544:	29400204 	addi	r5,r5,8
  801548:	d9402e15 	stw	r5,184(sp)
  80154c:	9080004c 	andi	r2,r18,1
  801550:	1001ac26 	beq	r2,zero,801c04 <___vfprintf_internal_r+0x127c>
  801554:	9d84b03a 	or	r2,r19,r22
  801558:	10038526 	beq	r2,zero,802370 <___vfprintf_internal_r+0x19e8>
  80155c:	d8c02a17 	ldw	r3,168(sp)
  801560:	00800c04 	movi	r2,48
  801564:	d8802705 	stb	r2,156(sp)
  801568:	dc402745 	stb	r17,157(sp)
  80156c:	d8002785 	stb	zero,158(sp)
  801570:	90800094 	ori	r2,r18,2
  801574:	18047916 	blt	r3,zero,80275c <___vfprintf_internal_r+0x1dd4>
  801578:	00bfdfc4 	movi	r2,-129
  80157c:	90a4703a 	and	r18,r18,r2
  801580:	94800094 	ori	r18,r18,2
  801584:	0039883a 	mov	fp,zero
  801588:	d9003917 	ldw	r4,228(sp)
  80158c:	dc001e04 	addi	r16,sp,120
  801590:	988003cc 	andi	r2,r19,15
  801594:	b006973a 	slli	r3,r22,28
  801598:	2085883a 	add	r2,r4,r2
  80159c:	9826d13a 	srli	r19,r19,4
  8015a0:	10800003 	ldbu	r2,0(r2)
  8015a4:	b02cd13a 	srli	r22,r22,4
  8015a8:	843fffc4 	addi	r16,r16,-1
  8015ac:	1ce6b03a 	or	r19,r3,r19
  8015b0:	80800005 	stb	r2,0(r16)
  8015b4:	9d84b03a 	or	r2,r19,r22
  8015b8:	103ff51e 	bne	r2,zero,801590 <__alt_data_end+0xff801590>
  8015bc:	d8c02817 	ldw	r3,160(sp)
  8015c0:	1c07c83a 	sub	r3,r3,r16
  8015c4:	d8c02b15 	stw	r3,172(sp)
  8015c8:	003ec606 	br	8010e4 <__alt_data_end+0xff8010e4>
  8015cc:	8025883a 	mov	r18,r16
  8015d0:	dc002903 	ldbu	r16,164(sp)
  8015d4:	e011883a 	mov	r8,fp
  8015d8:	84003fcc 	andi	r16,r16,255
  8015dc:	803e9626 	beq	r16,zero,801038 <__alt_data_end+0xff801038>
  8015e0:	d8c02b03 	ldbu	r3,172(sp)
  8015e4:	d8c02785 	stb	r3,158(sp)
  8015e8:	003e9306 	br	801038 <__alt_data_end+0xff801038>
  8015ec:	00c00044 	movi	r3,1
  8015f0:	d8c02905 	stb	r3,164(sp)
  8015f4:	00c00ac4 	movi	r3,43
  8015f8:	d8c02b05 	stb	r3,172(sp)
  8015fc:	ac400007 	ldb	r17,0(r21)
  801600:	003d4306 	br	800b10 <__alt_data_end+0xff800b10>
  801604:	84000814 	ori	r16,r16,32
  801608:	ac400007 	ldb	r17,0(r21)
  80160c:	003d4006 	br	800b10 <__alt_data_end+0xff800b10>
  801610:	d8802e17 	ldw	r2,184(sp)
  801614:	8025883a 	mov	r18,r16
  801618:	d8002785 	stb	zero,158(sp)
  80161c:	14000017 	ldw	r16,0(r2)
  801620:	e011883a 	mov	r8,fp
  801624:	14c00104 	addi	r19,r2,4
  801628:	80042d26 	beq	r16,zero,8026e0 <___vfprintf_internal_r+0x1d58>
  80162c:	d8c02a17 	ldw	r3,168(sp)
  801630:	1803e416 	blt	r3,zero,8025c4 <___vfprintf_internal_r+0x1c3c>
  801634:	180d883a 	mov	r6,r3
  801638:	000b883a 	mov	r5,zero
  80163c:	8009883a 	mov	r4,r16
  801640:	df003d15 	stw	fp,244(sp)
  801644:	08062c00 	call	8062c0 <memchr>
  801648:	da003d17 	ldw	r8,244(sp)
  80164c:	10046826 	beq	r2,zero,8027f0 <___vfprintf_internal_r+0x1e68>
  801650:	1405c83a 	sub	r2,r2,r16
  801654:	d8802b15 	stw	r2,172(sp)
  801658:	1003e016 	blt	r2,zero,8025dc <___vfprintf_internal_r+0x1c54>
  80165c:	df002783 	ldbu	fp,158(sp)
  801660:	d8802915 	stw	r2,164(sp)
  801664:	dcc02e15 	stw	r19,184(sp)
  801668:	d8002a15 	stw	zero,168(sp)
  80166c:	d8003215 	stw	zero,200(sp)
  801670:	003ea206 	br	8010fc <__alt_data_end+0xff8010fc>
  801674:	8025883a 	mov	r18,r16
  801678:	dc002903 	ldbu	r16,164(sp)
  80167c:	e011883a 	mov	r8,fp
  801680:	84003fcc 	andi	r16,r16,255
  801684:	803f8d26 	beq	r16,zero,8014bc <__alt_data_end+0xff8014bc>
  801688:	d8c02b03 	ldbu	r3,172(sp)
  80168c:	d8c02785 	stb	r3,158(sp)
  801690:	003f8a06 	br	8014bc <__alt_data_end+0xff8014bc>
  801694:	8025883a 	mov	r18,r16
  801698:	dc002903 	ldbu	r16,164(sp)
  80169c:	e011883a 	mov	r8,fp
  8016a0:	84003fcc 	andi	r16,r16,255
  8016a4:	8005661e 	bne	r16,zero,802c40 <___vfprintf_internal_r+0x22b8>
  8016a8:	01002074 	movhi	r4,129
  8016ac:	21036304 	addi	r4,r4,3468
  8016b0:	d9003915 	stw	r4,228(sp)
  8016b4:	9080080c 	andi	r2,r18,32
  8016b8:	103f9f1e 	bne	r2,zero,801538 <__alt_data_end+0xff801538>
  8016bc:	9080040c 	andi	r2,r18,16
  8016c0:	1002eb26 	beq	r2,zero,802270 <___vfprintf_internal_r+0x18e8>
  8016c4:	d8802e17 	ldw	r2,184(sp)
  8016c8:	002d883a 	mov	r22,zero
  8016cc:	14c00017 	ldw	r19,0(r2)
  8016d0:	10800104 	addi	r2,r2,4
  8016d4:	d8802e15 	stw	r2,184(sp)
  8016d8:	003f9c06 	br	80154c <__alt_data_end+0xff80154c>
  8016dc:	d8802b07 	ldb	r2,172(sp)
  8016e0:	1002e11e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x18e0>
  8016e4:	00c00044 	movi	r3,1
  8016e8:	d8c02905 	stb	r3,164(sp)
  8016ec:	00c00804 	movi	r3,32
  8016f0:	d8c02b05 	stb	r3,172(sp)
  8016f4:	ac400007 	ldb	r17,0(r21)
  8016f8:	003d0506 	br	800b10 <__alt_data_end+0xff800b10>
  8016fc:	84000054 	ori	r16,r16,1
  801700:	ac400007 	ldb	r17,0(r21)
  801704:	003d0206 	br	800b10 <__alt_data_end+0xff800b10>
  801708:	8025883a 	mov	r18,r16
  80170c:	dc002903 	ldbu	r16,164(sp)
  801710:	e011883a 	mov	r8,fp
  801714:	84003fcc 	andi	r16,r16,255
  801718:	803de726 	beq	r16,zero,800eb8 <__alt_data_end+0xff800eb8>
  80171c:	d8c02b03 	ldbu	r3,172(sp)
  801720:	d8c02785 	stb	r3,158(sp)
  801724:	003de406 	br	800eb8 <__alt_data_end+0xff800eb8>
  801728:	84001014 	ori	r16,r16,64
  80172c:	ac400007 	ldb	r17,0(r21)
  801730:	003cf706 	br	800b10 <__alt_data_end+0xff800b10>
  801734:	ac400007 	ldb	r17,0(r21)
  801738:	00801b04 	movi	r2,108
  80173c:	88838f26 	beq	r17,r2,80257c <___vfprintf_internal_r+0x1bf4>
  801740:	84000414 	ori	r16,r16,16
  801744:	003cf206 	br	800b10 <__alt_data_end+0xff800b10>
  801748:	8025883a 	mov	r18,r16
  80174c:	dc002903 	ldbu	r16,164(sp)
  801750:	e011883a 	mov	r8,fp
  801754:	84003fcc 	andi	r16,r16,255
  801758:	80053f1e 	bne	r16,zero,802c58 <___vfprintf_internal_r+0x22d0>
  80175c:	9080080c 	andi	r2,r18,32
  801760:	1002d226 	beq	r2,zero,8022ac <___vfprintf_internal_r+0x1924>
  801764:	d9002e17 	ldw	r4,184(sp)
  801768:	d9402f17 	ldw	r5,188(sp)
  80176c:	20800017 	ldw	r2,0(r4)
  801770:	2807d7fa 	srai	r3,r5,31
  801774:	21000104 	addi	r4,r4,4
  801778:	d9002e15 	stw	r4,184(sp)
  80177c:	11400015 	stw	r5,0(r2)
  801780:	10c00115 	stw	r3,4(r2)
  801784:	003cb806 	br	800a68 <__alt_data_end+0xff800a68>
  801788:	d8c02e17 	ldw	r3,184(sp)
  80178c:	d9002e17 	ldw	r4,184(sp)
  801790:	8025883a 	mov	r18,r16
  801794:	18800017 	ldw	r2,0(r3)
  801798:	21000104 	addi	r4,r4,4
  80179c:	00c00044 	movi	r3,1
  8017a0:	e011883a 	mov	r8,fp
  8017a4:	d8c02915 	stw	r3,164(sp)
  8017a8:	d8002785 	stb	zero,158(sp)
  8017ac:	d8801405 	stb	r2,80(sp)
  8017b0:	d9002e15 	stw	r4,184(sp)
  8017b4:	d8c02b15 	stw	r3,172(sp)
  8017b8:	d8002a15 	stw	zero,168(sp)
  8017bc:	d8003215 	stw	zero,200(sp)
  8017c0:	dc001404 	addi	r16,sp,80
  8017c4:	0039883a 	mov	fp,zero
  8017c8:	003e5306 	br	801118 <__alt_data_end+0xff801118>
  8017cc:	01002074 	movhi	r4,129
  8017d0:	21036304 	addi	r4,r4,3468
  8017d4:	0039883a 	mov	fp,zero
  8017d8:	d9003915 	stw	r4,228(sp)
  8017dc:	04401e04 	movi	r17,120
  8017e0:	003f6906 	br	801588 <__alt_data_end+0xff801588>
  8017e4:	8025883a 	mov	r18,r16
  8017e8:	dc002903 	ldbu	r16,164(sp)
  8017ec:	e011883a 	mov	r8,fp
  8017f0:	84003fcc 	andi	r16,r16,255
  8017f4:	8005081e 	bne	r16,zero,802c18 <___vfprintf_internal_r+0x2290>
  8017f8:	883d6126 	beq	r17,zero,800d80 <__alt_data_end+0xff800d80>
  8017fc:	00c00044 	movi	r3,1
  801800:	d8c02915 	stw	r3,164(sp)
  801804:	dc401405 	stb	r17,80(sp)
  801808:	d8002785 	stb	zero,158(sp)
  80180c:	003fe906 	br	8017b4 <__alt_data_end+0xff8017b4>
  801810:	01402074 	movhi	r5,129
  801814:	29436304 	addi	r5,r5,3468
  801818:	d9403915 	stw	r5,228(sp)
  80181c:	d8c02e15 	stw	r3,184(sp)
  801820:	1025883a 	mov	r18,r2
  801824:	04401e04 	movi	r17,120
  801828:	9d84b03a 	or	r2,r19,r22
  80182c:	1000fc1e 	bne	r2,zero,801c20 <___vfprintf_internal_r+0x1298>
  801830:	0039883a 	mov	fp,zero
  801834:	00800084 	movi	r2,2
  801838:	10803fcc 	andi	r2,r2,255
  80183c:	00c00044 	movi	r3,1
  801840:	10c20f26 	beq	r2,r3,802080 <___vfprintf_internal_r+0x16f8>
  801844:	00c00084 	movi	r3,2
  801848:	10fd3326 	beq	r2,r3,800d18 <__alt_data_end+0xff800d18>
  80184c:	003e0b06 	br	80107c <__alt_data_end+0xff80107c>
  801850:	d8c02017 	ldw	r3,128(sp)
  801854:	003e7106 	br	80121c <__alt_data_end+0xff80121c>
  801858:	00801944 	movi	r2,101
  80185c:	14407e0e 	bge	r2,r17,801a58 <___vfprintf_internal_r+0x10d0>
  801860:	d9003617 	ldw	r4,216(sp)
  801864:	d9403817 	ldw	r5,224(sp)
  801868:	000d883a 	mov	r6,zero
  80186c:	000f883a 	mov	r7,zero
  801870:	d8c03c15 	stw	r3,240(sp)
  801874:	da003d15 	stw	r8,244(sp)
  801878:	080c0c80 	call	80c0c8 <__eqdf2>
  80187c:	d8c03c17 	ldw	r3,240(sp)
  801880:	da003d17 	ldw	r8,244(sp)
  801884:	1000f71e 	bne	r2,zero,801c64 <___vfprintf_internal_r+0x12dc>
  801888:	d8801f17 	ldw	r2,124(sp)
  80188c:	01002074 	movhi	r4,129
  801890:	21036a04 	addi	r4,r4,3496
  801894:	18c00044 	addi	r3,r3,1
  801898:	10800044 	addi	r2,r2,1
  80189c:	41000015 	stw	r4,0(r8)
  8018a0:	01000044 	movi	r4,1
  8018a4:	41000115 	stw	r4,4(r8)
  8018a8:	d8c02015 	stw	r3,128(sp)
  8018ac:	d8801f15 	stw	r2,124(sp)
  8018b0:	010001c4 	movi	r4,7
  8018b4:	2082b816 	blt	r4,r2,802398 <___vfprintf_internal_r+0x1a10>
  8018b8:	42000204 	addi	r8,r8,8
  8018bc:	d8802617 	ldw	r2,152(sp)
  8018c0:	d9403317 	ldw	r5,204(sp)
  8018c4:	11400216 	blt	r2,r5,8018d0 <___vfprintf_internal_r+0xf48>
  8018c8:	9080004c 	andi	r2,r18,1
  8018cc:	103eb326 	beq	r2,zero,80139c <__alt_data_end+0xff80139c>
  8018d0:	d8803717 	ldw	r2,220(sp)
  8018d4:	d9003417 	ldw	r4,208(sp)
  8018d8:	d9403717 	ldw	r5,220(sp)
  8018dc:	1887883a 	add	r3,r3,r2
  8018e0:	d8801f17 	ldw	r2,124(sp)
  8018e4:	41000015 	stw	r4,0(r8)
  8018e8:	41400115 	stw	r5,4(r8)
  8018ec:	10800044 	addi	r2,r2,1
  8018f0:	d8c02015 	stw	r3,128(sp)
  8018f4:	d8801f15 	stw	r2,124(sp)
  8018f8:	010001c4 	movi	r4,7
  8018fc:	20832916 	blt	r4,r2,8025a4 <___vfprintf_internal_r+0x1c1c>
  801900:	42000204 	addi	r8,r8,8
  801904:	d8803317 	ldw	r2,204(sp)
  801908:	143fffc4 	addi	r16,r2,-1
  80190c:	043ea30e 	bge	zero,r16,80139c <__alt_data_end+0xff80139c>
  801910:	04400404 	movi	r17,16
  801914:	d8801f17 	ldw	r2,124(sp)
  801918:	8c00880e 	bge	r17,r16,801b3c <___vfprintf_internal_r+0x11b4>
  80191c:	01402074 	movhi	r5,129
  801920:	29436a84 	addi	r5,r5,3498
  801924:	d9402c15 	stw	r5,176(sp)
  801928:	058001c4 	movi	r22,7
  80192c:	dcc02d17 	ldw	r19,180(sp)
  801930:	00000306 	br	801940 <___vfprintf_internal_r+0xfb8>
  801934:	42000204 	addi	r8,r8,8
  801938:	843ffc04 	addi	r16,r16,-16
  80193c:	8c00820e 	bge	r17,r16,801b48 <___vfprintf_internal_r+0x11c0>
  801940:	18c00404 	addi	r3,r3,16
  801944:	10800044 	addi	r2,r2,1
  801948:	45000015 	stw	r20,0(r8)
  80194c:	44400115 	stw	r17,4(r8)
  801950:	d8c02015 	stw	r3,128(sp)
  801954:	d8801f15 	stw	r2,124(sp)
  801958:	b0bff60e 	bge	r22,r2,801934 <__alt_data_end+0xff801934>
  80195c:	d9801e04 	addi	r6,sp,120
  801960:	b80b883a 	mov	r5,r23
  801964:	9809883a 	mov	r4,r19
  801968:	08081680 	call	808168 <__sprint_r>
  80196c:	103d0a1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801970:	d8c02017 	ldw	r3,128(sp)
  801974:	d8801f17 	ldw	r2,124(sp)
  801978:	da000404 	addi	r8,sp,16
  80197c:	003fee06 	br	801938 <__alt_data_end+0xff801938>
  801980:	d9403117 	ldw	r5,196(sp)
  801984:	d8802917 	ldw	r2,164(sp)
  801988:	28adc83a 	sub	r22,r5,r2
  80198c:	05be410e 	bge	zero,r22,801294 <__alt_data_end+0xff801294>
  801990:	07000404 	movi	fp,16
  801994:	d8801f17 	ldw	r2,124(sp)
  801998:	e5838f0e 	bge	fp,r22,8027d8 <___vfprintf_internal_r+0x1e50>
  80199c:	01402074 	movhi	r5,129
  8019a0:	29436a84 	addi	r5,r5,3498
  8019a4:	dc403015 	stw	r17,192(sp)
  8019a8:	d9402c15 	stw	r5,176(sp)
  8019ac:	b023883a 	mov	r17,r22
  8019b0:	04c001c4 	movi	r19,7
  8019b4:	a82d883a 	mov	r22,r21
  8019b8:	902b883a 	mov	r21,r18
  8019bc:	8025883a 	mov	r18,r16
  8019c0:	dc002d17 	ldw	r16,180(sp)
  8019c4:	00000306 	br	8019d4 <___vfprintf_internal_r+0x104c>
  8019c8:	8c7ffc04 	addi	r17,r17,-16
  8019cc:	42000204 	addi	r8,r8,8
  8019d0:	e440110e 	bge	fp,r17,801a18 <___vfprintf_internal_r+0x1090>
  8019d4:	18c00404 	addi	r3,r3,16
  8019d8:	10800044 	addi	r2,r2,1
  8019dc:	45000015 	stw	r20,0(r8)
  8019e0:	47000115 	stw	fp,4(r8)
  8019e4:	d8c02015 	stw	r3,128(sp)
  8019e8:	d8801f15 	stw	r2,124(sp)
  8019ec:	98bff60e 	bge	r19,r2,8019c8 <__alt_data_end+0xff8019c8>
  8019f0:	d9801e04 	addi	r6,sp,120
  8019f4:	b80b883a 	mov	r5,r23
  8019f8:	8009883a 	mov	r4,r16
  8019fc:	08081680 	call	808168 <__sprint_r>
  801a00:	103ce51e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801a04:	8c7ffc04 	addi	r17,r17,-16
  801a08:	d8c02017 	ldw	r3,128(sp)
  801a0c:	d8801f17 	ldw	r2,124(sp)
  801a10:	da000404 	addi	r8,sp,16
  801a14:	e47fef16 	blt	fp,r17,8019d4 <__alt_data_end+0xff8019d4>
  801a18:	9021883a 	mov	r16,r18
  801a1c:	a825883a 	mov	r18,r21
  801a20:	b02b883a 	mov	r21,r22
  801a24:	882d883a 	mov	r22,r17
  801a28:	dc403017 	ldw	r17,192(sp)
  801a2c:	d9002c17 	ldw	r4,176(sp)
  801a30:	1d87883a 	add	r3,r3,r22
  801a34:	10800044 	addi	r2,r2,1
  801a38:	41000015 	stw	r4,0(r8)
  801a3c:	45800115 	stw	r22,4(r8)
  801a40:	d8c02015 	stw	r3,128(sp)
  801a44:	d8801f15 	stw	r2,124(sp)
  801a48:	010001c4 	movi	r4,7
  801a4c:	20818e16 	blt	r4,r2,802088 <___vfprintf_internal_r+0x1700>
  801a50:	42000204 	addi	r8,r8,8
  801a54:	003e0f06 	br	801294 <__alt_data_end+0xff801294>
  801a58:	d9403317 	ldw	r5,204(sp)
  801a5c:	00800044 	movi	r2,1
  801a60:	18c00044 	addi	r3,r3,1
  801a64:	1141530e 	bge	r2,r5,801fb4 <___vfprintf_internal_r+0x162c>
  801a68:	dc401f17 	ldw	r17,124(sp)
  801a6c:	00800044 	movi	r2,1
  801a70:	40800115 	stw	r2,4(r8)
  801a74:	8c400044 	addi	r17,r17,1
  801a78:	44000015 	stw	r16,0(r8)
  801a7c:	d8c02015 	stw	r3,128(sp)
  801a80:	dc401f15 	stw	r17,124(sp)
  801a84:	008001c4 	movi	r2,7
  801a88:	14416b16 	blt	r2,r17,802038 <___vfprintf_internal_r+0x16b0>
  801a8c:	42000204 	addi	r8,r8,8
  801a90:	d8803717 	ldw	r2,220(sp)
  801a94:	d9003417 	ldw	r4,208(sp)
  801a98:	8c400044 	addi	r17,r17,1
  801a9c:	10c7883a 	add	r3,r2,r3
  801aa0:	40800115 	stw	r2,4(r8)
  801aa4:	41000015 	stw	r4,0(r8)
  801aa8:	d8c02015 	stw	r3,128(sp)
  801aac:	dc401f15 	stw	r17,124(sp)
  801ab0:	008001c4 	movi	r2,7
  801ab4:	14416916 	blt	r2,r17,80205c <___vfprintf_internal_r+0x16d4>
  801ab8:	45800204 	addi	r22,r8,8
  801abc:	d9003617 	ldw	r4,216(sp)
  801ac0:	d9403817 	ldw	r5,224(sp)
  801ac4:	000d883a 	mov	r6,zero
  801ac8:	000f883a 	mov	r7,zero
  801acc:	d8c03c15 	stw	r3,240(sp)
  801ad0:	080c0c80 	call	80c0c8 <__eqdf2>
  801ad4:	d8c03c17 	ldw	r3,240(sp)
  801ad8:	1000bc26 	beq	r2,zero,801dcc <___vfprintf_internal_r+0x1444>
  801adc:	d9403317 	ldw	r5,204(sp)
  801ae0:	84000044 	addi	r16,r16,1
  801ae4:	8c400044 	addi	r17,r17,1
  801ae8:	28bfffc4 	addi	r2,r5,-1
  801aec:	1887883a 	add	r3,r3,r2
  801af0:	b0800115 	stw	r2,4(r22)
  801af4:	b4000015 	stw	r16,0(r22)
  801af8:	d8c02015 	stw	r3,128(sp)
  801afc:	dc401f15 	stw	r17,124(sp)
  801b00:	008001c4 	movi	r2,7
  801b04:	14414316 	blt	r2,r17,802014 <___vfprintf_internal_r+0x168c>
  801b08:	b5800204 	addi	r22,r22,8
  801b0c:	d9003a17 	ldw	r4,232(sp)
  801b10:	df0022c4 	addi	fp,sp,139
  801b14:	8c400044 	addi	r17,r17,1
  801b18:	20c7883a 	add	r3,r4,r3
  801b1c:	b7000015 	stw	fp,0(r22)
  801b20:	b1000115 	stw	r4,4(r22)
  801b24:	d8c02015 	stw	r3,128(sp)
  801b28:	dc401f15 	stw	r17,124(sp)
  801b2c:	008001c4 	movi	r2,7
  801b30:	14400e16 	blt	r2,r17,801b6c <___vfprintf_internal_r+0x11e4>
  801b34:	b2000204 	addi	r8,r22,8
  801b38:	003e1806 	br	80139c <__alt_data_end+0xff80139c>
  801b3c:	01002074 	movhi	r4,129
  801b40:	21036a84 	addi	r4,r4,3498
  801b44:	d9002c15 	stw	r4,176(sp)
  801b48:	d9002c17 	ldw	r4,176(sp)
  801b4c:	1c07883a 	add	r3,r3,r16
  801b50:	44000115 	stw	r16,4(r8)
  801b54:	41000015 	stw	r4,0(r8)
  801b58:	10800044 	addi	r2,r2,1
  801b5c:	d8c02015 	stw	r3,128(sp)
  801b60:	d8801f15 	stw	r2,124(sp)
  801b64:	010001c4 	movi	r4,7
  801b68:	20be0b0e 	bge	r4,r2,801398 <__alt_data_end+0xff801398>
  801b6c:	d9002d17 	ldw	r4,180(sp)
  801b70:	d9801e04 	addi	r6,sp,120
  801b74:	b80b883a 	mov	r5,r23
  801b78:	08081680 	call	808168 <__sprint_r>
  801b7c:	103c861e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801b80:	d8c02017 	ldw	r3,128(sp)
  801b84:	da000404 	addi	r8,sp,16
  801b88:	003e0406 	br	80139c <__alt_data_end+0xff80139c>
  801b8c:	d9002d17 	ldw	r4,180(sp)
  801b90:	d9801e04 	addi	r6,sp,120
  801b94:	b80b883a 	mov	r5,r23
  801b98:	08081680 	call	808168 <__sprint_r>
  801b9c:	103e3b26 	beq	r2,zero,80148c <__alt_data_end+0xff80148c>
  801ba0:	003c7d06 	br	800d98 <__alt_data_end+0xff800d98>
  801ba4:	d9002d17 	ldw	r4,180(sp)
  801ba8:	d9801e04 	addi	r6,sp,120
  801bac:	b80b883a 	mov	r5,r23
  801bb0:	08081680 	call	808168 <__sprint_r>
  801bb4:	103c781e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801bb8:	d8c02017 	ldw	r3,128(sp)
  801bbc:	da000404 	addi	r8,sp,16
  801bc0:	003de906 	br	801368 <__alt_data_end+0xff801368>
  801bc4:	d9002d17 	ldw	r4,180(sp)
  801bc8:	d9801e04 	addi	r6,sp,120
  801bcc:	b80b883a 	mov	r5,r23
  801bd0:	08081680 	call	808168 <__sprint_r>
  801bd4:	103c701e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801bd8:	d8c02017 	ldw	r3,128(sp)
  801bdc:	da000404 	addi	r8,sp,16
  801be0:	003d9b06 	br	801250 <__alt_data_end+0xff801250>
  801be4:	d9002d17 	ldw	r4,180(sp)
  801be8:	d9801e04 	addi	r6,sp,120
  801bec:	b80b883a 	mov	r5,r23
  801bf0:	08081680 	call	808168 <__sprint_r>
  801bf4:	103c681e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801bf8:	d8c02017 	ldw	r3,128(sp)
  801bfc:	da000404 	addi	r8,sp,16
  801c00:	003da106 	br	801288 <__alt_data_end+0xff801288>
  801c04:	d9402a17 	ldw	r5,168(sp)
  801c08:	d8002785 	stb	zero,158(sp)
  801c0c:	283f0616 	blt	r5,zero,801828 <__alt_data_end+0xff801828>
  801c10:	00ffdfc4 	movi	r3,-129
  801c14:	9d84b03a 	or	r2,r19,r22
  801c18:	90e4703a 	and	r18,r18,r3
  801c1c:	103c3b26 	beq	r2,zero,800d0c <__alt_data_end+0xff800d0c>
  801c20:	0039883a 	mov	fp,zero
  801c24:	003e5806 	br	801588 <__alt_data_end+0xff801588>
  801c28:	9080040c 	andi	r2,r18,16
  801c2c:	1001b326 	beq	r2,zero,8022fc <___vfprintf_internal_r+0x1974>
  801c30:	d8c02e17 	ldw	r3,184(sp)
  801c34:	d9002a17 	ldw	r4,168(sp)
  801c38:	d8002785 	stb	zero,158(sp)
  801c3c:	18800104 	addi	r2,r3,4
  801c40:	1cc00017 	ldw	r19,0(r3)
  801c44:	002d883a 	mov	r22,zero
  801c48:	2001b516 	blt	r4,zero,802320 <___vfprintf_internal_r+0x1998>
  801c4c:	00ffdfc4 	movi	r3,-129
  801c50:	d8802e15 	stw	r2,184(sp)
  801c54:	90e4703a 	and	r18,r18,r3
  801c58:	983d0526 	beq	r19,zero,801070 <__alt_data_end+0xff801070>
  801c5c:	0039883a 	mov	fp,zero
  801c60:	003d0806 	br	801084 <__alt_data_end+0xff801084>
  801c64:	dc402617 	ldw	r17,152(sp)
  801c68:	0441d30e 	bge	zero,r17,8023b8 <___vfprintf_internal_r+0x1a30>
  801c6c:	dc403217 	ldw	r17,200(sp)
  801c70:	d8803317 	ldw	r2,204(sp)
  801c74:	1440010e 	bge	r2,r17,801c7c <___vfprintf_internal_r+0x12f4>
  801c78:	1023883a 	mov	r17,r2
  801c7c:	04400a0e 	bge	zero,r17,801ca8 <___vfprintf_internal_r+0x1320>
  801c80:	d8801f17 	ldw	r2,124(sp)
  801c84:	1c47883a 	add	r3,r3,r17
  801c88:	44000015 	stw	r16,0(r8)
  801c8c:	10800044 	addi	r2,r2,1
  801c90:	44400115 	stw	r17,4(r8)
  801c94:	d8c02015 	stw	r3,128(sp)
  801c98:	d8801f15 	stw	r2,124(sp)
  801c9c:	010001c4 	movi	r4,7
  801ca0:	20826516 	blt	r4,r2,802638 <___vfprintf_internal_r+0x1cb0>
  801ca4:	42000204 	addi	r8,r8,8
  801ca8:	88026116 	blt	r17,zero,802630 <___vfprintf_internal_r+0x1ca8>
  801cac:	d9003217 	ldw	r4,200(sp)
  801cb0:	2463c83a 	sub	r17,r4,r17
  801cb4:	04407b0e 	bge	zero,r17,801ea4 <___vfprintf_internal_r+0x151c>
  801cb8:	05800404 	movi	r22,16
  801cbc:	d8801f17 	ldw	r2,124(sp)
  801cc0:	b4419d0e 	bge	r22,r17,802338 <___vfprintf_internal_r+0x19b0>
  801cc4:	01002074 	movhi	r4,129
  801cc8:	21036a84 	addi	r4,r4,3498
  801ccc:	d9002c15 	stw	r4,176(sp)
  801cd0:	070001c4 	movi	fp,7
  801cd4:	dcc02d17 	ldw	r19,180(sp)
  801cd8:	00000306 	br	801ce8 <___vfprintf_internal_r+0x1360>
  801cdc:	42000204 	addi	r8,r8,8
  801ce0:	8c7ffc04 	addi	r17,r17,-16
  801ce4:	b441970e 	bge	r22,r17,802344 <___vfprintf_internal_r+0x19bc>
  801ce8:	18c00404 	addi	r3,r3,16
  801cec:	10800044 	addi	r2,r2,1
  801cf0:	45000015 	stw	r20,0(r8)
  801cf4:	45800115 	stw	r22,4(r8)
  801cf8:	d8c02015 	stw	r3,128(sp)
  801cfc:	d8801f15 	stw	r2,124(sp)
  801d00:	e0bff60e 	bge	fp,r2,801cdc <__alt_data_end+0xff801cdc>
  801d04:	d9801e04 	addi	r6,sp,120
  801d08:	b80b883a 	mov	r5,r23
  801d0c:	9809883a 	mov	r4,r19
  801d10:	08081680 	call	808168 <__sprint_r>
  801d14:	103c201e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801d18:	d8c02017 	ldw	r3,128(sp)
  801d1c:	d8801f17 	ldw	r2,124(sp)
  801d20:	da000404 	addi	r8,sp,16
  801d24:	003fee06 	br	801ce0 <__alt_data_end+0xff801ce0>
  801d28:	d9002d17 	ldw	r4,180(sp)
  801d2c:	d9801e04 	addi	r6,sp,120
  801d30:	b80b883a 	mov	r5,r23
  801d34:	08081680 	call	808168 <__sprint_r>
  801d38:	103c171e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801d3c:	d8c02017 	ldw	r3,128(sp)
  801d40:	df002787 	ldb	fp,158(sp)
  801d44:	da000404 	addi	r8,sp,16
  801d48:	003d3406 	br	80121c <__alt_data_end+0xff80121c>
  801d4c:	9080040c 	andi	r2,r18,16
  801d50:	10016126 	beq	r2,zero,8022d8 <___vfprintf_internal_r+0x1950>
  801d54:	d9402e17 	ldw	r5,184(sp)
  801d58:	2cc00017 	ldw	r19,0(r5)
  801d5c:	29400104 	addi	r5,r5,4
  801d60:	d9402e15 	stw	r5,184(sp)
  801d64:	982dd7fa 	srai	r22,r19,31
  801d68:	b005883a 	mov	r2,r22
  801d6c:	003c5a06 	br	800ed8 <__alt_data_end+0xff800ed8>
  801d70:	9080040c 	andi	r2,r18,16
  801d74:	10003526 	beq	r2,zero,801e4c <___vfprintf_internal_r+0x14c4>
  801d78:	d8c02e17 	ldw	r3,184(sp)
  801d7c:	d9002a17 	ldw	r4,168(sp)
  801d80:	d8002785 	stb	zero,158(sp)
  801d84:	18800104 	addi	r2,r3,4
  801d88:	1cc00017 	ldw	r19,0(r3)
  801d8c:	002d883a 	mov	r22,zero
  801d90:	20003716 	blt	r4,zero,801e70 <___vfprintf_internal_r+0x14e8>
  801d94:	00ffdfc4 	movi	r3,-129
  801d98:	d8802e15 	stw	r2,184(sp)
  801d9c:	90e4703a 	and	r18,r18,r3
  801da0:	0039883a 	mov	fp,zero
  801da4:	983dd426 	beq	r19,zero,8014f8 <__alt_data_end+0xff8014f8>
  801da8:	00800244 	movi	r2,9
  801dac:	14fc5336 	bltu	r2,r19,800efc <__alt_data_end+0xff800efc>
  801db0:	d8c02817 	ldw	r3,160(sp)
  801db4:	dc001dc4 	addi	r16,sp,119
  801db8:	9cc00c04 	addi	r19,r19,48
  801dbc:	1c07c83a 	sub	r3,r3,r16
  801dc0:	dcc01dc5 	stb	r19,119(sp)
  801dc4:	d8c02b15 	stw	r3,172(sp)
  801dc8:	003cc606 	br	8010e4 <__alt_data_end+0xff8010e4>
  801dcc:	d8803317 	ldw	r2,204(sp)
  801dd0:	143fffc4 	addi	r16,r2,-1
  801dd4:	043f4d0e 	bge	zero,r16,801b0c <__alt_data_end+0xff801b0c>
  801dd8:	07000404 	movi	fp,16
  801ddc:	e400810e 	bge	fp,r16,801fe4 <___vfprintf_internal_r+0x165c>
  801de0:	01402074 	movhi	r5,129
  801de4:	29436a84 	addi	r5,r5,3498
  801de8:	d9402c15 	stw	r5,176(sp)
  801dec:	01c001c4 	movi	r7,7
  801df0:	dcc02d17 	ldw	r19,180(sp)
  801df4:	00000306 	br	801e04 <___vfprintf_internal_r+0x147c>
  801df8:	b5800204 	addi	r22,r22,8
  801dfc:	843ffc04 	addi	r16,r16,-16
  801e00:	e4007b0e 	bge	fp,r16,801ff0 <___vfprintf_internal_r+0x1668>
  801e04:	18c00404 	addi	r3,r3,16
  801e08:	8c400044 	addi	r17,r17,1
  801e0c:	b5000015 	stw	r20,0(r22)
  801e10:	b7000115 	stw	fp,4(r22)
  801e14:	d8c02015 	stw	r3,128(sp)
  801e18:	dc401f15 	stw	r17,124(sp)
  801e1c:	3c7ff60e 	bge	r7,r17,801df8 <__alt_data_end+0xff801df8>
  801e20:	d9801e04 	addi	r6,sp,120
  801e24:	b80b883a 	mov	r5,r23
  801e28:	9809883a 	mov	r4,r19
  801e2c:	d9c03c15 	stw	r7,240(sp)
  801e30:	08081680 	call	808168 <__sprint_r>
  801e34:	d9c03c17 	ldw	r7,240(sp)
  801e38:	103bd71e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801e3c:	d8c02017 	ldw	r3,128(sp)
  801e40:	dc401f17 	ldw	r17,124(sp)
  801e44:	dd800404 	addi	r22,sp,16
  801e48:	003fec06 	br	801dfc <__alt_data_end+0xff801dfc>
  801e4c:	9080100c 	andi	r2,r18,64
  801e50:	d8002785 	stb	zero,158(sp)
  801e54:	10010e26 	beq	r2,zero,802290 <___vfprintf_internal_r+0x1908>
  801e58:	d9402e17 	ldw	r5,184(sp)
  801e5c:	d8c02a17 	ldw	r3,168(sp)
  801e60:	002d883a 	mov	r22,zero
  801e64:	28800104 	addi	r2,r5,4
  801e68:	2cc0000b 	ldhu	r19,0(r5)
  801e6c:	183fc90e 	bge	r3,zero,801d94 <__alt_data_end+0xff801d94>
  801e70:	d8802e15 	stw	r2,184(sp)
  801e74:	0039883a 	mov	fp,zero
  801e78:	9d84b03a 	or	r2,r19,r22
  801e7c:	103c1e1e 	bne	r2,zero,800ef8 <__alt_data_end+0xff800ef8>
  801e80:	00800044 	movi	r2,1
  801e84:	003e6c06 	br	801838 <__alt_data_end+0xff801838>
  801e88:	d9002d17 	ldw	r4,180(sp)
  801e8c:	d9801e04 	addi	r6,sp,120
  801e90:	b80b883a 	mov	r5,r23
  801e94:	08081680 	call	808168 <__sprint_r>
  801e98:	103bbf1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801e9c:	d8c02017 	ldw	r3,128(sp)
  801ea0:	da000404 	addi	r8,sp,16
  801ea4:	d9003217 	ldw	r4,200(sp)
  801ea8:	d8802617 	ldw	r2,152(sp)
  801eac:	d9403317 	ldw	r5,204(sp)
  801eb0:	8123883a 	add	r17,r16,r4
  801eb4:	11400216 	blt	r2,r5,801ec0 <___vfprintf_internal_r+0x1538>
  801eb8:	9100004c 	andi	r4,r18,1
  801ebc:	20000d26 	beq	r4,zero,801ef4 <___vfprintf_internal_r+0x156c>
  801ec0:	d9003717 	ldw	r4,220(sp)
  801ec4:	d9403417 	ldw	r5,208(sp)
  801ec8:	1907883a 	add	r3,r3,r4
  801ecc:	d9001f17 	ldw	r4,124(sp)
  801ed0:	41400015 	stw	r5,0(r8)
  801ed4:	d9403717 	ldw	r5,220(sp)
  801ed8:	21000044 	addi	r4,r4,1
  801edc:	d8c02015 	stw	r3,128(sp)
  801ee0:	41400115 	stw	r5,4(r8)
  801ee4:	d9001f15 	stw	r4,124(sp)
  801ee8:	014001c4 	movi	r5,7
  801eec:	2901e816 	blt	r5,r4,802690 <___vfprintf_internal_r+0x1d08>
  801ef0:	42000204 	addi	r8,r8,8
  801ef4:	d9003317 	ldw	r4,204(sp)
  801ef8:	8121883a 	add	r16,r16,r4
  801efc:	2085c83a 	sub	r2,r4,r2
  801f00:	8461c83a 	sub	r16,r16,r17
  801f04:	1400010e 	bge	r2,r16,801f0c <___vfprintf_internal_r+0x1584>
  801f08:	1021883a 	mov	r16,r2
  801f0c:	04000a0e 	bge	zero,r16,801f38 <___vfprintf_internal_r+0x15b0>
  801f10:	d9001f17 	ldw	r4,124(sp)
  801f14:	1c07883a 	add	r3,r3,r16
  801f18:	44400015 	stw	r17,0(r8)
  801f1c:	21000044 	addi	r4,r4,1
  801f20:	44000115 	stw	r16,4(r8)
  801f24:	d8c02015 	stw	r3,128(sp)
  801f28:	d9001f15 	stw	r4,124(sp)
  801f2c:	014001c4 	movi	r5,7
  801f30:	2901fb16 	blt	r5,r4,802720 <___vfprintf_internal_r+0x1d98>
  801f34:	42000204 	addi	r8,r8,8
  801f38:	8001f716 	blt	r16,zero,802718 <___vfprintf_internal_r+0x1d90>
  801f3c:	1421c83a 	sub	r16,r2,r16
  801f40:	043d160e 	bge	zero,r16,80139c <__alt_data_end+0xff80139c>
  801f44:	04400404 	movi	r17,16
  801f48:	d8801f17 	ldw	r2,124(sp)
  801f4c:	8c3efb0e 	bge	r17,r16,801b3c <__alt_data_end+0xff801b3c>
  801f50:	01402074 	movhi	r5,129
  801f54:	29436a84 	addi	r5,r5,3498
  801f58:	d9402c15 	stw	r5,176(sp)
  801f5c:	058001c4 	movi	r22,7
  801f60:	dcc02d17 	ldw	r19,180(sp)
  801f64:	00000306 	br	801f74 <___vfprintf_internal_r+0x15ec>
  801f68:	42000204 	addi	r8,r8,8
  801f6c:	843ffc04 	addi	r16,r16,-16
  801f70:	8c3ef50e 	bge	r17,r16,801b48 <__alt_data_end+0xff801b48>
  801f74:	18c00404 	addi	r3,r3,16
  801f78:	10800044 	addi	r2,r2,1
  801f7c:	45000015 	stw	r20,0(r8)
  801f80:	44400115 	stw	r17,4(r8)
  801f84:	d8c02015 	stw	r3,128(sp)
  801f88:	d8801f15 	stw	r2,124(sp)
  801f8c:	b0bff60e 	bge	r22,r2,801f68 <__alt_data_end+0xff801f68>
  801f90:	d9801e04 	addi	r6,sp,120
  801f94:	b80b883a 	mov	r5,r23
  801f98:	9809883a 	mov	r4,r19
  801f9c:	08081680 	call	808168 <__sprint_r>
  801fa0:	103b7d1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  801fa4:	d8c02017 	ldw	r3,128(sp)
  801fa8:	d8801f17 	ldw	r2,124(sp)
  801fac:	da000404 	addi	r8,sp,16
  801fb0:	003fee06 	br	801f6c <__alt_data_end+0xff801f6c>
  801fb4:	9088703a 	and	r4,r18,r2
  801fb8:	203eab1e 	bne	r4,zero,801a68 <__alt_data_end+0xff801a68>
  801fbc:	dc401f17 	ldw	r17,124(sp)
  801fc0:	40800115 	stw	r2,4(r8)
  801fc4:	44000015 	stw	r16,0(r8)
  801fc8:	8c400044 	addi	r17,r17,1
  801fcc:	d8c02015 	stw	r3,128(sp)
  801fd0:	dc401f15 	stw	r17,124(sp)
  801fd4:	008001c4 	movi	r2,7
  801fd8:	14400e16 	blt	r2,r17,802014 <___vfprintf_internal_r+0x168c>
  801fdc:	45800204 	addi	r22,r8,8
  801fe0:	003eca06 	br	801b0c <__alt_data_end+0xff801b0c>
  801fe4:	01002074 	movhi	r4,129
  801fe8:	21036a84 	addi	r4,r4,3498
  801fec:	d9002c15 	stw	r4,176(sp)
  801ff0:	d8802c17 	ldw	r2,176(sp)
  801ff4:	1c07883a 	add	r3,r3,r16
  801ff8:	8c400044 	addi	r17,r17,1
  801ffc:	b0800015 	stw	r2,0(r22)
  802000:	b4000115 	stw	r16,4(r22)
  802004:	d8c02015 	stw	r3,128(sp)
  802008:	dc401f15 	stw	r17,124(sp)
  80200c:	008001c4 	movi	r2,7
  802010:	147ebd0e 	bge	r2,r17,801b08 <__alt_data_end+0xff801b08>
  802014:	d9002d17 	ldw	r4,180(sp)
  802018:	d9801e04 	addi	r6,sp,120
  80201c:	b80b883a 	mov	r5,r23
  802020:	08081680 	call	808168 <__sprint_r>
  802024:	103b5c1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  802028:	d8c02017 	ldw	r3,128(sp)
  80202c:	dc401f17 	ldw	r17,124(sp)
  802030:	dd800404 	addi	r22,sp,16
  802034:	003eb506 	br	801b0c <__alt_data_end+0xff801b0c>
  802038:	d9002d17 	ldw	r4,180(sp)
  80203c:	d9801e04 	addi	r6,sp,120
  802040:	b80b883a 	mov	r5,r23
  802044:	08081680 	call	808168 <__sprint_r>
  802048:	103b531e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  80204c:	d8c02017 	ldw	r3,128(sp)
  802050:	dc401f17 	ldw	r17,124(sp)
  802054:	da000404 	addi	r8,sp,16
  802058:	003e8d06 	br	801a90 <__alt_data_end+0xff801a90>
  80205c:	d9002d17 	ldw	r4,180(sp)
  802060:	d9801e04 	addi	r6,sp,120
  802064:	b80b883a 	mov	r5,r23
  802068:	08081680 	call	808168 <__sprint_r>
  80206c:	103b4a1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  802070:	d8c02017 	ldw	r3,128(sp)
  802074:	dc401f17 	ldw	r17,124(sp)
  802078:	dd800404 	addi	r22,sp,16
  80207c:	003e8f06 	br	801abc <__alt_data_end+0xff801abc>
  802080:	0027883a 	mov	r19,zero
  802084:	003f4a06 	br	801db0 <__alt_data_end+0xff801db0>
  802088:	d9002d17 	ldw	r4,180(sp)
  80208c:	d9801e04 	addi	r6,sp,120
  802090:	b80b883a 	mov	r5,r23
  802094:	08081680 	call	808168 <__sprint_r>
  802098:	103b3f1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  80209c:	d8c02017 	ldw	r3,128(sp)
  8020a0:	da000404 	addi	r8,sp,16
  8020a4:	003c7b06 	br	801294 <__alt_data_end+0xff801294>
  8020a8:	d9402a17 	ldw	r5,168(sp)
  8020ac:	04e7c83a 	sub	r19,zero,r19
  8020b0:	07000b44 	movi	fp,45
  8020b4:	9804c03a 	cmpne	r2,r19,zero
  8020b8:	05adc83a 	sub	r22,zero,r22
  8020bc:	df002785 	stb	fp,158(sp)
  8020c0:	b0adc83a 	sub	r22,r22,r2
  8020c4:	28017b16 	blt	r5,zero,8026b4 <___vfprintf_internal_r+0x1d2c>
  8020c8:	00bfdfc4 	movi	r2,-129
  8020cc:	90a4703a 	and	r18,r18,r2
  8020d0:	003b8906 	br	800ef8 <__alt_data_end+0xff800ef8>
  8020d4:	d9003617 	ldw	r4,216(sp)
  8020d8:	d9403817 	ldw	r5,224(sp)
  8020dc:	da003d15 	stw	r8,244(sp)
  8020e0:	0807d8c0 	call	807d8c <__fpclassifyd>
  8020e4:	da003d17 	ldw	r8,244(sp)
  8020e8:	1000f026 	beq	r2,zero,8024ac <___vfprintf_internal_r+0x1b24>
  8020ec:	d9002a17 	ldw	r4,168(sp)
  8020f0:	05bff7c4 	movi	r22,-33
  8020f4:	00bfffc4 	movi	r2,-1
  8020f8:	8dac703a 	and	r22,r17,r22
  8020fc:	20820026 	beq	r4,r2,802900 <___vfprintf_internal_r+0x1f78>
  802100:	008011c4 	movi	r2,71
  802104:	b081f726 	beq	r22,r2,8028e4 <___vfprintf_internal_r+0x1f5c>
  802108:	d9003817 	ldw	r4,224(sp)
  80210c:	90c04014 	ori	r3,r18,256
  802110:	d8c02c15 	stw	r3,176(sp)
  802114:	20021516 	blt	r4,zero,80296c <___vfprintf_internal_r+0x1fe4>
  802118:	dcc03817 	ldw	r19,224(sp)
  80211c:	d8002905 	stb	zero,164(sp)
  802120:	00801984 	movi	r2,102
  802124:	8881f926 	beq	r17,r2,80290c <___vfprintf_internal_r+0x1f84>
  802128:	00801184 	movi	r2,70
  80212c:	88821c26 	beq	r17,r2,8029a0 <___vfprintf_internal_r+0x2018>
  802130:	00801144 	movi	r2,69
  802134:	b081ef26 	beq	r22,r2,8028f4 <___vfprintf_internal_r+0x1f6c>
  802138:	d8c02a17 	ldw	r3,168(sp)
  80213c:	d8802104 	addi	r2,sp,132
  802140:	d8800315 	stw	r2,12(sp)
  802144:	d9403617 	ldw	r5,216(sp)
  802148:	d8802504 	addi	r2,sp,148
  80214c:	d9002d17 	ldw	r4,180(sp)
  802150:	d8800215 	stw	r2,8(sp)
  802154:	d8802604 	addi	r2,sp,152
  802158:	d8c00015 	stw	r3,0(sp)
  80215c:	d8800115 	stw	r2,4(sp)
  802160:	01c00084 	movi	r7,2
  802164:	980d883a 	mov	r6,r19
  802168:	d8c03c15 	stw	r3,240(sp)
  80216c:	da003d15 	stw	r8,244(sp)
  802170:	08030b80 	call	8030b8 <_dtoa_r>
  802174:	1021883a 	mov	r16,r2
  802178:	008019c4 	movi	r2,103
  80217c:	d8c03c17 	ldw	r3,240(sp)
  802180:	da003d17 	ldw	r8,244(sp)
  802184:	88817126 	beq	r17,r2,80274c <___vfprintf_internal_r+0x1dc4>
  802188:	008011c4 	movi	r2,71
  80218c:	88829126 	beq	r17,r2,802bd4 <___vfprintf_internal_r+0x224c>
  802190:	80f9883a 	add	fp,r16,r3
  802194:	d9003617 	ldw	r4,216(sp)
  802198:	000d883a 	mov	r6,zero
  80219c:	000f883a 	mov	r7,zero
  8021a0:	980b883a 	mov	r5,r19
  8021a4:	da003d15 	stw	r8,244(sp)
  8021a8:	080c0c80 	call	80c0c8 <__eqdf2>
  8021ac:	da003d17 	ldw	r8,244(sp)
  8021b0:	10018d26 	beq	r2,zero,8027e8 <___vfprintf_internal_r+0x1e60>
  8021b4:	d8802117 	ldw	r2,132(sp)
  8021b8:	1700062e 	bgeu	r2,fp,8021d4 <___vfprintf_internal_r+0x184c>
  8021bc:	01000c04 	movi	r4,48
  8021c0:	10c00044 	addi	r3,r2,1
  8021c4:	d8c02115 	stw	r3,132(sp)
  8021c8:	11000005 	stb	r4,0(r2)
  8021cc:	d8802117 	ldw	r2,132(sp)
  8021d0:	173ffb36 	bltu	r2,fp,8021c0 <__alt_data_end+0xff8021c0>
  8021d4:	1405c83a 	sub	r2,r2,r16
  8021d8:	d8803315 	stw	r2,204(sp)
  8021dc:	008011c4 	movi	r2,71
  8021e0:	b0817626 	beq	r22,r2,8027bc <___vfprintf_internal_r+0x1e34>
  8021e4:	00801944 	movi	r2,101
  8021e8:	1442800e 	bge	r2,r17,802bec <___vfprintf_internal_r+0x2264>
  8021ec:	d8c02617 	ldw	r3,152(sp)
  8021f0:	00801984 	movi	r2,102
  8021f4:	d8c03215 	stw	r3,200(sp)
  8021f8:	8881fe26 	beq	r17,r2,8029f4 <___vfprintf_internal_r+0x206c>
  8021fc:	d8c03217 	ldw	r3,200(sp)
  802200:	d9003317 	ldw	r4,204(sp)
  802204:	1901dd16 	blt	r3,r4,80297c <___vfprintf_internal_r+0x1ff4>
  802208:	9480004c 	andi	r18,r18,1
  80220c:	90022b1e 	bne	r18,zero,802abc <___vfprintf_internal_r+0x2134>
  802210:	1805883a 	mov	r2,r3
  802214:	18028316 	blt	r3,zero,802c24 <___vfprintf_internal_r+0x229c>
  802218:	d8c03217 	ldw	r3,200(sp)
  80221c:	044019c4 	movi	r17,103
  802220:	d8c02b15 	stw	r3,172(sp)
  802224:	df002907 	ldb	fp,164(sp)
  802228:	e001531e 	bne	fp,zero,802778 <___vfprintf_internal_r+0x1df0>
  80222c:	df002783 	ldbu	fp,158(sp)
  802230:	d8802915 	stw	r2,164(sp)
  802234:	dc802c17 	ldw	r18,176(sp)
  802238:	d8002a15 	stw	zero,168(sp)
  80223c:	003baf06 	br	8010fc <__alt_data_end+0xff8010fc>
  802240:	d8c02e17 	ldw	r3,184(sp)
  802244:	d9002e17 	ldw	r4,184(sp)
  802248:	d9402e17 	ldw	r5,184(sp)
  80224c:	18c00017 	ldw	r3,0(r3)
  802250:	21000117 	ldw	r4,4(r4)
  802254:	29400204 	addi	r5,r5,8
  802258:	d8c03615 	stw	r3,216(sp)
  80225c:	d9003815 	stw	r4,224(sp)
  802260:	d9402e15 	stw	r5,184(sp)
  802264:	003b5006 	br	800fa8 <__alt_data_end+0xff800fa8>
  802268:	ac400007 	ldb	r17,0(r21)
  80226c:	003a2806 	br	800b10 <__alt_data_end+0xff800b10>
  802270:	9080100c 	andi	r2,r18,64
  802274:	1000a826 	beq	r2,zero,802518 <___vfprintf_internal_r+0x1b90>
  802278:	d8c02e17 	ldw	r3,184(sp)
  80227c:	002d883a 	mov	r22,zero
  802280:	1cc0000b 	ldhu	r19,0(r3)
  802284:	18c00104 	addi	r3,r3,4
  802288:	d8c02e15 	stw	r3,184(sp)
  80228c:	003caf06 	br	80154c <__alt_data_end+0xff80154c>
  802290:	d9002e17 	ldw	r4,184(sp)
  802294:	d9402a17 	ldw	r5,168(sp)
  802298:	002d883a 	mov	r22,zero
  80229c:	20800104 	addi	r2,r4,4
  8022a0:	24c00017 	ldw	r19,0(r4)
  8022a4:	283ebb0e 	bge	r5,zero,801d94 <__alt_data_end+0xff801d94>
  8022a8:	003ef106 	br	801e70 <__alt_data_end+0xff801e70>
  8022ac:	9080040c 	andi	r2,r18,16
  8022b0:	1000921e 	bne	r2,zero,8024fc <___vfprintf_internal_r+0x1b74>
  8022b4:	9480100c 	andi	r18,r18,64
  8022b8:	90013926 	beq	r18,zero,8027a0 <___vfprintf_internal_r+0x1e18>
  8022bc:	d9402e17 	ldw	r5,184(sp)
  8022c0:	d8c02f17 	ldw	r3,188(sp)
  8022c4:	28800017 	ldw	r2,0(r5)
  8022c8:	29400104 	addi	r5,r5,4
  8022cc:	d9402e15 	stw	r5,184(sp)
  8022d0:	10c0000d 	sth	r3,0(r2)
  8022d4:	0039e406 	br	800a68 <__alt_data_end+0xff800a68>
  8022d8:	9080100c 	andi	r2,r18,64
  8022dc:	10008026 	beq	r2,zero,8024e0 <___vfprintf_internal_r+0x1b58>
  8022e0:	d8802e17 	ldw	r2,184(sp)
  8022e4:	14c0000f 	ldh	r19,0(r2)
  8022e8:	10800104 	addi	r2,r2,4
  8022ec:	d8802e15 	stw	r2,184(sp)
  8022f0:	982dd7fa 	srai	r22,r19,31
  8022f4:	b005883a 	mov	r2,r22
  8022f8:	003af706 	br	800ed8 <__alt_data_end+0xff800ed8>
  8022fc:	9080100c 	andi	r2,r18,64
  802300:	d8002785 	stb	zero,158(sp)
  802304:	10008a1e 	bne	r2,zero,802530 <___vfprintf_internal_r+0x1ba8>
  802308:	d9002e17 	ldw	r4,184(sp)
  80230c:	d9402a17 	ldw	r5,168(sp)
  802310:	002d883a 	mov	r22,zero
  802314:	20800104 	addi	r2,r4,4
  802318:	24c00017 	ldw	r19,0(r4)
  80231c:	283e4b0e 	bge	r5,zero,801c4c <__alt_data_end+0xff801c4c>
  802320:	9d86b03a 	or	r3,r19,r22
  802324:	d8802e15 	stw	r2,184(sp)
  802328:	183e4c1e 	bne	r3,zero,801c5c <__alt_data_end+0xff801c5c>
  80232c:	0039883a 	mov	fp,zero
  802330:	0005883a 	mov	r2,zero
  802334:	003d4006 	br	801838 <__alt_data_end+0xff801838>
  802338:	01402074 	movhi	r5,129
  80233c:	29436a84 	addi	r5,r5,3498
  802340:	d9402c15 	stw	r5,176(sp)
  802344:	d9402c17 	ldw	r5,176(sp)
  802348:	1c47883a 	add	r3,r3,r17
  80234c:	10800044 	addi	r2,r2,1
  802350:	41400015 	stw	r5,0(r8)
  802354:	44400115 	stw	r17,4(r8)
  802358:	d8c02015 	stw	r3,128(sp)
  80235c:	d8801f15 	stw	r2,124(sp)
  802360:	010001c4 	movi	r4,7
  802364:	20bec816 	blt	r4,r2,801e88 <__alt_data_end+0xff801e88>
  802368:	42000204 	addi	r8,r8,8
  80236c:	003ecd06 	br	801ea4 <__alt_data_end+0xff801ea4>
  802370:	d9002a17 	ldw	r4,168(sp)
  802374:	d8002785 	stb	zero,158(sp)
  802378:	203d2d16 	blt	r4,zero,801830 <__alt_data_end+0xff801830>
  80237c:	00bfdfc4 	movi	r2,-129
  802380:	90a4703a 	and	r18,r18,r2
  802384:	003a6106 	br	800d0c <__alt_data_end+0xff800d0c>
  802388:	01002074 	movhi	r4,129
  80238c:	21036a84 	addi	r4,r4,3498
  802390:	d9002c15 	stw	r4,176(sp)
  802394:	003bea06 	br	801340 <__alt_data_end+0xff801340>
  802398:	d9002d17 	ldw	r4,180(sp)
  80239c:	d9801e04 	addi	r6,sp,120
  8023a0:	b80b883a 	mov	r5,r23
  8023a4:	08081680 	call	808168 <__sprint_r>
  8023a8:	103a7b1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  8023ac:	d8c02017 	ldw	r3,128(sp)
  8023b0:	da000404 	addi	r8,sp,16
  8023b4:	003d4106 	br	8018bc <__alt_data_end+0xff8018bc>
  8023b8:	d8801f17 	ldw	r2,124(sp)
  8023bc:	01402074 	movhi	r5,129
  8023c0:	01000044 	movi	r4,1
  8023c4:	18c00044 	addi	r3,r3,1
  8023c8:	10800044 	addi	r2,r2,1
  8023cc:	29436a04 	addi	r5,r5,3496
  8023d0:	41000115 	stw	r4,4(r8)
  8023d4:	41400015 	stw	r5,0(r8)
  8023d8:	d8c02015 	stw	r3,128(sp)
  8023dc:	d8801f15 	stw	r2,124(sp)
  8023e0:	010001c4 	movi	r4,7
  8023e4:	20805c16 	blt	r4,r2,802558 <___vfprintf_internal_r+0x1bd0>
  8023e8:	42000204 	addi	r8,r8,8
  8023ec:	8800041e 	bne	r17,zero,802400 <___vfprintf_internal_r+0x1a78>
  8023f0:	d8803317 	ldw	r2,204(sp)
  8023f4:	1000021e 	bne	r2,zero,802400 <___vfprintf_internal_r+0x1a78>
  8023f8:	9080004c 	andi	r2,r18,1
  8023fc:	103be726 	beq	r2,zero,80139c <__alt_data_end+0xff80139c>
  802400:	d9003717 	ldw	r4,220(sp)
  802404:	d8801f17 	ldw	r2,124(sp)
  802408:	d9403417 	ldw	r5,208(sp)
  80240c:	20c7883a 	add	r3,r4,r3
  802410:	10800044 	addi	r2,r2,1
  802414:	41000115 	stw	r4,4(r8)
  802418:	41400015 	stw	r5,0(r8)
  80241c:	d8c02015 	stw	r3,128(sp)
  802420:	d8801f15 	stw	r2,124(sp)
  802424:	010001c4 	movi	r4,7
  802428:	20812116 	blt	r4,r2,8028b0 <___vfprintf_internal_r+0x1f28>
  80242c:	42000204 	addi	r8,r8,8
  802430:	0463c83a 	sub	r17,zero,r17
  802434:	0440730e 	bge	zero,r17,802604 <___vfprintf_internal_r+0x1c7c>
  802438:	05800404 	movi	r22,16
  80243c:	b440860e 	bge	r22,r17,802658 <___vfprintf_internal_r+0x1cd0>
  802440:	01402074 	movhi	r5,129
  802444:	29436a84 	addi	r5,r5,3498
  802448:	d9402c15 	stw	r5,176(sp)
  80244c:	070001c4 	movi	fp,7
  802450:	dcc02d17 	ldw	r19,180(sp)
  802454:	00000306 	br	802464 <___vfprintf_internal_r+0x1adc>
  802458:	42000204 	addi	r8,r8,8
  80245c:	8c7ffc04 	addi	r17,r17,-16
  802460:	b440800e 	bge	r22,r17,802664 <___vfprintf_internal_r+0x1cdc>
  802464:	18c00404 	addi	r3,r3,16
  802468:	10800044 	addi	r2,r2,1
  80246c:	45000015 	stw	r20,0(r8)
  802470:	45800115 	stw	r22,4(r8)
  802474:	d8c02015 	stw	r3,128(sp)
  802478:	d8801f15 	stw	r2,124(sp)
  80247c:	e0bff60e 	bge	fp,r2,802458 <__alt_data_end+0xff802458>
  802480:	d9801e04 	addi	r6,sp,120
  802484:	b80b883a 	mov	r5,r23
  802488:	9809883a 	mov	r4,r19
  80248c:	08081680 	call	808168 <__sprint_r>
  802490:	103a411e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  802494:	d8c02017 	ldw	r3,128(sp)
  802498:	d8801f17 	ldw	r2,124(sp)
  80249c:	da000404 	addi	r8,sp,16
  8024a0:	003fee06 	br	80245c <__alt_data_end+0xff80245c>
  8024a4:	00bfffc4 	movi	r2,-1
  8024a8:	003a3f06 	br	800da8 <__alt_data_end+0xff800da8>
  8024ac:	008011c4 	movi	r2,71
  8024b0:	1440b816 	blt	r2,r17,802794 <___vfprintf_internal_r+0x1e0c>
  8024b4:	04002074 	movhi	r16,129
  8024b8:	84035c04 	addi	r16,r16,3440
  8024bc:	00c000c4 	movi	r3,3
  8024c0:	00bfdfc4 	movi	r2,-129
  8024c4:	d8c02915 	stw	r3,164(sp)
  8024c8:	90a4703a 	and	r18,r18,r2
  8024cc:	df002783 	ldbu	fp,158(sp)
  8024d0:	d8c02b15 	stw	r3,172(sp)
  8024d4:	d8002a15 	stw	zero,168(sp)
  8024d8:	d8003215 	stw	zero,200(sp)
  8024dc:	003b0706 	br	8010fc <__alt_data_end+0xff8010fc>
  8024e0:	d8c02e17 	ldw	r3,184(sp)
  8024e4:	1cc00017 	ldw	r19,0(r3)
  8024e8:	18c00104 	addi	r3,r3,4
  8024ec:	d8c02e15 	stw	r3,184(sp)
  8024f0:	982dd7fa 	srai	r22,r19,31
  8024f4:	b005883a 	mov	r2,r22
  8024f8:	003a7706 	br	800ed8 <__alt_data_end+0xff800ed8>
  8024fc:	d8c02e17 	ldw	r3,184(sp)
  802500:	d9002f17 	ldw	r4,188(sp)
  802504:	18800017 	ldw	r2,0(r3)
  802508:	18c00104 	addi	r3,r3,4
  80250c:	d8c02e15 	stw	r3,184(sp)
  802510:	11000015 	stw	r4,0(r2)
  802514:	00395406 	br	800a68 <__alt_data_end+0xff800a68>
  802518:	d9002e17 	ldw	r4,184(sp)
  80251c:	002d883a 	mov	r22,zero
  802520:	24c00017 	ldw	r19,0(r4)
  802524:	21000104 	addi	r4,r4,4
  802528:	d9002e15 	stw	r4,184(sp)
  80252c:	003c0706 	br	80154c <__alt_data_end+0xff80154c>
  802530:	d9402e17 	ldw	r5,184(sp)
  802534:	d8c02a17 	ldw	r3,168(sp)
  802538:	002d883a 	mov	r22,zero
  80253c:	28800104 	addi	r2,r5,4
  802540:	2cc0000b 	ldhu	r19,0(r5)
  802544:	183dc10e 	bge	r3,zero,801c4c <__alt_data_end+0xff801c4c>
  802548:	003f7506 	br	802320 <__alt_data_end+0xff802320>
  80254c:	04002074 	movhi	r16,129
  802550:	84035a04 	addi	r16,r16,3432
  802554:	003aa706 	br	800ff4 <__alt_data_end+0xff800ff4>
  802558:	d9002d17 	ldw	r4,180(sp)
  80255c:	d9801e04 	addi	r6,sp,120
  802560:	b80b883a 	mov	r5,r23
  802564:	08081680 	call	808168 <__sprint_r>
  802568:	103a0b1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  80256c:	dc402617 	ldw	r17,152(sp)
  802570:	d8c02017 	ldw	r3,128(sp)
  802574:	da000404 	addi	r8,sp,16
  802578:	003f9c06 	br	8023ec <__alt_data_end+0xff8023ec>
  80257c:	ac400043 	ldbu	r17,1(r21)
  802580:	84000814 	ori	r16,r16,32
  802584:	ad400044 	addi	r21,r21,1
  802588:	8c403fcc 	andi	r17,r17,255
  80258c:	8c40201c 	xori	r17,r17,128
  802590:	8c7fe004 	addi	r17,r17,-128
  802594:	00395e06 	br	800b10 <__alt_data_end+0xff800b10>
  802598:	d8c02e15 	stw	r3,184(sp)
  80259c:	0039883a 	mov	fp,zero
  8025a0:	003e3506 	br	801e78 <__alt_data_end+0xff801e78>
  8025a4:	d9002d17 	ldw	r4,180(sp)
  8025a8:	d9801e04 	addi	r6,sp,120
  8025ac:	b80b883a 	mov	r5,r23
  8025b0:	08081680 	call	808168 <__sprint_r>
  8025b4:	1039f81e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  8025b8:	d8c02017 	ldw	r3,128(sp)
  8025bc:	da000404 	addi	r8,sp,16
  8025c0:	003cd006 	br	801904 <__alt_data_end+0xff801904>
  8025c4:	8009883a 	mov	r4,r16
  8025c8:	df003d15 	stw	fp,244(sp)
  8025cc:	08008f00 	call	8008f0 <strlen>
  8025d0:	d8802b15 	stw	r2,172(sp)
  8025d4:	da003d17 	ldw	r8,244(sp)
  8025d8:	103c200e 	bge	r2,zero,80165c <__alt_data_end+0xff80165c>
  8025dc:	0005883a 	mov	r2,zero
  8025e0:	003c1e06 	br	80165c <__alt_data_end+0xff80165c>
  8025e4:	d9002d17 	ldw	r4,180(sp)
  8025e8:	d9801e04 	addi	r6,sp,120
  8025ec:	b80b883a 	mov	r5,r23
  8025f0:	08081680 	call	808168 <__sprint_r>
  8025f4:	1039e81e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  8025f8:	d8c02017 	ldw	r3,128(sp)
  8025fc:	d8801f17 	ldw	r2,124(sp)
  802600:	da000404 	addi	r8,sp,16
  802604:	d9403317 	ldw	r5,204(sp)
  802608:	10800044 	addi	r2,r2,1
  80260c:	44000015 	stw	r16,0(r8)
  802610:	28c7883a 	add	r3,r5,r3
  802614:	003b5b06 	br	801384 <__alt_data_end+0xff801384>
  802618:	01002074 	movhi	r4,129
  80261c:	21036e84 	addi	r4,r4,3514
  802620:	d9003515 	stw	r4,212(sp)
  802624:	003af206 	br	8011f0 <__alt_data_end+0xff8011f0>
  802628:	013fffc4 	movi	r4,-1
  80262c:	003a0806 	br	800e50 <__alt_data_end+0xff800e50>
  802630:	0023883a 	mov	r17,zero
  802634:	003d9d06 	br	801cac <__alt_data_end+0xff801cac>
  802638:	d9002d17 	ldw	r4,180(sp)
  80263c:	d9801e04 	addi	r6,sp,120
  802640:	b80b883a 	mov	r5,r23
  802644:	08081680 	call	808168 <__sprint_r>
  802648:	1039d31e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  80264c:	d8c02017 	ldw	r3,128(sp)
  802650:	da000404 	addi	r8,sp,16
  802654:	003d9406 	br	801ca8 <__alt_data_end+0xff801ca8>
  802658:	01002074 	movhi	r4,129
  80265c:	21036a84 	addi	r4,r4,3498
  802660:	d9002c15 	stw	r4,176(sp)
  802664:	d9002c17 	ldw	r4,176(sp)
  802668:	1c47883a 	add	r3,r3,r17
  80266c:	10800044 	addi	r2,r2,1
  802670:	41000015 	stw	r4,0(r8)
  802674:	44400115 	stw	r17,4(r8)
  802678:	d8c02015 	stw	r3,128(sp)
  80267c:	d8801f15 	stw	r2,124(sp)
  802680:	010001c4 	movi	r4,7
  802684:	20bfd716 	blt	r4,r2,8025e4 <__alt_data_end+0xff8025e4>
  802688:	42000204 	addi	r8,r8,8
  80268c:	003fdd06 	br	802604 <__alt_data_end+0xff802604>
  802690:	d9002d17 	ldw	r4,180(sp)
  802694:	d9801e04 	addi	r6,sp,120
  802698:	b80b883a 	mov	r5,r23
  80269c:	08081680 	call	808168 <__sprint_r>
  8026a0:	1039bd1e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  8026a4:	d8802617 	ldw	r2,152(sp)
  8026a8:	d8c02017 	ldw	r3,128(sp)
  8026ac:	da000404 	addi	r8,sp,16
  8026b0:	003e1006 	br	801ef4 <__alt_data_end+0xff801ef4>
  8026b4:	00800044 	movi	r2,1
  8026b8:	10803fcc 	andi	r2,r2,255
  8026bc:	00c00044 	movi	r3,1
  8026c0:	10fa0d26 	beq	r2,r3,800ef8 <__alt_data_end+0xff800ef8>
  8026c4:	00c00084 	movi	r3,2
  8026c8:	10fbaf26 	beq	r2,r3,801588 <__alt_data_end+0xff801588>
  8026cc:	003a6d06 	br	801084 <__alt_data_end+0xff801084>
  8026d0:	01002074 	movhi	r4,129
  8026d4:	21036e84 	addi	r4,r4,3514
  8026d8:	d9003515 	stw	r4,212(sp)
  8026dc:	003b5406 	br	801430 <__alt_data_end+0xff801430>
  8026e0:	d8802a17 	ldw	r2,168(sp)
  8026e4:	00c00184 	movi	r3,6
  8026e8:	1880012e 	bgeu	r3,r2,8026f0 <___vfprintf_internal_r+0x1d68>
  8026ec:	1805883a 	mov	r2,r3
  8026f0:	d8802b15 	stw	r2,172(sp)
  8026f4:	1000ef16 	blt	r2,zero,802ab4 <___vfprintf_internal_r+0x212c>
  8026f8:	04002074 	movhi	r16,129
  8026fc:	d8802915 	stw	r2,164(sp)
  802700:	dcc02e15 	stw	r19,184(sp)
  802704:	d8002a15 	stw	zero,168(sp)
  802708:	d8003215 	stw	zero,200(sp)
  80270c:	84036804 	addi	r16,r16,3488
  802710:	0039883a 	mov	fp,zero
  802714:	003a8006 	br	801118 <__alt_data_end+0xff801118>
  802718:	0021883a 	mov	r16,zero
  80271c:	003e0706 	br	801f3c <__alt_data_end+0xff801f3c>
  802720:	d9002d17 	ldw	r4,180(sp)
  802724:	d9801e04 	addi	r6,sp,120
  802728:	b80b883a 	mov	r5,r23
  80272c:	08081680 	call	808168 <__sprint_r>
  802730:	1039991e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  802734:	d8802617 	ldw	r2,152(sp)
  802738:	d9403317 	ldw	r5,204(sp)
  80273c:	d8c02017 	ldw	r3,128(sp)
  802740:	da000404 	addi	r8,sp,16
  802744:	2885c83a 	sub	r2,r5,r2
  802748:	003dfb06 	br	801f38 <__alt_data_end+0xff801f38>
  80274c:	9080004c 	andi	r2,r18,1
  802750:	103e8f1e 	bne	r2,zero,802190 <__alt_data_end+0xff802190>
  802754:	d8802117 	ldw	r2,132(sp)
  802758:	003e9e06 	br	8021d4 <__alt_data_end+0xff8021d4>
  80275c:	1025883a 	mov	r18,r2
  802760:	0039883a 	mov	fp,zero
  802764:	00800084 	movi	r2,2
  802768:	003fd306 	br	8026b8 <__alt_data_end+0xff8026b8>
  80276c:	07000b44 	movi	fp,45
  802770:	df002785 	stb	fp,158(sp)
  802774:	003a1b06 	br	800fe4 <__alt_data_end+0xff800fe4>
  802778:	00c00b44 	movi	r3,45
  80277c:	d8c02785 	stb	r3,158(sp)
  802780:	d8802915 	stw	r2,164(sp)
  802784:	dc802c17 	ldw	r18,176(sp)
  802788:	d8002a15 	stw	zero,168(sp)
  80278c:	07000b44 	movi	fp,45
  802790:	003a5e06 	br	80110c <__alt_data_end+0xff80110c>
  802794:	04002074 	movhi	r16,129
  802798:	84035d04 	addi	r16,r16,3444
  80279c:	003f4706 	br	8024bc <__alt_data_end+0xff8024bc>
  8027a0:	d9002e17 	ldw	r4,184(sp)
  8027a4:	d9402f17 	ldw	r5,188(sp)
  8027a8:	20800017 	ldw	r2,0(r4)
  8027ac:	21000104 	addi	r4,r4,4
  8027b0:	d9002e15 	stw	r4,184(sp)
  8027b4:	11400015 	stw	r5,0(r2)
  8027b8:	0038ab06 	br	800a68 <__alt_data_end+0xff800a68>
  8027bc:	dd802617 	ldw	r22,152(sp)
  8027c0:	00bfff44 	movi	r2,-3
  8027c4:	b0801c16 	blt	r22,r2,802838 <___vfprintf_internal_r+0x1eb0>
  8027c8:	d9402a17 	ldw	r5,168(sp)
  8027cc:	2d801a16 	blt	r5,r22,802838 <___vfprintf_internal_r+0x1eb0>
  8027d0:	dd803215 	stw	r22,200(sp)
  8027d4:	003e8906 	br	8021fc <__alt_data_end+0xff8021fc>
  8027d8:	01002074 	movhi	r4,129
  8027dc:	21036a84 	addi	r4,r4,3498
  8027e0:	d9002c15 	stw	r4,176(sp)
  8027e4:	003c9106 	br	801a2c <__alt_data_end+0xff801a2c>
  8027e8:	e005883a 	mov	r2,fp
  8027ec:	003e7906 	br	8021d4 <__alt_data_end+0xff8021d4>
  8027f0:	d9002a17 	ldw	r4,168(sp)
  8027f4:	df002783 	ldbu	fp,158(sp)
  8027f8:	dcc02e15 	stw	r19,184(sp)
  8027fc:	d9002915 	stw	r4,164(sp)
  802800:	d9002b15 	stw	r4,172(sp)
  802804:	d8002a15 	stw	zero,168(sp)
  802808:	d8003215 	stw	zero,200(sp)
  80280c:	003a3b06 	br	8010fc <__alt_data_end+0xff8010fc>
  802810:	9080004c 	andi	r2,r18,1
  802814:	0039883a 	mov	fp,zero
  802818:	10000426 	beq	r2,zero,80282c <___vfprintf_internal_r+0x1ea4>
  80281c:	00800c04 	movi	r2,48
  802820:	dc001dc4 	addi	r16,sp,119
  802824:	d8801dc5 	stb	r2,119(sp)
  802828:	003b6406 	br	8015bc <__alt_data_end+0xff8015bc>
  80282c:	d8002b15 	stw	zero,172(sp)
  802830:	dc001e04 	addi	r16,sp,120
  802834:	003a2b06 	br	8010e4 <__alt_data_end+0xff8010e4>
  802838:	8c7fff84 	addi	r17,r17,-2
  80283c:	b5bfffc4 	addi	r22,r22,-1
  802840:	dd802615 	stw	r22,152(sp)
  802844:	dc4022c5 	stb	r17,139(sp)
  802848:	b000bf16 	blt	r22,zero,802b48 <___vfprintf_internal_r+0x21c0>
  80284c:	00800ac4 	movi	r2,43
  802850:	d8802305 	stb	r2,140(sp)
  802854:	00800244 	movi	r2,9
  802858:	15807016 	blt	r2,r22,802a1c <___vfprintf_internal_r+0x2094>
  80285c:	00800c04 	movi	r2,48
  802860:	b5800c04 	addi	r22,r22,48
  802864:	d8802345 	stb	r2,141(sp)
  802868:	dd802385 	stb	r22,142(sp)
  80286c:	d88023c4 	addi	r2,sp,143
  802870:	df0022c4 	addi	fp,sp,139
  802874:	d8c03317 	ldw	r3,204(sp)
  802878:	1739c83a 	sub	fp,r2,fp
  80287c:	d9003317 	ldw	r4,204(sp)
  802880:	e0c7883a 	add	r3,fp,r3
  802884:	df003a15 	stw	fp,232(sp)
  802888:	d8c02b15 	stw	r3,172(sp)
  80288c:	00800044 	movi	r2,1
  802890:	1100b30e 	bge	r2,r4,802b60 <___vfprintf_internal_r+0x21d8>
  802894:	d8c02b17 	ldw	r3,172(sp)
  802898:	18c00044 	addi	r3,r3,1
  80289c:	d8c02b15 	stw	r3,172(sp)
  8028a0:	1805883a 	mov	r2,r3
  8028a4:	1800ac16 	blt	r3,zero,802b58 <___vfprintf_internal_r+0x21d0>
  8028a8:	d8003215 	stw	zero,200(sp)
  8028ac:	003e5d06 	br	802224 <__alt_data_end+0xff802224>
  8028b0:	d9002d17 	ldw	r4,180(sp)
  8028b4:	d9801e04 	addi	r6,sp,120
  8028b8:	b80b883a 	mov	r5,r23
  8028bc:	08081680 	call	808168 <__sprint_r>
  8028c0:	1039351e 	bne	r2,zero,800d98 <__alt_data_end+0xff800d98>
  8028c4:	dc402617 	ldw	r17,152(sp)
  8028c8:	d8c02017 	ldw	r3,128(sp)
  8028cc:	d8801f17 	ldw	r2,124(sp)
  8028d0:	da000404 	addi	r8,sp,16
  8028d4:	003ed606 	br	802430 <__alt_data_end+0xff802430>
  8028d8:	182b883a 	mov	r21,r3
  8028dc:	d8002a15 	stw	zero,168(sp)
  8028e0:	00388c06 	br	800b14 <__alt_data_end+0xff800b14>
  8028e4:	d8802a17 	ldw	r2,168(sp)
  8028e8:	103e071e 	bne	r2,zero,802108 <__alt_data_end+0xff802108>
  8028ec:	dc002a15 	stw	r16,168(sp)
  8028f0:	003e0506 	br	802108 <__alt_data_end+0xff802108>
  8028f4:	d9002a17 	ldw	r4,168(sp)
  8028f8:	20c00044 	addi	r3,r4,1
  8028fc:	003e0f06 	br	80213c <__alt_data_end+0xff80213c>
  802900:	01400184 	movi	r5,6
  802904:	d9402a15 	stw	r5,168(sp)
  802908:	003dff06 	br	802108 <__alt_data_end+0xff802108>
  80290c:	d8802104 	addi	r2,sp,132
  802910:	d8800315 	stw	r2,12(sp)
  802914:	d8802504 	addi	r2,sp,148
  802918:	d8800215 	stw	r2,8(sp)
  80291c:	d8802604 	addi	r2,sp,152
  802920:	d8800115 	stw	r2,4(sp)
  802924:	d8802a17 	ldw	r2,168(sp)
  802928:	d9403617 	ldw	r5,216(sp)
  80292c:	d9002d17 	ldw	r4,180(sp)
  802930:	d8800015 	stw	r2,0(sp)
  802934:	01c000c4 	movi	r7,3
  802938:	980d883a 	mov	r6,r19
  80293c:	da003d15 	stw	r8,244(sp)
  802940:	08030b80 	call	8030b8 <_dtoa_r>
  802944:	d8c02a17 	ldw	r3,168(sp)
  802948:	da003d17 	ldw	r8,244(sp)
  80294c:	1021883a 	mov	r16,r2
  802950:	10f9883a 	add	fp,r2,r3
  802954:	81000007 	ldb	r4,0(r16)
  802958:	00800c04 	movi	r2,48
  80295c:	20805e26 	beq	r4,r2,802ad8 <___vfprintf_internal_r+0x2150>
  802960:	d8c02617 	ldw	r3,152(sp)
  802964:	e0f9883a 	add	fp,fp,r3
  802968:	003e0a06 	br	802194 <__alt_data_end+0xff802194>
  80296c:	00c00b44 	movi	r3,45
  802970:	24e0003c 	xorhi	r19,r4,32768
  802974:	d8c02905 	stb	r3,164(sp)
  802978:	003de906 	br	802120 <__alt_data_end+0xff802120>
  80297c:	d8c03217 	ldw	r3,200(sp)
  802980:	00c07a0e 	bge	zero,r3,802b6c <___vfprintf_internal_r+0x21e4>
  802984:	00800044 	movi	r2,1
  802988:	d9003317 	ldw	r4,204(sp)
  80298c:	1105883a 	add	r2,r2,r4
  802990:	d8802b15 	stw	r2,172(sp)
  802994:	10004e16 	blt	r2,zero,802ad0 <___vfprintf_internal_r+0x2148>
  802998:	044019c4 	movi	r17,103
  80299c:	003e2106 	br	802224 <__alt_data_end+0xff802224>
  8029a0:	d9002a17 	ldw	r4,168(sp)
  8029a4:	d8802104 	addi	r2,sp,132
  8029a8:	d8800315 	stw	r2,12(sp)
  8029ac:	d9000015 	stw	r4,0(sp)
  8029b0:	d8802504 	addi	r2,sp,148
  8029b4:	d9403617 	ldw	r5,216(sp)
  8029b8:	d9002d17 	ldw	r4,180(sp)
  8029bc:	d8800215 	stw	r2,8(sp)
  8029c0:	d8802604 	addi	r2,sp,152
  8029c4:	d8800115 	stw	r2,4(sp)
  8029c8:	01c000c4 	movi	r7,3
  8029cc:	980d883a 	mov	r6,r19
  8029d0:	da003d15 	stw	r8,244(sp)
  8029d4:	08030b80 	call	8030b8 <_dtoa_r>
  8029d8:	d8c02a17 	ldw	r3,168(sp)
  8029dc:	da003d17 	ldw	r8,244(sp)
  8029e0:	1021883a 	mov	r16,r2
  8029e4:	00801184 	movi	r2,70
  8029e8:	80f9883a 	add	fp,r16,r3
  8029ec:	88bfd926 	beq	r17,r2,802954 <__alt_data_end+0xff802954>
  8029f0:	003de806 	br	802194 <__alt_data_end+0xff802194>
  8029f4:	d9002a17 	ldw	r4,168(sp)
  8029f8:	00c04d0e 	bge	zero,r3,802b30 <___vfprintf_internal_r+0x21a8>
  8029fc:	2000441e 	bne	r4,zero,802b10 <___vfprintf_internal_r+0x2188>
  802a00:	9480004c 	andi	r18,r18,1
  802a04:	9000421e 	bne	r18,zero,802b10 <___vfprintf_internal_r+0x2188>
  802a08:	1805883a 	mov	r2,r3
  802a0c:	18006f16 	blt	r3,zero,802bcc <___vfprintf_internal_r+0x2244>
  802a10:	d8c03217 	ldw	r3,200(sp)
  802a14:	d8c02b15 	stw	r3,172(sp)
  802a18:	003e0206 	br	802224 <__alt_data_end+0xff802224>
  802a1c:	df0022c4 	addi	fp,sp,139
  802a20:	dc002a15 	stw	r16,168(sp)
  802a24:	4027883a 	mov	r19,r8
  802a28:	e021883a 	mov	r16,fp
  802a2c:	b009883a 	mov	r4,r22
  802a30:	01400284 	movi	r5,10
  802a34:	080acf40 	call	80acf4 <__modsi3>
  802a38:	10800c04 	addi	r2,r2,48
  802a3c:	843fffc4 	addi	r16,r16,-1
  802a40:	b009883a 	mov	r4,r22
  802a44:	01400284 	movi	r5,10
  802a48:	80800005 	stb	r2,0(r16)
  802a4c:	080ac700 	call	80ac70 <__divsi3>
  802a50:	102d883a 	mov	r22,r2
  802a54:	00800244 	movi	r2,9
  802a58:	15bff416 	blt	r2,r22,802a2c <__alt_data_end+0xff802a2c>
  802a5c:	9811883a 	mov	r8,r19
  802a60:	b0800c04 	addi	r2,r22,48
  802a64:	8027883a 	mov	r19,r16
  802a68:	997fffc4 	addi	r5,r19,-1
  802a6c:	98bfffc5 	stb	r2,-1(r19)
  802a70:	dc002a17 	ldw	r16,168(sp)
  802a74:	2f006d2e 	bgeu	r5,fp,802c2c <___vfprintf_internal_r+0x22a4>
  802a78:	d9c02384 	addi	r7,sp,142
  802a7c:	3ccfc83a 	sub	r7,r7,r19
  802a80:	d9002344 	addi	r4,sp,141
  802a84:	e1cf883a 	add	r7,fp,r7
  802a88:	00000106 	br	802a90 <___vfprintf_internal_r+0x2108>
  802a8c:	28800003 	ldbu	r2,0(r5)
  802a90:	20800005 	stb	r2,0(r4)
  802a94:	21000044 	addi	r4,r4,1
  802a98:	29400044 	addi	r5,r5,1
  802a9c:	393ffb1e 	bne	r7,r4,802a8c <__alt_data_end+0xff802a8c>
  802aa0:	d8802304 	addi	r2,sp,140
  802aa4:	14c5c83a 	sub	r2,r2,r19
  802aa8:	d8c02344 	addi	r3,sp,141
  802aac:	1885883a 	add	r2,r3,r2
  802ab0:	003f7006 	br	802874 <__alt_data_end+0xff802874>
  802ab4:	0005883a 	mov	r2,zero
  802ab8:	003f0f06 	br	8026f8 <__alt_data_end+0xff8026f8>
  802abc:	d8c03217 	ldw	r3,200(sp)
  802ac0:	18c00044 	addi	r3,r3,1
  802ac4:	d8c02b15 	stw	r3,172(sp)
  802ac8:	1805883a 	mov	r2,r3
  802acc:	183fb20e 	bge	r3,zero,802998 <__alt_data_end+0xff802998>
  802ad0:	0005883a 	mov	r2,zero
  802ad4:	003fb006 	br	802998 <__alt_data_end+0xff802998>
  802ad8:	d9003617 	ldw	r4,216(sp)
  802adc:	000d883a 	mov	r6,zero
  802ae0:	000f883a 	mov	r7,zero
  802ae4:	980b883a 	mov	r5,r19
  802ae8:	d8c03c15 	stw	r3,240(sp)
  802aec:	da003d15 	stw	r8,244(sp)
  802af0:	080c0c80 	call	80c0c8 <__eqdf2>
  802af4:	d8c03c17 	ldw	r3,240(sp)
  802af8:	da003d17 	ldw	r8,244(sp)
  802afc:	103f9826 	beq	r2,zero,802960 <__alt_data_end+0xff802960>
  802b00:	00800044 	movi	r2,1
  802b04:	10c7c83a 	sub	r3,r2,r3
  802b08:	d8c02615 	stw	r3,152(sp)
  802b0c:	003f9506 	br	802964 <__alt_data_end+0xff802964>
  802b10:	d9002a17 	ldw	r4,168(sp)
  802b14:	d8c03217 	ldw	r3,200(sp)
  802b18:	20800044 	addi	r2,r4,1
  802b1c:	1885883a 	add	r2,r3,r2
  802b20:	d8802b15 	stw	r2,172(sp)
  802b24:	103dbf0e 	bge	r2,zero,802224 <__alt_data_end+0xff802224>
  802b28:	0005883a 	mov	r2,zero
  802b2c:	003dbd06 	br	802224 <__alt_data_end+0xff802224>
  802b30:	2000201e 	bne	r4,zero,802bb4 <___vfprintf_internal_r+0x222c>
  802b34:	9480004c 	andi	r18,r18,1
  802b38:	90001e1e 	bne	r18,zero,802bb4 <___vfprintf_internal_r+0x222c>
  802b3c:	00800044 	movi	r2,1
  802b40:	d8802b15 	stw	r2,172(sp)
  802b44:	003db706 	br	802224 <__alt_data_end+0xff802224>
  802b48:	00800b44 	movi	r2,45
  802b4c:	05adc83a 	sub	r22,zero,r22
  802b50:	d8802305 	stb	r2,140(sp)
  802b54:	003f3f06 	br	802854 <__alt_data_end+0xff802854>
  802b58:	0005883a 	mov	r2,zero
  802b5c:	003f5206 	br	8028a8 <__alt_data_end+0xff8028a8>
  802b60:	90a4703a 	and	r18,r18,r2
  802b64:	903f4e26 	beq	r18,zero,8028a0 <__alt_data_end+0xff8028a0>
  802b68:	003f4a06 	br	802894 <__alt_data_end+0xff802894>
  802b6c:	00800084 	movi	r2,2
  802b70:	10c5c83a 	sub	r2,r2,r3
  802b74:	003f8406 	br	802988 <__alt_data_end+0xff802988>
  802b78:	d9402e17 	ldw	r5,184(sp)
  802b7c:	d9002e17 	ldw	r4,184(sp)
  802b80:	ac400043 	ldbu	r17,1(r21)
  802b84:	29400017 	ldw	r5,0(r5)
  802b88:	20800104 	addi	r2,r4,4
  802b8c:	d8802e15 	stw	r2,184(sp)
  802b90:	d9402a15 	stw	r5,168(sp)
  802b94:	182b883a 	mov	r21,r3
  802b98:	283e7b0e 	bge	r5,zero,802588 <__alt_data_end+0xff802588>
  802b9c:	8c403fcc 	andi	r17,r17,255
  802ba0:	017fffc4 	movi	r5,-1
  802ba4:	8c40201c 	xori	r17,r17,128
  802ba8:	d9402a15 	stw	r5,168(sp)
  802bac:	8c7fe004 	addi	r17,r17,-128
  802bb0:	0037d706 	br	800b10 <__alt_data_end+0xff800b10>
  802bb4:	d8c02a17 	ldw	r3,168(sp)
  802bb8:	18c00084 	addi	r3,r3,2
  802bbc:	d8c02b15 	stw	r3,172(sp)
  802bc0:	1805883a 	mov	r2,r3
  802bc4:	183d970e 	bge	r3,zero,802224 <__alt_data_end+0xff802224>
  802bc8:	003fd706 	br	802b28 <__alt_data_end+0xff802b28>
  802bcc:	0005883a 	mov	r2,zero
  802bd0:	003f8f06 	br	802a10 <__alt_data_end+0xff802a10>
  802bd4:	9080004c 	andi	r2,r18,1
  802bd8:	103f821e 	bne	r2,zero,8029e4 <__alt_data_end+0xff8029e4>
  802bdc:	d8802117 	ldw	r2,132(sp)
  802be0:	1405c83a 	sub	r2,r2,r16
  802be4:	d8803315 	stw	r2,204(sp)
  802be8:	b47ef426 	beq	r22,r17,8027bc <__alt_data_end+0xff8027bc>
  802bec:	dd802617 	ldw	r22,152(sp)
  802bf0:	003f1206 	br	80283c <__alt_data_end+0xff80283c>
  802bf4:	d8c02b03 	ldbu	r3,172(sp)
  802bf8:	d8c02785 	stb	r3,158(sp)
  802bfc:	0038df06 	br	800f7c <__alt_data_end+0xff800f7c>
  802c00:	d8c02b03 	ldbu	r3,172(sp)
  802c04:	d8c02785 	stb	r3,158(sp)
  802c08:	0038aa06 	br	800eb4 <__alt_data_end+0xff800eb4>
  802c0c:	d8c02b03 	ldbu	r3,172(sp)
  802c10:	d8c02785 	stb	r3,158(sp)
  802c14:	003a4306 	br	801524 <__alt_data_end+0xff801524>
  802c18:	d8c02b03 	ldbu	r3,172(sp)
  802c1c:	d8c02785 	stb	r3,158(sp)
  802c20:	003af506 	br	8017f8 <__alt_data_end+0xff8017f8>
  802c24:	0005883a 	mov	r2,zero
  802c28:	003d7b06 	br	802218 <__alt_data_end+0xff802218>
  802c2c:	d8802344 	addi	r2,sp,141
  802c30:	003f1006 	br	802874 <__alt_data_end+0xff802874>
  802c34:	d8c02b03 	ldbu	r3,172(sp)
  802c38:	d8c02785 	stb	r3,158(sp)
  802c3c:	0038fd06 	br	801034 <__alt_data_end+0xff801034>
  802c40:	d8c02b03 	ldbu	r3,172(sp)
  802c44:	d8c02785 	stb	r3,158(sp)
  802c48:	003a9706 	br	8016a8 <__alt_data_end+0xff8016a8>
  802c4c:	d8c02b03 	ldbu	r3,172(sp)
  802c50:	d8c02785 	stb	r3,158(sp)
  802c54:	003a1806 	br	8014b8 <__alt_data_end+0xff8014b8>
  802c58:	d8c02b03 	ldbu	r3,172(sp)
  802c5c:	d8c02785 	stb	r3,158(sp)
  802c60:	003abe06 	br	80175c <__alt_data_end+0xff80175c>

00802c64 <__vfprintf_internal>:
  802c64:	00802074 	movhi	r2,129
  802c68:	108abd04 	addi	r2,r2,10996
  802c6c:	300f883a 	mov	r7,r6
  802c70:	280d883a 	mov	r6,r5
  802c74:	200b883a 	mov	r5,r4
  802c78:	11000017 	ldw	r4,0(r2)
  802c7c:	08009881 	jmpi	800988 <___vfprintf_internal_r>

00802c80 <__sbprintf>:
  802c80:	2880030b 	ldhu	r2,12(r5)
  802c84:	2ac01917 	ldw	r11,100(r5)
  802c88:	2a80038b 	ldhu	r10,14(r5)
  802c8c:	2a400717 	ldw	r9,28(r5)
  802c90:	2a000917 	ldw	r8,36(r5)
  802c94:	defee204 	addi	sp,sp,-1144
  802c98:	00c10004 	movi	r3,1024
  802c9c:	dc011a15 	stw	r16,1128(sp)
  802ca0:	10bfff4c 	andi	r2,r2,65533
  802ca4:	2821883a 	mov	r16,r5
  802ca8:	d8cb883a 	add	r5,sp,r3
  802cac:	dc811c15 	stw	r18,1136(sp)
  802cb0:	dc411b15 	stw	r17,1132(sp)
  802cb4:	dfc11d15 	stw	ra,1140(sp)
  802cb8:	2025883a 	mov	r18,r4
  802cbc:	d881030d 	sth	r2,1036(sp)
  802cc0:	dac11915 	stw	r11,1124(sp)
  802cc4:	da81038d 	sth	r10,1038(sp)
  802cc8:	da410715 	stw	r9,1052(sp)
  802ccc:	da010915 	stw	r8,1060(sp)
  802cd0:	dec10015 	stw	sp,1024(sp)
  802cd4:	dec10415 	stw	sp,1040(sp)
  802cd8:	d8c10215 	stw	r3,1032(sp)
  802cdc:	d8c10515 	stw	r3,1044(sp)
  802ce0:	d8010615 	stw	zero,1048(sp)
  802ce4:	08009880 	call	800988 <___vfprintf_internal_r>
  802ce8:	1023883a 	mov	r17,r2
  802cec:	10000416 	blt	r2,zero,802d00 <__sbprintf+0x80>
  802cf0:	d9410004 	addi	r5,sp,1024
  802cf4:	9009883a 	mov	r4,r18
  802cf8:	080495c0 	call	80495c <_fflush_r>
  802cfc:	10000d1e 	bne	r2,zero,802d34 <__sbprintf+0xb4>
  802d00:	d881030b 	ldhu	r2,1036(sp)
  802d04:	1080100c 	andi	r2,r2,64
  802d08:	10000326 	beq	r2,zero,802d18 <__sbprintf+0x98>
  802d0c:	8080030b 	ldhu	r2,12(r16)
  802d10:	10801014 	ori	r2,r2,64
  802d14:	8080030d 	sth	r2,12(r16)
  802d18:	8805883a 	mov	r2,r17
  802d1c:	dfc11d17 	ldw	ra,1140(sp)
  802d20:	dc811c17 	ldw	r18,1136(sp)
  802d24:	dc411b17 	ldw	r17,1132(sp)
  802d28:	dc011a17 	ldw	r16,1128(sp)
  802d2c:	dec11e04 	addi	sp,sp,1144
  802d30:	f800283a 	ret
  802d34:	047fffc4 	movi	r17,-1
  802d38:	003ff106 	br	802d00 <__alt_data_end+0xff802d00>

00802d3c <__swsetup_r>:
  802d3c:	00802074 	movhi	r2,129
  802d40:	defffd04 	addi	sp,sp,-12
  802d44:	108abd04 	addi	r2,r2,10996
  802d48:	dc400115 	stw	r17,4(sp)
  802d4c:	2023883a 	mov	r17,r4
  802d50:	11000017 	ldw	r4,0(r2)
  802d54:	dc000015 	stw	r16,0(sp)
  802d58:	dfc00215 	stw	ra,8(sp)
  802d5c:	2821883a 	mov	r16,r5
  802d60:	20000226 	beq	r4,zero,802d6c <__swsetup_r+0x30>
  802d64:	20800e17 	ldw	r2,56(r4)
  802d68:	10003126 	beq	r2,zero,802e30 <__swsetup_r+0xf4>
  802d6c:	8080030b 	ldhu	r2,12(r16)
  802d70:	10c0020c 	andi	r3,r2,8
  802d74:	1009883a 	mov	r4,r2
  802d78:	18000f26 	beq	r3,zero,802db8 <__swsetup_r+0x7c>
  802d7c:	80c00417 	ldw	r3,16(r16)
  802d80:	18001526 	beq	r3,zero,802dd8 <__swsetup_r+0x9c>
  802d84:	1100004c 	andi	r4,r2,1
  802d88:	20001c1e 	bne	r4,zero,802dfc <__swsetup_r+0xc0>
  802d8c:	1080008c 	andi	r2,r2,2
  802d90:	1000291e 	bne	r2,zero,802e38 <__swsetup_r+0xfc>
  802d94:	80800517 	ldw	r2,20(r16)
  802d98:	80800215 	stw	r2,8(r16)
  802d9c:	18001c26 	beq	r3,zero,802e10 <__swsetup_r+0xd4>
  802da0:	0005883a 	mov	r2,zero
  802da4:	dfc00217 	ldw	ra,8(sp)
  802da8:	dc400117 	ldw	r17,4(sp)
  802dac:	dc000017 	ldw	r16,0(sp)
  802db0:	dec00304 	addi	sp,sp,12
  802db4:	f800283a 	ret
  802db8:	2080040c 	andi	r2,r4,16
  802dbc:	10002e26 	beq	r2,zero,802e78 <__swsetup_r+0x13c>
  802dc0:	2080010c 	andi	r2,r4,4
  802dc4:	10001e1e 	bne	r2,zero,802e40 <__swsetup_r+0x104>
  802dc8:	80c00417 	ldw	r3,16(r16)
  802dcc:	20800214 	ori	r2,r4,8
  802dd0:	8080030d 	sth	r2,12(r16)
  802dd4:	183feb1e 	bne	r3,zero,802d84 <__alt_data_end+0xff802d84>
  802dd8:	1100a00c 	andi	r4,r2,640
  802ddc:	01408004 	movi	r5,512
  802de0:	217fe826 	beq	r4,r5,802d84 <__alt_data_end+0xff802d84>
  802de4:	800b883a 	mov	r5,r16
  802de8:	8809883a 	mov	r4,r17
  802dec:	08058f80 	call	8058f8 <__smakebuf_r>
  802df0:	8080030b 	ldhu	r2,12(r16)
  802df4:	80c00417 	ldw	r3,16(r16)
  802df8:	003fe206 	br	802d84 <__alt_data_end+0xff802d84>
  802dfc:	80800517 	ldw	r2,20(r16)
  802e00:	80000215 	stw	zero,8(r16)
  802e04:	0085c83a 	sub	r2,zero,r2
  802e08:	80800615 	stw	r2,24(r16)
  802e0c:	183fe41e 	bne	r3,zero,802da0 <__alt_data_end+0xff802da0>
  802e10:	80c0030b 	ldhu	r3,12(r16)
  802e14:	0005883a 	mov	r2,zero
  802e18:	1900200c 	andi	r4,r3,128
  802e1c:	203fe126 	beq	r4,zero,802da4 <__alt_data_end+0xff802da4>
  802e20:	18c01014 	ori	r3,r3,64
  802e24:	80c0030d 	sth	r3,12(r16)
  802e28:	00bfffc4 	movi	r2,-1
  802e2c:	003fdd06 	br	802da4 <__alt_data_end+0xff802da4>
  802e30:	0804d480 	call	804d48 <__sinit>
  802e34:	003fcd06 	br	802d6c <__alt_data_end+0xff802d6c>
  802e38:	0005883a 	mov	r2,zero
  802e3c:	003fd606 	br	802d98 <__alt_data_end+0xff802d98>
  802e40:	81400c17 	ldw	r5,48(r16)
  802e44:	28000626 	beq	r5,zero,802e60 <__swsetup_r+0x124>
  802e48:	80801004 	addi	r2,r16,64
  802e4c:	28800326 	beq	r5,r2,802e5c <__swsetup_r+0x120>
  802e50:	8809883a 	mov	r4,r17
  802e54:	0804ebc0 	call	804ebc <_free_r>
  802e58:	8100030b 	ldhu	r4,12(r16)
  802e5c:	80000c15 	stw	zero,48(r16)
  802e60:	80c00417 	ldw	r3,16(r16)
  802e64:	00bff6c4 	movi	r2,-37
  802e68:	1108703a 	and	r4,r2,r4
  802e6c:	80000115 	stw	zero,4(r16)
  802e70:	80c00015 	stw	r3,0(r16)
  802e74:	003fd506 	br	802dcc <__alt_data_end+0xff802dcc>
  802e78:	00800244 	movi	r2,9
  802e7c:	88800015 	stw	r2,0(r17)
  802e80:	20801014 	ori	r2,r4,64
  802e84:	8080030d 	sth	r2,12(r16)
  802e88:	00bfffc4 	movi	r2,-1
  802e8c:	003fc506 	br	802da4 <__alt_data_end+0xff802da4>

00802e90 <quorem>:
  802e90:	defff204 	addi	sp,sp,-56
  802e94:	ddc00b15 	stw	r23,44(sp)
  802e98:	20800417 	ldw	r2,16(r4)
  802e9c:	2dc00417 	ldw	r23,16(r5)
  802ea0:	dfc00d15 	stw	ra,52(sp)
  802ea4:	df000c15 	stw	fp,48(sp)
  802ea8:	dd800a15 	stw	r22,40(sp)
  802eac:	dd400915 	stw	r21,36(sp)
  802eb0:	dd000815 	stw	r20,32(sp)
  802eb4:	dcc00715 	stw	r19,28(sp)
  802eb8:	dc800615 	stw	r18,24(sp)
  802ebc:	dc400515 	stw	r17,20(sp)
  802ec0:	dc000415 	stw	r16,16(sp)
  802ec4:	15c07a16 	blt	r2,r23,8030b0 <quorem+0x220>
  802ec8:	bdffffc4 	addi	r23,r23,-1
  802ecc:	bde9883a 	add	r20,r23,r23
  802ed0:	28c00504 	addi	r3,r5,20
  802ed4:	a529883a 	add	r20,r20,r20
  802ed8:	1d39883a 	add	fp,r3,r20
  802edc:	24c00504 	addi	r19,r4,20
  802ee0:	d9400215 	stw	r5,8(sp)
  802ee4:	9d29883a 	add	r20,r19,r20
  802ee8:	e1400017 	ldw	r5,0(fp)
  802eec:	d9000015 	stw	r4,0(sp)
  802ef0:	a1000017 	ldw	r4,0(r20)
  802ef4:	29400044 	addi	r5,r5,1
  802ef8:	d8c00115 	stw	r3,4(sp)
  802efc:	dd000315 	stw	r20,12(sp)
  802f00:	080ad680 	call	80ad68 <__udivsi3>
  802f04:	1025883a 	mov	r18,r2
  802f08:	10003026 	beq	r2,zero,802fcc <quorem+0x13c>
  802f0c:	dc400117 	ldw	r17,4(sp)
  802f10:	9829883a 	mov	r20,r19
  802f14:	002d883a 	mov	r22,zero
  802f18:	0021883a 	mov	r16,zero
  802f1c:	8d400017 	ldw	r21,0(r17)
  802f20:	900b883a 	mov	r5,r18
  802f24:	8c400104 	addi	r17,r17,4
  802f28:	a93fffcc 	andi	r4,r21,65535
  802f2c:	080ae240 	call	80ae24 <__mulsi3>
  802f30:	a808d43a 	srli	r4,r21,16
  802f34:	900b883a 	mov	r5,r18
  802f38:	15ad883a 	add	r22,r2,r22
  802f3c:	080ae240 	call	80ae24 <__mulsi3>
  802f40:	a1000017 	ldw	r4,0(r20)
  802f44:	b00cd43a 	srli	r6,r22,16
  802f48:	b0ffffcc 	andi	r3,r22,65535
  802f4c:	217fffcc 	andi	r5,r4,65535
  802f50:	2c21883a 	add	r16,r5,r16
  802f54:	80c7c83a 	sub	r3,r16,r3
  802f58:	2008d43a 	srli	r4,r4,16
  802f5c:	1185883a 	add	r2,r2,r6
  802f60:	1821d43a 	srai	r16,r3,16
  802f64:	117fffcc 	andi	r5,r2,65535
  802f68:	2149c83a 	sub	r4,r4,r5
  802f6c:	2421883a 	add	r16,r4,r16
  802f70:	8008943a 	slli	r4,r16,16
  802f74:	18ffffcc 	andi	r3,r3,65535
  802f78:	102cd43a 	srli	r22,r2,16
  802f7c:	20c8b03a 	or	r4,r4,r3
  802f80:	a1000015 	stw	r4,0(r20)
  802f84:	8021d43a 	srai	r16,r16,16
  802f88:	a5000104 	addi	r20,r20,4
  802f8c:	e47fe32e 	bgeu	fp,r17,802f1c <__alt_data_end+0xff802f1c>
  802f90:	d8c00317 	ldw	r3,12(sp)
  802f94:	18800017 	ldw	r2,0(r3)
  802f98:	10000c1e 	bne	r2,zero,802fcc <quorem+0x13c>
  802f9c:	18bfff04 	addi	r2,r3,-4
  802fa0:	9880082e 	bgeu	r19,r2,802fc4 <quorem+0x134>
  802fa4:	18ffff17 	ldw	r3,-4(r3)
  802fa8:	18000326 	beq	r3,zero,802fb8 <quorem+0x128>
  802fac:	00000506 	br	802fc4 <quorem+0x134>
  802fb0:	10c00017 	ldw	r3,0(r2)
  802fb4:	1800031e 	bne	r3,zero,802fc4 <quorem+0x134>
  802fb8:	10bfff04 	addi	r2,r2,-4
  802fbc:	bdffffc4 	addi	r23,r23,-1
  802fc0:	98bffb36 	bltu	r19,r2,802fb0 <__alt_data_end+0xff802fb0>
  802fc4:	d8c00017 	ldw	r3,0(sp)
  802fc8:	1dc00415 	stw	r23,16(r3)
  802fcc:	d9400217 	ldw	r5,8(sp)
  802fd0:	d9000017 	ldw	r4,0(sp)
  802fd4:	08070f40 	call	8070f4 <__mcmp>
  802fd8:	10002816 	blt	r2,zero,80307c <quorem+0x1ec>
  802fdc:	dc400117 	ldw	r17,4(sp)
  802fe0:	94800044 	addi	r18,r18,1
  802fe4:	980d883a 	mov	r6,r19
  802fe8:	0007883a 	mov	r3,zero
  802fec:	31000017 	ldw	r4,0(r6)
  802ff0:	89400017 	ldw	r5,0(r17)
  802ff4:	31800104 	addi	r6,r6,4
  802ff8:	20bfffcc 	andi	r2,r4,65535
  802ffc:	10c7883a 	add	r3,r2,r3
  803000:	28bfffcc 	andi	r2,r5,65535
  803004:	1885c83a 	sub	r2,r3,r2
  803008:	280ad43a 	srli	r5,r5,16
  80300c:	2008d43a 	srli	r4,r4,16
  803010:	1007d43a 	srai	r3,r2,16
  803014:	10bfffcc 	andi	r2,r2,65535
  803018:	2149c83a 	sub	r4,r4,r5
  80301c:	20c9883a 	add	r4,r4,r3
  803020:	200a943a 	slli	r5,r4,16
  803024:	8c400104 	addi	r17,r17,4
  803028:	2007d43a 	srai	r3,r4,16
  80302c:	2884b03a 	or	r2,r5,r2
  803030:	30bfff15 	stw	r2,-4(r6)
  803034:	e47fed2e 	bgeu	fp,r17,802fec <__alt_data_end+0xff802fec>
  803038:	bdc5883a 	add	r2,r23,r23
  80303c:	1085883a 	add	r2,r2,r2
  803040:	9887883a 	add	r3,r19,r2
  803044:	18800017 	ldw	r2,0(r3)
  803048:	10000c1e 	bne	r2,zero,80307c <quorem+0x1ec>
  80304c:	18bfff04 	addi	r2,r3,-4
  803050:	9880082e 	bgeu	r19,r2,803074 <quorem+0x1e4>
  803054:	18ffff17 	ldw	r3,-4(r3)
  803058:	18000326 	beq	r3,zero,803068 <quorem+0x1d8>
  80305c:	00000506 	br	803074 <quorem+0x1e4>
  803060:	10c00017 	ldw	r3,0(r2)
  803064:	1800031e 	bne	r3,zero,803074 <quorem+0x1e4>
  803068:	10bfff04 	addi	r2,r2,-4
  80306c:	bdffffc4 	addi	r23,r23,-1
  803070:	98bffb36 	bltu	r19,r2,803060 <__alt_data_end+0xff803060>
  803074:	d8c00017 	ldw	r3,0(sp)
  803078:	1dc00415 	stw	r23,16(r3)
  80307c:	9005883a 	mov	r2,r18
  803080:	dfc00d17 	ldw	ra,52(sp)
  803084:	df000c17 	ldw	fp,48(sp)
  803088:	ddc00b17 	ldw	r23,44(sp)
  80308c:	dd800a17 	ldw	r22,40(sp)
  803090:	dd400917 	ldw	r21,36(sp)
  803094:	dd000817 	ldw	r20,32(sp)
  803098:	dcc00717 	ldw	r19,28(sp)
  80309c:	dc800617 	ldw	r18,24(sp)
  8030a0:	dc400517 	ldw	r17,20(sp)
  8030a4:	dc000417 	ldw	r16,16(sp)
  8030a8:	dec00e04 	addi	sp,sp,56
  8030ac:	f800283a 	ret
  8030b0:	0005883a 	mov	r2,zero
  8030b4:	003ff206 	br	803080 <__alt_data_end+0xff803080>

008030b8 <_dtoa_r>:
  8030b8:	20801017 	ldw	r2,64(r4)
  8030bc:	deffde04 	addi	sp,sp,-136
  8030c0:	df002015 	stw	fp,128(sp)
  8030c4:	dcc01b15 	stw	r19,108(sp)
  8030c8:	dc801a15 	stw	r18,104(sp)
  8030cc:	dc401915 	stw	r17,100(sp)
  8030d0:	dc001815 	stw	r16,96(sp)
  8030d4:	dfc02115 	stw	ra,132(sp)
  8030d8:	ddc01f15 	stw	r23,124(sp)
  8030dc:	dd801e15 	stw	r22,120(sp)
  8030e0:	dd401d15 	stw	r21,116(sp)
  8030e4:	dd001c15 	stw	r20,112(sp)
  8030e8:	d9c00315 	stw	r7,12(sp)
  8030ec:	2039883a 	mov	fp,r4
  8030f0:	3023883a 	mov	r17,r6
  8030f4:	2825883a 	mov	r18,r5
  8030f8:	dc002417 	ldw	r16,144(sp)
  8030fc:	3027883a 	mov	r19,r6
  803100:	10000826 	beq	r2,zero,803124 <_dtoa_r+0x6c>
  803104:	21801117 	ldw	r6,68(r4)
  803108:	00c00044 	movi	r3,1
  80310c:	100b883a 	mov	r5,r2
  803110:	1986983a 	sll	r3,r3,r6
  803114:	11800115 	stw	r6,4(r2)
  803118:	10c00215 	stw	r3,8(r2)
  80311c:	08068180 	call	806818 <_Bfree>
  803120:	e0001015 	stw	zero,64(fp)
  803124:	88002e16 	blt	r17,zero,8031e0 <_dtoa_r+0x128>
  803128:	80000015 	stw	zero,0(r16)
  80312c:	889ffc2c 	andhi	r2,r17,32752
  803130:	00dffc34 	movhi	r3,32752
  803134:	10c01c26 	beq	r2,r3,8031a8 <_dtoa_r+0xf0>
  803138:	000d883a 	mov	r6,zero
  80313c:	000f883a 	mov	r7,zero
  803140:	9009883a 	mov	r4,r18
  803144:	980b883a 	mov	r5,r19
  803148:	080c0c80 	call	80c0c8 <__eqdf2>
  80314c:	10002b1e 	bne	r2,zero,8031fc <_dtoa_r+0x144>
  803150:	d9c02317 	ldw	r7,140(sp)
  803154:	00800044 	movi	r2,1
  803158:	38800015 	stw	r2,0(r7)
  80315c:	d8802517 	ldw	r2,148(sp)
  803160:	10019e26 	beq	r2,zero,8037dc <_dtoa_r+0x724>
  803164:	d8c02517 	ldw	r3,148(sp)
  803168:	00802074 	movhi	r2,129
  80316c:	10836a44 	addi	r2,r2,3497
  803170:	18800015 	stw	r2,0(r3)
  803174:	10bfffc4 	addi	r2,r2,-1
  803178:	dfc02117 	ldw	ra,132(sp)
  80317c:	df002017 	ldw	fp,128(sp)
  803180:	ddc01f17 	ldw	r23,124(sp)
  803184:	dd801e17 	ldw	r22,120(sp)
  803188:	dd401d17 	ldw	r21,116(sp)
  80318c:	dd001c17 	ldw	r20,112(sp)
  803190:	dcc01b17 	ldw	r19,108(sp)
  803194:	dc801a17 	ldw	r18,104(sp)
  803198:	dc401917 	ldw	r17,100(sp)
  80319c:	dc001817 	ldw	r16,96(sp)
  8031a0:	dec02204 	addi	sp,sp,136
  8031a4:	f800283a 	ret
  8031a8:	d8c02317 	ldw	r3,140(sp)
  8031ac:	0089c3c4 	movi	r2,9999
  8031b0:	18800015 	stw	r2,0(r3)
  8031b4:	90017726 	beq	r18,zero,803794 <_dtoa_r+0x6dc>
  8031b8:	00802074 	movhi	r2,129
  8031bc:	10837604 	addi	r2,r2,3544
  8031c0:	d9002517 	ldw	r4,148(sp)
  8031c4:	203fec26 	beq	r4,zero,803178 <__alt_data_end+0xff803178>
  8031c8:	10c000c7 	ldb	r3,3(r2)
  8031cc:	1801781e 	bne	r3,zero,8037b0 <_dtoa_r+0x6f8>
  8031d0:	10c000c4 	addi	r3,r2,3
  8031d4:	d9802517 	ldw	r6,148(sp)
  8031d8:	30c00015 	stw	r3,0(r6)
  8031dc:	003fe606 	br	803178 <__alt_data_end+0xff803178>
  8031e0:	04e00034 	movhi	r19,32768
  8031e4:	9cffffc4 	addi	r19,r19,-1
  8031e8:	00800044 	movi	r2,1
  8031ec:	8ce6703a 	and	r19,r17,r19
  8031f0:	80800015 	stw	r2,0(r16)
  8031f4:	9823883a 	mov	r17,r19
  8031f8:	003fcc06 	br	80312c <__alt_data_end+0xff80312c>
  8031fc:	d8800204 	addi	r2,sp,8
  803200:	d8800015 	stw	r2,0(sp)
  803204:	d9c00104 	addi	r7,sp,4
  803208:	900b883a 	mov	r5,r18
  80320c:	980d883a 	mov	r6,r19
  803210:	e009883a 	mov	r4,fp
  803214:	8820d53a 	srli	r16,r17,20
  803218:	08074c00 	call	8074c0 <__d2b>
  80321c:	d8800915 	stw	r2,36(sp)
  803220:	8001651e 	bne	r16,zero,8037b8 <_dtoa_r+0x700>
  803224:	dd800217 	ldw	r22,8(sp)
  803228:	dc000117 	ldw	r16,4(sp)
  80322c:	00800804 	movi	r2,32
  803230:	b421883a 	add	r16,r22,r16
  803234:	80c10c84 	addi	r3,r16,1074
  803238:	10c2d10e 	bge	r2,r3,803d80 <_dtoa_r+0xcc8>
  80323c:	00801004 	movi	r2,64
  803240:	81010484 	addi	r4,r16,1042
  803244:	10c7c83a 	sub	r3,r2,r3
  803248:	9108d83a 	srl	r4,r18,r4
  80324c:	88e2983a 	sll	r17,r17,r3
  803250:	2448b03a 	or	r4,r4,r17
  803254:	080d5e40 	call	80d5e4 <__floatunsidf>
  803258:	017f8434 	movhi	r5,65040
  80325c:	01800044 	movi	r6,1
  803260:	1009883a 	mov	r4,r2
  803264:	194b883a 	add	r5,r3,r5
  803268:	843fffc4 	addi	r16,r16,-1
  80326c:	d9801115 	stw	r6,68(sp)
  803270:	000d883a 	mov	r6,zero
  803274:	01cffe34 	movhi	r7,16376
  803278:	080cb8c0 	call	80cb8c <__subdf3>
  80327c:	0198dbf4 	movhi	r6,25455
  803280:	01cff4f4 	movhi	r7,16339
  803284:	3190d844 	addi	r6,r6,17249
  803288:	39e1e9c4 	addi	r7,r7,-30809
  80328c:	1009883a 	mov	r4,r2
  803290:	180b883a 	mov	r5,r3
  803294:	080c3200 	call	80c320 <__muldf3>
  803298:	01a2d874 	movhi	r6,35681
  80329c:	01cff1f4 	movhi	r7,16327
  8032a0:	31b22cc4 	addi	r6,r6,-14157
  8032a4:	39e28a04 	addi	r7,r7,-30168
  8032a8:	180b883a 	mov	r5,r3
  8032ac:	1009883a 	mov	r4,r2
  8032b0:	080ae4c0 	call	80ae4c <__adddf3>
  8032b4:	8009883a 	mov	r4,r16
  8032b8:	1029883a 	mov	r20,r2
  8032bc:	1823883a 	mov	r17,r3
  8032c0:	080d5080 	call	80d508 <__floatsidf>
  8032c4:	019427f4 	movhi	r6,20639
  8032c8:	01cff4f4 	movhi	r7,16339
  8032cc:	319e7ec4 	addi	r6,r6,31227
  8032d0:	39d104c4 	addi	r7,r7,17427
  8032d4:	1009883a 	mov	r4,r2
  8032d8:	180b883a 	mov	r5,r3
  8032dc:	080c3200 	call	80c320 <__muldf3>
  8032e0:	100d883a 	mov	r6,r2
  8032e4:	180f883a 	mov	r7,r3
  8032e8:	a009883a 	mov	r4,r20
  8032ec:	880b883a 	mov	r5,r17
  8032f0:	080ae4c0 	call	80ae4c <__adddf3>
  8032f4:	1009883a 	mov	r4,r2
  8032f8:	180b883a 	mov	r5,r3
  8032fc:	1029883a 	mov	r20,r2
  803300:	1823883a 	mov	r17,r3
  803304:	080d4880 	call	80d488 <__fixdfsi>
  803308:	000d883a 	mov	r6,zero
  80330c:	000f883a 	mov	r7,zero
  803310:	a009883a 	mov	r4,r20
  803314:	880b883a 	mov	r5,r17
  803318:	d8800515 	stw	r2,20(sp)
  80331c:	080c22c0 	call	80c22c <__ledf2>
  803320:	10028716 	blt	r2,zero,803d40 <_dtoa_r+0xc88>
  803324:	d8c00517 	ldw	r3,20(sp)
  803328:	00800584 	movi	r2,22
  80332c:	10c27536 	bltu	r2,r3,803d04 <_dtoa_r+0xc4c>
  803330:	180490fa 	slli	r2,r3,3
  803334:	00c02074 	movhi	r3,129
  803338:	18c39204 	addi	r3,r3,3656
  80333c:	1885883a 	add	r2,r3,r2
  803340:	11000017 	ldw	r4,0(r2)
  803344:	11400117 	ldw	r5,4(r2)
  803348:	900d883a 	mov	r6,r18
  80334c:	980f883a 	mov	r7,r19
  803350:	080c1500 	call	80c150 <__gedf2>
  803354:	00828d0e 	bge	zero,r2,803d8c <_dtoa_r+0xcd4>
  803358:	d9000517 	ldw	r4,20(sp)
  80335c:	d8000e15 	stw	zero,56(sp)
  803360:	213fffc4 	addi	r4,r4,-1
  803364:	d9000515 	stw	r4,20(sp)
  803368:	b42dc83a 	sub	r22,r22,r16
  80336c:	b5bfffc4 	addi	r22,r22,-1
  803370:	b0026f16 	blt	r22,zero,803d30 <_dtoa_r+0xc78>
  803374:	d8000815 	stw	zero,32(sp)
  803378:	d9c00517 	ldw	r7,20(sp)
  80337c:	38026416 	blt	r7,zero,803d10 <_dtoa_r+0xc58>
  803380:	b1ed883a 	add	r22,r22,r7
  803384:	d9c00d15 	stw	r7,52(sp)
  803388:	d8000a15 	stw	zero,40(sp)
  80338c:	d9800317 	ldw	r6,12(sp)
  803390:	00800244 	movi	r2,9
  803394:	11811436 	bltu	r2,r6,8037e8 <_dtoa_r+0x730>
  803398:	00800144 	movi	r2,5
  80339c:	1184e10e 	bge	r2,r6,804724 <_dtoa_r+0x166c>
  8033a0:	31bfff04 	addi	r6,r6,-4
  8033a4:	d9800315 	stw	r6,12(sp)
  8033a8:	0023883a 	mov	r17,zero
  8033ac:	d9800317 	ldw	r6,12(sp)
  8033b0:	008000c4 	movi	r2,3
  8033b4:	30836726 	beq	r6,r2,804154 <_dtoa_r+0x109c>
  8033b8:	1183410e 	bge	r2,r6,8040c0 <_dtoa_r+0x1008>
  8033bc:	d9c00317 	ldw	r7,12(sp)
  8033c0:	00800104 	movi	r2,4
  8033c4:	38827c26 	beq	r7,r2,803db8 <_dtoa_r+0xd00>
  8033c8:	00800144 	movi	r2,5
  8033cc:	3884c41e 	bne	r7,r2,8046e0 <_dtoa_r+0x1628>
  8033d0:	00800044 	movi	r2,1
  8033d4:	d8800b15 	stw	r2,44(sp)
  8033d8:	d8c00517 	ldw	r3,20(sp)
  8033dc:	d9002217 	ldw	r4,136(sp)
  8033e0:	1907883a 	add	r3,r3,r4
  8033e4:	19800044 	addi	r6,r3,1
  8033e8:	d8c00c15 	stw	r3,48(sp)
  8033ec:	d9800615 	stw	r6,24(sp)
  8033f0:	0183a40e 	bge	zero,r6,804284 <_dtoa_r+0x11cc>
  8033f4:	d9800617 	ldw	r6,24(sp)
  8033f8:	3021883a 	mov	r16,r6
  8033fc:	e0001115 	stw	zero,68(fp)
  803400:	008005c4 	movi	r2,23
  803404:	1184c92e 	bgeu	r2,r6,80472c <_dtoa_r+0x1674>
  803408:	00c00044 	movi	r3,1
  80340c:	00800104 	movi	r2,4
  803410:	1085883a 	add	r2,r2,r2
  803414:	11000504 	addi	r4,r2,20
  803418:	180b883a 	mov	r5,r3
  80341c:	18c00044 	addi	r3,r3,1
  803420:	313ffb2e 	bgeu	r6,r4,803410 <__alt_data_end+0xff803410>
  803424:	e1401115 	stw	r5,68(fp)
  803428:	e009883a 	mov	r4,fp
  80342c:	08067700 	call	806770 <_Balloc>
  803430:	d8800715 	stw	r2,28(sp)
  803434:	e0801015 	stw	r2,64(fp)
  803438:	00800384 	movi	r2,14
  80343c:	1400f736 	bltu	r2,r16,80381c <_dtoa_r+0x764>
  803440:	8800f626 	beq	r17,zero,80381c <_dtoa_r+0x764>
  803444:	d9c00517 	ldw	r7,20(sp)
  803448:	01c39a0e 	bge	zero,r7,8042b4 <_dtoa_r+0x11fc>
  80344c:	388003cc 	andi	r2,r7,15
  803450:	100490fa 	slli	r2,r2,3
  803454:	382bd13a 	srai	r21,r7,4
  803458:	00c02074 	movhi	r3,129
  80345c:	18c39204 	addi	r3,r3,3656
  803460:	1885883a 	add	r2,r3,r2
  803464:	a8c0040c 	andi	r3,r21,16
  803468:	12400017 	ldw	r9,0(r2)
  80346c:	12000117 	ldw	r8,4(r2)
  803470:	18037926 	beq	r3,zero,804258 <_dtoa_r+0x11a0>
  803474:	00802074 	movhi	r2,129
  803478:	10838804 	addi	r2,r2,3616
  80347c:	11800817 	ldw	r6,32(r2)
  803480:	11c00917 	ldw	r7,36(r2)
  803484:	9009883a 	mov	r4,r18
  803488:	980b883a 	mov	r5,r19
  80348c:	da001715 	stw	r8,92(sp)
  803490:	da401615 	stw	r9,88(sp)
  803494:	080b6f80 	call	80b6f8 <__divdf3>
  803498:	da001717 	ldw	r8,92(sp)
  80349c:	da401617 	ldw	r9,88(sp)
  8034a0:	ad4003cc 	andi	r21,r21,15
  8034a4:	040000c4 	movi	r16,3
  8034a8:	1023883a 	mov	r17,r2
  8034ac:	1829883a 	mov	r20,r3
  8034b0:	a8001126 	beq	r21,zero,8034f8 <_dtoa_r+0x440>
  8034b4:	05c02074 	movhi	r23,129
  8034b8:	bdc38804 	addi	r23,r23,3616
  8034bc:	4805883a 	mov	r2,r9
  8034c0:	4007883a 	mov	r3,r8
  8034c4:	a980004c 	andi	r6,r21,1
  8034c8:	1009883a 	mov	r4,r2
  8034cc:	a82bd07a 	srai	r21,r21,1
  8034d0:	180b883a 	mov	r5,r3
  8034d4:	30000426 	beq	r6,zero,8034e8 <_dtoa_r+0x430>
  8034d8:	b9800017 	ldw	r6,0(r23)
  8034dc:	b9c00117 	ldw	r7,4(r23)
  8034e0:	84000044 	addi	r16,r16,1
  8034e4:	080c3200 	call	80c320 <__muldf3>
  8034e8:	bdc00204 	addi	r23,r23,8
  8034ec:	a83ff51e 	bne	r21,zero,8034c4 <__alt_data_end+0xff8034c4>
  8034f0:	1013883a 	mov	r9,r2
  8034f4:	1811883a 	mov	r8,r3
  8034f8:	480d883a 	mov	r6,r9
  8034fc:	400f883a 	mov	r7,r8
  803500:	8809883a 	mov	r4,r17
  803504:	a00b883a 	mov	r5,r20
  803508:	080b6f80 	call	80b6f8 <__divdf3>
  80350c:	d8800f15 	stw	r2,60(sp)
  803510:	d8c01015 	stw	r3,64(sp)
  803514:	d8c00e17 	ldw	r3,56(sp)
  803518:	18000626 	beq	r3,zero,803534 <_dtoa_r+0x47c>
  80351c:	d9000f17 	ldw	r4,60(sp)
  803520:	d9401017 	ldw	r5,64(sp)
  803524:	000d883a 	mov	r6,zero
  803528:	01cffc34 	movhi	r7,16368
  80352c:	080c22c0 	call	80c22c <__ledf2>
  803530:	10040b16 	blt	r2,zero,804560 <_dtoa_r+0x14a8>
  803534:	8009883a 	mov	r4,r16
  803538:	080d5080 	call	80d508 <__floatsidf>
  80353c:	d9800f17 	ldw	r6,60(sp)
  803540:	d9c01017 	ldw	r7,64(sp)
  803544:	1009883a 	mov	r4,r2
  803548:	180b883a 	mov	r5,r3
  80354c:	080c3200 	call	80c320 <__muldf3>
  803550:	000d883a 	mov	r6,zero
  803554:	01d00734 	movhi	r7,16412
  803558:	1009883a 	mov	r4,r2
  80355c:	180b883a 	mov	r5,r3
  803560:	080ae4c0 	call	80ae4c <__adddf3>
  803564:	1021883a 	mov	r16,r2
  803568:	d8800617 	ldw	r2,24(sp)
  80356c:	047f3034 	movhi	r17,64704
  803570:	1c63883a 	add	r17,r3,r17
  803574:	10031826 	beq	r2,zero,8041d8 <_dtoa_r+0x1120>
  803578:	d8c00517 	ldw	r3,20(sp)
  80357c:	db000617 	ldw	r12,24(sp)
  803580:	d8c01315 	stw	r3,76(sp)
  803584:	d9000b17 	ldw	r4,44(sp)
  803588:	20038f26 	beq	r4,zero,8043c8 <_dtoa_r+0x1310>
  80358c:	60bfffc4 	addi	r2,r12,-1
  803590:	100490fa 	slli	r2,r2,3
  803594:	00c02074 	movhi	r3,129
  803598:	18c39204 	addi	r3,r3,3656
  80359c:	1885883a 	add	r2,r3,r2
  8035a0:	11800017 	ldw	r6,0(r2)
  8035a4:	11c00117 	ldw	r7,4(r2)
  8035a8:	d8800717 	ldw	r2,28(sp)
  8035ac:	0009883a 	mov	r4,zero
  8035b0:	014ff834 	movhi	r5,16352
  8035b4:	db001615 	stw	r12,88(sp)
  8035b8:	15c00044 	addi	r23,r2,1
  8035bc:	080b6f80 	call	80b6f8 <__divdf3>
  8035c0:	800d883a 	mov	r6,r16
  8035c4:	880f883a 	mov	r7,r17
  8035c8:	1009883a 	mov	r4,r2
  8035cc:	180b883a 	mov	r5,r3
  8035d0:	080cb8c0 	call	80cb8c <__subdf3>
  8035d4:	d9401017 	ldw	r5,64(sp)
  8035d8:	d9000f17 	ldw	r4,60(sp)
  8035dc:	102b883a 	mov	r21,r2
  8035e0:	d8c01215 	stw	r3,72(sp)
  8035e4:	080d4880 	call	80d488 <__fixdfsi>
  8035e8:	1009883a 	mov	r4,r2
  8035ec:	1029883a 	mov	r20,r2
  8035f0:	080d5080 	call	80d508 <__floatsidf>
  8035f4:	d9000f17 	ldw	r4,60(sp)
  8035f8:	d9401017 	ldw	r5,64(sp)
  8035fc:	100d883a 	mov	r6,r2
  803600:	180f883a 	mov	r7,r3
  803604:	080cb8c0 	call	80cb8c <__subdf3>
  803608:	1823883a 	mov	r17,r3
  80360c:	d8c00717 	ldw	r3,28(sp)
  803610:	d9401217 	ldw	r5,72(sp)
  803614:	a2000c04 	addi	r8,r20,48
  803618:	1021883a 	mov	r16,r2
  80361c:	1a000005 	stb	r8,0(r3)
  803620:	800d883a 	mov	r6,r16
  803624:	880f883a 	mov	r7,r17
  803628:	a809883a 	mov	r4,r21
  80362c:	4029883a 	mov	r20,r8
  803630:	080c1500 	call	80c150 <__gedf2>
  803634:	00841d16 	blt	zero,r2,8046ac <_dtoa_r+0x15f4>
  803638:	800d883a 	mov	r6,r16
  80363c:	880f883a 	mov	r7,r17
  803640:	0009883a 	mov	r4,zero
  803644:	014ffc34 	movhi	r5,16368
  803648:	080cb8c0 	call	80cb8c <__subdf3>
  80364c:	d9401217 	ldw	r5,72(sp)
  803650:	100d883a 	mov	r6,r2
  803654:	180f883a 	mov	r7,r3
  803658:	a809883a 	mov	r4,r21
  80365c:	080c1500 	call	80c150 <__gedf2>
  803660:	db001617 	ldw	r12,88(sp)
  803664:	00840e16 	blt	zero,r2,8046a0 <_dtoa_r+0x15e8>
  803668:	00800044 	movi	r2,1
  80366c:	13006b0e 	bge	r2,r12,80381c <_dtoa_r+0x764>
  803670:	d9000717 	ldw	r4,28(sp)
  803674:	dd800f15 	stw	r22,60(sp)
  803678:	dcc01015 	stw	r19,64(sp)
  80367c:	2319883a 	add	r12,r4,r12
  803680:	dcc01217 	ldw	r19,72(sp)
  803684:	602d883a 	mov	r22,r12
  803688:	dc801215 	stw	r18,72(sp)
  80368c:	b825883a 	mov	r18,r23
  803690:	00000906 	br	8036b8 <_dtoa_r+0x600>
  803694:	080cb8c0 	call	80cb8c <__subdf3>
  803698:	a80d883a 	mov	r6,r21
  80369c:	980f883a 	mov	r7,r19
  8036a0:	1009883a 	mov	r4,r2
  8036a4:	180b883a 	mov	r5,r3
  8036a8:	080c22c0 	call	80c22c <__ledf2>
  8036ac:	1003e816 	blt	r2,zero,804650 <_dtoa_r+0x1598>
  8036b0:	b825883a 	mov	r18,r23
  8036b4:	bd83e926 	beq	r23,r22,80465c <_dtoa_r+0x15a4>
  8036b8:	a809883a 	mov	r4,r21
  8036bc:	980b883a 	mov	r5,r19
  8036c0:	000d883a 	mov	r6,zero
  8036c4:	01d00934 	movhi	r7,16420
  8036c8:	080c3200 	call	80c320 <__muldf3>
  8036cc:	000d883a 	mov	r6,zero
  8036d0:	01d00934 	movhi	r7,16420
  8036d4:	8009883a 	mov	r4,r16
  8036d8:	880b883a 	mov	r5,r17
  8036dc:	102b883a 	mov	r21,r2
  8036e0:	1827883a 	mov	r19,r3
  8036e4:	080c3200 	call	80c320 <__muldf3>
  8036e8:	180b883a 	mov	r5,r3
  8036ec:	1009883a 	mov	r4,r2
  8036f0:	1821883a 	mov	r16,r3
  8036f4:	1023883a 	mov	r17,r2
  8036f8:	080d4880 	call	80d488 <__fixdfsi>
  8036fc:	1009883a 	mov	r4,r2
  803700:	1029883a 	mov	r20,r2
  803704:	080d5080 	call	80d508 <__floatsidf>
  803708:	8809883a 	mov	r4,r17
  80370c:	800b883a 	mov	r5,r16
  803710:	100d883a 	mov	r6,r2
  803714:	180f883a 	mov	r7,r3
  803718:	080cb8c0 	call	80cb8c <__subdf3>
  80371c:	a5000c04 	addi	r20,r20,48
  803720:	a80d883a 	mov	r6,r21
  803724:	980f883a 	mov	r7,r19
  803728:	1009883a 	mov	r4,r2
  80372c:	180b883a 	mov	r5,r3
  803730:	95000005 	stb	r20,0(r18)
  803734:	1021883a 	mov	r16,r2
  803738:	1823883a 	mov	r17,r3
  80373c:	080c22c0 	call	80c22c <__ledf2>
  803740:	bdc00044 	addi	r23,r23,1
  803744:	800d883a 	mov	r6,r16
  803748:	880f883a 	mov	r7,r17
  80374c:	0009883a 	mov	r4,zero
  803750:	014ffc34 	movhi	r5,16368
  803754:	103fcf0e 	bge	r2,zero,803694 <__alt_data_end+0xff803694>
  803758:	d8c01317 	ldw	r3,76(sp)
  80375c:	d8c00515 	stw	r3,20(sp)
  803760:	d9400917 	ldw	r5,36(sp)
  803764:	e009883a 	mov	r4,fp
  803768:	08068180 	call	806818 <_Bfree>
  80376c:	d9000517 	ldw	r4,20(sp)
  803770:	d9802317 	ldw	r6,140(sp)
  803774:	d9c02517 	ldw	r7,148(sp)
  803778:	b8000005 	stb	zero,0(r23)
  80377c:	20800044 	addi	r2,r4,1
  803780:	30800015 	stw	r2,0(r6)
  803784:	3802aa26 	beq	r7,zero,804230 <_dtoa_r+0x1178>
  803788:	3dc00015 	stw	r23,0(r7)
  80378c:	d8800717 	ldw	r2,28(sp)
  803790:	003e7906 	br	803178 <__alt_data_end+0xff803178>
  803794:	00800434 	movhi	r2,16
  803798:	10bfffc4 	addi	r2,r2,-1
  80379c:	88a2703a 	and	r17,r17,r2
  8037a0:	883e851e 	bne	r17,zero,8031b8 <__alt_data_end+0xff8031b8>
  8037a4:	00802074 	movhi	r2,129
  8037a8:	10837304 	addi	r2,r2,3532
  8037ac:	003e8406 	br	8031c0 <__alt_data_end+0xff8031c0>
  8037b0:	10c00204 	addi	r3,r2,8
  8037b4:	003e8706 	br	8031d4 <__alt_data_end+0xff8031d4>
  8037b8:	01400434 	movhi	r5,16
  8037bc:	297fffc4 	addi	r5,r5,-1
  8037c0:	994a703a 	and	r5,r19,r5
  8037c4:	9009883a 	mov	r4,r18
  8037c8:	843f0044 	addi	r16,r16,-1023
  8037cc:	294ffc34 	orhi	r5,r5,16368
  8037d0:	dd800217 	ldw	r22,8(sp)
  8037d4:	d8001115 	stw	zero,68(sp)
  8037d8:	003ea506 	br	803270 <__alt_data_end+0xff803270>
  8037dc:	00802074 	movhi	r2,129
  8037e0:	10836a04 	addi	r2,r2,3496
  8037e4:	003e6406 	br	803178 <__alt_data_end+0xff803178>
  8037e8:	e0001115 	stw	zero,68(fp)
  8037ec:	000b883a 	mov	r5,zero
  8037f0:	e009883a 	mov	r4,fp
  8037f4:	08067700 	call	806770 <_Balloc>
  8037f8:	01bfffc4 	movi	r6,-1
  8037fc:	01c00044 	movi	r7,1
  803800:	d8800715 	stw	r2,28(sp)
  803804:	d9800c15 	stw	r6,48(sp)
  803808:	e0801015 	stw	r2,64(fp)
  80380c:	d8000315 	stw	zero,12(sp)
  803810:	d9c00b15 	stw	r7,44(sp)
  803814:	d9800615 	stw	r6,24(sp)
  803818:	d8002215 	stw	zero,136(sp)
  80381c:	d8800117 	ldw	r2,4(sp)
  803820:	10008916 	blt	r2,zero,803a48 <_dtoa_r+0x990>
  803824:	d9000517 	ldw	r4,20(sp)
  803828:	00c00384 	movi	r3,14
  80382c:	19008616 	blt	r3,r4,803a48 <_dtoa_r+0x990>
  803830:	200490fa 	slli	r2,r4,3
  803834:	00c02074 	movhi	r3,129
  803838:	d9802217 	ldw	r6,136(sp)
  80383c:	18c39204 	addi	r3,r3,3656
  803840:	1885883a 	add	r2,r3,r2
  803844:	14000017 	ldw	r16,0(r2)
  803848:	14400117 	ldw	r17,4(r2)
  80384c:	30016316 	blt	r6,zero,803ddc <_dtoa_r+0xd24>
  803850:	800d883a 	mov	r6,r16
  803854:	880f883a 	mov	r7,r17
  803858:	9009883a 	mov	r4,r18
  80385c:	980b883a 	mov	r5,r19
  803860:	080b6f80 	call	80b6f8 <__divdf3>
  803864:	180b883a 	mov	r5,r3
  803868:	1009883a 	mov	r4,r2
  80386c:	080d4880 	call	80d488 <__fixdfsi>
  803870:	1009883a 	mov	r4,r2
  803874:	102b883a 	mov	r21,r2
  803878:	080d5080 	call	80d508 <__floatsidf>
  80387c:	800d883a 	mov	r6,r16
  803880:	880f883a 	mov	r7,r17
  803884:	1009883a 	mov	r4,r2
  803888:	180b883a 	mov	r5,r3
  80388c:	080c3200 	call	80c320 <__muldf3>
  803890:	100d883a 	mov	r6,r2
  803894:	180f883a 	mov	r7,r3
  803898:	9009883a 	mov	r4,r18
  80389c:	980b883a 	mov	r5,r19
  8038a0:	080cb8c0 	call	80cb8c <__subdf3>
  8038a4:	d9c00717 	ldw	r7,28(sp)
  8038a8:	1009883a 	mov	r4,r2
  8038ac:	a8800c04 	addi	r2,r21,48
  8038b0:	38800005 	stb	r2,0(r7)
  8038b4:	3dc00044 	addi	r23,r7,1
  8038b8:	d9c00617 	ldw	r7,24(sp)
  8038bc:	01800044 	movi	r6,1
  8038c0:	180b883a 	mov	r5,r3
  8038c4:	2005883a 	mov	r2,r4
  8038c8:	39803826 	beq	r7,r6,8039ac <_dtoa_r+0x8f4>
  8038cc:	000d883a 	mov	r6,zero
  8038d0:	01d00934 	movhi	r7,16420
  8038d4:	080c3200 	call	80c320 <__muldf3>
  8038d8:	000d883a 	mov	r6,zero
  8038dc:	000f883a 	mov	r7,zero
  8038e0:	1009883a 	mov	r4,r2
  8038e4:	180b883a 	mov	r5,r3
  8038e8:	1025883a 	mov	r18,r2
  8038ec:	1827883a 	mov	r19,r3
  8038f0:	080c0c80 	call	80c0c8 <__eqdf2>
  8038f4:	103f9a26 	beq	r2,zero,803760 <__alt_data_end+0xff803760>
  8038f8:	d9c00617 	ldw	r7,24(sp)
  8038fc:	d8c00717 	ldw	r3,28(sp)
  803900:	b829883a 	mov	r20,r23
  803904:	38bfffc4 	addi	r2,r7,-1
  803908:	18ad883a 	add	r22,r3,r2
  80390c:	00000a06 	br	803938 <_dtoa_r+0x880>
  803910:	080c3200 	call	80c320 <__muldf3>
  803914:	000d883a 	mov	r6,zero
  803918:	000f883a 	mov	r7,zero
  80391c:	1009883a 	mov	r4,r2
  803920:	180b883a 	mov	r5,r3
  803924:	1025883a 	mov	r18,r2
  803928:	1827883a 	mov	r19,r3
  80392c:	b829883a 	mov	r20,r23
  803930:	080c0c80 	call	80c0c8 <__eqdf2>
  803934:	103f8a26 	beq	r2,zero,803760 <__alt_data_end+0xff803760>
  803938:	800d883a 	mov	r6,r16
  80393c:	880f883a 	mov	r7,r17
  803940:	9009883a 	mov	r4,r18
  803944:	980b883a 	mov	r5,r19
  803948:	080b6f80 	call	80b6f8 <__divdf3>
  80394c:	180b883a 	mov	r5,r3
  803950:	1009883a 	mov	r4,r2
  803954:	080d4880 	call	80d488 <__fixdfsi>
  803958:	1009883a 	mov	r4,r2
  80395c:	102b883a 	mov	r21,r2
  803960:	080d5080 	call	80d508 <__floatsidf>
  803964:	800d883a 	mov	r6,r16
  803968:	880f883a 	mov	r7,r17
  80396c:	1009883a 	mov	r4,r2
  803970:	180b883a 	mov	r5,r3
  803974:	080c3200 	call	80c320 <__muldf3>
  803978:	100d883a 	mov	r6,r2
  80397c:	180f883a 	mov	r7,r3
  803980:	9009883a 	mov	r4,r18
  803984:	980b883a 	mov	r5,r19
  803988:	080cb8c0 	call	80cb8c <__subdf3>
  80398c:	aa000c04 	addi	r8,r21,48
  803990:	a2000005 	stb	r8,0(r20)
  803994:	000d883a 	mov	r6,zero
  803998:	01d00934 	movhi	r7,16420
  80399c:	1009883a 	mov	r4,r2
  8039a0:	180b883a 	mov	r5,r3
  8039a4:	a5c00044 	addi	r23,r20,1
  8039a8:	b53fd91e 	bne	r22,r20,803910 <__alt_data_end+0xff803910>
  8039ac:	100d883a 	mov	r6,r2
  8039b0:	180f883a 	mov	r7,r3
  8039b4:	1009883a 	mov	r4,r2
  8039b8:	180b883a 	mov	r5,r3
  8039bc:	080ae4c0 	call	80ae4c <__adddf3>
  8039c0:	100d883a 	mov	r6,r2
  8039c4:	180f883a 	mov	r7,r3
  8039c8:	8009883a 	mov	r4,r16
  8039cc:	880b883a 	mov	r5,r17
  8039d0:	1027883a 	mov	r19,r2
  8039d4:	1825883a 	mov	r18,r3
  8039d8:	080c22c0 	call	80c22c <__ledf2>
  8039dc:	10000816 	blt	r2,zero,803a00 <_dtoa_r+0x948>
  8039e0:	980d883a 	mov	r6,r19
  8039e4:	900f883a 	mov	r7,r18
  8039e8:	8009883a 	mov	r4,r16
  8039ec:	880b883a 	mov	r5,r17
  8039f0:	080c0c80 	call	80c0c8 <__eqdf2>
  8039f4:	103f5a1e 	bne	r2,zero,803760 <__alt_data_end+0xff803760>
  8039f8:	ad40004c 	andi	r21,r21,1
  8039fc:	a83f5826 	beq	r21,zero,803760 <__alt_data_end+0xff803760>
  803a00:	bd3fffc3 	ldbu	r20,-1(r23)
  803a04:	b8bfffc4 	addi	r2,r23,-1
  803a08:	1007883a 	mov	r3,r2
  803a0c:	01400e44 	movi	r5,57
  803a10:	d9800717 	ldw	r6,28(sp)
  803a14:	00000506 	br	803a2c <_dtoa_r+0x974>
  803a18:	18ffffc4 	addi	r3,r3,-1
  803a1c:	11824726 	beq	r2,r6,80433c <_dtoa_r+0x1284>
  803a20:	1d000003 	ldbu	r20,0(r3)
  803a24:	102f883a 	mov	r23,r2
  803a28:	10bfffc4 	addi	r2,r2,-1
  803a2c:	a1003fcc 	andi	r4,r20,255
  803a30:	2100201c 	xori	r4,r4,128
  803a34:	213fe004 	addi	r4,r4,-128
  803a38:	217ff726 	beq	r4,r5,803a18 <__alt_data_end+0xff803a18>
  803a3c:	a2000044 	addi	r8,r20,1
  803a40:	12000005 	stb	r8,0(r2)
  803a44:	003f4606 	br	803760 <__alt_data_end+0xff803760>
  803a48:	d9000b17 	ldw	r4,44(sp)
  803a4c:	2000c826 	beq	r4,zero,803d70 <_dtoa_r+0xcb8>
  803a50:	d9800317 	ldw	r6,12(sp)
  803a54:	00c00044 	movi	r3,1
  803a58:	1980f90e 	bge	r3,r6,803e40 <_dtoa_r+0xd88>
  803a5c:	d8800617 	ldw	r2,24(sp)
  803a60:	d8c00a17 	ldw	r3,40(sp)
  803a64:	157fffc4 	addi	r21,r2,-1
  803a68:	1d41f316 	blt	r3,r21,804238 <_dtoa_r+0x1180>
  803a6c:	1d6bc83a 	sub	r21,r3,r21
  803a70:	d9c00617 	ldw	r7,24(sp)
  803a74:	3802aa16 	blt	r7,zero,804520 <_dtoa_r+0x1468>
  803a78:	dd000817 	ldw	r20,32(sp)
  803a7c:	d8800617 	ldw	r2,24(sp)
  803a80:	d8c00817 	ldw	r3,32(sp)
  803a84:	01400044 	movi	r5,1
  803a88:	e009883a 	mov	r4,fp
  803a8c:	1887883a 	add	r3,r3,r2
  803a90:	d8c00815 	stw	r3,32(sp)
  803a94:	b0ad883a 	add	r22,r22,r2
  803a98:	0806ba40 	call	806ba4 <__i2b>
  803a9c:	1023883a 	mov	r17,r2
  803aa0:	a0000826 	beq	r20,zero,803ac4 <_dtoa_r+0xa0c>
  803aa4:	0580070e 	bge	zero,r22,803ac4 <_dtoa_r+0xa0c>
  803aa8:	a005883a 	mov	r2,r20
  803aac:	b500b916 	blt	r22,r20,803d94 <_dtoa_r+0xcdc>
  803ab0:	d9000817 	ldw	r4,32(sp)
  803ab4:	a0a9c83a 	sub	r20,r20,r2
  803ab8:	b0adc83a 	sub	r22,r22,r2
  803abc:	2089c83a 	sub	r4,r4,r2
  803ac0:	d9000815 	stw	r4,32(sp)
  803ac4:	d9800a17 	ldw	r6,40(sp)
  803ac8:	0181810e 	bge	zero,r6,8040d0 <_dtoa_r+0x1018>
  803acc:	d9c00b17 	ldw	r7,44(sp)
  803ad0:	3800b326 	beq	r7,zero,803da0 <_dtoa_r+0xce8>
  803ad4:	a800b226 	beq	r21,zero,803da0 <_dtoa_r+0xce8>
  803ad8:	880b883a 	mov	r5,r17
  803adc:	a80d883a 	mov	r6,r21
  803ae0:	e009883a 	mov	r4,fp
  803ae4:	0806e6c0 	call	806e6c <__pow5mult>
  803ae8:	d9800917 	ldw	r6,36(sp)
  803aec:	100b883a 	mov	r5,r2
  803af0:	e009883a 	mov	r4,fp
  803af4:	1023883a 	mov	r17,r2
  803af8:	0806be00 	call	806be0 <__multiply>
  803afc:	1021883a 	mov	r16,r2
  803b00:	d8800a17 	ldw	r2,40(sp)
  803b04:	d9400917 	ldw	r5,36(sp)
  803b08:	e009883a 	mov	r4,fp
  803b0c:	1545c83a 	sub	r2,r2,r21
  803b10:	d8800a15 	stw	r2,40(sp)
  803b14:	08068180 	call	806818 <_Bfree>
  803b18:	d8c00a17 	ldw	r3,40(sp)
  803b1c:	18009f1e 	bne	r3,zero,803d9c <_dtoa_r+0xce4>
  803b20:	05c00044 	movi	r23,1
  803b24:	e009883a 	mov	r4,fp
  803b28:	b80b883a 	mov	r5,r23
  803b2c:	0806ba40 	call	806ba4 <__i2b>
  803b30:	d9000d17 	ldw	r4,52(sp)
  803b34:	102b883a 	mov	r21,r2
  803b38:	2000ce26 	beq	r4,zero,803e74 <_dtoa_r+0xdbc>
  803b3c:	200d883a 	mov	r6,r4
  803b40:	100b883a 	mov	r5,r2
  803b44:	e009883a 	mov	r4,fp
  803b48:	0806e6c0 	call	806e6c <__pow5mult>
  803b4c:	d9800317 	ldw	r6,12(sp)
  803b50:	102b883a 	mov	r21,r2
  803b54:	b981810e 	bge	r23,r6,80415c <_dtoa_r+0x10a4>
  803b58:	0027883a 	mov	r19,zero
  803b5c:	a8800417 	ldw	r2,16(r21)
  803b60:	05c00804 	movi	r23,32
  803b64:	10800104 	addi	r2,r2,4
  803b68:	1085883a 	add	r2,r2,r2
  803b6c:	1085883a 	add	r2,r2,r2
  803b70:	a885883a 	add	r2,r21,r2
  803b74:	11000017 	ldw	r4,0(r2)
  803b78:	0806a8c0 	call	806a8c <__hi0bits>
  803b7c:	b885c83a 	sub	r2,r23,r2
  803b80:	1585883a 	add	r2,r2,r22
  803b84:	108007cc 	andi	r2,r2,31
  803b88:	1000b326 	beq	r2,zero,803e58 <_dtoa_r+0xda0>
  803b8c:	00c00804 	movi	r3,32
  803b90:	1887c83a 	sub	r3,r3,r2
  803b94:	01000104 	movi	r4,4
  803b98:	20c2cd0e 	bge	r4,r3,8046d0 <_dtoa_r+0x1618>
  803b9c:	00c00704 	movi	r3,28
  803ba0:	1885c83a 	sub	r2,r3,r2
  803ba4:	d8c00817 	ldw	r3,32(sp)
  803ba8:	a0a9883a 	add	r20,r20,r2
  803bac:	b0ad883a 	add	r22,r22,r2
  803bb0:	1887883a 	add	r3,r3,r2
  803bb4:	d8c00815 	stw	r3,32(sp)
  803bb8:	d9800817 	ldw	r6,32(sp)
  803bbc:	0180040e 	bge	zero,r6,803bd0 <_dtoa_r+0xb18>
  803bc0:	800b883a 	mov	r5,r16
  803bc4:	e009883a 	mov	r4,fp
  803bc8:	0806fac0 	call	806fac <__lshift>
  803bcc:	1021883a 	mov	r16,r2
  803bd0:	0580050e 	bge	zero,r22,803be8 <_dtoa_r+0xb30>
  803bd4:	a80b883a 	mov	r5,r21
  803bd8:	b00d883a 	mov	r6,r22
  803bdc:	e009883a 	mov	r4,fp
  803be0:	0806fac0 	call	806fac <__lshift>
  803be4:	102b883a 	mov	r21,r2
  803be8:	d9c00e17 	ldw	r7,56(sp)
  803bec:	3801211e 	bne	r7,zero,804074 <_dtoa_r+0xfbc>
  803bf0:	d9800617 	ldw	r6,24(sp)
  803bf4:	0181380e 	bge	zero,r6,8040d8 <_dtoa_r+0x1020>
  803bf8:	d8c00b17 	ldw	r3,44(sp)
  803bfc:	1800ab1e 	bne	r3,zero,803eac <_dtoa_r+0xdf4>
  803c00:	dc800717 	ldw	r18,28(sp)
  803c04:	dcc00617 	ldw	r19,24(sp)
  803c08:	9029883a 	mov	r20,r18
  803c0c:	00000206 	br	803c18 <_dtoa_r+0xb60>
  803c10:	08068400 	call	806840 <__multadd>
  803c14:	1021883a 	mov	r16,r2
  803c18:	a80b883a 	mov	r5,r21
  803c1c:	8009883a 	mov	r4,r16
  803c20:	0802e900 	call	802e90 <quorem>
  803c24:	10800c04 	addi	r2,r2,48
  803c28:	90800005 	stb	r2,0(r18)
  803c2c:	94800044 	addi	r18,r18,1
  803c30:	9507c83a 	sub	r3,r18,r20
  803c34:	000f883a 	mov	r7,zero
  803c38:	01800284 	movi	r6,10
  803c3c:	800b883a 	mov	r5,r16
  803c40:	e009883a 	mov	r4,fp
  803c44:	1cfff216 	blt	r3,r19,803c10 <__alt_data_end+0xff803c10>
  803c48:	1011883a 	mov	r8,r2
  803c4c:	d8800617 	ldw	r2,24(sp)
  803c50:	0082370e 	bge	zero,r2,804530 <_dtoa_r+0x1478>
  803c54:	d9000717 	ldw	r4,28(sp)
  803c58:	0025883a 	mov	r18,zero
  803c5c:	20af883a 	add	r23,r4,r2
  803c60:	01800044 	movi	r6,1
  803c64:	800b883a 	mov	r5,r16
  803c68:	e009883a 	mov	r4,fp
  803c6c:	da001715 	stw	r8,92(sp)
  803c70:	0806fac0 	call	806fac <__lshift>
  803c74:	a80b883a 	mov	r5,r21
  803c78:	1009883a 	mov	r4,r2
  803c7c:	d8800915 	stw	r2,36(sp)
  803c80:	08070f40 	call	8070f4 <__mcmp>
  803c84:	da001717 	ldw	r8,92(sp)
  803c88:	0081800e 	bge	zero,r2,80428c <_dtoa_r+0x11d4>
  803c8c:	b93fffc3 	ldbu	r4,-1(r23)
  803c90:	b8bfffc4 	addi	r2,r23,-1
  803c94:	1007883a 	mov	r3,r2
  803c98:	01800e44 	movi	r6,57
  803c9c:	d9c00717 	ldw	r7,28(sp)
  803ca0:	00000506 	br	803cb8 <_dtoa_r+0xc00>
  803ca4:	18ffffc4 	addi	r3,r3,-1
  803ca8:	11c12326 	beq	r2,r7,804138 <_dtoa_r+0x1080>
  803cac:	19000003 	ldbu	r4,0(r3)
  803cb0:	102f883a 	mov	r23,r2
  803cb4:	10bfffc4 	addi	r2,r2,-1
  803cb8:	21403fcc 	andi	r5,r4,255
  803cbc:	2940201c 	xori	r5,r5,128
  803cc0:	297fe004 	addi	r5,r5,-128
  803cc4:	29bff726 	beq	r5,r6,803ca4 <__alt_data_end+0xff803ca4>
  803cc8:	21000044 	addi	r4,r4,1
  803ccc:	11000005 	stb	r4,0(r2)
  803cd0:	a80b883a 	mov	r5,r21
  803cd4:	e009883a 	mov	r4,fp
  803cd8:	08068180 	call	806818 <_Bfree>
  803cdc:	883ea026 	beq	r17,zero,803760 <__alt_data_end+0xff803760>
  803ce0:	90000426 	beq	r18,zero,803cf4 <_dtoa_r+0xc3c>
  803ce4:	94400326 	beq	r18,r17,803cf4 <_dtoa_r+0xc3c>
  803ce8:	900b883a 	mov	r5,r18
  803cec:	e009883a 	mov	r4,fp
  803cf0:	08068180 	call	806818 <_Bfree>
  803cf4:	880b883a 	mov	r5,r17
  803cf8:	e009883a 	mov	r4,fp
  803cfc:	08068180 	call	806818 <_Bfree>
  803d00:	003e9706 	br	803760 <__alt_data_end+0xff803760>
  803d04:	01800044 	movi	r6,1
  803d08:	d9800e15 	stw	r6,56(sp)
  803d0c:	003d9606 	br	803368 <__alt_data_end+0xff803368>
  803d10:	d8800817 	ldw	r2,32(sp)
  803d14:	d8c00517 	ldw	r3,20(sp)
  803d18:	d8000d15 	stw	zero,52(sp)
  803d1c:	10c5c83a 	sub	r2,r2,r3
  803d20:	00c9c83a 	sub	r4,zero,r3
  803d24:	d8800815 	stw	r2,32(sp)
  803d28:	d9000a15 	stw	r4,40(sp)
  803d2c:	003d9706 	br	80338c <__alt_data_end+0xff80338c>
  803d30:	05adc83a 	sub	r22,zero,r22
  803d34:	dd800815 	stw	r22,32(sp)
  803d38:	002d883a 	mov	r22,zero
  803d3c:	003d8e06 	br	803378 <__alt_data_end+0xff803378>
  803d40:	d9000517 	ldw	r4,20(sp)
  803d44:	080d5080 	call	80d508 <__floatsidf>
  803d48:	100d883a 	mov	r6,r2
  803d4c:	180f883a 	mov	r7,r3
  803d50:	a009883a 	mov	r4,r20
  803d54:	880b883a 	mov	r5,r17
  803d58:	080c0c80 	call	80c0c8 <__eqdf2>
  803d5c:	103d7126 	beq	r2,zero,803324 <__alt_data_end+0xff803324>
  803d60:	d9c00517 	ldw	r7,20(sp)
  803d64:	39ffffc4 	addi	r7,r7,-1
  803d68:	d9c00515 	stw	r7,20(sp)
  803d6c:	003d6d06 	br	803324 <__alt_data_end+0xff803324>
  803d70:	dd400a17 	ldw	r21,40(sp)
  803d74:	dd000817 	ldw	r20,32(sp)
  803d78:	0023883a 	mov	r17,zero
  803d7c:	003f4806 	br	803aa0 <__alt_data_end+0xff803aa0>
  803d80:	10e3c83a 	sub	r17,r2,r3
  803d84:	9448983a 	sll	r4,r18,r17
  803d88:	003d3206 	br	803254 <__alt_data_end+0xff803254>
  803d8c:	d8000e15 	stw	zero,56(sp)
  803d90:	003d7506 	br	803368 <__alt_data_end+0xff803368>
  803d94:	b005883a 	mov	r2,r22
  803d98:	003f4506 	br	803ab0 <__alt_data_end+0xff803ab0>
  803d9c:	dc000915 	stw	r16,36(sp)
  803da0:	d9800a17 	ldw	r6,40(sp)
  803da4:	d9400917 	ldw	r5,36(sp)
  803da8:	e009883a 	mov	r4,fp
  803dac:	0806e6c0 	call	806e6c <__pow5mult>
  803db0:	1021883a 	mov	r16,r2
  803db4:	003f5a06 	br	803b20 <__alt_data_end+0xff803b20>
  803db8:	01c00044 	movi	r7,1
  803dbc:	d9c00b15 	stw	r7,44(sp)
  803dc0:	d8802217 	ldw	r2,136(sp)
  803dc4:	0081280e 	bge	zero,r2,804268 <_dtoa_r+0x11b0>
  803dc8:	100d883a 	mov	r6,r2
  803dcc:	1021883a 	mov	r16,r2
  803dd0:	d8800c15 	stw	r2,48(sp)
  803dd4:	d8800615 	stw	r2,24(sp)
  803dd8:	003d8806 	br	8033fc <__alt_data_end+0xff8033fc>
  803ddc:	d8800617 	ldw	r2,24(sp)
  803de0:	00be9b16 	blt	zero,r2,803850 <__alt_data_end+0xff803850>
  803de4:	10010f1e 	bne	r2,zero,804224 <_dtoa_r+0x116c>
  803de8:	880b883a 	mov	r5,r17
  803dec:	000d883a 	mov	r6,zero
  803df0:	01d00534 	movhi	r7,16404
  803df4:	8009883a 	mov	r4,r16
  803df8:	080c3200 	call	80c320 <__muldf3>
  803dfc:	900d883a 	mov	r6,r18
  803e00:	980f883a 	mov	r7,r19
  803e04:	1009883a 	mov	r4,r2
  803e08:	180b883a 	mov	r5,r3
  803e0c:	080c1500 	call	80c150 <__gedf2>
  803e10:	002b883a 	mov	r21,zero
  803e14:	0023883a 	mov	r17,zero
  803e18:	1000bf16 	blt	r2,zero,804118 <_dtoa_r+0x1060>
  803e1c:	d9802217 	ldw	r6,136(sp)
  803e20:	ddc00717 	ldw	r23,28(sp)
  803e24:	018c303a 	nor	r6,zero,r6
  803e28:	d9800515 	stw	r6,20(sp)
  803e2c:	a80b883a 	mov	r5,r21
  803e30:	e009883a 	mov	r4,fp
  803e34:	08068180 	call	806818 <_Bfree>
  803e38:	883e4926 	beq	r17,zero,803760 <__alt_data_end+0xff803760>
  803e3c:	003fad06 	br	803cf4 <__alt_data_end+0xff803cf4>
  803e40:	d9c01117 	ldw	r7,68(sp)
  803e44:	3801bc26 	beq	r7,zero,804538 <_dtoa_r+0x1480>
  803e48:	10810cc4 	addi	r2,r2,1075
  803e4c:	dd400a17 	ldw	r21,40(sp)
  803e50:	dd000817 	ldw	r20,32(sp)
  803e54:	003f0a06 	br	803a80 <__alt_data_end+0xff803a80>
  803e58:	00800704 	movi	r2,28
  803e5c:	d9000817 	ldw	r4,32(sp)
  803e60:	a0a9883a 	add	r20,r20,r2
  803e64:	b0ad883a 	add	r22,r22,r2
  803e68:	2089883a 	add	r4,r4,r2
  803e6c:	d9000815 	stw	r4,32(sp)
  803e70:	003f5106 	br	803bb8 <__alt_data_end+0xff803bb8>
  803e74:	d8c00317 	ldw	r3,12(sp)
  803e78:	b8c1fc0e 	bge	r23,r3,80466c <_dtoa_r+0x15b4>
  803e7c:	0027883a 	mov	r19,zero
  803e80:	b805883a 	mov	r2,r23
  803e84:	003f3e06 	br	803b80 <__alt_data_end+0xff803b80>
  803e88:	880b883a 	mov	r5,r17
  803e8c:	e009883a 	mov	r4,fp
  803e90:	000f883a 	mov	r7,zero
  803e94:	01800284 	movi	r6,10
  803e98:	08068400 	call	806840 <__multadd>
  803e9c:	d9000c17 	ldw	r4,48(sp)
  803ea0:	1023883a 	mov	r17,r2
  803ea4:	0102040e 	bge	zero,r4,8046b8 <_dtoa_r+0x1600>
  803ea8:	d9000615 	stw	r4,24(sp)
  803eac:	0500050e 	bge	zero,r20,803ec4 <_dtoa_r+0xe0c>
  803eb0:	880b883a 	mov	r5,r17
  803eb4:	a00d883a 	mov	r6,r20
  803eb8:	e009883a 	mov	r4,fp
  803ebc:	0806fac0 	call	806fac <__lshift>
  803ec0:	1023883a 	mov	r17,r2
  803ec4:	9801241e 	bne	r19,zero,804358 <_dtoa_r+0x12a0>
  803ec8:	8829883a 	mov	r20,r17
  803ecc:	d9000617 	ldw	r4,24(sp)
  803ed0:	dcc00717 	ldw	r19,28(sp)
  803ed4:	9480004c 	andi	r18,r18,1
  803ed8:	20bfffc4 	addi	r2,r4,-1
  803edc:	9885883a 	add	r2,r19,r2
  803ee0:	d8800415 	stw	r2,16(sp)
  803ee4:	dc800615 	stw	r18,24(sp)
  803ee8:	a80b883a 	mov	r5,r21
  803eec:	8009883a 	mov	r4,r16
  803ef0:	0802e900 	call	802e90 <quorem>
  803ef4:	880b883a 	mov	r5,r17
  803ef8:	8009883a 	mov	r4,r16
  803efc:	102f883a 	mov	r23,r2
  803f00:	08070f40 	call	8070f4 <__mcmp>
  803f04:	a80b883a 	mov	r5,r21
  803f08:	a00d883a 	mov	r6,r20
  803f0c:	e009883a 	mov	r4,fp
  803f10:	102d883a 	mov	r22,r2
  803f14:	08071540 	call	807154 <__mdiff>
  803f18:	1007883a 	mov	r3,r2
  803f1c:	10800317 	ldw	r2,12(r2)
  803f20:	bc800c04 	addi	r18,r23,48
  803f24:	180b883a 	mov	r5,r3
  803f28:	10004e1e 	bne	r2,zero,804064 <_dtoa_r+0xfac>
  803f2c:	8009883a 	mov	r4,r16
  803f30:	d8c01615 	stw	r3,88(sp)
  803f34:	08070f40 	call	8070f4 <__mcmp>
  803f38:	d8c01617 	ldw	r3,88(sp)
  803f3c:	e009883a 	mov	r4,fp
  803f40:	d8801615 	stw	r2,88(sp)
  803f44:	180b883a 	mov	r5,r3
  803f48:	08068180 	call	806818 <_Bfree>
  803f4c:	d8801617 	ldw	r2,88(sp)
  803f50:	1000041e 	bne	r2,zero,803f64 <_dtoa_r+0xeac>
  803f54:	d9800317 	ldw	r6,12(sp)
  803f58:	3000021e 	bne	r6,zero,803f64 <_dtoa_r+0xeac>
  803f5c:	d8c00617 	ldw	r3,24(sp)
  803f60:	18003726 	beq	r3,zero,804040 <_dtoa_r+0xf88>
  803f64:	b0002016 	blt	r22,zero,803fe8 <_dtoa_r+0xf30>
  803f68:	b000041e 	bne	r22,zero,803f7c <_dtoa_r+0xec4>
  803f6c:	d9000317 	ldw	r4,12(sp)
  803f70:	2000021e 	bne	r4,zero,803f7c <_dtoa_r+0xec4>
  803f74:	d8c00617 	ldw	r3,24(sp)
  803f78:	18001b26 	beq	r3,zero,803fe8 <_dtoa_r+0xf30>
  803f7c:	00810716 	blt	zero,r2,80439c <_dtoa_r+0x12e4>
  803f80:	d8c00417 	ldw	r3,16(sp)
  803f84:	9d800044 	addi	r22,r19,1
  803f88:	9c800005 	stb	r18,0(r19)
  803f8c:	b02f883a 	mov	r23,r22
  803f90:	98c10626 	beq	r19,r3,8043ac <_dtoa_r+0x12f4>
  803f94:	800b883a 	mov	r5,r16
  803f98:	000f883a 	mov	r7,zero
  803f9c:	01800284 	movi	r6,10
  803fa0:	e009883a 	mov	r4,fp
  803fa4:	08068400 	call	806840 <__multadd>
  803fa8:	1021883a 	mov	r16,r2
  803fac:	000f883a 	mov	r7,zero
  803fb0:	01800284 	movi	r6,10
  803fb4:	880b883a 	mov	r5,r17
  803fb8:	e009883a 	mov	r4,fp
  803fbc:	8d002526 	beq	r17,r20,804054 <_dtoa_r+0xf9c>
  803fc0:	08068400 	call	806840 <__multadd>
  803fc4:	a00b883a 	mov	r5,r20
  803fc8:	000f883a 	mov	r7,zero
  803fcc:	01800284 	movi	r6,10
  803fd0:	e009883a 	mov	r4,fp
  803fd4:	1023883a 	mov	r17,r2
  803fd8:	08068400 	call	806840 <__multadd>
  803fdc:	1029883a 	mov	r20,r2
  803fe0:	b027883a 	mov	r19,r22
  803fe4:	003fc006 	br	803ee8 <__alt_data_end+0xff803ee8>
  803fe8:	9011883a 	mov	r8,r18
  803fec:	00800e0e 	bge	zero,r2,804028 <_dtoa_r+0xf70>
  803ff0:	800b883a 	mov	r5,r16
  803ff4:	01800044 	movi	r6,1
  803ff8:	e009883a 	mov	r4,fp
  803ffc:	da001715 	stw	r8,92(sp)
  804000:	0806fac0 	call	806fac <__lshift>
  804004:	a80b883a 	mov	r5,r21
  804008:	1009883a 	mov	r4,r2
  80400c:	1021883a 	mov	r16,r2
  804010:	08070f40 	call	8070f4 <__mcmp>
  804014:	da001717 	ldw	r8,92(sp)
  804018:	0081960e 	bge	zero,r2,804674 <_dtoa_r+0x15bc>
  80401c:	00800e44 	movi	r2,57
  804020:	40817026 	beq	r8,r2,8045e4 <_dtoa_r+0x152c>
  804024:	ba000c44 	addi	r8,r23,49
  804028:	8825883a 	mov	r18,r17
  80402c:	9dc00044 	addi	r23,r19,1
  804030:	9a000005 	stb	r8,0(r19)
  804034:	a023883a 	mov	r17,r20
  804038:	dc000915 	stw	r16,36(sp)
  80403c:	003f2406 	br	803cd0 <__alt_data_end+0xff803cd0>
  804040:	00800e44 	movi	r2,57
  804044:	9011883a 	mov	r8,r18
  804048:	90816626 	beq	r18,r2,8045e4 <_dtoa_r+0x152c>
  80404c:	05bff516 	blt	zero,r22,804024 <__alt_data_end+0xff804024>
  804050:	003ff506 	br	804028 <__alt_data_end+0xff804028>
  804054:	08068400 	call	806840 <__multadd>
  804058:	1023883a 	mov	r17,r2
  80405c:	1029883a 	mov	r20,r2
  804060:	003fdf06 	br	803fe0 <__alt_data_end+0xff803fe0>
  804064:	e009883a 	mov	r4,fp
  804068:	08068180 	call	806818 <_Bfree>
  80406c:	00800044 	movi	r2,1
  804070:	003fbc06 	br	803f64 <__alt_data_end+0xff803f64>
  804074:	a80b883a 	mov	r5,r21
  804078:	8009883a 	mov	r4,r16
  80407c:	08070f40 	call	8070f4 <__mcmp>
  804080:	103edb0e 	bge	r2,zero,803bf0 <__alt_data_end+0xff803bf0>
  804084:	800b883a 	mov	r5,r16
  804088:	000f883a 	mov	r7,zero
  80408c:	01800284 	movi	r6,10
  804090:	e009883a 	mov	r4,fp
  804094:	08068400 	call	806840 <__multadd>
  804098:	1021883a 	mov	r16,r2
  80409c:	d8800517 	ldw	r2,20(sp)
  8040a0:	d8c00b17 	ldw	r3,44(sp)
  8040a4:	10bfffc4 	addi	r2,r2,-1
  8040a8:	d8800515 	stw	r2,20(sp)
  8040ac:	183f761e 	bne	r3,zero,803e88 <__alt_data_end+0xff803e88>
  8040b0:	d9000c17 	ldw	r4,48(sp)
  8040b4:	0101730e 	bge	zero,r4,804684 <_dtoa_r+0x15cc>
  8040b8:	d9000615 	stw	r4,24(sp)
  8040bc:	003ed006 	br	803c00 <__alt_data_end+0xff803c00>
  8040c0:	00800084 	movi	r2,2
  8040c4:	3081861e 	bne	r6,r2,8046e0 <_dtoa_r+0x1628>
  8040c8:	d8000b15 	stw	zero,44(sp)
  8040cc:	003f3c06 	br	803dc0 <__alt_data_end+0xff803dc0>
  8040d0:	dc000917 	ldw	r16,36(sp)
  8040d4:	003e9206 	br	803b20 <__alt_data_end+0xff803b20>
  8040d8:	d9c00317 	ldw	r7,12(sp)
  8040dc:	00800084 	movi	r2,2
  8040e0:	11fec50e 	bge	r2,r7,803bf8 <__alt_data_end+0xff803bf8>
  8040e4:	d9000617 	ldw	r4,24(sp)
  8040e8:	20013c1e 	bne	r4,zero,8045dc <_dtoa_r+0x1524>
  8040ec:	a80b883a 	mov	r5,r21
  8040f0:	000f883a 	mov	r7,zero
  8040f4:	01800144 	movi	r6,5
  8040f8:	e009883a 	mov	r4,fp
  8040fc:	08068400 	call	806840 <__multadd>
  804100:	100b883a 	mov	r5,r2
  804104:	8009883a 	mov	r4,r16
  804108:	102b883a 	mov	r21,r2
  80410c:	08070f40 	call	8070f4 <__mcmp>
  804110:	dc000915 	stw	r16,36(sp)
  804114:	00bf410e 	bge	zero,r2,803e1c <__alt_data_end+0xff803e1c>
  804118:	d9c00717 	ldw	r7,28(sp)
  80411c:	00800c44 	movi	r2,49
  804120:	38800005 	stb	r2,0(r7)
  804124:	d8800517 	ldw	r2,20(sp)
  804128:	3dc00044 	addi	r23,r7,1
  80412c:	10800044 	addi	r2,r2,1
  804130:	d8800515 	stw	r2,20(sp)
  804134:	003f3d06 	br	803e2c <__alt_data_end+0xff803e2c>
  804138:	d9800517 	ldw	r6,20(sp)
  80413c:	d9c00717 	ldw	r7,28(sp)
  804140:	00800c44 	movi	r2,49
  804144:	31800044 	addi	r6,r6,1
  804148:	d9800515 	stw	r6,20(sp)
  80414c:	38800005 	stb	r2,0(r7)
  804150:	003edf06 	br	803cd0 <__alt_data_end+0xff803cd0>
  804154:	d8000b15 	stw	zero,44(sp)
  804158:	003c9f06 	br	8033d8 <__alt_data_end+0xff8033d8>
  80415c:	903e7e1e 	bne	r18,zero,803b58 <__alt_data_end+0xff803b58>
  804160:	00800434 	movhi	r2,16
  804164:	10bfffc4 	addi	r2,r2,-1
  804168:	9884703a 	and	r2,r19,r2
  80416c:	1000ea1e 	bne	r2,zero,804518 <_dtoa_r+0x1460>
  804170:	9cdffc2c 	andhi	r19,r19,32752
  804174:	9800e826 	beq	r19,zero,804518 <_dtoa_r+0x1460>
  804178:	d9c00817 	ldw	r7,32(sp)
  80417c:	b5800044 	addi	r22,r22,1
  804180:	04c00044 	movi	r19,1
  804184:	39c00044 	addi	r7,r7,1
  804188:	d9c00815 	stw	r7,32(sp)
  80418c:	d8800d17 	ldw	r2,52(sp)
  804190:	103e721e 	bne	r2,zero,803b5c <__alt_data_end+0xff803b5c>
  804194:	00800044 	movi	r2,1
  804198:	003e7906 	br	803b80 <__alt_data_end+0xff803b80>
  80419c:	8009883a 	mov	r4,r16
  8041a0:	080d5080 	call	80d508 <__floatsidf>
  8041a4:	d9800f17 	ldw	r6,60(sp)
  8041a8:	d9c01017 	ldw	r7,64(sp)
  8041ac:	1009883a 	mov	r4,r2
  8041b0:	180b883a 	mov	r5,r3
  8041b4:	080c3200 	call	80c320 <__muldf3>
  8041b8:	000d883a 	mov	r6,zero
  8041bc:	01d00734 	movhi	r7,16412
  8041c0:	1009883a 	mov	r4,r2
  8041c4:	180b883a 	mov	r5,r3
  8041c8:	080ae4c0 	call	80ae4c <__adddf3>
  8041cc:	047f3034 	movhi	r17,64704
  8041d0:	1021883a 	mov	r16,r2
  8041d4:	1c63883a 	add	r17,r3,r17
  8041d8:	d9000f17 	ldw	r4,60(sp)
  8041dc:	d9401017 	ldw	r5,64(sp)
  8041e0:	000d883a 	mov	r6,zero
  8041e4:	01d00534 	movhi	r7,16404
  8041e8:	080cb8c0 	call	80cb8c <__subdf3>
  8041ec:	800d883a 	mov	r6,r16
  8041f0:	880f883a 	mov	r7,r17
  8041f4:	1009883a 	mov	r4,r2
  8041f8:	180b883a 	mov	r5,r3
  8041fc:	102b883a 	mov	r21,r2
  804200:	1829883a 	mov	r20,r3
  804204:	080c1500 	call	80c150 <__gedf2>
  804208:	00806c16 	blt	zero,r2,8043bc <_dtoa_r+0x1304>
  80420c:	89e0003c 	xorhi	r7,r17,32768
  804210:	800d883a 	mov	r6,r16
  804214:	a809883a 	mov	r4,r21
  804218:	a00b883a 	mov	r5,r20
  80421c:	080c22c0 	call	80c22c <__ledf2>
  804220:	103d7e0e 	bge	r2,zero,80381c <__alt_data_end+0xff80381c>
  804224:	002b883a 	mov	r21,zero
  804228:	0023883a 	mov	r17,zero
  80422c:	003efb06 	br	803e1c <__alt_data_end+0xff803e1c>
  804230:	d8800717 	ldw	r2,28(sp)
  804234:	003bd006 	br	803178 <__alt_data_end+0xff803178>
  804238:	d9000a17 	ldw	r4,40(sp)
  80423c:	d9800d17 	ldw	r6,52(sp)
  804240:	dd400a15 	stw	r21,40(sp)
  804244:	a905c83a 	sub	r2,r21,r4
  804248:	308d883a 	add	r6,r6,r2
  80424c:	d9800d15 	stw	r6,52(sp)
  804250:	002b883a 	mov	r21,zero
  804254:	003e0606 	br	803a70 <__alt_data_end+0xff803a70>
  804258:	9023883a 	mov	r17,r18
  80425c:	9829883a 	mov	r20,r19
  804260:	04000084 	movi	r16,2
  804264:	003c9206 	br	8034b0 <__alt_data_end+0xff8034b0>
  804268:	04000044 	movi	r16,1
  80426c:	dc000c15 	stw	r16,48(sp)
  804270:	dc000615 	stw	r16,24(sp)
  804274:	dc002215 	stw	r16,136(sp)
  804278:	e0001115 	stw	zero,68(fp)
  80427c:	000b883a 	mov	r5,zero
  804280:	003c6906 	br	803428 <__alt_data_end+0xff803428>
  804284:	3021883a 	mov	r16,r6
  804288:	003ffb06 	br	804278 <__alt_data_end+0xff804278>
  80428c:	1000021e 	bne	r2,zero,804298 <_dtoa_r+0x11e0>
  804290:	4200004c 	andi	r8,r8,1
  804294:	403e7d1e 	bne	r8,zero,803c8c <__alt_data_end+0xff803c8c>
  804298:	01000c04 	movi	r4,48
  80429c:	00000106 	br	8042a4 <_dtoa_r+0x11ec>
  8042a0:	102f883a 	mov	r23,r2
  8042a4:	b8bfffc4 	addi	r2,r23,-1
  8042a8:	10c00007 	ldb	r3,0(r2)
  8042ac:	193ffc26 	beq	r3,r4,8042a0 <__alt_data_end+0xff8042a0>
  8042b0:	003e8706 	br	803cd0 <__alt_data_end+0xff803cd0>
  8042b4:	d8800517 	ldw	r2,20(sp)
  8042b8:	00a3c83a 	sub	r17,zero,r2
  8042bc:	8800a426 	beq	r17,zero,804550 <_dtoa_r+0x1498>
  8042c0:	888003cc 	andi	r2,r17,15
  8042c4:	100490fa 	slli	r2,r2,3
  8042c8:	00c02074 	movhi	r3,129
  8042cc:	18c39204 	addi	r3,r3,3656
  8042d0:	1885883a 	add	r2,r3,r2
  8042d4:	11800017 	ldw	r6,0(r2)
  8042d8:	11c00117 	ldw	r7,4(r2)
  8042dc:	9009883a 	mov	r4,r18
  8042e0:	980b883a 	mov	r5,r19
  8042e4:	8823d13a 	srai	r17,r17,4
  8042e8:	080c3200 	call	80c320 <__muldf3>
  8042ec:	d8800f15 	stw	r2,60(sp)
  8042f0:	d8c01015 	stw	r3,64(sp)
  8042f4:	8800e826 	beq	r17,zero,804698 <_dtoa_r+0x15e0>
  8042f8:	05002074 	movhi	r20,129
  8042fc:	a5038804 	addi	r20,r20,3616
  804300:	04000084 	movi	r16,2
  804304:	8980004c 	andi	r6,r17,1
  804308:	1009883a 	mov	r4,r2
  80430c:	8823d07a 	srai	r17,r17,1
  804310:	180b883a 	mov	r5,r3
  804314:	30000426 	beq	r6,zero,804328 <_dtoa_r+0x1270>
  804318:	a1800017 	ldw	r6,0(r20)
  80431c:	a1c00117 	ldw	r7,4(r20)
  804320:	84000044 	addi	r16,r16,1
  804324:	080c3200 	call	80c320 <__muldf3>
  804328:	a5000204 	addi	r20,r20,8
  80432c:	883ff51e 	bne	r17,zero,804304 <__alt_data_end+0xff804304>
  804330:	d8800f15 	stw	r2,60(sp)
  804334:	d8c01015 	stw	r3,64(sp)
  804338:	003c7606 	br	803514 <__alt_data_end+0xff803514>
  80433c:	00c00c04 	movi	r3,48
  804340:	10c00005 	stb	r3,0(r2)
  804344:	d8c00517 	ldw	r3,20(sp)
  804348:	bd3fffc3 	ldbu	r20,-1(r23)
  80434c:	18c00044 	addi	r3,r3,1
  804350:	d8c00515 	stw	r3,20(sp)
  804354:	003db906 	br	803a3c <__alt_data_end+0xff803a3c>
  804358:	89400117 	ldw	r5,4(r17)
  80435c:	e009883a 	mov	r4,fp
  804360:	08067700 	call	806770 <_Balloc>
  804364:	89800417 	ldw	r6,16(r17)
  804368:	89400304 	addi	r5,r17,12
  80436c:	11000304 	addi	r4,r2,12
  804370:	31800084 	addi	r6,r6,2
  804374:	318d883a 	add	r6,r6,r6
  804378:	318d883a 	add	r6,r6,r6
  80437c:	1027883a 	mov	r19,r2
  804380:	08063a40 	call	8063a4 <memcpy>
  804384:	01800044 	movi	r6,1
  804388:	980b883a 	mov	r5,r19
  80438c:	e009883a 	mov	r4,fp
  804390:	0806fac0 	call	806fac <__lshift>
  804394:	1029883a 	mov	r20,r2
  804398:	003ecc06 	br	803ecc <__alt_data_end+0xff803ecc>
  80439c:	00800e44 	movi	r2,57
  8043a0:	90809026 	beq	r18,r2,8045e4 <_dtoa_r+0x152c>
  8043a4:	92000044 	addi	r8,r18,1
  8043a8:	003f1f06 	br	804028 <__alt_data_end+0xff804028>
  8043ac:	9011883a 	mov	r8,r18
  8043b0:	8825883a 	mov	r18,r17
  8043b4:	a023883a 	mov	r17,r20
  8043b8:	003e2906 	br	803c60 <__alt_data_end+0xff803c60>
  8043bc:	002b883a 	mov	r21,zero
  8043c0:	0023883a 	mov	r17,zero
  8043c4:	003f5406 	br	804118 <__alt_data_end+0xff804118>
  8043c8:	61bfffc4 	addi	r6,r12,-1
  8043cc:	300490fa 	slli	r2,r6,3
  8043d0:	00c02074 	movhi	r3,129
  8043d4:	18c39204 	addi	r3,r3,3656
  8043d8:	1885883a 	add	r2,r3,r2
  8043dc:	11000017 	ldw	r4,0(r2)
  8043e0:	11400117 	ldw	r5,4(r2)
  8043e4:	d8800717 	ldw	r2,28(sp)
  8043e8:	880f883a 	mov	r7,r17
  8043ec:	d9801215 	stw	r6,72(sp)
  8043f0:	800d883a 	mov	r6,r16
  8043f4:	db001615 	stw	r12,88(sp)
  8043f8:	15c00044 	addi	r23,r2,1
  8043fc:	080c3200 	call	80c320 <__muldf3>
  804400:	d9401017 	ldw	r5,64(sp)
  804404:	d9000f17 	ldw	r4,60(sp)
  804408:	d8c01515 	stw	r3,84(sp)
  80440c:	d8801415 	stw	r2,80(sp)
  804410:	080d4880 	call	80d488 <__fixdfsi>
  804414:	1009883a 	mov	r4,r2
  804418:	1021883a 	mov	r16,r2
  80441c:	080d5080 	call	80d508 <__floatsidf>
  804420:	d9000f17 	ldw	r4,60(sp)
  804424:	d9401017 	ldw	r5,64(sp)
  804428:	100d883a 	mov	r6,r2
  80442c:	180f883a 	mov	r7,r3
  804430:	080cb8c0 	call	80cb8c <__subdf3>
  804434:	1829883a 	mov	r20,r3
  804438:	d8c00717 	ldw	r3,28(sp)
  80443c:	84000c04 	addi	r16,r16,48
  804440:	1023883a 	mov	r17,r2
  804444:	1c000005 	stb	r16,0(r3)
  804448:	db001617 	ldw	r12,88(sp)
  80444c:	00800044 	movi	r2,1
  804450:	60802226 	beq	r12,r2,8044dc <_dtoa_r+0x1424>
  804454:	d9c00717 	ldw	r7,28(sp)
  804458:	8805883a 	mov	r2,r17
  80445c:	b82b883a 	mov	r21,r23
  804460:	3b19883a 	add	r12,r7,r12
  804464:	6023883a 	mov	r17,r12
  804468:	a007883a 	mov	r3,r20
  80446c:	dc800f15 	stw	r18,60(sp)
  804470:	000d883a 	mov	r6,zero
  804474:	01d00934 	movhi	r7,16420
  804478:	1009883a 	mov	r4,r2
  80447c:	180b883a 	mov	r5,r3
  804480:	080c3200 	call	80c320 <__muldf3>
  804484:	180b883a 	mov	r5,r3
  804488:	1009883a 	mov	r4,r2
  80448c:	1829883a 	mov	r20,r3
  804490:	1025883a 	mov	r18,r2
  804494:	080d4880 	call	80d488 <__fixdfsi>
  804498:	1009883a 	mov	r4,r2
  80449c:	1021883a 	mov	r16,r2
  8044a0:	080d5080 	call	80d508 <__floatsidf>
  8044a4:	100d883a 	mov	r6,r2
  8044a8:	180f883a 	mov	r7,r3
  8044ac:	9009883a 	mov	r4,r18
  8044b0:	a00b883a 	mov	r5,r20
  8044b4:	84000c04 	addi	r16,r16,48
  8044b8:	080cb8c0 	call	80cb8c <__subdf3>
  8044bc:	ad400044 	addi	r21,r21,1
  8044c0:	ac3fffc5 	stb	r16,-1(r21)
  8044c4:	ac7fea1e 	bne	r21,r17,804470 <__alt_data_end+0xff804470>
  8044c8:	1023883a 	mov	r17,r2
  8044cc:	d8801217 	ldw	r2,72(sp)
  8044d0:	dc800f17 	ldw	r18,60(sp)
  8044d4:	1829883a 	mov	r20,r3
  8044d8:	b8af883a 	add	r23,r23,r2
  8044dc:	d9001417 	ldw	r4,80(sp)
  8044e0:	d9401517 	ldw	r5,84(sp)
  8044e4:	000d883a 	mov	r6,zero
  8044e8:	01cff834 	movhi	r7,16352
  8044ec:	080ae4c0 	call	80ae4c <__adddf3>
  8044f0:	880d883a 	mov	r6,r17
  8044f4:	a00f883a 	mov	r7,r20
  8044f8:	1009883a 	mov	r4,r2
  8044fc:	180b883a 	mov	r5,r3
  804500:	080c22c0 	call	80c22c <__ledf2>
  804504:	10003e0e 	bge	r2,zero,804600 <_dtoa_r+0x1548>
  804508:	d9001317 	ldw	r4,76(sp)
  80450c:	bd3fffc3 	ldbu	r20,-1(r23)
  804510:	d9000515 	stw	r4,20(sp)
  804514:	003d3b06 	br	803a04 <__alt_data_end+0xff803a04>
  804518:	0027883a 	mov	r19,zero
  80451c:	003f1b06 	br	80418c <__alt_data_end+0xff80418c>
  804520:	d8800817 	ldw	r2,32(sp)
  804524:	11e9c83a 	sub	r20,r2,r7
  804528:	0005883a 	mov	r2,zero
  80452c:	003d5406 	br	803a80 <__alt_data_end+0xff803a80>
  804530:	00800044 	movi	r2,1
  804534:	003dc706 	br	803c54 <__alt_data_end+0xff803c54>
  804538:	d8c00217 	ldw	r3,8(sp)
  80453c:	00800d84 	movi	r2,54
  804540:	dd400a17 	ldw	r21,40(sp)
  804544:	10c5c83a 	sub	r2,r2,r3
  804548:	dd000817 	ldw	r20,32(sp)
  80454c:	003d4c06 	br	803a80 <__alt_data_end+0xff803a80>
  804550:	dc800f15 	stw	r18,60(sp)
  804554:	dcc01015 	stw	r19,64(sp)
  804558:	04000084 	movi	r16,2
  80455c:	003bed06 	br	803514 <__alt_data_end+0xff803514>
  804560:	d9000617 	ldw	r4,24(sp)
  804564:	203f0d26 	beq	r4,zero,80419c <__alt_data_end+0xff80419c>
  804568:	d9800c17 	ldw	r6,48(sp)
  80456c:	01bcab0e 	bge	zero,r6,80381c <__alt_data_end+0xff80381c>
  804570:	d9401017 	ldw	r5,64(sp)
  804574:	d9000f17 	ldw	r4,60(sp)
  804578:	000d883a 	mov	r6,zero
  80457c:	01d00934 	movhi	r7,16420
  804580:	080c3200 	call	80c320 <__muldf3>
  804584:	81000044 	addi	r4,r16,1
  804588:	d8800f15 	stw	r2,60(sp)
  80458c:	d8c01015 	stw	r3,64(sp)
  804590:	080d5080 	call	80d508 <__floatsidf>
  804594:	d9800f17 	ldw	r6,60(sp)
  804598:	d9c01017 	ldw	r7,64(sp)
  80459c:	1009883a 	mov	r4,r2
  8045a0:	180b883a 	mov	r5,r3
  8045a4:	080c3200 	call	80c320 <__muldf3>
  8045a8:	01d00734 	movhi	r7,16412
  8045ac:	000d883a 	mov	r6,zero
  8045b0:	1009883a 	mov	r4,r2
  8045b4:	180b883a 	mov	r5,r3
  8045b8:	080ae4c0 	call	80ae4c <__adddf3>
  8045bc:	d9c00517 	ldw	r7,20(sp)
  8045c0:	047f3034 	movhi	r17,64704
  8045c4:	1021883a 	mov	r16,r2
  8045c8:	39ffffc4 	addi	r7,r7,-1
  8045cc:	d9c01315 	stw	r7,76(sp)
  8045d0:	1c63883a 	add	r17,r3,r17
  8045d4:	db000c17 	ldw	r12,48(sp)
  8045d8:	003bea06 	br	803584 <__alt_data_end+0xff803584>
  8045dc:	dc000915 	stw	r16,36(sp)
  8045e0:	003e0e06 	br	803e1c <__alt_data_end+0xff803e1c>
  8045e4:	01000e44 	movi	r4,57
  8045e8:	8825883a 	mov	r18,r17
  8045ec:	9dc00044 	addi	r23,r19,1
  8045f0:	99000005 	stb	r4,0(r19)
  8045f4:	a023883a 	mov	r17,r20
  8045f8:	dc000915 	stw	r16,36(sp)
  8045fc:	003da406 	br	803c90 <__alt_data_end+0xff803c90>
  804600:	d9801417 	ldw	r6,80(sp)
  804604:	d9c01517 	ldw	r7,84(sp)
  804608:	0009883a 	mov	r4,zero
  80460c:	014ff834 	movhi	r5,16352
  804610:	080cb8c0 	call	80cb8c <__subdf3>
  804614:	880d883a 	mov	r6,r17
  804618:	a00f883a 	mov	r7,r20
  80461c:	1009883a 	mov	r4,r2
  804620:	180b883a 	mov	r5,r3
  804624:	080c1500 	call	80c150 <__gedf2>
  804628:	00bc7c0e 	bge	zero,r2,80381c <__alt_data_end+0xff80381c>
  80462c:	01000c04 	movi	r4,48
  804630:	00000106 	br	804638 <_dtoa_r+0x1580>
  804634:	102f883a 	mov	r23,r2
  804638:	b8bfffc4 	addi	r2,r23,-1
  80463c:	10c00007 	ldb	r3,0(r2)
  804640:	193ffc26 	beq	r3,r4,804634 <__alt_data_end+0xff804634>
  804644:	d9801317 	ldw	r6,76(sp)
  804648:	d9800515 	stw	r6,20(sp)
  80464c:	003c4406 	br	803760 <__alt_data_end+0xff803760>
  804650:	d9801317 	ldw	r6,76(sp)
  804654:	d9800515 	stw	r6,20(sp)
  804658:	003cea06 	br	803a04 <__alt_data_end+0xff803a04>
  80465c:	dd800f17 	ldw	r22,60(sp)
  804660:	dcc01017 	ldw	r19,64(sp)
  804664:	dc801217 	ldw	r18,72(sp)
  804668:	003c6c06 	br	80381c <__alt_data_end+0xff80381c>
  80466c:	903e031e 	bne	r18,zero,803e7c <__alt_data_end+0xff803e7c>
  804670:	003ebb06 	br	804160 <__alt_data_end+0xff804160>
  804674:	103e6c1e 	bne	r2,zero,804028 <__alt_data_end+0xff804028>
  804678:	4080004c 	andi	r2,r8,1
  80467c:	103e6a26 	beq	r2,zero,804028 <__alt_data_end+0xff804028>
  804680:	003e6606 	br	80401c <__alt_data_end+0xff80401c>
  804684:	d8c00317 	ldw	r3,12(sp)
  804688:	00800084 	movi	r2,2
  80468c:	10c02916 	blt	r2,r3,804734 <_dtoa_r+0x167c>
  804690:	d9000c17 	ldw	r4,48(sp)
  804694:	003e8806 	br	8040b8 <__alt_data_end+0xff8040b8>
  804698:	04000084 	movi	r16,2
  80469c:	003b9d06 	br	803514 <__alt_data_end+0xff803514>
  8046a0:	d9001317 	ldw	r4,76(sp)
  8046a4:	d9000515 	stw	r4,20(sp)
  8046a8:	003cd606 	br	803a04 <__alt_data_end+0xff803a04>
  8046ac:	d8801317 	ldw	r2,76(sp)
  8046b0:	d8800515 	stw	r2,20(sp)
  8046b4:	003c2a06 	br	803760 <__alt_data_end+0xff803760>
  8046b8:	d9800317 	ldw	r6,12(sp)
  8046bc:	00800084 	movi	r2,2
  8046c0:	11801516 	blt	r2,r6,804718 <_dtoa_r+0x1660>
  8046c4:	d9c00c17 	ldw	r7,48(sp)
  8046c8:	d9c00615 	stw	r7,24(sp)
  8046cc:	003df706 	br	803eac <__alt_data_end+0xff803eac>
  8046d0:	193d3926 	beq	r3,r4,803bb8 <__alt_data_end+0xff803bb8>
  8046d4:	00c00f04 	movi	r3,60
  8046d8:	1885c83a 	sub	r2,r3,r2
  8046dc:	003ddf06 	br	803e5c <__alt_data_end+0xff803e5c>
  8046e0:	e009883a 	mov	r4,fp
  8046e4:	e0001115 	stw	zero,68(fp)
  8046e8:	000b883a 	mov	r5,zero
  8046ec:	08067700 	call	806770 <_Balloc>
  8046f0:	d8800715 	stw	r2,28(sp)
  8046f4:	d8c00717 	ldw	r3,28(sp)
  8046f8:	00bfffc4 	movi	r2,-1
  8046fc:	01000044 	movi	r4,1
  804700:	d8800c15 	stw	r2,48(sp)
  804704:	e0c01015 	stw	r3,64(fp)
  804708:	d9000b15 	stw	r4,44(sp)
  80470c:	d8800615 	stw	r2,24(sp)
  804710:	d8002215 	stw	zero,136(sp)
  804714:	003c4106 	br	80381c <__alt_data_end+0xff80381c>
  804718:	d8c00c17 	ldw	r3,48(sp)
  80471c:	d8c00615 	stw	r3,24(sp)
  804720:	003e7006 	br	8040e4 <__alt_data_end+0xff8040e4>
  804724:	04400044 	movi	r17,1
  804728:	003b2006 	br	8033ac <__alt_data_end+0xff8033ac>
  80472c:	000b883a 	mov	r5,zero
  804730:	003b3d06 	br	803428 <__alt_data_end+0xff803428>
  804734:	d8800c17 	ldw	r2,48(sp)
  804738:	d8800615 	stw	r2,24(sp)
  80473c:	003e6906 	br	8040e4 <__alt_data_end+0xff8040e4>

00804740 <__sflush_r>:
  804740:	2880030b 	ldhu	r2,12(r5)
  804744:	defffb04 	addi	sp,sp,-20
  804748:	dcc00315 	stw	r19,12(sp)
  80474c:	dc400115 	stw	r17,4(sp)
  804750:	dfc00415 	stw	ra,16(sp)
  804754:	dc800215 	stw	r18,8(sp)
  804758:	dc000015 	stw	r16,0(sp)
  80475c:	10c0020c 	andi	r3,r2,8
  804760:	2823883a 	mov	r17,r5
  804764:	2027883a 	mov	r19,r4
  804768:	1800311e 	bne	r3,zero,804830 <__sflush_r+0xf0>
  80476c:	28c00117 	ldw	r3,4(r5)
  804770:	10820014 	ori	r2,r2,2048
  804774:	2880030d 	sth	r2,12(r5)
  804778:	00c04b0e 	bge	zero,r3,8048a8 <__sflush_r+0x168>
  80477c:	8a000a17 	ldw	r8,40(r17)
  804780:	40002326 	beq	r8,zero,804810 <__sflush_r+0xd0>
  804784:	9c000017 	ldw	r16,0(r19)
  804788:	10c4000c 	andi	r3,r2,4096
  80478c:	98000015 	stw	zero,0(r19)
  804790:	18004826 	beq	r3,zero,8048b4 <__sflush_r+0x174>
  804794:	89801417 	ldw	r6,80(r17)
  804798:	10c0010c 	andi	r3,r2,4
  80479c:	18000626 	beq	r3,zero,8047b8 <__sflush_r+0x78>
  8047a0:	88c00117 	ldw	r3,4(r17)
  8047a4:	88800c17 	ldw	r2,48(r17)
  8047a8:	30cdc83a 	sub	r6,r6,r3
  8047ac:	10000226 	beq	r2,zero,8047b8 <__sflush_r+0x78>
  8047b0:	88800f17 	ldw	r2,60(r17)
  8047b4:	308dc83a 	sub	r6,r6,r2
  8047b8:	89400717 	ldw	r5,28(r17)
  8047bc:	000f883a 	mov	r7,zero
  8047c0:	9809883a 	mov	r4,r19
  8047c4:	403ee83a 	callr	r8
  8047c8:	00ffffc4 	movi	r3,-1
  8047cc:	10c04426 	beq	r2,r3,8048e0 <__sflush_r+0x1a0>
  8047d0:	88c0030b 	ldhu	r3,12(r17)
  8047d4:	89000417 	ldw	r4,16(r17)
  8047d8:	88000115 	stw	zero,4(r17)
  8047dc:	197dffcc 	andi	r5,r3,63487
  8047e0:	8940030d 	sth	r5,12(r17)
  8047e4:	89000015 	stw	r4,0(r17)
  8047e8:	18c4000c 	andi	r3,r3,4096
  8047ec:	18002c1e 	bne	r3,zero,8048a0 <__sflush_r+0x160>
  8047f0:	89400c17 	ldw	r5,48(r17)
  8047f4:	9c000015 	stw	r16,0(r19)
  8047f8:	28000526 	beq	r5,zero,804810 <__sflush_r+0xd0>
  8047fc:	88801004 	addi	r2,r17,64
  804800:	28800226 	beq	r5,r2,80480c <__sflush_r+0xcc>
  804804:	9809883a 	mov	r4,r19
  804808:	0804ebc0 	call	804ebc <_free_r>
  80480c:	88000c15 	stw	zero,48(r17)
  804810:	0005883a 	mov	r2,zero
  804814:	dfc00417 	ldw	ra,16(sp)
  804818:	dcc00317 	ldw	r19,12(sp)
  80481c:	dc800217 	ldw	r18,8(sp)
  804820:	dc400117 	ldw	r17,4(sp)
  804824:	dc000017 	ldw	r16,0(sp)
  804828:	dec00504 	addi	sp,sp,20
  80482c:	f800283a 	ret
  804830:	2c800417 	ldw	r18,16(r5)
  804834:	903ff626 	beq	r18,zero,804810 <__alt_data_end+0xff804810>
  804838:	2c000017 	ldw	r16,0(r5)
  80483c:	108000cc 	andi	r2,r2,3
  804840:	2c800015 	stw	r18,0(r5)
  804844:	84a1c83a 	sub	r16,r16,r18
  804848:	1000131e 	bne	r2,zero,804898 <__sflush_r+0x158>
  80484c:	28800517 	ldw	r2,20(r5)
  804850:	88800215 	stw	r2,8(r17)
  804854:	04000316 	blt	zero,r16,804864 <__sflush_r+0x124>
  804858:	003fed06 	br	804810 <__alt_data_end+0xff804810>
  80485c:	90a5883a 	add	r18,r18,r2
  804860:	043feb0e 	bge	zero,r16,804810 <__alt_data_end+0xff804810>
  804864:	88800917 	ldw	r2,36(r17)
  804868:	89400717 	ldw	r5,28(r17)
  80486c:	800f883a 	mov	r7,r16
  804870:	900d883a 	mov	r6,r18
  804874:	9809883a 	mov	r4,r19
  804878:	103ee83a 	callr	r2
  80487c:	80a1c83a 	sub	r16,r16,r2
  804880:	00bff616 	blt	zero,r2,80485c <__alt_data_end+0xff80485c>
  804884:	88c0030b 	ldhu	r3,12(r17)
  804888:	00bfffc4 	movi	r2,-1
  80488c:	18c01014 	ori	r3,r3,64
  804890:	88c0030d 	sth	r3,12(r17)
  804894:	003fdf06 	br	804814 <__alt_data_end+0xff804814>
  804898:	0005883a 	mov	r2,zero
  80489c:	003fec06 	br	804850 <__alt_data_end+0xff804850>
  8048a0:	88801415 	stw	r2,80(r17)
  8048a4:	003fd206 	br	8047f0 <__alt_data_end+0xff8047f0>
  8048a8:	28c00f17 	ldw	r3,60(r5)
  8048ac:	00ffb316 	blt	zero,r3,80477c <__alt_data_end+0xff80477c>
  8048b0:	003fd706 	br	804810 <__alt_data_end+0xff804810>
  8048b4:	89400717 	ldw	r5,28(r17)
  8048b8:	000d883a 	mov	r6,zero
  8048bc:	01c00044 	movi	r7,1
  8048c0:	9809883a 	mov	r4,r19
  8048c4:	403ee83a 	callr	r8
  8048c8:	100d883a 	mov	r6,r2
  8048cc:	00bfffc4 	movi	r2,-1
  8048d0:	30801426 	beq	r6,r2,804924 <__sflush_r+0x1e4>
  8048d4:	8880030b 	ldhu	r2,12(r17)
  8048d8:	8a000a17 	ldw	r8,40(r17)
  8048dc:	003fae06 	br	804798 <__alt_data_end+0xff804798>
  8048e0:	98c00017 	ldw	r3,0(r19)
  8048e4:	183fba26 	beq	r3,zero,8047d0 <__alt_data_end+0xff8047d0>
  8048e8:	01000744 	movi	r4,29
  8048ec:	19000626 	beq	r3,r4,804908 <__sflush_r+0x1c8>
  8048f0:	01000584 	movi	r4,22
  8048f4:	19000426 	beq	r3,r4,804908 <__sflush_r+0x1c8>
  8048f8:	88c0030b 	ldhu	r3,12(r17)
  8048fc:	18c01014 	ori	r3,r3,64
  804900:	88c0030d 	sth	r3,12(r17)
  804904:	003fc306 	br	804814 <__alt_data_end+0xff804814>
  804908:	8880030b 	ldhu	r2,12(r17)
  80490c:	88c00417 	ldw	r3,16(r17)
  804910:	88000115 	stw	zero,4(r17)
  804914:	10bdffcc 	andi	r2,r2,63487
  804918:	8880030d 	sth	r2,12(r17)
  80491c:	88c00015 	stw	r3,0(r17)
  804920:	003fb306 	br	8047f0 <__alt_data_end+0xff8047f0>
  804924:	98800017 	ldw	r2,0(r19)
  804928:	103fea26 	beq	r2,zero,8048d4 <__alt_data_end+0xff8048d4>
  80492c:	00c00744 	movi	r3,29
  804930:	10c00226 	beq	r2,r3,80493c <__sflush_r+0x1fc>
  804934:	00c00584 	movi	r3,22
  804938:	10c0031e 	bne	r2,r3,804948 <__sflush_r+0x208>
  80493c:	9c000015 	stw	r16,0(r19)
  804940:	0005883a 	mov	r2,zero
  804944:	003fb306 	br	804814 <__alt_data_end+0xff804814>
  804948:	88c0030b 	ldhu	r3,12(r17)
  80494c:	3005883a 	mov	r2,r6
  804950:	18c01014 	ori	r3,r3,64
  804954:	88c0030d 	sth	r3,12(r17)
  804958:	003fae06 	br	804814 <__alt_data_end+0xff804814>

0080495c <_fflush_r>:
  80495c:	defffd04 	addi	sp,sp,-12
  804960:	dc000115 	stw	r16,4(sp)
  804964:	dfc00215 	stw	ra,8(sp)
  804968:	2021883a 	mov	r16,r4
  80496c:	20000226 	beq	r4,zero,804978 <_fflush_r+0x1c>
  804970:	20800e17 	ldw	r2,56(r4)
  804974:	10000c26 	beq	r2,zero,8049a8 <_fflush_r+0x4c>
  804978:	2880030f 	ldh	r2,12(r5)
  80497c:	1000051e 	bne	r2,zero,804994 <_fflush_r+0x38>
  804980:	0005883a 	mov	r2,zero
  804984:	dfc00217 	ldw	ra,8(sp)
  804988:	dc000117 	ldw	r16,4(sp)
  80498c:	dec00304 	addi	sp,sp,12
  804990:	f800283a 	ret
  804994:	8009883a 	mov	r4,r16
  804998:	dfc00217 	ldw	ra,8(sp)
  80499c:	dc000117 	ldw	r16,4(sp)
  8049a0:	dec00304 	addi	sp,sp,12
  8049a4:	08047401 	jmpi	804740 <__sflush_r>
  8049a8:	d9400015 	stw	r5,0(sp)
  8049ac:	0804d480 	call	804d48 <__sinit>
  8049b0:	d9400017 	ldw	r5,0(sp)
  8049b4:	003ff006 	br	804978 <__alt_data_end+0xff804978>

008049b8 <fflush>:
  8049b8:	20000526 	beq	r4,zero,8049d0 <fflush+0x18>
  8049bc:	00802074 	movhi	r2,129
  8049c0:	108abd04 	addi	r2,r2,10996
  8049c4:	200b883a 	mov	r5,r4
  8049c8:	11000017 	ldw	r4,0(r2)
  8049cc:	080495c1 	jmpi	80495c <_fflush_r>
  8049d0:	00802074 	movhi	r2,129
  8049d4:	108abc04 	addi	r2,r2,10992
  8049d8:	11000017 	ldw	r4,0(r2)
  8049dc:	01402034 	movhi	r5,128
  8049e0:	29525704 	addi	r5,r5,18780
  8049e4:	08057581 	jmpi	805758 <_fwalk_reent>

008049e8 <__fp_unlock>:
  8049e8:	0005883a 	mov	r2,zero
  8049ec:	f800283a 	ret

008049f0 <_cleanup_r>:
  8049f0:	01402074 	movhi	r5,129
  8049f4:	29663d04 	addi	r5,r5,-26380
  8049f8:	08057581 	jmpi	805758 <_fwalk_reent>

008049fc <__sinit.part.1>:
  8049fc:	defff704 	addi	sp,sp,-36
  804a00:	00c02034 	movhi	r3,128
  804a04:	dfc00815 	stw	ra,32(sp)
  804a08:	ddc00715 	stw	r23,28(sp)
  804a0c:	dd800615 	stw	r22,24(sp)
  804a10:	dd400515 	stw	r21,20(sp)
  804a14:	dd000415 	stw	r20,16(sp)
  804a18:	dcc00315 	stw	r19,12(sp)
  804a1c:	dc800215 	stw	r18,8(sp)
  804a20:	dc400115 	stw	r17,4(sp)
  804a24:	dc000015 	stw	r16,0(sp)
  804a28:	18d27c04 	addi	r3,r3,18928
  804a2c:	24000117 	ldw	r16,4(r4)
  804a30:	20c00f15 	stw	r3,60(r4)
  804a34:	2080bb04 	addi	r2,r4,748
  804a38:	00c000c4 	movi	r3,3
  804a3c:	20c0b915 	stw	r3,740(r4)
  804a40:	2080ba15 	stw	r2,744(r4)
  804a44:	2000b815 	stw	zero,736(r4)
  804a48:	05c00204 	movi	r23,8
  804a4c:	00800104 	movi	r2,4
  804a50:	2025883a 	mov	r18,r4
  804a54:	b80d883a 	mov	r6,r23
  804a58:	81001704 	addi	r4,r16,92
  804a5c:	000b883a 	mov	r5,zero
  804a60:	80000015 	stw	zero,0(r16)
  804a64:	80000115 	stw	zero,4(r16)
  804a68:	80000215 	stw	zero,8(r16)
  804a6c:	8080030d 	sth	r2,12(r16)
  804a70:	80001915 	stw	zero,100(r16)
  804a74:	8000038d 	sth	zero,14(r16)
  804a78:	80000415 	stw	zero,16(r16)
  804a7c:	80000515 	stw	zero,20(r16)
  804a80:	80000615 	stw	zero,24(r16)
  804a84:	08066480 	call	806648 <memset>
  804a88:	05802034 	movhi	r22,128
  804a8c:	94400217 	ldw	r17,8(r18)
  804a90:	05402034 	movhi	r21,128
  804a94:	05002034 	movhi	r20,128
  804a98:	04c02034 	movhi	r19,128
  804a9c:	b59f9504 	addi	r22,r22,32340
  804aa0:	ad5fac04 	addi	r21,r21,32432
  804aa4:	a51fcb04 	addi	r20,r20,32556
  804aa8:	9cdfe204 	addi	r19,r19,32648
  804aac:	85800815 	stw	r22,32(r16)
  804ab0:	85400915 	stw	r21,36(r16)
  804ab4:	85000a15 	stw	r20,40(r16)
  804ab8:	84c00b15 	stw	r19,44(r16)
  804abc:	84000715 	stw	r16,28(r16)
  804ac0:	00800284 	movi	r2,10
  804ac4:	8880030d 	sth	r2,12(r17)
  804ac8:	00800044 	movi	r2,1
  804acc:	b80d883a 	mov	r6,r23
  804ad0:	89001704 	addi	r4,r17,92
  804ad4:	000b883a 	mov	r5,zero
  804ad8:	88000015 	stw	zero,0(r17)
  804adc:	88000115 	stw	zero,4(r17)
  804ae0:	88000215 	stw	zero,8(r17)
  804ae4:	88001915 	stw	zero,100(r17)
  804ae8:	8880038d 	sth	r2,14(r17)
  804aec:	88000415 	stw	zero,16(r17)
  804af0:	88000515 	stw	zero,20(r17)
  804af4:	88000615 	stw	zero,24(r17)
  804af8:	08066480 	call	806648 <memset>
  804afc:	94000317 	ldw	r16,12(r18)
  804b00:	00800484 	movi	r2,18
  804b04:	8c400715 	stw	r17,28(r17)
  804b08:	8d800815 	stw	r22,32(r17)
  804b0c:	8d400915 	stw	r21,36(r17)
  804b10:	8d000a15 	stw	r20,40(r17)
  804b14:	8cc00b15 	stw	r19,44(r17)
  804b18:	8080030d 	sth	r2,12(r16)
  804b1c:	00800084 	movi	r2,2
  804b20:	80000015 	stw	zero,0(r16)
  804b24:	80000115 	stw	zero,4(r16)
  804b28:	80000215 	stw	zero,8(r16)
  804b2c:	80001915 	stw	zero,100(r16)
  804b30:	8080038d 	sth	r2,14(r16)
  804b34:	80000415 	stw	zero,16(r16)
  804b38:	80000515 	stw	zero,20(r16)
  804b3c:	80000615 	stw	zero,24(r16)
  804b40:	b80d883a 	mov	r6,r23
  804b44:	000b883a 	mov	r5,zero
  804b48:	81001704 	addi	r4,r16,92
  804b4c:	08066480 	call	806648 <memset>
  804b50:	00800044 	movi	r2,1
  804b54:	84000715 	stw	r16,28(r16)
  804b58:	85800815 	stw	r22,32(r16)
  804b5c:	85400915 	stw	r21,36(r16)
  804b60:	85000a15 	stw	r20,40(r16)
  804b64:	84c00b15 	stw	r19,44(r16)
  804b68:	90800e15 	stw	r2,56(r18)
  804b6c:	dfc00817 	ldw	ra,32(sp)
  804b70:	ddc00717 	ldw	r23,28(sp)
  804b74:	dd800617 	ldw	r22,24(sp)
  804b78:	dd400517 	ldw	r21,20(sp)
  804b7c:	dd000417 	ldw	r20,16(sp)
  804b80:	dcc00317 	ldw	r19,12(sp)
  804b84:	dc800217 	ldw	r18,8(sp)
  804b88:	dc400117 	ldw	r17,4(sp)
  804b8c:	dc000017 	ldw	r16,0(sp)
  804b90:	dec00904 	addi	sp,sp,36
  804b94:	f800283a 	ret

00804b98 <__fp_lock>:
  804b98:	0005883a 	mov	r2,zero
  804b9c:	f800283a 	ret

00804ba0 <__sfmoreglue>:
  804ba0:	defffc04 	addi	sp,sp,-16
  804ba4:	dc800215 	stw	r18,8(sp)
  804ba8:	2825883a 	mov	r18,r5
  804bac:	dc000015 	stw	r16,0(sp)
  804bb0:	01401a04 	movi	r5,104
  804bb4:	2021883a 	mov	r16,r4
  804bb8:	913fffc4 	addi	r4,r18,-1
  804bbc:	dfc00315 	stw	ra,12(sp)
  804bc0:	dc400115 	stw	r17,4(sp)
  804bc4:	080ae240 	call	80ae24 <__mulsi3>
  804bc8:	8009883a 	mov	r4,r16
  804bcc:	11401d04 	addi	r5,r2,116
  804bd0:	1023883a 	mov	r17,r2
  804bd4:	0805ab40 	call	805ab4 <_malloc_r>
  804bd8:	1021883a 	mov	r16,r2
  804bdc:	10000726 	beq	r2,zero,804bfc <__sfmoreglue+0x5c>
  804be0:	11000304 	addi	r4,r2,12
  804be4:	10000015 	stw	zero,0(r2)
  804be8:	14800115 	stw	r18,4(r2)
  804bec:	11000215 	stw	r4,8(r2)
  804bf0:	89801a04 	addi	r6,r17,104
  804bf4:	000b883a 	mov	r5,zero
  804bf8:	08066480 	call	806648 <memset>
  804bfc:	8005883a 	mov	r2,r16
  804c00:	dfc00317 	ldw	ra,12(sp)
  804c04:	dc800217 	ldw	r18,8(sp)
  804c08:	dc400117 	ldw	r17,4(sp)
  804c0c:	dc000017 	ldw	r16,0(sp)
  804c10:	dec00404 	addi	sp,sp,16
  804c14:	f800283a 	ret

00804c18 <__sfp>:
  804c18:	defffb04 	addi	sp,sp,-20
  804c1c:	dc000015 	stw	r16,0(sp)
  804c20:	04002074 	movhi	r16,129
  804c24:	840abc04 	addi	r16,r16,10992
  804c28:	dcc00315 	stw	r19,12(sp)
  804c2c:	2027883a 	mov	r19,r4
  804c30:	81000017 	ldw	r4,0(r16)
  804c34:	dfc00415 	stw	ra,16(sp)
  804c38:	dc800215 	stw	r18,8(sp)
  804c3c:	20800e17 	ldw	r2,56(r4)
  804c40:	dc400115 	stw	r17,4(sp)
  804c44:	1000021e 	bne	r2,zero,804c50 <__sfp+0x38>
  804c48:	08049fc0 	call	8049fc <__sinit.part.1>
  804c4c:	81000017 	ldw	r4,0(r16)
  804c50:	2480b804 	addi	r18,r4,736
  804c54:	047fffc4 	movi	r17,-1
  804c58:	91000117 	ldw	r4,4(r18)
  804c5c:	94000217 	ldw	r16,8(r18)
  804c60:	213fffc4 	addi	r4,r4,-1
  804c64:	20000a16 	blt	r4,zero,804c90 <__sfp+0x78>
  804c68:	8080030f 	ldh	r2,12(r16)
  804c6c:	10000c26 	beq	r2,zero,804ca0 <__sfp+0x88>
  804c70:	80c01d04 	addi	r3,r16,116
  804c74:	00000206 	br	804c80 <__sfp+0x68>
  804c78:	18bfe60f 	ldh	r2,-104(r3)
  804c7c:	10000826 	beq	r2,zero,804ca0 <__sfp+0x88>
  804c80:	213fffc4 	addi	r4,r4,-1
  804c84:	1c3ffd04 	addi	r16,r3,-12
  804c88:	18c01a04 	addi	r3,r3,104
  804c8c:	247ffa1e 	bne	r4,r17,804c78 <__alt_data_end+0xff804c78>
  804c90:	90800017 	ldw	r2,0(r18)
  804c94:	10001d26 	beq	r2,zero,804d0c <__sfp+0xf4>
  804c98:	1025883a 	mov	r18,r2
  804c9c:	003fee06 	br	804c58 <__alt_data_end+0xff804c58>
  804ca0:	00bfffc4 	movi	r2,-1
  804ca4:	8080038d 	sth	r2,14(r16)
  804ca8:	00800044 	movi	r2,1
  804cac:	8080030d 	sth	r2,12(r16)
  804cb0:	80001915 	stw	zero,100(r16)
  804cb4:	80000015 	stw	zero,0(r16)
  804cb8:	80000215 	stw	zero,8(r16)
  804cbc:	80000115 	stw	zero,4(r16)
  804cc0:	80000415 	stw	zero,16(r16)
  804cc4:	80000515 	stw	zero,20(r16)
  804cc8:	80000615 	stw	zero,24(r16)
  804ccc:	01800204 	movi	r6,8
  804cd0:	000b883a 	mov	r5,zero
  804cd4:	81001704 	addi	r4,r16,92
  804cd8:	08066480 	call	806648 <memset>
  804cdc:	8005883a 	mov	r2,r16
  804ce0:	80000c15 	stw	zero,48(r16)
  804ce4:	80000d15 	stw	zero,52(r16)
  804ce8:	80001115 	stw	zero,68(r16)
  804cec:	80001215 	stw	zero,72(r16)
  804cf0:	dfc00417 	ldw	ra,16(sp)
  804cf4:	dcc00317 	ldw	r19,12(sp)
  804cf8:	dc800217 	ldw	r18,8(sp)
  804cfc:	dc400117 	ldw	r17,4(sp)
  804d00:	dc000017 	ldw	r16,0(sp)
  804d04:	dec00504 	addi	sp,sp,20
  804d08:	f800283a 	ret
  804d0c:	01400104 	movi	r5,4
  804d10:	9809883a 	mov	r4,r19
  804d14:	0804ba00 	call	804ba0 <__sfmoreglue>
  804d18:	90800015 	stw	r2,0(r18)
  804d1c:	103fde1e 	bne	r2,zero,804c98 <__alt_data_end+0xff804c98>
  804d20:	00800304 	movi	r2,12
  804d24:	98800015 	stw	r2,0(r19)
  804d28:	0005883a 	mov	r2,zero
  804d2c:	003ff006 	br	804cf0 <__alt_data_end+0xff804cf0>

00804d30 <_cleanup>:
  804d30:	00802074 	movhi	r2,129
  804d34:	108abc04 	addi	r2,r2,10992
  804d38:	11000017 	ldw	r4,0(r2)
  804d3c:	01402074 	movhi	r5,129
  804d40:	29663d04 	addi	r5,r5,-26380
  804d44:	08057581 	jmpi	805758 <_fwalk_reent>

00804d48 <__sinit>:
  804d48:	20800e17 	ldw	r2,56(r4)
  804d4c:	10000126 	beq	r2,zero,804d54 <__sinit+0xc>
  804d50:	f800283a 	ret
  804d54:	08049fc1 	jmpi	8049fc <__sinit.part.1>

00804d58 <__sfp_lock_acquire>:
  804d58:	f800283a 	ret

00804d5c <__sfp_lock_release>:
  804d5c:	f800283a 	ret

00804d60 <__sinit_lock_acquire>:
  804d60:	f800283a 	ret

00804d64 <__sinit_lock_release>:
  804d64:	f800283a 	ret

00804d68 <__fp_lock_all>:
  804d68:	00802074 	movhi	r2,129
  804d6c:	108abd04 	addi	r2,r2,10996
  804d70:	11000017 	ldw	r4,0(r2)
  804d74:	01402034 	movhi	r5,128
  804d78:	2952e604 	addi	r5,r5,19352
  804d7c:	08056941 	jmpi	805694 <_fwalk>

00804d80 <__fp_unlock_all>:
  804d80:	00802074 	movhi	r2,129
  804d84:	108abd04 	addi	r2,r2,10996
  804d88:	11000017 	ldw	r4,0(r2)
  804d8c:	01402034 	movhi	r5,128
  804d90:	29527a04 	addi	r5,r5,18920
  804d94:	08056941 	jmpi	805694 <_fwalk>

00804d98 <_malloc_trim_r>:
  804d98:	defffb04 	addi	sp,sp,-20
  804d9c:	dcc00315 	stw	r19,12(sp)
  804da0:	04c02074 	movhi	r19,129
  804da4:	dc800215 	stw	r18,8(sp)
  804da8:	dc400115 	stw	r17,4(sp)
  804dac:	dc000015 	stw	r16,0(sp)
  804db0:	dfc00415 	stw	ra,16(sp)
  804db4:	2821883a 	mov	r16,r5
  804db8:	9cc50104 	addi	r19,r19,5124
  804dbc:	2025883a 	mov	r18,r4
  804dc0:	080dc280 	call	80dc28 <__malloc_lock>
  804dc4:	98800217 	ldw	r2,8(r19)
  804dc8:	14400117 	ldw	r17,4(r2)
  804dcc:	00bfff04 	movi	r2,-4
  804dd0:	88a2703a 	and	r17,r17,r2
  804dd4:	8c21c83a 	sub	r16,r17,r16
  804dd8:	8403fbc4 	addi	r16,r16,4079
  804ddc:	8020d33a 	srli	r16,r16,12
  804de0:	0083ffc4 	movi	r2,4095
  804de4:	843fffc4 	addi	r16,r16,-1
  804de8:	8020933a 	slli	r16,r16,12
  804dec:	1400060e 	bge	r2,r16,804e08 <_malloc_trim_r+0x70>
  804df0:	000b883a 	mov	r5,zero
  804df4:	9009883a 	mov	r4,r18
  804df8:	0807e000 	call	807e00 <_sbrk_r>
  804dfc:	98c00217 	ldw	r3,8(r19)
  804e00:	1c47883a 	add	r3,r3,r17
  804e04:	10c00a26 	beq	r2,r3,804e30 <_malloc_trim_r+0x98>
  804e08:	9009883a 	mov	r4,r18
  804e0c:	080dc4c0 	call	80dc4c <__malloc_unlock>
  804e10:	0005883a 	mov	r2,zero
  804e14:	dfc00417 	ldw	ra,16(sp)
  804e18:	dcc00317 	ldw	r19,12(sp)
  804e1c:	dc800217 	ldw	r18,8(sp)
  804e20:	dc400117 	ldw	r17,4(sp)
  804e24:	dc000017 	ldw	r16,0(sp)
  804e28:	dec00504 	addi	sp,sp,20
  804e2c:	f800283a 	ret
  804e30:	040bc83a 	sub	r5,zero,r16
  804e34:	9009883a 	mov	r4,r18
  804e38:	0807e000 	call	807e00 <_sbrk_r>
  804e3c:	00ffffc4 	movi	r3,-1
  804e40:	10c00d26 	beq	r2,r3,804e78 <_malloc_trim_r+0xe0>
  804e44:	00c02074 	movhi	r3,129
  804e48:	18d1d404 	addi	r3,r3,18256
  804e4c:	18800017 	ldw	r2,0(r3)
  804e50:	99000217 	ldw	r4,8(r19)
  804e54:	8c23c83a 	sub	r17,r17,r16
  804e58:	8c400054 	ori	r17,r17,1
  804e5c:	1421c83a 	sub	r16,r2,r16
  804e60:	24400115 	stw	r17,4(r4)
  804e64:	9009883a 	mov	r4,r18
  804e68:	1c000015 	stw	r16,0(r3)
  804e6c:	080dc4c0 	call	80dc4c <__malloc_unlock>
  804e70:	00800044 	movi	r2,1
  804e74:	003fe706 	br	804e14 <__alt_data_end+0xff804e14>
  804e78:	000b883a 	mov	r5,zero
  804e7c:	9009883a 	mov	r4,r18
  804e80:	0807e000 	call	807e00 <_sbrk_r>
  804e84:	99000217 	ldw	r4,8(r19)
  804e88:	014003c4 	movi	r5,15
  804e8c:	1107c83a 	sub	r3,r2,r4
  804e90:	28ffdd0e 	bge	r5,r3,804e08 <__alt_data_end+0xff804e08>
  804e94:	01402074 	movhi	r5,129
  804e98:	294abf04 	addi	r5,r5,11004
  804e9c:	29400017 	ldw	r5,0(r5)
  804ea0:	18c00054 	ori	r3,r3,1
  804ea4:	20c00115 	stw	r3,4(r4)
  804ea8:	00c02074 	movhi	r3,129
  804eac:	1145c83a 	sub	r2,r2,r5
  804eb0:	18d1d404 	addi	r3,r3,18256
  804eb4:	18800015 	stw	r2,0(r3)
  804eb8:	003fd306 	br	804e08 <__alt_data_end+0xff804e08>

00804ebc <_free_r>:
  804ebc:	28004126 	beq	r5,zero,804fc4 <_free_r+0x108>
  804ec0:	defffd04 	addi	sp,sp,-12
  804ec4:	dc400115 	stw	r17,4(sp)
  804ec8:	dc000015 	stw	r16,0(sp)
  804ecc:	2023883a 	mov	r17,r4
  804ed0:	2821883a 	mov	r16,r5
  804ed4:	dfc00215 	stw	ra,8(sp)
  804ed8:	080dc280 	call	80dc28 <__malloc_lock>
  804edc:	81ffff17 	ldw	r7,-4(r16)
  804ee0:	00bfff84 	movi	r2,-2
  804ee4:	01002074 	movhi	r4,129
  804ee8:	81bffe04 	addi	r6,r16,-8
  804eec:	3884703a 	and	r2,r7,r2
  804ef0:	21050104 	addi	r4,r4,5124
  804ef4:	308b883a 	add	r5,r6,r2
  804ef8:	2a400117 	ldw	r9,4(r5)
  804efc:	22000217 	ldw	r8,8(r4)
  804f00:	00ffff04 	movi	r3,-4
  804f04:	48c6703a 	and	r3,r9,r3
  804f08:	2a005726 	beq	r5,r8,805068 <_free_r+0x1ac>
  804f0c:	28c00115 	stw	r3,4(r5)
  804f10:	39c0004c 	andi	r7,r7,1
  804f14:	3800091e 	bne	r7,zero,804f3c <_free_r+0x80>
  804f18:	823ffe17 	ldw	r8,-8(r16)
  804f1c:	22400204 	addi	r9,r4,8
  804f20:	320dc83a 	sub	r6,r6,r8
  804f24:	31c00217 	ldw	r7,8(r6)
  804f28:	1205883a 	add	r2,r2,r8
  804f2c:	3a406526 	beq	r7,r9,8050c4 <_free_r+0x208>
  804f30:	32000317 	ldw	r8,12(r6)
  804f34:	3a000315 	stw	r8,12(r7)
  804f38:	41c00215 	stw	r7,8(r8)
  804f3c:	28cf883a 	add	r7,r5,r3
  804f40:	39c00117 	ldw	r7,4(r7)
  804f44:	39c0004c 	andi	r7,r7,1
  804f48:	38003a26 	beq	r7,zero,805034 <_free_r+0x178>
  804f4c:	10c00054 	ori	r3,r2,1
  804f50:	30c00115 	stw	r3,4(r6)
  804f54:	3087883a 	add	r3,r6,r2
  804f58:	18800015 	stw	r2,0(r3)
  804f5c:	00c07fc4 	movi	r3,511
  804f60:	18801936 	bltu	r3,r2,804fc8 <_free_r+0x10c>
  804f64:	1004d0fa 	srli	r2,r2,3
  804f68:	01c00044 	movi	r7,1
  804f6c:	21400117 	ldw	r5,4(r4)
  804f70:	10c00044 	addi	r3,r2,1
  804f74:	18c7883a 	add	r3,r3,r3
  804f78:	1005d0ba 	srai	r2,r2,2
  804f7c:	18c7883a 	add	r3,r3,r3
  804f80:	18c7883a 	add	r3,r3,r3
  804f84:	1907883a 	add	r3,r3,r4
  804f88:	3884983a 	sll	r2,r7,r2
  804f8c:	19c00017 	ldw	r7,0(r3)
  804f90:	1a3ffe04 	addi	r8,r3,-8
  804f94:	1144b03a 	or	r2,r2,r5
  804f98:	32000315 	stw	r8,12(r6)
  804f9c:	31c00215 	stw	r7,8(r6)
  804fa0:	20800115 	stw	r2,4(r4)
  804fa4:	19800015 	stw	r6,0(r3)
  804fa8:	39800315 	stw	r6,12(r7)
  804fac:	8809883a 	mov	r4,r17
  804fb0:	dfc00217 	ldw	ra,8(sp)
  804fb4:	dc400117 	ldw	r17,4(sp)
  804fb8:	dc000017 	ldw	r16,0(sp)
  804fbc:	dec00304 	addi	sp,sp,12
  804fc0:	080dc4c1 	jmpi	80dc4c <__malloc_unlock>
  804fc4:	f800283a 	ret
  804fc8:	100ad27a 	srli	r5,r2,9
  804fcc:	00c00104 	movi	r3,4
  804fd0:	19404a36 	bltu	r3,r5,8050fc <_free_r+0x240>
  804fd4:	100ad1ba 	srli	r5,r2,6
  804fd8:	28c00e44 	addi	r3,r5,57
  804fdc:	18c7883a 	add	r3,r3,r3
  804fe0:	29400e04 	addi	r5,r5,56
  804fe4:	18c7883a 	add	r3,r3,r3
  804fe8:	18c7883a 	add	r3,r3,r3
  804fec:	1909883a 	add	r4,r3,r4
  804ff0:	20c00017 	ldw	r3,0(r4)
  804ff4:	01c02074 	movhi	r7,129
  804ff8:	213ffe04 	addi	r4,r4,-8
  804ffc:	39c50104 	addi	r7,r7,5124
  805000:	20c04426 	beq	r4,r3,805114 <_free_r+0x258>
  805004:	01ffff04 	movi	r7,-4
  805008:	19400117 	ldw	r5,4(r3)
  80500c:	29ca703a 	and	r5,r5,r7
  805010:	1140022e 	bgeu	r2,r5,80501c <_free_r+0x160>
  805014:	18c00217 	ldw	r3,8(r3)
  805018:	20fffb1e 	bne	r4,r3,805008 <__alt_data_end+0xff805008>
  80501c:	19000317 	ldw	r4,12(r3)
  805020:	31000315 	stw	r4,12(r6)
  805024:	30c00215 	stw	r3,8(r6)
  805028:	21800215 	stw	r6,8(r4)
  80502c:	19800315 	stw	r6,12(r3)
  805030:	003fde06 	br	804fac <__alt_data_end+0xff804fac>
  805034:	29c00217 	ldw	r7,8(r5)
  805038:	10c5883a 	add	r2,r2,r3
  80503c:	00c02074 	movhi	r3,129
  805040:	18c50304 	addi	r3,r3,5132
  805044:	38c03b26 	beq	r7,r3,805134 <_free_r+0x278>
  805048:	2a000317 	ldw	r8,12(r5)
  80504c:	11400054 	ori	r5,r2,1
  805050:	3087883a 	add	r3,r6,r2
  805054:	3a000315 	stw	r8,12(r7)
  805058:	41c00215 	stw	r7,8(r8)
  80505c:	31400115 	stw	r5,4(r6)
  805060:	18800015 	stw	r2,0(r3)
  805064:	003fbd06 	br	804f5c <__alt_data_end+0xff804f5c>
  805068:	39c0004c 	andi	r7,r7,1
  80506c:	10c5883a 	add	r2,r2,r3
  805070:	3800071e 	bne	r7,zero,805090 <_free_r+0x1d4>
  805074:	81fffe17 	ldw	r7,-8(r16)
  805078:	31cdc83a 	sub	r6,r6,r7
  80507c:	30c00317 	ldw	r3,12(r6)
  805080:	31400217 	ldw	r5,8(r6)
  805084:	11c5883a 	add	r2,r2,r7
  805088:	28c00315 	stw	r3,12(r5)
  80508c:	19400215 	stw	r5,8(r3)
  805090:	10c00054 	ori	r3,r2,1
  805094:	30c00115 	stw	r3,4(r6)
  805098:	00c02074 	movhi	r3,129
  80509c:	18cac004 	addi	r3,r3,11008
  8050a0:	18c00017 	ldw	r3,0(r3)
  8050a4:	21800215 	stw	r6,8(r4)
  8050a8:	10ffc036 	bltu	r2,r3,804fac <__alt_data_end+0xff804fac>
  8050ac:	00802074 	movhi	r2,129
  8050b0:	1091cb04 	addi	r2,r2,18220
  8050b4:	11400017 	ldw	r5,0(r2)
  8050b8:	8809883a 	mov	r4,r17
  8050bc:	0804d980 	call	804d98 <_malloc_trim_r>
  8050c0:	003fba06 	br	804fac <__alt_data_end+0xff804fac>
  8050c4:	28c9883a 	add	r4,r5,r3
  8050c8:	21000117 	ldw	r4,4(r4)
  8050cc:	2100004c 	andi	r4,r4,1
  8050d0:	2000391e 	bne	r4,zero,8051b8 <_free_r+0x2fc>
  8050d4:	29c00217 	ldw	r7,8(r5)
  8050d8:	29000317 	ldw	r4,12(r5)
  8050dc:	1885883a 	add	r2,r3,r2
  8050e0:	10c00054 	ori	r3,r2,1
  8050e4:	39000315 	stw	r4,12(r7)
  8050e8:	21c00215 	stw	r7,8(r4)
  8050ec:	30c00115 	stw	r3,4(r6)
  8050f0:	308d883a 	add	r6,r6,r2
  8050f4:	30800015 	stw	r2,0(r6)
  8050f8:	003fac06 	br	804fac <__alt_data_end+0xff804fac>
  8050fc:	00c00504 	movi	r3,20
  805100:	19401536 	bltu	r3,r5,805158 <_free_r+0x29c>
  805104:	28c01704 	addi	r3,r5,92
  805108:	18c7883a 	add	r3,r3,r3
  80510c:	294016c4 	addi	r5,r5,91
  805110:	003fb406 	br	804fe4 <__alt_data_end+0xff804fe4>
  805114:	280bd0ba 	srai	r5,r5,2
  805118:	00c00044 	movi	r3,1
  80511c:	38800117 	ldw	r2,4(r7)
  805120:	194a983a 	sll	r5,r3,r5
  805124:	2007883a 	mov	r3,r4
  805128:	2884b03a 	or	r2,r5,r2
  80512c:	38800115 	stw	r2,4(r7)
  805130:	003fbb06 	br	805020 <__alt_data_end+0xff805020>
  805134:	21800515 	stw	r6,20(r4)
  805138:	21800415 	stw	r6,16(r4)
  80513c:	10c00054 	ori	r3,r2,1
  805140:	31c00315 	stw	r7,12(r6)
  805144:	31c00215 	stw	r7,8(r6)
  805148:	30c00115 	stw	r3,4(r6)
  80514c:	308d883a 	add	r6,r6,r2
  805150:	30800015 	stw	r2,0(r6)
  805154:	003f9506 	br	804fac <__alt_data_end+0xff804fac>
  805158:	00c01504 	movi	r3,84
  80515c:	19400536 	bltu	r3,r5,805174 <_free_r+0x2b8>
  805160:	100ad33a 	srli	r5,r2,12
  805164:	28c01bc4 	addi	r3,r5,111
  805168:	18c7883a 	add	r3,r3,r3
  80516c:	29401b84 	addi	r5,r5,110
  805170:	003f9c06 	br	804fe4 <__alt_data_end+0xff804fe4>
  805174:	00c05504 	movi	r3,340
  805178:	19400536 	bltu	r3,r5,805190 <_free_r+0x2d4>
  80517c:	100ad3fa 	srli	r5,r2,15
  805180:	28c01e04 	addi	r3,r5,120
  805184:	18c7883a 	add	r3,r3,r3
  805188:	29401dc4 	addi	r5,r5,119
  80518c:	003f9506 	br	804fe4 <__alt_data_end+0xff804fe4>
  805190:	00c15504 	movi	r3,1364
  805194:	19400536 	bltu	r3,r5,8051ac <_free_r+0x2f0>
  805198:	100ad4ba 	srli	r5,r2,18
  80519c:	28c01f44 	addi	r3,r5,125
  8051a0:	18c7883a 	add	r3,r3,r3
  8051a4:	29401f04 	addi	r5,r5,124
  8051a8:	003f8e06 	br	804fe4 <__alt_data_end+0xff804fe4>
  8051ac:	00c03f84 	movi	r3,254
  8051b0:	01401f84 	movi	r5,126
  8051b4:	003f8b06 	br	804fe4 <__alt_data_end+0xff804fe4>
  8051b8:	10c00054 	ori	r3,r2,1
  8051bc:	30c00115 	stw	r3,4(r6)
  8051c0:	308d883a 	add	r6,r6,r2
  8051c4:	30800015 	stw	r2,0(r6)
  8051c8:	003f7806 	br	804fac <__alt_data_end+0xff804fac>

008051cc <__sfvwrite_r>:
  8051cc:	30800217 	ldw	r2,8(r6)
  8051d0:	10006726 	beq	r2,zero,805370 <__sfvwrite_r+0x1a4>
  8051d4:	28c0030b 	ldhu	r3,12(r5)
  8051d8:	defff404 	addi	sp,sp,-48
  8051dc:	dd400715 	stw	r21,28(sp)
  8051e0:	dd000615 	stw	r20,24(sp)
  8051e4:	dc000215 	stw	r16,8(sp)
  8051e8:	dfc00b15 	stw	ra,44(sp)
  8051ec:	df000a15 	stw	fp,40(sp)
  8051f0:	ddc00915 	stw	r23,36(sp)
  8051f4:	dd800815 	stw	r22,32(sp)
  8051f8:	dcc00515 	stw	r19,20(sp)
  8051fc:	dc800415 	stw	r18,16(sp)
  805200:	dc400315 	stw	r17,12(sp)
  805204:	1880020c 	andi	r2,r3,8
  805208:	2821883a 	mov	r16,r5
  80520c:	202b883a 	mov	r21,r4
  805210:	3029883a 	mov	r20,r6
  805214:	10002726 	beq	r2,zero,8052b4 <__sfvwrite_r+0xe8>
  805218:	28800417 	ldw	r2,16(r5)
  80521c:	10002526 	beq	r2,zero,8052b4 <__sfvwrite_r+0xe8>
  805220:	1880008c 	andi	r2,r3,2
  805224:	a4400017 	ldw	r17,0(r20)
  805228:	10002a26 	beq	r2,zero,8052d4 <__sfvwrite_r+0x108>
  80522c:	05a00034 	movhi	r22,32768
  805230:	0027883a 	mov	r19,zero
  805234:	0025883a 	mov	r18,zero
  805238:	b5bf0004 	addi	r22,r22,-1024
  80523c:	980d883a 	mov	r6,r19
  805240:	a809883a 	mov	r4,r21
  805244:	90004626 	beq	r18,zero,805360 <__sfvwrite_r+0x194>
  805248:	900f883a 	mov	r7,r18
  80524c:	b480022e 	bgeu	r22,r18,805258 <__sfvwrite_r+0x8c>
  805250:	01e00034 	movhi	r7,32768
  805254:	39ff0004 	addi	r7,r7,-1024
  805258:	80800917 	ldw	r2,36(r16)
  80525c:	81400717 	ldw	r5,28(r16)
  805260:	103ee83a 	callr	r2
  805264:	00805a0e 	bge	zero,r2,8053d0 <__sfvwrite_r+0x204>
  805268:	a0c00217 	ldw	r3,8(r20)
  80526c:	98a7883a 	add	r19,r19,r2
  805270:	90a5c83a 	sub	r18,r18,r2
  805274:	1885c83a 	sub	r2,r3,r2
  805278:	a0800215 	stw	r2,8(r20)
  80527c:	103fef1e 	bne	r2,zero,80523c <__alt_data_end+0xff80523c>
  805280:	0005883a 	mov	r2,zero
  805284:	dfc00b17 	ldw	ra,44(sp)
  805288:	df000a17 	ldw	fp,40(sp)
  80528c:	ddc00917 	ldw	r23,36(sp)
  805290:	dd800817 	ldw	r22,32(sp)
  805294:	dd400717 	ldw	r21,28(sp)
  805298:	dd000617 	ldw	r20,24(sp)
  80529c:	dcc00517 	ldw	r19,20(sp)
  8052a0:	dc800417 	ldw	r18,16(sp)
  8052a4:	dc400317 	ldw	r17,12(sp)
  8052a8:	dc000217 	ldw	r16,8(sp)
  8052ac:	dec00c04 	addi	sp,sp,48
  8052b0:	f800283a 	ret
  8052b4:	800b883a 	mov	r5,r16
  8052b8:	a809883a 	mov	r4,r21
  8052bc:	0802d3c0 	call	802d3c <__swsetup_r>
  8052c0:	1000ee1e 	bne	r2,zero,80567c <__sfvwrite_r+0x4b0>
  8052c4:	80c0030b 	ldhu	r3,12(r16)
  8052c8:	a4400017 	ldw	r17,0(r20)
  8052cc:	1880008c 	andi	r2,r3,2
  8052d0:	103fd61e 	bne	r2,zero,80522c <__alt_data_end+0xff80522c>
  8052d4:	1880004c 	andi	r2,r3,1
  8052d8:	1000421e 	bne	r2,zero,8053e4 <__sfvwrite_r+0x218>
  8052dc:	0039883a 	mov	fp,zero
  8052e0:	0025883a 	mov	r18,zero
  8052e4:	90001a26 	beq	r18,zero,805350 <__sfvwrite_r+0x184>
  8052e8:	1880800c 	andi	r2,r3,512
  8052ec:	84c00217 	ldw	r19,8(r16)
  8052f0:	10002126 	beq	r2,zero,805378 <__sfvwrite_r+0x1ac>
  8052f4:	982f883a 	mov	r23,r19
  8052f8:	94c09636 	bltu	r18,r19,805554 <__sfvwrite_r+0x388>
  8052fc:	1881200c 	andi	r2,r3,1152
  805300:	1000a11e 	bne	r2,zero,805588 <__sfvwrite_r+0x3bc>
  805304:	81000017 	ldw	r4,0(r16)
  805308:	b80d883a 	mov	r6,r23
  80530c:	e00b883a 	mov	r5,fp
  805310:	08064ec0 	call	8064ec <memmove>
  805314:	80c00217 	ldw	r3,8(r16)
  805318:	81000017 	ldw	r4,0(r16)
  80531c:	9005883a 	mov	r2,r18
  805320:	1ce7c83a 	sub	r19,r3,r19
  805324:	25cf883a 	add	r7,r4,r23
  805328:	84c00215 	stw	r19,8(r16)
  80532c:	81c00015 	stw	r7,0(r16)
  805330:	a0c00217 	ldw	r3,8(r20)
  805334:	e0b9883a 	add	fp,fp,r2
  805338:	90a5c83a 	sub	r18,r18,r2
  80533c:	18a7c83a 	sub	r19,r3,r2
  805340:	a4c00215 	stw	r19,8(r20)
  805344:	983fce26 	beq	r19,zero,805280 <__alt_data_end+0xff805280>
  805348:	80c0030b 	ldhu	r3,12(r16)
  80534c:	903fe61e 	bne	r18,zero,8052e8 <__alt_data_end+0xff8052e8>
  805350:	8f000017 	ldw	fp,0(r17)
  805354:	8c800117 	ldw	r18,4(r17)
  805358:	8c400204 	addi	r17,r17,8
  80535c:	003fe106 	br	8052e4 <__alt_data_end+0xff8052e4>
  805360:	8cc00017 	ldw	r19,0(r17)
  805364:	8c800117 	ldw	r18,4(r17)
  805368:	8c400204 	addi	r17,r17,8
  80536c:	003fb306 	br	80523c <__alt_data_end+0xff80523c>
  805370:	0005883a 	mov	r2,zero
  805374:	f800283a 	ret
  805378:	81000017 	ldw	r4,0(r16)
  80537c:	80800417 	ldw	r2,16(r16)
  805380:	11005a36 	bltu	r2,r4,8054ec <__sfvwrite_r+0x320>
  805384:	85c00517 	ldw	r23,20(r16)
  805388:	95c05836 	bltu	r18,r23,8054ec <__sfvwrite_r+0x320>
  80538c:	00a00034 	movhi	r2,32768
  805390:	10bfffc4 	addi	r2,r2,-1
  805394:	9009883a 	mov	r4,r18
  805398:	1480012e 	bgeu	r2,r18,8053a0 <__sfvwrite_r+0x1d4>
  80539c:	1009883a 	mov	r4,r2
  8053a0:	b80b883a 	mov	r5,r23
  8053a4:	080ac700 	call	80ac70 <__divsi3>
  8053a8:	b80b883a 	mov	r5,r23
  8053ac:	1009883a 	mov	r4,r2
  8053b0:	080ae240 	call	80ae24 <__mulsi3>
  8053b4:	81400717 	ldw	r5,28(r16)
  8053b8:	80c00917 	ldw	r3,36(r16)
  8053bc:	100f883a 	mov	r7,r2
  8053c0:	e00d883a 	mov	r6,fp
  8053c4:	a809883a 	mov	r4,r21
  8053c8:	183ee83a 	callr	r3
  8053cc:	00bfd816 	blt	zero,r2,805330 <__alt_data_end+0xff805330>
  8053d0:	8080030b 	ldhu	r2,12(r16)
  8053d4:	10801014 	ori	r2,r2,64
  8053d8:	8080030d 	sth	r2,12(r16)
  8053dc:	00bfffc4 	movi	r2,-1
  8053e0:	003fa806 	br	805284 <__alt_data_end+0xff805284>
  8053e4:	0027883a 	mov	r19,zero
  8053e8:	0011883a 	mov	r8,zero
  8053ec:	0039883a 	mov	fp,zero
  8053f0:	0025883a 	mov	r18,zero
  8053f4:	90001f26 	beq	r18,zero,805474 <__sfvwrite_r+0x2a8>
  8053f8:	40005a26 	beq	r8,zero,805564 <__sfvwrite_r+0x398>
  8053fc:	982d883a 	mov	r22,r19
  805400:	94c0012e 	bgeu	r18,r19,805408 <__sfvwrite_r+0x23c>
  805404:	902d883a 	mov	r22,r18
  805408:	81000017 	ldw	r4,0(r16)
  80540c:	80800417 	ldw	r2,16(r16)
  805410:	b02f883a 	mov	r23,r22
  805414:	81c00517 	ldw	r7,20(r16)
  805418:	1100032e 	bgeu	r2,r4,805428 <__sfvwrite_r+0x25c>
  80541c:	80c00217 	ldw	r3,8(r16)
  805420:	38c7883a 	add	r3,r7,r3
  805424:	1d801816 	blt	r3,r22,805488 <__sfvwrite_r+0x2bc>
  805428:	b1c03e16 	blt	r22,r7,805524 <__sfvwrite_r+0x358>
  80542c:	80800917 	ldw	r2,36(r16)
  805430:	81400717 	ldw	r5,28(r16)
  805434:	e00d883a 	mov	r6,fp
  805438:	da000115 	stw	r8,4(sp)
  80543c:	a809883a 	mov	r4,r21
  805440:	103ee83a 	callr	r2
  805444:	102f883a 	mov	r23,r2
  805448:	da000117 	ldw	r8,4(sp)
  80544c:	00bfe00e 	bge	zero,r2,8053d0 <__alt_data_end+0xff8053d0>
  805450:	9de7c83a 	sub	r19,r19,r23
  805454:	98001f26 	beq	r19,zero,8054d4 <__sfvwrite_r+0x308>
  805458:	a0800217 	ldw	r2,8(r20)
  80545c:	e5f9883a 	add	fp,fp,r23
  805460:	95e5c83a 	sub	r18,r18,r23
  805464:	15efc83a 	sub	r23,r2,r23
  805468:	a5c00215 	stw	r23,8(r20)
  80546c:	b83f8426 	beq	r23,zero,805280 <__alt_data_end+0xff805280>
  805470:	903fe11e 	bne	r18,zero,8053f8 <__alt_data_end+0xff8053f8>
  805474:	8f000017 	ldw	fp,0(r17)
  805478:	8c800117 	ldw	r18,4(r17)
  80547c:	0011883a 	mov	r8,zero
  805480:	8c400204 	addi	r17,r17,8
  805484:	003fdb06 	br	8053f4 <__alt_data_end+0xff8053f4>
  805488:	180d883a 	mov	r6,r3
  80548c:	e00b883a 	mov	r5,fp
  805490:	da000115 	stw	r8,4(sp)
  805494:	d8c00015 	stw	r3,0(sp)
  805498:	08064ec0 	call	8064ec <memmove>
  80549c:	d8c00017 	ldw	r3,0(sp)
  8054a0:	80800017 	ldw	r2,0(r16)
  8054a4:	800b883a 	mov	r5,r16
  8054a8:	a809883a 	mov	r4,r21
  8054ac:	10c5883a 	add	r2,r2,r3
  8054b0:	80800015 	stw	r2,0(r16)
  8054b4:	d8c00015 	stw	r3,0(sp)
  8054b8:	080495c0 	call	80495c <_fflush_r>
  8054bc:	d8c00017 	ldw	r3,0(sp)
  8054c0:	da000117 	ldw	r8,4(sp)
  8054c4:	103fc21e 	bne	r2,zero,8053d0 <__alt_data_end+0xff8053d0>
  8054c8:	182f883a 	mov	r23,r3
  8054cc:	9de7c83a 	sub	r19,r19,r23
  8054d0:	983fe11e 	bne	r19,zero,805458 <__alt_data_end+0xff805458>
  8054d4:	800b883a 	mov	r5,r16
  8054d8:	a809883a 	mov	r4,r21
  8054dc:	080495c0 	call	80495c <_fflush_r>
  8054e0:	103fbb1e 	bne	r2,zero,8053d0 <__alt_data_end+0xff8053d0>
  8054e4:	0011883a 	mov	r8,zero
  8054e8:	003fdb06 	br	805458 <__alt_data_end+0xff805458>
  8054ec:	94c0012e 	bgeu	r18,r19,8054f4 <__sfvwrite_r+0x328>
  8054f0:	9027883a 	mov	r19,r18
  8054f4:	980d883a 	mov	r6,r19
  8054f8:	e00b883a 	mov	r5,fp
  8054fc:	08064ec0 	call	8064ec <memmove>
  805500:	80800217 	ldw	r2,8(r16)
  805504:	80c00017 	ldw	r3,0(r16)
  805508:	14c5c83a 	sub	r2,r2,r19
  80550c:	1cc7883a 	add	r3,r3,r19
  805510:	80800215 	stw	r2,8(r16)
  805514:	80c00015 	stw	r3,0(r16)
  805518:	10004326 	beq	r2,zero,805628 <__sfvwrite_r+0x45c>
  80551c:	9805883a 	mov	r2,r19
  805520:	003f8306 	br	805330 <__alt_data_end+0xff805330>
  805524:	b00d883a 	mov	r6,r22
  805528:	e00b883a 	mov	r5,fp
  80552c:	da000115 	stw	r8,4(sp)
  805530:	08064ec0 	call	8064ec <memmove>
  805534:	80800217 	ldw	r2,8(r16)
  805538:	80c00017 	ldw	r3,0(r16)
  80553c:	da000117 	ldw	r8,4(sp)
  805540:	1585c83a 	sub	r2,r2,r22
  805544:	1dad883a 	add	r22,r3,r22
  805548:	80800215 	stw	r2,8(r16)
  80554c:	85800015 	stw	r22,0(r16)
  805550:	003fbf06 	br	805450 <__alt_data_end+0xff805450>
  805554:	81000017 	ldw	r4,0(r16)
  805558:	9027883a 	mov	r19,r18
  80555c:	902f883a 	mov	r23,r18
  805560:	003f6906 	br	805308 <__alt_data_end+0xff805308>
  805564:	900d883a 	mov	r6,r18
  805568:	01400284 	movi	r5,10
  80556c:	e009883a 	mov	r4,fp
  805570:	08062c00 	call	8062c0 <memchr>
  805574:	10003e26 	beq	r2,zero,805670 <__sfvwrite_r+0x4a4>
  805578:	10800044 	addi	r2,r2,1
  80557c:	1727c83a 	sub	r19,r2,fp
  805580:	02000044 	movi	r8,1
  805584:	003f9d06 	br	8053fc <__alt_data_end+0xff8053fc>
  805588:	80800517 	ldw	r2,20(r16)
  80558c:	81400417 	ldw	r5,16(r16)
  805590:	81c00017 	ldw	r7,0(r16)
  805594:	10a7883a 	add	r19,r2,r2
  805598:	9885883a 	add	r2,r19,r2
  80559c:	1026d7fa 	srli	r19,r2,31
  8055a0:	396dc83a 	sub	r22,r7,r5
  8055a4:	b1000044 	addi	r4,r22,1
  8055a8:	9885883a 	add	r2,r19,r2
  8055ac:	1027d07a 	srai	r19,r2,1
  8055b0:	2485883a 	add	r2,r4,r18
  8055b4:	980d883a 	mov	r6,r19
  8055b8:	9880022e 	bgeu	r19,r2,8055c4 <__sfvwrite_r+0x3f8>
  8055bc:	1027883a 	mov	r19,r2
  8055c0:	100d883a 	mov	r6,r2
  8055c4:	18c1000c 	andi	r3,r3,1024
  8055c8:	18001c26 	beq	r3,zero,80563c <__sfvwrite_r+0x470>
  8055cc:	300b883a 	mov	r5,r6
  8055d0:	a809883a 	mov	r4,r21
  8055d4:	0805ab40 	call	805ab4 <_malloc_r>
  8055d8:	102f883a 	mov	r23,r2
  8055dc:	10002926 	beq	r2,zero,805684 <__sfvwrite_r+0x4b8>
  8055e0:	81400417 	ldw	r5,16(r16)
  8055e4:	b00d883a 	mov	r6,r22
  8055e8:	1009883a 	mov	r4,r2
  8055ec:	08063a40 	call	8063a4 <memcpy>
  8055f0:	8080030b 	ldhu	r2,12(r16)
  8055f4:	00fedfc4 	movi	r3,-1153
  8055f8:	10c4703a 	and	r2,r2,r3
  8055fc:	10802014 	ori	r2,r2,128
  805600:	8080030d 	sth	r2,12(r16)
  805604:	bd89883a 	add	r4,r23,r22
  805608:	9d8fc83a 	sub	r7,r19,r22
  80560c:	85c00415 	stw	r23,16(r16)
  805610:	84c00515 	stw	r19,20(r16)
  805614:	81000015 	stw	r4,0(r16)
  805618:	9027883a 	mov	r19,r18
  80561c:	81c00215 	stw	r7,8(r16)
  805620:	902f883a 	mov	r23,r18
  805624:	003f3806 	br	805308 <__alt_data_end+0xff805308>
  805628:	800b883a 	mov	r5,r16
  80562c:	a809883a 	mov	r4,r21
  805630:	080495c0 	call	80495c <_fflush_r>
  805634:	103fb926 	beq	r2,zero,80551c <__alt_data_end+0xff80551c>
  805638:	003f6506 	br	8053d0 <__alt_data_end+0xff8053d0>
  80563c:	a809883a 	mov	r4,r21
  805640:	08078280 	call	807828 <_realloc_r>
  805644:	102f883a 	mov	r23,r2
  805648:	103fee1e 	bne	r2,zero,805604 <__alt_data_end+0xff805604>
  80564c:	81400417 	ldw	r5,16(r16)
  805650:	a809883a 	mov	r4,r21
  805654:	0804ebc0 	call	804ebc <_free_r>
  805658:	8080030b 	ldhu	r2,12(r16)
  80565c:	00ffdfc4 	movi	r3,-129
  805660:	1884703a 	and	r2,r3,r2
  805664:	00c00304 	movi	r3,12
  805668:	a8c00015 	stw	r3,0(r21)
  80566c:	003f5906 	br	8053d4 <__alt_data_end+0xff8053d4>
  805670:	94c00044 	addi	r19,r18,1
  805674:	02000044 	movi	r8,1
  805678:	003f6006 	br	8053fc <__alt_data_end+0xff8053fc>
  80567c:	00bfffc4 	movi	r2,-1
  805680:	003f0006 	br	805284 <__alt_data_end+0xff805284>
  805684:	00800304 	movi	r2,12
  805688:	a8800015 	stw	r2,0(r21)
  80568c:	8080030b 	ldhu	r2,12(r16)
  805690:	003f5006 	br	8053d4 <__alt_data_end+0xff8053d4>

00805694 <_fwalk>:
  805694:	defff704 	addi	sp,sp,-36
  805698:	dd000415 	stw	r20,16(sp)
  80569c:	dfc00815 	stw	ra,32(sp)
  8056a0:	ddc00715 	stw	r23,28(sp)
  8056a4:	dd800615 	stw	r22,24(sp)
  8056a8:	dd400515 	stw	r21,20(sp)
  8056ac:	dcc00315 	stw	r19,12(sp)
  8056b0:	dc800215 	stw	r18,8(sp)
  8056b4:	dc400115 	stw	r17,4(sp)
  8056b8:	dc000015 	stw	r16,0(sp)
  8056bc:	2500b804 	addi	r20,r4,736
  8056c0:	a0002326 	beq	r20,zero,805750 <_fwalk+0xbc>
  8056c4:	282b883a 	mov	r21,r5
  8056c8:	002f883a 	mov	r23,zero
  8056cc:	05800044 	movi	r22,1
  8056d0:	04ffffc4 	movi	r19,-1
  8056d4:	a4400117 	ldw	r17,4(r20)
  8056d8:	a4800217 	ldw	r18,8(r20)
  8056dc:	8c7fffc4 	addi	r17,r17,-1
  8056e0:	88000d16 	blt	r17,zero,805718 <_fwalk+0x84>
  8056e4:	94000304 	addi	r16,r18,12
  8056e8:	94800384 	addi	r18,r18,14
  8056ec:	8080000b 	ldhu	r2,0(r16)
  8056f0:	8c7fffc4 	addi	r17,r17,-1
  8056f4:	813ffd04 	addi	r4,r16,-12
  8056f8:	b080042e 	bgeu	r22,r2,80570c <_fwalk+0x78>
  8056fc:	9080000f 	ldh	r2,0(r18)
  805700:	14c00226 	beq	r2,r19,80570c <_fwalk+0x78>
  805704:	a83ee83a 	callr	r21
  805708:	b8aeb03a 	or	r23,r23,r2
  80570c:	84001a04 	addi	r16,r16,104
  805710:	94801a04 	addi	r18,r18,104
  805714:	8cfff51e 	bne	r17,r19,8056ec <__alt_data_end+0xff8056ec>
  805718:	a5000017 	ldw	r20,0(r20)
  80571c:	a03fed1e 	bne	r20,zero,8056d4 <__alt_data_end+0xff8056d4>
  805720:	b805883a 	mov	r2,r23
  805724:	dfc00817 	ldw	ra,32(sp)
  805728:	ddc00717 	ldw	r23,28(sp)
  80572c:	dd800617 	ldw	r22,24(sp)
  805730:	dd400517 	ldw	r21,20(sp)
  805734:	dd000417 	ldw	r20,16(sp)
  805738:	dcc00317 	ldw	r19,12(sp)
  80573c:	dc800217 	ldw	r18,8(sp)
  805740:	dc400117 	ldw	r17,4(sp)
  805744:	dc000017 	ldw	r16,0(sp)
  805748:	dec00904 	addi	sp,sp,36
  80574c:	f800283a 	ret
  805750:	002f883a 	mov	r23,zero
  805754:	003ff206 	br	805720 <__alt_data_end+0xff805720>

00805758 <_fwalk_reent>:
  805758:	defff704 	addi	sp,sp,-36
  80575c:	dd000415 	stw	r20,16(sp)
  805760:	dfc00815 	stw	ra,32(sp)
  805764:	ddc00715 	stw	r23,28(sp)
  805768:	dd800615 	stw	r22,24(sp)
  80576c:	dd400515 	stw	r21,20(sp)
  805770:	dcc00315 	stw	r19,12(sp)
  805774:	dc800215 	stw	r18,8(sp)
  805778:	dc400115 	stw	r17,4(sp)
  80577c:	dc000015 	stw	r16,0(sp)
  805780:	2500b804 	addi	r20,r4,736
  805784:	a0002326 	beq	r20,zero,805814 <_fwalk_reent+0xbc>
  805788:	282b883a 	mov	r21,r5
  80578c:	2027883a 	mov	r19,r4
  805790:	002f883a 	mov	r23,zero
  805794:	05800044 	movi	r22,1
  805798:	04bfffc4 	movi	r18,-1
  80579c:	a4400117 	ldw	r17,4(r20)
  8057a0:	a4000217 	ldw	r16,8(r20)
  8057a4:	8c7fffc4 	addi	r17,r17,-1
  8057a8:	88000c16 	blt	r17,zero,8057dc <_fwalk_reent+0x84>
  8057ac:	84000304 	addi	r16,r16,12
  8057b0:	8080000b 	ldhu	r2,0(r16)
  8057b4:	8c7fffc4 	addi	r17,r17,-1
  8057b8:	817ffd04 	addi	r5,r16,-12
  8057bc:	b080052e 	bgeu	r22,r2,8057d4 <_fwalk_reent+0x7c>
  8057c0:	8080008f 	ldh	r2,2(r16)
  8057c4:	9809883a 	mov	r4,r19
  8057c8:	14800226 	beq	r2,r18,8057d4 <_fwalk_reent+0x7c>
  8057cc:	a83ee83a 	callr	r21
  8057d0:	b8aeb03a 	or	r23,r23,r2
  8057d4:	84001a04 	addi	r16,r16,104
  8057d8:	8cbff51e 	bne	r17,r18,8057b0 <__alt_data_end+0xff8057b0>
  8057dc:	a5000017 	ldw	r20,0(r20)
  8057e0:	a03fee1e 	bne	r20,zero,80579c <__alt_data_end+0xff80579c>
  8057e4:	b805883a 	mov	r2,r23
  8057e8:	dfc00817 	ldw	ra,32(sp)
  8057ec:	ddc00717 	ldw	r23,28(sp)
  8057f0:	dd800617 	ldw	r22,24(sp)
  8057f4:	dd400517 	ldw	r21,20(sp)
  8057f8:	dd000417 	ldw	r20,16(sp)
  8057fc:	dcc00317 	ldw	r19,12(sp)
  805800:	dc800217 	ldw	r18,8(sp)
  805804:	dc400117 	ldw	r17,4(sp)
  805808:	dc000017 	ldw	r16,0(sp)
  80580c:	dec00904 	addi	sp,sp,36
  805810:	f800283a 	ret
  805814:	002f883a 	mov	r23,zero
  805818:	003ff206 	br	8057e4 <__alt_data_end+0xff8057e4>

0080581c <_setlocale_r>:
  80581c:	30001b26 	beq	r6,zero,80588c <_setlocale_r+0x70>
  805820:	01402074 	movhi	r5,129
  805824:	defffe04 	addi	sp,sp,-8
  805828:	29437804 	addi	r5,r5,3552
  80582c:	3009883a 	mov	r4,r6
  805830:	dc000015 	stw	r16,0(sp)
  805834:	dfc00115 	stw	ra,4(sp)
  805838:	3021883a 	mov	r16,r6
  80583c:	0807f900 	call	807f90 <strcmp>
  805840:	1000061e 	bne	r2,zero,80585c <_setlocale_r+0x40>
  805844:	00802074 	movhi	r2,129
  805848:	10837704 	addi	r2,r2,3548
  80584c:	dfc00117 	ldw	ra,4(sp)
  805850:	dc000017 	ldw	r16,0(sp)
  805854:	dec00204 	addi	sp,sp,8
  805858:	f800283a 	ret
  80585c:	01402074 	movhi	r5,129
  805860:	29437704 	addi	r5,r5,3548
  805864:	8009883a 	mov	r4,r16
  805868:	0807f900 	call	807f90 <strcmp>
  80586c:	103ff526 	beq	r2,zero,805844 <__alt_data_end+0xff805844>
  805870:	01402074 	movhi	r5,129
  805874:	29436204 	addi	r5,r5,3464
  805878:	8009883a 	mov	r4,r16
  80587c:	0807f900 	call	807f90 <strcmp>
  805880:	103ff026 	beq	r2,zero,805844 <__alt_data_end+0xff805844>
  805884:	0005883a 	mov	r2,zero
  805888:	003ff006 	br	80584c <__alt_data_end+0xff80584c>
  80588c:	00802074 	movhi	r2,129
  805890:	10837704 	addi	r2,r2,3548
  805894:	f800283a 	ret

00805898 <__locale_charset>:
  805898:	00802074 	movhi	r2,129
  80589c:	1084eb04 	addi	r2,r2,5036
  8058a0:	f800283a 	ret

008058a4 <__locale_mb_cur_max>:
  8058a4:	00802074 	movhi	r2,129
  8058a8:	108abe04 	addi	r2,r2,11000
  8058ac:	10800017 	ldw	r2,0(r2)
  8058b0:	f800283a 	ret

008058b4 <__locale_msgcharset>:
  8058b4:	00802074 	movhi	r2,129
  8058b8:	1084e304 	addi	r2,r2,5004
  8058bc:	f800283a 	ret

008058c0 <__locale_cjk_lang>:
  8058c0:	0005883a 	mov	r2,zero
  8058c4:	f800283a 	ret

008058c8 <_localeconv_r>:
  8058c8:	00802074 	movhi	r2,129
  8058cc:	1084f304 	addi	r2,r2,5068
  8058d0:	f800283a 	ret

008058d4 <setlocale>:
  8058d4:	00802074 	movhi	r2,129
  8058d8:	108abd04 	addi	r2,r2,10996
  8058dc:	280d883a 	mov	r6,r5
  8058e0:	200b883a 	mov	r5,r4
  8058e4:	11000017 	ldw	r4,0(r2)
  8058e8:	080581c1 	jmpi	80581c <_setlocale_r>

008058ec <localeconv>:
  8058ec:	00802074 	movhi	r2,129
  8058f0:	1084f304 	addi	r2,r2,5068
  8058f4:	f800283a 	ret

008058f8 <__smakebuf_r>:
  8058f8:	2880030b 	ldhu	r2,12(r5)
  8058fc:	10c0008c 	andi	r3,r2,2
  805900:	1800411e 	bne	r3,zero,805a08 <__smakebuf_r+0x110>
  805904:	deffec04 	addi	sp,sp,-80
  805908:	dc000f15 	stw	r16,60(sp)
  80590c:	2821883a 	mov	r16,r5
  805910:	2940038f 	ldh	r5,14(r5)
  805914:	dc401015 	stw	r17,64(sp)
  805918:	dfc01315 	stw	ra,76(sp)
  80591c:	dcc01215 	stw	r19,72(sp)
  805920:	dc801115 	stw	r18,68(sp)
  805924:	2023883a 	mov	r17,r4
  805928:	28001c16 	blt	r5,zero,80599c <__smakebuf_r+0xa4>
  80592c:	d80d883a 	mov	r6,sp
  805930:	0809c000 	call	809c00 <_fstat_r>
  805934:	10001816 	blt	r2,zero,805998 <__smakebuf_r+0xa0>
  805938:	d8800117 	ldw	r2,4(sp)
  80593c:	00e00014 	movui	r3,32768
  805940:	10bc000c 	andi	r2,r2,61440
  805944:	14c80020 	cmpeqi	r19,r2,8192
  805948:	10c03726 	beq	r2,r3,805a28 <__smakebuf_r+0x130>
  80594c:	80c0030b 	ldhu	r3,12(r16)
  805950:	18c20014 	ori	r3,r3,2048
  805954:	80c0030d 	sth	r3,12(r16)
  805958:	00c80004 	movi	r3,8192
  80595c:	10c0521e 	bne	r2,r3,805aa8 <__smakebuf_r+0x1b0>
  805960:	8140038f 	ldh	r5,14(r16)
  805964:	8809883a 	mov	r4,r17
  805968:	0809c5c0 	call	809c5c <_isatty_r>
  80596c:	10004c26 	beq	r2,zero,805aa0 <__smakebuf_r+0x1a8>
  805970:	8080030b 	ldhu	r2,12(r16)
  805974:	80c010c4 	addi	r3,r16,67
  805978:	80c00015 	stw	r3,0(r16)
  80597c:	10800054 	ori	r2,r2,1
  805980:	8080030d 	sth	r2,12(r16)
  805984:	00800044 	movi	r2,1
  805988:	80c00415 	stw	r3,16(r16)
  80598c:	80800515 	stw	r2,20(r16)
  805990:	04810004 	movi	r18,1024
  805994:	00000706 	br	8059b4 <__smakebuf_r+0xbc>
  805998:	8080030b 	ldhu	r2,12(r16)
  80599c:	10c0200c 	andi	r3,r2,128
  8059a0:	18001f1e 	bne	r3,zero,805a20 <__smakebuf_r+0x128>
  8059a4:	04810004 	movi	r18,1024
  8059a8:	10820014 	ori	r2,r2,2048
  8059ac:	8080030d 	sth	r2,12(r16)
  8059b0:	0027883a 	mov	r19,zero
  8059b4:	900b883a 	mov	r5,r18
  8059b8:	8809883a 	mov	r4,r17
  8059bc:	0805ab40 	call	805ab4 <_malloc_r>
  8059c0:	10002c26 	beq	r2,zero,805a74 <__smakebuf_r+0x17c>
  8059c4:	80c0030b 	ldhu	r3,12(r16)
  8059c8:	01002034 	movhi	r4,128
  8059cc:	21127c04 	addi	r4,r4,18928
  8059d0:	89000f15 	stw	r4,60(r17)
  8059d4:	18c02014 	ori	r3,r3,128
  8059d8:	80c0030d 	sth	r3,12(r16)
  8059dc:	80800015 	stw	r2,0(r16)
  8059e0:	80800415 	stw	r2,16(r16)
  8059e4:	84800515 	stw	r18,20(r16)
  8059e8:	98001a1e 	bne	r19,zero,805a54 <__smakebuf_r+0x15c>
  8059ec:	dfc01317 	ldw	ra,76(sp)
  8059f0:	dcc01217 	ldw	r19,72(sp)
  8059f4:	dc801117 	ldw	r18,68(sp)
  8059f8:	dc401017 	ldw	r17,64(sp)
  8059fc:	dc000f17 	ldw	r16,60(sp)
  805a00:	dec01404 	addi	sp,sp,80
  805a04:	f800283a 	ret
  805a08:	288010c4 	addi	r2,r5,67
  805a0c:	28800015 	stw	r2,0(r5)
  805a10:	28800415 	stw	r2,16(r5)
  805a14:	00800044 	movi	r2,1
  805a18:	28800515 	stw	r2,20(r5)
  805a1c:	f800283a 	ret
  805a20:	04801004 	movi	r18,64
  805a24:	003fe006 	br	8059a8 <__alt_data_end+0xff8059a8>
  805a28:	81000a17 	ldw	r4,40(r16)
  805a2c:	00c02034 	movhi	r3,128
  805a30:	18dfcb04 	addi	r3,r3,32556
  805a34:	20ffc51e 	bne	r4,r3,80594c <__alt_data_end+0xff80594c>
  805a38:	8080030b 	ldhu	r2,12(r16)
  805a3c:	04810004 	movi	r18,1024
  805a40:	84801315 	stw	r18,76(r16)
  805a44:	1484b03a 	or	r2,r2,r18
  805a48:	8080030d 	sth	r2,12(r16)
  805a4c:	0027883a 	mov	r19,zero
  805a50:	003fd806 	br	8059b4 <__alt_data_end+0xff8059b4>
  805a54:	8140038f 	ldh	r5,14(r16)
  805a58:	8809883a 	mov	r4,r17
  805a5c:	0809c5c0 	call	809c5c <_isatty_r>
  805a60:	103fe226 	beq	r2,zero,8059ec <__alt_data_end+0xff8059ec>
  805a64:	8080030b 	ldhu	r2,12(r16)
  805a68:	10800054 	ori	r2,r2,1
  805a6c:	8080030d 	sth	r2,12(r16)
  805a70:	003fde06 	br	8059ec <__alt_data_end+0xff8059ec>
  805a74:	8080030b 	ldhu	r2,12(r16)
  805a78:	10c0800c 	andi	r3,r2,512
  805a7c:	183fdb1e 	bne	r3,zero,8059ec <__alt_data_end+0xff8059ec>
  805a80:	10800094 	ori	r2,r2,2
  805a84:	80c010c4 	addi	r3,r16,67
  805a88:	8080030d 	sth	r2,12(r16)
  805a8c:	00800044 	movi	r2,1
  805a90:	80c00015 	stw	r3,0(r16)
  805a94:	80c00415 	stw	r3,16(r16)
  805a98:	80800515 	stw	r2,20(r16)
  805a9c:	003fd306 	br	8059ec <__alt_data_end+0xff8059ec>
  805aa0:	04810004 	movi	r18,1024
  805aa4:	003fc306 	br	8059b4 <__alt_data_end+0xff8059b4>
  805aa8:	0027883a 	mov	r19,zero
  805aac:	04810004 	movi	r18,1024
  805ab0:	003fc006 	br	8059b4 <__alt_data_end+0xff8059b4>

00805ab4 <_malloc_r>:
  805ab4:	defff504 	addi	sp,sp,-44
  805ab8:	dc800315 	stw	r18,12(sp)
  805abc:	dfc00a15 	stw	ra,40(sp)
  805ac0:	df000915 	stw	fp,36(sp)
  805ac4:	ddc00815 	stw	r23,32(sp)
  805ac8:	dd800715 	stw	r22,28(sp)
  805acc:	dd400615 	stw	r21,24(sp)
  805ad0:	dd000515 	stw	r20,20(sp)
  805ad4:	dcc00415 	stw	r19,16(sp)
  805ad8:	dc400215 	stw	r17,8(sp)
  805adc:	dc000115 	stw	r16,4(sp)
  805ae0:	288002c4 	addi	r2,r5,11
  805ae4:	00c00584 	movi	r3,22
  805ae8:	2025883a 	mov	r18,r4
  805aec:	18807f2e 	bgeu	r3,r2,805cec <_malloc_r+0x238>
  805af0:	047ffe04 	movi	r17,-8
  805af4:	1462703a 	and	r17,r2,r17
  805af8:	8800a316 	blt	r17,zero,805d88 <_malloc_r+0x2d4>
  805afc:	8940a236 	bltu	r17,r5,805d88 <_malloc_r+0x2d4>
  805b00:	080dc280 	call	80dc28 <__malloc_lock>
  805b04:	00807dc4 	movi	r2,503
  805b08:	1441e92e 	bgeu	r2,r17,8062b0 <_malloc_r+0x7fc>
  805b0c:	8804d27a 	srli	r2,r17,9
  805b10:	1000a126 	beq	r2,zero,805d98 <_malloc_r+0x2e4>
  805b14:	00c00104 	movi	r3,4
  805b18:	18811e36 	bltu	r3,r2,805f94 <_malloc_r+0x4e0>
  805b1c:	8804d1ba 	srli	r2,r17,6
  805b20:	12000e44 	addi	r8,r2,57
  805b24:	11c00e04 	addi	r7,r2,56
  805b28:	4209883a 	add	r4,r8,r8
  805b2c:	04c02074 	movhi	r19,129
  805b30:	2109883a 	add	r4,r4,r4
  805b34:	9cc50104 	addi	r19,r19,5124
  805b38:	2109883a 	add	r4,r4,r4
  805b3c:	9909883a 	add	r4,r19,r4
  805b40:	24000117 	ldw	r16,4(r4)
  805b44:	213ffe04 	addi	r4,r4,-8
  805b48:	24009726 	beq	r4,r16,805da8 <_malloc_r+0x2f4>
  805b4c:	80800117 	ldw	r2,4(r16)
  805b50:	01bfff04 	movi	r6,-4
  805b54:	014003c4 	movi	r5,15
  805b58:	1184703a 	and	r2,r2,r6
  805b5c:	1447c83a 	sub	r3,r2,r17
  805b60:	28c00716 	blt	r5,r3,805b80 <_malloc_r+0xcc>
  805b64:	1800920e 	bge	r3,zero,805db0 <_malloc_r+0x2fc>
  805b68:	84000317 	ldw	r16,12(r16)
  805b6c:	24008e26 	beq	r4,r16,805da8 <_malloc_r+0x2f4>
  805b70:	80800117 	ldw	r2,4(r16)
  805b74:	1184703a 	and	r2,r2,r6
  805b78:	1447c83a 	sub	r3,r2,r17
  805b7c:	28fff90e 	bge	r5,r3,805b64 <__alt_data_end+0xff805b64>
  805b80:	3809883a 	mov	r4,r7
  805b84:	01802074 	movhi	r6,129
  805b88:	9c000417 	ldw	r16,16(r19)
  805b8c:	31850104 	addi	r6,r6,5124
  805b90:	32000204 	addi	r8,r6,8
  805b94:	82013426 	beq	r16,r8,806068 <_malloc_r+0x5b4>
  805b98:	80c00117 	ldw	r3,4(r16)
  805b9c:	00bfff04 	movi	r2,-4
  805ba0:	188e703a 	and	r7,r3,r2
  805ba4:	3c45c83a 	sub	r2,r7,r17
  805ba8:	00c003c4 	movi	r3,15
  805bac:	18811f16 	blt	r3,r2,80602c <_malloc_r+0x578>
  805bb0:	32000515 	stw	r8,20(r6)
  805bb4:	32000415 	stw	r8,16(r6)
  805bb8:	10007f0e 	bge	r2,zero,805db8 <_malloc_r+0x304>
  805bbc:	00807fc4 	movi	r2,511
  805bc0:	11c0fd36 	bltu	r2,r7,805fb8 <_malloc_r+0x504>
  805bc4:	3806d0fa 	srli	r3,r7,3
  805bc8:	01c00044 	movi	r7,1
  805bcc:	30800117 	ldw	r2,4(r6)
  805bd0:	19400044 	addi	r5,r3,1
  805bd4:	294b883a 	add	r5,r5,r5
  805bd8:	1807d0ba 	srai	r3,r3,2
  805bdc:	294b883a 	add	r5,r5,r5
  805be0:	294b883a 	add	r5,r5,r5
  805be4:	298b883a 	add	r5,r5,r6
  805be8:	38c6983a 	sll	r3,r7,r3
  805bec:	29c00017 	ldw	r7,0(r5)
  805bf0:	2a7ffe04 	addi	r9,r5,-8
  805bf4:	1886b03a 	or	r3,r3,r2
  805bf8:	82400315 	stw	r9,12(r16)
  805bfc:	81c00215 	stw	r7,8(r16)
  805c00:	30c00115 	stw	r3,4(r6)
  805c04:	2c000015 	stw	r16,0(r5)
  805c08:	3c000315 	stw	r16,12(r7)
  805c0c:	2005d0ba 	srai	r2,r4,2
  805c10:	01400044 	movi	r5,1
  805c14:	288a983a 	sll	r5,r5,r2
  805c18:	19406f36 	bltu	r3,r5,805dd8 <_malloc_r+0x324>
  805c1c:	28c4703a 	and	r2,r5,r3
  805c20:	10000a1e 	bne	r2,zero,805c4c <_malloc_r+0x198>
  805c24:	00bfff04 	movi	r2,-4
  805c28:	294b883a 	add	r5,r5,r5
  805c2c:	2088703a 	and	r4,r4,r2
  805c30:	28c4703a 	and	r2,r5,r3
  805c34:	21000104 	addi	r4,r4,4
  805c38:	1000041e 	bne	r2,zero,805c4c <_malloc_r+0x198>
  805c3c:	294b883a 	add	r5,r5,r5
  805c40:	28c4703a 	and	r2,r5,r3
  805c44:	21000104 	addi	r4,r4,4
  805c48:	103ffc26 	beq	r2,zero,805c3c <__alt_data_end+0xff805c3c>
  805c4c:	02bfff04 	movi	r10,-4
  805c50:	024003c4 	movi	r9,15
  805c54:	21800044 	addi	r6,r4,1
  805c58:	318d883a 	add	r6,r6,r6
  805c5c:	318d883a 	add	r6,r6,r6
  805c60:	318d883a 	add	r6,r6,r6
  805c64:	998d883a 	add	r6,r19,r6
  805c68:	333ffe04 	addi	r12,r6,-8
  805c6c:	2017883a 	mov	r11,r4
  805c70:	31800104 	addi	r6,r6,4
  805c74:	34000017 	ldw	r16,0(r6)
  805c78:	31fffd04 	addi	r7,r6,-12
  805c7c:	81c0041e 	bne	r16,r7,805c90 <_malloc_r+0x1dc>
  805c80:	0000fb06 	br	806070 <_malloc_r+0x5bc>
  805c84:	1801030e 	bge	r3,zero,806094 <_malloc_r+0x5e0>
  805c88:	84000317 	ldw	r16,12(r16)
  805c8c:	81c0f826 	beq	r16,r7,806070 <_malloc_r+0x5bc>
  805c90:	80800117 	ldw	r2,4(r16)
  805c94:	1284703a 	and	r2,r2,r10
  805c98:	1447c83a 	sub	r3,r2,r17
  805c9c:	48fff90e 	bge	r9,r3,805c84 <__alt_data_end+0xff805c84>
  805ca0:	80800317 	ldw	r2,12(r16)
  805ca4:	81000217 	ldw	r4,8(r16)
  805ca8:	89400054 	ori	r5,r17,1
  805cac:	81400115 	stw	r5,4(r16)
  805cb0:	20800315 	stw	r2,12(r4)
  805cb4:	11000215 	stw	r4,8(r2)
  805cb8:	8463883a 	add	r17,r16,r17
  805cbc:	9c400515 	stw	r17,20(r19)
  805cc0:	9c400415 	stw	r17,16(r19)
  805cc4:	18800054 	ori	r2,r3,1
  805cc8:	88800115 	stw	r2,4(r17)
  805ccc:	8a000315 	stw	r8,12(r17)
  805cd0:	8a000215 	stw	r8,8(r17)
  805cd4:	88e3883a 	add	r17,r17,r3
  805cd8:	88c00015 	stw	r3,0(r17)
  805cdc:	9009883a 	mov	r4,r18
  805ce0:	080dc4c0 	call	80dc4c <__malloc_unlock>
  805ce4:	80800204 	addi	r2,r16,8
  805ce8:	00001b06 	br	805d58 <_malloc_r+0x2a4>
  805cec:	04400404 	movi	r17,16
  805cf0:	89402536 	bltu	r17,r5,805d88 <_malloc_r+0x2d4>
  805cf4:	080dc280 	call	80dc28 <__malloc_lock>
  805cf8:	00800184 	movi	r2,6
  805cfc:	01000084 	movi	r4,2
  805d00:	04c02074 	movhi	r19,129
  805d04:	1085883a 	add	r2,r2,r2
  805d08:	9cc50104 	addi	r19,r19,5124
  805d0c:	1085883a 	add	r2,r2,r2
  805d10:	9885883a 	add	r2,r19,r2
  805d14:	14000117 	ldw	r16,4(r2)
  805d18:	10fffe04 	addi	r3,r2,-8
  805d1c:	80c0d926 	beq	r16,r3,806084 <_malloc_r+0x5d0>
  805d20:	80c00117 	ldw	r3,4(r16)
  805d24:	81000317 	ldw	r4,12(r16)
  805d28:	00bfff04 	movi	r2,-4
  805d2c:	1884703a 	and	r2,r3,r2
  805d30:	81400217 	ldw	r5,8(r16)
  805d34:	8085883a 	add	r2,r16,r2
  805d38:	10c00117 	ldw	r3,4(r2)
  805d3c:	29000315 	stw	r4,12(r5)
  805d40:	21400215 	stw	r5,8(r4)
  805d44:	18c00054 	ori	r3,r3,1
  805d48:	10c00115 	stw	r3,4(r2)
  805d4c:	9009883a 	mov	r4,r18
  805d50:	080dc4c0 	call	80dc4c <__malloc_unlock>
  805d54:	80800204 	addi	r2,r16,8
  805d58:	dfc00a17 	ldw	ra,40(sp)
  805d5c:	df000917 	ldw	fp,36(sp)
  805d60:	ddc00817 	ldw	r23,32(sp)
  805d64:	dd800717 	ldw	r22,28(sp)
  805d68:	dd400617 	ldw	r21,24(sp)
  805d6c:	dd000517 	ldw	r20,20(sp)
  805d70:	dcc00417 	ldw	r19,16(sp)
  805d74:	dc800317 	ldw	r18,12(sp)
  805d78:	dc400217 	ldw	r17,8(sp)
  805d7c:	dc000117 	ldw	r16,4(sp)
  805d80:	dec00b04 	addi	sp,sp,44
  805d84:	f800283a 	ret
  805d88:	00800304 	movi	r2,12
  805d8c:	90800015 	stw	r2,0(r18)
  805d90:	0005883a 	mov	r2,zero
  805d94:	003ff006 	br	805d58 <__alt_data_end+0xff805d58>
  805d98:	01002004 	movi	r4,128
  805d9c:	02001004 	movi	r8,64
  805da0:	01c00fc4 	movi	r7,63
  805da4:	003f6106 	br	805b2c <__alt_data_end+0xff805b2c>
  805da8:	4009883a 	mov	r4,r8
  805dac:	003f7506 	br	805b84 <__alt_data_end+0xff805b84>
  805db0:	81000317 	ldw	r4,12(r16)
  805db4:	003fde06 	br	805d30 <__alt_data_end+0xff805d30>
  805db8:	81c5883a 	add	r2,r16,r7
  805dbc:	11400117 	ldw	r5,4(r2)
  805dc0:	9009883a 	mov	r4,r18
  805dc4:	29400054 	ori	r5,r5,1
  805dc8:	11400115 	stw	r5,4(r2)
  805dcc:	080dc4c0 	call	80dc4c <__malloc_unlock>
  805dd0:	80800204 	addi	r2,r16,8
  805dd4:	003fe006 	br	805d58 <__alt_data_end+0xff805d58>
  805dd8:	9c000217 	ldw	r16,8(r19)
  805ddc:	00bfff04 	movi	r2,-4
  805de0:	85800117 	ldw	r22,4(r16)
  805de4:	b0ac703a 	and	r22,r22,r2
  805de8:	b4400336 	bltu	r22,r17,805df8 <_malloc_r+0x344>
  805dec:	b445c83a 	sub	r2,r22,r17
  805df0:	00c003c4 	movi	r3,15
  805df4:	18805d16 	blt	r3,r2,805f6c <_malloc_r+0x4b8>
  805df8:	05c02074 	movhi	r23,129
  805dfc:	00802074 	movhi	r2,129
  805e00:	1091cb04 	addi	r2,r2,18220
  805e04:	bdcabf04 	addi	r23,r23,11004
  805e08:	15400017 	ldw	r21,0(r2)
  805e0c:	b8c00017 	ldw	r3,0(r23)
  805e10:	00bfffc4 	movi	r2,-1
  805e14:	858d883a 	add	r6,r16,r22
  805e18:	8d6b883a 	add	r21,r17,r21
  805e1c:	1880ea26 	beq	r3,r2,8061c8 <_malloc_r+0x714>
  805e20:	ad4403c4 	addi	r21,r21,4111
  805e24:	00bc0004 	movi	r2,-4096
  805e28:	a8aa703a 	and	r21,r21,r2
  805e2c:	a80b883a 	mov	r5,r21
  805e30:	9009883a 	mov	r4,r18
  805e34:	d9800015 	stw	r6,0(sp)
  805e38:	0807e000 	call	807e00 <_sbrk_r>
  805e3c:	1029883a 	mov	r20,r2
  805e40:	00bfffc4 	movi	r2,-1
  805e44:	d9800017 	ldw	r6,0(sp)
  805e48:	a080e826 	beq	r20,r2,8061ec <_malloc_r+0x738>
  805e4c:	a180a636 	bltu	r20,r6,8060e8 <_malloc_r+0x634>
  805e50:	07002074 	movhi	fp,129
  805e54:	e711d404 	addi	fp,fp,18256
  805e58:	e0800017 	ldw	r2,0(fp)
  805e5c:	a887883a 	add	r3,r21,r2
  805e60:	e0c00015 	stw	r3,0(fp)
  805e64:	3500e626 	beq	r6,r20,806200 <_malloc_r+0x74c>
  805e68:	b9000017 	ldw	r4,0(r23)
  805e6c:	00bfffc4 	movi	r2,-1
  805e70:	2080ee26 	beq	r4,r2,80622c <_malloc_r+0x778>
  805e74:	a185c83a 	sub	r2,r20,r6
  805e78:	10c5883a 	add	r2,r2,r3
  805e7c:	e0800015 	stw	r2,0(fp)
  805e80:	a0c001cc 	andi	r3,r20,7
  805e84:	1800bc26 	beq	r3,zero,806178 <_malloc_r+0x6c4>
  805e88:	a0e9c83a 	sub	r20,r20,r3
  805e8c:	00840204 	movi	r2,4104
  805e90:	a5000204 	addi	r20,r20,8
  805e94:	10c7c83a 	sub	r3,r2,r3
  805e98:	a545883a 	add	r2,r20,r21
  805e9c:	1083ffcc 	andi	r2,r2,4095
  805ea0:	18abc83a 	sub	r21,r3,r2
  805ea4:	a80b883a 	mov	r5,r21
  805ea8:	9009883a 	mov	r4,r18
  805eac:	0807e000 	call	807e00 <_sbrk_r>
  805eb0:	00ffffc4 	movi	r3,-1
  805eb4:	10c0e126 	beq	r2,r3,80623c <_malloc_r+0x788>
  805eb8:	1505c83a 	sub	r2,r2,r20
  805ebc:	1545883a 	add	r2,r2,r21
  805ec0:	10800054 	ori	r2,r2,1
  805ec4:	e0c00017 	ldw	r3,0(fp)
  805ec8:	9d000215 	stw	r20,8(r19)
  805ecc:	a0800115 	stw	r2,4(r20)
  805ed0:	a8c7883a 	add	r3,r21,r3
  805ed4:	e0c00015 	stw	r3,0(fp)
  805ed8:	84c00e26 	beq	r16,r19,805f14 <_malloc_r+0x460>
  805edc:	018003c4 	movi	r6,15
  805ee0:	3580a72e 	bgeu	r6,r22,806180 <_malloc_r+0x6cc>
  805ee4:	81400117 	ldw	r5,4(r16)
  805ee8:	013ffe04 	movi	r4,-8
  805eec:	b0bffd04 	addi	r2,r22,-12
  805ef0:	1104703a 	and	r2,r2,r4
  805ef4:	2900004c 	andi	r4,r5,1
  805ef8:	2088b03a 	or	r4,r4,r2
  805efc:	81000115 	stw	r4,4(r16)
  805f00:	01400144 	movi	r5,5
  805f04:	8089883a 	add	r4,r16,r2
  805f08:	21400115 	stw	r5,4(r4)
  805f0c:	21400215 	stw	r5,8(r4)
  805f10:	3080cd36 	bltu	r6,r2,806248 <_malloc_r+0x794>
  805f14:	00802074 	movhi	r2,129
  805f18:	1091ca04 	addi	r2,r2,18216
  805f1c:	11000017 	ldw	r4,0(r2)
  805f20:	20c0012e 	bgeu	r4,r3,805f28 <_malloc_r+0x474>
  805f24:	10c00015 	stw	r3,0(r2)
  805f28:	00802074 	movhi	r2,129
  805f2c:	1091c904 	addi	r2,r2,18212
  805f30:	11000017 	ldw	r4,0(r2)
  805f34:	9c000217 	ldw	r16,8(r19)
  805f38:	20c0012e 	bgeu	r4,r3,805f40 <_malloc_r+0x48c>
  805f3c:	10c00015 	stw	r3,0(r2)
  805f40:	80c00117 	ldw	r3,4(r16)
  805f44:	00bfff04 	movi	r2,-4
  805f48:	1886703a 	and	r3,r3,r2
  805f4c:	1c45c83a 	sub	r2,r3,r17
  805f50:	1c400236 	bltu	r3,r17,805f5c <_malloc_r+0x4a8>
  805f54:	00c003c4 	movi	r3,15
  805f58:	18800416 	blt	r3,r2,805f6c <_malloc_r+0x4b8>
  805f5c:	9009883a 	mov	r4,r18
  805f60:	080dc4c0 	call	80dc4c <__malloc_unlock>
  805f64:	0005883a 	mov	r2,zero
  805f68:	003f7b06 	br	805d58 <__alt_data_end+0xff805d58>
  805f6c:	88c00054 	ori	r3,r17,1
  805f70:	80c00115 	stw	r3,4(r16)
  805f74:	8463883a 	add	r17,r16,r17
  805f78:	10800054 	ori	r2,r2,1
  805f7c:	9c400215 	stw	r17,8(r19)
  805f80:	88800115 	stw	r2,4(r17)
  805f84:	9009883a 	mov	r4,r18
  805f88:	080dc4c0 	call	80dc4c <__malloc_unlock>
  805f8c:	80800204 	addi	r2,r16,8
  805f90:	003f7106 	br	805d58 <__alt_data_end+0xff805d58>
  805f94:	00c00504 	movi	r3,20
  805f98:	18804a2e 	bgeu	r3,r2,8060c4 <_malloc_r+0x610>
  805f9c:	00c01504 	movi	r3,84
  805fa0:	18806e36 	bltu	r3,r2,80615c <_malloc_r+0x6a8>
  805fa4:	8804d33a 	srli	r2,r17,12
  805fa8:	12001bc4 	addi	r8,r2,111
  805fac:	11c01b84 	addi	r7,r2,110
  805fb0:	4209883a 	add	r4,r8,r8
  805fb4:	003edd06 	br	805b2c <__alt_data_end+0xff805b2c>
  805fb8:	3804d27a 	srli	r2,r7,9
  805fbc:	00c00104 	movi	r3,4
  805fc0:	1880442e 	bgeu	r3,r2,8060d4 <_malloc_r+0x620>
  805fc4:	00c00504 	movi	r3,20
  805fc8:	18808136 	bltu	r3,r2,8061d0 <_malloc_r+0x71c>
  805fcc:	11401704 	addi	r5,r2,92
  805fd0:	10c016c4 	addi	r3,r2,91
  805fd4:	294b883a 	add	r5,r5,r5
  805fd8:	294b883a 	add	r5,r5,r5
  805fdc:	294b883a 	add	r5,r5,r5
  805fe0:	994b883a 	add	r5,r19,r5
  805fe4:	28800017 	ldw	r2,0(r5)
  805fe8:	01802074 	movhi	r6,129
  805fec:	297ffe04 	addi	r5,r5,-8
  805ff0:	31850104 	addi	r6,r6,5124
  805ff4:	28806526 	beq	r5,r2,80618c <_malloc_r+0x6d8>
  805ff8:	01bfff04 	movi	r6,-4
  805ffc:	10c00117 	ldw	r3,4(r2)
  806000:	1986703a 	and	r3,r3,r6
  806004:	38c0022e 	bgeu	r7,r3,806010 <_malloc_r+0x55c>
  806008:	10800217 	ldw	r2,8(r2)
  80600c:	28bffb1e 	bne	r5,r2,805ffc <__alt_data_end+0xff805ffc>
  806010:	11400317 	ldw	r5,12(r2)
  806014:	98c00117 	ldw	r3,4(r19)
  806018:	81400315 	stw	r5,12(r16)
  80601c:	80800215 	stw	r2,8(r16)
  806020:	2c000215 	stw	r16,8(r5)
  806024:	14000315 	stw	r16,12(r2)
  806028:	003ef806 	br	805c0c <__alt_data_end+0xff805c0c>
  80602c:	88c00054 	ori	r3,r17,1
  806030:	80c00115 	stw	r3,4(r16)
  806034:	8463883a 	add	r17,r16,r17
  806038:	34400515 	stw	r17,20(r6)
  80603c:	34400415 	stw	r17,16(r6)
  806040:	10c00054 	ori	r3,r2,1
  806044:	8a000315 	stw	r8,12(r17)
  806048:	8a000215 	stw	r8,8(r17)
  80604c:	88c00115 	stw	r3,4(r17)
  806050:	88a3883a 	add	r17,r17,r2
  806054:	88800015 	stw	r2,0(r17)
  806058:	9009883a 	mov	r4,r18
  80605c:	080dc4c0 	call	80dc4c <__malloc_unlock>
  806060:	80800204 	addi	r2,r16,8
  806064:	003f3c06 	br	805d58 <__alt_data_end+0xff805d58>
  806068:	30c00117 	ldw	r3,4(r6)
  80606c:	003ee706 	br	805c0c <__alt_data_end+0xff805c0c>
  806070:	5ac00044 	addi	r11,r11,1
  806074:	588000cc 	andi	r2,r11,3
  806078:	31800204 	addi	r6,r6,8
  80607c:	103efd1e 	bne	r2,zero,805c74 <__alt_data_end+0xff805c74>
  806080:	00002406 	br	806114 <_malloc_r+0x660>
  806084:	14000317 	ldw	r16,12(r2)
  806088:	143f251e 	bne	r2,r16,805d20 <__alt_data_end+0xff805d20>
  80608c:	21000084 	addi	r4,r4,2
  806090:	003ebc06 	br	805b84 <__alt_data_end+0xff805b84>
  806094:	8085883a 	add	r2,r16,r2
  806098:	10c00117 	ldw	r3,4(r2)
  80609c:	81000317 	ldw	r4,12(r16)
  8060a0:	81400217 	ldw	r5,8(r16)
  8060a4:	18c00054 	ori	r3,r3,1
  8060a8:	10c00115 	stw	r3,4(r2)
  8060ac:	29000315 	stw	r4,12(r5)
  8060b0:	21400215 	stw	r5,8(r4)
  8060b4:	9009883a 	mov	r4,r18
  8060b8:	080dc4c0 	call	80dc4c <__malloc_unlock>
  8060bc:	80800204 	addi	r2,r16,8
  8060c0:	003f2506 	br	805d58 <__alt_data_end+0xff805d58>
  8060c4:	12001704 	addi	r8,r2,92
  8060c8:	11c016c4 	addi	r7,r2,91
  8060cc:	4209883a 	add	r4,r8,r8
  8060d0:	003e9606 	br	805b2c <__alt_data_end+0xff805b2c>
  8060d4:	3804d1ba 	srli	r2,r7,6
  8060d8:	11400e44 	addi	r5,r2,57
  8060dc:	10c00e04 	addi	r3,r2,56
  8060e0:	294b883a 	add	r5,r5,r5
  8060e4:	003fbc06 	br	805fd8 <__alt_data_end+0xff805fd8>
  8060e8:	84ff5926 	beq	r16,r19,805e50 <__alt_data_end+0xff805e50>
  8060ec:	00802074 	movhi	r2,129
  8060f0:	10850104 	addi	r2,r2,5124
  8060f4:	14000217 	ldw	r16,8(r2)
  8060f8:	00bfff04 	movi	r2,-4
  8060fc:	80c00117 	ldw	r3,4(r16)
  806100:	1886703a 	and	r3,r3,r2
  806104:	003f9106 	br	805f4c <__alt_data_end+0xff805f4c>
  806108:	60800217 	ldw	r2,8(r12)
  80610c:	213fffc4 	addi	r4,r4,-1
  806110:	1300651e 	bne	r2,r12,8062a8 <_malloc_r+0x7f4>
  806114:	208000cc 	andi	r2,r4,3
  806118:	633ffe04 	addi	r12,r12,-8
  80611c:	103ffa1e 	bne	r2,zero,806108 <__alt_data_end+0xff806108>
  806120:	98800117 	ldw	r2,4(r19)
  806124:	0146303a 	nor	r3,zero,r5
  806128:	1884703a 	and	r2,r3,r2
  80612c:	98800115 	stw	r2,4(r19)
  806130:	294b883a 	add	r5,r5,r5
  806134:	117f2836 	bltu	r2,r5,805dd8 <__alt_data_end+0xff805dd8>
  806138:	283f2726 	beq	r5,zero,805dd8 <__alt_data_end+0xff805dd8>
  80613c:	2886703a 	and	r3,r5,r2
  806140:	5809883a 	mov	r4,r11
  806144:	183ec31e 	bne	r3,zero,805c54 <__alt_data_end+0xff805c54>
  806148:	294b883a 	add	r5,r5,r5
  80614c:	2886703a 	and	r3,r5,r2
  806150:	21000104 	addi	r4,r4,4
  806154:	183ffc26 	beq	r3,zero,806148 <__alt_data_end+0xff806148>
  806158:	003ebe06 	br	805c54 <__alt_data_end+0xff805c54>
  80615c:	00c05504 	movi	r3,340
  806160:	18801236 	bltu	r3,r2,8061ac <_malloc_r+0x6f8>
  806164:	8804d3fa 	srli	r2,r17,15
  806168:	12001e04 	addi	r8,r2,120
  80616c:	11c01dc4 	addi	r7,r2,119
  806170:	4209883a 	add	r4,r8,r8
  806174:	003e6d06 	br	805b2c <__alt_data_end+0xff805b2c>
  806178:	00c40004 	movi	r3,4096
  80617c:	003f4606 	br	805e98 <__alt_data_end+0xff805e98>
  806180:	00800044 	movi	r2,1
  806184:	a0800115 	stw	r2,4(r20)
  806188:	003f7406 	br	805f5c <__alt_data_end+0xff805f5c>
  80618c:	1805d0ba 	srai	r2,r3,2
  806190:	01c00044 	movi	r7,1
  806194:	30c00117 	ldw	r3,4(r6)
  806198:	388e983a 	sll	r7,r7,r2
  80619c:	2805883a 	mov	r2,r5
  8061a0:	38c6b03a 	or	r3,r7,r3
  8061a4:	30c00115 	stw	r3,4(r6)
  8061a8:	003f9b06 	br	806018 <__alt_data_end+0xff806018>
  8061ac:	00c15504 	movi	r3,1364
  8061b0:	18801a36 	bltu	r3,r2,80621c <_malloc_r+0x768>
  8061b4:	8804d4ba 	srli	r2,r17,18
  8061b8:	12001f44 	addi	r8,r2,125
  8061bc:	11c01f04 	addi	r7,r2,124
  8061c0:	4209883a 	add	r4,r8,r8
  8061c4:	003e5906 	br	805b2c <__alt_data_end+0xff805b2c>
  8061c8:	ad400404 	addi	r21,r21,16
  8061cc:	003f1706 	br	805e2c <__alt_data_end+0xff805e2c>
  8061d0:	00c01504 	movi	r3,84
  8061d4:	18802336 	bltu	r3,r2,806264 <_malloc_r+0x7b0>
  8061d8:	3804d33a 	srli	r2,r7,12
  8061dc:	11401bc4 	addi	r5,r2,111
  8061e0:	10c01b84 	addi	r3,r2,110
  8061e4:	294b883a 	add	r5,r5,r5
  8061e8:	003f7b06 	br	805fd8 <__alt_data_end+0xff805fd8>
  8061ec:	9c000217 	ldw	r16,8(r19)
  8061f0:	00bfff04 	movi	r2,-4
  8061f4:	80c00117 	ldw	r3,4(r16)
  8061f8:	1886703a 	and	r3,r3,r2
  8061fc:	003f5306 	br	805f4c <__alt_data_end+0xff805f4c>
  806200:	3083ffcc 	andi	r2,r6,4095
  806204:	103f181e 	bne	r2,zero,805e68 <__alt_data_end+0xff805e68>
  806208:	99000217 	ldw	r4,8(r19)
  80620c:	b545883a 	add	r2,r22,r21
  806210:	10800054 	ori	r2,r2,1
  806214:	20800115 	stw	r2,4(r4)
  806218:	003f3e06 	br	805f14 <__alt_data_end+0xff805f14>
  80621c:	01003f84 	movi	r4,254
  806220:	02001fc4 	movi	r8,127
  806224:	01c01f84 	movi	r7,126
  806228:	003e4006 	br	805b2c <__alt_data_end+0xff805b2c>
  80622c:	00802074 	movhi	r2,129
  806230:	108abf04 	addi	r2,r2,11004
  806234:	15000015 	stw	r20,0(r2)
  806238:	003f1106 	br	805e80 <__alt_data_end+0xff805e80>
  80623c:	00800044 	movi	r2,1
  806240:	002b883a 	mov	r21,zero
  806244:	003f1f06 	br	805ec4 <__alt_data_end+0xff805ec4>
  806248:	81400204 	addi	r5,r16,8
  80624c:	9009883a 	mov	r4,r18
  806250:	0804ebc0 	call	804ebc <_free_r>
  806254:	00802074 	movhi	r2,129
  806258:	1091d404 	addi	r2,r2,18256
  80625c:	10c00017 	ldw	r3,0(r2)
  806260:	003f2c06 	br	805f14 <__alt_data_end+0xff805f14>
  806264:	00c05504 	movi	r3,340
  806268:	18800536 	bltu	r3,r2,806280 <_malloc_r+0x7cc>
  80626c:	3804d3fa 	srli	r2,r7,15
  806270:	11401e04 	addi	r5,r2,120
  806274:	10c01dc4 	addi	r3,r2,119
  806278:	294b883a 	add	r5,r5,r5
  80627c:	003f5606 	br	805fd8 <__alt_data_end+0xff805fd8>
  806280:	00c15504 	movi	r3,1364
  806284:	18800536 	bltu	r3,r2,80629c <_malloc_r+0x7e8>
  806288:	3804d4ba 	srli	r2,r7,18
  80628c:	11401f44 	addi	r5,r2,125
  806290:	10c01f04 	addi	r3,r2,124
  806294:	294b883a 	add	r5,r5,r5
  806298:	003f4f06 	br	805fd8 <__alt_data_end+0xff805fd8>
  80629c:	01403f84 	movi	r5,254
  8062a0:	00c01f84 	movi	r3,126
  8062a4:	003f4c06 	br	805fd8 <__alt_data_end+0xff805fd8>
  8062a8:	98800117 	ldw	r2,4(r19)
  8062ac:	003fa006 	br	806130 <__alt_data_end+0xff806130>
  8062b0:	8808d0fa 	srli	r4,r17,3
  8062b4:	20800044 	addi	r2,r4,1
  8062b8:	1085883a 	add	r2,r2,r2
  8062bc:	003e9006 	br	805d00 <__alt_data_end+0xff805d00>

008062c0 <memchr>:
  8062c0:	208000cc 	andi	r2,r4,3
  8062c4:	280f883a 	mov	r7,r5
  8062c8:	10003426 	beq	r2,zero,80639c <memchr+0xdc>
  8062cc:	30bfffc4 	addi	r2,r6,-1
  8062d0:	30001a26 	beq	r6,zero,80633c <memchr+0x7c>
  8062d4:	20c00003 	ldbu	r3,0(r4)
  8062d8:	29803fcc 	andi	r6,r5,255
  8062dc:	30c0051e 	bne	r6,r3,8062f4 <memchr+0x34>
  8062e0:	00001806 	br	806344 <memchr+0x84>
  8062e4:	10001526 	beq	r2,zero,80633c <memchr+0x7c>
  8062e8:	20c00003 	ldbu	r3,0(r4)
  8062ec:	10bfffc4 	addi	r2,r2,-1
  8062f0:	30c01426 	beq	r6,r3,806344 <memchr+0x84>
  8062f4:	21000044 	addi	r4,r4,1
  8062f8:	20c000cc 	andi	r3,r4,3
  8062fc:	183ff91e 	bne	r3,zero,8062e4 <__alt_data_end+0xff8062e4>
  806300:	020000c4 	movi	r8,3
  806304:	40801136 	bltu	r8,r2,80634c <memchr+0x8c>
  806308:	10000c26 	beq	r2,zero,80633c <memchr+0x7c>
  80630c:	20c00003 	ldbu	r3,0(r4)
  806310:	29403fcc 	andi	r5,r5,255
  806314:	28c00b26 	beq	r5,r3,806344 <memchr+0x84>
  806318:	20c00044 	addi	r3,r4,1
  80631c:	39803fcc 	andi	r6,r7,255
  806320:	2089883a 	add	r4,r4,r2
  806324:	00000306 	br	806334 <memchr+0x74>
  806328:	18c00044 	addi	r3,r3,1
  80632c:	197fffc3 	ldbu	r5,-1(r3)
  806330:	31400526 	beq	r6,r5,806348 <memchr+0x88>
  806334:	1805883a 	mov	r2,r3
  806338:	20fffb1e 	bne	r4,r3,806328 <__alt_data_end+0xff806328>
  80633c:	0005883a 	mov	r2,zero
  806340:	f800283a 	ret
  806344:	2005883a 	mov	r2,r4
  806348:	f800283a 	ret
  80634c:	28c03fcc 	andi	r3,r5,255
  806350:	1812923a 	slli	r9,r3,8
  806354:	02ffbff4 	movhi	r11,65279
  806358:	02a02074 	movhi	r10,32897
  80635c:	48d2b03a 	or	r9,r9,r3
  806360:	4806943a 	slli	r3,r9,16
  806364:	5affbfc4 	addi	r11,r11,-257
  806368:	52a02004 	addi	r10,r10,-32640
  80636c:	48d2b03a 	or	r9,r9,r3
  806370:	20c00017 	ldw	r3,0(r4)
  806374:	48c6f03a 	xor	r3,r9,r3
  806378:	1acd883a 	add	r6,r3,r11
  80637c:	00c6303a 	nor	r3,zero,r3
  806380:	30c6703a 	and	r3,r6,r3
  806384:	1a86703a 	and	r3,r3,r10
  806388:	183fe01e 	bne	r3,zero,80630c <__alt_data_end+0xff80630c>
  80638c:	10bfff04 	addi	r2,r2,-4
  806390:	21000104 	addi	r4,r4,4
  806394:	40bff636 	bltu	r8,r2,806370 <__alt_data_end+0xff806370>
  806398:	003fdb06 	br	806308 <__alt_data_end+0xff806308>
  80639c:	3005883a 	mov	r2,r6
  8063a0:	003fd706 	br	806300 <__alt_data_end+0xff806300>

008063a4 <memcpy>:
  8063a4:	defffd04 	addi	sp,sp,-12
  8063a8:	dfc00215 	stw	ra,8(sp)
  8063ac:	dc400115 	stw	r17,4(sp)
  8063b0:	dc000015 	stw	r16,0(sp)
  8063b4:	00c003c4 	movi	r3,15
  8063b8:	2005883a 	mov	r2,r4
  8063bc:	1980452e 	bgeu	r3,r6,8064d4 <memcpy+0x130>
  8063c0:	2906b03a 	or	r3,r5,r4
  8063c4:	18c000cc 	andi	r3,r3,3
  8063c8:	1800441e 	bne	r3,zero,8064dc <memcpy+0x138>
  8063cc:	347ffc04 	addi	r17,r6,-16
  8063d0:	8822d13a 	srli	r17,r17,4
  8063d4:	28c00104 	addi	r3,r5,4
  8063d8:	23400104 	addi	r13,r4,4
  8063dc:	8820913a 	slli	r16,r17,4
  8063e0:	2b000204 	addi	r12,r5,8
  8063e4:	22c00204 	addi	r11,r4,8
  8063e8:	84000504 	addi	r16,r16,20
  8063ec:	2a800304 	addi	r10,r5,12
  8063f0:	22400304 	addi	r9,r4,12
  8063f4:	2c21883a 	add	r16,r5,r16
  8063f8:	2811883a 	mov	r8,r5
  8063fc:	200f883a 	mov	r7,r4
  806400:	41000017 	ldw	r4,0(r8)
  806404:	1fc00017 	ldw	ra,0(r3)
  806408:	63c00017 	ldw	r15,0(r12)
  80640c:	39000015 	stw	r4,0(r7)
  806410:	53800017 	ldw	r14,0(r10)
  806414:	6fc00015 	stw	ra,0(r13)
  806418:	5bc00015 	stw	r15,0(r11)
  80641c:	4b800015 	stw	r14,0(r9)
  806420:	18c00404 	addi	r3,r3,16
  806424:	39c00404 	addi	r7,r7,16
  806428:	42000404 	addi	r8,r8,16
  80642c:	6b400404 	addi	r13,r13,16
  806430:	63000404 	addi	r12,r12,16
  806434:	5ac00404 	addi	r11,r11,16
  806438:	52800404 	addi	r10,r10,16
  80643c:	4a400404 	addi	r9,r9,16
  806440:	1c3fef1e 	bne	r3,r16,806400 <__alt_data_end+0xff806400>
  806444:	89c00044 	addi	r7,r17,1
  806448:	380e913a 	slli	r7,r7,4
  80644c:	310003cc 	andi	r4,r6,15
  806450:	02c000c4 	movi	r11,3
  806454:	11c7883a 	add	r3,r2,r7
  806458:	29cb883a 	add	r5,r5,r7
  80645c:	5900212e 	bgeu	r11,r4,8064e4 <memcpy+0x140>
  806460:	1813883a 	mov	r9,r3
  806464:	2811883a 	mov	r8,r5
  806468:	200f883a 	mov	r7,r4
  80646c:	42800017 	ldw	r10,0(r8)
  806470:	4a400104 	addi	r9,r9,4
  806474:	39ffff04 	addi	r7,r7,-4
  806478:	4abfff15 	stw	r10,-4(r9)
  80647c:	42000104 	addi	r8,r8,4
  806480:	59fffa36 	bltu	r11,r7,80646c <__alt_data_end+0xff80646c>
  806484:	213fff04 	addi	r4,r4,-4
  806488:	2008d0ba 	srli	r4,r4,2
  80648c:	318000cc 	andi	r6,r6,3
  806490:	21000044 	addi	r4,r4,1
  806494:	2109883a 	add	r4,r4,r4
  806498:	2109883a 	add	r4,r4,r4
  80649c:	1907883a 	add	r3,r3,r4
  8064a0:	290b883a 	add	r5,r5,r4
  8064a4:	30000626 	beq	r6,zero,8064c0 <memcpy+0x11c>
  8064a8:	198d883a 	add	r6,r3,r6
  8064ac:	29c00003 	ldbu	r7,0(r5)
  8064b0:	18c00044 	addi	r3,r3,1
  8064b4:	29400044 	addi	r5,r5,1
  8064b8:	19ffffc5 	stb	r7,-1(r3)
  8064bc:	19bffb1e 	bne	r3,r6,8064ac <__alt_data_end+0xff8064ac>
  8064c0:	dfc00217 	ldw	ra,8(sp)
  8064c4:	dc400117 	ldw	r17,4(sp)
  8064c8:	dc000017 	ldw	r16,0(sp)
  8064cc:	dec00304 	addi	sp,sp,12
  8064d0:	f800283a 	ret
  8064d4:	2007883a 	mov	r3,r4
  8064d8:	003ff206 	br	8064a4 <__alt_data_end+0xff8064a4>
  8064dc:	2007883a 	mov	r3,r4
  8064e0:	003ff106 	br	8064a8 <__alt_data_end+0xff8064a8>
  8064e4:	200d883a 	mov	r6,r4
  8064e8:	003fee06 	br	8064a4 <__alt_data_end+0xff8064a4>

008064ec <memmove>:
  8064ec:	2005883a 	mov	r2,r4
  8064f0:	29000b2e 	bgeu	r5,r4,806520 <memmove+0x34>
  8064f4:	298f883a 	add	r7,r5,r6
  8064f8:	21c0092e 	bgeu	r4,r7,806520 <memmove+0x34>
  8064fc:	2187883a 	add	r3,r4,r6
  806500:	198bc83a 	sub	r5,r3,r6
  806504:	30004826 	beq	r6,zero,806628 <memmove+0x13c>
  806508:	39ffffc4 	addi	r7,r7,-1
  80650c:	39000003 	ldbu	r4,0(r7)
  806510:	18ffffc4 	addi	r3,r3,-1
  806514:	19000005 	stb	r4,0(r3)
  806518:	28fffb1e 	bne	r5,r3,806508 <__alt_data_end+0xff806508>
  80651c:	f800283a 	ret
  806520:	00c003c4 	movi	r3,15
  806524:	1980412e 	bgeu	r3,r6,80662c <memmove+0x140>
  806528:	2886b03a 	or	r3,r5,r2
  80652c:	18c000cc 	andi	r3,r3,3
  806530:	1800401e 	bne	r3,zero,806634 <memmove+0x148>
  806534:	33fffc04 	addi	r15,r6,-16
  806538:	781ed13a 	srli	r15,r15,4
  80653c:	28c00104 	addi	r3,r5,4
  806540:	13400104 	addi	r13,r2,4
  806544:	781c913a 	slli	r14,r15,4
  806548:	2b000204 	addi	r12,r5,8
  80654c:	12c00204 	addi	r11,r2,8
  806550:	73800504 	addi	r14,r14,20
  806554:	2a800304 	addi	r10,r5,12
  806558:	12400304 	addi	r9,r2,12
  80655c:	2b9d883a 	add	r14,r5,r14
  806560:	2811883a 	mov	r8,r5
  806564:	100f883a 	mov	r7,r2
  806568:	41000017 	ldw	r4,0(r8)
  80656c:	39c00404 	addi	r7,r7,16
  806570:	18c00404 	addi	r3,r3,16
  806574:	393ffc15 	stw	r4,-16(r7)
  806578:	193ffc17 	ldw	r4,-16(r3)
  80657c:	6b400404 	addi	r13,r13,16
  806580:	5ac00404 	addi	r11,r11,16
  806584:	693ffc15 	stw	r4,-16(r13)
  806588:	61000017 	ldw	r4,0(r12)
  80658c:	4a400404 	addi	r9,r9,16
  806590:	42000404 	addi	r8,r8,16
  806594:	593ffc15 	stw	r4,-16(r11)
  806598:	51000017 	ldw	r4,0(r10)
  80659c:	63000404 	addi	r12,r12,16
  8065a0:	52800404 	addi	r10,r10,16
  8065a4:	493ffc15 	stw	r4,-16(r9)
  8065a8:	1bbfef1e 	bne	r3,r14,806568 <__alt_data_end+0xff806568>
  8065ac:	79000044 	addi	r4,r15,1
  8065b0:	2008913a 	slli	r4,r4,4
  8065b4:	328003cc 	andi	r10,r6,15
  8065b8:	02c000c4 	movi	r11,3
  8065bc:	1107883a 	add	r3,r2,r4
  8065c0:	290b883a 	add	r5,r5,r4
  8065c4:	5a801e2e 	bgeu	r11,r10,806640 <memmove+0x154>
  8065c8:	1813883a 	mov	r9,r3
  8065cc:	2811883a 	mov	r8,r5
  8065d0:	500f883a 	mov	r7,r10
  8065d4:	41000017 	ldw	r4,0(r8)
  8065d8:	4a400104 	addi	r9,r9,4
  8065dc:	39ffff04 	addi	r7,r7,-4
  8065e0:	493fff15 	stw	r4,-4(r9)
  8065e4:	42000104 	addi	r8,r8,4
  8065e8:	59fffa36 	bltu	r11,r7,8065d4 <__alt_data_end+0xff8065d4>
  8065ec:	513fff04 	addi	r4,r10,-4
  8065f0:	2008d0ba 	srli	r4,r4,2
  8065f4:	318000cc 	andi	r6,r6,3
  8065f8:	21000044 	addi	r4,r4,1
  8065fc:	2109883a 	add	r4,r4,r4
  806600:	2109883a 	add	r4,r4,r4
  806604:	1907883a 	add	r3,r3,r4
  806608:	290b883a 	add	r5,r5,r4
  80660c:	30000b26 	beq	r6,zero,80663c <memmove+0x150>
  806610:	198d883a 	add	r6,r3,r6
  806614:	29c00003 	ldbu	r7,0(r5)
  806618:	18c00044 	addi	r3,r3,1
  80661c:	29400044 	addi	r5,r5,1
  806620:	19ffffc5 	stb	r7,-1(r3)
  806624:	19bffb1e 	bne	r3,r6,806614 <__alt_data_end+0xff806614>
  806628:	f800283a 	ret
  80662c:	1007883a 	mov	r3,r2
  806630:	003ff606 	br	80660c <__alt_data_end+0xff80660c>
  806634:	1007883a 	mov	r3,r2
  806638:	003ff506 	br	806610 <__alt_data_end+0xff806610>
  80663c:	f800283a 	ret
  806640:	500d883a 	mov	r6,r10
  806644:	003ff106 	br	80660c <__alt_data_end+0xff80660c>

00806648 <memset>:
  806648:	20c000cc 	andi	r3,r4,3
  80664c:	2005883a 	mov	r2,r4
  806650:	18004426 	beq	r3,zero,806764 <memset+0x11c>
  806654:	31ffffc4 	addi	r7,r6,-1
  806658:	30004026 	beq	r6,zero,80675c <memset+0x114>
  80665c:	2813883a 	mov	r9,r5
  806660:	200d883a 	mov	r6,r4
  806664:	2007883a 	mov	r3,r4
  806668:	00000406 	br	80667c <memset+0x34>
  80666c:	3a3fffc4 	addi	r8,r7,-1
  806670:	31800044 	addi	r6,r6,1
  806674:	38003926 	beq	r7,zero,80675c <memset+0x114>
  806678:	400f883a 	mov	r7,r8
  80667c:	18c00044 	addi	r3,r3,1
  806680:	32400005 	stb	r9,0(r6)
  806684:	1a0000cc 	andi	r8,r3,3
  806688:	403ff81e 	bne	r8,zero,80666c <__alt_data_end+0xff80666c>
  80668c:	010000c4 	movi	r4,3
  806690:	21c02d2e 	bgeu	r4,r7,806748 <memset+0x100>
  806694:	29003fcc 	andi	r4,r5,255
  806698:	200c923a 	slli	r6,r4,8
  80669c:	3108b03a 	or	r4,r6,r4
  8066a0:	200c943a 	slli	r6,r4,16
  8066a4:	218cb03a 	or	r6,r4,r6
  8066a8:	010003c4 	movi	r4,15
  8066ac:	21c0182e 	bgeu	r4,r7,806710 <memset+0xc8>
  8066b0:	3b3ffc04 	addi	r12,r7,-16
  8066b4:	6018d13a 	srli	r12,r12,4
  8066b8:	1a000104 	addi	r8,r3,4
  8066bc:	1ac00204 	addi	r11,r3,8
  8066c0:	6008913a 	slli	r4,r12,4
  8066c4:	1a800304 	addi	r10,r3,12
  8066c8:	1813883a 	mov	r9,r3
  8066cc:	21000504 	addi	r4,r4,20
  8066d0:	1909883a 	add	r4,r3,r4
  8066d4:	49800015 	stw	r6,0(r9)
  8066d8:	41800015 	stw	r6,0(r8)
  8066dc:	59800015 	stw	r6,0(r11)
  8066e0:	51800015 	stw	r6,0(r10)
  8066e4:	42000404 	addi	r8,r8,16
  8066e8:	4a400404 	addi	r9,r9,16
  8066ec:	5ac00404 	addi	r11,r11,16
  8066f0:	52800404 	addi	r10,r10,16
  8066f4:	413ff71e 	bne	r8,r4,8066d4 <__alt_data_end+0xff8066d4>
  8066f8:	63000044 	addi	r12,r12,1
  8066fc:	6018913a 	slli	r12,r12,4
  806700:	39c003cc 	andi	r7,r7,15
  806704:	010000c4 	movi	r4,3
  806708:	1b07883a 	add	r3,r3,r12
  80670c:	21c00e2e 	bgeu	r4,r7,806748 <memset+0x100>
  806710:	1813883a 	mov	r9,r3
  806714:	3811883a 	mov	r8,r7
  806718:	010000c4 	movi	r4,3
  80671c:	49800015 	stw	r6,0(r9)
  806720:	423fff04 	addi	r8,r8,-4
  806724:	4a400104 	addi	r9,r9,4
  806728:	223ffc36 	bltu	r4,r8,80671c <__alt_data_end+0xff80671c>
  80672c:	393fff04 	addi	r4,r7,-4
  806730:	2008d0ba 	srli	r4,r4,2
  806734:	39c000cc 	andi	r7,r7,3
  806738:	21000044 	addi	r4,r4,1
  80673c:	2109883a 	add	r4,r4,r4
  806740:	2109883a 	add	r4,r4,r4
  806744:	1907883a 	add	r3,r3,r4
  806748:	38000526 	beq	r7,zero,806760 <memset+0x118>
  80674c:	19cf883a 	add	r7,r3,r7
  806750:	19400005 	stb	r5,0(r3)
  806754:	18c00044 	addi	r3,r3,1
  806758:	38fffd1e 	bne	r7,r3,806750 <__alt_data_end+0xff806750>
  80675c:	f800283a 	ret
  806760:	f800283a 	ret
  806764:	2007883a 	mov	r3,r4
  806768:	300f883a 	mov	r7,r6
  80676c:	003fc706 	br	80668c <__alt_data_end+0xff80668c>

00806770 <_Balloc>:
  806770:	20801317 	ldw	r2,76(r4)
  806774:	defffc04 	addi	sp,sp,-16
  806778:	dc400115 	stw	r17,4(sp)
  80677c:	dc000015 	stw	r16,0(sp)
  806780:	dfc00315 	stw	ra,12(sp)
  806784:	dc800215 	stw	r18,8(sp)
  806788:	2023883a 	mov	r17,r4
  80678c:	2821883a 	mov	r16,r5
  806790:	10000f26 	beq	r2,zero,8067d0 <_Balloc+0x60>
  806794:	8407883a 	add	r3,r16,r16
  806798:	18c7883a 	add	r3,r3,r3
  80679c:	10c7883a 	add	r3,r2,r3
  8067a0:	18800017 	ldw	r2,0(r3)
  8067a4:	10001126 	beq	r2,zero,8067ec <_Balloc+0x7c>
  8067a8:	11000017 	ldw	r4,0(r2)
  8067ac:	19000015 	stw	r4,0(r3)
  8067b0:	10000415 	stw	zero,16(r2)
  8067b4:	10000315 	stw	zero,12(r2)
  8067b8:	dfc00317 	ldw	ra,12(sp)
  8067bc:	dc800217 	ldw	r18,8(sp)
  8067c0:	dc400117 	ldw	r17,4(sp)
  8067c4:	dc000017 	ldw	r16,0(sp)
  8067c8:	dec00404 	addi	sp,sp,16
  8067cc:	f800283a 	ret
  8067d0:	01800844 	movi	r6,33
  8067d4:	01400104 	movi	r5,4
  8067d8:	08098180 	call	809818 <_calloc_r>
  8067dc:	88801315 	stw	r2,76(r17)
  8067e0:	103fec1e 	bne	r2,zero,806794 <__alt_data_end+0xff806794>
  8067e4:	0005883a 	mov	r2,zero
  8067e8:	003ff306 	br	8067b8 <__alt_data_end+0xff8067b8>
  8067ec:	01400044 	movi	r5,1
  8067f0:	2c24983a 	sll	r18,r5,r16
  8067f4:	8809883a 	mov	r4,r17
  8067f8:	91800144 	addi	r6,r18,5
  8067fc:	318d883a 	add	r6,r6,r6
  806800:	318d883a 	add	r6,r6,r6
  806804:	08098180 	call	809818 <_calloc_r>
  806808:	103ff626 	beq	r2,zero,8067e4 <__alt_data_end+0xff8067e4>
  80680c:	14000115 	stw	r16,4(r2)
  806810:	14800215 	stw	r18,8(r2)
  806814:	003fe606 	br	8067b0 <__alt_data_end+0xff8067b0>

00806818 <_Bfree>:
  806818:	28000826 	beq	r5,zero,80683c <_Bfree+0x24>
  80681c:	28c00117 	ldw	r3,4(r5)
  806820:	20801317 	ldw	r2,76(r4)
  806824:	18c7883a 	add	r3,r3,r3
  806828:	18c7883a 	add	r3,r3,r3
  80682c:	10c5883a 	add	r2,r2,r3
  806830:	10c00017 	ldw	r3,0(r2)
  806834:	28c00015 	stw	r3,0(r5)
  806838:	11400015 	stw	r5,0(r2)
  80683c:	f800283a 	ret

00806840 <__multadd>:
  806840:	defff704 	addi	sp,sp,-36
  806844:	dc800215 	stw	r18,8(sp)
  806848:	2c800417 	ldw	r18,16(r5)
  80684c:	dd800615 	stw	r22,24(sp)
  806850:	dd400515 	stw	r21,20(sp)
  806854:	dd000415 	stw	r20,16(sp)
  806858:	dcc00315 	stw	r19,12(sp)
  80685c:	dc400115 	stw	r17,4(sp)
  806860:	dc000015 	stw	r16,0(sp)
  806864:	dfc00815 	stw	ra,32(sp)
  806868:	ddc00715 	stw	r23,28(sp)
  80686c:	2827883a 	mov	r19,r5
  806870:	2029883a 	mov	r20,r4
  806874:	3023883a 	mov	r17,r6
  806878:	3821883a 	mov	r16,r7
  80687c:	2d400504 	addi	r21,r5,20
  806880:	002d883a 	mov	r22,zero
  806884:	adc00017 	ldw	r23,0(r21)
  806888:	880b883a 	mov	r5,r17
  80688c:	ad400104 	addi	r21,r21,4
  806890:	b93fffcc 	andi	r4,r23,65535
  806894:	080ae240 	call	80ae24 <__mulsi3>
  806898:	b808d43a 	srli	r4,r23,16
  80689c:	880b883a 	mov	r5,r17
  8068a0:	1421883a 	add	r16,r2,r16
  8068a4:	080ae240 	call	80ae24 <__mulsi3>
  8068a8:	800ed43a 	srli	r7,r16,16
  8068ac:	80ffffcc 	andi	r3,r16,65535
  8068b0:	b5800044 	addi	r22,r22,1
  8068b4:	11c5883a 	add	r2,r2,r7
  8068b8:	100e943a 	slli	r7,r2,16
  8068bc:	1020d43a 	srli	r16,r2,16
  8068c0:	38c7883a 	add	r3,r7,r3
  8068c4:	a8ffff15 	stw	r3,-4(r21)
  8068c8:	b4bfee16 	blt	r22,r18,806884 <__alt_data_end+0xff806884>
  8068cc:	80000926 	beq	r16,zero,8068f4 <__multadd+0xb4>
  8068d0:	98800217 	ldw	r2,8(r19)
  8068d4:	9080130e 	bge	r18,r2,806924 <__multadd+0xe4>
  8068d8:	90800144 	addi	r2,r18,5
  8068dc:	1085883a 	add	r2,r2,r2
  8068e0:	1085883a 	add	r2,r2,r2
  8068e4:	9885883a 	add	r2,r19,r2
  8068e8:	14000015 	stw	r16,0(r2)
  8068ec:	94800044 	addi	r18,r18,1
  8068f0:	9c800415 	stw	r18,16(r19)
  8068f4:	9805883a 	mov	r2,r19
  8068f8:	dfc00817 	ldw	ra,32(sp)
  8068fc:	ddc00717 	ldw	r23,28(sp)
  806900:	dd800617 	ldw	r22,24(sp)
  806904:	dd400517 	ldw	r21,20(sp)
  806908:	dd000417 	ldw	r20,16(sp)
  80690c:	dcc00317 	ldw	r19,12(sp)
  806910:	dc800217 	ldw	r18,8(sp)
  806914:	dc400117 	ldw	r17,4(sp)
  806918:	dc000017 	ldw	r16,0(sp)
  80691c:	dec00904 	addi	sp,sp,36
  806920:	f800283a 	ret
  806924:	99400117 	ldw	r5,4(r19)
  806928:	a009883a 	mov	r4,r20
  80692c:	29400044 	addi	r5,r5,1
  806930:	08067700 	call	806770 <_Balloc>
  806934:	99800417 	ldw	r6,16(r19)
  806938:	99400304 	addi	r5,r19,12
  80693c:	11000304 	addi	r4,r2,12
  806940:	31800084 	addi	r6,r6,2
  806944:	318d883a 	add	r6,r6,r6
  806948:	318d883a 	add	r6,r6,r6
  80694c:	1023883a 	mov	r17,r2
  806950:	08063a40 	call	8063a4 <memcpy>
  806954:	98000a26 	beq	r19,zero,806980 <__multadd+0x140>
  806958:	98c00117 	ldw	r3,4(r19)
  80695c:	a0801317 	ldw	r2,76(r20)
  806960:	18c7883a 	add	r3,r3,r3
  806964:	18c7883a 	add	r3,r3,r3
  806968:	10c5883a 	add	r2,r2,r3
  80696c:	10c00017 	ldw	r3,0(r2)
  806970:	98c00015 	stw	r3,0(r19)
  806974:	14c00015 	stw	r19,0(r2)
  806978:	8827883a 	mov	r19,r17
  80697c:	003fd606 	br	8068d8 <__alt_data_end+0xff8068d8>
  806980:	8827883a 	mov	r19,r17
  806984:	003fd406 	br	8068d8 <__alt_data_end+0xff8068d8>

00806988 <__s2b>:
  806988:	defff904 	addi	sp,sp,-28
  80698c:	dc400115 	stw	r17,4(sp)
  806990:	dc000015 	stw	r16,0(sp)
  806994:	2023883a 	mov	r17,r4
  806998:	2821883a 	mov	r16,r5
  80699c:	39000204 	addi	r4,r7,8
  8069a0:	01400244 	movi	r5,9
  8069a4:	dcc00315 	stw	r19,12(sp)
  8069a8:	dc800215 	stw	r18,8(sp)
  8069ac:	dfc00615 	stw	ra,24(sp)
  8069b0:	dd400515 	stw	r21,20(sp)
  8069b4:	dd000415 	stw	r20,16(sp)
  8069b8:	3825883a 	mov	r18,r7
  8069bc:	3027883a 	mov	r19,r6
  8069c0:	080ac700 	call	80ac70 <__divsi3>
  8069c4:	00c00044 	movi	r3,1
  8069c8:	000b883a 	mov	r5,zero
  8069cc:	1880030e 	bge	r3,r2,8069dc <__s2b+0x54>
  8069d0:	18c7883a 	add	r3,r3,r3
  8069d4:	29400044 	addi	r5,r5,1
  8069d8:	18bffd16 	blt	r3,r2,8069d0 <__alt_data_end+0xff8069d0>
  8069dc:	8809883a 	mov	r4,r17
  8069e0:	08067700 	call	806770 <_Balloc>
  8069e4:	d8c00717 	ldw	r3,28(sp)
  8069e8:	10c00515 	stw	r3,20(r2)
  8069ec:	00c00044 	movi	r3,1
  8069f0:	10c00415 	stw	r3,16(r2)
  8069f4:	00c00244 	movi	r3,9
  8069f8:	1cc0210e 	bge	r3,r19,806a80 <__s2b+0xf8>
  8069fc:	80eb883a 	add	r21,r16,r3
  806a00:	a829883a 	mov	r20,r21
  806a04:	84e1883a 	add	r16,r16,r19
  806a08:	a1c00007 	ldb	r7,0(r20)
  806a0c:	01800284 	movi	r6,10
  806a10:	a5000044 	addi	r20,r20,1
  806a14:	100b883a 	mov	r5,r2
  806a18:	39fff404 	addi	r7,r7,-48
  806a1c:	8809883a 	mov	r4,r17
  806a20:	08068400 	call	806840 <__multadd>
  806a24:	a43ff81e 	bne	r20,r16,806a08 <__alt_data_end+0xff806a08>
  806a28:	ace1883a 	add	r16,r21,r19
  806a2c:	843ffe04 	addi	r16,r16,-8
  806a30:	9c800a0e 	bge	r19,r18,806a5c <__s2b+0xd4>
  806a34:	94e5c83a 	sub	r18,r18,r19
  806a38:	84a5883a 	add	r18,r16,r18
  806a3c:	81c00007 	ldb	r7,0(r16)
  806a40:	01800284 	movi	r6,10
  806a44:	84000044 	addi	r16,r16,1
  806a48:	100b883a 	mov	r5,r2
  806a4c:	39fff404 	addi	r7,r7,-48
  806a50:	8809883a 	mov	r4,r17
  806a54:	08068400 	call	806840 <__multadd>
  806a58:	84bff81e 	bne	r16,r18,806a3c <__alt_data_end+0xff806a3c>
  806a5c:	dfc00617 	ldw	ra,24(sp)
  806a60:	dd400517 	ldw	r21,20(sp)
  806a64:	dd000417 	ldw	r20,16(sp)
  806a68:	dcc00317 	ldw	r19,12(sp)
  806a6c:	dc800217 	ldw	r18,8(sp)
  806a70:	dc400117 	ldw	r17,4(sp)
  806a74:	dc000017 	ldw	r16,0(sp)
  806a78:	dec00704 	addi	sp,sp,28
  806a7c:	f800283a 	ret
  806a80:	84000284 	addi	r16,r16,10
  806a84:	1827883a 	mov	r19,r3
  806a88:	003fe906 	br	806a30 <__alt_data_end+0xff806a30>

00806a8c <__hi0bits>:
  806a8c:	20bfffec 	andhi	r2,r4,65535
  806a90:	1000141e 	bne	r2,zero,806ae4 <__hi0bits+0x58>
  806a94:	2008943a 	slli	r4,r4,16
  806a98:	00800404 	movi	r2,16
  806a9c:	20ffc02c 	andhi	r3,r4,65280
  806aa0:	1800021e 	bne	r3,zero,806aac <__hi0bits+0x20>
  806aa4:	2008923a 	slli	r4,r4,8
  806aa8:	10800204 	addi	r2,r2,8
  806aac:	20fc002c 	andhi	r3,r4,61440
  806ab0:	1800021e 	bne	r3,zero,806abc <__hi0bits+0x30>
  806ab4:	2008913a 	slli	r4,r4,4
  806ab8:	10800104 	addi	r2,r2,4
  806abc:	20f0002c 	andhi	r3,r4,49152
  806ac0:	1800031e 	bne	r3,zero,806ad0 <__hi0bits+0x44>
  806ac4:	2109883a 	add	r4,r4,r4
  806ac8:	10800084 	addi	r2,r2,2
  806acc:	2109883a 	add	r4,r4,r4
  806ad0:	20000316 	blt	r4,zero,806ae0 <__hi0bits+0x54>
  806ad4:	2110002c 	andhi	r4,r4,16384
  806ad8:	2000041e 	bne	r4,zero,806aec <__hi0bits+0x60>
  806adc:	00800804 	movi	r2,32
  806ae0:	f800283a 	ret
  806ae4:	0005883a 	mov	r2,zero
  806ae8:	003fec06 	br	806a9c <__alt_data_end+0xff806a9c>
  806aec:	10800044 	addi	r2,r2,1
  806af0:	f800283a 	ret

00806af4 <__lo0bits>:
  806af4:	20c00017 	ldw	r3,0(r4)
  806af8:	188001cc 	andi	r2,r3,7
  806afc:	10000826 	beq	r2,zero,806b20 <__lo0bits+0x2c>
  806b00:	1880004c 	andi	r2,r3,1
  806b04:	1000211e 	bne	r2,zero,806b8c <__lo0bits+0x98>
  806b08:	1880008c 	andi	r2,r3,2
  806b0c:	1000211e 	bne	r2,zero,806b94 <__lo0bits+0xa0>
  806b10:	1806d0ba 	srli	r3,r3,2
  806b14:	00800084 	movi	r2,2
  806b18:	20c00015 	stw	r3,0(r4)
  806b1c:	f800283a 	ret
  806b20:	18bfffcc 	andi	r2,r3,65535
  806b24:	10001326 	beq	r2,zero,806b74 <__lo0bits+0x80>
  806b28:	0005883a 	mov	r2,zero
  806b2c:	19403fcc 	andi	r5,r3,255
  806b30:	2800021e 	bne	r5,zero,806b3c <__lo0bits+0x48>
  806b34:	1806d23a 	srli	r3,r3,8
  806b38:	10800204 	addi	r2,r2,8
  806b3c:	194003cc 	andi	r5,r3,15
  806b40:	2800021e 	bne	r5,zero,806b4c <__lo0bits+0x58>
  806b44:	1806d13a 	srli	r3,r3,4
  806b48:	10800104 	addi	r2,r2,4
  806b4c:	194000cc 	andi	r5,r3,3
  806b50:	2800021e 	bne	r5,zero,806b5c <__lo0bits+0x68>
  806b54:	1806d0ba 	srli	r3,r3,2
  806b58:	10800084 	addi	r2,r2,2
  806b5c:	1940004c 	andi	r5,r3,1
  806b60:	2800081e 	bne	r5,zero,806b84 <__lo0bits+0x90>
  806b64:	1806d07a 	srli	r3,r3,1
  806b68:	1800051e 	bne	r3,zero,806b80 <__lo0bits+0x8c>
  806b6c:	00800804 	movi	r2,32
  806b70:	f800283a 	ret
  806b74:	1806d43a 	srli	r3,r3,16
  806b78:	00800404 	movi	r2,16
  806b7c:	003feb06 	br	806b2c <__alt_data_end+0xff806b2c>
  806b80:	10800044 	addi	r2,r2,1
  806b84:	20c00015 	stw	r3,0(r4)
  806b88:	f800283a 	ret
  806b8c:	0005883a 	mov	r2,zero
  806b90:	f800283a 	ret
  806b94:	1806d07a 	srli	r3,r3,1
  806b98:	00800044 	movi	r2,1
  806b9c:	20c00015 	stw	r3,0(r4)
  806ba0:	f800283a 	ret

00806ba4 <__i2b>:
  806ba4:	defffd04 	addi	sp,sp,-12
  806ba8:	dc000015 	stw	r16,0(sp)
  806bac:	04000044 	movi	r16,1
  806bb0:	dc400115 	stw	r17,4(sp)
  806bb4:	2823883a 	mov	r17,r5
  806bb8:	800b883a 	mov	r5,r16
  806bbc:	dfc00215 	stw	ra,8(sp)
  806bc0:	08067700 	call	806770 <_Balloc>
  806bc4:	14400515 	stw	r17,20(r2)
  806bc8:	14000415 	stw	r16,16(r2)
  806bcc:	dfc00217 	ldw	ra,8(sp)
  806bd0:	dc400117 	ldw	r17,4(sp)
  806bd4:	dc000017 	ldw	r16,0(sp)
  806bd8:	dec00304 	addi	sp,sp,12
  806bdc:	f800283a 	ret

00806be0 <__multiply>:
  806be0:	deffef04 	addi	sp,sp,-68
  806be4:	dc400815 	stw	r17,32(sp)
  806be8:	dc000715 	stw	r16,28(sp)
  806bec:	34400417 	ldw	r17,16(r6)
  806bf0:	2c000417 	ldw	r16,16(r5)
  806bf4:	dd800d15 	stw	r22,52(sp)
  806bf8:	dc800915 	stw	r18,36(sp)
  806bfc:	dfc01015 	stw	ra,64(sp)
  806c00:	df000f15 	stw	fp,60(sp)
  806c04:	ddc00e15 	stw	r23,56(sp)
  806c08:	dd400c15 	stw	r21,48(sp)
  806c0c:	dd000b15 	stw	r20,44(sp)
  806c10:	dcc00a15 	stw	r19,40(sp)
  806c14:	2825883a 	mov	r18,r5
  806c18:	302d883a 	mov	r22,r6
  806c1c:	8440050e 	bge	r16,r17,806c34 <__multiply+0x54>
  806c20:	8007883a 	mov	r3,r16
  806c24:	3025883a 	mov	r18,r6
  806c28:	8821883a 	mov	r16,r17
  806c2c:	282d883a 	mov	r22,r5
  806c30:	1823883a 	mov	r17,r3
  806c34:	90800217 	ldw	r2,8(r18)
  806c38:	8447883a 	add	r3,r16,r17
  806c3c:	d8c00215 	stw	r3,8(sp)
  806c40:	91400117 	ldw	r5,4(r18)
  806c44:	10c0010e 	bge	r2,r3,806c4c <__multiply+0x6c>
  806c48:	29400044 	addi	r5,r5,1
  806c4c:	08067700 	call	806770 <_Balloc>
  806c50:	d8c00217 	ldw	r3,8(sp)
  806c54:	d8800615 	stw	r2,24(sp)
  806c58:	18eb883a 	add	r21,r3,r3
  806c5c:	ad6b883a 	add	r21,r21,r21
  806c60:	10c00504 	addi	r3,r2,20
  806c64:	1d6b883a 	add	r21,r3,r21
  806c68:	d8c00115 	stw	r3,4(sp)
  806c6c:	dd400315 	stw	r21,12(sp)
  806c70:	1805883a 	mov	r2,r3
  806c74:	1d40042e 	bgeu	r3,r21,806c88 <__multiply+0xa8>
  806c78:	d8c00317 	ldw	r3,12(sp)
  806c7c:	10000015 	stw	zero,0(r2)
  806c80:	10800104 	addi	r2,r2,4
  806c84:	10fffc36 	bltu	r2,r3,806c78 <__alt_data_end+0xff806c78>
  806c88:	8c63883a 	add	r17,r17,r17
  806c8c:	b5800504 	addi	r22,r22,20
  806c90:	8c63883a 	add	r17,r17,r17
  806c94:	94800504 	addi	r18,r18,20
  806c98:	8421883a 	add	r16,r16,r16
  806c9c:	b463883a 	add	r17,r22,r17
  806ca0:	8421883a 	add	r16,r16,r16
  806ca4:	dd800015 	stw	r22,0(sp)
  806ca8:	dc800415 	stw	r18,16(sp)
  806cac:	dc400515 	stw	r17,20(sp)
  806cb0:	9429883a 	add	r20,r18,r16
  806cb4:	b4404f2e 	bgeu	r22,r17,806df4 <__multiply+0x214>
  806cb8:	d8c00017 	ldw	r3,0(sp)
  806cbc:	1c800017 	ldw	r18,0(r3)
  806cc0:	947fffcc 	andi	r17,r18,65535
  806cc4:	88001e26 	beq	r17,zero,806d40 <__multiply+0x160>
  806cc8:	dd800117 	ldw	r22,4(sp)
  806ccc:	dd400417 	ldw	r21,16(sp)
  806cd0:	0027883a 	mov	r19,zero
  806cd4:	ac800017 	ldw	r18,0(r21)
  806cd8:	b4000017 	ldw	r16,0(r22)
  806cdc:	880b883a 	mov	r5,r17
  806ce0:	913fffcc 	andi	r4,r18,65535
  806ce4:	080ae240 	call	80ae24 <__mulsi3>
  806ce8:	9008d43a 	srli	r4,r18,16
  806cec:	84bfffcc 	andi	r18,r16,65535
  806cf0:	1485883a 	add	r2,r2,r18
  806cf4:	14e5883a 	add	r18,r2,r19
  806cf8:	8020d43a 	srli	r16,r16,16
  806cfc:	9026d43a 	srli	r19,r18,16
  806d00:	880b883a 	mov	r5,r17
  806d04:	080ae240 	call	80ae24 <__mulsi3>
  806d08:	1405883a 	add	r2,r2,r16
  806d0c:	14e1883a 	add	r16,r2,r19
  806d10:	90ffffcc 	andi	r3,r18,65535
  806d14:	8024943a 	slli	r18,r16,16
  806d18:	ad400104 	addi	r21,r21,4
  806d1c:	b005883a 	mov	r2,r22
  806d20:	90c6b03a 	or	r3,r18,r3
  806d24:	b0c00015 	stw	r3,0(r22)
  806d28:	8026d43a 	srli	r19,r16,16
  806d2c:	b5800104 	addi	r22,r22,4
  806d30:	ad3fe836 	bltu	r21,r20,806cd4 <__alt_data_end+0xff806cd4>
  806d34:	d8c00017 	ldw	r3,0(sp)
  806d38:	14c00115 	stw	r19,4(r2)
  806d3c:	1c800017 	ldw	r18,0(r3)
  806d40:	9024d43a 	srli	r18,r18,16
  806d44:	90002226 	beq	r18,zero,806dd0 <__multiply+0x1f0>
  806d48:	d8c00117 	ldw	r3,4(sp)
  806d4c:	dd800417 	ldw	r22,16(sp)
  806d50:	002f883a 	mov	r23,zero
  806d54:	1f000017 	ldw	fp,0(r3)
  806d58:	1823883a 	mov	r17,r3
  806d5c:	182b883a 	mov	r21,r3
  806d60:	e021883a 	mov	r16,fp
  806d64:	00000106 	br	806d6c <__multiply+0x18c>
  806d68:	982b883a 	mov	r21,r19
  806d6c:	b100000b 	ldhu	r4,0(r22)
  806d70:	8020d43a 	srli	r16,r16,16
  806d74:	900b883a 	mov	r5,r18
  806d78:	080ae240 	call	80ae24 <__mulsi3>
  806d7c:	1405883a 	add	r2,r2,r16
  806d80:	15ef883a 	add	r23,r2,r23
  806d84:	b804943a 	slli	r2,r23,16
  806d88:	e0ffffcc 	andi	r3,fp,65535
  806d8c:	8c400104 	addi	r17,r17,4
  806d90:	10c6b03a 	or	r3,r2,r3
  806d94:	88ffff15 	stw	r3,-4(r17)
  806d98:	b5800104 	addi	r22,r22,4
  806d9c:	b13fff17 	ldw	r4,-4(r22)
  806da0:	acc00104 	addi	r19,r21,4
  806da4:	900b883a 	mov	r5,r18
  806da8:	2008d43a 	srli	r4,r4,16
  806dac:	9c000017 	ldw	r16,0(r19)
  806db0:	080ae240 	call	80ae24 <__mulsi3>
  806db4:	b806d43a 	srli	r3,r23,16
  806db8:	813fffcc 	andi	r4,r16,65535
  806dbc:	1105883a 	add	r2,r2,r4
  806dc0:	10f9883a 	add	fp,r2,r3
  806dc4:	e02ed43a 	srli	r23,fp,16
  806dc8:	b53fe736 	bltu	r22,r20,806d68 <__alt_data_end+0xff806d68>
  806dcc:	af000115 	stw	fp,4(r21)
  806dd0:	d8c00017 	ldw	r3,0(sp)
  806dd4:	d9000517 	ldw	r4,20(sp)
  806dd8:	18c00104 	addi	r3,r3,4
  806ddc:	d8c00015 	stw	r3,0(sp)
  806de0:	d8c00117 	ldw	r3,4(sp)
  806de4:	18c00104 	addi	r3,r3,4
  806de8:	d8c00115 	stw	r3,4(sp)
  806dec:	d8c00017 	ldw	r3,0(sp)
  806df0:	193fb136 	bltu	r3,r4,806cb8 <__alt_data_end+0xff806cb8>
  806df4:	d8c00217 	ldw	r3,8(sp)
  806df8:	00c00c0e 	bge	zero,r3,806e2c <__multiply+0x24c>
  806dfc:	d8c00317 	ldw	r3,12(sp)
  806e00:	18bfff17 	ldw	r2,-4(r3)
  806e04:	1d7fff04 	addi	r21,r3,-4
  806e08:	10000326 	beq	r2,zero,806e18 <__multiply+0x238>
  806e0c:	00000706 	br	806e2c <__multiply+0x24c>
  806e10:	a8800017 	ldw	r2,0(r21)
  806e14:	1000051e 	bne	r2,zero,806e2c <__multiply+0x24c>
  806e18:	d8c00217 	ldw	r3,8(sp)
  806e1c:	ad7fff04 	addi	r21,r21,-4
  806e20:	18ffffc4 	addi	r3,r3,-1
  806e24:	d8c00215 	stw	r3,8(sp)
  806e28:	183ff91e 	bne	r3,zero,806e10 <__alt_data_end+0xff806e10>
  806e2c:	d8c00617 	ldw	r3,24(sp)
  806e30:	d9000217 	ldw	r4,8(sp)
  806e34:	1805883a 	mov	r2,r3
  806e38:	19000415 	stw	r4,16(r3)
  806e3c:	dfc01017 	ldw	ra,64(sp)
  806e40:	df000f17 	ldw	fp,60(sp)
  806e44:	ddc00e17 	ldw	r23,56(sp)
  806e48:	dd800d17 	ldw	r22,52(sp)
  806e4c:	dd400c17 	ldw	r21,48(sp)
  806e50:	dd000b17 	ldw	r20,44(sp)
  806e54:	dcc00a17 	ldw	r19,40(sp)
  806e58:	dc800917 	ldw	r18,36(sp)
  806e5c:	dc400817 	ldw	r17,32(sp)
  806e60:	dc000717 	ldw	r16,28(sp)
  806e64:	dec01104 	addi	sp,sp,68
  806e68:	f800283a 	ret

00806e6c <__pow5mult>:
  806e6c:	defffa04 	addi	sp,sp,-24
  806e70:	dcc00315 	stw	r19,12(sp)
  806e74:	dc000015 	stw	r16,0(sp)
  806e78:	dfc00515 	stw	ra,20(sp)
  806e7c:	dd000415 	stw	r20,16(sp)
  806e80:	dc800215 	stw	r18,8(sp)
  806e84:	dc400115 	stw	r17,4(sp)
  806e88:	308000cc 	andi	r2,r6,3
  806e8c:	3021883a 	mov	r16,r6
  806e90:	2027883a 	mov	r19,r4
  806e94:	10002f1e 	bne	r2,zero,806f54 <__pow5mult+0xe8>
  806e98:	2825883a 	mov	r18,r5
  806e9c:	8021d0ba 	srai	r16,r16,2
  806ea0:	80001a26 	beq	r16,zero,806f0c <__pow5mult+0xa0>
  806ea4:	9c401217 	ldw	r17,72(r19)
  806ea8:	8800061e 	bne	r17,zero,806ec4 <__pow5mult+0x58>
  806eac:	00003406 	br	806f80 <__pow5mult+0x114>
  806eb0:	8021d07a 	srai	r16,r16,1
  806eb4:	80001526 	beq	r16,zero,806f0c <__pow5mult+0xa0>
  806eb8:	88800017 	ldw	r2,0(r17)
  806ebc:	10001c26 	beq	r2,zero,806f30 <__pow5mult+0xc4>
  806ec0:	1023883a 	mov	r17,r2
  806ec4:	8080004c 	andi	r2,r16,1
  806ec8:	103ff926 	beq	r2,zero,806eb0 <__alt_data_end+0xff806eb0>
  806ecc:	880d883a 	mov	r6,r17
  806ed0:	900b883a 	mov	r5,r18
  806ed4:	9809883a 	mov	r4,r19
  806ed8:	0806be00 	call	806be0 <__multiply>
  806edc:	90001b26 	beq	r18,zero,806f4c <__pow5mult+0xe0>
  806ee0:	91000117 	ldw	r4,4(r18)
  806ee4:	98c01317 	ldw	r3,76(r19)
  806ee8:	8021d07a 	srai	r16,r16,1
  806eec:	2109883a 	add	r4,r4,r4
  806ef0:	2109883a 	add	r4,r4,r4
  806ef4:	1907883a 	add	r3,r3,r4
  806ef8:	19000017 	ldw	r4,0(r3)
  806efc:	91000015 	stw	r4,0(r18)
  806f00:	1c800015 	stw	r18,0(r3)
  806f04:	1025883a 	mov	r18,r2
  806f08:	803feb1e 	bne	r16,zero,806eb8 <__alt_data_end+0xff806eb8>
  806f0c:	9005883a 	mov	r2,r18
  806f10:	dfc00517 	ldw	ra,20(sp)
  806f14:	dd000417 	ldw	r20,16(sp)
  806f18:	dcc00317 	ldw	r19,12(sp)
  806f1c:	dc800217 	ldw	r18,8(sp)
  806f20:	dc400117 	ldw	r17,4(sp)
  806f24:	dc000017 	ldw	r16,0(sp)
  806f28:	dec00604 	addi	sp,sp,24
  806f2c:	f800283a 	ret
  806f30:	880d883a 	mov	r6,r17
  806f34:	880b883a 	mov	r5,r17
  806f38:	9809883a 	mov	r4,r19
  806f3c:	0806be00 	call	806be0 <__multiply>
  806f40:	88800015 	stw	r2,0(r17)
  806f44:	10000015 	stw	zero,0(r2)
  806f48:	003fdd06 	br	806ec0 <__alt_data_end+0xff806ec0>
  806f4c:	1025883a 	mov	r18,r2
  806f50:	003fd706 	br	806eb0 <__alt_data_end+0xff806eb0>
  806f54:	10bfffc4 	addi	r2,r2,-1
  806f58:	1085883a 	add	r2,r2,r2
  806f5c:	00c02074 	movhi	r3,129
  806f60:	18c37b04 	addi	r3,r3,3564
  806f64:	1085883a 	add	r2,r2,r2
  806f68:	1885883a 	add	r2,r3,r2
  806f6c:	11800017 	ldw	r6,0(r2)
  806f70:	000f883a 	mov	r7,zero
  806f74:	08068400 	call	806840 <__multadd>
  806f78:	1025883a 	mov	r18,r2
  806f7c:	003fc706 	br	806e9c <__alt_data_end+0xff806e9c>
  806f80:	05000044 	movi	r20,1
  806f84:	a00b883a 	mov	r5,r20
  806f88:	9809883a 	mov	r4,r19
  806f8c:	08067700 	call	806770 <_Balloc>
  806f90:	1023883a 	mov	r17,r2
  806f94:	00809c44 	movi	r2,625
  806f98:	88800515 	stw	r2,20(r17)
  806f9c:	8d000415 	stw	r20,16(r17)
  806fa0:	9c401215 	stw	r17,72(r19)
  806fa4:	88000015 	stw	zero,0(r17)
  806fa8:	003fc606 	br	806ec4 <__alt_data_end+0xff806ec4>

00806fac <__lshift>:
  806fac:	defff904 	addi	sp,sp,-28
  806fb0:	dd400515 	stw	r21,20(sp)
  806fb4:	dcc00315 	stw	r19,12(sp)
  806fb8:	302bd17a 	srai	r21,r6,5
  806fbc:	2cc00417 	ldw	r19,16(r5)
  806fc0:	28800217 	ldw	r2,8(r5)
  806fc4:	dd000415 	stw	r20,16(sp)
  806fc8:	ace7883a 	add	r19,r21,r19
  806fcc:	dc800215 	stw	r18,8(sp)
  806fd0:	dc400115 	stw	r17,4(sp)
  806fd4:	dc000015 	stw	r16,0(sp)
  806fd8:	dfc00615 	stw	ra,24(sp)
  806fdc:	9c000044 	addi	r16,r19,1
  806fe0:	2823883a 	mov	r17,r5
  806fe4:	3029883a 	mov	r20,r6
  806fe8:	2025883a 	mov	r18,r4
  806fec:	29400117 	ldw	r5,4(r5)
  806ff0:	1400030e 	bge	r2,r16,807000 <__lshift+0x54>
  806ff4:	1085883a 	add	r2,r2,r2
  806ff8:	29400044 	addi	r5,r5,1
  806ffc:	143ffd16 	blt	r2,r16,806ff4 <__alt_data_end+0xff806ff4>
  807000:	9009883a 	mov	r4,r18
  807004:	08067700 	call	806770 <_Balloc>
  807008:	10c00504 	addi	r3,r2,20
  80700c:	0540070e 	bge	zero,r21,80702c <__lshift+0x80>
  807010:	ad6b883a 	add	r21,r21,r21
  807014:	ad6b883a 	add	r21,r21,r21
  807018:	1809883a 	mov	r4,r3
  80701c:	1d47883a 	add	r3,r3,r21
  807020:	20000015 	stw	zero,0(r4)
  807024:	21000104 	addi	r4,r4,4
  807028:	193ffd1e 	bne	r3,r4,807020 <__alt_data_end+0xff807020>
  80702c:	8a000417 	ldw	r8,16(r17)
  807030:	89000504 	addi	r4,r17,20
  807034:	a18007cc 	andi	r6,r20,31
  807038:	4211883a 	add	r8,r8,r8
  80703c:	4211883a 	add	r8,r8,r8
  807040:	2211883a 	add	r8,r4,r8
  807044:	30002326 	beq	r6,zero,8070d4 <__lshift+0x128>
  807048:	02400804 	movi	r9,32
  80704c:	4993c83a 	sub	r9,r9,r6
  807050:	000b883a 	mov	r5,zero
  807054:	21c00017 	ldw	r7,0(r4)
  807058:	1815883a 	mov	r10,r3
  80705c:	18c00104 	addi	r3,r3,4
  807060:	398e983a 	sll	r7,r7,r6
  807064:	21000104 	addi	r4,r4,4
  807068:	394ab03a 	or	r5,r7,r5
  80706c:	197fff15 	stw	r5,-4(r3)
  807070:	217fff17 	ldw	r5,-4(r4)
  807074:	2a4ad83a 	srl	r5,r5,r9
  807078:	223ff636 	bltu	r4,r8,807054 <__alt_data_end+0xff807054>
  80707c:	51400115 	stw	r5,4(r10)
  807080:	28001a1e 	bne	r5,zero,8070ec <__lshift+0x140>
  807084:	843fffc4 	addi	r16,r16,-1
  807088:	14000415 	stw	r16,16(r2)
  80708c:	88000826 	beq	r17,zero,8070b0 <__lshift+0x104>
  807090:	89000117 	ldw	r4,4(r17)
  807094:	90c01317 	ldw	r3,76(r18)
  807098:	2109883a 	add	r4,r4,r4
  80709c:	2109883a 	add	r4,r4,r4
  8070a0:	1907883a 	add	r3,r3,r4
  8070a4:	19000017 	ldw	r4,0(r3)
  8070a8:	89000015 	stw	r4,0(r17)
  8070ac:	1c400015 	stw	r17,0(r3)
  8070b0:	dfc00617 	ldw	ra,24(sp)
  8070b4:	dd400517 	ldw	r21,20(sp)
  8070b8:	dd000417 	ldw	r20,16(sp)
  8070bc:	dcc00317 	ldw	r19,12(sp)
  8070c0:	dc800217 	ldw	r18,8(sp)
  8070c4:	dc400117 	ldw	r17,4(sp)
  8070c8:	dc000017 	ldw	r16,0(sp)
  8070cc:	dec00704 	addi	sp,sp,28
  8070d0:	f800283a 	ret
  8070d4:	21400017 	ldw	r5,0(r4)
  8070d8:	18c00104 	addi	r3,r3,4
  8070dc:	21000104 	addi	r4,r4,4
  8070e0:	197fff15 	stw	r5,-4(r3)
  8070e4:	223ffb36 	bltu	r4,r8,8070d4 <__alt_data_end+0xff8070d4>
  8070e8:	003fe606 	br	807084 <__alt_data_end+0xff807084>
  8070ec:	9c000084 	addi	r16,r19,2
  8070f0:	003fe406 	br	807084 <__alt_data_end+0xff807084>

008070f4 <__mcmp>:
  8070f4:	20800417 	ldw	r2,16(r4)
  8070f8:	28c00417 	ldw	r3,16(r5)
  8070fc:	10c5c83a 	sub	r2,r2,r3
  807100:	1000111e 	bne	r2,zero,807148 <__mcmp+0x54>
  807104:	18c7883a 	add	r3,r3,r3
  807108:	18c7883a 	add	r3,r3,r3
  80710c:	21000504 	addi	r4,r4,20
  807110:	29400504 	addi	r5,r5,20
  807114:	20c5883a 	add	r2,r4,r3
  807118:	28cb883a 	add	r5,r5,r3
  80711c:	00000106 	br	807124 <__mcmp+0x30>
  807120:	20800a2e 	bgeu	r4,r2,80714c <__mcmp+0x58>
  807124:	10bfff04 	addi	r2,r2,-4
  807128:	297fff04 	addi	r5,r5,-4
  80712c:	11800017 	ldw	r6,0(r2)
  807130:	28c00017 	ldw	r3,0(r5)
  807134:	30fffa26 	beq	r6,r3,807120 <__alt_data_end+0xff807120>
  807138:	30c00236 	bltu	r6,r3,807144 <__mcmp+0x50>
  80713c:	00800044 	movi	r2,1
  807140:	f800283a 	ret
  807144:	00bfffc4 	movi	r2,-1
  807148:	f800283a 	ret
  80714c:	0005883a 	mov	r2,zero
  807150:	f800283a 	ret

00807154 <__mdiff>:
  807154:	28c00417 	ldw	r3,16(r5)
  807158:	30800417 	ldw	r2,16(r6)
  80715c:	defffa04 	addi	sp,sp,-24
  807160:	dcc00315 	stw	r19,12(sp)
  807164:	dc800215 	stw	r18,8(sp)
  807168:	dfc00515 	stw	ra,20(sp)
  80716c:	dd000415 	stw	r20,16(sp)
  807170:	dc400115 	stw	r17,4(sp)
  807174:	dc000015 	stw	r16,0(sp)
  807178:	1887c83a 	sub	r3,r3,r2
  80717c:	2825883a 	mov	r18,r5
  807180:	3027883a 	mov	r19,r6
  807184:	1800141e 	bne	r3,zero,8071d8 <__mdiff+0x84>
  807188:	1085883a 	add	r2,r2,r2
  80718c:	1085883a 	add	r2,r2,r2
  807190:	2a000504 	addi	r8,r5,20
  807194:	34000504 	addi	r16,r6,20
  807198:	4087883a 	add	r3,r8,r2
  80719c:	8085883a 	add	r2,r16,r2
  8071a0:	00000106 	br	8071a8 <__mdiff+0x54>
  8071a4:	40c0592e 	bgeu	r8,r3,80730c <__mdiff+0x1b8>
  8071a8:	18ffff04 	addi	r3,r3,-4
  8071ac:	10bfff04 	addi	r2,r2,-4
  8071b0:	19c00017 	ldw	r7,0(r3)
  8071b4:	11400017 	ldw	r5,0(r2)
  8071b8:	397ffa26 	beq	r7,r5,8071a4 <__alt_data_end+0xff8071a4>
  8071bc:	3940592e 	bgeu	r7,r5,807324 <__mdiff+0x1d0>
  8071c0:	9005883a 	mov	r2,r18
  8071c4:	4023883a 	mov	r17,r8
  8071c8:	9825883a 	mov	r18,r19
  8071cc:	05000044 	movi	r20,1
  8071d0:	1027883a 	mov	r19,r2
  8071d4:	00000406 	br	8071e8 <__mdiff+0x94>
  8071d8:	18005616 	blt	r3,zero,807334 <__mdiff+0x1e0>
  8071dc:	34400504 	addi	r17,r6,20
  8071e0:	2c000504 	addi	r16,r5,20
  8071e4:	0029883a 	mov	r20,zero
  8071e8:	91400117 	ldw	r5,4(r18)
  8071ec:	08067700 	call	806770 <_Balloc>
  8071f0:	92400417 	ldw	r9,16(r18)
  8071f4:	9b000417 	ldw	r12,16(r19)
  8071f8:	12c00504 	addi	r11,r2,20
  8071fc:	4a51883a 	add	r8,r9,r9
  807200:	6319883a 	add	r12,r12,r12
  807204:	4211883a 	add	r8,r8,r8
  807208:	6319883a 	add	r12,r12,r12
  80720c:	15000315 	stw	r20,12(r2)
  807210:	8211883a 	add	r8,r16,r8
  807214:	8b19883a 	add	r12,r17,r12
  807218:	0007883a 	mov	r3,zero
  80721c:	81400017 	ldw	r5,0(r16)
  807220:	89c00017 	ldw	r7,0(r17)
  807224:	59800104 	addi	r6,r11,4
  807228:	293fffcc 	andi	r4,r5,65535
  80722c:	20c7883a 	add	r3,r4,r3
  807230:	393fffcc 	andi	r4,r7,65535
  807234:	1909c83a 	sub	r4,r3,r4
  807238:	280ad43a 	srli	r5,r5,16
  80723c:	380ed43a 	srli	r7,r7,16
  807240:	2007d43a 	srai	r3,r4,16
  807244:	213fffcc 	andi	r4,r4,65535
  807248:	29cbc83a 	sub	r5,r5,r7
  80724c:	28c7883a 	add	r3,r5,r3
  807250:	180a943a 	slli	r5,r3,16
  807254:	8c400104 	addi	r17,r17,4
  807258:	84000104 	addi	r16,r16,4
  80725c:	2908b03a 	or	r4,r5,r4
  807260:	59000015 	stw	r4,0(r11)
  807264:	1807d43a 	srai	r3,r3,16
  807268:	3015883a 	mov	r10,r6
  80726c:	3017883a 	mov	r11,r6
  807270:	8b3fea36 	bltu	r17,r12,80721c <__alt_data_end+0xff80721c>
  807274:	8200162e 	bgeu	r16,r8,8072d0 <__mdiff+0x17c>
  807278:	8017883a 	mov	r11,r16
  80727c:	59400017 	ldw	r5,0(r11)
  807280:	31800104 	addi	r6,r6,4
  807284:	5ac00104 	addi	r11,r11,4
  807288:	293fffcc 	andi	r4,r5,65535
  80728c:	20c7883a 	add	r3,r4,r3
  807290:	280ed43a 	srli	r7,r5,16
  807294:	180bd43a 	srai	r5,r3,16
  807298:	193fffcc 	andi	r4,r3,65535
  80729c:	3947883a 	add	r3,r7,r5
  8072a0:	180a943a 	slli	r5,r3,16
  8072a4:	1807d43a 	srai	r3,r3,16
  8072a8:	2908b03a 	or	r4,r5,r4
  8072ac:	313fff15 	stw	r4,-4(r6)
  8072b0:	5a3ff236 	bltu	r11,r8,80727c <__alt_data_end+0xff80727c>
  8072b4:	0406303a 	nor	r3,zero,r16
  8072b8:	1a07883a 	add	r3,r3,r8
  8072bc:	1806d0ba 	srli	r3,r3,2
  8072c0:	18c00044 	addi	r3,r3,1
  8072c4:	18c7883a 	add	r3,r3,r3
  8072c8:	18c7883a 	add	r3,r3,r3
  8072cc:	50d5883a 	add	r10,r10,r3
  8072d0:	50ffff04 	addi	r3,r10,-4
  8072d4:	2000041e 	bne	r4,zero,8072e8 <__mdiff+0x194>
  8072d8:	18ffff04 	addi	r3,r3,-4
  8072dc:	19000017 	ldw	r4,0(r3)
  8072e0:	4a7fffc4 	addi	r9,r9,-1
  8072e4:	203ffc26 	beq	r4,zero,8072d8 <__alt_data_end+0xff8072d8>
  8072e8:	12400415 	stw	r9,16(r2)
  8072ec:	dfc00517 	ldw	ra,20(sp)
  8072f0:	dd000417 	ldw	r20,16(sp)
  8072f4:	dcc00317 	ldw	r19,12(sp)
  8072f8:	dc800217 	ldw	r18,8(sp)
  8072fc:	dc400117 	ldw	r17,4(sp)
  807300:	dc000017 	ldw	r16,0(sp)
  807304:	dec00604 	addi	sp,sp,24
  807308:	f800283a 	ret
  80730c:	000b883a 	mov	r5,zero
  807310:	08067700 	call	806770 <_Balloc>
  807314:	00c00044 	movi	r3,1
  807318:	10c00415 	stw	r3,16(r2)
  80731c:	10000515 	stw	zero,20(r2)
  807320:	003ff206 	br	8072ec <__alt_data_end+0xff8072ec>
  807324:	8023883a 	mov	r17,r16
  807328:	0029883a 	mov	r20,zero
  80732c:	4021883a 	mov	r16,r8
  807330:	003fad06 	br	8071e8 <__alt_data_end+0xff8071e8>
  807334:	9005883a 	mov	r2,r18
  807338:	94400504 	addi	r17,r18,20
  80733c:	9c000504 	addi	r16,r19,20
  807340:	9825883a 	mov	r18,r19
  807344:	05000044 	movi	r20,1
  807348:	1027883a 	mov	r19,r2
  80734c:	003fa606 	br	8071e8 <__alt_data_end+0xff8071e8>

00807350 <__ulp>:
  807350:	295ffc2c 	andhi	r5,r5,32752
  807354:	00bf3034 	movhi	r2,64704
  807358:	2887883a 	add	r3,r5,r2
  80735c:	00c0020e 	bge	zero,r3,807368 <__ulp+0x18>
  807360:	0005883a 	mov	r2,zero
  807364:	f800283a 	ret
  807368:	00c7c83a 	sub	r3,zero,r3
  80736c:	1807d53a 	srai	r3,r3,20
  807370:	008004c4 	movi	r2,19
  807374:	10c00b0e 	bge	r2,r3,8073a4 <__ulp+0x54>
  807378:	18bffb04 	addi	r2,r3,-20
  80737c:	01000784 	movi	r4,30
  807380:	0007883a 	mov	r3,zero
  807384:	20800516 	blt	r4,r2,80739c <__ulp+0x4c>
  807388:	010007c4 	movi	r4,31
  80738c:	2089c83a 	sub	r4,r4,r2
  807390:	00800044 	movi	r2,1
  807394:	1104983a 	sll	r2,r2,r4
  807398:	f800283a 	ret
  80739c:	00800044 	movi	r2,1
  8073a0:	f800283a 	ret
  8073a4:	01400234 	movhi	r5,8
  8073a8:	28c7d83a 	sra	r3,r5,r3
  8073ac:	0005883a 	mov	r2,zero
  8073b0:	f800283a 	ret

008073b4 <__b2d>:
  8073b4:	defffa04 	addi	sp,sp,-24
  8073b8:	dc000015 	stw	r16,0(sp)
  8073bc:	24000417 	ldw	r16,16(r4)
  8073c0:	dc400115 	stw	r17,4(sp)
  8073c4:	24400504 	addi	r17,r4,20
  8073c8:	8421883a 	add	r16,r16,r16
  8073cc:	8421883a 	add	r16,r16,r16
  8073d0:	8c21883a 	add	r16,r17,r16
  8073d4:	dc800215 	stw	r18,8(sp)
  8073d8:	84bfff17 	ldw	r18,-4(r16)
  8073dc:	dd000415 	stw	r20,16(sp)
  8073e0:	dcc00315 	stw	r19,12(sp)
  8073e4:	9009883a 	mov	r4,r18
  8073e8:	2829883a 	mov	r20,r5
  8073ec:	dfc00515 	stw	ra,20(sp)
  8073f0:	0806a8c0 	call	806a8c <__hi0bits>
  8073f4:	00c00804 	movi	r3,32
  8073f8:	1889c83a 	sub	r4,r3,r2
  8073fc:	a1000015 	stw	r4,0(r20)
  807400:	01000284 	movi	r4,10
  807404:	84ffff04 	addi	r19,r16,-4
  807408:	20801216 	blt	r4,r2,807454 <__b2d+0xa0>
  80740c:	018002c4 	movi	r6,11
  807410:	308dc83a 	sub	r6,r6,r2
  807414:	9186d83a 	srl	r3,r18,r6
  807418:	18cffc34 	orhi	r3,r3,16368
  80741c:	8cc0212e 	bgeu	r17,r19,8074a4 <__b2d+0xf0>
  807420:	813ffe17 	ldw	r4,-8(r16)
  807424:	218cd83a 	srl	r6,r4,r6
  807428:	10800544 	addi	r2,r2,21
  80742c:	9084983a 	sll	r2,r18,r2
  807430:	1184b03a 	or	r2,r2,r6
  807434:	dfc00517 	ldw	ra,20(sp)
  807438:	dd000417 	ldw	r20,16(sp)
  80743c:	dcc00317 	ldw	r19,12(sp)
  807440:	dc800217 	ldw	r18,8(sp)
  807444:	dc400117 	ldw	r17,4(sp)
  807448:	dc000017 	ldw	r16,0(sp)
  80744c:	dec00604 	addi	sp,sp,24
  807450:	f800283a 	ret
  807454:	8cc00f2e 	bgeu	r17,r19,807494 <__b2d+0xe0>
  807458:	117ffd44 	addi	r5,r2,-11
  80745c:	80bffe17 	ldw	r2,-8(r16)
  807460:	28000e26 	beq	r5,zero,80749c <__b2d+0xe8>
  807464:	1949c83a 	sub	r4,r3,r5
  807468:	9164983a 	sll	r18,r18,r5
  80746c:	1106d83a 	srl	r3,r2,r4
  807470:	81bffe04 	addi	r6,r16,-8
  807474:	948ffc34 	orhi	r18,r18,16368
  807478:	90c6b03a 	or	r3,r18,r3
  80747c:	89800e2e 	bgeu	r17,r6,8074b8 <__b2d+0x104>
  807480:	81bffd17 	ldw	r6,-12(r16)
  807484:	1144983a 	sll	r2,r2,r5
  807488:	310ad83a 	srl	r5,r6,r4
  80748c:	2884b03a 	or	r2,r5,r2
  807490:	003fe806 	br	807434 <__alt_data_end+0xff807434>
  807494:	10bffd44 	addi	r2,r2,-11
  807498:	1000041e 	bne	r2,zero,8074ac <__b2d+0xf8>
  80749c:	90cffc34 	orhi	r3,r18,16368
  8074a0:	003fe406 	br	807434 <__alt_data_end+0xff807434>
  8074a4:	000d883a 	mov	r6,zero
  8074a8:	003fdf06 	br	807428 <__alt_data_end+0xff807428>
  8074ac:	90a4983a 	sll	r18,r18,r2
  8074b0:	0005883a 	mov	r2,zero
  8074b4:	003ff906 	br	80749c <__alt_data_end+0xff80749c>
  8074b8:	1144983a 	sll	r2,r2,r5
  8074bc:	003fdd06 	br	807434 <__alt_data_end+0xff807434>

008074c0 <__d2b>:
  8074c0:	defff804 	addi	sp,sp,-32
  8074c4:	dc000215 	stw	r16,8(sp)
  8074c8:	3021883a 	mov	r16,r6
  8074cc:	dc400315 	stw	r17,12(sp)
  8074d0:	8022907a 	slli	r17,r16,1
  8074d4:	dd000615 	stw	r20,24(sp)
  8074d8:	2829883a 	mov	r20,r5
  8074dc:	01400044 	movi	r5,1
  8074e0:	dcc00515 	stw	r19,20(sp)
  8074e4:	dc800415 	stw	r18,16(sp)
  8074e8:	dfc00715 	stw	ra,28(sp)
  8074ec:	3825883a 	mov	r18,r7
  8074f0:	8822d57a 	srli	r17,r17,21
  8074f4:	08067700 	call	806770 <_Balloc>
  8074f8:	1027883a 	mov	r19,r2
  8074fc:	00800434 	movhi	r2,16
  807500:	10bfffc4 	addi	r2,r2,-1
  807504:	808c703a 	and	r6,r16,r2
  807508:	88000126 	beq	r17,zero,807510 <__d2b+0x50>
  80750c:	31800434 	orhi	r6,r6,16
  807510:	d9800015 	stw	r6,0(sp)
  807514:	a0002426 	beq	r20,zero,8075a8 <__d2b+0xe8>
  807518:	d9000104 	addi	r4,sp,4
  80751c:	dd000115 	stw	r20,4(sp)
  807520:	0806af40 	call	806af4 <__lo0bits>
  807524:	d8c00017 	ldw	r3,0(sp)
  807528:	10002f1e 	bne	r2,zero,8075e8 <__d2b+0x128>
  80752c:	d9000117 	ldw	r4,4(sp)
  807530:	99000515 	stw	r4,20(r19)
  807534:	1821003a 	cmpeq	r16,r3,zero
  807538:	01000084 	movi	r4,2
  80753c:	2421c83a 	sub	r16,r4,r16
  807540:	98c00615 	stw	r3,24(r19)
  807544:	9c000415 	stw	r16,16(r19)
  807548:	88001f1e 	bne	r17,zero,8075c8 <__d2b+0x108>
  80754c:	10bef384 	addi	r2,r2,-1074
  807550:	90800015 	stw	r2,0(r18)
  807554:	00900034 	movhi	r2,16384
  807558:	10bfffc4 	addi	r2,r2,-1
  80755c:	8085883a 	add	r2,r16,r2
  807560:	1085883a 	add	r2,r2,r2
  807564:	1085883a 	add	r2,r2,r2
  807568:	9885883a 	add	r2,r19,r2
  80756c:	11000517 	ldw	r4,20(r2)
  807570:	8020917a 	slli	r16,r16,5
  807574:	0806a8c0 	call	806a8c <__hi0bits>
  807578:	d8c00817 	ldw	r3,32(sp)
  80757c:	8085c83a 	sub	r2,r16,r2
  807580:	18800015 	stw	r2,0(r3)
  807584:	9805883a 	mov	r2,r19
  807588:	dfc00717 	ldw	ra,28(sp)
  80758c:	dd000617 	ldw	r20,24(sp)
  807590:	dcc00517 	ldw	r19,20(sp)
  807594:	dc800417 	ldw	r18,16(sp)
  807598:	dc400317 	ldw	r17,12(sp)
  80759c:	dc000217 	ldw	r16,8(sp)
  8075a0:	dec00804 	addi	sp,sp,32
  8075a4:	f800283a 	ret
  8075a8:	d809883a 	mov	r4,sp
  8075ac:	0806af40 	call	806af4 <__lo0bits>
  8075b0:	d8c00017 	ldw	r3,0(sp)
  8075b4:	04000044 	movi	r16,1
  8075b8:	9c000415 	stw	r16,16(r19)
  8075bc:	98c00515 	stw	r3,20(r19)
  8075c0:	10800804 	addi	r2,r2,32
  8075c4:	883fe126 	beq	r17,zero,80754c <__alt_data_end+0xff80754c>
  8075c8:	00c00d44 	movi	r3,53
  8075cc:	8c7ef344 	addi	r17,r17,-1075
  8075d0:	88a3883a 	add	r17,r17,r2
  8075d4:	1885c83a 	sub	r2,r3,r2
  8075d8:	d8c00817 	ldw	r3,32(sp)
  8075dc:	94400015 	stw	r17,0(r18)
  8075e0:	18800015 	stw	r2,0(r3)
  8075e4:	003fe706 	br	807584 <__alt_data_end+0xff807584>
  8075e8:	01000804 	movi	r4,32
  8075ec:	2089c83a 	sub	r4,r4,r2
  8075f0:	1908983a 	sll	r4,r3,r4
  8075f4:	d9400117 	ldw	r5,4(sp)
  8075f8:	1886d83a 	srl	r3,r3,r2
  8075fc:	2148b03a 	or	r4,r4,r5
  807600:	99000515 	stw	r4,20(r19)
  807604:	d8c00015 	stw	r3,0(sp)
  807608:	003fca06 	br	807534 <__alt_data_end+0xff807534>

0080760c <__ratio>:
  80760c:	defff904 	addi	sp,sp,-28
  807610:	dc400315 	stw	r17,12(sp)
  807614:	2823883a 	mov	r17,r5
  807618:	d9400104 	addi	r5,sp,4
  80761c:	dfc00615 	stw	ra,24(sp)
  807620:	dcc00515 	stw	r19,20(sp)
  807624:	dc800415 	stw	r18,16(sp)
  807628:	2027883a 	mov	r19,r4
  80762c:	dc000215 	stw	r16,8(sp)
  807630:	08073b40 	call	8073b4 <__b2d>
  807634:	d80b883a 	mov	r5,sp
  807638:	8809883a 	mov	r4,r17
  80763c:	1025883a 	mov	r18,r2
  807640:	1821883a 	mov	r16,r3
  807644:	08073b40 	call	8073b4 <__b2d>
  807648:	8a000417 	ldw	r8,16(r17)
  80764c:	99000417 	ldw	r4,16(r19)
  807650:	d9400117 	ldw	r5,4(sp)
  807654:	2209c83a 	sub	r4,r4,r8
  807658:	2010917a 	slli	r8,r4,5
  80765c:	d9000017 	ldw	r4,0(sp)
  807660:	2909c83a 	sub	r4,r5,r4
  807664:	4109883a 	add	r4,r8,r4
  807668:	01000e0e 	bge	zero,r4,8076a4 <__ratio+0x98>
  80766c:	2008953a 	slli	r4,r4,20
  807670:	2421883a 	add	r16,r4,r16
  807674:	100d883a 	mov	r6,r2
  807678:	180f883a 	mov	r7,r3
  80767c:	9009883a 	mov	r4,r18
  807680:	800b883a 	mov	r5,r16
  807684:	080b6f80 	call	80b6f8 <__divdf3>
  807688:	dfc00617 	ldw	ra,24(sp)
  80768c:	dcc00517 	ldw	r19,20(sp)
  807690:	dc800417 	ldw	r18,16(sp)
  807694:	dc400317 	ldw	r17,12(sp)
  807698:	dc000217 	ldw	r16,8(sp)
  80769c:	dec00704 	addi	sp,sp,28
  8076a0:	f800283a 	ret
  8076a4:	2008953a 	slli	r4,r4,20
  8076a8:	1907c83a 	sub	r3,r3,r4
  8076ac:	003ff106 	br	807674 <__alt_data_end+0xff807674>

008076b0 <_mprec_log10>:
  8076b0:	defffe04 	addi	sp,sp,-8
  8076b4:	dc000015 	stw	r16,0(sp)
  8076b8:	dfc00115 	stw	ra,4(sp)
  8076bc:	008005c4 	movi	r2,23
  8076c0:	2021883a 	mov	r16,r4
  8076c4:	11000d0e 	bge	r2,r4,8076fc <_mprec_log10+0x4c>
  8076c8:	0005883a 	mov	r2,zero
  8076cc:	00cffc34 	movhi	r3,16368
  8076d0:	843fffc4 	addi	r16,r16,-1
  8076d4:	000d883a 	mov	r6,zero
  8076d8:	01d00934 	movhi	r7,16420
  8076dc:	1009883a 	mov	r4,r2
  8076e0:	180b883a 	mov	r5,r3
  8076e4:	080c3200 	call	80c320 <__muldf3>
  8076e8:	803ff91e 	bne	r16,zero,8076d0 <__alt_data_end+0xff8076d0>
  8076ec:	dfc00117 	ldw	ra,4(sp)
  8076f0:	dc000017 	ldw	r16,0(sp)
  8076f4:	dec00204 	addi	sp,sp,8
  8076f8:	f800283a 	ret
  8076fc:	202090fa 	slli	r16,r4,3
  807700:	00802074 	movhi	r2,129
  807704:	10839204 	addi	r2,r2,3656
  807708:	1421883a 	add	r16,r2,r16
  80770c:	80800017 	ldw	r2,0(r16)
  807710:	80c00117 	ldw	r3,4(r16)
  807714:	dfc00117 	ldw	ra,4(sp)
  807718:	dc000017 	ldw	r16,0(sp)
  80771c:	dec00204 	addi	sp,sp,8
  807720:	f800283a 	ret

00807724 <__copybits>:
  807724:	297fffc4 	addi	r5,r5,-1
  807728:	280fd17a 	srai	r7,r5,5
  80772c:	30c00417 	ldw	r3,16(r6)
  807730:	30800504 	addi	r2,r6,20
  807734:	39c00044 	addi	r7,r7,1
  807738:	18c7883a 	add	r3,r3,r3
  80773c:	39cf883a 	add	r7,r7,r7
  807740:	18c7883a 	add	r3,r3,r3
  807744:	39cf883a 	add	r7,r7,r7
  807748:	10c7883a 	add	r3,r2,r3
  80774c:	21cf883a 	add	r7,r4,r7
  807750:	10c00d2e 	bgeu	r2,r3,807788 <__copybits+0x64>
  807754:	200b883a 	mov	r5,r4
  807758:	12000017 	ldw	r8,0(r2)
  80775c:	29400104 	addi	r5,r5,4
  807760:	10800104 	addi	r2,r2,4
  807764:	2a3fff15 	stw	r8,-4(r5)
  807768:	10fffb36 	bltu	r2,r3,807758 <__alt_data_end+0xff807758>
  80776c:	1985c83a 	sub	r2,r3,r6
  807770:	10bffac4 	addi	r2,r2,-21
  807774:	1004d0ba 	srli	r2,r2,2
  807778:	10800044 	addi	r2,r2,1
  80777c:	1085883a 	add	r2,r2,r2
  807780:	1085883a 	add	r2,r2,r2
  807784:	2089883a 	add	r4,r4,r2
  807788:	21c0032e 	bgeu	r4,r7,807798 <__copybits+0x74>
  80778c:	20000015 	stw	zero,0(r4)
  807790:	21000104 	addi	r4,r4,4
  807794:	21fffd36 	bltu	r4,r7,80778c <__alt_data_end+0xff80778c>
  807798:	f800283a 	ret

0080779c <__any_on>:
  80779c:	20c00417 	ldw	r3,16(r4)
  8077a0:	2805d17a 	srai	r2,r5,5
  8077a4:	21000504 	addi	r4,r4,20
  8077a8:	18800d0e 	bge	r3,r2,8077e0 <__any_on+0x44>
  8077ac:	18c7883a 	add	r3,r3,r3
  8077b0:	18c7883a 	add	r3,r3,r3
  8077b4:	20c7883a 	add	r3,r4,r3
  8077b8:	20c0192e 	bgeu	r4,r3,807820 <__any_on+0x84>
  8077bc:	18bfff17 	ldw	r2,-4(r3)
  8077c0:	18ffff04 	addi	r3,r3,-4
  8077c4:	1000041e 	bne	r2,zero,8077d8 <__any_on+0x3c>
  8077c8:	20c0142e 	bgeu	r4,r3,80781c <__any_on+0x80>
  8077cc:	18ffff04 	addi	r3,r3,-4
  8077d0:	19400017 	ldw	r5,0(r3)
  8077d4:	283ffc26 	beq	r5,zero,8077c8 <__alt_data_end+0xff8077c8>
  8077d8:	00800044 	movi	r2,1
  8077dc:	f800283a 	ret
  8077e0:	10c00a0e 	bge	r2,r3,80780c <__any_on+0x70>
  8077e4:	1085883a 	add	r2,r2,r2
  8077e8:	1085883a 	add	r2,r2,r2
  8077ec:	294007cc 	andi	r5,r5,31
  8077f0:	2087883a 	add	r3,r4,r2
  8077f4:	283ff026 	beq	r5,zero,8077b8 <__alt_data_end+0xff8077b8>
  8077f8:	19800017 	ldw	r6,0(r3)
  8077fc:	3144d83a 	srl	r2,r6,r5
  807800:	114a983a 	sll	r5,r2,r5
  807804:	317ff41e 	bne	r6,r5,8077d8 <__alt_data_end+0xff8077d8>
  807808:	003feb06 	br	8077b8 <__alt_data_end+0xff8077b8>
  80780c:	1085883a 	add	r2,r2,r2
  807810:	1085883a 	add	r2,r2,r2
  807814:	2087883a 	add	r3,r4,r2
  807818:	003fe706 	br	8077b8 <__alt_data_end+0xff8077b8>
  80781c:	f800283a 	ret
  807820:	0005883a 	mov	r2,zero
  807824:	f800283a 	ret

00807828 <_realloc_r>:
  807828:	defff604 	addi	sp,sp,-40
  80782c:	dc800215 	stw	r18,8(sp)
  807830:	dfc00915 	stw	ra,36(sp)
  807834:	df000815 	stw	fp,32(sp)
  807838:	ddc00715 	stw	r23,28(sp)
  80783c:	dd800615 	stw	r22,24(sp)
  807840:	dd400515 	stw	r21,20(sp)
  807844:	dd000415 	stw	r20,16(sp)
  807848:	dcc00315 	stw	r19,12(sp)
  80784c:	dc400115 	stw	r17,4(sp)
  807850:	dc000015 	stw	r16,0(sp)
  807854:	3025883a 	mov	r18,r6
  807858:	2800b726 	beq	r5,zero,807b38 <_realloc_r+0x310>
  80785c:	282b883a 	mov	r21,r5
  807860:	2029883a 	mov	r20,r4
  807864:	080dc280 	call	80dc28 <__malloc_lock>
  807868:	a8bfff17 	ldw	r2,-4(r21)
  80786c:	043fff04 	movi	r16,-4
  807870:	90c002c4 	addi	r3,r18,11
  807874:	01000584 	movi	r4,22
  807878:	acfffe04 	addi	r19,r21,-8
  80787c:	1420703a 	and	r16,r2,r16
  807880:	20c0332e 	bgeu	r4,r3,807950 <_realloc_r+0x128>
  807884:	047ffe04 	movi	r17,-8
  807888:	1c62703a 	and	r17,r3,r17
  80788c:	8807883a 	mov	r3,r17
  807890:	88005816 	blt	r17,zero,8079f4 <_realloc_r+0x1cc>
  807894:	8c805736 	bltu	r17,r18,8079f4 <_realloc_r+0x1cc>
  807898:	80c0300e 	bge	r16,r3,80795c <_realloc_r+0x134>
  80789c:	07002074 	movhi	fp,129
  8078a0:	e7050104 	addi	fp,fp,5124
  8078a4:	e1c00217 	ldw	r7,8(fp)
  8078a8:	9c09883a 	add	r4,r19,r16
  8078ac:	22000117 	ldw	r8,4(r4)
  8078b0:	21c06326 	beq	r4,r7,807a40 <_realloc_r+0x218>
  8078b4:	017fff84 	movi	r5,-2
  8078b8:	414a703a 	and	r5,r8,r5
  8078bc:	214b883a 	add	r5,r4,r5
  8078c0:	29800117 	ldw	r6,4(r5)
  8078c4:	3180004c 	andi	r6,r6,1
  8078c8:	30003f26 	beq	r6,zero,8079c8 <_realloc_r+0x1a0>
  8078cc:	1080004c 	andi	r2,r2,1
  8078d0:	10008326 	beq	r2,zero,807ae0 <_realloc_r+0x2b8>
  8078d4:	900b883a 	mov	r5,r18
  8078d8:	a009883a 	mov	r4,r20
  8078dc:	0805ab40 	call	805ab4 <_malloc_r>
  8078e0:	1025883a 	mov	r18,r2
  8078e4:	10011e26 	beq	r2,zero,807d60 <_realloc_r+0x538>
  8078e8:	a93fff17 	ldw	r4,-4(r21)
  8078ec:	10fffe04 	addi	r3,r2,-8
  8078f0:	00bfff84 	movi	r2,-2
  8078f4:	2084703a 	and	r2,r4,r2
  8078f8:	9885883a 	add	r2,r19,r2
  8078fc:	1880ee26 	beq	r3,r2,807cb8 <_realloc_r+0x490>
  807900:	81bfff04 	addi	r6,r16,-4
  807904:	00800904 	movi	r2,36
  807908:	1180b836 	bltu	r2,r6,807bec <_realloc_r+0x3c4>
  80790c:	00c004c4 	movi	r3,19
  807910:	19809636 	bltu	r3,r6,807b6c <_realloc_r+0x344>
  807914:	9005883a 	mov	r2,r18
  807918:	a807883a 	mov	r3,r21
  80791c:	19000017 	ldw	r4,0(r3)
  807920:	11000015 	stw	r4,0(r2)
  807924:	19000117 	ldw	r4,4(r3)
  807928:	11000115 	stw	r4,4(r2)
  80792c:	18c00217 	ldw	r3,8(r3)
  807930:	10c00215 	stw	r3,8(r2)
  807934:	a80b883a 	mov	r5,r21
  807938:	a009883a 	mov	r4,r20
  80793c:	0804ebc0 	call	804ebc <_free_r>
  807940:	a009883a 	mov	r4,r20
  807944:	080dc4c0 	call	80dc4c <__malloc_unlock>
  807948:	9005883a 	mov	r2,r18
  80794c:	00001206 	br	807998 <_realloc_r+0x170>
  807950:	00c00404 	movi	r3,16
  807954:	1823883a 	mov	r17,r3
  807958:	003fce06 	br	807894 <__alt_data_end+0xff807894>
  80795c:	a825883a 	mov	r18,r21
  807960:	8445c83a 	sub	r2,r16,r17
  807964:	00c003c4 	movi	r3,15
  807968:	18802636 	bltu	r3,r2,807a04 <_realloc_r+0x1dc>
  80796c:	99800117 	ldw	r6,4(r19)
  807970:	9c07883a 	add	r3,r19,r16
  807974:	3180004c 	andi	r6,r6,1
  807978:	3420b03a 	or	r16,r6,r16
  80797c:	9c000115 	stw	r16,4(r19)
  807980:	18800117 	ldw	r2,4(r3)
  807984:	10800054 	ori	r2,r2,1
  807988:	18800115 	stw	r2,4(r3)
  80798c:	a009883a 	mov	r4,r20
  807990:	080dc4c0 	call	80dc4c <__malloc_unlock>
  807994:	9005883a 	mov	r2,r18
  807998:	dfc00917 	ldw	ra,36(sp)
  80799c:	df000817 	ldw	fp,32(sp)
  8079a0:	ddc00717 	ldw	r23,28(sp)
  8079a4:	dd800617 	ldw	r22,24(sp)
  8079a8:	dd400517 	ldw	r21,20(sp)
  8079ac:	dd000417 	ldw	r20,16(sp)
  8079b0:	dcc00317 	ldw	r19,12(sp)
  8079b4:	dc800217 	ldw	r18,8(sp)
  8079b8:	dc400117 	ldw	r17,4(sp)
  8079bc:	dc000017 	ldw	r16,0(sp)
  8079c0:	dec00a04 	addi	sp,sp,40
  8079c4:	f800283a 	ret
  8079c8:	017fff04 	movi	r5,-4
  8079cc:	414a703a 	and	r5,r8,r5
  8079d0:	814d883a 	add	r6,r16,r5
  8079d4:	30c01f16 	blt	r6,r3,807a54 <_realloc_r+0x22c>
  8079d8:	20800317 	ldw	r2,12(r4)
  8079dc:	20c00217 	ldw	r3,8(r4)
  8079e0:	a825883a 	mov	r18,r21
  8079e4:	3021883a 	mov	r16,r6
  8079e8:	18800315 	stw	r2,12(r3)
  8079ec:	10c00215 	stw	r3,8(r2)
  8079f0:	003fdb06 	br	807960 <__alt_data_end+0xff807960>
  8079f4:	00800304 	movi	r2,12
  8079f8:	a0800015 	stw	r2,0(r20)
  8079fc:	0005883a 	mov	r2,zero
  807a00:	003fe506 	br	807998 <__alt_data_end+0xff807998>
  807a04:	98c00117 	ldw	r3,4(r19)
  807a08:	9c4b883a 	add	r5,r19,r17
  807a0c:	11000054 	ori	r4,r2,1
  807a10:	18c0004c 	andi	r3,r3,1
  807a14:	1c62b03a 	or	r17,r3,r17
  807a18:	9c400115 	stw	r17,4(r19)
  807a1c:	29000115 	stw	r4,4(r5)
  807a20:	2885883a 	add	r2,r5,r2
  807a24:	10c00117 	ldw	r3,4(r2)
  807a28:	29400204 	addi	r5,r5,8
  807a2c:	a009883a 	mov	r4,r20
  807a30:	18c00054 	ori	r3,r3,1
  807a34:	10c00115 	stw	r3,4(r2)
  807a38:	0804ebc0 	call	804ebc <_free_r>
  807a3c:	003fd306 	br	80798c <__alt_data_end+0xff80798c>
  807a40:	017fff04 	movi	r5,-4
  807a44:	414a703a 	and	r5,r8,r5
  807a48:	89800404 	addi	r6,r17,16
  807a4c:	8151883a 	add	r8,r16,r5
  807a50:	4180590e 	bge	r8,r6,807bb8 <_realloc_r+0x390>
  807a54:	1080004c 	andi	r2,r2,1
  807a58:	103f9e1e 	bne	r2,zero,8078d4 <__alt_data_end+0xff8078d4>
  807a5c:	adbffe17 	ldw	r22,-8(r21)
  807a60:	00bfff04 	movi	r2,-4
  807a64:	9dadc83a 	sub	r22,r19,r22
  807a68:	b1800117 	ldw	r6,4(r22)
  807a6c:	3084703a 	and	r2,r6,r2
  807a70:	20002026 	beq	r4,zero,807af4 <_realloc_r+0x2cc>
  807a74:	80af883a 	add	r23,r16,r2
  807a78:	b96f883a 	add	r23,r23,r5
  807a7c:	21c05f26 	beq	r4,r7,807bfc <_realloc_r+0x3d4>
  807a80:	b8c01c16 	blt	r23,r3,807af4 <_realloc_r+0x2cc>
  807a84:	20800317 	ldw	r2,12(r4)
  807a88:	20c00217 	ldw	r3,8(r4)
  807a8c:	81bfff04 	addi	r6,r16,-4
  807a90:	01000904 	movi	r4,36
  807a94:	18800315 	stw	r2,12(r3)
  807a98:	10c00215 	stw	r3,8(r2)
  807a9c:	b0c00217 	ldw	r3,8(r22)
  807aa0:	b0800317 	ldw	r2,12(r22)
  807aa4:	b4800204 	addi	r18,r22,8
  807aa8:	18800315 	stw	r2,12(r3)
  807aac:	10c00215 	stw	r3,8(r2)
  807ab0:	21801b36 	bltu	r4,r6,807b20 <_realloc_r+0x2f8>
  807ab4:	008004c4 	movi	r2,19
  807ab8:	1180352e 	bgeu	r2,r6,807b90 <_realloc_r+0x368>
  807abc:	a8800017 	ldw	r2,0(r21)
  807ac0:	b0800215 	stw	r2,8(r22)
  807ac4:	a8800117 	ldw	r2,4(r21)
  807ac8:	b0800315 	stw	r2,12(r22)
  807acc:	008006c4 	movi	r2,27
  807ad0:	11807f36 	bltu	r2,r6,807cd0 <_realloc_r+0x4a8>
  807ad4:	b0800404 	addi	r2,r22,16
  807ad8:	ad400204 	addi	r21,r21,8
  807adc:	00002d06 	br	807b94 <_realloc_r+0x36c>
  807ae0:	adbffe17 	ldw	r22,-8(r21)
  807ae4:	00bfff04 	movi	r2,-4
  807ae8:	9dadc83a 	sub	r22,r19,r22
  807aec:	b1000117 	ldw	r4,4(r22)
  807af0:	2084703a 	and	r2,r4,r2
  807af4:	b03f7726 	beq	r22,zero,8078d4 <__alt_data_end+0xff8078d4>
  807af8:	80af883a 	add	r23,r16,r2
  807afc:	b8ff7516 	blt	r23,r3,8078d4 <__alt_data_end+0xff8078d4>
  807b00:	b0800317 	ldw	r2,12(r22)
  807b04:	b0c00217 	ldw	r3,8(r22)
  807b08:	81bfff04 	addi	r6,r16,-4
  807b0c:	01000904 	movi	r4,36
  807b10:	18800315 	stw	r2,12(r3)
  807b14:	10c00215 	stw	r3,8(r2)
  807b18:	b4800204 	addi	r18,r22,8
  807b1c:	21bfe52e 	bgeu	r4,r6,807ab4 <__alt_data_end+0xff807ab4>
  807b20:	a80b883a 	mov	r5,r21
  807b24:	9009883a 	mov	r4,r18
  807b28:	08064ec0 	call	8064ec <memmove>
  807b2c:	b821883a 	mov	r16,r23
  807b30:	b027883a 	mov	r19,r22
  807b34:	003f8a06 	br	807960 <__alt_data_end+0xff807960>
  807b38:	300b883a 	mov	r5,r6
  807b3c:	dfc00917 	ldw	ra,36(sp)
  807b40:	df000817 	ldw	fp,32(sp)
  807b44:	ddc00717 	ldw	r23,28(sp)
  807b48:	dd800617 	ldw	r22,24(sp)
  807b4c:	dd400517 	ldw	r21,20(sp)
  807b50:	dd000417 	ldw	r20,16(sp)
  807b54:	dcc00317 	ldw	r19,12(sp)
  807b58:	dc800217 	ldw	r18,8(sp)
  807b5c:	dc400117 	ldw	r17,4(sp)
  807b60:	dc000017 	ldw	r16,0(sp)
  807b64:	dec00a04 	addi	sp,sp,40
  807b68:	0805ab41 	jmpi	805ab4 <_malloc_r>
  807b6c:	a8c00017 	ldw	r3,0(r21)
  807b70:	90c00015 	stw	r3,0(r18)
  807b74:	a8c00117 	ldw	r3,4(r21)
  807b78:	90c00115 	stw	r3,4(r18)
  807b7c:	00c006c4 	movi	r3,27
  807b80:	19804536 	bltu	r3,r6,807c98 <_realloc_r+0x470>
  807b84:	90800204 	addi	r2,r18,8
  807b88:	a8c00204 	addi	r3,r21,8
  807b8c:	003f6306 	br	80791c <__alt_data_end+0xff80791c>
  807b90:	9005883a 	mov	r2,r18
  807b94:	a8c00017 	ldw	r3,0(r21)
  807b98:	b821883a 	mov	r16,r23
  807b9c:	b027883a 	mov	r19,r22
  807ba0:	10c00015 	stw	r3,0(r2)
  807ba4:	a8c00117 	ldw	r3,4(r21)
  807ba8:	10c00115 	stw	r3,4(r2)
  807bac:	a8c00217 	ldw	r3,8(r21)
  807bb0:	10c00215 	stw	r3,8(r2)
  807bb4:	003f6a06 	br	807960 <__alt_data_end+0xff807960>
  807bb8:	9c67883a 	add	r19,r19,r17
  807bbc:	4445c83a 	sub	r2,r8,r17
  807bc0:	e4c00215 	stw	r19,8(fp)
  807bc4:	10800054 	ori	r2,r2,1
  807bc8:	98800115 	stw	r2,4(r19)
  807bcc:	a8bfff17 	ldw	r2,-4(r21)
  807bd0:	a009883a 	mov	r4,r20
  807bd4:	1080004c 	andi	r2,r2,1
  807bd8:	1462b03a 	or	r17,r2,r17
  807bdc:	ac7fff15 	stw	r17,-4(r21)
  807be0:	080dc4c0 	call	80dc4c <__malloc_unlock>
  807be4:	a805883a 	mov	r2,r21
  807be8:	003f6b06 	br	807998 <__alt_data_end+0xff807998>
  807bec:	a80b883a 	mov	r5,r21
  807bf0:	9009883a 	mov	r4,r18
  807bf4:	08064ec0 	call	8064ec <memmove>
  807bf8:	003f4e06 	br	807934 <__alt_data_end+0xff807934>
  807bfc:	89000404 	addi	r4,r17,16
  807c00:	b93fbc16 	blt	r23,r4,807af4 <__alt_data_end+0xff807af4>
  807c04:	b0800317 	ldw	r2,12(r22)
  807c08:	b0c00217 	ldw	r3,8(r22)
  807c0c:	81bfff04 	addi	r6,r16,-4
  807c10:	01000904 	movi	r4,36
  807c14:	18800315 	stw	r2,12(r3)
  807c18:	10c00215 	stw	r3,8(r2)
  807c1c:	b4800204 	addi	r18,r22,8
  807c20:	21804336 	bltu	r4,r6,807d30 <_realloc_r+0x508>
  807c24:	008004c4 	movi	r2,19
  807c28:	11803f2e 	bgeu	r2,r6,807d28 <_realloc_r+0x500>
  807c2c:	a8800017 	ldw	r2,0(r21)
  807c30:	b0800215 	stw	r2,8(r22)
  807c34:	a8800117 	ldw	r2,4(r21)
  807c38:	b0800315 	stw	r2,12(r22)
  807c3c:	008006c4 	movi	r2,27
  807c40:	11803f36 	bltu	r2,r6,807d40 <_realloc_r+0x518>
  807c44:	b0800404 	addi	r2,r22,16
  807c48:	ad400204 	addi	r21,r21,8
  807c4c:	a8c00017 	ldw	r3,0(r21)
  807c50:	10c00015 	stw	r3,0(r2)
  807c54:	a8c00117 	ldw	r3,4(r21)
  807c58:	10c00115 	stw	r3,4(r2)
  807c5c:	a8c00217 	ldw	r3,8(r21)
  807c60:	10c00215 	stw	r3,8(r2)
  807c64:	b447883a 	add	r3,r22,r17
  807c68:	bc45c83a 	sub	r2,r23,r17
  807c6c:	e0c00215 	stw	r3,8(fp)
  807c70:	10800054 	ori	r2,r2,1
  807c74:	18800115 	stw	r2,4(r3)
  807c78:	b0800117 	ldw	r2,4(r22)
  807c7c:	a009883a 	mov	r4,r20
  807c80:	1080004c 	andi	r2,r2,1
  807c84:	1462b03a 	or	r17,r2,r17
  807c88:	b4400115 	stw	r17,4(r22)
  807c8c:	080dc4c0 	call	80dc4c <__malloc_unlock>
  807c90:	9005883a 	mov	r2,r18
  807c94:	003f4006 	br	807998 <__alt_data_end+0xff807998>
  807c98:	a8c00217 	ldw	r3,8(r21)
  807c9c:	90c00215 	stw	r3,8(r18)
  807ca0:	a8c00317 	ldw	r3,12(r21)
  807ca4:	90c00315 	stw	r3,12(r18)
  807ca8:	30801126 	beq	r6,r2,807cf0 <_realloc_r+0x4c8>
  807cac:	90800404 	addi	r2,r18,16
  807cb0:	a8c00404 	addi	r3,r21,16
  807cb4:	003f1906 	br	80791c <__alt_data_end+0xff80791c>
  807cb8:	90ffff17 	ldw	r3,-4(r18)
  807cbc:	00bfff04 	movi	r2,-4
  807cc0:	a825883a 	mov	r18,r21
  807cc4:	1884703a 	and	r2,r3,r2
  807cc8:	80a1883a 	add	r16,r16,r2
  807ccc:	003f2406 	br	807960 <__alt_data_end+0xff807960>
  807cd0:	a8800217 	ldw	r2,8(r21)
  807cd4:	b0800415 	stw	r2,16(r22)
  807cd8:	a8800317 	ldw	r2,12(r21)
  807cdc:	b0800515 	stw	r2,20(r22)
  807ce0:	31000a26 	beq	r6,r4,807d0c <_realloc_r+0x4e4>
  807ce4:	b0800604 	addi	r2,r22,24
  807ce8:	ad400404 	addi	r21,r21,16
  807cec:	003fa906 	br	807b94 <__alt_data_end+0xff807b94>
  807cf0:	a9000417 	ldw	r4,16(r21)
  807cf4:	90800604 	addi	r2,r18,24
  807cf8:	a8c00604 	addi	r3,r21,24
  807cfc:	91000415 	stw	r4,16(r18)
  807d00:	a9000517 	ldw	r4,20(r21)
  807d04:	91000515 	stw	r4,20(r18)
  807d08:	003f0406 	br	80791c <__alt_data_end+0xff80791c>
  807d0c:	a8c00417 	ldw	r3,16(r21)
  807d10:	ad400604 	addi	r21,r21,24
  807d14:	b0800804 	addi	r2,r22,32
  807d18:	b0c00615 	stw	r3,24(r22)
  807d1c:	a8ffff17 	ldw	r3,-4(r21)
  807d20:	b0c00715 	stw	r3,28(r22)
  807d24:	003f9b06 	br	807b94 <__alt_data_end+0xff807b94>
  807d28:	9005883a 	mov	r2,r18
  807d2c:	003fc706 	br	807c4c <__alt_data_end+0xff807c4c>
  807d30:	a80b883a 	mov	r5,r21
  807d34:	9009883a 	mov	r4,r18
  807d38:	08064ec0 	call	8064ec <memmove>
  807d3c:	003fc906 	br	807c64 <__alt_data_end+0xff807c64>
  807d40:	a8800217 	ldw	r2,8(r21)
  807d44:	b0800415 	stw	r2,16(r22)
  807d48:	a8800317 	ldw	r2,12(r21)
  807d4c:	b0800515 	stw	r2,20(r22)
  807d50:	31000726 	beq	r6,r4,807d70 <_realloc_r+0x548>
  807d54:	b0800604 	addi	r2,r22,24
  807d58:	ad400404 	addi	r21,r21,16
  807d5c:	003fbb06 	br	807c4c <__alt_data_end+0xff807c4c>
  807d60:	a009883a 	mov	r4,r20
  807d64:	080dc4c0 	call	80dc4c <__malloc_unlock>
  807d68:	0005883a 	mov	r2,zero
  807d6c:	003f0a06 	br	807998 <__alt_data_end+0xff807998>
  807d70:	a8c00417 	ldw	r3,16(r21)
  807d74:	ad400604 	addi	r21,r21,24
  807d78:	b0800804 	addi	r2,r22,32
  807d7c:	b0c00615 	stw	r3,24(r22)
  807d80:	a8ffff17 	ldw	r3,-4(r21)
  807d84:	b0c00715 	stw	r3,28(r22)
  807d88:	003fb006 	br	807c4c <__alt_data_end+0xff807c4c>

00807d8c <__fpclassifyd>:
  807d8c:	00a00034 	movhi	r2,32768
  807d90:	10bfffc4 	addi	r2,r2,-1
  807d94:	2884703a 	and	r2,r5,r2
  807d98:	10000726 	beq	r2,zero,807db8 <__fpclassifyd+0x2c>
  807d9c:	00fffc34 	movhi	r3,65520
  807da0:	019ff834 	movhi	r6,32736
  807da4:	28c7883a 	add	r3,r5,r3
  807da8:	31bfffc4 	addi	r6,r6,-1
  807dac:	30c00536 	bltu	r6,r3,807dc4 <__fpclassifyd+0x38>
  807db0:	00800104 	movi	r2,4
  807db4:	f800283a 	ret
  807db8:	2000021e 	bne	r4,zero,807dc4 <__fpclassifyd+0x38>
  807dbc:	00800084 	movi	r2,2
  807dc0:	f800283a 	ret
  807dc4:	00dffc34 	movhi	r3,32752
  807dc8:	019ff834 	movhi	r6,32736
  807dcc:	28cb883a 	add	r5,r5,r3
  807dd0:	31bfffc4 	addi	r6,r6,-1
  807dd4:	317ff62e 	bgeu	r6,r5,807db0 <__alt_data_end+0xff807db0>
  807dd8:	01400434 	movhi	r5,16
  807ddc:	297fffc4 	addi	r5,r5,-1
  807de0:	28800236 	bltu	r5,r2,807dec <__fpclassifyd+0x60>
  807de4:	008000c4 	movi	r2,3
  807de8:	f800283a 	ret
  807dec:	10c00226 	beq	r2,r3,807df8 <__fpclassifyd+0x6c>
  807df0:	0005883a 	mov	r2,zero
  807df4:	f800283a 	ret
  807df8:	2005003a 	cmpeq	r2,r4,zero
  807dfc:	f800283a 	ret

00807e00 <_sbrk_r>:
  807e00:	defffd04 	addi	sp,sp,-12
  807e04:	dc000015 	stw	r16,0(sp)
  807e08:	04002074 	movhi	r16,129
  807e0c:	dc400115 	stw	r17,4(sp)
  807e10:	8411cc04 	addi	r16,r16,18224
  807e14:	2023883a 	mov	r17,r4
  807e18:	2809883a 	mov	r4,r5
  807e1c:	dfc00215 	stw	ra,8(sp)
  807e20:	80000015 	stw	zero,0(r16)
  807e24:	080de340 	call	80de34 <sbrk>
  807e28:	00ffffc4 	movi	r3,-1
  807e2c:	10c00526 	beq	r2,r3,807e44 <_sbrk_r+0x44>
  807e30:	dfc00217 	ldw	ra,8(sp)
  807e34:	dc400117 	ldw	r17,4(sp)
  807e38:	dc000017 	ldw	r16,0(sp)
  807e3c:	dec00304 	addi	sp,sp,12
  807e40:	f800283a 	ret
  807e44:	80c00017 	ldw	r3,0(r16)
  807e48:	183ff926 	beq	r3,zero,807e30 <__alt_data_end+0xff807e30>
  807e4c:	88c00015 	stw	r3,0(r17)
  807e50:	003ff706 	br	807e30 <__alt_data_end+0xff807e30>

00807e54 <__sread>:
  807e54:	defffe04 	addi	sp,sp,-8
  807e58:	dc000015 	stw	r16,0(sp)
  807e5c:	2821883a 	mov	r16,r5
  807e60:	2940038f 	ldh	r5,14(r5)
  807e64:	dfc00115 	stw	ra,4(sp)
  807e68:	0809d100 	call	809d10 <_read_r>
  807e6c:	10000716 	blt	r2,zero,807e8c <__sread+0x38>
  807e70:	80c01417 	ldw	r3,80(r16)
  807e74:	1887883a 	add	r3,r3,r2
  807e78:	80c01415 	stw	r3,80(r16)
  807e7c:	dfc00117 	ldw	ra,4(sp)
  807e80:	dc000017 	ldw	r16,0(sp)
  807e84:	dec00204 	addi	sp,sp,8
  807e88:	f800283a 	ret
  807e8c:	80c0030b 	ldhu	r3,12(r16)
  807e90:	18fbffcc 	andi	r3,r3,61439
  807e94:	80c0030d 	sth	r3,12(r16)
  807e98:	dfc00117 	ldw	ra,4(sp)
  807e9c:	dc000017 	ldw	r16,0(sp)
  807ea0:	dec00204 	addi	sp,sp,8
  807ea4:	f800283a 	ret

00807ea8 <__seofread>:
  807ea8:	0005883a 	mov	r2,zero
  807eac:	f800283a 	ret

00807eb0 <__swrite>:
  807eb0:	2880030b 	ldhu	r2,12(r5)
  807eb4:	defffb04 	addi	sp,sp,-20
  807eb8:	dcc00315 	stw	r19,12(sp)
  807ebc:	dc800215 	stw	r18,8(sp)
  807ec0:	dc400115 	stw	r17,4(sp)
  807ec4:	dc000015 	stw	r16,0(sp)
  807ec8:	dfc00415 	stw	ra,16(sp)
  807ecc:	10c0400c 	andi	r3,r2,256
  807ed0:	2821883a 	mov	r16,r5
  807ed4:	2023883a 	mov	r17,r4
  807ed8:	3025883a 	mov	r18,r6
  807edc:	3827883a 	mov	r19,r7
  807ee0:	18000526 	beq	r3,zero,807ef8 <__swrite+0x48>
  807ee4:	2940038f 	ldh	r5,14(r5)
  807ee8:	01c00084 	movi	r7,2
  807eec:	000d883a 	mov	r6,zero
  807ef0:	0809cb00 	call	809cb0 <_lseek_r>
  807ef4:	8080030b 	ldhu	r2,12(r16)
  807ef8:	8140038f 	ldh	r5,14(r16)
  807efc:	10bbffcc 	andi	r2,r2,61439
  807f00:	980f883a 	mov	r7,r19
  807f04:	900d883a 	mov	r6,r18
  807f08:	8809883a 	mov	r4,r17
  807f0c:	8080030d 	sth	r2,12(r16)
  807f10:	dfc00417 	ldw	ra,16(sp)
  807f14:	dcc00317 	ldw	r19,12(sp)
  807f18:	dc800217 	ldw	r18,8(sp)
  807f1c:	dc400117 	ldw	r17,4(sp)
  807f20:	dc000017 	ldw	r16,0(sp)
  807f24:	dec00504 	addi	sp,sp,20
  807f28:	08097641 	jmpi	809764 <_write_r>

00807f2c <__sseek>:
  807f2c:	defffe04 	addi	sp,sp,-8
  807f30:	dc000015 	stw	r16,0(sp)
  807f34:	2821883a 	mov	r16,r5
  807f38:	2940038f 	ldh	r5,14(r5)
  807f3c:	dfc00115 	stw	ra,4(sp)
  807f40:	0809cb00 	call	809cb0 <_lseek_r>
  807f44:	00ffffc4 	movi	r3,-1
  807f48:	10c00826 	beq	r2,r3,807f6c <__sseek+0x40>
  807f4c:	80c0030b 	ldhu	r3,12(r16)
  807f50:	80801415 	stw	r2,80(r16)
  807f54:	18c40014 	ori	r3,r3,4096
  807f58:	80c0030d 	sth	r3,12(r16)
  807f5c:	dfc00117 	ldw	ra,4(sp)
  807f60:	dc000017 	ldw	r16,0(sp)
  807f64:	dec00204 	addi	sp,sp,8
  807f68:	f800283a 	ret
  807f6c:	80c0030b 	ldhu	r3,12(r16)
  807f70:	18fbffcc 	andi	r3,r3,61439
  807f74:	80c0030d 	sth	r3,12(r16)
  807f78:	dfc00117 	ldw	ra,4(sp)
  807f7c:	dc000017 	ldw	r16,0(sp)
  807f80:	dec00204 	addi	sp,sp,8
  807f84:	f800283a 	ret

00807f88 <__sclose>:
  807f88:	2940038f 	ldh	r5,14(r5)
  807f8c:	08097c41 	jmpi	8097c4 <_close_r>

00807f90 <strcmp>:
  807f90:	2144b03a 	or	r2,r4,r5
  807f94:	108000cc 	andi	r2,r2,3
  807f98:	1000171e 	bne	r2,zero,807ff8 <strcmp+0x68>
  807f9c:	20800017 	ldw	r2,0(r4)
  807fa0:	28c00017 	ldw	r3,0(r5)
  807fa4:	10c0141e 	bne	r2,r3,807ff8 <strcmp+0x68>
  807fa8:	027fbff4 	movhi	r9,65279
  807fac:	4a7fbfc4 	addi	r9,r9,-257
  807fb0:	0086303a 	nor	r3,zero,r2
  807fb4:	02202074 	movhi	r8,32897
  807fb8:	1245883a 	add	r2,r2,r9
  807fbc:	42202004 	addi	r8,r8,-32640
  807fc0:	10c4703a 	and	r2,r2,r3
  807fc4:	1204703a 	and	r2,r2,r8
  807fc8:	10000226 	beq	r2,zero,807fd4 <strcmp+0x44>
  807fcc:	00002306 	br	80805c <strcmp+0xcc>
  807fd0:	1000221e 	bne	r2,zero,80805c <strcmp+0xcc>
  807fd4:	21000104 	addi	r4,r4,4
  807fd8:	20c00017 	ldw	r3,0(r4)
  807fdc:	29400104 	addi	r5,r5,4
  807fe0:	29800017 	ldw	r6,0(r5)
  807fe4:	1a4f883a 	add	r7,r3,r9
  807fe8:	00c4303a 	nor	r2,zero,r3
  807fec:	3884703a 	and	r2,r7,r2
  807ff0:	1204703a 	and	r2,r2,r8
  807ff4:	19bff626 	beq	r3,r6,807fd0 <__alt_data_end+0xff807fd0>
  807ff8:	20800003 	ldbu	r2,0(r4)
  807ffc:	10c03fcc 	andi	r3,r2,255
  808000:	18c0201c 	xori	r3,r3,128
  808004:	18ffe004 	addi	r3,r3,-128
  808008:	18000c26 	beq	r3,zero,80803c <strcmp+0xac>
  80800c:	29800007 	ldb	r6,0(r5)
  808010:	19800326 	beq	r3,r6,808020 <strcmp+0x90>
  808014:	00001306 	br	808064 <strcmp+0xd4>
  808018:	29800007 	ldb	r6,0(r5)
  80801c:	11800b1e 	bne	r2,r6,80804c <strcmp+0xbc>
  808020:	21000044 	addi	r4,r4,1
  808024:	20c00003 	ldbu	r3,0(r4)
  808028:	29400044 	addi	r5,r5,1
  80802c:	18803fcc 	andi	r2,r3,255
  808030:	1080201c 	xori	r2,r2,128
  808034:	10bfe004 	addi	r2,r2,-128
  808038:	103ff71e 	bne	r2,zero,808018 <__alt_data_end+0xff808018>
  80803c:	0007883a 	mov	r3,zero
  808040:	28800003 	ldbu	r2,0(r5)
  808044:	1885c83a 	sub	r2,r3,r2
  808048:	f800283a 	ret
  80804c:	28800003 	ldbu	r2,0(r5)
  808050:	18c03fcc 	andi	r3,r3,255
  808054:	1885c83a 	sub	r2,r3,r2
  808058:	f800283a 	ret
  80805c:	0005883a 	mov	r2,zero
  808060:	f800283a 	ret
  808064:	10c03fcc 	andi	r3,r2,255
  808068:	003ff506 	br	808040 <__alt_data_end+0xff808040>

0080806c <__sprint_r.part.0>:
  80806c:	28801917 	ldw	r2,100(r5)
  808070:	defff604 	addi	sp,sp,-40
  808074:	dd400515 	stw	r21,20(sp)
  808078:	dfc00915 	stw	ra,36(sp)
  80807c:	df000815 	stw	fp,32(sp)
  808080:	ddc00715 	stw	r23,28(sp)
  808084:	dd800615 	stw	r22,24(sp)
  808088:	dd000415 	stw	r20,16(sp)
  80808c:	dcc00315 	stw	r19,12(sp)
  808090:	dc800215 	stw	r18,8(sp)
  808094:	dc400115 	stw	r17,4(sp)
  808098:	dc000015 	stw	r16,0(sp)
  80809c:	1088000c 	andi	r2,r2,8192
  8080a0:	302b883a 	mov	r21,r6
  8080a4:	10002e26 	beq	r2,zero,808160 <__sprint_r.part.0+0xf4>
  8080a8:	30800217 	ldw	r2,8(r6)
  8080ac:	35800017 	ldw	r22,0(r6)
  8080b0:	10002926 	beq	r2,zero,808158 <__sprint_r.part.0+0xec>
  8080b4:	2827883a 	mov	r19,r5
  8080b8:	2029883a 	mov	r20,r4
  8080bc:	b5c00104 	addi	r23,r22,4
  8080c0:	04bfffc4 	movi	r18,-1
  8080c4:	bc400017 	ldw	r17,0(r23)
  8080c8:	b4000017 	ldw	r16,0(r22)
  8080cc:	0039883a 	mov	fp,zero
  8080d0:	8822d0ba 	srli	r17,r17,2
  8080d4:	8800031e 	bne	r17,zero,8080e4 <__sprint_r.part.0+0x78>
  8080d8:	00001806 	br	80813c <__sprint_r.part.0+0xd0>
  8080dc:	84000104 	addi	r16,r16,4
  8080e0:	8f001526 	beq	r17,fp,808138 <__sprint_r.part.0+0xcc>
  8080e4:	81400017 	ldw	r5,0(r16)
  8080e8:	980d883a 	mov	r6,r19
  8080ec:	a009883a 	mov	r4,r20
  8080f0:	0809b5c0 	call	809b5c <_fputwc_r>
  8080f4:	e7000044 	addi	fp,fp,1
  8080f8:	14bff81e 	bne	r2,r18,8080dc <__alt_data_end+0xff8080dc>
  8080fc:	9005883a 	mov	r2,r18
  808100:	a8000215 	stw	zero,8(r21)
  808104:	a8000115 	stw	zero,4(r21)
  808108:	dfc00917 	ldw	ra,36(sp)
  80810c:	df000817 	ldw	fp,32(sp)
  808110:	ddc00717 	ldw	r23,28(sp)
  808114:	dd800617 	ldw	r22,24(sp)
  808118:	dd400517 	ldw	r21,20(sp)
  80811c:	dd000417 	ldw	r20,16(sp)
  808120:	dcc00317 	ldw	r19,12(sp)
  808124:	dc800217 	ldw	r18,8(sp)
  808128:	dc400117 	ldw	r17,4(sp)
  80812c:	dc000017 	ldw	r16,0(sp)
  808130:	dec00a04 	addi	sp,sp,40
  808134:	f800283a 	ret
  808138:	a8800217 	ldw	r2,8(r21)
  80813c:	8c63883a 	add	r17,r17,r17
  808140:	8c63883a 	add	r17,r17,r17
  808144:	1445c83a 	sub	r2,r2,r17
  808148:	a8800215 	stw	r2,8(r21)
  80814c:	b5800204 	addi	r22,r22,8
  808150:	bdc00204 	addi	r23,r23,8
  808154:	103fdb1e 	bne	r2,zero,8080c4 <__alt_data_end+0xff8080c4>
  808158:	0005883a 	mov	r2,zero
  80815c:	003fe806 	br	808100 <__alt_data_end+0xff808100>
  808160:	08051cc0 	call	8051cc <__sfvwrite_r>
  808164:	003fe606 	br	808100 <__alt_data_end+0xff808100>

00808168 <__sprint_r>:
  808168:	30c00217 	ldw	r3,8(r6)
  80816c:	18000126 	beq	r3,zero,808174 <__sprint_r+0xc>
  808170:	080806c1 	jmpi	80806c <__sprint_r.part.0>
  808174:	30000115 	stw	zero,4(r6)
  808178:	0005883a 	mov	r2,zero
  80817c:	f800283a 	ret

00808180 <___vfiprintf_internal_r>:
  808180:	deffca04 	addi	sp,sp,-216
  808184:	dd403115 	stw	r21,196(sp)
  808188:	dfc03515 	stw	ra,212(sp)
  80818c:	df003415 	stw	fp,208(sp)
  808190:	ddc03315 	stw	r23,204(sp)
  808194:	dd803215 	stw	r22,200(sp)
  808198:	dd003015 	stw	r20,192(sp)
  80819c:	dcc02f15 	stw	r19,188(sp)
  8081a0:	dc802e15 	stw	r18,184(sp)
  8081a4:	dc402d15 	stw	r17,180(sp)
  8081a8:	dc002c15 	stw	r16,176(sp)
  8081ac:	d9002115 	stw	r4,132(sp)
  8081b0:	d9402015 	stw	r5,128(sp)
  8081b4:	d9c02215 	stw	r7,136(sp)
  8081b8:	302b883a 	mov	r21,r6
  8081bc:	20000226 	beq	r4,zero,8081c8 <___vfiprintf_internal_r+0x48>
  8081c0:	20800e17 	ldw	r2,56(r4)
  8081c4:	1000cf26 	beq	r2,zero,808504 <___vfiprintf_internal_r+0x384>
  8081c8:	d8c02017 	ldw	r3,128(sp)
  8081cc:	1880030b 	ldhu	r2,12(r3)
  8081d0:	10c8000c 	andi	r3,r2,8192
  8081d4:	1800071e 	bne	r3,zero,8081f4 <___vfiprintf_internal_r+0x74>
  8081d8:	d9402017 	ldw	r5,128(sp)
  8081dc:	00f7ffc4 	movi	r3,-8193
  8081e0:	10880014 	ori	r2,r2,8192
  8081e4:	29001917 	ldw	r4,100(r5)
  8081e8:	2880030d 	sth	r2,12(r5)
  8081ec:	20c6703a 	and	r3,r4,r3
  8081f0:	28c01915 	stw	r3,100(r5)
  8081f4:	10c0020c 	andi	r3,r2,8
  8081f8:	1800a526 	beq	r3,zero,808490 <___vfiprintf_internal_r+0x310>
  8081fc:	d9002017 	ldw	r4,128(sp)
  808200:	20c00417 	ldw	r3,16(r4)
  808204:	1800a226 	beq	r3,zero,808490 <___vfiprintf_internal_r+0x310>
  808208:	1080068c 	andi	r2,r2,26
  80820c:	00c00284 	movi	r3,10
  808210:	10c0a826 	beq	r2,r3,8084b4 <___vfiprintf_internal_r+0x334>
  808214:	d9001a04 	addi	r4,sp,104
  808218:	d94019c4 	addi	r5,sp,103
  80821c:	04802074 	movhi	r18,129
  808220:	2145c83a 	sub	r2,r4,r5
  808224:	9483c404 	addi	r18,r18,3856
  808228:	d9001e15 	stw	r4,120(sp)
  80822c:	d9401f15 	stw	r5,124(sp)
  808230:	dec01a15 	stw	sp,104(sp)
  808234:	d8001c15 	stw	zero,112(sp)
  808238:	d8001b15 	stw	zero,108(sp)
  80823c:	d811883a 	mov	r8,sp
  808240:	d8002615 	stw	zero,152(sp)
  808244:	d8002415 	stw	zero,144(sp)
  808248:	d8802815 	stw	r2,160(sp)
  80824c:	a82d883a 	mov	r22,r21
  808250:	b0800007 	ldb	r2,0(r22)
  808254:	10040d26 	beq	r2,zero,80928c <___vfiprintf_internal_r+0x110c>
  808258:	00c00944 	movi	r3,37
  80825c:	b029883a 	mov	r20,r22
  808260:	10c0021e 	bne	r2,r3,80826c <___vfiprintf_internal_r+0xec>
  808264:	00001606 	br	8082c0 <___vfiprintf_internal_r+0x140>
  808268:	10c00326 	beq	r2,r3,808278 <___vfiprintf_internal_r+0xf8>
  80826c:	a5000044 	addi	r20,r20,1
  808270:	a0800007 	ldb	r2,0(r20)
  808274:	103ffc1e 	bne	r2,zero,808268 <__alt_data_end+0xff808268>
  808278:	a5a1c83a 	sub	r16,r20,r22
  80827c:	80001026 	beq	r16,zero,8082c0 <___vfiprintf_internal_r+0x140>
  808280:	d8c01c17 	ldw	r3,112(sp)
  808284:	d8801b17 	ldw	r2,108(sp)
  808288:	45800015 	stw	r22,0(r8)
  80828c:	80c7883a 	add	r3,r16,r3
  808290:	10800044 	addi	r2,r2,1
  808294:	44000115 	stw	r16,4(r8)
  808298:	d8c01c15 	stw	r3,112(sp)
  80829c:	d8801b15 	stw	r2,108(sp)
  8082a0:	010001c4 	movi	r4,7
  8082a4:	2080750e 	bge	r4,r2,80847c <___vfiprintf_internal_r+0x2fc>
  8082a8:	1803951e 	bne	r3,zero,809100 <___vfiprintf_internal_r+0xf80>
  8082ac:	d8c02417 	ldw	r3,144(sp)
  8082b0:	d8001b15 	stw	zero,108(sp)
  8082b4:	d811883a 	mov	r8,sp
  8082b8:	1c07883a 	add	r3,r3,r16
  8082bc:	d8c02415 	stw	r3,144(sp)
  8082c0:	a0800007 	ldb	r2,0(r20)
  8082c4:	1002e026 	beq	r2,zero,808e48 <___vfiprintf_internal_r+0xcc8>
  8082c8:	a5800044 	addi	r22,r20,1
  8082cc:	a0c00047 	ldb	r3,1(r20)
  8082d0:	d8001d85 	stb	zero,118(sp)
  8082d4:	0027883a 	mov	r19,zero
  8082d8:	d8002305 	stb	zero,140(sp)
  8082dc:	043fffc4 	movi	r16,-1
  8082e0:	d8002515 	stw	zero,148(sp)
  8082e4:	0023883a 	mov	r17,zero
  8082e8:	05001604 	movi	r20,88
  8082ec:	05400244 	movi	r21,9
  8082f0:	402f883a 	mov	r23,r8
  8082f4:	b5800044 	addi	r22,r22,1
  8082f8:	18bff804 	addi	r2,r3,-32
  8082fc:	a0827736 	bltu	r20,r2,808cdc <___vfiprintf_internal_r+0xb5c>
  808300:	100490ba 	slli	r2,r2,2
  808304:	01002074 	movhi	r4,129
  808308:	2120c604 	addi	r4,r4,-31976
  80830c:	1105883a 	add	r2,r2,r4
  808310:	10800017 	ldw	r2,0(r2)
  808314:	1000683a 	jmp	r2
  808318:	008089dc 	xori	r2,zero,551
  80831c:	00808cdc 	xori	r2,zero,563
  808320:	00808cdc 	xori	r2,zero,563
  808324:	008089f8 	rdprs	r2,zero,551
  808328:	00808cdc 	xori	r2,zero,563
  80832c:	00808cdc 	xori	r2,zero,563
  808330:	00808cdc 	xori	r2,zero,563
  808334:	00808cdc 	xori	r2,zero,563
  808338:	00808cdc 	xori	r2,zero,563
  80833c:	00808cdc 	xori	r2,zero,563
  808340:	00808c00 	call	808c0 <__alt_mem_sdram-0x77f740>
  808344:	00808c24 	muli	r2,zero,560
  808348:	00808cdc 	xori	r2,zero,563
  80834c:	0080851c 	xori	r2,zero,532
  808350:	00808c38 	rdprs	r2,zero,560
  808354:	00808cdc 	xori	r2,zero,563
  808358:	00808a04 	movi	r2,552
  80835c:	00808a10 	cmplti	r2,zero,552
  808360:	00808a10 	cmplti	r2,zero,552
  808364:	00808a10 	cmplti	r2,zero,552
  808368:	00808a10 	cmplti	r2,zero,552
  80836c:	00808a10 	cmplti	r2,zero,552
  808370:	00808a10 	cmplti	r2,zero,552
  808374:	00808a10 	cmplti	r2,zero,552
  808378:	00808a10 	cmplti	r2,zero,552
  80837c:	00808a10 	cmplti	r2,zero,552
  808380:	00808cdc 	xori	r2,zero,563
  808384:	00808cdc 	xori	r2,zero,563
  808388:	00808cdc 	xori	r2,zero,563
  80838c:	00808cdc 	xori	r2,zero,563
  808390:	00808cdc 	xori	r2,zero,563
  808394:	00808cdc 	xori	r2,zero,563
  808398:	00808cdc 	xori	r2,zero,563
  80839c:	00808cdc 	xori	r2,zero,563
  8083a0:	00808cdc 	xori	r2,zero,563
  8083a4:	00808cdc 	xori	r2,zero,563
  8083a8:	00808a50 	cmplti	r2,zero,553
  8083ac:	00808cdc 	xori	r2,zero,563
  8083b0:	00808cdc 	xori	r2,zero,563
  8083b4:	00808cdc 	xori	r2,zero,563
  8083b8:	00808cdc 	xori	r2,zero,563
  8083bc:	00808cdc 	xori	r2,zero,563
  8083c0:	00808cdc 	xori	r2,zero,563
  8083c4:	00808cdc 	xori	r2,zero,563
  8083c8:	00808cdc 	xori	r2,zero,563
  8083cc:	00808cdc 	xori	r2,zero,563
  8083d0:	00808cdc 	xori	r2,zero,563
  8083d4:	00808a8c 	andi	r2,zero,554
  8083d8:	00808cdc 	xori	r2,zero,563
  8083dc:	00808cdc 	xori	r2,zero,563
  8083e0:	00808cdc 	xori	r2,zero,563
  8083e4:	00808cdc 	xori	r2,zero,563
  8083e8:	00808cdc 	xori	r2,zero,563
  8083ec:	00808ae8 	cmpgeui	r2,zero,555
  8083f0:	00808cdc 	xori	r2,zero,563
  8083f4:	00808cdc 	xori	r2,zero,563
  8083f8:	00808b5c 	xori	r2,zero,557
  8083fc:	00808cdc 	xori	r2,zero,563
  808400:	00808cdc 	xori	r2,zero,563
  808404:	00808cdc 	xori	r2,zero,563
  808408:	00808cdc 	xori	r2,zero,563
  80840c:	00808cdc 	xori	r2,zero,563
  808410:	00808cdc 	xori	r2,zero,563
  808414:	00808cdc 	xori	r2,zero,563
  808418:	00808cdc 	xori	r2,zero,563
  80841c:	00808cdc 	xori	r2,zero,563
  808420:	00808cdc 	xori	r2,zero,563
  808424:	00808904 	movi	r2,548
  808428:	00808934 	movhi	r2,548
  80842c:	00808cdc 	xori	r2,zero,563
  808430:	00808cdc 	xori	r2,zero,563
  808434:	00808cdc 	xori	r2,zero,563
  808438:	00808c84 	movi	r2,562
  80843c:	00808934 	movhi	r2,548
  808440:	00808cdc 	xori	r2,zero,563
  808444:	00808cdc 	xori	r2,zero,563
  808448:	008087dc 	xori	r2,zero,543
  80844c:	00808cdc 	xori	r2,zero,563
  808450:	008087f0 	cmpltui	r2,zero,543
  808454:	00808828 	cmpgeui	r2,zero,544
  808458:	00808528 	cmpgeui	r2,zero,532
  80845c:	008087d0 	cmplti	r2,zero,543
  808460:	00808cdc 	xori	r2,zero,563
  808464:	00808b9c 	xori	r2,zero,558
  808468:	00808cdc 	xori	r2,zero,563
  80846c:	00808be8 	cmpgeui	r2,zero,559
  808470:	00808cdc 	xori	r2,zero,563
  808474:	00808cdc 	xori	r2,zero,563
  808478:	008088ac 	andhi	r2,zero,546
  80847c:	42000204 	addi	r8,r8,8
  808480:	d8c02417 	ldw	r3,144(sp)
  808484:	1c07883a 	add	r3,r3,r16
  808488:	d8c02415 	stw	r3,144(sp)
  80848c:	003f8c06 	br	8082c0 <__alt_data_end+0xff8082c0>
  808490:	d9402017 	ldw	r5,128(sp)
  808494:	d9002117 	ldw	r4,132(sp)
  808498:	0802d3c0 	call	802d3c <__swsetup_r>
  80849c:	1003c11e 	bne	r2,zero,8093a4 <___vfiprintf_internal_r+0x1224>
  8084a0:	d9402017 	ldw	r5,128(sp)
  8084a4:	00c00284 	movi	r3,10
  8084a8:	2880030b 	ldhu	r2,12(r5)
  8084ac:	1080068c 	andi	r2,r2,26
  8084b0:	10ff581e 	bne	r2,r3,808214 <__alt_data_end+0xff808214>
  8084b4:	d8c02017 	ldw	r3,128(sp)
  8084b8:	1880038f 	ldh	r2,14(r3)
  8084bc:	103f5516 	blt	r2,zero,808214 <__alt_data_end+0xff808214>
  8084c0:	d9c02217 	ldw	r7,136(sp)
  8084c4:	d9002117 	ldw	r4,132(sp)
  8084c8:	a80d883a 	mov	r6,r21
  8084cc:	180b883a 	mov	r5,r3
  8084d0:	08096a80 	call	8096a8 <__sbprintf>
  8084d4:	dfc03517 	ldw	ra,212(sp)
  8084d8:	df003417 	ldw	fp,208(sp)
  8084dc:	ddc03317 	ldw	r23,204(sp)
  8084e0:	dd803217 	ldw	r22,200(sp)
  8084e4:	dd403117 	ldw	r21,196(sp)
  8084e8:	dd003017 	ldw	r20,192(sp)
  8084ec:	dcc02f17 	ldw	r19,188(sp)
  8084f0:	dc802e17 	ldw	r18,184(sp)
  8084f4:	dc402d17 	ldw	r17,180(sp)
  8084f8:	dc002c17 	ldw	r16,176(sp)
  8084fc:	dec03604 	addi	sp,sp,216
  808500:	f800283a 	ret
  808504:	0804d480 	call	804d48 <__sinit>
  808508:	003f2f06 	br	8081c8 <__alt_data_end+0xff8081c8>
  80850c:	d8c02517 	ldw	r3,148(sp)
  808510:	d8802215 	stw	r2,136(sp)
  808514:	00c7c83a 	sub	r3,zero,r3
  808518:	d8c02515 	stw	r3,148(sp)
  80851c:	8c400114 	ori	r17,r17,4
  808520:	b0c00007 	ldb	r3,0(r22)
  808524:	003f7306 	br	8082f4 <__alt_data_end+0xff8082f4>
  808528:	00800c04 	movi	r2,48
  80852c:	d9402217 	ldw	r5,136(sp)
  808530:	d8801d05 	stb	r2,116(sp)
  808534:	00801e04 	movi	r2,120
  808538:	d8801d45 	stb	r2,117(sp)
  80853c:	d8001d85 	stb	zero,118(sp)
  808540:	b811883a 	mov	r8,r23
  808544:	28c00104 	addi	r3,r5,4
  808548:	2cc00017 	ldw	r19,0(r5)
  80854c:	0029883a 	mov	r20,zero
  808550:	88800094 	ori	r2,r17,2
  808554:	80032516 	blt	r16,zero,8091ec <___vfiprintf_internal_r+0x106c>
  808558:	00bfdfc4 	movi	r2,-129
  80855c:	88a2703a 	and	r17,r17,r2
  808560:	d8c02215 	stw	r3,136(sp)
  808564:	8c400094 	ori	r17,r17,2
  808568:	98032a1e 	bne	r19,zero,809214 <___vfiprintf_internal_r+0x1094>
  80856c:	00802074 	movhi	r2,129
  808570:	10836304 	addi	r2,r2,3468
  808574:	d8802615 	stw	r2,152(sp)
  808578:	002b883a 	mov	r21,zero
  80857c:	8001741e 	bne	r16,zero,808b50 <___vfiprintf_internal_r+0x9d0>
  808580:	0021883a 	mov	r16,zero
  808584:	0029883a 	mov	r20,zero
  808588:	ddc01a04 	addi	r23,sp,104
  80858c:	8027883a 	mov	r19,r16
  808590:	8500010e 	bge	r16,r20,808598 <___vfiprintf_internal_r+0x418>
  808594:	a027883a 	mov	r19,r20
  808598:	ad403fcc 	andi	r21,r21,255
  80859c:	ad40201c 	xori	r21,r21,128
  8085a0:	ad7fe004 	addi	r21,r21,-128
  8085a4:	a8000126 	beq	r21,zero,8085ac <___vfiprintf_internal_r+0x42c>
  8085a8:	9cc00044 	addi	r19,r19,1
  8085ac:	89c0008c 	andi	r7,r17,2
  8085b0:	38000126 	beq	r7,zero,8085b8 <___vfiprintf_internal_r+0x438>
  8085b4:	9cc00084 	addi	r19,r19,2
  8085b8:	88c0210c 	andi	r3,r17,132
  8085bc:	1801dd1e 	bne	r3,zero,808d34 <___vfiprintf_internal_r+0xbb4>
  8085c0:	d9402517 	ldw	r5,148(sp)
  8085c4:	2cebc83a 	sub	r21,r5,r19
  8085c8:	0541da0e 	bge	zero,r21,808d34 <___vfiprintf_internal_r+0xbb4>
  8085cc:	07000404 	movi	fp,16
  8085d0:	d8801c17 	ldw	r2,112(sp)
  8085d4:	e543be0e 	bge	fp,r21,8094d0 <___vfiprintf_internal_r+0x1350>
  8085d8:	01402074 	movhi	r5,129
  8085dc:	2943c804 	addi	r5,r5,3872
  8085e0:	dc002715 	stw	r16,156(sp)
  8085e4:	d9801b17 	ldw	r6,108(sp)
  8085e8:	a821883a 	mov	r16,r21
  8085ec:	d9402315 	stw	r5,140(sp)
  8085f0:	028001c4 	movi	r10,7
  8085f4:	d9c02915 	stw	r7,164(sp)
  8085f8:	182b883a 	mov	r21,r3
  8085fc:	00000506 	br	808614 <___vfiprintf_internal_r+0x494>
  808600:	31000084 	addi	r4,r6,2
  808604:	42000204 	addi	r8,r8,8
  808608:	180d883a 	mov	r6,r3
  80860c:	843ffc04 	addi	r16,r16,-16
  808610:	e4000f0e 	bge	fp,r16,808650 <___vfiprintf_internal_r+0x4d0>
  808614:	01002074 	movhi	r4,129
  808618:	10800404 	addi	r2,r2,16
  80861c:	30c00044 	addi	r3,r6,1
  808620:	2103c804 	addi	r4,r4,3872
  808624:	41000015 	stw	r4,0(r8)
  808628:	47000115 	stw	fp,4(r8)
  80862c:	d8801c15 	stw	r2,112(sp)
  808630:	d8c01b15 	stw	r3,108(sp)
  808634:	50fff20e 	bge	r10,r3,808600 <__alt_data_end+0xff808600>
  808638:	1001b21e 	bne	r2,zero,808d04 <___vfiprintf_internal_r+0xb84>
  80863c:	843ffc04 	addi	r16,r16,-16
  808640:	000d883a 	mov	r6,zero
  808644:	01000044 	movi	r4,1
  808648:	d811883a 	mov	r8,sp
  80864c:	e43ff116 	blt	fp,r16,808614 <__alt_data_end+0xff808614>
  808650:	a807883a 	mov	r3,r21
  808654:	d9c02917 	ldw	r7,164(sp)
  808658:	802b883a 	mov	r21,r16
  80865c:	dc002717 	ldw	r16,156(sp)
  808660:	d9402317 	ldw	r5,140(sp)
  808664:	a885883a 	add	r2,r21,r2
  808668:	45400115 	stw	r21,4(r8)
  80866c:	41400015 	stw	r5,0(r8)
  808670:	d8801c15 	stw	r2,112(sp)
  808674:	d9001b15 	stw	r4,108(sp)
  808678:	014001c4 	movi	r5,7
  80867c:	29026216 	blt	r5,r4,809008 <___vfiprintf_internal_r+0xe88>
  808680:	d9801d87 	ldb	r6,118(sp)
  808684:	42000204 	addi	r8,r8,8
  808688:	21400044 	addi	r5,r4,1
  80868c:	3001ae1e 	bne	r6,zero,808d48 <___vfiprintf_internal_r+0xbc8>
  808690:	3801bb26 	beq	r7,zero,808d80 <___vfiprintf_internal_r+0xc00>
  808694:	d9001d04 	addi	r4,sp,116
  808698:	10800084 	addi	r2,r2,2
  80869c:	41000015 	stw	r4,0(r8)
  8086a0:	01000084 	movi	r4,2
  8086a4:	41000115 	stw	r4,4(r8)
  8086a8:	d8801c15 	stw	r2,112(sp)
  8086ac:	d9401b15 	stw	r5,108(sp)
  8086b0:	010001c4 	movi	r4,7
  8086b4:	2142680e 	bge	r4,r5,809058 <___vfiprintf_internal_r+0xed8>
  8086b8:	1002b11e 	bne	r2,zero,809180 <___vfiprintf_internal_r+0x1000>
  8086bc:	01802004 	movi	r6,128
  8086c0:	01400044 	movi	r5,1
  8086c4:	0009883a 	mov	r4,zero
  8086c8:	d811883a 	mov	r8,sp
  8086cc:	1981ae1e 	bne	r3,r6,808d88 <___vfiprintf_internal_r+0xc08>
  8086d0:	d8c02517 	ldw	r3,148(sp)
  8086d4:	1cf9c83a 	sub	fp,r3,r19
  8086d8:	0701ab0e 	bge	zero,fp,808d88 <___vfiprintf_internal_r+0xc08>
  8086dc:	05400404 	movi	r21,16
  8086e0:	af03a90e 	bge	r21,fp,809588 <___vfiprintf_internal_r+0x1408>
  8086e4:	01402074 	movhi	r5,129
  8086e8:	2943c404 	addi	r5,r5,3856
  8086ec:	d9402315 	stw	r5,140(sp)
  8086f0:	01c001c4 	movi	r7,7
  8086f4:	00000506 	br	80870c <___vfiprintf_internal_r+0x58c>
  8086f8:	21800084 	addi	r6,r4,2
  8086fc:	42000204 	addi	r8,r8,8
  808700:	1809883a 	mov	r4,r3
  808704:	e73ffc04 	addi	fp,fp,-16
  808708:	af000d0e 	bge	r21,fp,808740 <___vfiprintf_internal_r+0x5c0>
  80870c:	10800404 	addi	r2,r2,16
  808710:	20c00044 	addi	r3,r4,1
  808714:	44800015 	stw	r18,0(r8)
  808718:	45400115 	stw	r21,4(r8)
  80871c:	d8801c15 	stw	r2,112(sp)
  808720:	d8c01b15 	stw	r3,108(sp)
  808724:	38fff40e 	bge	r7,r3,8086f8 <__alt_data_end+0xff8086f8>
  808728:	10022b1e 	bne	r2,zero,808fd8 <___vfiprintf_internal_r+0xe58>
  80872c:	e73ffc04 	addi	fp,fp,-16
  808730:	01800044 	movi	r6,1
  808734:	0009883a 	mov	r4,zero
  808738:	d811883a 	mov	r8,sp
  80873c:	af3ff316 	blt	r21,fp,80870c <__alt_data_end+0xff80870c>
  808740:	d8c02317 	ldw	r3,140(sp)
  808744:	1705883a 	add	r2,r2,fp
  808748:	47000115 	stw	fp,4(r8)
  80874c:	40c00015 	stw	r3,0(r8)
  808750:	d8801c15 	stw	r2,112(sp)
  808754:	d9801b15 	stw	r6,108(sp)
  808758:	00c001c4 	movi	r3,7
  80875c:	19829416 	blt	r3,r6,8091b0 <___vfiprintf_internal_r+0x1030>
  808760:	8521c83a 	sub	r16,r16,r20
  808764:	42000204 	addi	r8,r8,8
  808768:	31400044 	addi	r5,r6,1
  80876c:	3009883a 	mov	r4,r6
  808770:	04018716 	blt	zero,r16,808d90 <___vfiprintf_internal_r+0xc10>
  808774:	a085883a 	add	r2,r20,r2
  808778:	45c00015 	stw	r23,0(r8)
  80877c:	45000115 	stw	r20,4(r8)
  808780:	d8801c15 	stw	r2,112(sp)
  808784:	d9401b15 	stw	r5,108(sp)
  808788:	00c001c4 	movi	r3,7
  80878c:	1941c20e 	bge	r3,r5,808e98 <___vfiprintf_internal_r+0xd18>
  808790:	1002531e 	bne	r2,zero,8090e0 <___vfiprintf_internal_r+0xf60>
  808794:	d8001b15 	stw	zero,108(sp)
  808798:	8c40010c 	andi	r17,r17,4
  80879c:	88023226 	beq	r17,zero,809068 <___vfiprintf_internal_r+0xee8>
  8087a0:	d9002517 	ldw	r4,148(sp)
  8087a4:	24e3c83a 	sub	r17,r4,r19
  8087a8:	04432916 	blt	zero,r17,809450 <___vfiprintf_internal_r+0x12d0>
  8087ac:	d8802517 	ldw	r2,148(sp)
  8087b0:	14c0010e 	bge	r2,r19,8087b8 <___vfiprintf_internal_r+0x638>
  8087b4:	9805883a 	mov	r2,r19
  8087b8:	d8c02417 	ldw	r3,144(sp)
  8087bc:	1887883a 	add	r3,r3,r2
  8087c0:	d8c02415 	stw	r3,144(sp)
  8087c4:	d8001b15 	stw	zero,108(sp)
  8087c8:	d811883a 	mov	r8,sp
  8087cc:	003ea006 	br	808250 <__alt_data_end+0xff808250>
  8087d0:	8c400814 	ori	r17,r17,32
  8087d4:	b0c00007 	ldb	r3,0(r22)
  8087d8:	003ec606 	br	8082f4 <__alt_data_end+0xff8082f4>
  8087dc:	b0c00007 	ldb	r3,0(r22)
  8087e0:	00801b04 	movi	r2,108
  8087e4:	18832026 	beq	r3,r2,809468 <___vfiprintf_internal_r+0x12e8>
  8087e8:	8c400414 	ori	r17,r17,16
  8087ec:	003ec106 	br	8082f4 <__alt_data_end+0xff8082f4>
  8087f0:	9cc03fcc 	andi	r19,r19,255
  8087f4:	b811883a 	mov	r8,r23
  8087f8:	9803981e 	bne	r19,zero,80965c <___vfiprintf_internal_r+0x14dc>
  8087fc:	8880080c 	andi	r2,r17,32
  808800:	1002be26 	beq	r2,zero,8092fc <___vfiprintf_internal_r+0x117c>
  808804:	d9002217 	ldw	r4,136(sp)
  808808:	d9402417 	ldw	r5,144(sp)
  80880c:	20800017 	ldw	r2,0(r4)
  808810:	2807d7fa 	srai	r3,r5,31
  808814:	21000104 	addi	r4,r4,4
  808818:	d9002215 	stw	r4,136(sp)
  80881c:	11400015 	stw	r5,0(r2)
  808820:	10c00115 	stw	r3,4(r2)
  808824:	003e8a06 	br	808250 <__alt_data_end+0xff808250>
  808828:	9cc03fcc 	andi	r19,r19,255
  80882c:	b811883a 	mov	r8,r23
  808830:	9803871e 	bne	r19,zero,809650 <___vfiprintf_internal_r+0x14d0>
  808834:	8880080c 	andi	r2,r17,32
  808838:	10009a26 	beq	r2,zero,808aa4 <___vfiprintf_internal_r+0x924>
  80883c:	d9002217 	ldw	r4,136(sp)
  808840:	d8001d85 	stb	zero,118(sp)
  808844:	20800204 	addi	r2,r4,8
  808848:	24c00017 	ldw	r19,0(r4)
  80884c:	25000117 	ldw	r20,4(r4)
  808850:	8002a416 	blt	r16,zero,8092e4 <___vfiprintf_internal_r+0x1164>
  808854:	013fdfc4 	movi	r4,-129
  808858:	9d06b03a 	or	r3,r19,r20
  80885c:	d8802215 	stw	r2,136(sp)
  808860:	8922703a 	and	r17,r17,r4
  808864:	18009b26 	beq	r3,zero,808ad4 <___vfiprintf_internal_r+0x954>
  808868:	002b883a 	mov	r21,zero
  80886c:	ddc01a04 	addi	r23,sp,104
  808870:	9806d0fa 	srli	r3,r19,3
  808874:	a008977a 	slli	r4,r20,29
  808878:	a028d0fa 	srli	r20,r20,3
  80887c:	9cc001cc 	andi	r19,r19,7
  808880:	98800c04 	addi	r2,r19,48
  808884:	bdffffc4 	addi	r23,r23,-1
  808888:	20e6b03a 	or	r19,r4,r3
  80888c:	b8800005 	stb	r2,0(r23)
  808890:	9d06b03a 	or	r3,r19,r20
  808894:	183ff61e 	bne	r3,zero,808870 <__alt_data_end+0xff808870>
  808898:	88c0004c 	andi	r3,r17,1
  80889c:	18021f1e 	bne	r3,zero,80911c <___vfiprintf_internal_r+0xf9c>
  8088a0:	d9401e17 	ldw	r5,120(sp)
  8088a4:	2de9c83a 	sub	r20,r5,r23
  8088a8:	003f3806 	br	80858c <__alt_data_end+0xff80858c>
  8088ac:	9cc03fcc 	andi	r19,r19,255
  8088b0:	b811883a 	mov	r8,r23
  8088b4:	98034f1e 	bne	r19,zero,8095f4 <___vfiprintf_internal_r+0x1474>
  8088b8:	00802074 	movhi	r2,129
  8088bc:	10836304 	addi	r2,r2,3468
  8088c0:	d8802615 	stw	r2,152(sp)
  8088c4:	8880080c 	andi	r2,r17,32
  8088c8:	1000ac26 	beq	r2,zero,808b7c <___vfiprintf_internal_r+0x9fc>
  8088cc:	d9002217 	ldw	r4,136(sp)
  8088d0:	24c00017 	ldw	r19,0(r4)
  8088d4:	25000117 	ldw	r20,4(r4)
  8088d8:	21000204 	addi	r4,r4,8
  8088dc:	d9002215 	stw	r4,136(sp)
  8088e0:	8880004c 	andi	r2,r17,1
  8088e4:	1001e726 	beq	r2,zero,809084 <___vfiprintf_internal_r+0xf04>
  8088e8:	9d04b03a 	or	r2,r19,r20
  8088ec:	10025c1e 	bne	r2,zero,809260 <___vfiprintf_internal_r+0x10e0>
  8088f0:	d8001d85 	stb	zero,118(sp)
  8088f4:	80024416 	blt	r16,zero,809208 <___vfiprintf_internal_r+0x1088>
  8088f8:	00bfdfc4 	movi	r2,-129
  8088fc:	88a2703a 	and	r17,r17,r2
  808900:	003f1d06 	br	808578 <__alt_data_end+0xff808578>
  808904:	d8c02217 	ldw	r3,136(sp)
  808908:	04c00044 	movi	r19,1
  80890c:	b811883a 	mov	r8,r23
  808910:	18800017 	ldw	r2,0(r3)
  808914:	18c00104 	addi	r3,r3,4
  808918:	d8001d85 	stb	zero,118(sp)
  80891c:	d8801005 	stb	r2,64(sp)
  808920:	d8c02215 	stw	r3,136(sp)
  808924:	9829883a 	mov	r20,r19
  808928:	ddc01004 	addi	r23,sp,64
  80892c:	0021883a 	mov	r16,zero
  808930:	003f1e06 	br	8085ac <__alt_data_end+0xff8085ac>
  808934:	9cc03fcc 	andi	r19,r19,255
  808938:	b811883a 	mov	r8,r23
  80893c:	9803331e 	bne	r19,zero,80960c <___vfiprintf_internal_r+0x148c>
  808940:	8880080c 	andi	r2,r17,32
  808944:	10004826 	beq	r2,zero,808a68 <___vfiprintf_internal_r+0x8e8>
  808948:	d9002217 	ldw	r4,136(sp)
  80894c:	20800117 	ldw	r2,4(r4)
  808950:	24c00017 	ldw	r19,0(r4)
  808954:	21000204 	addi	r4,r4,8
  808958:	d9002215 	stw	r4,136(sp)
  80895c:	1029883a 	mov	r20,r2
  808960:	10024c16 	blt	r2,zero,809294 <___vfiprintf_internal_r+0x1114>
  808964:	dd401d83 	ldbu	r21,118(sp)
  808968:	80007116 	blt	r16,zero,808b30 <___vfiprintf_internal_r+0x9b0>
  80896c:	00ffdfc4 	movi	r3,-129
  808970:	9d04b03a 	or	r2,r19,r20
  808974:	88e2703a 	and	r17,r17,r3
  808978:	1000d126 	beq	r2,zero,808cc0 <___vfiprintf_internal_r+0xb40>
  80897c:	a0023526 	beq	r20,zero,809254 <___vfiprintf_internal_r+0x10d4>
  808980:	ddc01a04 	addi	r23,sp,104
  808984:	4039883a 	mov	fp,r8
  808988:	9809883a 	mov	r4,r19
  80898c:	a00b883a 	mov	r5,r20
  808990:	01800284 	movi	r6,10
  808994:	000f883a 	mov	r7,zero
  808998:	080a6ac0 	call	80a6ac <__umoddi3>
  80899c:	10800c04 	addi	r2,r2,48
  8089a0:	bdffffc4 	addi	r23,r23,-1
  8089a4:	9809883a 	mov	r4,r19
  8089a8:	a00b883a 	mov	r5,r20
  8089ac:	b8800005 	stb	r2,0(r23)
  8089b0:	01800284 	movi	r6,10
  8089b4:	000f883a 	mov	r7,zero
  8089b8:	080a0b00 	call	80a0b0 <__udivdi3>
  8089bc:	1027883a 	mov	r19,r2
  8089c0:	10c4b03a 	or	r2,r2,r3
  8089c4:	1829883a 	mov	r20,r3
  8089c8:	103fef1e 	bne	r2,zero,808988 <__alt_data_end+0xff808988>
  8089cc:	d9001e17 	ldw	r4,120(sp)
  8089d0:	e011883a 	mov	r8,fp
  8089d4:	25e9c83a 	sub	r20,r4,r23
  8089d8:	003eec06 	br	80858c <__alt_data_end+0xff80858c>
  8089dc:	d8802307 	ldb	r2,140(sp)
  8089e0:	1002361e 	bne	r2,zero,8092bc <___vfiprintf_internal_r+0x113c>
  8089e4:	00c00804 	movi	r3,32
  8089e8:	d8c02305 	stb	r3,140(sp)
  8089ec:	04c00044 	movi	r19,1
  8089f0:	b0c00007 	ldb	r3,0(r22)
  8089f4:	003e3f06 	br	8082f4 <__alt_data_end+0xff8082f4>
  8089f8:	8c400054 	ori	r17,r17,1
  8089fc:	b0c00007 	ldb	r3,0(r22)
  808a00:	003e3c06 	br	8082f4 <__alt_data_end+0xff8082f4>
  808a04:	8c402014 	ori	r17,r17,128
  808a08:	b0c00007 	ldb	r3,0(r22)
  808a0c:	003e3906 	br	8082f4 <__alt_data_end+0xff8082f4>
  808a10:	dc002715 	stw	r16,156(sp)
  808a14:	d8002515 	stw	zero,148(sp)
  808a18:	1f3ff404 	addi	fp,r3,-48
  808a1c:	0009883a 	mov	r4,zero
  808a20:	b021883a 	mov	r16,r22
  808a24:	01400284 	movi	r5,10
  808a28:	080ae240 	call	80ae24 <__mulsi3>
  808a2c:	80c00007 	ldb	r3,0(r16)
  808a30:	e089883a 	add	r4,fp,r2
  808a34:	b5800044 	addi	r22,r22,1
  808a38:	1f3ff404 	addi	fp,r3,-48
  808a3c:	b021883a 	mov	r16,r22
  808a40:	af3ff82e 	bgeu	r21,fp,808a24 <__alt_data_end+0xff808a24>
  808a44:	d9002515 	stw	r4,148(sp)
  808a48:	dc002717 	ldw	r16,156(sp)
  808a4c:	003e2a06 	br	8082f8 <__alt_data_end+0xff8082f8>
  808a50:	9cc03fcc 	andi	r19,r19,255
  808a54:	b811883a 	mov	r8,r23
  808a58:	9802e91e 	bne	r19,zero,809600 <___vfiprintf_internal_r+0x1480>
  808a5c:	8c400414 	ori	r17,r17,16
  808a60:	8880080c 	andi	r2,r17,32
  808a64:	103fb81e 	bne	r2,zero,808948 <__alt_data_end+0xff808948>
  808a68:	8880040c 	andi	r2,r17,16
  808a6c:	10022e26 	beq	r2,zero,809328 <___vfiprintf_internal_r+0x11a8>
  808a70:	d9402217 	ldw	r5,136(sp)
  808a74:	2cc00017 	ldw	r19,0(r5)
  808a78:	29400104 	addi	r5,r5,4
  808a7c:	d9402215 	stw	r5,136(sp)
  808a80:	9829d7fa 	srai	r20,r19,31
  808a84:	a005883a 	mov	r2,r20
  808a88:	003fb506 	br	808960 <__alt_data_end+0xff808960>
  808a8c:	9cc03fcc 	andi	r19,r19,255
  808a90:	b811883a 	mov	r8,r23
  808a94:	9802fa1e 	bne	r19,zero,809680 <___vfiprintf_internal_r+0x1500>
  808a98:	8c400414 	ori	r17,r17,16
  808a9c:	8880080c 	andi	r2,r17,32
  808aa0:	103f661e 	bne	r2,zero,80883c <__alt_data_end+0xff80883c>
  808aa4:	8880040c 	andi	r2,r17,16
  808aa8:	10020626 	beq	r2,zero,8092c4 <___vfiprintf_internal_r+0x1144>
  808aac:	d9402217 	ldw	r5,136(sp)
  808ab0:	d8001d85 	stb	zero,118(sp)
  808ab4:	0029883a 	mov	r20,zero
  808ab8:	28800104 	addi	r2,r5,4
  808abc:	2cc00017 	ldw	r19,0(r5)
  808ac0:	80020816 	blt	r16,zero,8092e4 <___vfiprintf_internal_r+0x1164>
  808ac4:	00ffdfc4 	movi	r3,-129
  808ac8:	d8802215 	stw	r2,136(sp)
  808acc:	88e2703a 	and	r17,r17,r3
  808ad0:	983f651e 	bne	r19,zero,808868 <__alt_data_end+0xff808868>
  808ad4:	002b883a 	mov	r21,zero
  808ad8:	8002cf26 	beq	r16,zero,809618 <___vfiprintf_internal_r+0x1498>
  808adc:	0027883a 	mov	r19,zero
  808ae0:	0029883a 	mov	r20,zero
  808ae4:	003f6106 	br	80886c <__alt_data_end+0xff80886c>
  808ae8:	9cc03fcc 	andi	r19,r19,255
  808aec:	b811883a 	mov	r8,r23
  808af0:	9802e01e 	bne	r19,zero,809674 <___vfiprintf_internal_r+0x14f4>
  808af4:	8c400414 	ori	r17,r17,16
  808af8:	8880080c 	andi	r2,r17,32
  808afc:	1000641e 	bne	r2,zero,808c90 <___vfiprintf_internal_r+0xb10>
  808b00:	8880040c 	andi	r2,r17,16
  808b04:	1001c81e 	bne	r2,zero,809228 <___vfiprintf_internal_r+0x10a8>
  808b08:	8880100c 	andi	r2,r17,64
  808b0c:	d8001d85 	stb	zero,118(sp)
  808b10:	1002281e 	bne	r2,zero,8093b4 <___vfiprintf_internal_r+0x1234>
  808b14:	d9002217 	ldw	r4,136(sp)
  808b18:	0029883a 	mov	r20,zero
  808b1c:	20800104 	addi	r2,r4,4
  808b20:	24c00017 	ldw	r19,0(r4)
  808b24:	8001c60e 	bge	r16,zero,809240 <___vfiprintf_internal_r+0x10c0>
  808b28:	d8802215 	stw	r2,136(sp)
  808b2c:	002b883a 	mov	r21,zero
  808b30:	9d04b03a 	or	r2,r19,r20
  808b34:	103f911e 	bne	r2,zero,80897c <__alt_data_end+0xff80897c>
  808b38:	00800044 	movi	r2,1
  808b3c:	10803fcc 	andi	r2,r2,255
  808b40:	00c00044 	movi	r3,1
  808b44:	10c05f26 	beq	r2,r3,808cc4 <___vfiprintf_internal_r+0xb44>
  808b48:	00c00084 	movi	r3,2
  808b4c:	10ffe31e 	bne	r2,r3,808adc <__alt_data_end+0xff808adc>
  808b50:	0027883a 	mov	r19,zero
  808b54:	0029883a 	mov	r20,zero
  808b58:	00015106 	br	8090a0 <___vfiprintf_internal_r+0xf20>
  808b5c:	9cc03fcc 	andi	r19,r19,255
  808b60:	b811883a 	mov	r8,r23
  808b64:	9802c01e 	bne	r19,zero,809668 <___vfiprintf_internal_r+0x14e8>
  808b68:	01402074 	movhi	r5,129
  808b6c:	29435e04 	addi	r5,r5,3448
  808b70:	d9402615 	stw	r5,152(sp)
  808b74:	8880080c 	andi	r2,r17,32
  808b78:	103f541e 	bne	r2,zero,8088cc <__alt_data_end+0xff8088cc>
  808b7c:	8880040c 	andi	r2,r17,16
  808b80:	1001f226 	beq	r2,zero,80934c <___vfiprintf_internal_r+0x11cc>
  808b84:	d9402217 	ldw	r5,136(sp)
  808b88:	0029883a 	mov	r20,zero
  808b8c:	2cc00017 	ldw	r19,0(r5)
  808b90:	29400104 	addi	r5,r5,4
  808b94:	d9402215 	stw	r5,136(sp)
  808b98:	003f5106 	br	8088e0 <__alt_data_end+0xff8088e0>
  808b9c:	d8c02217 	ldw	r3,136(sp)
  808ba0:	b811883a 	mov	r8,r23
  808ba4:	d8001d85 	stb	zero,118(sp)
  808ba8:	1dc00017 	ldw	r23,0(r3)
  808bac:	1f000104 	addi	fp,r3,4
  808bb0:	b8025926 	beq	r23,zero,809518 <___vfiprintf_internal_r+0x1398>
  808bb4:	80023316 	blt	r16,zero,809484 <___vfiprintf_internal_r+0x1304>
  808bb8:	800d883a 	mov	r6,r16
  808bbc:	000b883a 	mov	r5,zero
  808bc0:	b809883a 	mov	r4,r23
  808bc4:	da002a15 	stw	r8,168(sp)
  808bc8:	08062c00 	call	8062c0 <memchr>
  808bcc:	da002a17 	ldw	r8,168(sp)
  808bd0:	10026826 	beq	r2,zero,809574 <___vfiprintf_internal_r+0x13f4>
  808bd4:	15e9c83a 	sub	r20,r2,r23
  808bd8:	dd401d83 	ldbu	r21,118(sp)
  808bdc:	df002215 	stw	fp,136(sp)
  808be0:	0021883a 	mov	r16,zero
  808be4:	003e6906 	br	80858c <__alt_data_end+0xff80858c>
  808be8:	9cc03fcc 	andi	r19,r19,255
  808bec:	b811883a 	mov	r8,r23
  808bf0:	983fc126 	beq	r19,zero,808af8 <__alt_data_end+0xff808af8>
  808bf4:	d8c02303 	ldbu	r3,140(sp)
  808bf8:	d8c01d85 	stb	r3,118(sp)
  808bfc:	003fbe06 	br	808af8 <__alt_data_end+0xff808af8>
  808c00:	d9002217 	ldw	r4,136(sp)
  808c04:	d9402217 	ldw	r5,136(sp)
  808c08:	21000017 	ldw	r4,0(r4)
  808c0c:	28800104 	addi	r2,r5,4
  808c10:	d9002515 	stw	r4,148(sp)
  808c14:	203e3d16 	blt	r4,zero,80850c <__alt_data_end+0xff80850c>
  808c18:	d8802215 	stw	r2,136(sp)
  808c1c:	b0c00007 	ldb	r3,0(r22)
  808c20:	003db406 	br	8082f4 <__alt_data_end+0xff8082f4>
  808c24:	00c00ac4 	movi	r3,43
  808c28:	d8c02305 	stb	r3,140(sp)
  808c2c:	04c00044 	movi	r19,1
  808c30:	b0c00007 	ldb	r3,0(r22)
  808c34:	003daf06 	br	8082f4 <__alt_data_end+0xff8082f4>
  808c38:	b0c00007 	ldb	r3,0(r22)
  808c3c:	01000a84 	movi	r4,42
  808c40:	b4000044 	addi	r16,r22,1
  808c44:	19025e26 	beq	r3,r4,8095c0 <___vfiprintf_internal_r+0x1440>
  808c48:	1f3ff404 	addi	fp,r3,-48
  808c4c:	0009883a 	mov	r4,zero
  808c50:	af025236 	bltu	r21,fp,80959c <___vfiprintf_internal_r+0x141c>
  808c54:	01400284 	movi	r5,10
  808c58:	080ae240 	call	80ae24 <__mulsi3>
  808c5c:	80c00007 	ldb	r3,0(r16)
  808c60:	1709883a 	add	r4,r2,fp
  808c64:	85800044 	addi	r22,r16,1
  808c68:	1f3ff404 	addi	fp,r3,-48
  808c6c:	b021883a 	mov	r16,r22
  808c70:	af3ff82e 	bgeu	r21,fp,808c54 <__alt_data_end+0xff808c54>
  808c74:	2021883a 	mov	r16,r4
  808c78:	203d9f0e 	bge	r4,zero,8082f8 <__alt_data_end+0xff8082f8>
  808c7c:	043fffc4 	movi	r16,-1
  808c80:	003d9d06 	br	8082f8 <__alt_data_end+0xff8082f8>
  808c84:	8c401014 	ori	r17,r17,64
  808c88:	b0c00007 	ldb	r3,0(r22)
  808c8c:	003d9906 	br	8082f4 <__alt_data_end+0xff8082f4>
  808c90:	d9002217 	ldw	r4,136(sp)
  808c94:	d8001d85 	stb	zero,118(sp)
  808c98:	20c00204 	addi	r3,r4,8
  808c9c:	24c00017 	ldw	r19,0(r4)
  808ca0:	25000117 	ldw	r20,4(r4)
  808ca4:	8001e716 	blt	r16,zero,809444 <___vfiprintf_internal_r+0x12c4>
  808ca8:	013fdfc4 	movi	r4,-129
  808cac:	9d04b03a 	or	r2,r19,r20
  808cb0:	d8c02215 	stw	r3,136(sp)
  808cb4:	8922703a 	and	r17,r17,r4
  808cb8:	002b883a 	mov	r21,zero
  808cbc:	103f2f1e 	bne	r2,zero,80897c <__alt_data_end+0xff80897c>
  808cc0:	803e2f26 	beq	r16,zero,808580 <__alt_data_end+0xff808580>
  808cc4:	0027883a 	mov	r19,zero
  808cc8:	9cc00c04 	addi	r19,r19,48
  808ccc:	dcc019c5 	stb	r19,103(sp)
  808cd0:	dd002817 	ldw	r20,160(sp)
  808cd4:	ddc019c4 	addi	r23,sp,103
  808cd8:	003e2c06 	br	80858c <__alt_data_end+0xff80858c>
  808cdc:	9cc03fcc 	andi	r19,r19,255
  808ce0:	b811883a 	mov	r8,r23
  808ce4:	9802571e 	bne	r19,zero,809644 <___vfiprintf_internal_r+0x14c4>
  808ce8:	18005726 	beq	r3,zero,808e48 <___vfiprintf_internal_r+0xcc8>
  808cec:	04c00044 	movi	r19,1
  808cf0:	d8c01005 	stb	r3,64(sp)
  808cf4:	d8001d85 	stb	zero,118(sp)
  808cf8:	9829883a 	mov	r20,r19
  808cfc:	ddc01004 	addi	r23,sp,64
  808d00:	003f0a06 	br	80892c <__alt_data_end+0xff80892c>
  808d04:	d9402017 	ldw	r5,128(sp)
  808d08:	d9002117 	ldw	r4,132(sp)
  808d0c:	d9801a04 	addi	r6,sp,104
  808d10:	da802a15 	stw	r10,168(sp)
  808d14:	080806c0 	call	80806c <__sprint_r.part.0>
  808d18:	da802a17 	ldw	r10,168(sp)
  808d1c:	1000501e 	bne	r2,zero,808e60 <___vfiprintf_internal_r+0xce0>
  808d20:	d9801b17 	ldw	r6,108(sp)
  808d24:	d8801c17 	ldw	r2,112(sp)
  808d28:	d811883a 	mov	r8,sp
  808d2c:	31000044 	addi	r4,r6,1
  808d30:	003e3606 	br	80860c <__alt_data_end+0xff80860c>
  808d34:	d9001b17 	ldw	r4,108(sp)
  808d38:	d8801c17 	ldw	r2,112(sp)
  808d3c:	21400044 	addi	r5,r4,1
  808d40:	d9801d87 	ldb	r6,118(sp)
  808d44:	303e5226 	beq	r6,zero,808690 <__alt_data_end+0xff808690>
  808d48:	01800044 	movi	r6,1
  808d4c:	d9001d84 	addi	r4,sp,118
  808d50:	1185883a 	add	r2,r2,r6
  808d54:	41000015 	stw	r4,0(r8)
  808d58:	41800115 	stw	r6,4(r8)
  808d5c:	d8801c15 	stw	r2,112(sp)
  808d60:	d9401b15 	stw	r5,108(sp)
  808d64:	010001c4 	movi	r4,7
  808d68:	2140b00e 	bge	r4,r5,80902c <___vfiprintf_internal_r+0xeac>
  808d6c:	1000f61e 	bne	r2,zero,809148 <___vfiprintf_internal_r+0xfc8>
  808d70:	3800b31e 	bne	r7,zero,809040 <___vfiprintf_internal_r+0xec0>
  808d74:	0009883a 	mov	r4,zero
  808d78:	300b883a 	mov	r5,r6
  808d7c:	d811883a 	mov	r8,sp
  808d80:	01802004 	movi	r6,128
  808d84:	19be5226 	beq	r3,r6,8086d0 <__alt_data_end+0xff8086d0>
  808d88:	8521c83a 	sub	r16,r16,r20
  808d8c:	043e790e 	bge	zero,r16,808774 <__alt_data_end+0xff808774>
  808d90:	05400404 	movi	r21,16
  808d94:	ac01b00e 	bge	r21,r16,809458 <___vfiprintf_internal_r+0x12d8>
  808d98:	01402074 	movhi	r5,129
  808d9c:	2943c404 	addi	r5,r5,3856
  808da0:	d9402315 	stw	r5,140(sp)
  808da4:	070001c4 	movi	fp,7
  808da8:	00000506 	br	808dc0 <___vfiprintf_internal_r+0xc40>
  808dac:	21400084 	addi	r5,r4,2
  808db0:	42000204 	addi	r8,r8,8
  808db4:	1809883a 	mov	r4,r3
  808db8:	843ffc04 	addi	r16,r16,-16
  808dbc:	ac000d0e 	bge	r21,r16,808df4 <___vfiprintf_internal_r+0xc74>
  808dc0:	10800404 	addi	r2,r2,16
  808dc4:	20c00044 	addi	r3,r4,1
  808dc8:	44800015 	stw	r18,0(r8)
  808dcc:	45400115 	stw	r21,4(r8)
  808dd0:	d8801c15 	stw	r2,112(sp)
  808dd4:	d8c01b15 	stw	r3,108(sp)
  808dd8:	e0fff40e 	bge	fp,r3,808dac <__alt_data_end+0xff808dac>
  808ddc:	1000101e 	bne	r2,zero,808e20 <___vfiprintf_internal_r+0xca0>
  808de0:	843ffc04 	addi	r16,r16,-16
  808de4:	01400044 	movi	r5,1
  808de8:	0009883a 	mov	r4,zero
  808dec:	d811883a 	mov	r8,sp
  808df0:	ac3ff316 	blt	r21,r16,808dc0 <__alt_data_end+0xff808dc0>
  808df4:	d8c02317 	ldw	r3,140(sp)
  808df8:	1405883a 	add	r2,r2,r16
  808dfc:	44000115 	stw	r16,4(r8)
  808e00:	40c00015 	stw	r3,0(r8)
  808e04:	d8801c15 	stw	r2,112(sp)
  808e08:	d9401b15 	stw	r5,108(sp)
  808e0c:	00c001c4 	movi	r3,7
  808e10:	19401916 	blt	r3,r5,808e78 <___vfiprintf_internal_r+0xcf8>
  808e14:	42000204 	addi	r8,r8,8
  808e18:	29400044 	addi	r5,r5,1
  808e1c:	003e5506 	br	808774 <__alt_data_end+0xff808774>
  808e20:	d9402017 	ldw	r5,128(sp)
  808e24:	d9002117 	ldw	r4,132(sp)
  808e28:	d9801a04 	addi	r6,sp,104
  808e2c:	080806c0 	call	80806c <__sprint_r.part.0>
  808e30:	10000b1e 	bne	r2,zero,808e60 <___vfiprintf_internal_r+0xce0>
  808e34:	d9001b17 	ldw	r4,108(sp)
  808e38:	d8801c17 	ldw	r2,112(sp)
  808e3c:	d811883a 	mov	r8,sp
  808e40:	21400044 	addi	r5,r4,1
  808e44:	003fdc06 	br	808db8 <__alt_data_end+0xff808db8>
  808e48:	d8801c17 	ldw	r2,112(sp)
  808e4c:	10000426 	beq	r2,zero,808e60 <___vfiprintf_internal_r+0xce0>
  808e50:	d9402017 	ldw	r5,128(sp)
  808e54:	d9002117 	ldw	r4,132(sp)
  808e58:	d9801a04 	addi	r6,sp,104
  808e5c:	080806c0 	call	80806c <__sprint_r.part.0>
  808e60:	d9402017 	ldw	r5,128(sp)
  808e64:	2880030b 	ldhu	r2,12(r5)
  808e68:	1080100c 	andi	r2,r2,64
  808e6c:	10014d1e 	bne	r2,zero,8093a4 <___vfiprintf_internal_r+0x1224>
  808e70:	d8802417 	ldw	r2,144(sp)
  808e74:	003d9706 	br	8084d4 <__alt_data_end+0xff8084d4>
  808e78:	1000d21e 	bne	r2,zero,8091c4 <___vfiprintf_internal_r+0x1044>
  808e7c:	00c00044 	movi	r3,1
  808e80:	a005883a 	mov	r2,r20
  808e84:	ddc00015 	stw	r23,0(sp)
  808e88:	dd000115 	stw	r20,4(sp)
  808e8c:	dd001c15 	stw	r20,112(sp)
  808e90:	d8c01b15 	stw	r3,108(sp)
  808e94:	d811883a 	mov	r8,sp
  808e98:	42000204 	addi	r8,r8,8
  808e9c:	8c40010c 	andi	r17,r17,4
  808ea0:	88004026 	beq	r17,zero,808fa4 <___vfiprintf_internal_r+0xe24>
  808ea4:	d9002517 	ldw	r4,148(sp)
  808ea8:	24e3c83a 	sub	r17,r4,r19
  808eac:	04403d0e 	bge	zero,r17,808fa4 <___vfiprintf_internal_r+0xe24>
  808eb0:	04000404 	movi	r16,16
  808eb4:	8441a90e 	bge	r16,r17,80955c <___vfiprintf_internal_r+0x13dc>
  808eb8:	00c02074 	movhi	r3,129
  808ebc:	18c3c804 	addi	r3,r3,3872
  808ec0:	d9001b17 	ldw	r4,108(sp)
  808ec4:	d8c02315 	stw	r3,140(sp)
  808ec8:	050001c4 	movi	r20,7
  808ecc:	dd402117 	ldw	r21,132(sp)
  808ed0:	ddc02017 	ldw	r23,128(sp)
  808ed4:	00000506 	br	808eec <___vfiprintf_internal_r+0xd6c>
  808ed8:	21400084 	addi	r5,r4,2
  808edc:	42000204 	addi	r8,r8,8
  808ee0:	1809883a 	mov	r4,r3
  808ee4:	8c7ffc04 	addi	r17,r17,-16
  808ee8:	84400f0e 	bge	r16,r17,808f28 <___vfiprintf_internal_r+0xda8>
  808eec:	01402074 	movhi	r5,129
  808ef0:	10800404 	addi	r2,r2,16
  808ef4:	20c00044 	addi	r3,r4,1
  808ef8:	2943c804 	addi	r5,r5,3872
  808efc:	41400015 	stw	r5,0(r8)
  808f00:	44000115 	stw	r16,4(r8)
  808f04:	d8801c15 	stw	r2,112(sp)
  808f08:	d8c01b15 	stw	r3,108(sp)
  808f0c:	a0fff20e 	bge	r20,r3,808ed8 <__alt_data_end+0xff808ed8>
  808f10:	1000141e 	bne	r2,zero,808f64 <___vfiprintf_internal_r+0xde4>
  808f14:	8c7ffc04 	addi	r17,r17,-16
  808f18:	01400044 	movi	r5,1
  808f1c:	0009883a 	mov	r4,zero
  808f20:	d811883a 	mov	r8,sp
  808f24:	847ff116 	blt	r16,r17,808eec <__alt_data_end+0xff808eec>
  808f28:	d8c02317 	ldw	r3,140(sp)
  808f2c:	1445883a 	add	r2,r2,r17
  808f30:	44400115 	stw	r17,4(r8)
  808f34:	40c00015 	stw	r3,0(r8)
  808f38:	d8801c15 	stw	r2,112(sp)
  808f3c:	d9401b15 	stw	r5,108(sp)
  808f40:	00c001c4 	movi	r3,7
  808f44:	1940170e 	bge	r3,r5,808fa4 <___vfiprintf_internal_r+0xe24>
  808f48:	1000101e 	bne	r2,zero,808f8c <___vfiprintf_internal_r+0xe0c>
  808f4c:	d8802517 	ldw	r2,148(sp)
  808f50:	14c11616 	blt	r2,r19,8093ac <___vfiprintf_internal_r+0x122c>
  808f54:	d9002417 	ldw	r4,144(sp)
  808f58:	2089883a 	add	r4,r4,r2
  808f5c:	d9002415 	stw	r4,144(sp)
  808f60:	003e1806 	br	8087c4 <__alt_data_end+0xff8087c4>
  808f64:	d9801a04 	addi	r6,sp,104
  808f68:	b80b883a 	mov	r5,r23
  808f6c:	a809883a 	mov	r4,r21
  808f70:	080806c0 	call	80806c <__sprint_r.part.0>
  808f74:	103fba1e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  808f78:	d9001b17 	ldw	r4,108(sp)
  808f7c:	d8801c17 	ldw	r2,112(sp)
  808f80:	d811883a 	mov	r8,sp
  808f84:	21400044 	addi	r5,r4,1
  808f88:	003fd606 	br	808ee4 <__alt_data_end+0xff808ee4>
  808f8c:	d9402017 	ldw	r5,128(sp)
  808f90:	d9002117 	ldw	r4,132(sp)
  808f94:	d9801a04 	addi	r6,sp,104
  808f98:	080806c0 	call	80806c <__sprint_r.part.0>
  808f9c:	103fb01e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  808fa0:	d8801c17 	ldw	r2,112(sp)
  808fa4:	d8c02517 	ldw	r3,148(sp)
  808fa8:	1cc0010e 	bge	r3,r19,808fb0 <___vfiprintf_internal_r+0xe30>
  808fac:	9807883a 	mov	r3,r19
  808fb0:	d9002417 	ldw	r4,144(sp)
  808fb4:	20c9883a 	add	r4,r4,r3
  808fb8:	d9002415 	stw	r4,144(sp)
  808fbc:	103e0126 	beq	r2,zero,8087c4 <__alt_data_end+0xff8087c4>
  808fc0:	d9402017 	ldw	r5,128(sp)
  808fc4:	d9002117 	ldw	r4,132(sp)
  808fc8:	d9801a04 	addi	r6,sp,104
  808fcc:	080806c0 	call	80806c <__sprint_r.part.0>
  808fd0:	103dfc26 	beq	r2,zero,8087c4 <__alt_data_end+0xff8087c4>
  808fd4:	003fa206 	br	808e60 <__alt_data_end+0xff808e60>
  808fd8:	d9402017 	ldw	r5,128(sp)
  808fdc:	d9002117 	ldw	r4,132(sp)
  808fe0:	d9801a04 	addi	r6,sp,104
  808fe4:	d9c02b15 	stw	r7,172(sp)
  808fe8:	080806c0 	call	80806c <__sprint_r.part.0>
  808fec:	d9c02b17 	ldw	r7,172(sp)
  808ff0:	103f9b1e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  808ff4:	d9001b17 	ldw	r4,108(sp)
  808ff8:	d8801c17 	ldw	r2,112(sp)
  808ffc:	d811883a 	mov	r8,sp
  809000:	21800044 	addi	r6,r4,1
  809004:	003dbf06 	br	808704 <__alt_data_end+0xff808704>
  809008:	1000d81e 	bne	r2,zero,80936c <___vfiprintf_internal_r+0x11ec>
  80900c:	d9001d87 	ldb	r4,118(sp)
  809010:	20000a26 	beq	r4,zero,80903c <___vfiprintf_internal_r+0xebc>
  809014:	00800044 	movi	r2,1
  809018:	d9001d84 	addi	r4,sp,118
  80901c:	100b883a 	mov	r5,r2
  809020:	d9000015 	stw	r4,0(sp)
  809024:	d8800115 	stw	r2,4(sp)
  809028:	d811883a 	mov	r8,sp
  80902c:	2809883a 	mov	r4,r5
  809030:	42000204 	addi	r8,r8,8
  809034:	29400044 	addi	r5,r5,1
  809038:	003d9506 	br	808690 <__alt_data_end+0xff808690>
  80903c:	3800fd26 	beq	r7,zero,809434 <___vfiprintf_internal_r+0x12b4>
  809040:	00800084 	movi	r2,2
  809044:	d9001d04 	addi	r4,sp,116
  809048:	d9000015 	stw	r4,0(sp)
  80904c:	d8800115 	stw	r2,4(sp)
  809050:	01400044 	movi	r5,1
  809054:	d811883a 	mov	r8,sp
  809058:	2809883a 	mov	r4,r5
  80905c:	42000204 	addi	r8,r8,8
  809060:	29400044 	addi	r5,r5,1
  809064:	003f4606 	br	808d80 <__alt_data_end+0xff808d80>
  809068:	d8802517 	ldw	r2,148(sp)
  80906c:	14c0010e 	bge	r2,r19,809074 <___vfiprintf_internal_r+0xef4>
  809070:	9805883a 	mov	r2,r19
  809074:	d9402417 	ldw	r5,144(sp)
  809078:	288b883a 	add	r5,r5,r2
  80907c:	d9402415 	stw	r5,144(sp)
  809080:	003dd006 	br	8087c4 <__alt_data_end+0xff8087c4>
  809084:	d8001d85 	stb	zero,118(sp)
  809088:	80005d16 	blt	r16,zero,809200 <___vfiprintf_internal_r+0x1080>
  80908c:	00ffdfc4 	movi	r3,-129
  809090:	9d04b03a 	or	r2,r19,r20
  809094:	88e2703a 	and	r17,r17,r3
  809098:	103d3726 	beq	r2,zero,808578 <__alt_data_end+0xff808578>
  80909c:	002b883a 	mov	r21,zero
  8090a0:	d9002617 	ldw	r4,152(sp)
  8090a4:	ddc01a04 	addi	r23,sp,104
  8090a8:	988003cc 	andi	r2,r19,15
  8090ac:	a006973a 	slli	r3,r20,28
  8090b0:	2085883a 	add	r2,r4,r2
  8090b4:	9826d13a 	srli	r19,r19,4
  8090b8:	10800003 	ldbu	r2,0(r2)
  8090bc:	a028d13a 	srli	r20,r20,4
  8090c0:	bdffffc4 	addi	r23,r23,-1
  8090c4:	1ce6b03a 	or	r19,r3,r19
  8090c8:	b8800005 	stb	r2,0(r23)
  8090cc:	9d04b03a 	or	r2,r19,r20
  8090d0:	103ff51e 	bne	r2,zero,8090a8 <__alt_data_end+0xff8090a8>
  8090d4:	d8801e17 	ldw	r2,120(sp)
  8090d8:	15e9c83a 	sub	r20,r2,r23
  8090dc:	003d2b06 	br	80858c <__alt_data_end+0xff80858c>
  8090e0:	d9402017 	ldw	r5,128(sp)
  8090e4:	d9002117 	ldw	r4,132(sp)
  8090e8:	d9801a04 	addi	r6,sp,104
  8090ec:	080806c0 	call	80806c <__sprint_r.part.0>
  8090f0:	103f5b1e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  8090f4:	d8801c17 	ldw	r2,112(sp)
  8090f8:	d811883a 	mov	r8,sp
  8090fc:	003f6706 	br	808e9c <__alt_data_end+0xff808e9c>
  809100:	d9402017 	ldw	r5,128(sp)
  809104:	d9002117 	ldw	r4,132(sp)
  809108:	d9801a04 	addi	r6,sp,104
  80910c:	080806c0 	call	80806c <__sprint_r.part.0>
  809110:	103f531e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  809114:	d811883a 	mov	r8,sp
  809118:	003cd906 	br	808480 <__alt_data_end+0xff808480>
  80911c:	10803fcc 	andi	r2,r2,255
  809120:	1080201c 	xori	r2,r2,128
  809124:	10bfe004 	addi	r2,r2,-128
  809128:	00c00c04 	movi	r3,48
  80912c:	10ffe926 	beq	r2,r3,8090d4 <__alt_data_end+0xff8090d4>
  809130:	b8ffffc5 	stb	r3,-1(r23)
  809134:	d8c01e17 	ldw	r3,120(sp)
  809138:	b8bfffc4 	addi	r2,r23,-1
  80913c:	102f883a 	mov	r23,r2
  809140:	18a9c83a 	sub	r20,r3,r2
  809144:	003d1106 	br	80858c <__alt_data_end+0xff80858c>
  809148:	d9402017 	ldw	r5,128(sp)
  80914c:	d9002117 	ldw	r4,132(sp)
  809150:	d9801a04 	addi	r6,sp,104
  809154:	d8c02a15 	stw	r3,168(sp)
  809158:	d9c02b15 	stw	r7,172(sp)
  80915c:	080806c0 	call	80806c <__sprint_r.part.0>
  809160:	d8c02a17 	ldw	r3,168(sp)
  809164:	d9c02b17 	ldw	r7,172(sp)
  809168:	103f3d1e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  80916c:	d9001b17 	ldw	r4,108(sp)
  809170:	d8801c17 	ldw	r2,112(sp)
  809174:	d811883a 	mov	r8,sp
  809178:	21400044 	addi	r5,r4,1
  80917c:	003d4406 	br	808690 <__alt_data_end+0xff808690>
  809180:	d9402017 	ldw	r5,128(sp)
  809184:	d9002117 	ldw	r4,132(sp)
  809188:	d9801a04 	addi	r6,sp,104
  80918c:	d8c02a15 	stw	r3,168(sp)
  809190:	080806c0 	call	80806c <__sprint_r.part.0>
  809194:	d8c02a17 	ldw	r3,168(sp)
  809198:	103f311e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  80919c:	d9001b17 	ldw	r4,108(sp)
  8091a0:	d8801c17 	ldw	r2,112(sp)
  8091a4:	d811883a 	mov	r8,sp
  8091a8:	21400044 	addi	r5,r4,1
  8091ac:	003ef406 	br	808d80 <__alt_data_end+0xff808d80>
  8091b0:	1000bd1e 	bne	r2,zero,8094a8 <___vfiprintf_internal_r+0x1328>
  8091b4:	01400044 	movi	r5,1
  8091b8:	0009883a 	mov	r4,zero
  8091bc:	d811883a 	mov	r8,sp
  8091c0:	003ef106 	br	808d88 <__alt_data_end+0xff808d88>
  8091c4:	d9402017 	ldw	r5,128(sp)
  8091c8:	d9002117 	ldw	r4,132(sp)
  8091cc:	d9801a04 	addi	r6,sp,104
  8091d0:	080806c0 	call	80806c <__sprint_r.part.0>
  8091d4:	103f221e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  8091d8:	d9401b17 	ldw	r5,108(sp)
  8091dc:	d8801c17 	ldw	r2,112(sp)
  8091e0:	d811883a 	mov	r8,sp
  8091e4:	29400044 	addi	r5,r5,1
  8091e8:	003d6206 	br	808774 <__alt_data_end+0xff808774>
  8091ec:	01402074 	movhi	r5,129
  8091f0:	29436304 	addi	r5,r5,3468
  8091f4:	d9402615 	stw	r5,152(sp)
  8091f8:	d8c02215 	stw	r3,136(sp)
  8091fc:	1023883a 	mov	r17,r2
  809200:	9d04b03a 	or	r2,r19,r20
  809204:	103fa51e 	bne	r2,zero,80909c <__alt_data_end+0xff80909c>
  809208:	002b883a 	mov	r21,zero
  80920c:	00800084 	movi	r2,2
  809210:	003e4a06 	br	808b3c <__alt_data_end+0xff808b3c>
  809214:	01402074 	movhi	r5,129
  809218:	29436304 	addi	r5,r5,3468
  80921c:	002b883a 	mov	r21,zero
  809220:	d9402615 	stw	r5,152(sp)
  809224:	003f9e06 	br	8090a0 <__alt_data_end+0xff8090a0>
  809228:	d9402217 	ldw	r5,136(sp)
  80922c:	d8001d85 	stb	zero,118(sp)
  809230:	0029883a 	mov	r20,zero
  809234:	28800104 	addi	r2,r5,4
  809238:	2cc00017 	ldw	r19,0(r5)
  80923c:	803e3a16 	blt	r16,zero,808b28 <__alt_data_end+0xff808b28>
  809240:	00ffdfc4 	movi	r3,-129
  809244:	d8802215 	stw	r2,136(sp)
  809248:	88e2703a 	and	r17,r17,r3
  80924c:	002b883a 	mov	r21,zero
  809250:	983e9b26 	beq	r19,zero,808cc0 <__alt_data_end+0xff808cc0>
  809254:	00800244 	movi	r2,9
  809258:	14fdc936 	bltu	r2,r19,808980 <__alt_data_end+0xff808980>
  80925c:	003e9a06 	br	808cc8 <__alt_data_end+0xff808cc8>
  809260:	00800c04 	movi	r2,48
  809264:	d8c01d45 	stb	r3,117(sp)
  809268:	d8801d05 	stb	r2,116(sp)
  80926c:	d8001d85 	stb	zero,118(sp)
  809270:	88c00094 	ori	r3,r17,2
  809274:	80009c16 	blt	r16,zero,8094e8 <___vfiprintf_internal_r+0x1368>
  809278:	00bfdfc4 	movi	r2,-129
  80927c:	88a2703a 	and	r17,r17,r2
  809280:	8c400094 	ori	r17,r17,2
  809284:	002b883a 	mov	r21,zero
  809288:	003f8506 	br	8090a0 <__alt_data_end+0xff8090a0>
  80928c:	b029883a 	mov	r20,r22
  809290:	003c0b06 	br	8082c0 <__alt_data_end+0xff8082c0>
  809294:	04e7c83a 	sub	r19,zero,r19
  809298:	05400b44 	movi	r21,45
  80929c:	9804c03a 	cmpne	r2,r19,zero
  8092a0:	0529c83a 	sub	r20,zero,r20
  8092a4:	dd401d85 	stb	r21,118(sp)
  8092a8:	a0a9c83a 	sub	r20,r20,r2
  8092ac:	80009716 	blt	r16,zero,80950c <___vfiprintf_internal_r+0x138c>
  8092b0:	00bfdfc4 	movi	r2,-129
  8092b4:	88a2703a 	and	r17,r17,r2
  8092b8:	003db006 	br	80897c <__alt_data_end+0xff80897c>
  8092bc:	b0c00007 	ldb	r3,0(r22)
  8092c0:	003c0c06 	br	8082f4 <__alt_data_end+0xff8082f4>
  8092c4:	8880100c 	andi	r2,r17,64
  8092c8:	d8001d85 	stb	zero,118(sp)
  8092cc:	1000461e 	bne	r2,zero,8093e8 <___vfiprintf_internal_r+0x1268>
  8092d0:	d9002217 	ldw	r4,136(sp)
  8092d4:	0029883a 	mov	r20,zero
  8092d8:	20800104 	addi	r2,r4,4
  8092dc:	24c00017 	ldw	r19,0(r4)
  8092e0:	803df80e 	bge	r16,zero,808ac4 <__alt_data_end+0xff808ac4>
  8092e4:	9d06b03a 	or	r3,r19,r20
  8092e8:	d8802215 	stw	r2,136(sp)
  8092ec:	183d5e1e 	bne	r3,zero,808868 <__alt_data_end+0xff808868>
  8092f0:	002b883a 	mov	r21,zero
  8092f4:	0005883a 	mov	r2,zero
  8092f8:	003e1006 	br	808b3c <__alt_data_end+0xff808b3c>
  8092fc:	8880040c 	andi	r2,r17,16
  809300:	1000321e 	bne	r2,zero,8093cc <___vfiprintf_internal_r+0x124c>
  809304:	8c40100c 	andi	r17,r17,64
  809308:	88008d26 	beq	r17,zero,809540 <___vfiprintf_internal_r+0x13c0>
  80930c:	d9402217 	ldw	r5,136(sp)
  809310:	d8c02417 	ldw	r3,144(sp)
  809314:	28800017 	ldw	r2,0(r5)
  809318:	29400104 	addi	r5,r5,4
  80931c:	d9402215 	stw	r5,136(sp)
  809320:	10c0000d 	sth	r3,0(r2)
  809324:	003bca06 	br	808250 <__alt_data_end+0xff808250>
  809328:	8880100c 	andi	r2,r17,64
  80932c:	10003a26 	beq	r2,zero,809418 <___vfiprintf_internal_r+0x1298>
  809330:	d8802217 	ldw	r2,136(sp)
  809334:	14c0000f 	ldh	r19,0(r2)
  809338:	10800104 	addi	r2,r2,4
  80933c:	d8802215 	stw	r2,136(sp)
  809340:	9829d7fa 	srai	r20,r19,31
  809344:	a005883a 	mov	r2,r20
  809348:	003d8506 	br	808960 <__alt_data_end+0xff808960>
  80934c:	8880100c 	andi	r2,r17,64
  809350:	10002b26 	beq	r2,zero,809400 <___vfiprintf_internal_r+0x1280>
  809354:	d8802217 	ldw	r2,136(sp)
  809358:	0029883a 	mov	r20,zero
  80935c:	14c0000b 	ldhu	r19,0(r2)
  809360:	10800104 	addi	r2,r2,4
  809364:	d8802215 	stw	r2,136(sp)
  809368:	003d5d06 	br	8088e0 <__alt_data_end+0xff8088e0>
  80936c:	d9402017 	ldw	r5,128(sp)
  809370:	d9002117 	ldw	r4,132(sp)
  809374:	d9801a04 	addi	r6,sp,104
  809378:	d8c02a15 	stw	r3,168(sp)
  80937c:	d9c02b15 	stw	r7,172(sp)
  809380:	080806c0 	call	80806c <__sprint_r.part.0>
  809384:	d8c02a17 	ldw	r3,168(sp)
  809388:	d9c02b17 	ldw	r7,172(sp)
  80938c:	103eb41e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  809390:	d9001b17 	ldw	r4,108(sp)
  809394:	d8801c17 	ldw	r2,112(sp)
  809398:	d811883a 	mov	r8,sp
  80939c:	21400044 	addi	r5,r4,1
  8093a0:	003e6706 	br	808d40 <__alt_data_end+0xff808d40>
  8093a4:	00bfffc4 	movi	r2,-1
  8093a8:	003c4a06 	br	8084d4 <__alt_data_end+0xff8084d4>
  8093ac:	9805883a 	mov	r2,r19
  8093b0:	003ee806 	br	808f54 <__alt_data_end+0xff808f54>
  8093b4:	d8c02217 	ldw	r3,136(sp)
  8093b8:	0029883a 	mov	r20,zero
  8093bc:	18800104 	addi	r2,r3,4
  8093c0:	1cc0000b 	ldhu	r19,0(r3)
  8093c4:	803f9e0e 	bge	r16,zero,809240 <__alt_data_end+0xff809240>
  8093c8:	003dd706 	br	808b28 <__alt_data_end+0xff808b28>
  8093cc:	d8c02217 	ldw	r3,136(sp)
  8093d0:	d9002417 	ldw	r4,144(sp)
  8093d4:	18800017 	ldw	r2,0(r3)
  8093d8:	18c00104 	addi	r3,r3,4
  8093dc:	d8c02215 	stw	r3,136(sp)
  8093e0:	11000015 	stw	r4,0(r2)
  8093e4:	003b9a06 	br	808250 <__alt_data_end+0xff808250>
  8093e8:	d8c02217 	ldw	r3,136(sp)
  8093ec:	0029883a 	mov	r20,zero
  8093f0:	18800104 	addi	r2,r3,4
  8093f4:	1cc0000b 	ldhu	r19,0(r3)
  8093f8:	803db20e 	bge	r16,zero,808ac4 <__alt_data_end+0xff808ac4>
  8093fc:	003fb906 	br	8092e4 <__alt_data_end+0xff8092e4>
  809400:	d9002217 	ldw	r4,136(sp)
  809404:	0029883a 	mov	r20,zero
  809408:	24c00017 	ldw	r19,0(r4)
  80940c:	21000104 	addi	r4,r4,4
  809410:	d9002215 	stw	r4,136(sp)
  809414:	003d3206 	br	8088e0 <__alt_data_end+0xff8088e0>
  809418:	d8c02217 	ldw	r3,136(sp)
  80941c:	1cc00017 	ldw	r19,0(r3)
  809420:	18c00104 	addi	r3,r3,4
  809424:	d8c02215 	stw	r3,136(sp)
  809428:	9829d7fa 	srai	r20,r19,31
  80942c:	a005883a 	mov	r2,r20
  809430:	003d4b06 	br	808960 <__alt_data_end+0xff808960>
  809434:	0009883a 	mov	r4,zero
  809438:	01400044 	movi	r5,1
  80943c:	d811883a 	mov	r8,sp
  809440:	003e4f06 	br	808d80 <__alt_data_end+0xff808d80>
  809444:	d8c02215 	stw	r3,136(sp)
  809448:	002b883a 	mov	r21,zero
  80944c:	003db806 	br	808b30 <__alt_data_end+0xff808b30>
  809450:	d811883a 	mov	r8,sp
  809454:	003e9606 	br	808eb0 <__alt_data_end+0xff808eb0>
  809458:	01002074 	movhi	r4,129
  80945c:	2103c404 	addi	r4,r4,3856
  809460:	d9002315 	stw	r4,140(sp)
  809464:	003e6306 	br	808df4 <__alt_data_end+0xff808df4>
  809468:	b0c00043 	ldbu	r3,1(r22)
  80946c:	8c400814 	ori	r17,r17,32
  809470:	b5800044 	addi	r22,r22,1
  809474:	18c03fcc 	andi	r3,r3,255
  809478:	18c0201c 	xori	r3,r3,128
  80947c:	18ffe004 	addi	r3,r3,-128
  809480:	003b9c06 	br	8082f4 <__alt_data_end+0xff8082f4>
  809484:	b809883a 	mov	r4,r23
  809488:	da002a15 	stw	r8,168(sp)
  80948c:	08008f00 	call	8008f0 <strlen>
  809490:	1029883a 	mov	r20,r2
  809494:	dd401d83 	ldbu	r21,118(sp)
  809498:	df002215 	stw	fp,136(sp)
  80949c:	0021883a 	mov	r16,zero
  8094a0:	da002a17 	ldw	r8,168(sp)
  8094a4:	003c3906 	br	80858c <__alt_data_end+0xff80858c>
  8094a8:	d9402017 	ldw	r5,128(sp)
  8094ac:	d9002117 	ldw	r4,132(sp)
  8094b0:	d9801a04 	addi	r6,sp,104
  8094b4:	080806c0 	call	80806c <__sprint_r.part.0>
  8094b8:	103e691e 	bne	r2,zero,808e60 <__alt_data_end+0xff808e60>
  8094bc:	d9001b17 	ldw	r4,108(sp)
  8094c0:	d8801c17 	ldw	r2,112(sp)
  8094c4:	d811883a 	mov	r8,sp
  8094c8:	21400044 	addi	r5,r4,1
  8094cc:	003e2e06 	br	808d88 <__alt_data_end+0xff808d88>
  8094d0:	01002074 	movhi	r4,129
  8094d4:	2103c804 	addi	r4,r4,3872
  8094d8:	d9002315 	stw	r4,140(sp)
  8094dc:	d9001b17 	ldw	r4,108(sp)
  8094e0:	21000044 	addi	r4,r4,1
  8094e4:	003c5e06 	br	808660 <__alt_data_end+0xff808660>
  8094e8:	002b883a 	mov	r21,zero
  8094ec:	00800084 	movi	r2,2
  8094f0:	10803fcc 	andi	r2,r2,255
  8094f4:	01000044 	movi	r4,1
  8094f8:	11002b26 	beq	r2,r4,8095a8 <___vfiprintf_internal_r+0x1428>
  8094fc:	01000084 	movi	r4,2
  809500:	11002b1e 	bne	r2,r4,8095b0 <___vfiprintf_internal_r+0x1430>
  809504:	1823883a 	mov	r17,r3
  809508:	003ee506 	br	8090a0 <__alt_data_end+0xff8090a0>
  80950c:	8807883a 	mov	r3,r17
  809510:	00800044 	movi	r2,1
  809514:	003ff606 	br	8094f0 <__alt_data_end+0xff8094f0>
  809518:	00800184 	movi	r2,6
  80951c:	1400012e 	bgeu	r2,r16,809524 <___vfiprintf_internal_r+0x13a4>
  809520:	1021883a 	mov	r16,r2
  809524:	8029883a 	mov	r20,r16
  809528:	8027883a 	mov	r19,r16
  80952c:	80002216 	blt	r16,zero,8095b8 <___vfiprintf_internal_r+0x1438>
  809530:	05c02074 	movhi	r23,129
  809534:	df002215 	stw	fp,136(sp)
  809538:	bdc36804 	addi	r23,r23,3488
  80953c:	003cfb06 	br	80892c <__alt_data_end+0xff80892c>
  809540:	d9002217 	ldw	r4,136(sp)
  809544:	d9402417 	ldw	r5,144(sp)
  809548:	20800017 	ldw	r2,0(r4)
  80954c:	21000104 	addi	r4,r4,4
  809550:	d9002215 	stw	r4,136(sp)
  809554:	11400015 	stw	r5,0(r2)
  809558:	003b3d06 	br	808250 <__alt_data_end+0xff808250>
  80955c:	01402074 	movhi	r5,129
  809560:	2943c804 	addi	r5,r5,3872
  809564:	d9402315 	stw	r5,140(sp)
  809568:	d9401b17 	ldw	r5,108(sp)
  80956c:	29400044 	addi	r5,r5,1
  809570:	003e6d06 	br	808f28 <__alt_data_end+0xff808f28>
  809574:	8029883a 	mov	r20,r16
  809578:	dd401d83 	ldbu	r21,118(sp)
  80957c:	df002215 	stw	fp,136(sp)
  809580:	0021883a 	mov	r16,zero
  809584:	003c0106 	br	80858c <__alt_data_end+0xff80858c>
  809588:	00c02074 	movhi	r3,129
  80958c:	18c3c404 	addi	r3,r3,3856
  809590:	d8c02315 	stw	r3,140(sp)
  809594:	280d883a 	mov	r6,r5
  809598:	003c6906 	br	808740 <__alt_data_end+0xff808740>
  80959c:	802d883a 	mov	r22,r16
  8095a0:	0021883a 	mov	r16,zero
  8095a4:	003b5406 	br	8082f8 <__alt_data_end+0xff8082f8>
  8095a8:	1823883a 	mov	r17,r3
  8095ac:	003cf306 	br	80897c <__alt_data_end+0xff80897c>
  8095b0:	1823883a 	mov	r17,r3
  8095b4:	003cad06 	br	80886c <__alt_data_end+0xff80886c>
  8095b8:	0027883a 	mov	r19,zero
  8095bc:	003fdc06 	br	809530 <__alt_data_end+0xff809530>
  8095c0:	d9402217 	ldw	r5,136(sp)
  8095c4:	8005883a 	mov	r2,r16
  8095c8:	b0c00043 	ldbu	r3,1(r22)
  8095cc:	2c000017 	ldw	r16,0(r5)
  8095d0:	29000104 	addi	r4,r5,4
  8095d4:	d9002215 	stw	r4,136(sp)
  8095d8:	102d883a 	mov	r22,r2
  8095dc:	803fa50e 	bge	r16,zero,809474 <__alt_data_end+0xff809474>
  8095e0:	18c03fcc 	andi	r3,r3,255
  8095e4:	18c0201c 	xori	r3,r3,128
  8095e8:	043fffc4 	movi	r16,-1
  8095ec:	18ffe004 	addi	r3,r3,-128
  8095f0:	003b4006 	br	8082f4 <__alt_data_end+0xff8082f4>
  8095f4:	d9402303 	ldbu	r5,140(sp)
  8095f8:	d9401d85 	stb	r5,118(sp)
  8095fc:	003cae06 	br	8088b8 <__alt_data_end+0xff8088b8>
  809600:	d8c02303 	ldbu	r3,140(sp)
  809604:	d8c01d85 	stb	r3,118(sp)
  809608:	003d1406 	br	808a5c <__alt_data_end+0xff808a5c>
  80960c:	d8c02303 	ldbu	r3,140(sp)
  809610:	d8c01d85 	stb	r3,118(sp)
  809614:	003cca06 	br	808940 <__alt_data_end+0xff808940>
  809618:	8880004c 	andi	r2,r17,1
  80961c:	002b883a 	mov	r21,zero
  809620:	10000526 	beq	r2,zero,809638 <___vfiprintf_internal_r+0x14b8>
  809624:	00800c04 	movi	r2,48
  809628:	d88019c5 	stb	r2,103(sp)
  80962c:	dd002817 	ldw	r20,160(sp)
  809630:	ddc019c4 	addi	r23,sp,103
  809634:	003bd506 	br	80858c <__alt_data_end+0xff80858c>
  809638:	0029883a 	mov	r20,zero
  80963c:	ddc01a04 	addi	r23,sp,104
  809640:	003bd206 	br	80858c <__alt_data_end+0xff80858c>
  809644:	d9002303 	ldbu	r4,140(sp)
  809648:	d9001d85 	stb	r4,118(sp)
  80964c:	003da606 	br	808ce8 <__alt_data_end+0xff808ce8>
  809650:	d8c02303 	ldbu	r3,140(sp)
  809654:	d8c01d85 	stb	r3,118(sp)
  809658:	003c7606 	br	808834 <__alt_data_end+0xff808834>
  80965c:	d8c02303 	ldbu	r3,140(sp)
  809660:	d8c01d85 	stb	r3,118(sp)
  809664:	003c6506 	br	8087fc <__alt_data_end+0xff8087fc>
  809668:	d9002303 	ldbu	r4,140(sp)
  80966c:	d9001d85 	stb	r4,118(sp)
  809670:	003d3d06 	br	808b68 <__alt_data_end+0xff808b68>
  809674:	d8c02303 	ldbu	r3,140(sp)
  809678:	d8c01d85 	stb	r3,118(sp)
  80967c:	003d1d06 	br	808af4 <__alt_data_end+0xff808af4>
  809680:	d8c02303 	ldbu	r3,140(sp)
  809684:	d8c01d85 	stb	r3,118(sp)
  809688:	003d0306 	br	808a98 <__alt_data_end+0xff808a98>

0080968c <__vfiprintf_internal>:
  80968c:	00802074 	movhi	r2,129
  809690:	108abd04 	addi	r2,r2,10996
  809694:	300f883a 	mov	r7,r6
  809698:	280d883a 	mov	r6,r5
  80969c:	200b883a 	mov	r5,r4
  8096a0:	11000017 	ldw	r4,0(r2)
  8096a4:	08081801 	jmpi	808180 <___vfiprintf_internal_r>

008096a8 <__sbprintf>:
  8096a8:	2880030b 	ldhu	r2,12(r5)
  8096ac:	2ac01917 	ldw	r11,100(r5)
  8096b0:	2a80038b 	ldhu	r10,14(r5)
  8096b4:	2a400717 	ldw	r9,28(r5)
  8096b8:	2a000917 	ldw	r8,36(r5)
  8096bc:	defee204 	addi	sp,sp,-1144
  8096c0:	00c10004 	movi	r3,1024
  8096c4:	dc011a15 	stw	r16,1128(sp)
  8096c8:	10bfff4c 	andi	r2,r2,65533
  8096cc:	2821883a 	mov	r16,r5
  8096d0:	d8cb883a 	add	r5,sp,r3
  8096d4:	dc811c15 	stw	r18,1136(sp)
  8096d8:	dc411b15 	stw	r17,1132(sp)
  8096dc:	dfc11d15 	stw	ra,1140(sp)
  8096e0:	2025883a 	mov	r18,r4
  8096e4:	d881030d 	sth	r2,1036(sp)
  8096e8:	dac11915 	stw	r11,1124(sp)
  8096ec:	da81038d 	sth	r10,1038(sp)
  8096f0:	da410715 	stw	r9,1052(sp)
  8096f4:	da010915 	stw	r8,1060(sp)
  8096f8:	dec10015 	stw	sp,1024(sp)
  8096fc:	dec10415 	stw	sp,1040(sp)
  809700:	d8c10215 	stw	r3,1032(sp)
  809704:	d8c10515 	stw	r3,1044(sp)
  809708:	d8010615 	stw	zero,1048(sp)
  80970c:	08081800 	call	808180 <___vfiprintf_internal_r>
  809710:	1023883a 	mov	r17,r2
  809714:	10000416 	blt	r2,zero,809728 <__sbprintf+0x80>
  809718:	d9410004 	addi	r5,sp,1024
  80971c:	9009883a 	mov	r4,r18
  809720:	080495c0 	call	80495c <_fflush_r>
  809724:	10000d1e 	bne	r2,zero,80975c <__sbprintf+0xb4>
  809728:	d881030b 	ldhu	r2,1036(sp)
  80972c:	1080100c 	andi	r2,r2,64
  809730:	10000326 	beq	r2,zero,809740 <__sbprintf+0x98>
  809734:	8080030b 	ldhu	r2,12(r16)
  809738:	10801014 	ori	r2,r2,64
  80973c:	8080030d 	sth	r2,12(r16)
  809740:	8805883a 	mov	r2,r17
  809744:	dfc11d17 	ldw	ra,1140(sp)
  809748:	dc811c17 	ldw	r18,1136(sp)
  80974c:	dc411b17 	ldw	r17,1132(sp)
  809750:	dc011a17 	ldw	r16,1128(sp)
  809754:	dec11e04 	addi	sp,sp,1144
  809758:	f800283a 	ret
  80975c:	047fffc4 	movi	r17,-1
  809760:	003ff106 	br	809728 <__alt_data_end+0xff809728>

00809764 <_write_r>:
  809764:	defffd04 	addi	sp,sp,-12
  809768:	2805883a 	mov	r2,r5
  80976c:	dc000015 	stw	r16,0(sp)
  809770:	04002074 	movhi	r16,129
  809774:	dc400115 	stw	r17,4(sp)
  809778:	300b883a 	mov	r5,r6
  80977c:	8411cc04 	addi	r16,r16,18224
  809780:	2023883a 	mov	r17,r4
  809784:	380d883a 	mov	r6,r7
  809788:	1009883a 	mov	r4,r2
  80978c:	dfc00215 	stw	ra,8(sp)
  809790:	80000015 	stw	zero,0(r16)
  809794:	080df200 	call	80df20 <write>
  809798:	00ffffc4 	movi	r3,-1
  80979c:	10c00526 	beq	r2,r3,8097b4 <_write_r+0x50>
  8097a0:	dfc00217 	ldw	ra,8(sp)
  8097a4:	dc400117 	ldw	r17,4(sp)
  8097a8:	dc000017 	ldw	r16,0(sp)
  8097ac:	dec00304 	addi	sp,sp,12
  8097b0:	f800283a 	ret
  8097b4:	80c00017 	ldw	r3,0(r16)
  8097b8:	183ff926 	beq	r3,zero,8097a0 <__alt_data_end+0xff8097a0>
  8097bc:	88c00015 	stw	r3,0(r17)
  8097c0:	003ff706 	br	8097a0 <__alt_data_end+0xff8097a0>

008097c4 <_close_r>:
  8097c4:	defffd04 	addi	sp,sp,-12
  8097c8:	dc000015 	stw	r16,0(sp)
  8097cc:	04002074 	movhi	r16,129
  8097d0:	dc400115 	stw	r17,4(sp)
  8097d4:	8411cc04 	addi	r16,r16,18224
  8097d8:	2023883a 	mov	r17,r4
  8097dc:	2809883a 	mov	r4,r5
  8097e0:	dfc00215 	stw	ra,8(sp)
  8097e4:	80000015 	stw	zero,0(r16)
  8097e8:	080d6c80 	call	80d6c8 <close>
  8097ec:	00ffffc4 	movi	r3,-1
  8097f0:	10c00526 	beq	r2,r3,809808 <_close_r+0x44>
  8097f4:	dfc00217 	ldw	ra,8(sp)
  8097f8:	dc400117 	ldw	r17,4(sp)
  8097fc:	dc000017 	ldw	r16,0(sp)
  809800:	dec00304 	addi	sp,sp,12
  809804:	f800283a 	ret
  809808:	80c00017 	ldw	r3,0(r16)
  80980c:	183ff926 	beq	r3,zero,8097f4 <__alt_data_end+0xff8097f4>
  809810:	88c00015 	stw	r3,0(r17)
  809814:	003ff706 	br	8097f4 <__alt_data_end+0xff8097f4>

00809818 <_calloc_r>:
  809818:	defffe04 	addi	sp,sp,-8
  80981c:	2805883a 	mov	r2,r5
  809820:	dc000015 	stw	r16,0(sp)
  809824:	300b883a 	mov	r5,r6
  809828:	2021883a 	mov	r16,r4
  80982c:	1009883a 	mov	r4,r2
  809830:	dfc00115 	stw	ra,4(sp)
  809834:	080ae240 	call	80ae24 <__mulsi3>
  809838:	100b883a 	mov	r5,r2
  80983c:	8009883a 	mov	r4,r16
  809840:	0805ab40 	call	805ab4 <_malloc_r>
  809844:	10002926 	beq	r2,zero,8098ec <_calloc_r+0xd4>
  809848:	11bfff17 	ldw	r6,-4(r2)
  80984c:	1021883a 	mov	r16,r2
  809850:	00bfff04 	movi	r2,-4
  809854:	308c703a 	and	r6,r6,r2
  809858:	00c00904 	movi	r3,36
  80985c:	308d883a 	add	r6,r6,r2
  809860:	19801636 	bltu	r3,r6,8098bc <_calloc_r+0xa4>
  809864:	008004c4 	movi	r2,19
  809868:	11800b2e 	bgeu	r2,r6,809898 <_calloc_r+0x80>
  80986c:	80000015 	stw	zero,0(r16)
  809870:	80000115 	stw	zero,4(r16)
  809874:	008006c4 	movi	r2,27
  809878:	11801a2e 	bgeu	r2,r6,8098e4 <_calloc_r+0xcc>
  80987c:	80000215 	stw	zero,8(r16)
  809880:	80000315 	stw	zero,12(r16)
  809884:	30c0151e 	bne	r6,r3,8098dc <_calloc_r+0xc4>
  809888:	80000415 	stw	zero,16(r16)
  80988c:	80800604 	addi	r2,r16,24
  809890:	80000515 	stw	zero,20(r16)
  809894:	00000106 	br	80989c <_calloc_r+0x84>
  809898:	8005883a 	mov	r2,r16
  80989c:	10000015 	stw	zero,0(r2)
  8098a0:	10000115 	stw	zero,4(r2)
  8098a4:	10000215 	stw	zero,8(r2)
  8098a8:	8005883a 	mov	r2,r16
  8098ac:	dfc00117 	ldw	ra,4(sp)
  8098b0:	dc000017 	ldw	r16,0(sp)
  8098b4:	dec00204 	addi	sp,sp,8
  8098b8:	f800283a 	ret
  8098bc:	000b883a 	mov	r5,zero
  8098c0:	8009883a 	mov	r4,r16
  8098c4:	08066480 	call	806648 <memset>
  8098c8:	8005883a 	mov	r2,r16
  8098cc:	dfc00117 	ldw	ra,4(sp)
  8098d0:	dc000017 	ldw	r16,0(sp)
  8098d4:	dec00204 	addi	sp,sp,8
  8098d8:	f800283a 	ret
  8098dc:	80800404 	addi	r2,r16,16
  8098e0:	003fee06 	br	80989c <__alt_data_end+0xff80989c>
  8098e4:	80800204 	addi	r2,r16,8
  8098e8:	003fec06 	br	80989c <__alt_data_end+0xff80989c>
  8098ec:	0005883a 	mov	r2,zero
  8098f0:	003fee06 	br	8098ac <__alt_data_end+0xff8098ac>

008098f4 <_fclose_r>:
  8098f4:	28003926 	beq	r5,zero,8099dc <_fclose_r+0xe8>
  8098f8:	defffc04 	addi	sp,sp,-16
  8098fc:	dc400115 	stw	r17,4(sp)
  809900:	dc000015 	stw	r16,0(sp)
  809904:	dfc00315 	stw	ra,12(sp)
  809908:	dc800215 	stw	r18,8(sp)
  80990c:	2023883a 	mov	r17,r4
  809910:	2821883a 	mov	r16,r5
  809914:	20000226 	beq	r4,zero,809920 <_fclose_r+0x2c>
  809918:	20800e17 	ldw	r2,56(r4)
  80991c:	10002726 	beq	r2,zero,8099bc <_fclose_r+0xc8>
  809920:	8080030f 	ldh	r2,12(r16)
  809924:	1000071e 	bne	r2,zero,809944 <_fclose_r+0x50>
  809928:	0005883a 	mov	r2,zero
  80992c:	dfc00317 	ldw	ra,12(sp)
  809930:	dc800217 	ldw	r18,8(sp)
  809934:	dc400117 	ldw	r17,4(sp)
  809938:	dc000017 	ldw	r16,0(sp)
  80993c:	dec00404 	addi	sp,sp,16
  809940:	f800283a 	ret
  809944:	800b883a 	mov	r5,r16
  809948:	8809883a 	mov	r4,r17
  80994c:	08047400 	call	804740 <__sflush_r>
  809950:	1025883a 	mov	r18,r2
  809954:	80800b17 	ldw	r2,44(r16)
  809958:	10000426 	beq	r2,zero,80996c <_fclose_r+0x78>
  80995c:	81400717 	ldw	r5,28(r16)
  809960:	8809883a 	mov	r4,r17
  809964:	103ee83a 	callr	r2
  809968:	10001616 	blt	r2,zero,8099c4 <_fclose_r+0xd0>
  80996c:	8080030b 	ldhu	r2,12(r16)
  809970:	1080200c 	andi	r2,r2,128
  809974:	1000151e 	bne	r2,zero,8099cc <_fclose_r+0xd8>
  809978:	81400c17 	ldw	r5,48(r16)
  80997c:	28000526 	beq	r5,zero,809994 <_fclose_r+0xa0>
  809980:	80801004 	addi	r2,r16,64
  809984:	28800226 	beq	r5,r2,809990 <_fclose_r+0x9c>
  809988:	8809883a 	mov	r4,r17
  80998c:	0804ebc0 	call	804ebc <_free_r>
  809990:	80000c15 	stw	zero,48(r16)
  809994:	81401117 	ldw	r5,68(r16)
  809998:	28000326 	beq	r5,zero,8099a8 <_fclose_r+0xb4>
  80999c:	8809883a 	mov	r4,r17
  8099a0:	0804ebc0 	call	804ebc <_free_r>
  8099a4:	80001115 	stw	zero,68(r16)
  8099a8:	0804d580 	call	804d58 <__sfp_lock_acquire>
  8099ac:	8000030d 	sth	zero,12(r16)
  8099b0:	0804d5c0 	call	804d5c <__sfp_lock_release>
  8099b4:	9005883a 	mov	r2,r18
  8099b8:	003fdc06 	br	80992c <__alt_data_end+0xff80992c>
  8099bc:	0804d480 	call	804d48 <__sinit>
  8099c0:	003fd706 	br	809920 <__alt_data_end+0xff809920>
  8099c4:	04bfffc4 	movi	r18,-1
  8099c8:	003fe806 	br	80996c <__alt_data_end+0xff80996c>
  8099cc:	81400417 	ldw	r5,16(r16)
  8099d0:	8809883a 	mov	r4,r17
  8099d4:	0804ebc0 	call	804ebc <_free_r>
  8099d8:	003fe706 	br	809978 <__alt_data_end+0xff809978>
  8099dc:	0005883a 	mov	r2,zero
  8099e0:	f800283a 	ret

008099e4 <fclose>:
  8099e4:	00802074 	movhi	r2,129
  8099e8:	108abd04 	addi	r2,r2,10996
  8099ec:	200b883a 	mov	r5,r4
  8099f0:	11000017 	ldw	r4,0(r2)
  8099f4:	08098f41 	jmpi	8098f4 <_fclose_r>

008099f8 <__fputwc>:
  8099f8:	defff804 	addi	sp,sp,-32
  8099fc:	dcc00415 	stw	r19,16(sp)
  809a00:	dc800315 	stw	r18,12(sp)
  809a04:	dc000115 	stw	r16,4(sp)
  809a08:	dfc00715 	stw	ra,28(sp)
  809a0c:	dd400615 	stw	r21,24(sp)
  809a10:	dd000515 	stw	r20,20(sp)
  809a14:	dc400215 	stw	r17,8(sp)
  809a18:	2027883a 	mov	r19,r4
  809a1c:	2825883a 	mov	r18,r5
  809a20:	3021883a 	mov	r16,r6
  809a24:	08058a40 	call	8058a4 <__locale_mb_cur_max>
  809a28:	00c00044 	movi	r3,1
  809a2c:	10c03e26 	beq	r2,r3,809b28 <__fputwc+0x130>
  809a30:	81c01704 	addi	r7,r16,92
  809a34:	900d883a 	mov	r6,r18
  809a38:	d80b883a 	mov	r5,sp
  809a3c:	9809883a 	mov	r4,r19
  809a40:	0809ec80 	call	809ec8 <_wcrtomb_r>
  809a44:	1029883a 	mov	r20,r2
  809a48:	00bfffc4 	movi	r2,-1
  809a4c:	a0802026 	beq	r20,r2,809ad0 <__fputwc+0xd8>
  809a50:	d9400003 	ldbu	r5,0(sp)
  809a54:	a0001c26 	beq	r20,zero,809ac8 <__fputwc+0xd0>
  809a58:	0023883a 	mov	r17,zero
  809a5c:	05400284 	movi	r21,10
  809a60:	00000906 	br	809a88 <__fputwc+0x90>
  809a64:	80800017 	ldw	r2,0(r16)
  809a68:	11400005 	stb	r5,0(r2)
  809a6c:	80c00017 	ldw	r3,0(r16)
  809a70:	18c00044 	addi	r3,r3,1
  809a74:	80c00015 	stw	r3,0(r16)
  809a78:	8c400044 	addi	r17,r17,1
  809a7c:	dc45883a 	add	r2,sp,r17
  809a80:	8d00112e 	bgeu	r17,r20,809ac8 <__fputwc+0xd0>
  809a84:	11400003 	ldbu	r5,0(r2)
  809a88:	80c00217 	ldw	r3,8(r16)
  809a8c:	18ffffc4 	addi	r3,r3,-1
  809a90:	80c00215 	stw	r3,8(r16)
  809a94:	183ff30e 	bge	r3,zero,809a64 <__alt_data_end+0xff809a64>
  809a98:	80800617 	ldw	r2,24(r16)
  809a9c:	18801916 	blt	r3,r2,809b04 <__fputwc+0x10c>
  809aa0:	80800017 	ldw	r2,0(r16)
  809aa4:	11400005 	stb	r5,0(r2)
  809aa8:	80800017 	ldw	r2,0(r16)
  809aac:	10c00003 	ldbu	r3,0(r2)
  809ab0:	10800044 	addi	r2,r2,1
  809ab4:	1d402326 	beq	r3,r21,809b44 <__fputwc+0x14c>
  809ab8:	80800015 	stw	r2,0(r16)
  809abc:	8c400044 	addi	r17,r17,1
  809ac0:	dc45883a 	add	r2,sp,r17
  809ac4:	8d3fef36 	bltu	r17,r20,809a84 <__alt_data_end+0xff809a84>
  809ac8:	9005883a 	mov	r2,r18
  809acc:	00000406 	br	809ae0 <__fputwc+0xe8>
  809ad0:	80c0030b 	ldhu	r3,12(r16)
  809ad4:	a005883a 	mov	r2,r20
  809ad8:	18c01014 	ori	r3,r3,64
  809adc:	80c0030d 	sth	r3,12(r16)
  809ae0:	dfc00717 	ldw	ra,28(sp)
  809ae4:	dd400617 	ldw	r21,24(sp)
  809ae8:	dd000517 	ldw	r20,20(sp)
  809aec:	dcc00417 	ldw	r19,16(sp)
  809af0:	dc800317 	ldw	r18,12(sp)
  809af4:	dc400217 	ldw	r17,8(sp)
  809af8:	dc000117 	ldw	r16,4(sp)
  809afc:	dec00804 	addi	sp,sp,32
  809b00:	f800283a 	ret
  809b04:	800d883a 	mov	r6,r16
  809b08:	29403fcc 	andi	r5,r5,255
  809b0c:	9809883a 	mov	r4,r19
  809b10:	0809d700 	call	809d70 <__swbuf_r>
  809b14:	10bfffe0 	cmpeqi	r2,r2,-1
  809b18:	10803fcc 	andi	r2,r2,255
  809b1c:	103fd626 	beq	r2,zero,809a78 <__alt_data_end+0xff809a78>
  809b20:	00bfffc4 	movi	r2,-1
  809b24:	003fee06 	br	809ae0 <__alt_data_end+0xff809ae0>
  809b28:	90ffffc4 	addi	r3,r18,-1
  809b2c:	01003f84 	movi	r4,254
  809b30:	20ffbf36 	bltu	r4,r3,809a30 <__alt_data_end+0xff809a30>
  809b34:	900b883a 	mov	r5,r18
  809b38:	dc800005 	stb	r18,0(sp)
  809b3c:	1029883a 	mov	r20,r2
  809b40:	003fc506 	br	809a58 <__alt_data_end+0xff809a58>
  809b44:	800d883a 	mov	r6,r16
  809b48:	a80b883a 	mov	r5,r21
  809b4c:	9809883a 	mov	r4,r19
  809b50:	0809d700 	call	809d70 <__swbuf_r>
  809b54:	10bfffe0 	cmpeqi	r2,r2,-1
  809b58:	003fef06 	br	809b18 <__alt_data_end+0xff809b18>

00809b5c <_fputwc_r>:
  809b5c:	3080030b 	ldhu	r2,12(r6)
  809b60:	10c8000c 	andi	r3,r2,8192
  809b64:	1800051e 	bne	r3,zero,809b7c <_fputwc_r+0x20>
  809b68:	30c01917 	ldw	r3,100(r6)
  809b6c:	10880014 	ori	r2,r2,8192
  809b70:	3080030d 	sth	r2,12(r6)
  809b74:	18880014 	ori	r2,r3,8192
  809b78:	30801915 	stw	r2,100(r6)
  809b7c:	08099f81 	jmpi	8099f8 <__fputwc>

00809b80 <fputwc>:
  809b80:	00802074 	movhi	r2,129
  809b84:	defffc04 	addi	sp,sp,-16
  809b88:	108abd04 	addi	r2,r2,10996
  809b8c:	dc000115 	stw	r16,4(sp)
  809b90:	14000017 	ldw	r16,0(r2)
  809b94:	dc400215 	stw	r17,8(sp)
  809b98:	dfc00315 	stw	ra,12(sp)
  809b9c:	2023883a 	mov	r17,r4
  809ba0:	80000226 	beq	r16,zero,809bac <fputwc+0x2c>
  809ba4:	80800e17 	ldw	r2,56(r16)
  809ba8:	10001026 	beq	r2,zero,809bec <fputwc+0x6c>
  809bac:	2880030b 	ldhu	r2,12(r5)
  809bb0:	10c8000c 	andi	r3,r2,8192
  809bb4:	1800051e 	bne	r3,zero,809bcc <fputwc+0x4c>
  809bb8:	28c01917 	ldw	r3,100(r5)
  809bbc:	10880014 	ori	r2,r2,8192
  809bc0:	2880030d 	sth	r2,12(r5)
  809bc4:	18880014 	ori	r2,r3,8192
  809bc8:	28801915 	stw	r2,100(r5)
  809bcc:	280d883a 	mov	r6,r5
  809bd0:	8009883a 	mov	r4,r16
  809bd4:	880b883a 	mov	r5,r17
  809bd8:	dfc00317 	ldw	ra,12(sp)
  809bdc:	dc400217 	ldw	r17,8(sp)
  809be0:	dc000117 	ldw	r16,4(sp)
  809be4:	dec00404 	addi	sp,sp,16
  809be8:	08099f81 	jmpi	8099f8 <__fputwc>
  809bec:	8009883a 	mov	r4,r16
  809bf0:	d9400015 	stw	r5,0(sp)
  809bf4:	0804d480 	call	804d48 <__sinit>
  809bf8:	d9400017 	ldw	r5,0(sp)
  809bfc:	003feb06 	br	809bac <__alt_data_end+0xff809bac>

00809c00 <_fstat_r>:
  809c00:	defffd04 	addi	sp,sp,-12
  809c04:	2805883a 	mov	r2,r5
  809c08:	dc000015 	stw	r16,0(sp)
  809c0c:	04002074 	movhi	r16,129
  809c10:	dc400115 	stw	r17,4(sp)
  809c14:	8411cc04 	addi	r16,r16,18224
  809c18:	2023883a 	mov	r17,r4
  809c1c:	300b883a 	mov	r5,r6
  809c20:	1009883a 	mov	r4,r2
  809c24:	dfc00215 	stw	ra,8(sp)
  809c28:	80000015 	stw	zero,0(r16)
  809c2c:	080d8080 	call	80d808 <fstat>
  809c30:	00ffffc4 	movi	r3,-1
  809c34:	10c00526 	beq	r2,r3,809c4c <_fstat_r+0x4c>
  809c38:	dfc00217 	ldw	ra,8(sp)
  809c3c:	dc400117 	ldw	r17,4(sp)
  809c40:	dc000017 	ldw	r16,0(sp)
  809c44:	dec00304 	addi	sp,sp,12
  809c48:	f800283a 	ret
  809c4c:	80c00017 	ldw	r3,0(r16)
  809c50:	183ff926 	beq	r3,zero,809c38 <__alt_data_end+0xff809c38>
  809c54:	88c00015 	stw	r3,0(r17)
  809c58:	003ff706 	br	809c38 <__alt_data_end+0xff809c38>

00809c5c <_isatty_r>:
  809c5c:	defffd04 	addi	sp,sp,-12
  809c60:	dc000015 	stw	r16,0(sp)
  809c64:	04002074 	movhi	r16,129
  809c68:	dc400115 	stw	r17,4(sp)
  809c6c:	8411cc04 	addi	r16,r16,18224
  809c70:	2023883a 	mov	r17,r4
  809c74:	2809883a 	mov	r4,r5
  809c78:	dfc00215 	stw	ra,8(sp)
  809c7c:	80000015 	stw	zero,0(r16)
  809c80:	080d8fc0 	call	80d8fc <isatty>
  809c84:	00ffffc4 	movi	r3,-1
  809c88:	10c00526 	beq	r2,r3,809ca0 <_isatty_r+0x44>
  809c8c:	dfc00217 	ldw	ra,8(sp)
  809c90:	dc400117 	ldw	r17,4(sp)
  809c94:	dc000017 	ldw	r16,0(sp)
  809c98:	dec00304 	addi	sp,sp,12
  809c9c:	f800283a 	ret
  809ca0:	80c00017 	ldw	r3,0(r16)
  809ca4:	183ff926 	beq	r3,zero,809c8c <__alt_data_end+0xff809c8c>
  809ca8:	88c00015 	stw	r3,0(r17)
  809cac:	003ff706 	br	809c8c <__alt_data_end+0xff809c8c>

00809cb0 <_lseek_r>:
  809cb0:	defffd04 	addi	sp,sp,-12
  809cb4:	2805883a 	mov	r2,r5
  809cb8:	dc000015 	stw	r16,0(sp)
  809cbc:	04002074 	movhi	r16,129
  809cc0:	dc400115 	stw	r17,4(sp)
  809cc4:	300b883a 	mov	r5,r6
  809cc8:	8411cc04 	addi	r16,r16,18224
  809ccc:	2023883a 	mov	r17,r4
  809cd0:	380d883a 	mov	r6,r7
  809cd4:	1009883a 	mov	r4,r2
  809cd8:	dfc00215 	stw	ra,8(sp)
  809cdc:	80000015 	stw	zero,0(r16)
  809ce0:	080dad00 	call	80dad0 <lseek>
  809ce4:	00ffffc4 	movi	r3,-1
  809ce8:	10c00526 	beq	r2,r3,809d00 <_lseek_r+0x50>
  809cec:	dfc00217 	ldw	ra,8(sp)
  809cf0:	dc400117 	ldw	r17,4(sp)
  809cf4:	dc000017 	ldw	r16,0(sp)
  809cf8:	dec00304 	addi	sp,sp,12
  809cfc:	f800283a 	ret
  809d00:	80c00017 	ldw	r3,0(r16)
  809d04:	183ff926 	beq	r3,zero,809cec <__alt_data_end+0xff809cec>
  809d08:	88c00015 	stw	r3,0(r17)
  809d0c:	003ff706 	br	809cec <__alt_data_end+0xff809cec>

00809d10 <_read_r>:
  809d10:	defffd04 	addi	sp,sp,-12
  809d14:	2805883a 	mov	r2,r5
  809d18:	dc000015 	stw	r16,0(sp)
  809d1c:	04002074 	movhi	r16,129
  809d20:	dc400115 	stw	r17,4(sp)
  809d24:	300b883a 	mov	r5,r6
  809d28:	8411cc04 	addi	r16,r16,18224
  809d2c:	2023883a 	mov	r17,r4
  809d30:	380d883a 	mov	r6,r7
  809d34:	1009883a 	mov	r4,r2
  809d38:	dfc00215 	stw	ra,8(sp)
  809d3c:	80000015 	stw	zero,0(r16)
  809d40:	080dcac0 	call	80dcac <read>
  809d44:	00ffffc4 	movi	r3,-1
  809d48:	10c00526 	beq	r2,r3,809d60 <_read_r+0x50>
  809d4c:	dfc00217 	ldw	ra,8(sp)
  809d50:	dc400117 	ldw	r17,4(sp)
  809d54:	dc000017 	ldw	r16,0(sp)
  809d58:	dec00304 	addi	sp,sp,12
  809d5c:	f800283a 	ret
  809d60:	80c00017 	ldw	r3,0(r16)
  809d64:	183ff926 	beq	r3,zero,809d4c <__alt_data_end+0xff809d4c>
  809d68:	88c00015 	stw	r3,0(r17)
  809d6c:	003ff706 	br	809d4c <__alt_data_end+0xff809d4c>

00809d70 <__swbuf_r>:
  809d70:	defffb04 	addi	sp,sp,-20
  809d74:	dcc00315 	stw	r19,12(sp)
  809d78:	dc800215 	stw	r18,8(sp)
  809d7c:	dc000015 	stw	r16,0(sp)
  809d80:	dfc00415 	stw	ra,16(sp)
  809d84:	dc400115 	stw	r17,4(sp)
  809d88:	2025883a 	mov	r18,r4
  809d8c:	2827883a 	mov	r19,r5
  809d90:	3021883a 	mov	r16,r6
  809d94:	20000226 	beq	r4,zero,809da0 <__swbuf_r+0x30>
  809d98:	20800e17 	ldw	r2,56(r4)
  809d9c:	10004226 	beq	r2,zero,809ea8 <__swbuf_r+0x138>
  809da0:	80800617 	ldw	r2,24(r16)
  809da4:	8100030b 	ldhu	r4,12(r16)
  809da8:	80800215 	stw	r2,8(r16)
  809dac:	2080020c 	andi	r2,r4,8
  809db0:	10003626 	beq	r2,zero,809e8c <__swbuf_r+0x11c>
  809db4:	80c00417 	ldw	r3,16(r16)
  809db8:	18003426 	beq	r3,zero,809e8c <__swbuf_r+0x11c>
  809dbc:	2088000c 	andi	r2,r4,8192
  809dc0:	9c403fcc 	andi	r17,r19,255
  809dc4:	10001a26 	beq	r2,zero,809e30 <__swbuf_r+0xc0>
  809dc8:	80800017 	ldw	r2,0(r16)
  809dcc:	81000517 	ldw	r4,20(r16)
  809dd0:	10c7c83a 	sub	r3,r2,r3
  809dd4:	1900200e 	bge	r3,r4,809e58 <__swbuf_r+0xe8>
  809dd8:	18c00044 	addi	r3,r3,1
  809ddc:	81000217 	ldw	r4,8(r16)
  809de0:	11400044 	addi	r5,r2,1
  809de4:	81400015 	stw	r5,0(r16)
  809de8:	213fffc4 	addi	r4,r4,-1
  809dec:	81000215 	stw	r4,8(r16)
  809df0:	14c00005 	stb	r19,0(r2)
  809df4:	80800517 	ldw	r2,20(r16)
  809df8:	10c01e26 	beq	r2,r3,809e74 <__swbuf_r+0x104>
  809dfc:	8080030b 	ldhu	r2,12(r16)
  809e00:	1080004c 	andi	r2,r2,1
  809e04:	10000226 	beq	r2,zero,809e10 <__swbuf_r+0xa0>
  809e08:	00800284 	movi	r2,10
  809e0c:	88801926 	beq	r17,r2,809e74 <__swbuf_r+0x104>
  809e10:	8805883a 	mov	r2,r17
  809e14:	dfc00417 	ldw	ra,16(sp)
  809e18:	dcc00317 	ldw	r19,12(sp)
  809e1c:	dc800217 	ldw	r18,8(sp)
  809e20:	dc400117 	ldw	r17,4(sp)
  809e24:	dc000017 	ldw	r16,0(sp)
  809e28:	dec00504 	addi	sp,sp,20
  809e2c:	f800283a 	ret
  809e30:	81401917 	ldw	r5,100(r16)
  809e34:	00b7ffc4 	movi	r2,-8193
  809e38:	21080014 	ori	r4,r4,8192
  809e3c:	2884703a 	and	r2,r5,r2
  809e40:	80801915 	stw	r2,100(r16)
  809e44:	80800017 	ldw	r2,0(r16)
  809e48:	8100030d 	sth	r4,12(r16)
  809e4c:	81000517 	ldw	r4,20(r16)
  809e50:	10c7c83a 	sub	r3,r2,r3
  809e54:	193fe016 	blt	r3,r4,809dd8 <__alt_data_end+0xff809dd8>
  809e58:	800b883a 	mov	r5,r16
  809e5c:	9009883a 	mov	r4,r18
  809e60:	080495c0 	call	80495c <_fflush_r>
  809e64:	1000071e 	bne	r2,zero,809e84 <__swbuf_r+0x114>
  809e68:	80800017 	ldw	r2,0(r16)
  809e6c:	00c00044 	movi	r3,1
  809e70:	003fda06 	br	809ddc <__alt_data_end+0xff809ddc>
  809e74:	800b883a 	mov	r5,r16
  809e78:	9009883a 	mov	r4,r18
  809e7c:	080495c0 	call	80495c <_fflush_r>
  809e80:	103fe326 	beq	r2,zero,809e10 <__alt_data_end+0xff809e10>
  809e84:	00bfffc4 	movi	r2,-1
  809e88:	003fe206 	br	809e14 <__alt_data_end+0xff809e14>
  809e8c:	800b883a 	mov	r5,r16
  809e90:	9009883a 	mov	r4,r18
  809e94:	0802d3c0 	call	802d3c <__swsetup_r>
  809e98:	103ffa1e 	bne	r2,zero,809e84 <__alt_data_end+0xff809e84>
  809e9c:	8100030b 	ldhu	r4,12(r16)
  809ea0:	80c00417 	ldw	r3,16(r16)
  809ea4:	003fc506 	br	809dbc <__alt_data_end+0xff809dbc>
  809ea8:	0804d480 	call	804d48 <__sinit>
  809eac:	003fbc06 	br	809da0 <__alt_data_end+0xff809da0>

00809eb0 <__swbuf>:
  809eb0:	00802074 	movhi	r2,129
  809eb4:	108abd04 	addi	r2,r2,10996
  809eb8:	280d883a 	mov	r6,r5
  809ebc:	200b883a 	mov	r5,r4
  809ec0:	11000017 	ldw	r4,0(r2)
  809ec4:	0809d701 	jmpi	809d70 <__swbuf_r>

00809ec8 <_wcrtomb_r>:
  809ec8:	defff604 	addi	sp,sp,-40
  809ecc:	00802074 	movhi	r2,129
  809ed0:	dc800815 	stw	r18,32(sp)
  809ed4:	dc400715 	stw	r17,28(sp)
  809ed8:	dc000615 	stw	r16,24(sp)
  809edc:	108ac104 	addi	r2,r2,11012
  809ee0:	dfc00915 	stw	ra,36(sp)
  809ee4:	2021883a 	mov	r16,r4
  809ee8:	3823883a 	mov	r17,r7
  809eec:	14800017 	ldw	r18,0(r2)
  809ef0:	28001426 	beq	r5,zero,809f44 <_wcrtomb_r+0x7c>
  809ef4:	d9400415 	stw	r5,16(sp)
  809ef8:	d9800515 	stw	r6,20(sp)
  809efc:	08058980 	call	805898 <__locale_charset>
  809f00:	d9800517 	ldw	r6,20(sp)
  809f04:	d9400417 	ldw	r5,16(sp)
  809f08:	100f883a 	mov	r7,r2
  809f0c:	dc400015 	stw	r17,0(sp)
  809f10:	8009883a 	mov	r4,r16
  809f14:	903ee83a 	callr	r18
  809f18:	00ffffc4 	movi	r3,-1
  809f1c:	10c0031e 	bne	r2,r3,809f2c <_wcrtomb_r+0x64>
  809f20:	88000015 	stw	zero,0(r17)
  809f24:	00c02284 	movi	r3,138
  809f28:	80c00015 	stw	r3,0(r16)
  809f2c:	dfc00917 	ldw	ra,36(sp)
  809f30:	dc800817 	ldw	r18,32(sp)
  809f34:	dc400717 	ldw	r17,28(sp)
  809f38:	dc000617 	ldw	r16,24(sp)
  809f3c:	dec00a04 	addi	sp,sp,40
  809f40:	f800283a 	ret
  809f44:	08058980 	call	805898 <__locale_charset>
  809f48:	100f883a 	mov	r7,r2
  809f4c:	dc400015 	stw	r17,0(sp)
  809f50:	000d883a 	mov	r6,zero
  809f54:	d9400104 	addi	r5,sp,4
  809f58:	8009883a 	mov	r4,r16
  809f5c:	903ee83a 	callr	r18
  809f60:	003fed06 	br	809f18 <__alt_data_end+0xff809f18>

00809f64 <wcrtomb>:
  809f64:	defff604 	addi	sp,sp,-40
  809f68:	00802074 	movhi	r2,129
  809f6c:	dc800615 	stw	r18,24(sp)
  809f70:	dc400515 	stw	r17,20(sp)
  809f74:	108abd04 	addi	r2,r2,10996
  809f78:	dfc00915 	stw	ra,36(sp)
  809f7c:	dd000815 	stw	r20,32(sp)
  809f80:	dcc00715 	stw	r19,28(sp)
  809f84:	dc000415 	stw	r16,16(sp)
  809f88:	3025883a 	mov	r18,r6
  809f8c:	14400017 	ldw	r17,0(r2)
  809f90:	20001926 	beq	r4,zero,809ff8 <wcrtomb+0x94>
  809f94:	00802074 	movhi	r2,129
  809f98:	108ac104 	addi	r2,r2,11012
  809f9c:	15000017 	ldw	r20,0(r2)
  809fa0:	2021883a 	mov	r16,r4
  809fa4:	2827883a 	mov	r19,r5
  809fa8:	08058980 	call	805898 <__locale_charset>
  809fac:	100f883a 	mov	r7,r2
  809fb0:	dc800015 	stw	r18,0(sp)
  809fb4:	980d883a 	mov	r6,r19
  809fb8:	800b883a 	mov	r5,r16
  809fbc:	8809883a 	mov	r4,r17
  809fc0:	a03ee83a 	callr	r20
  809fc4:	00ffffc4 	movi	r3,-1
  809fc8:	10c0031e 	bne	r2,r3,809fd8 <wcrtomb+0x74>
  809fcc:	90000015 	stw	zero,0(r18)
  809fd0:	00c02284 	movi	r3,138
  809fd4:	88c00015 	stw	r3,0(r17)
  809fd8:	dfc00917 	ldw	ra,36(sp)
  809fdc:	dd000817 	ldw	r20,32(sp)
  809fe0:	dcc00717 	ldw	r19,28(sp)
  809fe4:	dc800617 	ldw	r18,24(sp)
  809fe8:	dc400517 	ldw	r17,20(sp)
  809fec:	dc000417 	ldw	r16,16(sp)
  809ff0:	dec00a04 	addi	sp,sp,40
  809ff4:	f800283a 	ret
  809ff8:	00802074 	movhi	r2,129
  809ffc:	108ac104 	addi	r2,r2,11012
  80a000:	14000017 	ldw	r16,0(r2)
  80a004:	08058980 	call	805898 <__locale_charset>
  80a008:	100f883a 	mov	r7,r2
  80a00c:	dc800015 	stw	r18,0(sp)
  80a010:	000d883a 	mov	r6,zero
  80a014:	d9400104 	addi	r5,sp,4
  80a018:	8809883a 	mov	r4,r17
  80a01c:	803ee83a 	callr	r16
  80a020:	003fe806 	br	809fc4 <__alt_data_end+0xff809fc4>

0080a024 <__ascii_wctomb>:
  80a024:	28000526 	beq	r5,zero,80a03c <__ascii_wctomb+0x18>
  80a028:	00803fc4 	movi	r2,255
  80a02c:	11800536 	bltu	r2,r6,80a044 <__ascii_wctomb+0x20>
  80a030:	29800005 	stb	r6,0(r5)
  80a034:	00800044 	movi	r2,1
  80a038:	f800283a 	ret
  80a03c:	0005883a 	mov	r2,zero
  80a040:	f800283a 	ret
  80a044:	00802284 	movi	r2,138
  80a048:	20800015 	stw	r2,0(r4)
  80a04c:	00bfffc4 	movi	r2,-1
  80a050:	f800283a 	ret

0080a054 <_wctomb_r>:
  80a054:	00802074 	movhi	r2,129
  80a058:	defff904 	addi	sp,sp,-28
  80a05c:	108ac104 	addi	r2,r2,11012
  80a060:	dfc00615 	stw	ra,24(sp)
  80a064:	dc400515 	stw	r17,20(sp)
  80a068:	dc000415 	stw	r16,16(sp)
  80a06c:	3823883a 	mov	r17,r7
  80a070:	14000017 	ldw	r16,0(r2)
  80a074:	d9000115 	stw	r4,4(sp)
  80a078:	d9400215 	stw	r5,8(sp)
  80a07c:	d9800315 	stw	r6,12(sp)
  80a080:	08058980 	call	805898 <__locale_charset>
  80a084:	d9800317 	ldw	r6,12(sp)
  80a088:	d9400217 	ldw	r5,8(sp)
  80a08c:	d9000117 	ldw	r4,4(sp)
  80a090:	100f883a 	mov	r7,r2
  80a094:	dc400015 	stw	r17,0(sp)
  80a098:	803ee83a 	callr	r16
  80a09c:	dfc00617 	ldw	ra,24(sp)
  80a0a0:	dc400517 	ldw	r17,20(sp)
  80a0a4:	dc000417 	ldw	r16,16(sp)
  80a0a8:	dec00704 	addi	sp,sp,28
  80a0ac:	f800283a 	ret

0080a0b0 <__udivdi3>:
  80a0b0:	defff404 	addi	sp,sp,-48
  80a0b4:	dcc00515 	stw	r19,20(sp)
  80a0b8:	dc000215 	stw	r16,8(sp)
  80a0bc:	dfc00b15 	stw	ra,44(sp)
  80a0c0:	df000a15 	stw	fp,40(sp)
  80a0c4:	ddc00915 	stw	r23,36(sp)
  80a0c8:	dd800815 	stw	r22,32(sp)
  80a0cc:	dd400715 	stw	r21,28(sp)
  80a0d0:	dd000615 	stw	r20,24(sp)
  80a0d4:	dc800415 	stw	r18,16(sp)
  80a0d8:	dc400315 	stw	r17,12(sp)
  80a0dc:	2027883a 	mov	r19,r4
  80a0e0:	2821883a 	mov	r16,r5
  80a0e4:	3800461e 	bne	r7,zero,80a200 <__udivdi3+0x150>
  80a0e8:	3023883a 	mov	r17,r6
  80a0ec:	2025883a 	mov	r18,r4
  80a0f0:	2980572e 	bgeu	r5,r6,80a250 <__udivdi3+0x1a0>
  80a0f4:	00bfffd4 	movui	r2,65535
  80a0f8:	282d883a 	mov	r22,r5
  80a0fc:	1180b236 	bltu	r2,r6,80a3c8 <__udivdi3+0x318>
  80a100:	00803fc4 	movi	r2,255
  80a104:	1185803a 	cmpltu	r2,r2,r6
  80a108:	100490fa 	slli	r2,r2,3
  80a10c:	3086d83a 	srl	r3,r6,r2
  80a110:	01002074 	movhi	r4,129
  80a114:	21031884 	addi	r4,r4,3170
  80a118:	20c7883a 	add	r3,r4,r3
  80a11c:	18c00003 	ldbu	r3,0(r3)
  80a120:	1885883a 	add	r2,r3,r2
  80a124:	00c00804 	movi	r3,32
  80a128:	1887c83a 	sub	r3,r3,r2
  80a12c:	18000526 	beq	r3,zero,80a144 <__udivdi3+0x94>
  80a130:	80e0983a 	sll	r16,r16,r3
  80a134:	9884d83a 	srl	r2,r19,r2
  80a138:	30e2983a 	sll	r17,r6,r3
  80a13c:	98e4983a 	sll	r18,r19,r3
  80a140:	142cb03a 	or	r22,r2,r16
  80a144:	882ad43a 	srli	r21,r17,16
  80a148:	b009883a 	mov	r4,r22
  80a14c:	8d3fffcc 	andi	r20,r17,65535
  80a150:	a80b883a 	mov	r5,r21
  80a154:	080adcc0 	call	80adcc <__umodsi3>
  80a158:	b009883a 	mov	r4,r22
  80a15c:	a80b883a 	mov	r5,r21
  80a160:	1027883a 	mov	r19,r2
  80a164:	080ad680 	call	80ad68 <__udivsi3>
  80a168:	100b883a 	mov	r5,r2
  80a16c:	a009883a 	mov	r4,r20
  80a170:	102d883a 	mov	r22,r2
  80a174:	080ae240 	call	80ae24 <__mulsi3>
  80a178:	9826943a 	slli	r19,r19,16
  80a17c:	9006d43a 	srli	r3,r18,16
  80a180:	1cc6b03a 	or	r3,r3,r19
  80a184:	1880052e 	bgeu	r3,r2,80a19c <__udivdi3+0xec>
  80a188:	1c47883a 	add	r3,r3,r17
  80a18c:	b13fffc4 	addi	r4,r22,-1
  80a190:	1c400136 	bltu	r3,r17,80a198 <__udivdi3+0xe8>
  80a194:	18814236 	bltu	r3,r2,80a6a0 <__udivdi3+0x5f0>
  80a198:	202d883a 	mov	r22,r4
  80a19c:	18a1c83a 	sub	r16,r3,r2
  80a1a0:	8009883a 	mov	r4,r16
  80a1a4:	a80b883a 	mov	r5,r21
  80a1a8:	080adcc0 	call	80adcc <__umodsi3>
  80a1ac:	1027883a 	mov	r19,r2
  80a1b0:	8009883a 	mov	r4,r16
  80a1b4:	a80b883a 	mov	r5,r21
  80a1b8:	9826943a 	slli	r19,r19,16
  80a1bc:	080ad680 	call	80ad68 <__udivsi3>
  80a1c0:	100b883a 	mov	r5,r2
  80a1c4:	a009883a 	mov	r4,r20
  80a1c8:	94bfffcc 	andi	r18,r18,65535
  80a1cc:	1021883a 	mov	r16,r2
  80a1d0:	94e4b03a 	or	r18,r18,r19
  80a1d4:	080ae240 	call	80ae24 <__mulsi3>
  80a1d8:	9080052e 	bgeu	r18,r2,80a1f0 <__udivdi3+0x140>
  80a1dc:	8ca5883a 	add	r18,r17,r18
  80a1e0:	80ffffc4 	addi	r3,r16,-1
  80a1e4:	94410c36 	bltu	r18,r17,80a618 <__udivdi3+0x568>
  80a1e8:	90810b2e 	bgeu	r18,r2,80a618 <__udivdi3+0x568>
  80a1ec:	843fff84 	addi	r16,r16,-2
  80a1f0:	b004943a 	slli	r2,r22,16
  80a1f4:	0007883a 	mov	r3,zero
  80a1f8:	1404b03a 	or	r2,r2,r16
  80a1fc:	00005e06 	br	80a378 <__udivdi3+0x2c8>
  80a200:	29c05b36 	bltu	r5,r7,80a370 <__udivdi3+0x2c0>
  80a204:	00bfffd4 	movui	r2,65535
  80a208:	11c0672e 	bgeu	r2,r7,80a3a8 <__udivdi3+0x2f8>
  80a20c:	00804034 	movhi	r2,256
  80a210:	10bfffc4 	addi	r2,r2,-1
  80a214:	11c10a36 	bltu	r2,r7,80a640 <__udivdi3+0x590>
  80a218:	00800404 	movi	r2,16
  80a21c:	3886d83a 	srl	r3,r7,r2
  80a220:	01002074 	movhi	r4,129
  80a224:	21031884 	addi	r4,r4,3170
  80a228:	20c7883a 	add	r3,r4,r3
  80a22c:	18c00003 	ldbu	r3,0(r3)
  80a230:	05c00804 	movi	r23,32
  80a234:	1885883a 	add	r2,r3,r2
  80a238:	b8afc83a 	sub	r23,r23,r2
  80a23c:	b800671e 	bne	r23,zero,80a3dc <__udivdi3+0x32c>
  80a240:	3c010536 	bltu	r7,r16,80a658 <__udivdi3+0x5a8>
  80a244:	9985403a 	cmpgeu	r2,r19,r6
  80a248:	0007883a 	mov	r3,zero
  80a24c:	00004a06 	br	80a378 <__udivdi3+0x2c8>
  80a250:	3000041e 	bne	r6,zero,80a264 <__udivdi3+0x1b4>
  80a254:	000b883a 	mov	r5,zero
  80a258:	01000044 	movi	r4,1
  80a25c:	080ad680 	call	80ad68 <__udivsi3>
  80a260:	1023883a 	mov	r17,r2
  80a264:	00bfffd4 	movui	r2,65535
  80a268:	1440532e 	bgeu	r2,r17,80a3b8 <__udivdi3+0x308>
  80a26c:	00804034 	movhi	r2,256
  80a270:	10bfffc4 	addi	r2,r2,-1
  80a274:	1440f436 	bltu	r2,r17,80a648 <__udivdi3+0x598>
  80a278:	00800404 	movi	r2,16
  80a27c:	8886d83a 	srl	r3,r17,r2
  80a280:	01002074 	movhi	r4,129
  80a284:	21031884 	addi	r4,r4,3170
  80a288:	20c7883a 	add	r3,r4,r3
  80a28c:	18c00003 	ldbu	r3,0(r3)
  80a290:	1885883a 	add	r2,r3,r2
  80a294:	00c00804 	movi	r3,32
  80a298:	1887c83a 	sub	r3,r3,r2
  80a29c:	1800a51e 	bne	r3,zero,80a534 <__udivdi3+0x484>
  80a2a0:	882ad43a 	srli	r21,r17,16
  80a2a4:	8461c83a 	sub	r16,r16,r17
  80a2a8:	8d3fffcc 	andi	r20,r17,65535
  80a2ac:	00c00044 	movi	r3,1
  80a2b0:	a80b883a 	mov	r5,r21
  80a2b4:	8009883a 	mov	r4,r16
  80a2b8:	d8c00115 	stw	r3,4(sp)
  80a2bc:	080adcc0 	call	80adcc <__umodsi3>
  80a2c0:	a80b883a 	mov	r5,r21
  80a2c4:	8009883a 	mov	r4,r16
  80a2c8:	1027883a 	mov	r19,r2
  80a2cc:	080ad680 	call	80ad68 <__udivsi3>
  80a2d0:	a00b883a 	mov	r5,r20
  80a2d4:	1009883a 	mov	r4,r2
  80a2d8:	102d883a 	mov	r22,r2
  80a2dc:	080ae240 	call	80ae24 <__mulsi3>
  80a2e0:	9826943a 	slli	r19,r19,16
  80a2e4:	900ed43a 	srli	r7,r18,16
  80a2e8:	d8c00117 	ldw	r3,4(sp)
  80a2ec:	3cceb03a 	or	r7,r7,r19
  80a2f0:	3880052e 	bgeu	r7,r2,80a308 <__udivdi3+0x258>
  80a2f4:	3c4f883a 	add	r7,r7,r17
  80a2f8:	b13fffc4 	addi	r4,r22,-1
  80a2fc:	3c400136 	bltu	r7,r17,80a304 <__udivdi3+0x254>
  80a300:	3880e436 	bltu	r7,r2,80a694 <__udivdi3+0x5e4>
  80a304:	202d883a 	mov	r22,r4
  80a308:	38a1c83a 	sub	r16,r7,r2
  80a30c:	8009883a 	mov	r4,r16
  80a310:	a80b883a 	mov	r5,r21
  80a314:	d8c00115 	stw	r3,4(sp)
  80a318:	080adcc0 	call	80adcc <__umodsi3>
  80a31c:	1027883a 	mov	r19,r2
  80a320:	8009883a 	mov	r4,r16
  80a324:	a80b883a 	mov	r5,r21
  80a328:	9826943a 	slli	r19,r19,16
  80a32c:	080ad680 	call	80ad68 <__udivsi3>
  80a330:	a00b883a 	mov	r5,r20
  80a334:	1009883a 	mov	r4,r2
  80a338:	94bfffcc 	andi	r18,r18,65535
  80a33c:	1021883a 	mov	r16,r2
  80a340:	94e4b03a 	or	r18,r18,r19
  80a344:	080ae240 	call	80ae24 <__mulsi3>
  80a348:	d8c00117 	ldw	r3,4(sp)
  80a34c:	9080052e 	bgeu	r18,r2,80a364 <__udivdi3+0x2b4>
  80a350:	8ca5883a 	add	r18,r17,r18
  80a354:	813fffc4 	addi	r4,r16,-1
  80a358:	9440ad36 	bltu	r18,r17,80a610 <__udivdi3+0x560>
  80a35c:	9080ac2e 	bgeu	r18,r2,80a610 <__udivdi3+0x560>
  80a360:	843fff84 	addi	r16,r16,-2
  80a364:	b004943a 	slli	r2,r22,16
  80a368:	1404b03a 	or	r2,r2,r16
  80a36c:	00000206 	br	80a378 <__udivdi3+0x2c8>
  80a370:	0007883a 	mov	r3,zero
  80a374:	0005883a 	mov	r2,zero
  80a378:	dfc00b17 	ldw	ra,44(sp)
  80a37c:	df000a17 	ldw	fp,40(sp)
  80a380:	ddc00917 	ldw	r23,36(sp)
  80a384:	dd800817 	ldw	r22,32(sp)
  80a388:	dd400717 	ldw	r21,28(sp)
  80a38c:	dd000617 	ldw	r20,24(sp)
  80a390:	dcc00517 	ldw	r19,20(sp)
  80a394:	dc800417 	ldw	r18,16(sp)
  80a398:	dc400317 	ldw	r17,12(sp)
  80a39c:	dc000217 	ldw	r16,8(sp)
  80a3a0:	dec00c04 	addi	sp,sp,48
  80a3a4:	f800283a 	ret
  80a3a8:	00803fc4 	movi	r2,255
  80a3ac:	11c5803a 	cmpltu	r2,r2,r7
  80a3b0:	100490fa 	slli	r2,r2,3
  80a3b4:	003f9906 	br	80a21c <__alt_data_end+0xff80a21c>
  80a3b8:	00803fc4 	movi	r2,255
  80a3bc:	1445803a 	cmpltu	r2,r2,r17
  80a3c0:	100490fa 	slli	r2,r2,3
  80a3c4:	003fad06 	br	80a27c <__alt_data_end+0xff80a27c>
  80a3c8:	00804034 	movhi	r2,256
  80a3cc:	10bfffc4 	addi	r2,r2,-1
  80a3d0:	11809f36 	bltu	r2,r6,80a650 <__udivdi3+0x5a0>
  80a3d4:	00800404 	movi	r2,16
  80a3d8:	003f4c06 	br	80a10c <__alt_data_end+0xff80a10c>
  80a3dc:	3dce983a 	sll	r7,r7,r23
  80a3e0:	30b8d83a 	srl	fp,r6,r2
  80a3e4:	80a2d83a 	srl	r17,r16,r2
  80a3e8:	35cc983a 	sll	r6,r6,r23
  80a3ec:	3f38b03a 	or	fp,r7,fp
  80a3f0:	e024d43a 	srli	r18,fp,16
  80a3f4:	9884d83a 	srl	r2,r19,r2
  80a3f8:	85e0983a 	sll	r16,r16,r23
  80a3fc:	8809883a 	mov	r4,r17
  80a400:	900b883a 	mov	r5,r18
  80a404:	d9800015 	stw	r6,0(sp)
  80a408:	1420b03a 	or	r16,r2,r16
  80a40c:	080adcc0 	call	80adcc <__umodsi3>
  80a410:	900b883a 	mov	r5,r18
  80a414:	8809883a 	mov	r4,r17
  80a418:	1029883a 	mov	r20,r2
  80a41c:	e5bfffcc 	andi	r22,fp,65535
  80a420:	080ad680 	call	80ad68 <__udivsi3>
  80a424:	100b883a 	mov	r5,r2
  80a428:	b009883a 	mov	r4,r22
  80a42c:	102b883a 	mov	r21,r2
  80a430:	080ae240 	call	80ae24 <__mulsi3>
  80a434:	a028943a 	slli	r20,r20,16
  80a438:	8006d43a 	srli	r3,r16,16
  80a43c:	1d06b03a 	or	r3,r3,r20
  80a440:	1880042e 	bgeu	r3,r2,80a454 <__udivdi3+0x3a4>
  80a444:	1f07883a 	add	r3,r3,fp
  80a448:	a93fffc4 	addi	r4,r21,-1
  80a44c:	1f00892e 	bgeu	r3,fp,80a674 <__udivdi3+0x5c4>
  80a450:	202b883a 	mov	r21,r4
  80a454:	18a3c83a 	sub	r17,r3,r2
  80a458:	8809883a 	mov	r4,r17
  80a45c:	900b883a 	mov	r5,r18
  80a460:	080adcc0 	call	80adcc <__umodsi3>
  80a464:	1029883a 	mov	r20,r2
  80a468:	8809883a 	mov	r4,r17
  80a46c:	900b883a 	mov	r5,r18
  80a470:	a028943a 	slli	r20,r20,16
  80a474:	080ad680 	call	80ad68 <__udivsi3>
  80a478:	100b883a 	mov	r5,r2
  80a47c:	b009883a 	mov	r4,r22
  80a480:	843fffcc 	andi	r16,r16,65535
  80a484:	1023883a 	mov	r17,r2
  80a488:	8520b03a 	or	r16,r16,r20
  80a48c:	080ae240 	call	80ae24 <__mulsi3>
  80a490:	8080042e 	bgeu	r16,r2,80a4a4 <__udivdi3+0x3f4>
  80a494:	8721883a 	add	r16,r16,fp
  80a498:	88ffffc4 	addi	r3,r17,-1
  80a49c:	8700712e 	bgeu	r16,fp,80a664 <__udivdi3+0x5b4>
  80a4a0:	1823883a 	mov	r17,r3
  80a4a4:	a80e943a 	slli	r7,r21,16
  80a4a8:	d8c00017 	ldw	r3,0(sp)
  80a4ac:	80a1c83a 	sub	r16,r16,r2
  80a4b0:	3c64b03a 	or	r18,r7,r17
  80a4b4:	1d3fffcc 	andi	r20,r3,65535
  80a4b8:	9022d43a 	srli	r17,r18,16
  80a4bc:	95bfffcc 	andi	r22,r18,65535
  80a4c0:	a00b883a 	mov	r5,r20
  80a4c4:	b009883a 	mov	r4,r22
  80a4c8:	182ad43a 	srli	r21,r3,16
  80a4cc:	080ae240 	call	80ae24 <__mulsi3>
  80a4d0:	a00b883a 	mov	r5,r20
  80a4d4:	8809883a 	mov	r4,r17
  80a4d8:	1039883a 	mov	fp,r2
  80a4dc:	080ae240 	call	80ae24 <__mulsi3>
  80a4e0:	8809883a 	mov	r4,r17
  80a4e4:	a80b883a 	mov	r5,r21
  80a4e8:	1029883a 	mov	r20,r2
  80a4ec:	080ae240 	call	80ae24 <__mulsi3>
  80a4f0:	a80b883a 	mov	r5,r21
  80a4f4:	b009883a 	mov	r4,r22
  80a4f8:	1023883a 	mov	r17,r2
  80a4fc:	080ae240 	call	80ae24 <__mulsi3>
  80a500:	e006d43a 	srli	r3,fp,16
  80a504:	1505883a 	add	r2,r2,r20
  80a508:	1887883a 	add	r3,r3,r2
  80a50c:	1d00022e 	bgeu	r3,r20,80a518 <__udivdi3+0x468>
  80a510:	00800074 	movhi	r2,1
  80a514:	88a3883a 	add	r17,r17,r2
  80a518:	1804d43a 	srli	r2,r3,16
  80a51c:	1463883a 	add	r17,r2,r17
  80a520:	84404436 	bltu	r16,r17,80a634 <__udivdi3+0x584>
  80a524:	84403e26 	beq	r16,r17,80a620 <__udivdi3+0x570>
  80a528:	9005883a 	mov	r2,r18
  80a52c:	0007883a 	mov	r3,zero
  80a530:	003f9106 	br	80a378 <__alt_data_end+0xff80a378>
  80a534:	88e2983a 	sll	r17,r17,r3
  80a538:	80aed83a 	srl	r23,r16,r2
  80a53c:	80e0983a 	sll	r16,r16,r3
  80a540:	882ad43a 	srli	r21,r17,16
  80a544:	9884d83a 	srl	r2,r19,r2
  80a548:	b809883a 	mov	r4,r23
  80a54c:	a80b883a 	mov	r5,r21
  80a550:	98e4983a 	sll	r18,r19,r3
  80a554:	142cb03a 	or	r22,r2,r16
  80a558:	080adcc0 	call	80adcc <__umodsi3>
  80a55c:	b809883a 	mov	r4,r23
  80a560:	a80b883a 	mov	r5,r21
  80a564:	1027883a 	mov	r19,r2
  80a568:	8d3fffcc 	andi	r20,r17,65535
  80a56c:	080ad680 	call	80ad68 <__udivsi3>
  80a570:	a009883a 	mov	r4,r20
  80a574:	100b883a 	mov	r5,r2
  80a578:	102f883a 	mov	r23,r2
  80a57c:	080ae240 	call	80ae24 <__mulsi3>
  80a580:	9826943a 	slli	r19,r19,16
  80a584:	b008d43a 	srli	r4,r22,16
  80a588:	24c8b03a 	or	r4,r4,r19
  80a58c:	2080062e 	bgeu	r4,r2,80a5a8 <__udivdi3+0x4f8>
  80a590:	2449883a 	add	r4,r4,r17
  80a594:	b8ffffc4 	addi	r3,r23,-1
  80a598:	24403c36 	bltu	r4,r17,80a68c <__udivdi3+0x5dc>
  80a59c:	20803b2e 	bgeu	r4,r2,80a68c <__udivdi3+0x5dc>
  80a5a0:	bdffff84 	addi	r23,r23,-2
  80a5a4:	2449883a 	add	r4,r4,r17
  80a5a8:	20a1c83a 	sub	r16,r4,r2
  80a5ac:	a80b883a 	mov	r5,r21
  80a5b0:	8009883a 	mov	r4,r16
  80a5b4:	080adcc0 	call	80adcc <__umodsi3>
  80a5b8:	a80b883a 	mov	r5,r21
  80a5bc:	8009883a 	mov	r4,r16
  80a5c0:	1027883a 	mov	r19,r2
  80a5c4:	080ad680 	call	80ad68 <__udivsi3>
  80a5c8:	a009883a 	mov	r4,r20
  80a5cc:	100b883a 	mov	r5,r2
  80a5d0:	9826943a 	slli	r19,r19,16
  80a5d4:	1039883a 	mov	fp,r2
  80a5d8:	080ae240 	call	80ae24 <__mulsi3>
  80a5dc:	b13fffcc 	andi	r4,r22,65535
  80a5e0:	24c8b03a 	or	r4,r4,r19
  80a5e4:	2080062e 	bgeu	r4,r2,80a600 <__udivdi3+0x550>
  80a5e8:	2449883a 	add	r4,r4,r17
  80a5ec:	e0ffffc4 	addi	r3,fp,-1
  80a5f0:	24402436 	bltu	r4,r17,80a684 <__udivdi3+0x5d4>
  80a5f4:	2080232e 	bgeu	r4,r2,80a684 <__udivdi3+0x5d4>
  80a5f8:	e73fff84 	addi	fp,fp,-2
  80a5fc:	2449883a 	add	r4,r4,r17
  80a600:	b82e943a 	slli	r23,r23,16
  80a604:	20a1c83a 	sub	r16,r4,r2
  80a608:	bf06b03a 	or	r3,r23,fp
  80a60c:	003f2806 	br	80a2b0 <__alt_data_end+0xff80a2b0>
  80a610:	2021883a 	mov	r16,r4
  80a614:	003f5306 	br	80a364 <__alt_data_end+0xff80a364>
  80a618:	1821883a 	mov	r16,r3
  80a61c:	003ef406 	br	80a1f0 <__alt_data_end+0xff80a1f0>
  80a620:	1806943a 	slli	r3,r3,16
  80a624:	9de6983a 	sll	r19,r19,r23
  80a628:	e73fffcc 	andi	fp,fp,65535
  80a62c:	1f07883a 	add	r3,r3,fp
  80a630:	98ffbd2e 	bgeu	r19,r3,80a528 <__alt_data_end+0xff80a528>
  80a634:	90bfffc4 	addi	r2,r18,-1
  80a638:	0007883a 	mov	r3,zero
  80a63c:	003f4e06 	br	80a378 <__alt_data_end+0xff80a378>
  80a640:	00800604 	movi	r2,24
  80a644:	003ef506 	br	80a21c <__alt_data_end+0xff80a21c>
  80a648:	00800604 	movi	r2,24
  80a64c:	003f0b06 	br	80a27c <__alt_data_end+0xff80a27c>
  80a650:	00800604 	movi	r2,24
  80a654:	003ead06 	br	80a10c <__alt_data_end+0xff80a10c>
  80a658:	0007883a 	mov	r3,zero
  80a65c:	00800044 	movi	r2,1
  80a660:	003f4506 	br	80a378 <__alt_data_end+0xff80a378>
  80a664:	80bf8e2e 	bgeu	r16,r2,80a4a0 <__alt_data_end+0xff80a4a0>
  80a668:	8c7fff84 	addi	r17,r17,-2
  80a66c:	8721883a 	add	r16,r16,fp
  80a670:	003f8c06 	br	80a4a4 <__alt_data_end+0xff80a4a4>
  80a674:	18bf762e 	bgeu	r3,r2,80a450 <__alt_data_end+0xff80a450>
  80a678:	ad7fff84 	addi	r21,r21,-2
  80a67c:	1f07883a 	add	r3,r3,fp
  80a680:	003f7406 	br	80a454 <__alt_data_end+0xff80a454>
  80a684:	1839883a 	mov	fp,r3
  80a688:	003fdd06 	br	80a600 <__alt_data_end+0xff80a600>
  80a68c:	182f883a 	mov	r23,r3
  80a690:	003fc506 	br	80a5a8 <__alt_data_end+0xff80a5a8>
  80a694:	b5bfff84 	addi	r22,r22,-2
  80a698:	3c4f883a 	add	r7,r7,r17
  80a69c:	003f1a06 	br	80a308 <__alt_data_end+0xff80a308>
  80a6a0:	b5bfff84 	addi	r22,r22,-2
  80a6a4:	1c47883a 	add	r3,r3,r17
  80a6a8:	003ebc06 	br	80a19c <__alt_data_end+0xff80a19c>

0080a6ac <__umoddi3>:
  80a6ac:	defff304 	addi	sp,sp,-52
  80a6b0:	df000b15 	stw	fp,44(sp)
  80a6b4:	dc400415 	stw	r17,16(sp)
  80a6b8:	dc000315 	stw	r16,12(sp)
  80a6bc:	dfc00c15 	stw	ra,48(sp)
  80a6c0:	ddc00a15 	stw	r23,40(sp)
  80a6c4:	dd800915 	stw	r22,36(sp)
  80a6c8:	dd400815 	stw	r21,32(sp)
  80a6cc:	dd000715 	stw	r20,28(sp)
  80a6d0:	dcc00615 	stw	r19,24(sp)
  80a6d4:	dc800515 	stw	r18,20(sp)
  80a6d8:	2021883a 	mov	r16,r4
  80a6dc:	2823883a 	mov	r17,r5
  80a6e0:	2839883a 	mov	fp,r5
  80a6e4:	3800401e 	bne	r7,zero,80a7e8 <__umoddi3+0x13c>
  80a6e8:	3027883a 	mov	r19,r6
  80a6ec:	2029883a 	mov	r20,r4
  80a6f0:	2980552e 	bgeu	r5,r6,80a848 <__umoddi3+0x19c>
  80a6f4:	00bfffd4 	movui	r2,65535
  80a6f8:	1180a236 	bltu	r2,r6,80a984 <__umoddi3+0x2d8>
  80a6fc:	01003fc4 	movi	r4,255
  80a700:	2189803a 	cmpltu	r4,r4,r6
  80a704:	200890fa 	slli	r4,r4,3
  80a708:	3104d83a 	srl	r2,r6,r4
  80a70c:	00c02074 	movhi	r3,129
  80a710:	18c31884 	addi	r3,r3,3170
  80a714:	1885883a 	add	r2,r3,r2
  80a718:	10c00003 	ldbu	r3,0(r2)
  80a71c:	00800804 	movi	r2,32
  80a720:	1909883a 	add	r4,r3,r4
  80a724:	1125c83a 	sub	r18,r2,r4
  80a728:	90000526 	beq	r18,zero,80a740 <__umoddi3+0x94>
  80a72c:	8ca2983a 	sll	r17,r17,r18
  80a730:	8108d83a 	srl	r4,r16,r4
  80a734:	34a6983a 	sll	r19,r6,r18
  80a738:	84a8983a 	sll	r20,r16,r18
  80a73c:	2478b03a 	or	fp,r4,r17
  80a740:	982cd43a 	srli	r22,r19,16
  80a744:	e009883a 	mov	r4,fp
  80a748:	9dffffcc 	andi	r23,r19,65535
  80a74c:	b00b883a 	mov	r5,r22
  80a750:	080adcc0 	call	80adcc <__umodsi3>
  80a754:	b00b883a 	mov	r5,r22
  80a758:	e009883a 	mov	r4,fp
  80a75c:	102b883a 	mov	r21,r2
  80a760:	080ad680 	call	80ad68 <__udivsi3>
  80a764:	100b883a 	mov	r5,r2
  80a768:	b809883a 	mov	r4,r23
  80a76c:	080ae240 	call	80ae24 <__mulsi3>
  80a770:	a82a943a 	slli	r21,r21,16
  80a774:	a006d43a 	srli	r3,r20,16
  80a778:	1d46b03a 	or	r3,r3,r21
  80a77c:	1880032e 	bgeu	r3,r2,80a78c <__umoddi3+0xe0>
  80a780:	1cc7883a 	add	r3,r3,r19
  80a784:	1cc00136 	bltu	r3,r19,80a78c <__umoddi3+0xe0>
  80a788:	18813136 	bltu	r3,r2,80ac50 <__umoddi3+0x5a4>
  80a78c:	18a1c83a 	sub	r16,r3,r2
  80a790:	b00b883a 	mov	r5,r22
  80a794:	8009883a 	mov	r4,r16
  80a798:	080adcc0 	call	80adcc <__umodsi3>
  80a79c:	b00b883a 	mov	r5,r22
  80a7a0:	8009883a 	mov	r4,r16
  80a7a4:	1023883a 	mov	r17,r2
  80a7a8:	080ad680 	call	80ad68 <__udivsi3>
  80a7ac:	100b883a 	mov	r5,r2
  80a7b0:	b809883a 	mov	r4,r23
  80a7b4:	8822943a 	slli	r17,r17,16
  80a7b8:	080ae240 	call	80ae24 <__mulsi3>
  80a7bc:	a0ffffcc 	andi	r3,r20,65535
  80a7c0:	1c46b03a 	or	r3,r3,r17
  80a7c4:	1880042e 	bgeu	r3,r2,80a7d8 <__umoddi3+0x12c>
  80a7c8:	1cc7883a 	add	r3,r3,r19
  80a7cc:	1cc00236 	bltu	r3,r19,80a7d8 <__umoddi3+0x12c>
  80a7d0:	1880012e 	bgeu	r3,r2,80a7d8 <__umoddi3+0x12c>
  80a7d4:	1cc7883a 	add	r3,r3,r19
  80a7d8:	1885c83a 	sub	r2,r3,r2
  80a7dc:	1484d83a 	srl	r2,r2,r18
  80a7e0:	0007883a 	mov	r3,zero
  80a7e4:	00005306 	br	80a934 <__umoddi3+0x288>
  80a7e8:	29c05036 	bltu	r5,r7,80a92c <__umoddi3+0x280>
  80a7ec:	00bfffd4 	movui	r2,65535
  80a7f0:	11c05c2e 	bgeu	r2,r7,80a964 <__umoddi3+0x2b8>
  80a7f4:	00804034 	movhi	r2,256
  80a7f8:	10bfffc4 	addi	r2,r2,-1
  80a7fc:	11c10636 	bltu	r2,r7,80ac18 <__umoddi3+0x56c>
  80a800:	01000404 	movi	r4,16
  80a804:	3904d83a 	srl	r2,r7,r4
  80a808:	00c02074 	movhi	r3,129
  80a80c:	18c31884 	addi	r3,r3,3170
  80a810:	1885883a 	add	r2,r3,r2
  80a814:	14c00003 	ldbu	r19,0(r2)
  80a818:	00c00804 	movi	r3,32
  80a81c:	9927883a 	add	r19,r19,r4
  80a820:	1ce9c83a 	sub	r20,r3,r19
  80a824:	a0005c1e 	bne	r20,zero,80a998 <__umoddi3+0x2ec>
  80a828:	3c400136 	bltu	r7,r17,80a830 <__umoddi3+0x184>
  80a82c:	81810a36 	bltu	r16,r6,80ac58 <__umoddi3+0x5ac>
  80a830:	8185c83a 	sub	r2,r16,r6
  80a834:	89e3c83a 	sub	r17,r17,r7
  80a838:	8089803a 	cmpltu	r4,r16,r2
  80a83c:	8939c83a 	sub	fp,r17,r4
  80a840:	e007883a 	mov	r3,fp
  80a844:	00003b06 	br	80a934 <__umoddi3+0x288>
  80a848:	3000041e 	bne	r6,zero,80a85c <__umoddi3+0x1b0>
  80a84c:	000b883a 	mov	r5,zero
  80a850:	01000044 	movi	r4,1
  80a854:	080ad680 	call	80ad68 <__udivsi3>
  80a858:	1027883a 	mov	r19,r2
  80a85c:	00bfffd4 	movui	r2,65535
  80a860:	14c0442e 	bgeu	r2,r19,80a974 <__umoddi3+0x2c8>
  80a864:	00804034 	movhi	r2,256
  80a868:	10bfffc4 	addi	r2,r2,-1
  80a86c:	14c0ec36 	bltu	r2,r19,80ac20 <__umoddi3+0x574>
  80a870:	00800404 	movi	r2,16
  80a874:	9886d83a 	srl	r3,r19,r2
  80a878:	01002074 	movhi	r4,129
  80a87c:	21031884 	addi	r4,r4,3170
  80a880:	20c7883a 	add	r3,r4,r3
  80a884:	18c00003 	ldbu	r3,0(r3)
  80a888:	1887883a 	add	r3,r3,r2
  80a88c:	00800804 	movi	r2,32
  80a890:	10e5c83a 	sub	r18,r2,r3
  80a894:	9000ab1e 	bne	r18,zero,80ab44 <__umoddi3+0x498>
  80a898:	982cd43a 	srli	r22,r19,16
  80a89c:	8ce3c83a 	sub	r17,r17,r19
  80a8a0:	9dffffcc 	andi	r23,r19,65535
  80a8a4:	b00b883a 	mov	r5,r22
  80a8a8:	8809883a 	mov	r4,r17
  80a8ac:	080adcc0 	call	80adcc <__umodsi3>
  80a8b0:	b00b883a 	mov	r5,r22
  80a8b4:	8809883a 	mov	r4,r17
  80a8b8:	102b883a 	mov	r21,r2
  80a8bc:	080ad680 	call	80ad68 <__udivsi3>
  80a8c0:	b80b883a 	mov	r5,r23
  80a8c4:	1009883a 	mov	r4,r2
  80a8c8:	080ae240 	call	80ae24 <__mulsi3>
  80a8cc:	a82a943a 	slli	r21,r21,16
  80a8d0:	a006d43a 	srli	r3,r20,16
  80a8d4:	1d46b03a 	or	r3,r3,r21
  80a8d8:	1880042e 	bgeu	r3,r2,80a8ec <__umoddi3+0x240>
  80a8dc:	1cc7883a 	add	r3,r3,r19
  80a8e0:	1cc00236 	bltu	r3,r19,80a8ec <__umoddi3+0x240>
  80a8e4:	1880012e 	bgeu	r3,r2,80a8ec <__umoddi3+0x240>
  80a8e8:	1cc7883a 	add	r3,r3,r19
  80a8ec:	18a1c83a 	sub	r16,r3,r2
  80a8f0:	b00b883a 	mov	r5,r22
  80a8f4:	8009883a 	mov	r4,r16
  80a8f8:	080adcc0 	call	80adcc <__umodsi3>
  80a8fc:	1023883a 	mov	r17,r2
  80a900:	b00b883a 	mov	r5,r22
  80a904:	8009883a 	mov	r4,r16
  80a908:	080ad680 	call	80ad68 <__udivsi3>
  80a90c:	8822943a 	slli	r17,r17,16
  80a910:	b80b883a 	mov	r5,r23
  80a914:	1009883a 	mov	r4,r2
  80a918:	080ae240 	call	80ae24 <__mulsi3>
  80a91c:	a53fffcc 	andi	r20,r20,65535
  80a920:	a446b03a 	or	r3,r20,r17
  80a924:	18bfac2e 	bgeu	r3,r2,80a7d8 <__alt_data_end+0xff80a7d8>
  80a928:	003fa706 	br	80a7c8 <__alt_data_end+0xff80a7c8>
  80a92c:	2005883a 	mov	r2,r4
  80a930:	2807883a 	mov	r3,r5
  80a934:	dfc00c17 	ldw	ra,48(sp)
  80a938:	df000b17 	ldw	fp,44(sp)
  80a93c:	ddc00a17 	ldw	r23,40(sp)
  80a940:	dd800917 	ldw	r22,36(sp)
  80a944:	dd400817 	ldw	r21,32(sp)
  80a948:	dd000717 	ldw	r20,28(sp)
  80a94c:	dcc00617 	ldw	r19,24(sp)
  80a950:	dc800517 	ldw	r18,20(sp)
  80a954:	dc400417 	ldw	r17,16(sp)
  80a958:	dc000317 	ldw	r16,12(sp)
  80a95c:	dec00d04 	addi	sp,sp,52
  80a960:	f800283a 	ret
  80a964:	04c03fc4 	movi	r19,255
  80a968:	99c9803a 	cmpltu	r4,r19,r7
  80a96c:	200890fa 	slli	r4,r4,3
  80a970:	003fa406 	br	80a804 <__alt_data_end+0xff80a804>
  80a974:	00803fc4 	movi	r2,255
  80a978:	14c5803a 	cmpltu	r2,r2,r19
  80a97c:	100490fa 	slli	r2,r2,3
  80a980:	003fbc06 	br	80a874 <__alt_data_end+0xff80a874>
  80a984:	00804034 	movhi	r2,256
  80a988:	10bfffc4 	addi	r2,r2,-1
  80a98c:	1180a636 	bltu	r2,r6,80ac28 <__umoddi3+0x57c>
  80a990:	01000404 	movi	r4,16
  80a994:	003f5c06 	br	80a708 <__alt_data_end+0xff80a708>
  80a998:	3d0e983a 	sll	r7,r7,r20
  80a99c:	34ead83a 	srl	r21,r6,r19
  80a9a0:	8cc6d83a 	srl	r3,r17,r19
  80a9a4:	8d10983a 	sll	r8,r17,r20
  80a9a8:	3d6ab03a 	or	r21,r7,r21
  80a9ac:	a82cd43a 	srli	r22,r21,16
  80a9b0:	84e2d83a 	srl	r17,r16,r19
  80a9b4:	1809883a 	mov	r4,r3
  80a9b8:	b00b883a 	mov	r5,r22
  80a9bc:	8a22b03a 	or	r17,r17,r8
  80a9c0:	3524983a 	sll	r18,r6,r20
  80a9c4:	dc400015 	stw	r17,0(sp)
  80a9c8:	d8c00115 	stw	r3,4(sp)
  80a9cc:	080adcc0 	call	80adcc <__umodsi3>
  80a9d0:	d8c00117 	ldw	r3,4(sp)
  80a9d4:	b00b883a 	mov	r5,r22
  80a9d8:	1039883a 	mov	fp,r2
  80a9dc:	1809883a 	mov	r4,r3
  80a9e0:	080ad680 	call	80ad68 <__udivsi3>
  80a9e4:	adffffcc 	andi	r23,r21,65535
  80a9e8:	100b883a 	mov	r5,r2
  80a9ec:	b809883a 	mov	r4,r23
  80a9f0:	1023883a 	mov	r17,r2
  80a9f4:	080ae240 	call	80ae24 <__mulsi3>
  80a9f8:	d9400017 	ldw	r5,0(sp)
  80a9fc:	e008943a 	slli	r4,fp,16
  80aa00:	8520983a 	sll	r16,r16,r20
  80aa04:	2806d43a 	srli	r3,r5,16
  80aa08:	1906b03a 	or	r3,r3,r4
  80aa0c:	1880042e 	bgeu	r3,r2,80aa20 <__umoddi3+0x374>
  80aa10:	1d47883a 	add	r3,r3,r21
  80aa14:	893fffc4 	addi	r4,r17,-1
  80aa18:	1d40892e 	bgeu	r3,r21,80ac40 <__umoddi3+0x594>
  80aa1c:	2023883a 	mov	r17,r4
  80aa20:	18b9c83a 	sub	fp,r3,r2
  80aa24:	b00b883a 	mov	r5,r22
  80aa28:	e009883a 	mov	r4,fp
  80aa2c:	080adcc0 	call	80adcc <__umodsi3>
  80aa30:	b00b883a 	mov	r5,r22
  80aa34:	e009883a 	mov	r4,fp
  80aa38:	d8800215 	stw	r2,8(sp)
  80aa3c:	080ad680 	call	80ad68 <__udivsi3>
  80aa40:	100b883a 	mov	r5,r2
  80aa44:	b809883a 	mov	r4,r23
  80aa48:	102d883a 	mov	r22,r2
  80aa4c:	080ae240 	call	80ae24 <__mulsi3>
  80aa50:	d9800217 	ldw	r6,8(sp)
  80aa54:	d8c00017 	ldw	r3,0(sp)
  80aa58:	300c943a 	slli	r6,r6,16
  80aa5c:	1a3fffcc 	andi	r8,r3,65535
  80aa60:	4190b03a 	or	r8,r8,r6
  80aa64:	4080042e 	bgeu	r8,r2,80aa78 <__umoddi3+0x3cc>
  80aa68:	4551883a 	add	r8,r8,r21
  80aa6c:	b0ffffc4 	addi	r3,r22,-1
  80aa70:	45406f2e 	bgeu	r8,r21,80ac30 <__umoddi3+0x584>
  80aa74:	182d883a 	mov	r22,r3
  80aa78:	880e943a 	slli	r7,r17,16
  80aa7c:	9006d43a 	srli	r3,r18,16
  80aa80:	91bfffcc 	andi	r6,r18,65535
  80aa84:	3dacb03a 	or	r22,r7,r22
  80aa88:	b02ed43a 	srli	r23,r22,16
  80aa8c:	b5bfffcc 	andi	r22,r22,65535
  80aa90:	300b883a 	mov	r5,r6
  80aa94:	b009883a 	mov	r4,r22
  80aa98:	40a3c83a 	sub	r17,r8,r2
  80aa9c:	d8c00115 	stw	r3,4(sp)
  80aaa0:	d9800215 	stw	r6,8(sp)
  80aaa4:	080ae240 	call	80ae24 <__mulsi3>
  80aaa8:	d9800217 	ldw	r6,8(sp)
  80aaac:	b809883a 	mov	r4,r23
  80aab0:	1039883a 	mov	fp,r2
  80aab4:	300b883a 	mov	r5,r6
  80aab8:	080ae240 	call	80ae24 <__mulsi3>
  80aabc:	d8c00117 	ldw	r3,4(sp)
  80aac0:	b809883a 	mov	r4,r23
  80aac4:	d8800215 	stw	r2,8(sp)
  80aac8:	180b883a 	mov	r5,r3
  80aacc:	080ae240 	call	80ae24 <__mulsi3>
  80aad0:	d8c00117 	ldw	r3,4(sp)
  80aad4:	b009883a 	mov	r4,r22
  80aad8:	102f883a 	mov	r23,r2
  80aadc:	180b883a 	mov	r5,r3
  80aae0:	080ae240 	call	80ae24 <__mulsi3>
  80aae4:	d9800217 	ldw	r6,8(sp)
  80aae8:	e006d43a 	srli	r3,fp,16
  80aaec:	1185883a 	add	r2,r2,r6
  80aaf0:	1885883a 	add	r2,r3,r2
  80aaf4:	1180022e 	bgeu	r2,r6,80ab00 <__umoddi3+0x454>
  80aaf8:	00c00074 	movhi	r3,1
  80aafc:	b8ef883a 	add	r23,r23,r3
  80ab00:	1006d43a 	srli	r3,r2,16
  80ab04:	1004943a 	slli	r2,r2,16
  80ab08:	e73fffcc 	andi	fp,fp,65535
  80ab0c:	1dc7883a 	add	r3,r3,r23
  80ab10:	1739883a 	add	fp,r2,fp
  80ab14:	88c03a36 	bltu	r17,r3,80ac00 <__umoddi3+0x554>
  80ab18:	88c05126 	beq	r17,r3,80ac60 <__umoddi3+0x5b4>
  80ab1c:	88c9c83a 	sub	r4,r17,r3
  80ab20:	e00f883a 	mov	r7,fp
  80ab24:	81cfc83a 	sub	r7,r16,r7
  80ab28:	81c7803a 	cmpltu	r3,r16,r7
  80ab2c:	20c7c83a 	sub	r3,r4,r3
  80ab30:	1cc4983a 	sll	r2,r3,r19
  80ab34:	3d0ed83a 	srl	r7,r7,r20
  80ab38:	1d06d83a 	srl	r3,r3,r20
  80ab3c:	11c4b03a 	or	r2,r2,r7
  80ab40:	003f7c06 	br	80a934 <__alt_data_end+0xff80a934>
  80ab44:	9ca6983a 	sll	r19,r19,r18
  80ab48:	88f8d83a 	srl	fp,r17,r3
  80ab4c:	80c4d83a 	srl	r2,r16,r3
  80ab50:	982cd43a 	srli	r22,r19,16
  80ab54:	8ca2983a 	sll	r17,r17,r18
  80ab58:	e009883a 	mov	r4,fp
  80ab5c:	b00b883a 	mov	r5,r22
  80ab60:	146ab03a 	or	r21,r2,r17
  80ab64:	080adcc0 	call	80adcc <__umodsi3>
  80ab68:	b00b883a 	mov	r5,r22
  80ab6c:	e009883a 	mov	r4,fp
  80ab70:	1029883a 	mov	r20,r2
  80ab74:	9dffffcc 	andi	r23,r19,65535
  80ab78:	080ad680 	call	80ad68 <__udivsi3>
  80ab7c:	b809883a 	mov	r4,r23
  80ab80:	100b883a 	mov	r5,r2
  80ab84:	080ae240 	call	80ae24 <__mulsi3>
  80ab88:	a008943a 	slli	r4,r20,16
  80ab8c:	a806d43a 	srli	r3,r21,16
  80ab90:	84a8983a 	sll	r20,r16,r18
  80ab94:	1906b03a 	or	r3,r3,r4
  80ab98:	1880042e 	bgeu	r3,r2,80abac <__umoddi3+0x500>
  80ab9c:	1cc7883a 	add	r3,r3,r19
  80aba0:	1cc00236 	bltu	r3,r19,80abac <__umoddi3+0x500>
  80aba4:	1880012e 	bgeu	r3,r2,80abac <__umoddi3+0x500>
  80aba8:	1cc7883a 	add	r3,r3,r19
  80abac:	18a3c83a 	sub	r17,r3,r2
  80abb0:	b00b883a 	mov	r5,r22
  80abb4:	8809883a 	mov	r4,r17
  80abb8:	080adcc0 	call	80adcc <__umodsi3>
  80abbc:	b00b883a 	mov	r5,r22
  80abc0:	8809883a 	mov	r4,r17
  80abc4:	1021883a 	mov	r16,r2
  80abc8:	080ad680 	call	80ad68 <__udivsi3>
  80abcc:	100b883a 	mov	r5,r2
  80abd0:	b809883a 	mov	r4,r23
  80abd4:	8020943a 	slli	r16,r16,16
  80abd8:	080ae240 	call	80ae24 <__mulsi3>
  80abdc:	a8ffffcc 	andi	r3,r21,65535
  80abe0:	1c06b03a 	or	r3,r3,r16
  80abe4:	1880042e 	bgeu	r3,r2,80abf8 <__umoddi3+0x54c>
  80abe8:	1cc7883a 	add	r3,r3,r19
  80abec:	1cc00236 	bltu	r3,r19,80abf8 <__umoddi3+0x54c>
  80abf0:	1880012e 	bgeu	r3,r2,80abf8 <__umoddi3+0x54c>
  80abf4:	1cc7883a 	add	r3,r3,r19
  80abf8:	18a3c83a 	sub	r17,r3,r2
  80abfc:	003f2906 	br	80a8a4 <__alt_data_end+0xff80a8a4>
  80ac00:	e48fc83a 	sub	r7,fp,r18
  80ac04:	1d49c83a 	sub	r4,r3,r21
  80ac08:	e1f9803a 	cmpltu	fp,fp,r7
  80ac0c:	2739c83a 	sub	fp,r4,fp
  80ac10:	8f09c83a 	sub	r4,r17,fp
  80ac14:	003fc306 	br	80ab24 <__alt_data_end+0xff80ab24>
  80ac18:	01000604 	movi	r4,24
  80ac1c:	003ef906 	br	80a804 <__alt_data_end+0xff80a804>
  80ac20:	00800604 	movi	r2,24
  80ac24:	003f1306 	br	80a874 <__alt_data_end+0xff80a874>
  80ac28:	01000604 	movi	r4,24
  80ac2c:	003eb606 	br	80a708 <__alt_data_end+0xff80a708>
  80ac30:	40bf902e 	bgeu	r8,r2,80aa74 <__alt_data_end+0xff80aa74>
  80ac34:	b5bfff84 	addi	r22,r22,-2
  80ac38:	4551883a 	add	r8,r8,r21
  80ac3c:	003f8e06 	br	80aa78 <__alt_data_end+0xff80aa78>
  80ac40:	18bf762e 	bgeu	r3,r2,80aa1c <__alt_data_end+0xff80aa1c>
  80ac44:	8c7fff84 	addi	r17,r17,-2
  80ac48:	1d47883a 	add	r3,r3,r21
  80ac4c:	003f7406 	br	80aa20 <__alt_data_end+0xff80aa20>
  80ac50:	1cc7883a 	add	r3,r3,r19
  80ac54:	003ecd06 	br	80a78c <__alt_data_end+0xff80a78c>
  80ac58:	8005883a 	mov	r2,r16
  80ac5c:	003ef806 	br	80a840 <__alt_data_end+0xff80a840>
  80ac60:	873fe736 	bltu	r16,fp,80ac00 <__alt_data_end+0xff80ac00>
  80ac64:	e00f883a 	mov	r7,fp
  80ac68:	0009883a 	mov	r4,zero
  80ac6c:	003fad06 	br	80ab24 <__alt_data_end+0xff80ab24>

0080ac70 <__divsi3>:
  80ac70:	20001b16 	blt	r4,zero,80ace0 <__divsi3+0x70>
  80ac74:	000f883a 	mov	r7,zero
  80ac78:	28001616 	blt	r5,zero,80acd4 <__divsi3+0x64>
  80ac7c:	200d883a 	mov	r6,r4
  80ac80:	29001a2e 	bgeu	r5,r4,80acec <__divsi3+0x7c>
  80ac84:	00800804 	movi	r2,32
  80ac88:	00c00044 	movi	r3,1
  80ac8c:	00000106 	br	80ac94 <__divsi3+0x24>
  80ac90:	10000d26 	beq	r2,zero,80acc8 <__divsi3+0x58>
  80ac94:	294b883a 	add	r5,r5,r5
  80ac98:	10bfffc4 	addi	r2,r2,-1
  80ac9c:	18c7883a 	add	r3,r3,r3
  80aca0:	293ffb36 	bltu	r5,r4,80ac90 <__alt_data_end+0xff80ac90>
  80aca4:	0005883a 	mov	r2,zero
  80aca8:	18000726 	beq	r3,zero,80acc8 <__divsi3+0x58>
  80acac:	0005883a 	mov	r2,zero
  80acb0:	31400236 	bltu	r6,r5,80acbc <__divsi3+0x4c>
  80acb4:	314dc83a 	sub	r6,r6,r5
  80acb8:	10c4b03a 	or	r2,r2,r3
  80acbc:	1806d07a 	srli	r3,r3,1
  80acc0:	280ad07a 	srli	r5,r5,1
  80acc4:	183ffa1e 	bne	r3,zero,80acb0 <__alt_data_end+0xff80acb0>
  80acc8:	38000126 	beq	r7,zero,80acd0 <__divsi3+0x60>
  80accc:	0085c83a 	sub	r2,zero,r2
  80acd0:	f800283a 	ret
  80acd4:	014bc83a 	sub	r5,zero,r5
  80acd8:	39c0005c 	xori	r7,r7,1
  80acdc:	003fe706 	br	80ac7c <__alt_data_end+0xff80ac7c>
  80ace0:	0109c83a 	sub	r4,zero,r4
  80ace4:	01c00044 	movi	r7,1
  80ace8:	003fe306 	br	80ac78 <__alt_data_end+0xff80ac78>
  80acec:	00c00044 	movi	r3,1
  80acf0:	003fee06 	br	80acac <__alt_data_end+0xff80acac>

0080acf4 <__modsi3>:
  80acf4:	20001716 	blt	r4,zero,80ad54 <__modsi3+0x60>
  80acf8:	000f883a 	mov	r7,zero
  80acfc:	2005883a 	mov	r2,r4
  80ad00:	28001216 	blt	r5,zero,80ad4c <__modsi3+0x58>
  80ad04:	2900162e 	bgeu	r5,r4,80ad60 <__modsi3+0x6c>
  80ad08:	01800804 	movi	r6,32
  80ad0c:	00c00044 	movi	r3,1
  80ad10:	00000106 	br	80ad18 <__modsi3+0x24>
  80ad14:	30000a26 	beq	r6,zero,80ad40 <__modsi3+0x4c>
  80ad18:	294b883a 	add	r5,r5,r5
  80ad1c:	31bfffc4 	addi	r6,r6,-1
  80ad20:	18c7883a 	add	r3,r3,r3
  80ad24:	293ffb36 	bltu	r5,r4,80ad14 <__alt_data_end+0xff80ad14>
  80ad28:	18000526 	beq	r3,zero,80ad40 <__modsi3+0x4c>
  80ad2c:	1806d07a 	srli	r3,r3,1
  80ad30:	11400136 	bltu	r2,r5,80ad38 <__modsi3+0x44>
  80ad34:	1145c83a 	sub	r2,r2,r5
  80ad38:	280ad07a 	srli	r5,r5,1
  80ad3c:	183ffb1e 	bne	r3,zero,80ad2c <__alt_data_end+0xff80ad2c>
  80ad40:	38000126 	beq	r7,zero,80ad48 <__modsi3+0x54>
  80ad44:	0085c83a 	sub	r2,zero,r2
  80ad48:	f800283a 	ret
  80ad4c:	014bc83a 	sub	r5,zero,r5
  80ad50:	003fec06 	br	80ad04 <__alt_data_end+0xff80ad04>
  80ad54:	0109c83a 	sub	r4,zero,r4
  80ad58:	01c00044 	movi	r7,1
  80ad5c:	003fe706 	br	80acfc <__alt_data_end+0xff80acfc>
  80ad60:	00c00044 	movi	r3,1
  80ad64:	003ff106 	br	80ad2c <__alt_data_end+0xff80ad2c>

0080ad68 <__udivsi3>:
  80ad68:	200d883a 	mov	r6,r4
  80ad6c:	2900152e 	bgeu	r5,r4,80adc4 <__udivsi3+0x5c>
  80ad70:	28001416 	blt	r5,zero,80adc4 <__udivsi3+0x5c>
  80ad74:	00800804 	movi	r2,32
  80ad78:	00c00044 	movi	r3,1
  80ad7c:	00000206 	br	80ad88 <__udivsi3+0x20>
  80ad80:	10000e26 	beq	r2,zero,80adbc <__udivsi3+0x54>
  80ad84:	28000516 	blt	r5,zero,80ad9c <__udivsi3+0x34>
  80ad88:	294b883a 	add	r5,r5,r5
  80ad8c:	10bfffc4 	addi	r2,r2,-1
  80ad90:	18c7883a 	add	r3,r3,r3
  80ad94:	293ffa36 	bltu	r5,r4,80ad80 <__alt_data_end+0xff80ad80>
  80ad98:	18000826 	beq	r3,zero,80adbc <__udivsi3+0x54>
  80ad9c:	0005883a 	mov	r2,zero
  80ada0:	31400236 	bltu	r6,r5,80adac <__udivsi3+0x44>
  80ada4:	314dc83a 	sub	r6,r6,r5
  80ada8:	10c4b03a 	or	r2,r2,r3
  80adac:	1806d07a 	srli	r3,r3,1
  80adb0:	280ad07a 	srli	r5,r5,1
  80adb4:	183ffa1e 	bne	r3,zero,80ada0 <__alt_data_end+0xff80ada0>
  80adb8:	f800283a 	ret
  80adbc:	0005883a 	mov	r2,zero
  80adc0:	f800283a 	ret
  80adc4:	00c00044 	movi	r3,1
  80adc8:	003ff406 	br	80ad9c <__alt_data_end+0xff80ad9c>

0080adcc <__umodsi3>:
  80adcc:	2005883a 	mov	r2,r4
  80add0:	2900122e 	bgeu	r5,r4,80ae1c <__umodsi3+0x50>
  80add4:	28001116 	blt	r5,zero,80ae1c <__umodsi3+0x50>
  80add8:	01800804 	movi	r6,32
  80addc:	00c00044 	movi	r3,1
  80ade0:	00000206 	br	80adec <__umodsi3+0x20>
  80ade4:	30000c26 	beq	r6,zero,80ae18 <__umodsi3+0x4c>
  80ade8:	28000516 	blt	r5,zero,80ae00 <__umodsi3+0x34>
  80adec:	294b883a 	add	r5,r5,r5
  80adf0:	31bfffc4 	addi	r6,r6,-1
  80adf4:	18c7883a 	add	r3,r3,r3
  80adf8:	293ffa36 	bltu	r5,r4,80ade4 <__alt_data_end+0xff80ade4>
  80adfc:	18000626 	beq	r3,zero,80ae18 <__umodsi3+0x4c>
  80ae00:	1806d07a 	srli	r3,r3,1
  80ae04:	11400136 	bltu	r2,r5,80ae0c <__umodsi3+0x40>
  80ae08:	1145c83a 	sub	r2,r2,r5
  80ae0c:	280ad07a 	srli	r5,r5,1
  80ae10:	183ffb1e 	bne	r3,zero,80ae00 <__alt_data_end+0xff80ae00>
  80ae14:	f800283a 	ret
  80ae18:	f800283a 	ret
  80ae1c:	00c00044 	movi	r3,1
  80ae20:	003ff706 	br	80ae00 <__alt_data_end+0xff80ae00>

0080ae24 <__mulsi3>:
  80ae24:	0005883a 	mov	r2,zero
  80ae28:	20000726 	beq	r4,zero,80ae48 <__mulsi3+0x24>
  80ae2c:	20c0004c 	andi	r3,r4,1
  80ae30:	2008d07a 	srli	r4,r4,1
  80ae34:	18000126 	beq	r3,zero,80ae3c <__mulsi3+0x18>
  80ae38:	1145883a 	add	r2,r2,r5
  80ae3c:	294b883a 	add	r5,r5,r5
  80ae40:	203ffa1e 	bne	r4,zero,80ae2c <__alt_data_end+0xff80ae2c>
  80ae44:	f800283a 	ret
  80ae48:	f800283a 	ret

0080ae4c <__adddf3>:
  80ae4c:	02c00434 	movhi	r11,16
  80ae50:	5affffc4 	addi	r11,r11,-1
  80ae54:	2806d7fa 	srli	r3,r5,31
  80ae58:	2ad4703a 	and	r10,r5,r11
  80ae5c:	3ad2703a 	and	r9,r7,r11
  80ae60:	3804d53a 	srli	r2,r7,20
  80ae64:	3018d77a 	srli	r12,r6,29
  80ae68:	280ad53a 	srli	r5,r5,20
  80ae6c:	501490fa 	slli	r10,r10,3
  80ae70:	2010d77a 	srli	r8,r4,29
  80ae74:	481290fa 	slli	r9,r9,3
  80ae78:	380ed7fa 	srli	r7,r7,31
  80ae7c:	defffb04 	addi	sp,sp,-20
  80ae80:	dc800215 	stw	r18,8(sp)
  80ae84:	dc400115 	stw	r17,4(sp)
  80ae88:	dc000015 	stw	r16,0(sp)
  80ae8c:	dfc00415 	stw	ra,16(sp)
  80ae90:	dcc00315 	stw	r19,12(sp)
  80ae94:	1c803fcc 	andi	r18,r3,255
  80ae98:	2c01ffcc 	andi	r16,r5,2047
  80ae9c:	5210b03a 	or	r8,r10,r8
  80aea0:	202290fa 	slli	r17,r4,3
  80aea4:	1081ffcc 	andi	r2,r2,2047
  80aea8:	4b12b03a 	or	r9,r9,r12
  80aeac:	300c90fa 	slli	r6,r6,3
  80aeb0:	91c07526 	beq	r18,r7,80b088 <__adddf3+0x23c>
  80aeb4:	8087c83a 	sub	r3,r16,r2
  80aeb8:	00c0ab0e 	bge	zero,r3,80b168 <__adddf3+0x31c>
  80aebc:	10002a1e 	bne	r2,zero,80af68 <__adddf3+0x11c>
  80aec0:	4984b03a 	or	r2,r9,r6
  80aec4:	1000961e 	bne	r2,zero,80b120 <__adddf3+0x2d4>
  80aec8:	888001cc 	andi	r2,r17,7
  80aecc:	10000726 	beq	r2,zero,80aeec <__adddf3+0xa0>
  80aed0:	888003cc 	andi	r2,r17,15
  80aed4:	00c00104 	movi	r3,4
  80aed8:	10c00426 	beq	r2,r3,80aeec <__adddf3+0xa0>
  80aedc:	88c7883a 	add	r3,r17,r3
  80aee0:	1c63803a 	cmpltu	r17,r3,r17
  80aee4:	4451883a 	add	r8,r8,r17
  80aee8:	1823883a 	mov	r17,r3
  80aeec:	4080202c 	andhi	r2,r8,128
  80aef0:	10005926 	beq	r2,zero,80b058 <__adddf3+0x20c>
  80aef4:	84000044 	addi	r16,r16,1
  80aef8:	0081ffc4 	movi	r2,2047
  80aefc:	8080ba26 	beq	r16,r2,80b1e8 <__adddf3+0x39c>
  80af00:	00bfe034 	movhi	r2,65408
  80af04:	10bfffc4 	addi	r2,r2,-1
  80af08:	4090703a 	and	r8,r8,r2
  80af0c:	4004977a 	slli	r2,r8,29
  80af10:	4010927a 	slli	r8,r8,9
  80af14:	8822d0fa 	srli	r17,r17,3
  80af18:	8401ffcc 	andi	r16,r16,2047
  80af1c:	4010d33a 	srli	r8,r8,12
  80af20:	9007883a 	mov	r3,r18
  80af24:	1444b03a 	or	r2,r2,r17
  80af28:	8401ffcc 	andi	r16,r16,2047
  80af2c:	8020953a 	slli	r16,r16,20
  80af30:	18c03fcc 	andi	r3,r3,255
  80af34:	01000434 	movhi	r4,16
  80af38:	213fffc4 	addi	r4,r4,-1
  80af3c:	180697fa 	slli	r3,r3,31
  80af40:	4110703a 	and	r8,r8,r4
  80af44:	4410b03a 	or	r8,r8,r16
  80af48:	40c6b03a 	or	r3,r8,r3
  80af4c:	dfc00417 	ldw	ra,16(sp)
  80af50:	dcc00317 	ldw	r19,12(sp)
  80af54:	dc800217 	ldw	r18,8(sp)
  80af58:	dc400117 	ldw	r17,4(sp)
  80af5c:	dc000017 	ldw	r16,0(sp)
  80af60:	dec00504 	addi	sp,sp,20
  80af64:	f800283a 	ret
  80af68:	0081ffc4 	movi	r2,2047
  80af6c:	80bfd626 	beq	r16,r2,80aec8 <__alt_data_end+0xff80aec8>
  80af70:	4a402034 	orhi	r9,r9,128
  80af74:	00800e04 	movi	r2,56
  80af78:	10c09f16 	blt	r2,r3,80b1f8 <__adddf3+0x3ac>
  80af7c:	008007c4 	movi	r2,31
  80af80:	10c0c216 	blt	r2,r3,80b28c <__adddf3+0x440>
  80af84:	00800804 	movi	r2,32
  80af88:	10c5c83a 	sub	r2,r2,r3
  80af8c:	488a983a 	sll	r5,r9,r2
  80af90:	30c8d83a 	srl	r4,r6,r3
  80af94:	3084983a 	sll	r2,r6,r2
  80af98:	48c6d83a 	srl	r3,r9,r3
  80af9c:	290cb03a 	or	r6,r5,r4
  80afa0:	1004c03a 	cmpne	r2,r2,zero
  80afa4:	308cb03a 	or	r6,r6,r2
  80afa8:	898dc83a 	sub	r6,r17,r6
  80afac:	89a3803a 	cmpltu	r17,r17,r6
  80afb0:	40d1c83a 	sub	r8,r8,r3
  80afb4:	4451c83a 	sub	r8,r8,r17
  80afb8:	3023883a 	mov	r17,r6
  80afbc:	4080202c 	andhi	r2,r8,128
  80afc0:	10002326 	beq	r2,zero,80b050 <__adddf3+0x204>
  80afc4:	04c02034 	movhi	r19,128
  80afc8:	9cffffc4 	addi	r19,r19,-1
  80afcc:	44e6703a 	and	r19,r8,r19
  80afd0:	98007626 	beq	r19,zero,80b1ac <__adddf3+0x360>
  80afd4:	9809883a 	mov	r4,r19
  80afd8:	080074c0 	call	80074c <__clzsi2>
  80afdc:	10fffe04 	addi	r3,r2,-8
  80afe0:	010007c4 	movi	r4,31
  80afe4:	20c07716 	blt	r4,r3,80b1c4 <__adddf3+0x378>
  80afe8:	00800804 	movi	r2,32
  80afec:	10c5c83a 	sub	r2,r2,r3
  80aff0:	8884d83a 	srl	r2,r17,r2
  80aff4:	98d0983a 	sll	r8,r19,r3
  80aff8:	88e2983a 	sll	r17,r17,r3
  80affc:	1204b03a 	or	r2,r2,r8
  80b000:	1c007416 	blt	r3,r16,80b1d4 <__adddf3+0x388>
  80b004:	1c21c83a 	sub	r16,r3,r16
  80b008:	82000044 	addi	r8,r16,1
  80b00c:	00c007c4 	movi	r3,31
  80b010:	1a009116 	blt	r3,r8,80b258 <__adddf3+0x40c>
  80b014:	00c00804 	movi	r3,32
  80b018:	1a07c83a 	sub	r3,r3,r8
  80b01c:	8a08d83a 	srl	r4,r17,r8
  80b020:	88e2983a 	sll	r17,r17,r3
  80b024:	10c6983a 	sll	r3,r2,r3
  80b028:	1210d83a 	srl	r8,r2,r8
  80b02c:	8804c03a 	cmpne	r2,r17,zero
  80b030:	1906b03a 	or	r3,r3,r4
  80b034:	18a2b03a 	or	r17,r3,r2
  80b038:	0021883a 	mov	r16,zero
  80b03c:	003fa206 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b040:	1890b03a 	or	r8,r3,r2
  80b044:	40017d26 	beq	r8,zero,80b63c <__adddf3+0x7f0>
  80b048:	1011883a 	mov	r8,r2
  80b04c:	1823883a 	mov	r17,r3
  80b050:	888001cc 	andi	r2,r17,7
  80b054:	103f9e1e 	bne	r2,zero,80aed0 <__alt_data_end+0xff80aed0>
  80b058:	4004977a 	slli	r2,r8,29
  80b05c:	8822d0fa 	srli	r17,r17,3
  80b060:	4010d0fa 	srli	r8,r8,3
  80b064:	9007883a 	mov	r3,r18
  80b068:	1444b03a 	or	r2,r2,r17
  80b06c:	0101ffc4 	movi	r4,2047
  80b070:	81002426 	beq	r16,r4,80b104 <__adddf3+0x2b8>
  80b074:	8120703a 	and	r16,r16,r4
  80b078:	01000434 	movhi	r4,16
  80b07c:	213fffc4 	addi	r4,r4,-1
  80b080:	4110703a 	and	r8,r8,r4
  80b084:	003fa806 	br	80af28 <__alt_data_end+0xff80af28>
  80b088:	8089c83a 	sub	r4,r16,r2
  80b08c:	01005e0e 	bge	zero,r4,80b208 <__adddf3+0x3bc>
  80b090:	10002b26 	beq	r2,zero,80b140 <__adddf3+0x2f4>
  80b094:	0081ffc4 	movi	r2,2047
  80b098:	80bf8b26 	beq	r16,r2,80aec8 <__alt_data_end+0xff80aec8>
  80b09c:	4a402034 	orhi	r9,r9,128
  80b0a0:	00800e04 	movi	r2,56
  80b0a4:	1100a40e 	bge	r2,r4,80b338 <__adddf3+0x4ec>
  80b0a8:	498cb03a 	or	r6,r9,r6
  80b0ac:	300ac03a 	cmpne	r5,r6,zero
  80b0b0:	0013883a 	mov	r9,zero
  80b0b4:	2c4b883a 	add	r5,r5,r17
  80b0b8:	2c63803a 	cmpltu	r17,r5,r17
  80b0bc:	4a11883a 	add	r8,r9,r8
  80b0c0:	8a11883a 	add	r8,r17,r8
  80b0c4:	2823883a 	mov	r17,r5
  80b0c8:	4080202c 	andhi	r2,r8,128
  80b0cc:	103fe026 	beq	r2,zero,80b050 <__alt_data_end+0xff80b050>
  80b0d0:	84000044 	addi	r16,r16,1
  80b0d4:	0081ffc4 	movi	r2,2047
  80b0d8:	8080d226 	beq	r16,r2,80b424 <__adddf3+0x5d8>
  80b0dc:	00bfe034 	movhi	r2,65408
  80b0e0:	10bfffc4 	addi	r2,r2,-1
  80b0e4:	4090703a 	and	r8,r8,r2
  80b0e8:	880ad07a 	srli	r5,r17,1
  80b0ec:	400897fa 	slli	r4,r8,31
  80b0f0:	88c0004c 	andi	r3,r17,1
  80b0f4:	28e2b03a 	or	r17,r5,r3
  80b0f8:	4010d07a 	srli	r8,r8,1
  80b0fc:	2462b03a 	or	r17,r4,r17
  80b100:	003f7106 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b104:	4088b03a 	or	r4,r8,r2
  80b108:	20014526 	beq	r4,zero,80b620 <__adddf3+0x7d4>
  80b10c:	01000434 	movhi	r4,16
  80b110:	42000234 	orhi	r8,r8,8
  80b114:	213fffc4 	addi	r4,r4,-1
  80b118:	4110703a 	and	r8,r8,r4
  80b11c:	003f8206 	br	80af28 <__alt_data_end+0xff80af28>
  80b120:	18ffffc4 	addi	r3,r3,-1
  80b124:	1800491e 	bne	r3,zero,80b24c <__adddf3+0x400>
  80b128:	898bc83a 	sub	r5,r17,r6
  80b12c:	8963803a 	cmpltu	r17,r17,r5
  80b130:	4251c83a 	sub	r8,r8,r9
  80b134:	4451c83a 	sub	r8,r8,r17
  80b138:	2823883a 	mov	r17,r5
  80b13c:	003f9f06 	br	80afbc <__alt_data_end+0xff80afbc>
  80b140:	4984b03a 	or	r2,r9,r6
  80b144:	103f6026 	beq	r2,zero,80aec8 <__alt_data_end+0xff80aec8>
  80b148:	213fffc4 	addi	r4,r4,-1
  80b14c:	2000931e 	bne	r4,zero,80b39c <__adddf3+0x550>
  80b150:	898d883a 	add	r6,r17,r6
  80b154:	3463803a 	cmpltu	r17,r6,r17
  80b158:	4251883a 	add	r8,r8,r9
  80b15c:	8a11883a 	add	r8,r17,r8
  80b160:	3023883a 	mov	r17,r6
  80b164:	003fd806 	br	80b0c8 <__alt_data_end+0xff80b0c8>
  80b168:	1800541e 	bne	r3,zero,80b2bc <__adddf3+0x470>
  80b16c:	80800044 	addi	r2,r16,1
  80b170:	1081ffcc 	andi	r2,r2,2047
  80b174:	00c00044 	movi	r3,1
  80b178:	1880a00e 	bge	r3,r2,80b3fc <__adddf3+0x5b0>
  80b17c:	8989c83a 	sub	r4,r17,r6
  80b180:	8905803a 	cmpltu	r2,r17,r4
  80b184:	4267c83a 	sub	r19,r8,r9
  80b188:	98a7c83a 	sub	r19,r19,r2
  80b18c:	9880202c 	andhi	r2,r19,128
  80b190:	10006326 	beq	r2,zero,80b320 <__adddf3+0x4d4>
  80b194:	3463c83a 	sub	r17,r6,r17
  80b198:	4a07c83a 	sub	r3,r9,r8
  80b19c:	344d803a 	cmpltu	r6,r6,r17
  80b1a0:	19a7c83a 	sub	r19,r3,r6
  80b1a4:	3825883a 	mov	r18,r7
  80b1a8:	983f8a1e 	bne	r19,zero,80afd4 <__alt_data_end+0xff80afd4>
  80b1ac:	8809883a 	mov	r4,r17
  80b1b0:	080074c0 	call	80074c <__clzsi2>
  80b1b4:	10800804 	addi	r2,r2,32
  80b1b8:	10fffe04 	addi	r3,r2,-8
  80b1bc:	010007c4 	movi	r4,31
  80b1c0:	20ff890e 	bge	r4,r3,80afe8 <__alt_data_end+0xff80afe8>
  80b1c4:	10bff604 	addi	r2,r2,-40
  80b1c8:	8884983a 	sll	r2,r17,r2
  80b1cc:	0023883a 	mov	r17,zero
  80b1d0:	1c3f8c0e 	bge	r3,r16,80b004 <__alt_data_end+0xff80b004>
  80b1d4:	023fe034 	movhi	r8,65408
  80b1d8:	423fffc4 	addi	r8,r8,-1
  80b1dc:	80e1c83a 	sub	r16,r16,r3
  80b1e0:	1210703a 	and	r8,r2,r8
  80b1e4:	003f3806 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b1e8:	9007883a 	mov	r3,r18
  80b1ec:	0011883a 	mov	r8,zero
  80b1f0:	0005883a 	mov	r2,zero
  80b1f4:	003f4c06 	br	80af28 <__alt_data_end+0xff80af28>
  80b1f8:	498cb03a 	or	r6,r9,r6
  80b1fc:	300cc03a 	cmpne	r6,r6,zero
  80b200:	0007883a 	mov	r3,zero
  80b204:	003f6806 	br	80afa8 <__alt_data_end+0xff80afa8>
  80b208:	20009c1e 	bne	r4,zero,80b47c <__adddf3+0x630>
  80b20c:	80800044 	addi	r2,r16,1
  80b210:	1141ffcc 	andi	r5,r2,2047
  80b214:	01000044 	movi	r4,1
  80b218:	2140670e 	bge	r4,r5,80b3b8 <__adddf3+0x56c>
  80b21c:	0101ffc4 	movi	r4,2047
  80b220:	11007f26 	beq	r2,r4,80b420 <__adddf3+0x5d4>
  80b224:	898d883a 	add	r6,r17,r6
  80b228:	4247883a 	add	r3,r8,r9
  80b22c:	3451803a 	cmpltu	r8,r6,r17
  80b230:	40d1883a 	add	r8,r8,r3
  80b234:	402297fa 	slli	r17,r8,31
  80b238:	300cd07a 	srli	r6,r6,1
  80b23c:	4010d07a 	srli	r8,r8,1
  80b240:	1021883a 	mov	r16,r2
  80b244:	89a2b03a 	or	r17,r17,r6
  80b248:	003f1f06 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b24c:	0081ffc4 	movi	r2,2047
  80b250:	80bf481e 	bne	r16,r2,80af74 <__alt_data_end+0xff80af74>
  80b254:	003f1c06 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b258:	843ff844 	addi	r16,r16,-31
  80b25c:	01000804 	movi	r4,32
  80b260:	1406d83a 	srl	r3,r2,r16
  80b264:	41005026 	beq	r8,r4,80b3a8 <__adddf3+0x55c>
  80b268:	01001004 	movi	r4,64
  80b26c:	2211c83a 	sub	r8,r4,r8
  80b270:	1204983a 	sll	r2,r2,r8
  80b274:	88a2b03a 	or	r17,r17,r2
  80b278:	8822c03a 	cmpne	r17,r17,zero
  80b27c:	1c62b03a 	or	r17,r3,r17
  80b280:	0011883a 	mov	r8,zero
  80b284:	0021883a 	mov	r16,zero
  80b288:	003f7106 	br	80b050 <__alt_data_end+0xff80b050>
  80b28c:	193ff804 	addi	r4,r3,-32
  80b290:	00800804 	movi	r2,32
  80b294:	4908d83a 	srl	r4,r9,r4
  80b298:	18804526 	beq	r3,r2,80b3b0 <__adddf3+0x564>
  80b29c:	00801004 	movi	r2,64
  80b2a0:	10c5c83a 	sub	r2,r2,r3
  80b2a4:	4886983a 	sll	r3,r9,r2
  80b2a8:	198cb03a 	or	r6,r3,r6
  80b2ac:	300cc03a 	cmpne	r6,r6,zero
  80b2b0:	218cb03a 	or	r6,r4,r6
  80b2b4:	0007883a 	mov	r3,zero
  80b2b8:	003f3b06 	br	80afa8 <__alt_data_end+0xff80afa8>
  80b2bc:	80002a26 	beq	r16,zero,80b368 <__adddf3+0x51c>
  80b2c0:	0101ffc4 	movi	r4,2047
  80b2c4:	11006826 	beq	r2,r4,80b468 <__adddf3+0x61c>
  80b2c8:	00c7c83a 	sub	r3,zero,r3
  80b2cc:	42002034 	orhi	r8,r8,128
  80b2d0:	01000e04 	movi	r4,56
  80b2d4:	20c07c16 	blt	r4,r3,80b4c8 <__adddf3+0x67c>
  80b2d8:	010007c4 	movi	r4,31
  80b2dc:	20c0da16 	blt	r4,r3,80b648 <__adddf3+0x7fc>
  80b2e0:	01000804 	movi	r4,32
  80b2e4:	20c9c83a 	sub	r4,r4,r3
  80b2e8:	4114983a 	sll	r10,r8,r4
  80b2ec:	88cad83a 	srl	r5,r17,r3
  80b2f0:	8908983a 	sll	r4,r17,r4
  80b2f4:	40c6d83a 	srl	r3,r8,r3
  80b2f8:	5162b03a 	or	r17,r10,r5
  80b2fc:	2008c03a 	cmpne	r4,r4,zero
  80b300:	8922b03a 	or	r17,r17,r4
  80b304:	3463c83a 	sub	r17,r6,r17
  80b308:	48c7c83a 	sub	r3,r9,r3
  80b30c:	344d803a 	cmpltu	r6,r6,r17
  80b310:	1991c83a 	sub	r8,r3,r6
  80b314:	1021883a 	mov	r16,r2
  80b318:	3825883a 	mov	r18,r7
  80b31c:	003f2706 	br	80afbc <__alt_data_end+0xff80afbc>
  80b320:	24d0b03a 	or	r8,r4,r19
  80b324:	40001b1e 	bne	r8,zero,80b394 <__adddf3+0x548>
  80b328:	0005883a 	mov	r2,zero
  80b32c:	0007883a 	mov	r3,zero
  80b330:	0021883a 	mov	r16,zero
  80b334:	003f4d06 	br	80b06c <__alt_data_end+0xff80b06c>
  80b338:	008007c4 	movi	r2,31
  80b33c:	11003c16 	blt	r2,r4,80b430 <__adddf3+0x5e4>
  80b340:	00800804 	movi	r2,32
  80b344:	1105c83a 	sub	r2,r2,r4
  80b348:	488e983a 	sll	r7,r9,r2
  80b34c:	310ad83a 	srl	r5,r6,r4
  80b350:	3084983a 	sll	r2,r6,r2
  80b354:	4912d83a 	srl	r9,r9,r4
  80b358:	394ab03a 	or	r5,r7,r5
  80b35c:	1004c03a 	cmpne	r2,r2,zero
  80b360:	288ab03a 	or	r5,r5,r2
  80b364:	003f5306 	br	80b0b4 <__alt_data_end+0xff80b0b4>
  80b368:	4448b03a 	or	r4,r8,r17
  80b36c:	20003e26 	beq	r4,zero,80b468 <__adddf3+0x61c>
  80b370:	00c6303a 	nor	r3,zero,r3
  80b374:	18003a1e 	bne	r3,zero,80b460 <__adddf3+0x614>
  80b378:	3463c83a 	sub	r17,r6,r17
  80b37c:	4a07c83a 	sub	r3,r9,r8
  80b380:	344d803a 	cmpltu	r6,r6,r17
  80b384:	1991c83a 	sub	r8,r3,r6
  80b388:	1021883a 	mov	r16,r2
  80b38c:	3825883a 	mov	r18,r7
  80b390:	003f0a06 	br	80afbc <__alt_data_end+0xff80afbc>
  80b394:	2023883a 	mov	r17,r4
  80b398:	003f0d06 	br	80afd0 <__alt_data_end+0xff80afd0>
  80b39c:	0081ffc4 	movi	r2,2047
  80b3a0:	80bf3f1e 	bne	r16,r2,80b0a0 <__alt_data_end+0xff80b0a0>
  80b3a4:	003ec806 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b3a8:	0005883a 	mov	r2,zero
  80b3ac:	003fb106 	br	80b274 <__alt_data_end+0xff80b274>
  80b3b0:	0007883a 	mov	r3,zero
  80b3b4:	003fbc06 	br	80b2a8 <__alt_data_end+0xff80b2a8>
  80b3b8:	4444b03a 	or	r2,r8,r17
  80b3bc:	8000871e 	bne	r16,zero,80b5dc <__adddf3+0x790>
  80b3c0:	1000ba26 	beq	r2,zero,80b6ac <__adddf3+0x860>
  80b3c4:	4984b03a 	or	r2,r9,r6
  80b3c8:	103ebf26 	beq	r2,zero,80aec8 <__alt_data_end+0xff80aec8>
  80b3cc:	8985883a 	add	r2,r17,r6
  80b3d0:	4247883a 	add	r3,r8,r9
  80b3d4:	1451803a 	cmpltu	r8,r2,r17
  80b3d8:	40d1883a 	add	r8,r8,r3
  80b3dc:	40c0202c 	andhi	r3,r8,128
  80b3e0:	1023883a 	mov	r17,r2
  80b3e4:	183f1a26 	beq	r3,zero,80b050 <__alt_data_end+0xff80b050>
  80b3e8:	00bfe034 	movhi	r2,65408
  80b3ec:	10bfffc4 	addi	r2,r2,-1
  80b3f0:	2021883a 	mov	r16,r4
  80b3f4:	4090703a 	and	r8,r8,r2
  80b3f8:	003eb306 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b3fc:	4444b03a 	or	r2,r8,r17
  80b400:	8000291e 	bne	r16,zero,80b4a8 <__adddf3+0x65c>
  80b404:	10004b1e 	bne	r2,zero,80b534 <__adddf3+0x6e8>
  80b408:	4990b03a 	or	r8,r9,r6
  80b40c:	40008b26 	beq	r8,zero,80b63c <__adddf3+0x7f0>
  80b410:	4811883a 	mov	r8,r9
  80b414:	3023883a 	mov	r17,r6
  80b418:	3825883a 	mov	r18,r7
  80b41c:	003eaa06 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b420:	1021883a 	mov	r16,r2
  80b424:	0011883a 	mov	r8,zero
  80b428:	0005883a 	mov	r2,zero
  80b42c:	003f0f06 	br	80b06c <__alt_data_end+0xff80b06c>
  80b430:	217ff804 	addi	r5,r4,-32
  80b434:	00800804 	movi	r2,32
  80b438:	494ad83a 	srl	r5,r9,r5
  80b43c:	20807d26 	beq	r4,r2,80b634 <__adddf3+0x7e8>
  80b440:	00801004 	movi	r2,64
  80b444:	1109c83a 	sub	r4,r2,r4
  80b448:	4912983a 	sll	r9,r9,r4
  80b44c:	498cb03a 	or	r6,r9,r6
  80b450:	300cc03a 	cmpne	r6,r6,zero
  80b454:	298ab03a 	or	r5,r5,r6
  80b458:	0013883a 	mov	r9,zero
  80b45c:	003f1506 	br	80b0b4 <__alt_data_end+0xff80b0b4>
  80b460:	0101ffc4 	movi	r4,2047
  80b464:	113f9a1e 	bne	r2,r4,80b2d0 <__alt_data_end+0xff80b2d0>
  80b468:	4811883a 	mov	r8,r9
  80b46c:	3023883a 	mov	r17,r6
  80b470:	1021883a 	mov	r16,r2
  80b474:	3825883a 	mov	r18,r7
  80b478:	003e9306 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b47c:	8000161e 	bne	r16,zero,80b4d8 <__adddf3+0x68c>
  80b480:	444ab03a 	or	r5,r8,r17
  80b484:	28005126 	beq	r5,zero,80b5cc <__adddf3+0x780>
  80b488:	0108303a 	nor	r4,zero,r4
  80b48c:	20004d1e 	bne	r4,zero,80b5c4 <__adddf3+0x778>
  80b490:	89a3883a 	add	r17,r17,r6
  80b494:	4253883a 	add	r9,r8,r9
  80b498:	898d803a 	cmpltu	r6,r17,r6
  80b49c:	3251883a 	add	r8,r6,r9
  80b4a0:	1021883a 	mov	r16,r2
  80b4a4:	003f0806 	br	80b0c8 <__alt_data_end+0xff80b0c8>
  80b4a8:	1000301e 	bne	r2,zero,80b56c <__adddf3+0x720>
  80b4ac:	4984b03a 	or	r2,r9,r6
  80b4b0:	10007126 	beq	r2,zero,80b678 <__adddf3+0x82c>
  80b4b4:	4811883a 	mov	r8,r9
  80b4b8:	3023883a 	mov	r17,r6
  80b4bc:	3825883a 	mov	r18,r7
  80b4c0:	0401ffc4 	movi	r16,2047
  80b4c4:	003e8006 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b4c8:	4462b03a 	or	r17,r8,r17
  80b4cc:	8822c03a 	cmpne	r17,r17,zero
  80b4d0:	0007883a 	mov	r3,zero
  80b4d4:	003f8b06 	br	80b304 <__alt_data_end+0xff80b304>
  80b4d8:	0141ffc4 	movi	r5,2047
  80b4dc:	11403b26 	beq	r2,r5,80b5cc <__adddf3+0x780>
  80b4e0:	0109c83a 	sub	r4,zero,r4
  80b4e4:	42002034 	orhi	r8,r8,128
  80b4e8:	01400e04 	movi	r5,56
  80b4ec:	29006716 	blt	r5,r4,80b68c <__adddf3+0x840>
  80b4f0:	014007c4 	movi	r5,31
  80b4f4:	29007016 	blt	r5,r4,80b6b8 <__adddf3+0x86c>
  80b4f8:	01400804 	movi	r5,32
  80b4fc:	290bc83a 	sub	r5,r5,r4
  80b500:	4154983a 	sll	r10,r8,r5
  80b504:	890ed83a 	srl	r7,r17,r4
  80b508:	894a983a 	sll	r5,r17,r5
  80b50c:	4108d83a 	srl	r4,r8,r4
  80b510:	51e2b03a 	or	r17,r10,r7
  80b514:	280ac03a 	cmpne	r5,r5,zero
  80b518:	8962b03a 	or	r17,r17,r5
  80b51c:	89a3883a 	add	r17,r17,r6
  80b520:	2253883a 	add	r9,r4,r9
  80b524:	898d803a 	cmpltu	r6,r17,r6
  80b528:	3251883a 	add	r8,r6,r9
  80b52c:	1021883a 	mov	r16,r2
  80b530:	003ee506 	br	80b0c8 <__alt_data_end+0xff80b0c8>
  80b534:	4984b03a 	or	r2,r9,r6
  80b538:	103e6326 	beq	r2,zero,80aec8 <__alt_data_end+0xff80aec8>
  80b53c:	8987c83a 	sub	r3,r17,r6
  80b540:	88c9803a 	cmpltu	r4,r17,r3
  80b544:	4245c83a 	sub	r2,r8,r9
  80b548:	1105c83a 	sub	r2,r2,r4
  80b54c:	1100202c 	andhi	r4,r2,128
  80b550:	203ebb26 	beq	r4,zero,80b040 <__alt_data_end+0xff80b040>
  80b554:	3463c83a 	sub	r17,r6,r17
  80b558:	4a07c83a 	sub	r3,r9,r8
  80b55c:	344d803a 	cmpltu	r6,r6,r17
  80b560:	1991c83a 	sub	r8,r3,r6
  80b564:	3825883a 	mov	r18,r7
  80b568:	003e5706 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b56c:	4984b03a 	or	r2,r9,r6
  80b570:	10002e26 	beq	r2,zero,80b62c <__adddf3+0x7e0>
  80b574:	4004d0fa 	srli	r2,r8,3
  80b578:	8822d0fa 	srli	r17,r17,3
  80b57c:	4010977a 	slli	r8,r8,29
  80b580:	10c0022c 	andhi	r3,r2,8
  80b584:	4462b03a 	or	r17,r8,r17
  80b588:	18000826 	beq	r3,zero,80b5ac <__adddf3+0x760>
  80b58c:	4808d0fa 	srli	r4,r9,3
  80b590:	20c0022c 	andhi	r3,r4,8
  80b594:	1800051e 	bne	r3,zero,80b5ac <__adddf3+0x760>
  80b598:	300cd0fa 	srli	r6,r6,3
  80b59c:	4806977a 	slli	r3,r9,29
  80b5a0:	2005883a 	mov	r2,r4
  80b5a4:	3825883a 	mov	r18,r7
  80b5a8:	19a2b03a 	or	r17,r3,r6
  80b5ac:	8810d77a 	srli	r8,r17,29
  80b5b0:	100490fa 	slli	r2,r2,3
  80b5b4:	882290fa 	slli	r17,r17,3
  80b5b8:	0401ffc4 	movi	r16,2047
  80b5bc:	4090b03a 	or	r8,r8,r2
  80b5c0:	003e4106 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b5c4:	0141ffc4 	movi	r5,2047
  80b5c8:	117fc71e 	bne	r2,r5,80b4e8 <__alt_data_end+0xff80b4e8>
  80b5cc:	4811883a 	mov	r8,r9
  80b5d0:	3023883a 	mov	r17,r6
  80b5d4:	1021883a 	mov	r16,r2
  80b5d8:	003e3b06 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b5dc:	10002f26 	beq	r2,zero,80b69c <__adddf3+0x850>
  80b5e0:	4984b03a 	or	r2,r9,r6
  80b5e4:	10001126 	beq	r2,zero,80b62c <__adddf3+0x7e0>
  80b5e8:	4004d0fa 	srli	r2,r8,3
  80b5ec:	8822d0fa 	srli	r17,r17,3
  80b5f0:	4010977a 	slli	r8,r8,29
  80b5f4:	10c0022c 	andhi	r3,r2,8
  80b5f8:	4462b03a 	or	r17,r8,r17
  80b5fc:	183feb26 	beq	r3,zero,80b5ac <__alt_data_end+0xff80b5ac>
  80b600:	4808d0fa 	srli	r4,r9,3
  80b604:	20c0022c 	andhi	r3,r4,8
  80b608:	183fe81e 	bne	r3,zero,80b5ac <__alt_data_end+0xff80b5ac>
  80b60c:	300cd0fa 	srli	r6,r6,3
  80b610:	4806977a 	slli	r3,r9,29
  80b614:	2005883a 	mov	r2,r4
  80b618:	19a2b03a 	or	r17,r3,r6
  80b61c:	003fe306 	br	80b5ac <__alt_data_end+0xff80b5ac>
  80b620:	0011883a 	mov	r8,zero
  80b624:	0005883a 	mov	r2,zero
  80b628:	003e3f06 	br	80af28 <__alt_data_end+0xff80af28>
  80b62c:	0401ffc4 	movi	r16,2047
  80b630:	003e2506 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b634:	0013883a 	mov	r9,zero
  80b638:	003f8406 	br	80b44c <__alt_data_end+0xff80b44c>
  80b63c:	0005883a 	mov	r2,zero
  80b640:	0007883a 	mov	r3,zero
  80b644:	003e8906 	br	80b06c <__alt_data_end+0xff80b06c>
  80b648:	197ff804 	addi	r5,r3,-32
  80b64c:	01000804 	movi	r4,32
  80b650:	414ad83a 	srl	r5,r8,r5
  80b654:	19002426 	beq	r3,r4,80b6e8 <__adddf3+0x89c>
  80b658:	01001004 	movi	r4,64
  80b65c:	20c7c83a 	sub	r3,r4,r3
  80b660:	40c6983a 	sll	r3,r8,r3
  80b664:	1c46b03a 	or	r3,r3,r17
  80b668:	1806c03a 	cmpne	r3,r3,zero
  80b66c:	28e2b03a 	or	r17,r5,r3
  80b670:	0007883a 	mov	r3,zero
  80b674:	003f2306 	br	80b304 <__alt_data_end+0xff80b304>
  80b678:	0007883a 	mov	r3,zero
  80b67c:	5811883a 	mov	r8,r11
  80b680:	00bfffc4 	movi	r2,-1
  80b684:	0401ffc4 	movi	r16,2047
  80b688:	003e7806 	br	80b06c <__alt_data_end+0xff80b06c>
  80b68c:	4462b03a 	or	r17,r8,r17
  80b690:	8822c03a 	cmpne	r17,r17,zero
  80b694:	0009883a 	mov	r4,zero
  80b698:	003fa006 	br	80b51c <__alt_data_end+0xff80b51c>
  80b69c:	4811883a 	mov	r8,r9
  80b6a0:	3023883a 	mov	r17,r6
  80b6a4:	0401ffc4 	movi	r16,2047
  80b6a8:	003e0706 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b6ac:	4811883a 	mov	r8,r9
  80b6b0:	3023883a 	mov	r17,r6
  80b6b4:	003e0406 	br	80aec8 <__alt_data_end+0xff80aec8>
  80b6b8:	21fff804 	addi	r7,r4,-32
  80b6bc:	01400804 	movi	r5,32
  80b6c0:	41ced83a 	srl	r7,r8,r7
  80b6c4:	21400a26 	beq	r4,r5,80b6f0 <__adddf3+0x8a4>
  80b6c8:	01401004 	movi	r5,64
  80b6cc:	2909c83a 	sub	r4,r5,r4
  80b6d0:	4108983a 	sll	r4,r8,r4
  80b6d4:	2448b03a 	or	r4,r4,r17
  80b6d8:	2008c03a 	cmpne	r4,r4,zero
  80b6dc:	3922b03a 	or	r17,r7,r4
  80b6e0:	0009883a 	mov	r4,zero
  80b6e4:	003f8d06 	br	80b51c <__alt_data_end+0xff80b51c>
  80b6e8:	0007883a 	mov	r3,zero
  80b6ec:	003fdd06 	br	80b664 <__alt_data_end+0xff80b664>
  80b6f0:	0009883a 	mov	r4,zero
  80b6f4:	003ff706 	br	80b6d4 <__alt_data_end+0xff80b6d4>

0080b6f8 <__divdf3>:
  80b6f8:	defff004 	addi	sp,sp,-64
  80b6fc:	dc800815 	stw	r18,32(sp)
  80b700:	2824d53a 	srli	r18,r5,20
  80b704:	dd800c15 	stw	r22,48(sp)
  80b708:	282cd7fa 	srli	r22,r5,31
  80b70c:	dc000615 	stw	r16,24(sp)
  80b710:	04000434 	movhi	r16,16
  80b714:	843fffc4 	addi	r16,r16,-1
  80b718:	dfc00f15 	stw	ra,60(sp)
  80b71c:	df000e15 	stw	fp,56(sp)
  80b720:	ddc00d15 	stw	r23,52(sp)
  80b724:	dd400b15 	stw	r21,44(sp)
  80b728:	dd000a15 	stw	r20,40(sp)
  80b72c:	dcc00915 	stw	r19,36(sp)
  80b730:	dc400715 	stw	r17,28(sp)
  80b734:	9481ffcc 	andi	r18,r18,2047
  80b738:	2c20703a 	and	r16,r5,r16
  80b73c:	b2003fcc 	andi	r8,r22,255
  80b740:	90006126 	beq	r18,zero,80b8c8 <__divdf3+0x1d0>
  80b744:	0081ffc4 	movi	r2,2047
  80b748:	202b883a 	mov	r21,r4
  80b74c:	90803726 	beq	r18,r2,80b82c <__divdf3+0x134>
  80b750:	80800434 	orhi	r2,r16,16
  80b754:	100490fa 	slli	r2,r2,3
  80b758:	2020d77a 	srli	r16,r4,29
  80b75c:	202a90fa 	slli	r21,r4,3
  80b760:	94bf0044 	addi	r18,r18,-1023
  80b764:	80a0b03a 	or	r16,r16,r2
  80b768:	0013883a 	mov	r9,zero
  80b76c:	000b883a 	mov	r5,zero
  80b770:	3806d53a 	srli	r3,r7,20
  80b774:	382ed7fa 	srli	r23,r7,31
  80b778:	04400434 	movhi	r17,16
  80b77c:	8c7fffc4 	addi	r17,r17,-1
  80b780:	18c1ffcc 	andi	r3,r3,2047
  80b784:	3029883a 	mov	r20,r6
  80b788:	3c62703a 	and	r17,r7,r17
  80b78c:	bf003fcc 	andi	fp,r23,255
  80b790:	18006e26 	beq	r3,zero,80b94c <__divdf3+0x254>
  80b794:	0081ffc4 	movi	r2,2047
  80b798:	18806626 	beq	r3,r2,80b934 <__divdf3+0x23c>
  80b79c:	88800434 	orhi	r2,r17,16
  80b7a0:	100490fa 	slli	r2,r2,3
  80b7a4:	3022d77a 	srli	r17,r6,29
  80b7a8:	302890fa 	slli	r20,r6,3
  80b7ac:	18ff0044 	addi	r3,r3,-1023
  80b7b0:	88a2b03a 	or	r17,r17,r2
  80b7b4:	000f883a 	mov	r7,zero
  80b7b8:	b5e6f03a 	xor	r19,r22,r23
  80b7bc:	3a4cb03a 	or	r6,r7,r9
  80b7c0:	008003c4 	movi	r2,15
  80b7c4:	9809883a 	mov	r4,r19
  80b7c8:	90c7c83a 	sub	r3,r18,r3
  80b7cc:	9cc03fcc 	andi	r19,r19,255
  80b7d0:	11809636 	bltu	r2,r6,80ba2c <__divdf3+0x334>
  80b7d4:	300c90ba 	slli	r6,r6,2
  80b7d8:	00802074 	movhi	r2,129
  80b7dc:	10adfb04 	addi	r2,r2,-18452
  80b7e0:	308d883a 	add	r6,r6,r2
  80b7e4:	30800017 	ldw	r2,0(r6)
  80b7e8:	1000683a 	jmp	r2
  80b7ec:	0080ba2c 	andhi	r2,zero,744
  80b7f0:	0080b864 	muli	r2,zero,737
  80b7f4:	0080ba1c 	xori	r2,zero,744
  80b7f8:	0080b858 	cmpnei	r2,zero,737
  80b7fc:	0080ba1c 	xori	r2,zero,744
  80b800:	0080b9f0 	cmpltui	r2,zero,743
  80b804:	0080ba1c 	xori	r2,zero,744
  80b808:	0080b858 	cmpnei	r2,zero,737
  80b80c:	0080b864 	muli	r2,zero,737
  80b810:	0080b864 	muli	r2,zero,737
  80b814:	0080b9f0 	cmpltui	r2,zero,743
  80b818:	0080b858 	cmpnei	r2,zero,737
  80b81c:	0080b848 	cmpgei	r2,zero,737
  80b820:	0080b848 	cmpgei	r2,zero,737
  80b824:	0080b848 	cmpgei	r2,zero,737
  80b828:	0080bdb4 	movhi	r2,758
  80b82c:	2404b03a 	or	r2,r4,r16
  80b830:	10006c1e 	bne	r2,zero,80b9e4 <__divdf3+0x2ec>
  80b834:	02400204 	movi	r9,8
  80b838:	0021883a 	mov	r16,zero
  80b83c:	002b883a 	mov	r21,zero
  80b840:	01400084 	movi	r5,2
  80b844:	003fca06 	br	80b770 <__alt_data_end+0xff80b770>
  80b848:	8023883a 	mov	r17,r16
  80b84c:	a829883a 	mov	r20,r21
  80b850:	4039883a 	mov	fp,r8
  80b854:	280f883a 	mov	r7,r5
  80b858:	00800084 	movi	r2,2
  80b85c:	3881601e 	bne	r7,r2,80bde0 <__divdf3+0x6e8>
  80b860:	e027883a 	mov	r19,fp
  80b864:	9900004c 	andi	r4,r19,1
  80b868:	0081ffc4 	movi	r2,2047
  80b86c:	0021883a 	mov	r16,zero
  80b870:	002b883a 	mov	r21,zero
  80b874:	1004953a 	slli	r2,r2,20
  80b878:	20c03fcc 	andi	r3,r4,255
  80b87c:	01400434 	movhi	r5,16
  80b880:	297fffc4 	addi	r5,r5,-1
  80b884:	180697fa 	slli	r3,r3,31
  80b888:	8160703a 	and	r16,r16,r5
  80b88c:	80a0b03a 	or	r16,r16,r2
  80b890:	80c6b03a 	or	r3,r16,r3
  80b894:	a805883a 	mov	r2,r21
  80b898:	dfc00f17 	ldw	ra,60(sp)
  80b89c:	df000e17 	ldw	fp,56(sp)
  80b8a0:	ddc00d17 	ldw	r23,52(sp)
  80b8a4:	dd800c17 	ldw	r22,48(sp)
  80b8a8:	dd400b17 	ldw	r21,44(sp)
  80b8ac:	dd000a17 	ldw	r20,40(sp)
  80b8b0:	dcc00917 	ldw	r19,36(sp)
  80b8b4:	dc800817 	ldw	r18,32(sp)
  80b8b8:	dc400717 	ldw	r17,28(sp)
  80b8bc:	dc000617 	ldw	r16,24(sp)
  80b8c0:	dec01004 	addi	sp,sp,64
  80b8c4:	f800283a 	ret
  80b8c8:	2404b03a 	or	r2,r4,r16
  80b8cc:	2023883a 	mov	r17,r4
  80b8d0:	10003f26 	beq	r2,zero,80b9d0 <__divdf3+0x2d8>
  80b8d4:	80015e26 	beq	r16,zero,80be50 <__divdf3+0x758>
  80b8d8:	8009883a 	mov	r4,r16
  80b8dc:	d9800215 	stw	r6,8(sp)
  80b8e0:	d9c00515 	stw	r7,20(sp)
  80b8e4:	da000415 	stw	r8,16(sp)
  80b8e8:	080074c0 	call	80074c <__clzsi2>
  80b8ec:	d9800217 	ldw	r6,8(sp)
  80b8f0:	d9c00517 	ldw	r7,20(sp)
  80b8f4:	da000417 	ldw	r8,16(sp)
  80b8f8:	113ffd44 	addi	r4,r2,-11
  80b8fc:	00c00704 	movi	r3,28
  80b900:	19014f16 	blt	r3,r4,80be40 <__divdf3+0x748>
  80b904:	00c00744 	movi	r3,29
  80b908:	157ffe04 	addi	r21,r2,-8
  80b90c:	1907c83a 	sub	r3,r3,r4
  80b910:	8560983a 	sll	r16,r16,r21
  80b914:	88c6d83a 	srl	r3,r17,r3
  80b918:	8d6a983a 	sll	r21,r17,r21
  80b91c:	1c20b03a 	or	r16,r3,r16
  80b920:	1080fcc4 	addi	r2,r2,1011
  80b924:	00a5c83a 	sub	r18,zero,r2
  80b928:	0013883a 	mov	r9,zero
  80b92c:	000b883a 	mov	r5,zero
  80b930:	003f8f06 	br	80b770 <__alt_data_end+0xff80b770>
  80b934:	3444b03a 	or	r2,r6,r17
  80b938:	1000231e 	bne	r2,zero,80b9c8 <__divdf3+0x2d0>
  80b93c:	0023883a 	mov	r17,zero
  80b940:	0029883a 	mov	r20,zero
  80b944:	01c00084 	movi	r7,2
  80b948:	003f9b06 	br	80b7b8 <__alt_data_end+0xff80b7b8>
  80b94c:	3444b03a 	or	r2,r6,r17
  80b950:	10001926 	beq	r2,zero,80b9b8 <__divdf3+0x2c0>
  80b954:	88014b26 	beq	r17,zero,80be84 <__divdf3+0x78c>
  80b958:	8809883a 	mov	r4,r17
  80b95c:	d9400115 	stw	r5,4(sp)
  80b960:	d9800215 	stw	r6,8(sp)
  80b964:	da000415 	stw	r8,16(sp)
  80b968:	da400315 	stw	r9,12(sp)
  80b96c:	080074c0 	call	80074c <__clzsi2>
  80b970:	d9400117 	ldw	r5,4(sp)
  80b974:	d9800217 	ldw	r6,8(sp)
  80b978:	da000417 	ldw	r8,16(sp)
  80b97c:	da400317 	ldw	r9,12(sp)
  80b980:	113ffd44 	addi	r4,r2,-11
  80b984:	00c00704 	movi	r3,28
  80b988:	19013a16 	blt	r3,r4,80be74 <__divdf3+0x77c>
  80b98c:	00c00744 	movi	r3,29
  80b990:	153ffe04 	addi	r20,r2,-8
  80b994:	1907c83a 	sub	r3,r3,r4
  80b998:	8d22983a 	sll	r17,r17,r20
  80b99c:	30c6d83a 	srl	r3,r6,r3
  80b9a0:	3528983a 	sll	r20,r6,r20
  80b9a4:	1c62b03a 	or	r17,r3,r17
  80b9a8:	1080fcc4 	addi	r2,r2,1011
  80b9ac:	0087c83a 	sub	r3,zero,r2
  80b9b0:	000f883a 	mov	r7,zero
  80b9b4:	003f8006 	br	80b7b8 <__alt_data_end+0xff80b7b8>
  80b9b8:	0023883a 	mov	r17,zero
  80b9bc:	0029883a 	mov	r20,zero
  80b9c0:	01c00044 	movi	r7,1
  80b9c4:	003f7c06 	br	80b7b8 <__alt_data_end+0xff80b7b8>
  80b9c8:	01c000c4 	movi	r7,3
  80b9cc:	003f7a06 	br	80b7b8 <__alt_data_end+0xff80b7b8>
  80b9d0:	02400104 	movi	r9,4
  80b9d4:	0021883a 	mov	r16,zero
  80b9d8:	002b883a 	mov	r21,zero
  80b9dc:	01400044 	movi	r5,1
  80b9e0:	003f6306 	br	80b770 <__alt_data_end+0xff80b770>
  80b9e4:	02400304 	movi	r9,12
  80b9e8:	014000c4 	movi	r5,3
  80b9ec:	003f6006 	br	80b770 <__alt_data_end+0xff80b770>
  80b9f0:	04000434 	movhi	r16,16
  80b9f4:	0009883a 	mov	r4,zero
  80b9f8:	843fffc4 	addi	r16,r16,-1
  80b9fc:	057fffc4 	movi	r21,-1
  80ba00:	0081ffc4 	movi	r2,2047
  80ba04:	003f9b06 	br	80b874 <__alt_data_end+0xff80b874>
  80ba08:	00c00044 	movi	r3,1
  80ba0c:	1887c83a 	sub	r3,r3,r2
  80ba10:	01000e04 	movi	r4,56
  80ba14:	20c1530e 	bge	r4,r3,80bf64 <__divdf3+0x86c>
  80ba18:	9900004c 	andi	r4,r19,1
  80ba1c:	0005883a 	mov	r2,zero
  80ba20:	0021883a 	mov	r16,zero
  80ba24:	002b883a 	mov	r21,zero
  80ba28:	003f9206 	br	80b874 <__alt_data_end+0xff80b874>
  80ba2c:	8c012e36 	bltu	r17,r16,80bee8 <__divdf3+0x7f0>
  80ba30:	84412c26 	beq	r16,r17,80bee4 <__divdf3+0x7ec>
  80ba34:	a82f883a 	mov	r23,r21
  80ba38:	18ffffc4 	addi	r3,r3,-1
  80ba3c:	002b883a 	mov	r21,zero
  80ba40:	a004d63a 	srli	r2,r20,24
  80ba44:	8822923a 	slli	r17,r17,8
  80ba48:	a028923a 	slli	r20,r20,8
  80ba4c:	8009883a 	mov	r4,r16
  80ba50:	88acb03a 	or	r22,r17,r2
  80ba54:	dd000015 	stw	r20,0(sp)
  80ba58:	b028d43a 	srli	r20,r22,16
  80ba5c:	d8c00215 	stw	r3,8(sp)
  80ba60:	b4bfffcc 	andi	r18,r22,65535
  80ba64:	a00b883a 	mov	r5,r20
  80ba68:	080ad680 	call	80ad68 <__udivsi3>
  80ba6c:	100b883a 	mov	r5,r2
  80ba70:	9009883a 	mov	r4,r18
  80ba74:	1023883a 	mov	r17,r2
  80ba78:	080ae240 	call	80ae24 <__mulsi3>
  80ba7c:	8009883a 	mov	r4,r16
  80ba80:	a00b883a 	mov	r5,r20
  80ba84:	1039883a 	mov	fp,r2
  80ba88:	080adcc0 	call	80adcc <__umodsi3>
  80ba8c:	1004943a 	slli	r2,r2,16
  80ba90:	b808d43a 	srli	r4,r23,16
  80ba94:	d8c00217 	ldw	r3,8(sp)
  80ba98:	2084b03a 	or	r2,r4,r2
  80ba9c:	1700062e 	bgeu	r2,fp,80bab8 <__divdf3+0x3c0>
  80baa0:	1585883a 	add	r2,r2,r22
  80baa4:	893fffc4 	addi	r4,r17,-1
  80baa8:	15811d36 	bltu	r2,r22,80bf20 <__divdf3+0x828>
  80baac:	17011c2e 	bgeu	r2,fp,80bf20 <__divdf3+0x828>
  80bab0:	8c7fff84 	addi	r17,r17,-2
  80bab4:	1585883a 	add	r2,r2,r22
  80bab8:	1739c83a 	sub	fp,r2,fp
  80babc:	a00b883a 	mov	r5,r20
  80bac0:	e009883a 	mov	r4,fp
  80bac4:	d8c00215 	stw	r3,8(sp)
  80bac8:	080ad680 	call	80ad68 <__udivsi3>
  80bacc:	100b883a 	mov	r5,r2
  80bad0:	9009883a 	mov	r4,r18
  80bad4:	1021883a 	mov	r16,r2
  80bad8:	080ae240 	call	80ae24 <__mulsi3>
  80badc:	a00b883a 	mov	r5,r20
  80bae0:	e009883a 	mov	r4,fp
  80bae4:	d8800415 	stw	r2,16(sp)
  80bae8:	080adcc0 	call	80adcc <__umodsi3>
  80baec:	1004943a 	slli	r2,r2,16
  80baf0:	da000417 	ldw	r8,16(sp)
  80baf4:	bdffffcc 	andi	r23,r23,65535
  80baf8:	b884b03a 	or	r2,r23,r2
  80bafc:	d8c00217 	ldw	r3,8(sp)
  80bb00:	1200062e 	bgeu	r2,r8,80bb1c <__divdf3+0x424>
  80bb04:	1585883a 	add	r2,r2,r22
  80bb08:	813fffc4 	addi	r4,r16,-1
  80bb0c:	15810236 	bltu	r2,r22,80bf18 <__divdf3+0x820>
  80bb10:	1201012e 	bgeu	r2,r8,80bf18 <__divdf3+0x820>
  80bb14:	843fff84 	addi	r16,r16,-2
  80bb18:	1585883a 	add	r2,r2,r22
  80bb1c:	8822943a 	slli	r17,r17,16
  80bb20:	d9800017 	ldw	r6,0(sp)
  80bb24:	1211c83a 	sub	r8,r2,r8
  80bb28:	8c22b03a 	or	r17,r17,r16
  80bb2c:	373fffcc 	andi	fp,r6,65535
  80bb30:	8abfffcc 	andi	r10,r17,65535
  80bb34:	8820d43a 	srli	r16,r17,16
  80bb38:	5009883a 	mov	r4,r10
  80bb3c:	e00b883a 	mov	r5,fp
  80bb40:	302ed43a 	srli	r23,r6,16
  80bb44:	d8c00215 	stw	r3,8(sp)
  80bb48:	da000415 	stw	r8,16(sp)
  80bb4c:	da800115 	stw	r10,4(sp)
  80bb50:	080ae240 	call	80ae24 <__mulsi3>
  80bb54:	800b883a 	mov	r5,r16
  80bb58:	e009883a 	mov	r4,fp
  80bb5c:	d8800515 	stw	r2,20(sp)
  80bb60:	080ae240 	call	80ae24 <__mulsi3>
  80bb64:	8009883a 	mov	r4,r16
  80bb68:	b80b883a 	mov	r5,r23
  80bb6c:	d8800315 	stw	r2,12(sp)
  80bb70:	080ae240 	call	80ae24 <__mulsi3>
  80bb74:	da800117 	ldw	r10,4(sp)
  80bb78:	b80b883a 	mov	r5,r23
  80bb7c:	1021883a 	mov	r16,r2
  80bb80:	5009883a 	mov	r4,r10
  80bb84:	080ae240 	call	80ae24 <__mulsi3>
  80bb88:	d9c00517 	ldw	r7,20(sp)
  80bb8c:	da400317 	ldw	r9,12(sp)
  80bb90:	d8c00217 	ldw	r3,8(sp)
  80bb94:	3808d43a 	srli	r4,r7,16
  80bb98:	1245883a 	add	r2,r2,r9
  80bb9c:	da000417 	ldw	r8,16(sp)
  80bba0:	2085883a 	add	r2,r4,r2
  80bba4:	1240022e 	bgeu	r2,r9,80bbb0 <__divdf3+0x4b8>
  80bba8:	01000074 	movhi	r4,1
  80bbac:	8121883a 	add	r16,r16,r4
  80bbb0:	1008d43a 	srli	r4,r2,16
  80bbb4:	1004943a 	slli	r2,r2,16
  80bbb8:	39ffffcc 	andi	r7,r7,65535
  80bbbc:	2409883a 	add	r4,r4,r16
  80bbc0:	11c5883a 	add	r2,r2,r7
  80bbc4:	4100bb36 	bltu	r8,r4,80beb4 <__divdf3+0x7bc>
  80bbc8:	4100d726 	beq	r8,r4,80bf28 <__divdf3+0x830>
  80bbcc:	4109c83a 	sub	r4,r8,r4
  80bbd0:	a8a1c83a 	sub	r16,r21,r2
  80bbd4:	ac2b803a 	cmpltu	r21,r21,r16
  80bbd8:	256bc83a 	sub	r21,r4,r21
  80bbdc:	b540d926 	beq	r22,r21,80bf44 <__divdf3+0x84c>
  80bbe0:	a00b883a 	mov	r5,r20
  80bbe4:	a809883a 	mov	r4,r21
  80bbe8:	d8c00215 	stw	r3,8(sp)
  80bbec:	080ad680 	call	80ad68 <__udivsi3>
  80bbf0:	100b883a 	mov	r5,r2
  80bbf4:	9009883a 	mov	r4,r18
  80bbf8:	d8800515 	stw	r2,20(sp)
  80bbfc:	080ae240 	call	80ae24 <__mulsi3>
  80bc00:	a809883a 	mov	r4,r21
  80bc04:	a00b883a 	mov	r5,r20
  80bc08:	d8800415 	stw	r2,16(sp)
  80bc0c:	080adcc0 	call	80adcc <__umodsi3>
  80bc10:	1004943a 	slli	r2,r2,16
  80bc14:	8008d43a 	srli	r4,r16,16
  80bc18:	da000417 	ldw	r8,16(sp)
  80bc1c:	d8c00217 	ldw	r3,8(sp)
  80bc20:	2084b03a 	or	r2,r4,r2
  80bc24:	d9c00517 	ldw	r7,20(sp)
  80bc28:	1200062e 	bgeu	r2,r8,80bc44 <__divdf3+0x54c>
  80bc2c:	1585883a 	add	r2,r2,r22
  80bc30:	393fffc4 	addi	r4,r7,-1
  80bc34:	1580c536 	bltu	r2,r22,80bf4c <__divdf3+0x854>
  80bc38:	1200c42e 	bgeu	r2,r8,80bf4c <__divdf3+0x854>
  80bc3c:	39ffff84 	addi	r7,r7,-2
  80bc40:	1585883a 	add	r2,r2,r22
  80bc44:	122bc83a 	sub	r21,r2,r8
  80bc48:	a00b883a 	mov	r5,r20
  80bc4c:	a809883a 	mov	r4,r21
  80bc50:	d8c00215 	stw	r3,8(sp)
  80bc54:	d9c00515 	stw	r7,20(sp)
  80bc58:	080ad680 	call	80ad68 <__udivsi3>
  80bc5c:	9009883a 	mov	r4,r18
  80bc60:	100b883a 	mov	r5,r2
  80bc64:	d8800415 	stw	r2,16(sp)
  80bc68:	080ae240 	call	80ae24 <__mulsi3>
  80bc6c:	a809883a 	mov	r4,r21
  80bc70:	a00b883a 	mov	r5,r20
  80bc74:	1025883a 	mov	r18,r2
  80bc78:	080adcc0 	call	80adcc <__umodsi3>
  80bc7c:	1004943a 	slli	r2,r2,16
  80bc80:	813fffcc 	andi	r4,r16,65535
  80bc84:	d8c00217 	ldw	r3,8(sp)
  80bc88:	20a0b03a 	or	r16,r4,r2
  80bc8c:	d9c00517 	ldw	r7,20(sp)
  80bc90:	da000417 	ldw	r8,16(sp)
  80bc94:	8480062e 	bgeu	r16,r18,80bcb0 <__divdf3+0x5b8>
  80bc98:	85a1883a 	add	r16,r16,r22
  80bc9c:	40bfffc4 	addi	r2,r8,-1
  80bca0:	8580ac36 	bltu	r16,r22,80bf54 <__divdf3+0x85c>
  80bca4:	8480ab2e 	bgeu	r16,r18,80bf54 <__divdf3+0x85c>
  80bca8:	423fff84 	addi	r8,r8,-2
  80bcac:	85a1883a 	add	r16,r16,r22
  80bcb0:	3804943a 	slli	r2,r7,16
  80bcb4:	84a1c83a 	sub	r16,r16,r18
  80bcb8:	e009883a 	mov	r4,fp
  80bcbc:	1228b03a 	or	r20,r2,r8
  80bcc0:	a1ffffcc 	andi	r7,r20,65535
  80bcc4:	a024d43a 	srli	r18,r20,16
  80bcc8:	380b883a 	mov	r5,r7
  80bccc:	d8c00215 	stw	r3,8(sp)
  80bcd0:	d9c00515 	stw	r7,20(sp)
  80bcd4:	080ae240 	call	80ae24 <__mulsi3>
  80bcd8:	900b883a 	mov	r5,r18
  80bcdc:	e009883a 	mov	r4,fp
  80bce0:	102b883a 	mov	r21,r2
  80bce4:	080ae240 	call	80ae24 <__mulsi3>
  80bce8:	900b883a 	mov	r5,r18
  80bcec:	b809883a 	mov	r4,r23
  80bcf0:	1039883a 	mov	fp,r2
  80bcf4:	080ae240 	call	80ae24 <__mulsi3>
  80bcf8:	d9c00517 	ldw	r7,20(sp)
  80bcfc:	b80b883a 	mov	r5,r23
  80bd00:	1025883a 	mov	r18,r2
  80bd04:	3809883a 	mov	r4,r7
  80bd08:	080ae240 	call	80ae24 <__mulsi3>
  80bd0c:	a808d43a 	srli	r4,r21,16
  80bd10:	1705883a 	add	r2,r2,fp
  80bd14:	d8c00217 	ldw	r3,8(sp)
  80bd18:	2085883a 	add	r2,r4,r2
  80bd1c:	1700022e 	bgeu	r2,fp,80bd28 <__divdf3+0x630>
  80bd20:	01000074 	movhi	r4,1
  80bd24:	9125883a 	add	r18,r18,r4
  80bd28:	1008d43a 	srli	r4,r2,16
  80bd2c:	1004943a 	slli	r2,r2,16
  80bd30:	ad7fffcc 	andi	r21,r21,65535
  80bd34:	2489883a 	add	r4,r4,r18
  80bd38:	1545883a 	add	r2,r2,r21
  80bd3c:	81003836 	bltu	r16,r4,80be20 <__divdf3+0x728>
  80bd40:	81003626 	beq	r16,r4,80be1c <__divdf3+0x724>
  80bd44:	a5000054 	ori	r20,r20,1
  80bd48:	1880ffc4 	addi	r2,r3,1023
  80bd4c:	00bf2e0e 	bge	zero,r2,80ba08 <__alt_data_end+0xff80ba08>
  80bd50:	a10001cc 	andi	r4,r20,7
  80bd54:	20000726 	beq	r4,zero,80bd74 <__divdf3+0x67c>
  80bd58:	a10003cc 	andi	r4,r20,15
  80bd5c:	01400104 	movi	r5,4
  80bd60:	21400426 	beq	r4,r5,80bd74 <__divdf3+0x67c>
  80bd64:	a149883a 	add	r4,r20,r5
  80bd68:	2529803a 	cmpltu	r20,r4,r20
  80bd6c:	8d23883a 	add	r17,r17,r20
  80bd70:	2029883a 	mov	r20,r4
  80bd74:	8900402c 	andhi	r4,r17,256
  80bd78:	20000426 	beq	r4,zero,80bd8c <__divdf3+0x694>
  80bd7c:	18810004 	addi	r2,r3,1024
  80bd80:	00ffc034 	movhi	r3,65280
  80bd84:	18ffffc4 	addi	r3,r3,-1
  80bd88:	88e2703a 	and	r17,r17,r3
  80bd8c:	00c1ff84 	movi	r3,2046
  80bd90:	18beb416 	blt	r3,r2,80b864 <__alt_data_end+0xff80b864>
  80bd94:	a028d0fa 	srli	r20,r20,3
  80bd98:	882a977a 	slli	r21,r17,29
  80bd9c:	8820927a 	slli	r16,r17,9
  80bda0:	1081ffcc 	andi	r2,r2,2047
  80bda4:	ad2ab03a 	or	r21,r21,r20
  80bda8:	8020d33a 	srli	r16,r16,12
  80bdac:	9900004c 	andi	r4,r19,1
  80bdb0:	003eb006 	br	80b874 <__alt_data_end+0xff80b874>
  80bdb4:	8080022c 	andhi	r2,r16,8
  80bdb8:	10001226 	beq	r2,zero,80be04 <__divdf3+0x70c>
  80bdbc:	8880022c 	andhi	r2,r17,8
  80bdc0:	1000101e 	bne	r2,zero,80be04 <__divdf3+0x70c>
  80bdc4:	00800434 	movhi	r2,16
  80bdc8:	8c000234 	orhi	r16,r17,8
  80bdcc:	10bfffc4 	addi	r2,r2,-1
  80bdd0:	b809883a 	mov	r4,r23
  80bdd4:	80a0703a 	and	r16,r16,r2
  80bdd8:	a02b883a 	mov	r21,r20
  80bddc:	003f0806 	br	80ba00 <__alt_data_end+0xff80ba00>
  80bde0:	008000c4 	movi	r2,3
  80bde4:	3880b126 	beq	r7,r2,80c0ac <__divdf3+0x9b4>
  80bde8:	00800044 	movi	r2,1
  80bdec:	38805b1e 	bne	r7,r2,80bf5c <__divdf3+0x864>
  80bdf0:	e009883a 	mov	r4,fp
  80bdf4:	0005883a 	mov	r2,zero
  80bdf8:	0021883a 	mov	r16,zero
  80bdfc:	002b883a 	mov	r21,zero
  80be00:	003e9c06 	br	80b874 <__alt_data_end+0xff80b874>
  80be04:	00800434 	movhi	r2,16
  80be08:	84000234 	orhi	r16,r16,8
  80be0c:	10bfffc4 	addi	r2,r2,-1
  80be10:	b009883a 	mov	r4,r22
  80be14:	80a0703a 	and	r16,r16,r2
  80be18:	003ef906 	br	80ba00 <__alt_data_end+0xff80ba00>
  80be1c:	103fca26 	beq	r2,zero,80bd48 <__alt_data_end+0xff80bd48>
  80be20:	b421883a 	add	r16,r22,r16
  80be24:	a17fffc4 	addi	r5,r20,-1
  80be28:	8580422e 	bgeu	r16,r22,80bf34 <__divdf3+0x83c>
  80be2c:	2829883a 	mov	r20,r5
  80be30:	813fc41e 	bne	r16,r4,80bd44 <__alt_data_end+0xff80bd44>
  80be34:	d9800017 	ldw	r6,0(sp)
  80be38:	30bfc21e 	bne	r6,r2,80bd44 <__alt_data_end+0xff80bd44>
  80be3c:	003fc206 	br	80bd48 <__alt_data_end+0xff80bd48>
  80be40:	143ff604 	addi	r16,r2,-40
  80be44:	8c20983a 	sll	r16,r17,r16
  80be48:	002b883a 	mov	r21,zero
  80be4c:	003eb406 	br	80b920 <__alt_data_end+0xff80b920>
  80be50:	d9800215 	stw	r6,8(sp)
  80be54:	d9c00515 	stw	r7,20(sp)
  80be58:	da000415 	stw	r8,16(sp)
  80be5c:	080074c0 	call	80074c <__clzsi2>
  80be60:	10800804 	addi	r2,r2,32
  80be64:	da000417 	ldw	r8,16(sp)
  80be68:	d9c00517 	ldw	r7,20(sp)
  80be6c:	d9800217 	ldw	r6,8(sp)
  80be70:	003ea106 	br	80b8f8 <__alt_data_end+0xff80b8f8>
  80be74:	147ff604 	addi	r17,r2,-40
  80be78:	3462983a 	sll	r17,r6,r17
  80be7c:	0029883a 	mov	r20,zero
  80be80:	003ec906 	br	80b9a8 <__alt_data_end+0xff80b9a8>
  80be84:	3009883a 	mov	r4,r6
  80be88:	d9400115 	stw	r5,4(sp)
  80be8c:	d9800215 	stw	r6,8(sp)
  80be90:	da000415 	stw	r8,16(sp)
  80be94:	da400315 	stw	r9,12(sp)
  80be98:	080074c0 	call	80074c <__clzsi2>
  80be9c:	10800804 	addi	r2,r2,32
  80bea0:	da400317 	ldw	r9,12(sp)
  80bea4:	da000417 	ldw	r8,16(sp)
  80bea8:	d9800217 	ldw	r6,8(sp)
  80beac:	d9400117 	ldw	r5,4(sp)
  80beb0:	003eb306 	br	80b980 <__alt_data_end+0xff80b980>
  80beb4:	d9800017 	ldw	r6,0(sp)
  80beb8:	a9ab883a 	add	r21,r21,r6
  80bebc:	a98b803a 	cmpltu	r5,r21,r6
  80bec0:	2d8b883a 	add	r5,r5,r22
  80bec4:	2a11883a 	add	r8,r5,r8
  80bec8:	897fffc4 	addi	r5,r17,-1
  80becc:	b2000c2e 	bgeu	r22,r8,80bf00 <__divdf3+0x808>
  80bed0:	41003f36 	bltu	r8,r4,80bfd0 <__divdf3+0x8d8>
  80bed4:	22006c26 	beq	r4,r8,80c088 <__divdf3+0x990>
  80bed8:	4109c83a 	sub	r4,r8,r4
  80bedc:	2823883a 	mov	r17,r5
  80bee0:	003f3b06 	br	80bbd0 <__alt_data_end+0xff80bbd0>
  80bee4:	ad3ed336 	bltu	r21,r20,80ba34 <__alt_data_end+0xff80ba34>
  80bee8:	a804d07a 	srli	r2,r21,1
  80beec:	802e97fa 	slli	r23,r16,31
  80bef0:	a82a97fa 	slli	r21,r21,31
  80bef4:	8020d07a 	srli	r16,r16,1
  80bef8:	b8aeb03a 	or	r23,r23,r2
  80befc:	003ed006 	br	80ba40 <__alt_data_end+0xff80ba40>
  80bf00:	b23ff51e 	bne	r22,r8,80bed8 <__alt_data_end+0xff80bed8>
  80bf04:	d9800017 	ldw	r6,0(sp)
  80bf08:	a9bff12e 	bgeu	r21,r6,80bed0 <__alt_data_end+0xff80bed0>
  80bf0c:	b109c83a 	sub	r4,r22,r4
  80bf10:	2823883a 	mov	r17,r5
  80bf14:	003f2e06 	br	80bbd0 <__alt_data_end+0xff80bbd0>
  80bf18:	2021883a 	mov	r16,r4
  80bf1c:	003eff06 	br	80bb1c <__alt_data_end+0xff80bb1c>
  80bf20:	2023883a 	mov	r17,r4
  80bf24:	003ee406 	br	80bab8 <__alt_data_end+0xff80bab8>
  80bf28:	a8bfe236 	bltu	r21,r2,80beb4 <__alt_data_end+0xff80beb4>
  80bf2c:	0009883a 	mov	r4,zero
  80bf30:	003f2706 	br	80bbd0 <__alt_data_end+0xff80bbd0>
  80bf34:	81002d36 	bltu	r16,r4,80bfec <__divdf3+0x8f4>
  80bf38:	24005626 	beq	r4,r16,80c094 <__divdf3+0x99c>
  80bf3c:	2829883a 	mov	r20,r5
  80bf40:	003f8006 	br	80bd44 <__alt_data_end+0xff80bd44>
  80bf44:	053fffc4 	movi	r20,-1
  80bf48:	003f7f06 	br	80bd48 <__alt_data_end+0xff80bd48>
  80bf4c:	200f883a 	mov	r7,r4
  80bf50:	003f3c06 	br	80bc44 <__alt_data_end+0xff80bc44>
  80bf54:	1011883a 	mov	r8,r2
  80bf58:	003f5506 	br	80bcb0 <__alt_data_end+0xff80bcb0>
  80bf5c:	e027883a 	mov	r19,fp
  80bf60:	003f7906 	br	80bd48 <__alt_data_end+0xff80bd48>
  80bf64:	010007c4 	movi	r4,31
  80bf68:	20c02816 	blt	r4,r3,80c00c <__divdf3+0x914>
  80bf6c:	00800804 	movi	r2,32
  80bf70:	10c5c83a 	sub	r2,r2,r3
  80bf74:	888a983a 	sll	r5,r17,r2
  80bf78:	a0c8d83a 	srl	r4,r20,r3
  80bf7c:	a084983a 	sll	r2,r20,r2
  80bf80:	88e2d83a 	srl	r17,r17,r3
  80bf84:	2906b03a 	or	r3,r5,r4
  80bf88:	1004c03a 	cmpne	r2,r2,zero
  80bf8c:	1886b03a 	or	r3,r3,r2
  80bf90:	188001cc 	andi	r2,r3,7
  80bf94:	10000726 	beq	r2,zero,80bfb4 <__divdf3+0x8bc>
  80bf98:	188003cc 	andi	r2,r3,15
  80bf9c:	01000104 	movi	r4,4
  80bfa0:	11000426 	beq	r2,r4,80bfb4 <__divdf3+0x8bc>
  80bfa4:	1805883a 	mov	r2,r3
  80bfa8:	10c00104 	addi	r3,r2,4
  80bfac:	1885803a 	cmpltu	r2,r3,r2
  80bfb0:	88a3883a 	add	r17,r17,r2
  80bfb4:	8880202c 	andhi	r2,r17,128
  80bfb8:	10002926 	beq	r2,zero,80c060 <__divdf3+0x968>
  80bfbc:	9900004c 	andi	r4,r19,1
  80bfc0:	00800044 	movi	r2,1
  80bfc4:	0021883a 	mov	r16,zero
  80bfc8:	002b883a 	mov	r21,zero
  80bfcc:	003e2906 	br	80b874 <__alt_data_end+0xff80b874>
  80bfd0:	d9800017 	ldw	r6,0(sp)
  80bfd4:	8c7fff84 	addi	r17,r17,-2
  80bfd8:	a9ab883a 	add	r21,r21,r6
  80bfdc:	a98b803a 	cmpltu	r5,r21,r6
  80bfe0:	2d8b883a 	add	r5,r5,r22
  80bfe4:	2a11883a 	add	r8,r5,r8
  80bfe8:	003ef806 	br	80bbcc <__alt_data_end+0xff80bbcc>
  80bfec:	d9800017 	ldw	r6,0(sp)
  80bff0:	318f883a 	add	r7,r6,r6
  80bff4:	398b803a 	cmpltu	r5,r7,r6
  80bff8:	2d8d883a 	add	r6,r5,r22
  80bffc:	81a1883a 	add	r16,r16,r6
  80c000:	a17fff84 	addi	r5,r20,-2
  80c004:	d9c00015 	stw	r7,0(sp)
  80c008:	003f8806 	br	80be2c <__alt_data_end+0xff80be2c>
  80c00c:	013ff844 	movi	r4,-31
  80c010:	2085c83a 	sub	r2,r4,r2
  80c014:	8888d83a 	srl	r4,r17,r2
  80c018:	00800804 	movi	r2,32
  80c01c:	18802126 	beq	r3,r2,80c0a4 <__divdf3+0x9ac>
  80c020:	04001004 	movi	r16,64
  80c024:	80c7c83a 	sub	r3,r16,r3
  80c028:	88e0983a 	sll	r16,r17,r3
  80c02c:	8504b03a 	or	r2,r16,r20
  80c030:	1004c03a 	cmpne	r2,r2,zero
  80c034:	2084b03a 	or	r2,r4,r2
  80c038:	144001cc 	andi	r17,r2,7
  80c03c:	88000d1e 	bne	r17,zero,80c074 <__divdf3+0x97c>
  80c040:	0021883a 	mov	r16,zero
  80c044:	102ad0fa 	srli	r21,r2,3
  80c048:	9900004c 	andi	r4,r19,1
  80c04c:	0005883a 	mov	r2,zero
  80c050:	ac6ab03a 	or	r21,r21,r17
  80c054:	003e0706 	br	80b874 <__alt_data_end+0xff80b874>
  80c058:	1007883a 	mov	r3,r2
  80c05c:	0023883a 	mov	r17,zero
  80c060:	8820927a 	slli	r16,r17,9
  80c064:	1805883a 	mov	r2,r3
  80c068:	8822977a 	slli	r17,r17,29
  80c06c:	8020d33a 	srli	r16,r16,12
  80c070:	003ff406 	br	80c044 <__alt_data_end+0xff80c044>
  80c074:	10c003cc 	andi	r3,r2,15
  80c078:	01000104 	movi	r4,4
  80c07c:	193ff626 	beq	r3,r4,80c058 <__alt_data_end+0xff80c058>
  80c080:	0023883a 	mov	r17,zero
  80c084:	003fc806 	br	80bfa8 <__alt_data_end+0xff80bfa8>
  80c088:	a8bfd136 	bltu	r21,r2,80bfd0 <__alt_data_end+0xff80bfd0>
  80c08c:	2823883a 	mov	r17,r5
  80c090:	003fa606 	br	80bf2c <__alt_data_end+0xff80bf2c>
  80c094:	d9800017 	ldw	r6,0(sp)
  80c098:	30bfd436 	bltu	r6,r2,80bfec <__alt_data_end+0xff80bfec>
  80c09c:	2829883a 	mov	r20,r5
  80c0a0:	003f6406 	br	80be34 <__alt_data_end+0xff80be34>
  80c0a4:	0021883a 	mov	r16,zero
  80c0a8:	003fe006 	br	80c02c <__alt_data_end+0xff80c02c>
  80c0ac:	00800434 	movhi	r2,16
  80c0b0:	8c000234 	orhi	r16,r17,8
  80c0b4:	10bfffc4 	addi	r2,r2,-1
  80c0b8:	e009883a 	mov	r4,fp
  80c0bc:	80a0703a 	and	r16,r16,r2
  80c0c0:	a02b883a 	mov	r21,r20
  80c0c4:	003e4e06 	br	80ba00 <__alt_data_end+0xff80ba00>

0080c0c8 <__eqdf2>:
  80c0c8:	2804d53a 	srli	r2,r5,20
  80c0cc:	3806d53a 	srli	r3,r7,20
  80c0d0:	02000434 	movhi	r8,16
  80c0d4:	423fffc4 	addi	r8,r8,-1
  80c0d8:	1081ffcc 	andi	r2,r2,2047
  80c0dc:	0281ffc4 	movi	r10,2047
  80c0e0:	2a12703a 	and	r9,r5,r8
  80c0e4:	18c1ffcc 	andi	r3,r3,2047
  80c0e8:	3a10703a 	and	r8,r7,r8
  80c0ec:	280ad7fa 	srli	r5,r5,31
  80c0f0:	380ed7fa 	srli	r7,r7,31
  80c0f4:	12801026 	beq	r2,r10,80c138 <__eqdf2+0x70>
  80c0f8:	0281ffc4 	movi	r10,2047
  80c0fc:	1a800a26 	beq	r3,r10,80c128 <__eqdf2+0x60>
  80c100:	10c00226 	beq	r2,r3,80c10c <__eqdf2+0x44>
  80c104:	00800044 	movi	r2,1
  80c108:	f800283a 	ret
  80c10c:	4a3ffd1e 	bne	r9,r8,80c104 <__alt_data_end+0xff80c104>
  80c110:	21bffc1e 	bne	r4,r6,80c104 <__alt_data_end+0xff80c104>
  80c114:	29c00c26 	beq	r5,r7,80c148 <__eqdf2+0x80>
  80c118:	103ffa1e 	bne	r2,zero,80c104 <__alt_data_end+0xff80c104>
  80c11c:	2244b03a 	or	r2,r4,r9
  80c120:	1004c03a 	cmpne	r2,r2,zero
  80c124:	f800283a 	ret
  80c128:	3214b03a 	or	r10,r6,r8
  80c12c:	503ff426 	beq	r10,zero,80c100 <__alt_data_end+0xff80c100>
  80c130:	00800044 	movi	r2,1
  80c134:	f800283a 	ret
  80c138:	2254b03a 	or	r10,r4,r9
  80c13c:	503fee26 	beq	r10,zero,80c0f8 <__alt_data_end+0xff80c0f8>
  80c140:	00800044 	movi	r2,1
  80c144:	f800283a 	ret
  80c148:	0005883a 	mov	r2,zero
  80c14c:	f800283a 	ret

0080c150 <__gedf2>:
  80c150:	2804d53a 	srli	r2,r5,20
  80c154:	3806d53a 	srli	r3,r7,20
  80c158:	02000434 	movhi	r8,16
  80c15c:	423fffc4 	addi	r8,r8,-1
  80c160:	1081ffcc 	andi	r2,r2,2047
  80c164:	0241ffc4 	movi	r9,2047
  80c168:	2a14703a 	and	r10,r5,r8
  80c16c:	18c1ffcc 	andi	r3,r3,2047
  80c170:	3a10703a 	and	r8,r7,r8
  80c174:	280ad7fa 	srli	r5,r5,31
  80c178:	380ed7fa 	srli	r7,r7,31
  80c17c:	12401d26 	beq	r2,r9,80c1f4 <__gedf2+0xa4>
  80c180:	0241ffc4 	movi	r9,2047
  80c184:	1a401226 	beq	r3,r9,80c1d0 <__gedf2+0x80>
  80c188:	1000081e 	bne	r2,zero,80c1ac <__gedf2+0x5c>
  80c18c:	2296b03a 	or	r11,r4,r10
  80c190:	5813003a 	cmpeq	r9,r11,zero
  80c194:	1800091e 	bne	r3,zero,80c1bc <__gedf2+0x6c>
  80c198:	3218b03a 	or	r12,r6,r8
  80c19c:	6000071e 	bne	r12,zero,80c1bc <__gedf2+0x6c>
  80c1a0:	0005883a 	mov	r2,zero
  80c1a4:	5800101e 	bne	r11,zero,80c1e8 <__gedf2+0x98>
  80c1a8:	f800283a 	ret
  80c1ac:	18000c1e 	bne	r3,zero,80c1e0 <__gedf2+0x90>
  80c1b0:	3212b03a 	or	r9,r6,r8
  80c1b4:	48000c26 	beq	r9,zero,80c1e8 <__gedf2+0x98>
  80c1b8:	0013883a 	mov	r9,zero
  80c1bc:	39c03fcc 	andi	r7,r7,255
  80c1c0:	48000826 	beq	r9,zero,80c1e4 <__gedf2+0x94>
  80c1c4:	38000926 	beq	r7,zero,80c1ec <__gedf2+0x9c>
  80c1c8:	00800044 	movi	r2,1
  80c1cc:	f800283a 	ret
  80c1d0:	3212b03a 	or	r9,r6,r8
  80c1d4:	483fec26 	beq	r9,zero,80c188 <__alt_data_end+0xff80c188>
  80c1d8:	00bfff84 	movi	r2,-2
  80c1dc:	f800283a 	ret
  80c1e0:	39c03fcc 	andi	r7,r7,255
  80c1e4:	29c00626 	beq	r5,r7,80c200 <__gedf2+0xb0>
  80c1e8:	283ff726 	beq	r5,zero,80c1c8 <__alt_data_end+0xff80c1c8>
  80c1ec:	00bfffc4 	movi	r2,-1
  80c1f0:	f800283a 	ret
  80c1f4:	2292b03a 	or	r9,r4,r10
  80c1f8:	483fe126 	beq	r9,zero,80c180 <__alt_data_end+0xff80c180>
  80c1fc:	003ff606 	br	80c1d8 <__alt_data_end+0xff80c1d8>
  80c200:	18bff916 	blt	r3,r2,80c1e8 <__alt_data_end+0xff80c1e8>
  80c204:	10c00316 	blt	r2,r3,80c214 <__gedf2+0xc4>
  80c208:	42bff736 	bltu	r8,r10,80c1e8 <__alt_data_end+0xff80c1e8>
  80c20c:	52000326 	beq	r10,r8,80c21c <__gedf2+0xcc>
  80c210:	5200042e 	bgeu	r10,r8,80c224 <__gedf2+0xd4>
  80c214:	283fec1e 	bne	r5,zero,80c1c8 <__alt_data_end+0xff80c1c8>
  80c218:	003ff406 	br	80c1ec <__alt_data_end+0xff80c1ec>
  80c21c:	313ff236 	bltu	r6,r4,80c1e8 <__alt_data_end+0xff80c1e8>
  80c220:	21bffc36 	bltu	r4,r6,80c214 <__alt_data_end+0xff80c214>
  80c224:	0005883a 	mov	r2,zero
  80c228:	f800283a 	ret

0080c22c <__ledf2>:
  80c22c:	2804d53a 	srli	r2,r5,20
  80c230:	3810d53a 	srli	r8,r7,20
  80c234:	00c00434 	movhi	r3,16
  80c238:	18ffffc4 	addi	r3,r3,-1
  80c23c:	1081ffcc 	andi	r2,r2,2047
  80c240:	0241ffc4 	movi	r9,2047
  80c244:	28d4703a 	and	r10,r5,r3
  80c248:	4201ffcc 	andi	r8,r8,2047
  80c24c:	38c6703a 	and	r3,r7,r3
  80c250:	280ad7fa 	srli	r5,r5,31
  80c254:	380ed7fa 	srli	r7,r7,31
  80c258:	12401f26 	beq	r2,r9,80c2d8 <__ledf2+0xac>
  80c25c:	0241ffc4 	movi	r9,2047
  80c260:	42401426 	beq	r8,r9,80c2b4 <__ledf2+0x88>
  80c264:	1000091e 	bne	r2,zero,80c28c <__ledf2+0x60>
  80c268:	2296b03a 	or	r11,r4,r10
  80c26c:	5813003a 	cmpeq	r9,r11,zero
  80c270:	29403fcc 	andi	r5,r5,255
  80c274:	40000a1e 	bne	r8,zero,80c2a0 <__ledf2+0x74>
  80c278:	30d8b03a 	or	r12,r6,r3
  80c27c:	6000081e 	bne	r12,zero,80c2a0 <__ledf2+0x74>
  80c280:	0005883a 	mov	r2,zero
  80c284:	5800111e 	bne	r11,zero,80c2cc <__ledf2+0xa0>
  80c288:	f800283a 	ret
  80c28c:	29403fcc 	andi	r5,r5,255
  80c290:	40000c1e 	bne	r8,zero,80c2c4 <__ledf2+0x98>
  80c294:	30d2b03a 	or	r9,r6,r3
  80c298:	48000c26 	beq	r9,zero,80c2cc <__ledf2+0xa0>
  80c29c:	0013883a 	mov	r9,zero
  80c2a0:	39c03fcc 	andi	r7,r7,255
  80c2a4:	48000826 	beq	r9,zero,80c2c8 <__ledf2+0x9c>
  80c2a8:	38001126 	beq	r7,zero,80c2f0 <__ledf2+0xc4>
  80c2ac:	00800044 	movi	r2,1
  80c2b0:	f800283a 	ret
  80c2b4:	30d2b03a 	or	r9,r6,r3
  80c2b8:	483fea26 	beq	r9,zero,80c264 <__alt_data_end+0xff80c264>
  80c2bc:	00800084 	movi	r2,2
  80c2c0:	f800283a 	ret
  80c2c4:	39c03fcc 	andi	r7,r7,255
  80c2c8:	39400726 	beq	r7,r5,80c2e8 <__ledf2+0xbc>
  80c2cc:	2800081e 	bne	r5,zero,80c2f0 <__ledf2+0xc4>
  80c2d0:	00800044 	movi	r2,1
  80c2d4:	f800283a 	ret
  80c2d8:	2292b03a 	or	r9,r4,r10
  80c2dc:	483fdf26 	beq	r9,zero,80c25c <__alt_data_end+0xff80c25c>
  80c2e0:	00800084 	movi	r2,2
  80c2e4:	f800283a 	ret
  80c2e8:	4080030e 	bge	r8,r2,80c2f8 <__ledf2+0xcc>
  80c2ec:	383fef26 	beq	r7,zero,80c2ac <__alt_data_end+0xff80c2ac>
  80c2f0:	00bfffc4 	movi	r2,-1
  80c2f4:	f800283a 	ret
  80c2f8:	123feb16 	blt	r2,r8,80c2a8 <__alt_data_end+0xff80c2a8>
  80c2fc:	1abff336 	bltu	r3,r10,80c2cc <__alt_data_end+0xff80c2cc>
  80c300:	50c00326 	beq	r10,r3,80c310 <__ledf2+0xe4>
  80c304:	50c0042e 	bgeu	r10,r3,80c318 <__ledf2+0xec>
  80c308:	283fe81e 	bne	r5,zero,80c2ac <__alt_data_end+0xff80c2ac>
  80c30c:	003ff806 	br	80c2f0 <__alt_data_end+0xff80c2f0>
  80c310:	313fee36 	bltu	r6,r4,80c2cc <__alt_data_end+0xff80c2cc>
  80c314:	21bffc36 	bltu	r4,r6,80c308 <__alt_data_end+0xff80c308>
  80c318:	0005883a 	mov	r2,zero
  80c31c:	f800283a 	ret

0080c320 <__muldf3>:
  80c320:	deffee04 	addi	sp,sp,-72
  80c324:	dd000c15 	stw	r20,48(sp)
  80c328:	2828d53a 	srli	r20,r5,20
  80c32c:	ddc00f15 	stw	r23,60(sp)
  80c330:	282ed7fa 	srli	r23,r5,31
  80c334:	dc000815 	stw	r16,32(sp)
  80c338:	04000434 	movhi	r16,16
  80c33c:	dcc00b15 	stw	r19,44(sp)
  80c340:	843fffc4 	addi	r16,r16,-1
  80c344:	dfc01115 	stw	ra,68(sp)
  80c348:	df001015 	stw	fp,64(sp)
  80c34c:	dd800e15 	stw	r22,56(sp)
  80c350:	dd400d15 	stw	r21,52(sp)
  80c354:	dc800a15 	stw	r18,40(sp)
  80c358:	dc400915 	stw	r17,36(sp)
  80c35c:	a501ffcc 	andi	r20,r20,2047
  80c360:	2c20703a 	and	r16,r5,r16
  80c364:	b827883a 	mov	r19,r23
  80c368:	ba403fcc 	andi	r9,r23,255
  80c36c:	a0006026 	beq	r20,zero,80c4f0 <__muldf3+0x1d0>
  80c370:	0081ffc4 	movi	r2,2047
  80c374:	202d883a 	mov	r22,r4
  80c378:	a0803626 	beq	r20,r2,80c454 <__muldf3+0x134>
  80c37c:	84000434 	orhi	r16,r16,16
  80c380:	200ad77a 	srli	r5,r4,29
  80c384:	800490fa 	slli	r2,r16,3
  80c388:	202c90fa 	slli	r22,r4,3
  80c38c:	a53f0044 	addi	r20,r20,-1023
  80c390:	28a0b03a 	or	r16,r5,r2
  80c394:	002b883a 	mov	r21,zero
  80c398:	000b883a 	mov	r5,zero
  80c39c:	3804d53a 	srli	r2,r7,20
  80c3a0:	3838d7fa 	srli	fp,r7,31
  80c3a4:	04400434 	movhi	r17,16
  80c3a8:	8c7fffc4 	addi	r17,r17,-1
  80c3ac:	1081ffcc 	andi	r2,r2,2047
  80c3b0:	3025883a 	mov	r18,r6
  80c3b4:	3c62703a 	and	r17,r7,r17
  80c3b8:	e2803fcc 	andi	r10,fp,255
  80c3bc:	10006d26 	beq	r2,zero,80c574 <__muldf3+0x254>
  80c3c0:	00c1ffc4 	movi	r3,2047
  80c3c4:	10c06526 	beq	r2,r3,80c55c <__muldf3+0x23c>
  80c3c8:	8c400434 	orhi	r17,r17,16
  80c3cc:	300ed77a 	srli	r7,r6,29
  80c3d0:	880690fa 	slli	r3,r17,3
  80c3d4:	302490fa 	slli	r18,r6,3
  80c3d8:	10bf0044 	addi	r2,r2,-1023
  80c3dc:	38e2b03a 	or	r17,r7,r3
  80c3e0:	000f883a 	mov	r7,zero
  80c3e4:	a087883a 	add	r3,r20,r2
  80c3e8:	010003c4 	movi	r4,15
  80c3ec:	3d44b03a 	or	r2,r7,r21
  80c3f0:	e5ccf03a 	xor	r6,fp,r23
  80c3f4:	1a000044 	addi	r8,r3,1
  80c3f8:	20809b36 	bltu	r4,r2,80c668 <__muldf3+0x348>
  80c3fc:	100490ba 	slli	r2,r2,2
  80c400:	01002074 	movhi	r4,129
  80c404:	21310504 	addi	r4,r4,-15340
  80c408:	1105883a 	add	r2,r2,r4
  80c40c:	10800017 	ldw	r2,0(r2)
  80c410:	1000683a 	jmp	r2
  80c414:	0080c668 	cmpgeui	r2,zero,793
  80c418:	0080c474 	movhi	r2,785
  80c41c:	0080c474 	movhi	r2,785
  80c420:	0080c470 	cmpltui	r2,zero,785
  80c424:	0080c644 	movi	r2,793
  80c428:	0080c644 	movi	r2,793
  80c42c:	0080c62c 	andhi	r2,zero,792
  80c430:	0080c470 	cmpltui	r2,zero,785
  80c434:	0080c644 	movi	r2,793
  80c438:	0080c62c 	andhi	r2,zero,792
  80c43c:	0080c644 	movi	r2,793
  80c440:	0080c470 	cmpltui	r2,zero,785
  80c444:	0080c654 	movui	r2,793
  80c448:	0080c654 	movui	r2,793
  80c44c:	0080c654 	movui	r2,793
  80c450:	0080c9b4 	movhi	r2,806
  80c454:	2404b03a 	or	r2,r4,r16
  80c458:	1000711e 	bne	r2,zero,80c620 <__muldf3+0x300>
  80c45c:	05400204 	movi	r21,8
  80c460:	0021883a 	mov	r16,zero
  80c464:	002d883a 	mov	r22,zero
  80c468:	01400084 	movi	r5,2
  80c46c:	003fcb06 	br	80c39c <__alt_data_end+0xff80c39c>
  80c470:	500d883a 	mov	r6,r10
  80c474:	00800084 	movi	r2,2
  80c478:	38805926 	beq	r7,r2,80c5e0 <__muldf3+0x2c0>
  80c47c:	008000c4 	movi	r2,3
  80c480:	3881bb26 	beq	r7,r2,80cb70 <__muldf3+0x850>
  80c484:	00800044 	movi	r2,1
  80c488:	3881961e 	bne	r7,r2,80cae4 <__muldf3+0x7c4>
  80c48c:	3027883a 	mov	r19,r6
  80c490:	0005883a 	mov	r2,zero
  80c494:	0021883a 	mov	r16,zero
  80c498:	002d883a 	mov	r22,zero
  80c49c:	1004953a 	slli	r2,r2,20
  80c4a0:	98c03fcc 	andi	r3,r19,255
  80c4a4:	04400434 	movhi	r17,16
  80c4a8:	8c7fffc4 	addi	r17,r17,-1
  80c4ac:	180697fa 	slli	r3,r3,31
  80c4b0:	8460703a 	and	r16,r16,r17
  80c4b4:	80a0b03a 	or	r16,r16,r2
  80c4b8:	80c6b03a 	or	r3,r16,r3
  80c4bc:	b005883a 	mov	r2,r22
  80c4c0:	dfc01117 	ldw	ra,68(sp)
  80c4c4:	df001017 	ldw	fp,64(sp)
  80c4c8:	ddc00f17 	ldw	r23,60(sp)
  80c4cc:	dd800e17 	ldw	r22,56(sp)
  80c4d0:	dd400d17 	ldw	r21,52(sp)
  80c4d4:	dd000c17 	ldw	r20,48(sp)
  80c4d8:	dcc00b17 	ldw	r19,44(sp)
  80c4dc:	dc800a17 	ldw	r18,40(sp)
  80c4e0:	dc400917 	ldw	r17,36(sp)
  80c4e4:	dc000817 	ldw	r16,32(sp)
  80c4e8:	dec01204 	addi	sp,sp,72
  80c4ec:	f800283a 	ret
  80c4f0:	2404b03a 	or	r2,r4,r16
  80c4f4:	202b883a 	mov	r21,r4
  80c4f8:	10004426 	beq	r2,zero,80c60c <__muldf3+0x2ec>
  80c4fc:	80015126 	beq	r16,zero,80ca44 <__muldf3+0x724>
  80c500:	8009883a 	mov	r4,r16
  80c504:	d9800715 	stw	r6,28(sp)
  80c508:	d9c00215 	stw	r7,8(sp)
  80c50c:	da400415 	stw	r9,16(sp)
  80c510:	080074c0 	call	80074c <__clzsi2>
  80c514:	d9800717 	ldw	r6,28(sp)
  80c518:	d9c00217 	ldw	r7,8(sp)
  80c51c:	da400417 	ldw	r9,16(sp)
  80c520:	113ffd44 	addi	r4,r2,-11
  80c524:	00c00704 	movi	r3,28
  80c528:	19014216 	blt	r3,r4,80ca34 <__muldf3+0x714>
  80c52c:	00c00744 	movi	r3,29
  80c530:	15bffe04 	addi	r22,r2,-8
  80c534:	1907c83a 	sub	r3,r3,r4
  80c538:	85a0983a 	sll	r16,r16,r22
  80c53c:	a8c6d83a 	srl	r3,r21,r3
  80c540:	adac983a 	sll	r22,r21,r22
  80c544:	1c20b03a 	or	r16,r3,r16
  80c548:	1080fcc4 	addi	r2,r2,1011
  80c54c:	00a9c83a 	sub	r20,zero,r2
  80c550:	002b883a 	mov	r21,zero
  80c554:	000b883a 	mov	r5,zero
  80c558:	003f9006 	br	80c39c <__alt_data_end+0xff80c39c>
  80c55c:	3446b03a 	or	r3,r6,r17
  80c560:	1800281e 	bne	r3,zero,80c604 <__muldf3+0x2e4>
  80c564:	0023883a 	mov	r17,zero
  80c568:	0025883a 	mov	r18,zero
  80c56c:	01c00084 	movi	r7,2
  80c570:	003f9c06 	br	80c3e4 <__alt_data_end+0xff80c3e4>
  80c574:	3446b03a 	or	r3,r6,r17
  80c578:	18001e26 	beq	r3,zero,80c5f4 <__muldf3+0x2d4>
  80c57c:	88012126 	beq	r17,zero,80ca04 <__muldf3+0x6e4>
  80c580:	8809883a 	mov	r4,r17
  80c584:	d9400215 	stw	r5,8(sp)
  80c588:	d9800715 	stw	r6,28(sp)
  80c58c:	da400415 	stw	r9,16(sp)
  80c590:	da800315 	stw	r10,12(sp)
  80c594:	080074c0 	call	80074c <__clzsi2>
  80c598:	d9400217 	ldw	r5,8(sp)
  80c59c:	d9800717 	ldw	r6,28(sp)
  80c5a0:	da400417 	ldw	r9,16(sp)
  80c5a4:	da800317 	ldw	r10,12(sp)
  80c5a8:	113ffd44 	addi	r4,r2,-11
  80c5ac:	00c00704 	movi	r3,28
  80c5b0:	19011016 	blt	r3,r4,80c9f4 <__muldf3+0x6d4>
  80c5b4:	00c00744 	movi	r3,29
  80c5b8:	14bffe04 	addi	r18,r2,-8
  80c5bc:	1907c83a 	sub	r3,r3,r4
  80c5c0:	8ca2983a 	sll	r17,r17,r18
  80c5c4:	30c6d83a 	srl	r3,r6,r3
  80c5c8:	34a4983a 	sll	r18,r6,r18
  80c5cc:	1c62b03a 	or	r17,r3,r17
  80c5d0:	1080fcc4 	addi	r2,r2,1011
  80c5d4:	0085c83a 	sub	r2,zero,r2
  80c5d8:	000f883a 	mov	r7,zero
  80c5dc:	003f8106 	br	80c3e4 <__alt_data_end+0xff80c3e4>
  80c5e0:	3027883a 	mov	r19,r6
  80c5e4:	0081ffc4 	movi	r2,2047
  80c5e8:	0021883a 	mov	r16,zero
  80c5ec:	002d883a 	mov	r22,zero
  80c5f0:	003faa06 	br	80c49c <__alt_data_end+0xff80c49c>
  80c5f4:	0023883a 	mov	r17,zero
  80c5f8:	0025883a 	mov	r18,zero
  80c5fc:	01c00044 	movi	r7,1
  80c600:	003f7806 	br	80c3e4 <__alt_data_end+0xff80c3e4>
  80c604:	01c000c4 	movi	r7,3
  80c608:	003f7606 	br	80c3e4 <__alt_data_end+0xff80c3e4>
  80c60c:	05400104 	movi	r21,4
  80c610:	0021883a 	mov	r16,zero
  80c614:	002d883a 	mov	r22,zero
  80c618:	01400044 	movi	r5,1
  80c61c:	003f5f06 	br	80c39c <__alt_data_end+0xff80c39c>
  80c620:	05400304 	movi	r21,12
  80c624:	014000c4 	movi	r5,3
  80c628:	003f5c06 	br	80c39c <__alt_data_end+0xff80c39c>
  80c62c:	04000434 	movhi	r16,16
  80c630:	0027883a 	mov	r19,zero
  80c634:	843fffc4 	addi	r16,r16,-1
  80c638:	05bfffc4 	movi	r22,-1
  80c63c:	0081ffc4 	movi	r2,2047
  80c640:	003f9606 	br	80c49c <__alt_data_end+0xff80c49c>
  80c644:	8023883a 	mov	r17,r16
  80c648:	b025883a 	mov	r18,r22
  80c64c:	280f883a 	mov	r7,r5
  80c650:	003f8806 	br	80c474 <__alt_data_end+0xff80c474>
  80c654:	8023883a 	mov	r17,r16
  80c658:	b025883a 	mov	r18,r22
  80c65c:	480d883a 	mov	r6,r9
  80c660:	280f883a 	mov	r7,r5
  80c664:	003f8306 	br	80c474 <__alt_data_end+0xff80c474>
  80c668:	b026d43a 	srli	r19,r22,16
  80c66c:	902ed43a 	srli	r23,r18,16
  80c670:	b5bfffcc 	andi	r22,r22,65535
  80c674:	94bfffcc 	andi	r18,r18,65535
  80c678:	b00b883a 	mov	r5,r22
  80c67c:	9009883a 	mov	r4,r18
  80c680:	d8c00515 	stw	r3,20(sp)
  80c684:	d9800715 	stw	r6,28(sp)
  80c688:	da000615 	stw	r8,24(sp)
  80c68c:	080ae240 	call	80ae24 <__mulsi3>
  80c690:	980b883a 	mov	r5,r19
  80c694:	9009883a 	mov	r4,r18
  80c698:	1029883a 	mov	r20,r2
  80c69c:	080ae240 	call	80ae24 <__mulsi3>
  80c6a0:	b80b883a 	mov	r5,r23
  80c6a4:	9809883a 	mov	r4,r19
  80c6a8:	102b883a 	mov	r21,r2
  80c6ac:	080ae240 	call	80ae24 <__mulsi3>
  80c6b0:	b809883a 	mov	r4,r23
  80c6b4:	b00b883a 	mov	r5,r22
  80c6b8:	1039883a 	mov	fp,r2
  80c6bc:	080ae240 	call	80ae24 <__mulsi3>
  80c6c0:	a008d43a 	srli	r4,r20,16
  80c6c4:	1545883a 	add	r2,r2,r21
  80c6c8:	d8c00517 	ldw	r3,20(sp)
  80c6cc:	2085883a 	add	r2,r4,r2
  80c6d0:	d9800717 	ldw	r6,28(sp)
  80c6d4:	da000617 	ldw	r8,24(sp)
  80c6d8:	1540022e 	bgeu	r2,r21,80c6e4 <__muldf3+0x3c4>
  80c6dc:	01000074 	movhi	r4,1
  80c6e0:	e139883a 	add	fp,fp,r4
  80c6e4:	100e943a 	slli	r7,r2,16
  80c6e8:	1004d43a 	srli	r2,r2,16
  80c6ec:	882ad43a 	srli	r21,r17,16
  80c6f0:	a53fffcc 	andi	r20,r20,65535
  80c6f4:	8c7fffcc 	andi	r17,r17,65535
  80c6f8:	3d29883a 	add	r20,r7,r20
  80c6fc:	b00b883a 	mov	r5,r22
  80c700:	8809883a 	mov	r4,r17
  80c704:	d8c00515 	stw	r3,20(sp)
  80c708:	d9800715 	stw	r6,28(sp)
  80c70c:	da000615 	stw	r8,24(sp)
  80c710:	dd000115 	stw	r20,4(sp)
  80c714:	d8800015 	stw	r2,0(sp)
  80c718:	080ae240 	call	80ae24 <__mulsi3>
  80c71c:	980b883a 	mov	r5,r19
  80c720:	8809883a 	mov	r4,r17
  80c724:	d8800215 	stw	r2,8(sp)
  80c728:	080ae240 	call	80ae24 <__mulsi3>
  80c72c:	9809883a 	mov	r4,r19
  80c730:	a80b883a 	mov	r5,r21
  80c734:	1029883a 	mov	r20,r2
  80c738:	080ae240 	call	80ae24 <__mulsi3>
  80c73c:	b00b883a 	mov	r5,r22
  80c740:	a809883a 	mov	r4,r21
  80c744:	d8800415 	stw	r2,16(sp)
  80c748:	080ae240 	call	80ae24 <__mulsi3>
  80c74c:	d9c00217 	ldw	r7,8(sp)
  80c750:	1505883a 	add	r2,r2,r20
  80c754:	d8c00517 	ldw	r3,20(sp)
  80c758:	3826d43a 	srli	r19,r7,16
  80c75c:	d9800717 	ldw	r6,28(sp)
  80c760:	da000617 	ldw	r8,24(sp)
  80c764:	9885883a 	add	r2,r19,r2
  80c768:	da400417 	ldw	r9,16(sp)
  80c76c:	1500022e 	bgeu	r2,r20,80c778 <__muldf3+0x458>
  80c770:	01000074 	movhi	r4,1
  80c774:	4913883a 	add	r9,r9,r4
  80c778:	1028d43a 	srli	r20,r2,16
  80c77c:	1004943a 	slli	r2,r2,16
  80c780:	802cd43a 	srli	r22,r16,16
  80c784:	843fffcc 	andi	r16,r16,65535
  80c788:	3cffffcc 	andi	r19,r7,65535
  80c78c:	9009883a 	mov	r4,r18
  80c790:	800b883a 	mov	r5,r16
  80c794:	a269883a 	add	r20,r20,r9
  80c798:	d8c00515 	stw	r3,20(sp)
  80c79c:	d9800715 	stw	r6,28(sp)
  80c7a0:	da000615 	stw	r8,24(sp)
  80c7a4:	14e7883a 	add	r19,r2,r19
  80c7a8:	080ae240 	call	80ae24 <__mulsi3>
  80c7ac:	9009883a 	mov	r4,r18
  80c7b0:	b00b883a 	mov	r5,r22
  80c7b4:	d8800315 	stw	r2,12(sp)
  80c7b8:	080ae240 	call	80ae24 <__mulsi3>
  80c7bc:	b809883a 	mov	r4,r23
  80c7c0:	b00b883a 	mov	r5,r22
  80c7c4:	d8800215 	stw	r2,8(sp)
  80c7c8:	080ae240 	call	80ae24 <__mulsi3>
  80c7cc:	b80b883a 	mov	r5,r23
  80c7d0:	8009883a 	mov	r4,r16
  80c7d4:	d8800415 	stw	r2,16(sp)
  80c7d8:	080ae240 	call	80ae24 <__mulsi3>
  80c7dc:	da800317 	ldw	r10,12(sp)
  80c7e0:	d9c00217 	ldw	r7,8(sp)
  80c7e4:	d9000017 	ldw	r4,0(sp)
  80c7e8:	502ed43a 	srli	r23,r10,16
  80c7ec:	11c5883a 	add	r2,r2,r7
  80c7f0:	24e5883a 	add	r18,r4,r19
  80c7f4:	b885883a 	add	r2,r23,r2
  80c7f8:	d8c00517 	ldw	r3,20(sp)
  80c7fc:	d9800717 	ldw	r6,28(sp)
  80c800:	da000617 	ldw	r8,24(sp)
  80c804:	da400417 	ldw	r9,16(sp)
  80c808:	11c0022e 	bgeu	r2,r7,80c814 <__muldf3+0x4f4>
  80c80c:	01000074 	movhi	r4,1
  80c810:	4913883a 	add	r9,r9,r4
  80c814:	100ed43a 	srli	r7,r2,16
  80c818:	1004943a 	slli	r2,r2,16
  80c81c:	55ffffcc 	andi	r23,r10,65535
  80c820:	3a53883a 	add	r9,r7,r9
  80c824:	8809883a 	mov	r4,r17
  80c828:	800b883a 	mov	r5,r16
  80c82c:	d8c00515 	stw	r3,20(sp)
  80c830:	d9800715 	stw	r6,28(sp)
  80c834:	da000615 	stw	r8,24(sp)
  80c838:	da400415 	stw	r9,16(sp)
  80c83c:	15ef883a 	add	r23,r2,r23
  80c840:	080ae240 	call	80ae24 <__mulsi3>
  80c844:	8809883a 	mov	r4,r17
  80c848:	b00b883a 	mov	r5,r22
  80c84c:	d8800215 	stw	r2,8(sp)
  80c850:	080ae240 	call	80ae24 <__mulsi3>
  80c854:	b00b883a 	mov	r5,r22
  80c858:	a809883a 	mov	r4,r21
  80c85c:	d8800315 	stw	r2,12(sp)
  80c860:	080ae240 	call	80ae24 <__mulsi3>
  80c864:	8009883a 	mov	r4,r16
  80c868:	a80b883a 	mov	r5,r21
  80c86c:	1023883a 	mov	r17,r2
  80c870:	080ae240 	call	80ae24 <__mulsi3>
  80c874:	d9c00217 	ldw	r7,8(sp)
  80c878:	da800317 	ldw	r10,12(sp)
  80c87c:	d8c00517 	ldw	r3,20(sp)
  80c880:	3808d43a 	srli	r4,r7,16
  80c884:	1285883a 	add	r2,r2,r10
  80c888:	d9800717 	ldw	r6,28(sp)
  80c88c:	2085883a 	add	r2,r4,r2
  80c890:	da000617 	ldw	r8,24(sp)
  80c894:	da400417 	ldw	r9,16(sp)
  80c898:	1280022e 	bgeu	r2,r10,80c8a4 <__muldf3+0x584>
  80c89c:	01000074 	movhi	r4,1
  80c8a0:	8923883a 	add	r17,r17,r4
  80c8a4:	1008943a 	slli	r4,r2,16
  80c8a8:	39ffffcc 	andi	r7,r7,65535
  80c8ac:	e4b9883a 	add	fp,fp,r18
  80c8b0:	21cf883a 	add	r7,r4,r7
  80c8b4:	e4e7803a 	cmpltu	r19,fp,r19
  80c8b8:	3d0f883a 	add	r7,r7,r20
  80c8bc:	bf39883a 	add	fp,r23,fp
  80c8c0:	99c9883a 	add	r4,r19,r7
  80c8c4:	e5ef803a 	cmpltu	r23,fp,r23
  80c8c8:	490b883a 	add	r5,r9,r4
  80c8cc:	1004d43a 	srli	r2,r2,16
  80c8d0:	b965883a 	add	r18,r23,r5
  80c8d4:	24c9803a 	cmpltu	r4,r4,r19
  80c8d8:	3d29803a 	cmpltu	r20,r7,r20
  80c8dc:	a128b03a 	or	r20,r20,r4
  80c8e0:	95ef803a 	cmpltu	r23,r18,r23
  80c8e4:	2a53803a 	cmpltu	r9,r5,r9
  80c8e8:	a0a9883a 	add	r20,r20,r2
  80c8ec:	4deeb03a 	or	r23,r9,r23
  80c8f0:	a5ef883a 	add	r23,r20,r23
  80c8f4:	bc63883a 	add	r17,r23,r17
  80c8f8:	e004927a 	slli	r2,fp,9
  80c8fc:	d9000117 	ldw	r4,4(sp)
  80c900:	882e927a 	slli	r23,r17,9
  80c904:	9022d5fa 	srli	r17,r18,23
  80c908:	e038d5fa 	srli	fp,fp,23
  80c90c:	1104b03a 	or	r2,r2,r4
  80c910:	9024927a 	slli	r18,r18,9
  80c914:	1004c03a 	cmpne	r2,r2,zero
  80c918:	bc62b03a 	or	r17,r23,r17
  80c91c:	1738b03a 	or	fp,r2,fp
  80c920:	8880402c 	andhi	r2,r17,256
  80c924:	e4a4b03a 	or	r18,fp,r18
  80c928:	10000726 	beq	r2,zero,80c948 <__muldf3+0x628>
  80c92c:	9006d07a 	srli	r3,r18,1
  80c930:	880497fa 	slli	r2,r17,31
  80c934:	9480004c 	andi	r18,r18,1
  80c938:	8822d07a 	srli	r17,r17,1
  80c93c:	1ca4b03a 	or	r18,r3,r18
  80c940:	14a4b03a 	or	r18,r2,r18
  80c944:	4007883a 	mov	r3,r8
  80c948:	1880ffc4 	addi	r2,r3,1023
  80c94c:	0080460e 	bge	zero,r2,80ca68 <__muldf3+0x748>
  80c950:	910001cc 	andi	r4,r18,7
  80c954:	20000726 	beq	r4,zero,80c974 <__muldf3+0x654>
  80c958:	910003cc 	andi	r4,r18,15
  80c95c:	01400104 	movi	r5,4
  80c960:	21400426 	beq	r4,r5,80c974 <__muldf3+0x654>
  80c964:	9149883a 	add	r4,r18,r5
  80c968:	24a5803a 	cmpltu	r18,r4,r18
  80c96c:	8ca3883a 	add	r17,r17,r18
  80c970:	2025883a 	mov	r18,r4
  80c974:	8900402c 	andhi	r4,r17,256
  80c978:	20000426 	beq	r4,zero,80c98c <__muldf3+0x66c>
  80c97c:	18810004 	addi	r2,r3,1024
  80c980:	00ffc034 	movhi	r3,65280
  80c984:	18ffffc4 	addi	r3,r3,-1
  80c988:	88e2703a 	and	r17,r17,r3
  80c98c:	00c1ff84 	movi	r3,2046
  80c990:	18bf1316 	blt	r3,r2,80c5e0 <__alt_data_end+0xff80c5e0>
  80c994:	882c977a 	slli	r22,r17,29
  80c998:	9024d0fa 	srli	r18,r18,3
  80c99c:	8822927a 	slli	r17,r17,9
  80c9a0:	1081ffcc 	andi	r2,r2,2047
  80c9a4:	b4acb03a 	or	r22,r22,r18
  80c9a8:	8820d33a 	srli	r16,r17,12
  80c9ac:	3027883a 	mov	r19,r6
  80c9b0:	003eba06 	br	80c49c <__alt_data_end+0xff80c49c>
  80c9b4:	8080022c 	andhi	r2,r16,8
  80c9b8:	10000926 	beq	r2,zero,80c9e0 <__muldf3+0x6c0>
  80c9bc:	8880022c 	andhi	r2,r17,8
  80c9c0:	1000071e 	bne	r2,zero,80c9e0 <__muldf3+0x6c0>
  80c9c4:	00800434 	movhi	r2,16
  80c9c8:	8c000234 	orhi	r16,r17,8
  80c9cc:	10bfffc4 	addi	r2,r2,-1
  80c9d0:	e027883a 	mov	r19,fp
  80c9d4:	80a0703a 	and	r16,r16,r2
  80c9d8:	902d883a 	mov	r22,r18
  80c9dc:	003f1706 	br	80c63c <__alt_data_end+0xff80c63c>
  80c9e0:	00800434 	movhi	r2,16
  80c9e4:	84000234 	orhi	r16,r16,8
  80c9e8:	10bfffc4 	addi	r2,r2,-1
  80c9ec:	80a0703a 	and	r16,r16,r2
  80c9f0:	003f1206 	br	80c63c <__alt_data_end+0xff80c63c>
  80c9f4:	147ff604 	addi	r17,r2,-40
  80c9f8:	3462983a 	sll	r17,r6,r17
  80c9fc:	0025883a 	mov	r18,zero
  80ca00:	003ef306 	br	80c5d0 <__alt_data_end+0xff80c5d0>
  80ca04:	3009883a 	mov	r4,r6
  80ca08:	d9400215 	stw	r5,8(sp)
  80ca0c:	d9800715 	stw	r6,28(sp)
  80ca10:	da400415 	stw	r9,16(sp)
  80ca14:	da800315 	stw	r10,12(sp)
  80ca18:	080074c0 	call	80074c <__clzsi2>
  80ca1c:	10800804 	addi	r2,r2,32
  80ca20:	da800317 	ldw	r10,12(sp)
  80ca24:	da400417 	ldw	r9,16(sp)
  80ca28:	d9800717 	ldw	r6,28(sp)
  80ca2c:	d9400217 	ldw	r5,8(sp)
  80ca30:	003edd06 	br	80c5a8 <__alt_data_end+0xff80c5a8>
  80ca34:	143ff604 	addi	r16,r2,-40
  80ca38:	ac20983a 	sll	r16,r21,r16
  80ca3c:	002d883a 	mov	r22,zero
  80ca40:	003ec106 	br	80c548 <__alt_data_end+0xff80c548>
  80ca44:	d9800715 	stw	r6,28(sp)
  80ca48:	d9c00215 	stw	r7,8(sp)
  80ca4c:	da400415 	stw	r9,16(sp)
  80ca50:	080074c0 	call	80074c <__clzsi2>
  80ca54:	10800804 	addi	r2,r2,32
  80ca58:	da400417 	ldw	r9,16(sp)
  80ca5c:	d9c00217 	ldw	r7,8(sp)
  80ca60:	d9800717 	ldw	r6,28(sp)
  80ca64:	003eae06 	br	80c520 <__alt_data_end+0xff80c520>
  80ca68:	00c00044 	movi	r3,1
  80ca6c:	1887c83a 	sub	r3,r3,r2
  80ca70:	01000e04 	movi	r4,56
  80ca74:	20fe8516 	blt	r4,r3,80c48c <__alt_data_end+0xff80c48c>
  80ca78:	010007c4 	movi	r4,31
  80ca7c:	20c01b16 	blt	r4,r3,80caec <__muldf3+0x7cc>
  80ca80:	00800804 	movi	r2,32
  80ca84:	10c5c83a 	sub	r2,r2,r3
  80ca88:	888a983a 	sll	r5,r17,r2
  80ca8c:	90c8d83a 	srl	r4,r18,r3
  80ca90:	9084983a 	sll	r2,r18,r2
  80ca94:	88e2d83a 	srl	r17,r17,r3
  80ca98:	2906b03a 	or	r3,r5,r4
  80ca9c:	1004c03a 	cmpne	r2,r2,zero
  80caa0:	1886b03a 	or	r3,r3,r2
  80caa4:	188001cc 	andi	r2,r3,7
  80caa8:	10000726 	beq	r2,zero,80cac8 <__muldf3+0x7a8>
  80caac:	188003cc 	andi	r2,r3,15
  80cab0:	01000104 	movi	r4,4
  80cab4:	11000426 	beq	r2,r4,80cac8 <__muldf3+0x7a8>
  80cab8:	1805883a 	mov	r2,r3
  80cabc:	10c00104 	addi	r3,r2,4
  80cac0:	1885803a 	cmpltu	r2,r3,r2
  80cac4:	88a3883a 	add	r17,r17,r2
  80cac8:	8880202c 	andhi	r2,r17,128
  80cacc:	10001c26 	beq	r2,zero,80cb40 <__muldf3+0x820>
  80cad0:	3027883a 	mov	r19,r6
  80cad4:	00800044 	movi	r2,1
  80cad8:	0021883a 	mov	r16,zero
  80cadc:	002d883a 	mov	r22,zero
  80cae0:	003e6e06 	br	80c49c <__alt_data_end+0xff80c49c>
  80cae4:	4007883a 	mov	r3,r8
  80cae8:	003f9706 	br	80c948 <__alt_data_end+0xff80c948>
  80caec:	017ff844 	movi	r5,-31
  80caf0:	2885c83a 	sub	r2,r5,r2
  80caf4:	888ad83a 	srl	r5,r17,r2
  80caf8:	00800804 	movi	r2,32
  80cafc:	18801a26 	beq	r3,r2,80cb68 <__muldf3+0x848>
  80cb00:	01001004 	movi	r4,64
  80cb04:	20c7c83a 	sub	r3,r4,r3
  80cb08:	88e2983a 	sll	r17,r17,r3
  80cb0c:	8ca4b03a 	or	r18,r17,r18
  80cb10:	9004c03a 	cmpne	r2,r18,zero
  80cb14:	2884b03a 	or	r2,r5,r2
  80cb18:	144001cc 	andi	r17,r2,7
  80cb1c:	88000d1e 	bne	r17,zero,80cb54 <__muldf3+0x834>
  80cb20:	0021883a 	mov	r16,zero
  80cb24:	102cd0fa 	srli	r22,r2,3
  80cb28:	3027883a 	mov	r19,r6
  80cb2c:	0005883a 	mov	r2,zero
  80cb30:	b46cb03a 	or	r22,r22,r17
  80cb34:	003e5906 	br	80c49c <__alt_data_end+0xff80c49c>
  80cb38:	1007883a 	mov	r3,r2
  80cb3c:	0023883a 	mov	r17,zero
  80cb40:	8820927a 	slli	r16,r17,9
  80cb44:	1805883a 	mov	r2,r3
  80cb48:	8822977a 	slli	r17,r17,29
  80cb4c:	8020d33a 	srli	r16,r16,12
  80cb50:	003ff406 	br	80cb24 <__alt_data_end+0xff80cb24>
  80cb54:	10c003cc 	andi	r3,r2,15
  80cb58:	01000104 	movi	r4,4
  80cb5c:	193ff626 	beq	r3,r4,80cb38 <__alt_data_end+0xff80cb38>
  80cb60:	0023883a 	mov	r17,zero
  80cb64:	003fd506 	br	80cabc <__alt_data_end+0xff80cabc>
  80cb68:	0023883a 	mov	r17,zero
  80cb6c:	003fe706 	br	80cb0c <__alt_data_end+0xff80cb0c>
  80cb70:	00800434 	movhi	r2,16
  80cb74:	8c000234 	orhi	r16,r17,8
  80cb78:	10bfffc4 	addi	r2,r2,-1
  80cb7c:	3027883a 	mov	r19,r6
  80cb80:	80a0703a 	and	r16,r16,r2
  80cb84:	902d883a 	mov	r22,r18
  80cb88:	003eac06 	br	80c63c <__alt_data_end+0xff80c63c>

0080cb8c <__subdf3>:
  80cb8c:	02000434 	movhi	r8,16
  80cb90:	423fffc4 	addi	r8,r8,-1
  80cb94:	defffb04 	addi	sp,sp,-20
  80cb98:	2a14703a 	and	r10,r5,r8
  80cb9c:	3812d53a 	srli	r9,r7,20
  80cba0:	3a10703a 	and	r8,r7,r8
  80cba4:	2006d77a 	srli	r3,r4,29
  80cba8:	3004d77a 	srli	r2,r6,29
  80cbac:	dc000015 	stw	r16,0(sp)
  80cbb0:	501490fa 	slli	r10,r10,3
  80cbb4:	2820d53a 	srli	r16,r5,20
  80cbb8:	401090fa 	slli	r8,r8,3
  80cbbc:	dc800215 	stw	r18,8(sp)
  80cbc0:	dc400115 	stw	r17,4(sp)
  80cbc4:	dfc00415 	stw	ra,16(sp)
  80cbc8:	202290fa 	slli	r17,r4,3
  80cbcc:	dcc00315 	stw	r19,12(sp)
  80cbd0:	4a41ffcc 	andi	r9,r9,2047
  80cbd4:	0101ffc4 	movi	r4,2047
  80cbd8:	2824d7fa 	srli	r18,r5,31
  80cbdc:	8401ffcc 	andi	r16,r16,2047
  80cbe0:	50c6b03a 	or	r3,r10,r3
  80cbe4:	380ed7fa 	srli	r7,r7,31
  80cbe8:	408ab03a 	or	r5,r8,r2
  80cbec:	300c90fa 	slli	r6,r6,3
  80cbf0:	49009626 	beq	r9,r4,80ce4c <__subdf3+0x2c0>
  80cbf4:	39c0005c 	xori	r7,r7,1
  80cbf8:	8245c83a 	sub	r2,r16,r9
  80cbfc:	3c807426 	beq	r7,r18,80cdd0 <__subdf3+0x244>
  80cc00:	0080af0e 	bge	zero,r2,80cec0 <__subdf3+0x334>
  80cc04:	48002a1e 	bne	r9,zero,80ccb0 <__subdf3+0x124>
  80cc08:	2988b03a 	or	r4,r5,r6
  80cc0c:	20009a1e 	bne	r4,zero,80ce78 <__subdf3+0x2ec>
  80cc10:	888001cc 	andi	r2,r17,7
  80cc14:	10000726 	beq	r2,zero,80cc34 <__subdf3+0xa8>
  80cc18:	888003cc 	andi	r2,r17,15
  80cc1c:	01000104 	movi	r4,4
  80cc20:	11000426 	beq	r2,r4,80cc34 <__subdf3+0xa8>
  80cc24:	890b883a 	add	r5,r17,r4
  80cc28:	2c63803a 	cmpltu	r17,r5,r17
  80cc2c:	1c47883a 	add	r3,r3,r17
  80cc30:	2823883a 	mov	r17,r5
  80cc34:	1880202c 	andhi	r2,r3,128
  80cc38:	10005926 	beq	r2,zero,80cda0 <__subdf3+0x214>
  80cc3c:	84000044 	addi	r16,r16,1
  80cc40:	0081ffc4 	movi	r2,2047
  80cc44:	8080be26 	beq	r16,r2,80cf40 <__subdf3+0x3b4>
  80cc48:	017fe034 	movhi	r5,65408
  80cc4c:	297fffc4 	addi	r5,r5,-1
  80cc50:	1946703a 	and	r3,r3,r5
  80cc54:	1804977a 	slli	r2,r3,29
  80cc58:	1806927a 	slli	r3,r3,9
  80cc5c:	8822d0fa 	srli	r17,r17,3
  80cc60:	8401ffcc 	andi	r16,r16,2047
  80cc64:	180ad33a 	srli	r5,r3,12
  80cc68:	9100004c 	andi	r4,r18,1
  80cc6c:	1444b03a 	or	r2,r2,r17
  80cc70:	80c1ffcc 	andi	r3,r16,2047
  80cc74:	1820953a 	slli	r16,r3,20
  80cc78:	20c03fcc 	andi	r3,r4,255
  80cc7c:	180897fa 	slli	r4,r3,31
  80cc80:	00c00434 	movhi	r3,16
  80cc84:	18ffffc4 	addi	r3,r3,-1
  80cc88:	28c6703a 	and	r3,r5,r3
  80cc8c:	1c06b03a 	or	r3,r3,r16
  80cc90:	1906b03a 	or	r3,r3,r4
  80cc94:	dfc00417 	ldw	ra,16(sp)
  80cc98:	dcc00317 	ldw	r19,12(sp)
  80cc9c:	dc800217 	ldw	r18,8(sp)
  80cca0:	dc400117 	ldw	r17,4(sp)
  80cca4:	dc000017 	ldw	r16,0(sp)
  80cca8:	dec00504 	addi	sp,sp,20
  80ccac:	f800283a 	ret
  80ccb0:	0101ffc4 	movi	r4,2047
  80ccb4:	813fd626 	beq	r16,r4,80cc10 <__alt_data_end+0xff80cc10>
  80ccb8:	29402034 	orhi	r5,r5,128
  80ccbc:	01000e04 	movi	r4,56
  80ccc0:	2080a316 	blt	r4,r2,80cf50 <__subdf3+0x3c4>
  80ccc4:	010007c4 	movi	r4,31
  80ccc8:	2080c616 	blt	r4,r2,80cfe4 <__subdf3+0x458>
  80cccc:	01000804 	movi	r4,32
  80ccd0:	2089c83a 	sub	r4,r4,r2
  80ccd4:	2910983a 	sll	r8,r5,r4
  80ccd8:	308ed83a 	srl	r7,r6,r2
  80ccdc:	3108983a 	sll	r4,r6,r4
  80cce0:	2884d83a 	srl	r2,r5,r2
  80cce4:	41ccb03a 	or	r6,r8,r7
  80cce8:	2008c03a 	cmpne	r4,r4,zero
  80ccec:	310cb03a 	or	r6,r6,r4
  80ccf0:	898dc83a 	sub	r6,r17,r6
  80ccf4:	89a3803a 	cmpltu	r17,r17,r6
  80ccf8:	1887c83a 	sub	r3,r3,r2
  80ccfc:	1c47c83a 	sub	r3,r3,r17
  80cd00:	3023883a 	mov	r17,r6
  80cd04:	1880202c 	andhi	r2,r3,128
  80cd08:	10002326 	beq	r2,zero,80cd98 <__subdf3+0x20c>
  80cd0c:	04c02034 	movhi	r19,128
  80cd10:	9cffffc4 	addi	r19,r19,-1
  80cd14:	1ce6703a 	and	r19,r3,r19
  80cd18:	98007a26 	beq	r19,zero,80cf04 <__subdf3+0x378>
  80cd1c:	9809883a 	mov	r4,r19
  80cd20:	080074c0 	call	80074c <__clzsi2>
  80cd24:	113ffe04 	addi	r4,r2,-8
  80cd28:	00c007c4 	movi	r3,31
  80cd2c:	19007b16 	blt	r3,r4,80cf1c <__subdf3+0x390>
  80cd30:	00800804 	movi	r2,32
  80cd34:	1105c83a 	sub	r2,r2,r4
  80cd38:	8884d83a 	srl	r2,r17,r2
  80cd3c:	9906983a 	sll	r3,r19,r4
  80cd40:	8922983a 	sll	r17,r17,r4
  80cd44:	10c4b03a 	or	r2,r2,r3
  80cd48:	24007816 	blt	r4,r16,80cf2c <__subdf3+0x3a0>
  80cd4c:	2421c83a 	sub	r16,r4,r16
  80cd50:	80c00044 	addi	r3,r16,1
  80cd54:	010007c4 	movi	r4,31
  80cd58:	20c09516 	blt	r4,r3,80cfb0 <__subdf3+0x424>
  80cd5c:	01400804 	movi	r5,32
  80cd60:	28cbc83a 	sub	r5,r5,r3
  80cd64:	88c8d83a 	srl	r4,r17,r3
  80cd68:	8962983a 	sll	r17,r17,r5
  80cd6c:	114a983a 	sll	r5,r2,r5
  80cd70:	10c6d83a 	srl	r3,r2,r3
  80cd74:	8804c03a 	cmpne	r2,r17,zero
  80cd78:	290ab03a 	or	r5,r5,r4
  80cd7c:	28a2b03a 	or	r17,r5,r2
  80cd80:	0021883a 	mov	r16,zero
  80cd84:	003fa206 	br	80cc10 <__alt_data_end+0xff80cc10>
  80cd88:	2090b03a 	or	r8,r4,r2
  80cd8c:	40018e26 	beq	r8,zero,80d3c8 <__subdf3+0x83c>
  80cd90:	1007883a 	mov	r3,r2
  80cd94:	2023883a 	mov	r17,r4
  80cd98:	888001cc 	andi	r2,r17,7
  80cd9c:	103f9e1e 	bne	r2,zero,80cc18 <__alt_data_end+0xff80cc18>
  80cda0:	1804977a 	slli	r2,r3,29
  80cda4:	8822d0fa 	srli	r17,r17,3
  80cda8:	1810d0fa 	srli	r8,r3,3
  80cdac:	9100004c 	andi	r4,r18,1
  80cdb0:	1444b03a 	or	r2,r2,r17
  80cdb4:	00c1ffc4 	movi	r3,2047
  80cdb8:	80c02826 	beq	r16,r3,80ce5c <__subdf3+0x2d0>
  80cdbc:	01400434 	movhi	r5,16
  80cdc0:	297fffc4 	addi	r5,r5,-1
  80cdc4:	80e0703a 	and	r16,r16,r3
  80cdc8:	414a703a 	and	r5,r8,r5
  80cdcc:	003fa806 	br	80cc70 <__alt_data_end+0xff80cc70>
  80cdd0:	0080630e 	bge	zero,r2,80cf60 <__subdf3+0x3d4>
  80cdd4:	48003026 	beq	r9,zero,80ce98 <__subdf3+0x30c>
  80cdd8:	0101ffc4 	movi	r4,2047
  80cddc:	813f8c26 	beq	r16,r4,80cc10 <__alt_data_end+0xff80cc10>
  80cde0:	29402034 	orhi	r5,r5,128
  80cde4:	01000e04 	movi	r4,56
  80cde8:	2080a90e 	bge	r4,r2,80d090 <__subdf3+0x504>
  80cdec:	298cb03a 	or	r6,r5,r6
  80cdf0:	3012c03a 	cmpne	r9,r6,zero
  80cdf4:	0005883a 	mov	r2,zero
  80cdf8:	4c53883a 	add	r9,r9,r17
  80cdfc:	4c63803a 	cmpltu	r17,r9,r17
  80ce00:	10c7883a 	add	r3,r2,r3
  80ce04:	88c7883a 	add	r3,r17,r3
  80ce08:	4823883a 	mov	r17,r9
  80ce0c:	1880202c 	andhi	r2,r3,128
  80ce10:	1000d026 	beq	r2,zero,80d154 <__subdf3+0x5c8>
  80ce14:	84000044 	addi	r16,r16,1
  80ce18:	0081ffc4 	movi	r2,2047
  80ce1c:	8080fe26 	beq	r16,r2,80d218 <__subdf3+0x68c>
  80ce20:	00bfe034 	movhi	r2,65408
  80ce24:	10bfffc4 	addi	r2,r2,-1
  80ce28:	1886703a 	and	r3,r3,r2
  80ce2c:	880ad07a 	srli	r5,r17,1
  80ce30:	180497fa 	slli	r2,r3,31
  80ce34:	8900004c 	andi	r4,r17,1
  80ce38:	2922b03a 	or	r17,r5,r4
  80ce3c:	1806d07a 	srli	r3,r3,1
  80ce40:	1462b03a 	or	r17,r2,r17
  80ce44:	3825883a 	mov	r18,r7
  80ce48:	003f7106 	br	80cc10 <__alt_data_end+0xff80cc10>
  80ce4c:	2984b03a 	or	r2,r5,r6
  80ce50:	103f6826 	beq	r2,zero,80cbf4 <__alt_data_end+0xff80cbf4>
  80ce54:	39c03fcc 	andi	r7,r7,255
  80ce58:	003f6706 	br	80cbf8 <__alt_data_end+0xff80cbf8>
  80ce5c:	4086b03a 	or	r3,r8,r2
  80ce60:	18015226 	beq	r3,zero,80d3ac <__subdf3+0x820>
  80ce64:	00c00434 	movhi	r3,16
  80ce68:	41400234 	orhi	r5,r8,8
  80ce6c:	18ffffc4 	addi	r3,r3,-1
  80ce70:	28ca703a 	and	r5,r5,r3
  80ce74:	003f7e06 	br	80cc70 <__alt_data_end+0xff80cc70>
  80ce78:	10bfffc4 	addi	r2,r2,-1
  80ce7c:	1000491e 	bne	r2,zero,80cfa4 <__subdf3+0x418>
  80ce80:	898fc83a 	sub	r7,r17,r6
  80ce84:	89e3803a 	cmpltu	r17,r17,r7
  80ce88:	1947c83a 	sub	r3,r3,r5
  80ce8c:	1c47c83a 	sub	r3,r3,r17
  80ce90:	3823883a 	mov	r17,r7
  80ce94:	003f9b06 	br	80cd04 <__alt_data_end+0xff80cd04>
  80ce98:	2988b03a 	or	r4,r5,r6
  80ce9c:	203f5c26 	beq	r4,zero,80cc10 <__alt_data_end+0xff80cc10>
  80cea0:	10bfffc4 	addi	r2,r2,-1
  80cea4:	1000931e 	bne	r2,zero,80d0f4 <__subdf3+0x568>
  80cea8:	898d883a 	add	r6,r17,r6
  80ceac:	3463803a 	cmpltu	r17,r6,r17
  80ceb0:	1947883a 	add	r3,r3,r5
  80ceb4:	88c7883a 	add	r3,r17,r3
  80ceb8:	3023883a 	mov	r17,r6
  80cebc:	003fd306 	br	80ce0c <__alt_data_end+0xff80ce0c>
  80cec0:	1000541e 	bne	r2,zero,80d014 <__subdf3+0x488>
  80cec4:	80800044 	addi	r2,r16,1
  80cec8:	1081ffcc 	andi	r2,r2,2047
  80cecc:	01000044 	movi	r4,1
  80ced0:	2080a20e 	bge	r4,r2,80d15c <__subdf3+0x5d0>
  80ced4:	8989c83a 	sub	r4,r17,r6
  80ced8:	8905803a 	cmpltu	r2,r17,r4
  80cedc:	1967c83a 	sub	r19,r3,r5
  80cee0:	98a7c83a 	sub	r19,r19,r2
  80cee4:	9880202c 	andhi	r2,r19,128
  80cee8:	10006326 	beq	r2,zero,80d078 <__subdf3+0x4ec>
  80ceec:	3463c83a 	sub	r17,r6,r17
  80cef0:	28c7c83a 	sub	r3,r5,r3
  80cef4:	344d803a 	cmpltu	r6,r6,r17
  80cef8:	19a7c83a 	sub	r19,r3,r6
  80cefc:	3825883a 	mov	r18,r7
  80cf00:	983f861e 	bne	r19,zero,80cd1c <__alt_data_end+0xff80cd1c>
  80cf04:	8809883a 	mov	r4,r17
  80cf08:	080074c0 	call	80074c <__clzsi2>
  80cf0c:	10800804 	addi	r2,r2,32
  80cf10:	113ffe04 	addi	r4,r2,-8
  80cf14:	00c007c4 	movi	r3,31
  80cf18:	193f850e 	bge	r3,r4,80cd30 <__alt_data_end+0xff80cd30>
  80cf1c:	10bff604 	addi	r2,r2,-40
  80cf20:	8884983a 	sll	r2,r17,r2
  80cf24:	0023883a 	mov	r17,zero
  80cf28:	243f880e 	bge	r4,r16,80cd4c <__alt_data_end+0xff80cd4c>
  80cf2c:	00ffe034 	movhi	r3,65408
  80cf30:	18ffffc4 	addi	r3,r3,-1
  80cf34:	8121c83a 	sub	r16,r16,r4
  80cf38:	10c6703a 	and	r3,r2,r3
  80cf3c:	003f3406 	br	80cc10 <__alt_data_end+0xff80cc10>
  80cf40:	9100004c 	andi	r4,r18,1
  80cf44:	000b883a 	mov	r5,zero
  80cf48:	0005883a 	mov	r2,zero
  80cf4c:	003f4806 	br	80cc70 <__alt_data_end+0xff80cc70>
  80cf50:	298cb03a 	or	r6,r5,r6
  80cf54:	300cc03a 	cmpne	r6,r6,zero
  80cf58:	0005883a 	mov	r2,zero
  80cf5c:	003f6406 	br	80ccf0 <__alt_data_end+0xff80ccf0>
  80cf60:	10009a1e 	bne	r2,zero,80d1cc <__subdf3+0x640>
  80cf64:	82400044 	addi	r9,r16,1
  80cf68:	4881ffcc 	andi	r2,r9,2047
  80cf6c:	02800044 	movi	r10,1
  80cf70:	5080670e 	bge	r10,r2,80d110 <__subdf3+0x584>
  80cf74:	0081ffc4 	movi	r2,2047
  80cf78:	4880af26 	beq	r9,r2,80d238 <__subdf3+0x6ac>
  80cf7c:	898d883a 	add	r6,r17,r6
  80cf80:	1945883a 	add	r2,r3,r5
  80cf84:	3447803a 	cmpltu	r3,r6,r17
  80cf88:	1887883a 	add	r3,r3,r2
  80cf8c:	182297fa 	slli	r17,r3,31
  80cf90:	300cd07a 	srli	r6,r6,1
  80cf94:	1806d07a 	srli	r3,r3,1
  80cf98:	4821883a 	mov	r16,r9
  80cf9c:	89a2b03a 	or	r17,r17,r6
  80cfa0:	003f1b06 	br	80cc10 <__alt_data_end+0xff80cc10>
  80cfa4:	0101ffc4 	movi	r4,2047
  80cfa8:	813f441e 	bne	r16,r4,80ccbc <__alt_data_end+0xff80ccbc>
  80cfac:	003f1806 	br	80cc10 <__alt_data_end+0xff80cc10>
  80cfb0:	843ff844 	addi	r16,r16,-31
  80cfb4:	01400804 	movi	r5,32
  80cfb8:	1408d83a 	srl	r4,r2,r16
  80cfbc:	19405026 	beq	r3,r5,80d100 <__subdf3+0x574>
  80cfc0:	01401004 	movi	r5,64
  80cfc4:	28c7c83a 	sub	r3,r5,r3
  80cfc8:	10c4983a 	sll	r2,r2,r3
  80cfcc:	88a2b03a 	or	r17,r17,r2
  80cfd0:	8822c03a 	cmpne	r17,r17,zero
  80cfd4:	2462b03a 	or	r17,r4,r17
  80cfd8:	0007883a 	mov	r3,zero
  80cfdc:	0021883a 	mov	r16,zero
  80cfe0:	003f6d06 	br	80cd98 <__alt_data_end+0xff80cd98>
  80cfe4:	11fff804 	addi	r7,r2,-32
  80cfe8:	01000804 	movi	r4,32
  80cfec:	29ced83a 	srl	r7,r5,r7
  80cff0:	11004526 	beq	r2,r4,80d108 <__subdf3+0x57c>
  80cff4:	01001004 	movi	r4,64
  80cff8:	2089c83a 	sub	r4,r4,r2
  80cffc:	2904983a 	sll	r2,r5,r4
  80d000:	118cb03a 	or	r6,r2,r6
  80d004:	300cc03a 	cmpne	r6,r6,zero
  80d008:	398cb03a 	or	r6,r7,r6
  80d00c:	0005883a 	mov	r2,zero
  80d010:	003f3706 	br	80ccf0 <__alt_data_end+0xff80ccf0>
  80d014:	80002a26 	beq	r16,zero,80d0c0 <__subdf3+0x534>
  80d018:	0101ffc4 	movi	r4,2047
  80d01c:	49006626 	beq	r9,r4,80d1b8 <__subdf3+0x62c>
  80d020:	0085c83a 	sub	r2,zero,r2
  80d024:	18c02034 	orhi	r3,r3,128
  80d028:	01000e04 	movi	r4,56
  80d02c:	20807e16 	blt	r4,r2,80d228 <__subdf3+0x69c>
  80d030:	010007c4 	movi	r4,31
  80d034:	2080e716 	blt	r4,r2,80d3d4 <__subdf3+0x848>
  80d038:	01000804 	movi	r4,32
  80d03c:	2089c83a 	sub	r4,r4,r2
  80d040:	1914983a 	sll	r10,r3,r4
  80d044:	8890d83a 	srl	r8,r17,r2
  80d048:	8908983a 	sll	r4,r17,r4
  80d04c:	1884d83a 	srl	r2,r3,r2
  80d050:	5222b03a 	or	r17,r10,r8
  80d054:	2006c03a 	cmpne	r3,r4,zero
  80d058:	88e2b03a 	or	r17,r17,r3
  80d05c:	3463c83a 	sub	r17,r6,r17
  80d060:	2885c83a 	sub	r2,r5,r2
  80d064:	344d803a 	cmpltu	r6,r6,r17
  80d068:	1187c83a 	sub	r3,r2,r6
  80d06c:	4821883a 	mov	r16,r9
  80d070:	3825883a 	mov	r18,r7
  80d074:	003f2306 	br	80cd04 <__alt_data_end+0xff80cd04>
  80d078:	24d0b03a 	or	r8,r4,r19
  80d07c:	40001b1e 	bne	r8,zero,80d0ec <__subdf3+0x560>
  80d080:	0005883a 	mov	r2,zero
  80d084:	0009883a 	mov	r4,zero
  80d088:	0021883a 	mov	r16,zero
  80d08c:	003f4906 	br	80cdb4 <__alt_data_end+0xff80cdb4>
  80d090:	010007c4 	movi	r4,31
  80d094:	20803a16 	blt	r4,r2,80d180 <__subdf3+0x5f4>
  80d098:	01000804 	movi	r4,32
  80d09c:	2089c83a 	sub	r4,r4,r2
  80d0a0:	2912983a 	sll	r9,r5,r4
  80d0a4:	3090d83a 	srl	r8,r6,r2
  80d0a8:	3108983a 	sll	r4,r6,r4
  80d0ac:	2884d83a 	srl	r2,r5,r2
  80d0b0:	4a12b03a 	or	r9,r9,r8
  80d0b4:	2008c03a 	cmpne	r4,r4,zero
  80d0b8:	4912b03a 	or	r9,r9,r4
  80d0bc:	003f4e06 	br	80cdf8 <__alt_data_end+0xff80cdf8>
  80d0c0:	1c48b03a 	or	r4,r3,r17
  80d0c4:	20003c26 	beq	r4,zero,80d1b8 <__subdf3+0x62c>
  80d0c8:	0084303a 	nor	r2,zero,r2
  80d0cc:	1000381e 	bne	r2,zero,80d1b0 <__subdf3+0x624>
  80d0d0:	3463c83a 	sub	r17,r6,r17
  80d0d4:	28c5c83a 	sub	r2,r5,r3
  80d0d8:	344d803a 	cmpltu	r6,r6,r17
  80d0dc:	1187c83a 	sub	r3,r2,r6
  80d0e0:	4821883a 	mov	r16,r9
  80d0e4:	3825883a 	mov	r18,r7
  80d0e8:	003f0606 	br	80cd04 <__alt_data_end+0xff80cd04>
  80d0ec:	2023883a 	mov	r17,r4
  80d0f0:	003f0906 	br	80cd18 <__alt_data_end+0xff80cd18>
  80d0f4:	0101ffc4 	movi	r4,2047
  80d0f8:	813f3a1e 	bne	r16,r4,80cde4 <__alt_data_end+0xff80cde4>
  80d0fc:	003ec406 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d100:	0005883a 	mov	r2,zero
  80d104:	003fb106 	br	80cfcc <__alt_data_end+0xff80cfcc>
  80d108:	0005883a 	mov	r2,zero
  80d10c:	003fbc06 	br	80d000 <__alt_data_end+0xff80d000>
  80d110:	1c44b03a 	or	r2,r3,r17
  80d114:	80008e1e 	bne	r16,zero,80d350 <__subdf3+0x7c4>
  80d118:	1000c826 	beq	r2,zero,80d43c <__subdf3+0x8b0>
  80d11c:	2984b03a 	or	r2,r5,r6
  80d120:	103ebb26 	beq	r2,zero,80cc10 <__alt_data_end+0xff80cc10>
  80d124:	8989883a 	add	r4,r17,r6
  80d128:	1945883a 	add	r2,r3,r5
  80d12c:	2447803a 	cmpltu	r3,r4,r17
  80d130:	1887883a 	add	r3,r3,r2
  80d134:	1880202c 	andhi	r2,r3,128
  80d138:	2023883a 	mov	r17,r4
  80d13c:	103f1626 	beq	r2,zero,80cd98 <__alt_data_end+0xff80cd98>
  80d140:	00bfe034 	movhi	r2,65408
  80d144:	10bfffc4 	addi	r2,r2,-1
  80d148:	5021883a 	mov	r16,r10
  80d14c:	1886703a 	and	r3,r3,r2
  80d150:	003eaf06 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d154:	3825883a 	mov	r18,r7
  80d158:	003f0f06 	br	80cd98 <__alt_data_end+0xff80cd98>
  80d15c:	1c44b03a 	or	r2,r3,r17
  80d160:	8000251e 	bne	r16,zero,80d1f8 <__subdf3+0x66c>
  80d164:	1000661e 	bne	r2,zero,80d300 <__subdf3+0x774>
  80d168:	2990b03a 	or	r8,r5,r6
  80d16c:	40009626 	beq	r8,zero,80d3c8 <__subdf3+0x83c>
  80d170:	2807883a 	mov	r3,r5
  80d174:	3023883a 	mov	r17,r6
  80d178:	3825883a 	mov	r18,r7
  80d17c:	003ea406 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d180:	127ff804 	addi	r9,r2,-32
  80d184:	01000804 	movi	r4,32
  80d188:	2a52d83a 	srl	r9,r5,r9
  80d18c:	11008c26 	beq	r2,r4,80d3c0 <__subdf3+0x834>
  80d190:	01001004 	movi	r4,64
  80d194:	2085c83a 	sub	r2,r4,r2
  80d198:	2884983a 	sll	r2,r5,r2
  80d19c:	118cb03a 	or	r6,r2,r6
  80d1a0:	300cc03a 	cmpne	r6,r6,zero
  80d1a4:	4992b03a 	or	r9,r9,r6
  80d1a8:	0005883a 	mov	r2,zero
  80d1ac:	003f1206 	br	80cdf8 <__alt_data_end+0xff80cdf8>
  80d1b0:	0101ffc4 	movi	r4,2047
  80d1b4:	493f9c1e 	bne	r9,r4,80d028 <__alt_data_end+0xff80d028>
  80d1b8:	2807883a 	mov	r3,r5
  80d1bc:	3023883a 	mov	r17,r6
  80d1c0:	4821883a 	mov	r16,r9
  80d1c4:	3825883a 	mov	r18,r7
  80d1c8:	003e9106 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d1cc:	80001f1e 	bne	r16,zero,80d24c <__subdf3+0x6c0>
  80d1d0:	1c48b03a 	or	r4,r3,r17
  80d1d4:	20005a26 	beq	r4,zero,80d340 <__subdf3+0x7b4>
  80d1d8:	0084303a 	nor	r2,zero,r2
  80d1dc:	1000561e 	bne	r2,zero,80d338 <__subdf3+0x7ac>
  80d1e0:	89a3883a 	add	r17,r17,r6
  80d1e4:	1945883a 	add	r2,r3,r5
  80d1e8:	898d803a 	cmpltu	r6,r17,r6
  80d1ec:	3087883a 	add	r3,r6,r2
  80d1f0:	4821883a 	mov	r16,r9
  80d1f4:	003f0506 	br	80ce0c <__alt_data_end+0xff80ce0c>
  80d1f8:	10002b1e 	bne	r2,zero,80d2a8 <__subdf3+0x71c>
  80d1fc:	2984b03a 	or	r2,r5,r6
  80d200:	10008026 	beq	r2,zero,80d404 <__subdf3+0x878>
  80d204:	2807883a 	mov	r3,r5
  80d208:	3023883a 	mov	r17,r6
  80d20c:	3825883a 	mov	r18,r7
  80d210:	0401ffc4 	movi	r16,2047
  80d214:	003e7e06 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d218:	3809883a 	mov	r4,r7
  80d21c:	0011883a 	mov	r8,zero
  80d220:	0005883a 	mov	r2,zero
  80d224:	003ee306 	br	80cdb4 <__alt_data_end+0xff80cdb4>
  80d228:	1c62b03a 	or	r17,r3,r17
  80d22c:	8822c03a 	cmpne	r17,r17,zero
  80d230:	0005883a 	mov	r2,zero
  80d234:	003f8906 	br	80d05c <__alt_data_end+0xff80d05c>
  80d238:	3809883a 	mov	r4,r7
  80d23c:	4821883a 	mov	r16,r9
  80d240:	0011883a 	mov	r8,zero
  80d244:	0005883a 	mov	r2,zero
  80d248:	003eda06 	br	80cdb4 <__alt_data_end+0xff80cdb4>
  80d24c:	0101ffc4 	movi	r4,2047
  80d250:	49003b26 	beq	r9,r4,80d340 <__subdf3+0x7b4>
  80d254:	0085c83a 	sub	r2,zero,r2
  80d258:	18c02034 	orhi	r3,r3,128
  80d25c:	01000e04 	movi	r4,56
  80d260:	20806e16 	blt	r4,r2,80d41c <__subdf3+0x890>
  80d264:	010007c4 	movi	r4,31
  80d268:	20807716 	blt	r4,r2,80d448 <__subdf3+0x8bc>
  80d26c:	01000804 	movi	r4,32
  80d270:	2089c83a 	sub	r4,r4,r2
  80d274:	1914983a 	sll	r10,r3,r4
  80d278:	8890d83a 	srl	r8,r17,r2
  80d27c:	8908983a 	sll	r4,r17,r4
  80d280:	1884d83a 	srl	r2,r3,r2
  80d284:	5222b03a 	or	r17,r10,r8
  80d288:	2006c03a 	cmpne	r3,r4,zero
  80d28c:	88e2b03a 	or	r17,r17,r3
  80d290:	89a3883a 	add	r17,r17,r6
  80d294:	1145883a 	add	r2,r2,r5
  80d298:	898d803a 	cmpltu	r6,r17,r6
  80d29c:	3087883a 	add	r3,r6,r2
  80d2a0:	4821883a 	mov	r16,r9
  80d2a4:	003ed906 	br	80ce0c <__alt_data_end+0xff80ce0c>
  80d2a8:	2984b03a 	or	r2,r5,r6
  80d2ac:	10004226 	beq	r2,zero,80d3b8 <__subdf3+0x82c>
  80d2b0:	1808d0fa 	srli	r4,r3,3
  80d2b4:	8822d0fa 	srli	r17,r17,3
  80d2b8:	1806977a 	slli	r3,r3,29
  80d2bc:	2080022c 	andhi	r2,r4,8
  80d2c0:	1c62b03a 	or	r17,r3,r17
  80d2c4:	10000826 	beq	r2,zero,80d2e8 <__subdf3+0x75c>
  80d2c8:	2812d0fa 	srli	r9,r5,3
  80d2cc:	4880022c 	andhi	r2,r9,8
  80d2d0:	1000051e 	bne	r2,zero,80d2e8 <__subdf3+0x75c>
  80d2d4:	300cd0fa 	srli	r6,r6,3
  80d2d8:	2804977a 	slli	r2,r5,29
  80d2dc:	4809883a 	mov	r4,r9
  80d2e0:	3825883a 	mov	r18,r7
  80d2e4:	11a2b03a 	or	r17,r2,r6
  80d2e8:	8806d77a 	srli	r3,r17,29
  80d2ec:	200890fa 	slli	r4,r4,3
  80d2f0:	882290fa 	slli	r17,r17,3
  80d2f4:	0401ffc4 	movi	r16,2047
  80d2f8:	1906b03a 	or	r3,r3,r4
  80d2fc:	003e4406 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d300:	2984b03a 	or	r2,r5,r6
  80d304:	103e4226 	beq	r2,zero,80cc10 <__alt_data_end+0xff80cc10>
  80d308:	8989c83a 	sub	r4,r17,r6
  80d30c:	8911803a 	cmpltu	r8,r17,r4
  80d310:	1945c83a 	sub	r2,r3,r5
  80d314:	1205c83a 	sub	r2,r2,r8
  80d318:	1200202c 	andhi	r8,r2,128
  80d31c:	403e9a26 	beq	r8,zero,80cd88 <__alt_data_end+0xff80cd88>
  80d320:	3463c83a 	sub	r17,r6,r17
  80d324:	28c5c83a 	sub	r2,r5,r3
  80d328:	344d803a 	cmpltu	r6,r6,r17
  80d32c:	1187c83a 	sub	r3,r2,r6
  80d330:	3825883a 	mov	r18,r7
  80d334:	003e3606 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d338:	0101ffc4 	movi	r4,2047
  80d33c:	493fc71e 	bne	r9,r4,80d25c <__alt_data_end+0xff80d25c>
  80d340:	2807883a 	mov	r3,r5
  80d344:	3023883a 	mov	r17,r6
  80d348:	4821883a 	mov	r16,r9
  80d34c:	003e3006 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d350:	10003626 	beq	r2,zero,80d42c <__subdf3+0x8a0>
  80d354:	2984b03a 	or	r2,r5,r6
  80d358:	10001726 	beq	r2,zero,80d3b8 <__subdf3+0x82c>
  80d35c:	1808d0fa 	srli	r4,r3,3
  80d360:	8822d0fa 	srli	r17,r17,3
  80d364:	1806977a 	slli	r3,r3,29
  80d368:	2080022c 	andhi	r2,r4,8
  80d36c:	1c62b03a 	or	r17,r3,r17
  80d370:	10000726 	beq	r2,zero,80d390 <__subdf3+0x804>
  80d374:	2812d0fa 	srli	r9,r5,3
  80d378:	4880022c 	andhi	r2,r9,8
  80d37c:	1000041e 	bne	r2,zero,80d390 <__subdf3+0x804>
  80d380:	300cd0fa 	srli	r6,r6,3
  80d384:	2804977a 	slli	r2,r5,29
  80d388:	4809883a 	mov	r4,r9
  80d38c:	11a2b03a 	or	r17,r2,r6
  80d390:	8806d77a 	srli	r3,r17,29
  80d394:	200890fa 	slli	r4,r4,3
  80d398:	882290fa 	slli	r17,r17,3
  80d39c:	3825883a 	mov	r18,r7
  80d3a0:	1906b03a 	or	r3,r3,r4
  80d3a4:	0401ffc4 	movi	r16,2047
  80d3a8:	003e1906 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d3ac:	000b883a 	mov	r5,zero
  80d3b0:	0005883a 	mov	r2,zero
  80d3b4:	003e2e06 	br	80cc70 <__alt_data_end+0xff80cc70>
  80d3b8:	0401ffc4 	movi	r16,2047
  80d3bc:	003e1406 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d3c0:	0005883a 	mov	r2,zero
  80d3c4:	003f7506 	br	80d19c <__alt_data_end+0xff80d19c>
  80d3c8:	0005883a 	mov	r2,zero
  80d3cc:	0009883a 	mov	r4,zero
  80d3d0:	003e7806 	br	80cdb4 <__alt_data_end+0xff80cdb4>
  80d3d4:	123ff804 	addi	r8,r2,-32
  80d3d8:	01000804 	movi	r4,32
  80d3dc:	1a10d83a 	srl	r8,r3,r8
  80d3e0:	11002526 	beq	r2,r4,80d478 <__subdf3+0x8ec>
  80d3e4:	01001004 	movi	r4,64
  80d3e8:	2085c83a 	sub	r2,r4,r2
  80d3ec:	1884983a 	sll	r2,r3,r2
  80d3f0:	1444b03a 	or	r2,r2,r17
  80d3f4:	1004c03a 	cmpne	r2,r2,zero
  80d3f8:	40a2b03a 	or	r17,r8,r2
  80d3fc:	0005883a 	mov	r2,zero
  80d400:	003f1606 	br	80d05c <__alt_data_end+0xff80d05c>
  80d404:	02000434 	movhi	r8,16
  80d408:	0009883a 	mov	r4,zero
  80d40c:	423fffc4 	addi	r8,r8,-1
  80d410:	00bfffc4 	movi	r2,-1
  80d414:	0401ffc4 	movi	r16,2047
  80d418:	003e6606 	br	80cdb4 <__alt_data_end+0xff80cdb4>
  80d41c:	1c62b03a 	or	r17,r3,r17
  80d420:	8822c03a 	cmpne	r17,r17,zero
  80d424:	0005883a 	mov	r2,zero
  80d428:	003f9906 	br	80d290 <__alt_data_end+0xff80d290>
  80d42c:	2807883a 	mov	r3,r5
  80d430:	3023883a 	mov	r17,r6
  80d434:	0401ffc4 	movi	r16,2047
  80d438:	003df506 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d43c:	2807883a 	mov	r3,r5
  80d440:	3023883a 	mov	r17,r6
  80d444:	003df206 	br	80cc10 <__alt_data_end+0xff80cc10>
  80d448:	123ff804 	addi	r8,r2,-32
  80d44c:	01000804 	movi	r4,32
  80d450:	1a10d83a 	srl	r8,r3,r8
  80d454:	11000a26 	beq	r2,r4,80d480 <__subdf3+0x8f4>
  80d458:	01001004 	movi	r4,64
  80d45c:	2085c83a 	sub	r2,r4,r2
  80d460:	1884983a 	sll	r2,r3,r2
  80d464:	1444b03a 	or	r2,r2,r17
  80d468:	1004c03a 	cmpne	r2,r2,zero
  80d46c:	40a2b03a 	or	r17,r8,r2
  80d470:	0005883a 	mov	r2,zero
  80d474:	003f8606 	br	80d290 <__alt_data_end+0xff80d290>
  80d478:	0005883a 	mov	r2,zero
  80d47c:	003fdc06 	br	80d3f0 <__alt_data_end+0xff80d3f0>
  80d480:	0005883a 	mov	r2,zero
  80d484:	003ff706 	br	80d464 <__alt_data_end+0xff80d464>

0080d488 <__fixdfsi>:
  80d488:	280cd53a 	srli	r6,r5,20
  80d48c:	00c00434 	movhi	r3,16
  80d490:	18ffffc4 	addi	r3,r3,-1
  80d494:	3181ffcc 	andi	r6,r6,2047
  80d498:	01c0ff84 	movi	r7,1022
  80d49c:	28c6703a 	and	r3,r5,r3
  80d4a0:	280ad7fa 	srli	r5,r5,31
  80d4a4:	3980120e 	bge	r7,r6,80d4f0 <__fixdfsi+0x68>
  80d4a8:	00810744 	movi	r2,1053
  80d4ac:	11800c16 	blt	r2,r6,80d4e0 <__fixdfsi+0x58>
  80d4b0:	00810cc4 	movi	r2,1075
  80d4b4:	1185c83a 	sub	r2,r2,r6
  80d4b8:	01c007c4 	movi	r7,31
  80d4bc:	18c00434 	orhi	r3,r3,16
  80d4c0:	38800d16 	blt	r7,r2,80d4f8 <__fixdfsi+0x70>
  80d4c4:	31befb44 	addi	r6,r6,-1043
  80d4c8:	2084d83a 	srl	r2,r4,r2
  80d4cc:	1986983a 	sll	r3,r3,r6
  80d4d0:	1884b03a 	or	r2,r3,r2
  80d4d4:	28000726 	beq	r5,zero,80d4f4 <__fixdfsi+0x6c>
  80d4d8:	0085c83a 	sub	r2,zero,r2
  80d4dc:	f800283a 	ret
  80d4e0:	00a00034 	movhi	r2,32768
  80d4e4:	10bfffc4 	addi	r2,r2,-1
  80d4e8:	2885883a 	add	r2,r5,r2
  80d4ec:	f800283a 	ret
  80d4f0:	0005883a 	mov	r2,zero
  80d4f4:	f800283a 	ret
  80d4f8:	008104c4 	movi	r2,1043
  80d4fc:	1185c83a 	sub	r2,r2,r6
  80d500:	1884d83a 	srl	r2,r3,r2
  80d504:	003ff306 	br	80d4d4 <__alt_data_end+0xff80d4d4>

0080d508 <__floatsidf>:
  80d508:	defffd04 	addi	sp,sp,-12
  80d50c:	dfc00215 	stw	ra,8(sp)
  80d510:	dc400115 	stw	r17,4(sp)
  80d514:	dc000015 	stw	r16,0(sp)
  80d518:	20002b26 	beq	r4,zero,80d5c8 <__floatsidf+0xc0>
  80d51c:	2023883a 	mov	r17,r4
  80d520:	2020d7fa 	srli	r16,r4,31
  80d524:	20002d16 	blt	r4,zero,80d5dc <__floatsidf+0xd4>
  80d528:	8809883a 	mov	r4,r17
  80d52c:	080074c0 	call	80074c <__clzsi2>
  80d530:	01410784 	movi	r5,1054
  80d534:	288bc83a 	sub	r5,r5,r2
  80d538:	01010cc4 	movi	r4,1075
  80d53c:	2149c83a 	sub	r4,r4,r5
  80d540:	00c007c4 	movi	r3,31
  80d544:	1900160e 	bge	r3,r4,80d5a0 <__floatsidf+0x98>
  80d548:	00c104c4 	movi	r3,1043
  80d54c:	1947c83a 	sub	r3,r3,r5
  80d550:	88c6983a 	sll	r3,r17,r3
  80d554:	00800434 	movhi	r2,16
  80d558:	10bfffc4 	addi	r2,r2,-1
  80d55c:	1886703a 	and	r3,r3,r2
  80d560:	2941ffcc 	andi	r5,r5,2047
  80d564:	800d883a 	mov	r6,r16
  80d568:	0005883a 	mov	r2,zero
  80d56c:	280a953a 	slli	r5,r5,20
  80d570:	31803fcc 	andi	r6,r6,255
  80d574:	01000434 	movhi	r4,16
  80d578:	300c97fa 	slli	r6,r6,31
  80d57c:	213fffc4 	addi	r4,r4,-1
  80d580:	1906703a 	and	r3,r3,r4
  80d584:	1946b03a 	or	r3,r3,r5
  80d588:	1986b03a 	or	r3,r3,r6
  80d58c:	dfc00217 	ldw	ra,8(sp)
  80d590:	dc400117 	ldw	r17,4(sp)
  80d594:	dc000017 	ldw	r16,0(sp)
  80d598:	dec00304 	addi	sp,sp,12
  80d59c:	f800283a 	ret
  80d5a0:	00c002c4 	movi	r3,11
  80d5a4:	1887c83a 	sub	r3,r3,r2
  80d5a8:	88c6d83a 	srl	r3,r17,r3
  80d5ac:	8904983a 	sll	r2,r17,r4
  80d5b0:	01000434 	movhi	r4,16
  80d5b4:	213fffc4 	addi	r4,r4,-1
  80d5b8:	2941ffcc 	andi	r5,r5,2047
  80d5bc:	1906703a 	and	r3,r3,r4
  80d5c0:	800d883a 	mov	r6,r16
  80d5c4:	003fe906 	br	80d56c <__alt_data_end+0xff80d56c>
  80d5c8:	000d883a 	mov	r6,zero
  80d5cc:	000b883a 	mov	r5,zero
  80d5d0:	0007883a 	mov	r3,zero
  80d5d4:	0005883a 	mov	r2,zero
  80d5d8:	003fe406 	br	80d56c <__alt_data_end+0xff80d56c>
  80d5dc:	0123c83a 	sub	r17,zero,r4
  80d5e0:	003fd106 	br	80d528 <__alt_data_end+0xff80d528>

0080d5e4 <__floatunsidf>:
  80d5e4:	defffe04 	addi	sp,sp,-8
  80d5e8:	dc000015 	stw	r16,0(sp)
  80d5ec:	dfc00115 	stw	ra,4(sp)
  80d5f0:	2021883a 	mov	r16,r4
  80d5f4:	20002226 	beq	r4,zero,80d680 <__floatunsidf+0x9c>
  80d5f8:	080074c0 	call	80074c <__clzsi2>
  80d5fc:	01010784 	movi	r4,1054
  80d600:	2089c83a 	sub	r4,r4,r2
  80d604:	01810cc4 	movi	r6,1075
  80d608:	310dc83a 	sub	r6,r6,r4
  80d60c:	00c007c4 	movi	r3,31
  80d610:	1980120e 	bge	r3,r6,80d65c <__floatunsidf+0x78>
  80d614:	00c104c4 	movi	r3,1043
  80d618:	1907c83a 	sub	r3,r3,r4
  80d61c:	80ca983a 	sll	r5,r16,r3
  80d620:	00800434 	movhi	r2,16
  80d624:	10bfffc4 	addi	r2,r2,-1
  80d628:	2101ffcc 	andi	r4,r4,2047
  80d62c:	0021883a 	mov	r16,zero
  80d630:	288a703a 	and	r5,r5,r2
  80d634:	2008953a 	slli	r4,r4,20
  80d638:	00c00434 	movhi	r3,16
  80d63c:	18ffffc4 	addi	r3,r3,-1
  80d640:	28c6703a 	and	r3,r5,r3
  80d644:	8005883a 	mov	r2,r16
  80d648:	1906b03a 	or	r3,r3,r4
  80d64c:	dfc00117 	ldw	ra,4(sp)
  80d650:	dc000017 	ldw	r16,0(sp)
  80d654:	dec00204 	addi	sp,sp,8
  80d658:	f800283a 	ret
  80d65c:	00c002c4 	movi	r3,11
  80d660:	188bc83a 	sub	r5,r3,r2
  80d664:	814ad83a 	srl	r5,r16,r5
  80d668:	00c00434 	movhi	r3,16
  80d66c:	18ffffc4 	addi	r3,r3,-1
  80d670:	81a0983a 	sll	r16,r16,r6
  80d674:	2101ffcc 	andi	r4,r4,2047
  80d678:	28ca703a 	and	r5,r5,r3
  80d67c:	003fed06 	br	80d634 <__alt_data_end+0xff80d634>
  80d680:	0009883a 	mov	r4,zero
  80d684:	000b883a 	mov	r5,zero
  80d688:	003fea06 	br	80d634 <__alt_data_end+0xff80d634>

0080d68c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d68c:	defffe04 	addi	sp,sp,-8
  80d690:	dfc00115 	stw	ra,4(sp)
  80d694:	df000015 	stw	fp,0(sp)
  80d698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d69c:	d0a00b17 	ldw	r2,-32724(gp)
  80d6a0:	10000326 	beq	r2,zero,80d6b0 <alt_get_errno+0x24>
  80d6a4:	d0a00b17 	ldw	r2,-32724(gp)
  80d6a8:	103ee83a 	callr	r2
  80d6ac:	00000106 	br	80d6b4 <alt_get_errno+0x28>
  80d6b0:	d0a71004 	addi	r2,gp,-25536
}
  80d6b4:	e037883a 	mov	sp,fp
  80d6b8:	dfc00117 	ldw	ra,4(sp)
  80d6bc:	df000017 	ldw	fp,0(sp)
  80d6c0:	dec00204 	addi	sp,sp,8
  80d6c4:	f800283a 	ret

0080d6c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80d6c8:	defffb04 	addi	sp,sp,-20
  80d6cc:	dfc00415 	stw	ra,16(sp)
  80d6d0:	df000315 	stw	fp,12(sp)
  80d6d4:	df000304 	addi	fp,sp,12
  80d6d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80d6dc:	e0bfff17 	ldw	r2,-4(fp)
  80d6e0:	10000816 	blt	r2,zero,80d704 <close+0x3c>
  80d6e4:	01400304 	movi	r5,12
  80d6e8:	e13fff17 	ldw	r4,-4(fp)
  80d6ec:	080ae240 	call	80ae24 <__mulsi3>
  80d6f0:	1007883a 	mov	r3,r2
  80d6f4:	00802074 	movhi	r2,129
  80d6f8:	10860d04 	addi	r2,r2,6196
  80d6fc:	1885883a 	add	r2,r3,r2
  80d700:	00000106 	br	80d708 <close+0x40>
  80d704:	0005883a 	mov	r2,zero
  80d708:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80d70c:	e0bffd17 	ldw	r2,-12(fp)
  80d710:	10001926 	beq	r2,zero,80d778 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80d714:	e0bffd17 	ldw	r2,-12(fp)
  80d718:	10800017 	ldw	r2,0(r2)
  80d71c:	10800417 	ldw	r2,16(r2)
  80d720:	10000626 	beq	r2,zero,80d73c <close+0x74>
  80d724:	e0bffd17 	ldw	r2,-12(fp)
  80d728:	10800017 	ldw	r2,0(r2)
  80d72c:	10800417 	ldw	r2,16(r2)
  80d730:	e13ffd17 	ldw	r4,-12(fp)
  80d734:	103ee83a 	callr	r2
  80d738:	00000106 	br	80d740 <close+0x78>
  80d73c:	0005883a 	mov	r2,zero
  80d740:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80d744:	e13fff17 	ldw	r4,-4(fp)
  80d748:	080ddb00 	call	80ddb0 <alt_release_fd>
    if (rval < 0)
  80d74c:	e0bffe17 	ldw	r2,-8(fp)
  80d750:	1000070e 	bge	r2,zero,80d770 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  80d754:	080d68c0 	call	80d68c <alt_get_errno>
  80d758:	1007883a 	mov	r3,r2
  80d75c:	e0bffe17 	ldw	r2,-8(fp)
  80d760:	0085c83a 	sub	r2,zero,r2
  80d764:	18800015 	stw	r2,0(r3)
      return -1;
  80d768:	00bfffc4 	movi	r2,-1
  80d76c:	00000706 	br	80d78c <close+0xc4>
    }
    return 0;
  80d770:	0005883a 	mov	r2,zero
  80d774:	00000506 	br	80d78c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d778:	080d68c0 	call	80d68c <alt_get_errno>
  80d77c:	1007883a 	mov	r3,r2
  80d780:	00801444 	movi	r2,81
  80d784:	18800015 	stw	r2,0(r3)
    return -1;
  80d788:	00bfffc4 	movi	r2,-1
  }
}
  80d78c:	e037883a 	mov	sp,fp
  80d790:	dfc00117 	ldw	ra,4(sp)
  80d794:	df000017 	ldw	fp,0(sp)
  80d798:	dec00204 	addi	sp,sp,8
  80d79c:	f800283a 	ret

0080d7a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80d7a0:	defffc04 	addi	sp,sp,-16
  80d7a4:	df000315 	stw	fp,12(sp)
  80d7a8:	df000304 	addi	fp,sp,12
  80d7ac:	e13ffd15 	stw	r4,-12(fp)
  80d7b0:	e17ffe15 	stw	r5,-8(fp)
  80d7b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80d7b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80d7bc:	e037883a 	mov	sp,fp
  80d7c0:	df000017 	ldw	fp,0(sp)
  80d7c4:	dec00104 	addi	sp,sp,4
  80d7c8:	f800283a 	ret

0080d7cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d7cc:	defffe04 	addi	sp,sp,-8
  80d7d0:	dfc00115 	stw	ra,4(sp)
  80d7d4:	df000015 	stw	fp,0(sp)
  80d7d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d7dc:	d0a00b17 	ldw	r2,-32724(gp)
  80d7e0:	10000326 	beq	r2,zero,80d7f0 <alt_get_errno+0x24>
  80d7e4:	d0a00b17 	ldw	r2,-32724(gp)
  80d7e8:	103ee83a 	callr	r2
  80d7ec:	00000106 	br	80d7f4 <alt_get_errno+0x28>
  80d7f0:	d0a71004 	addi	r2,gp,-25536
}
  80d7f4:	e037883a 	mov	sp,fp
  80d7f8:	dfc00117 	ldw	ra,4(sp)
  80d7fc:	df000017 	ldw	fp,0(sp)
  80d800:	dec00204 	addi	sp,sp,8
  80d804:	f800283a 	ret

0080d808 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80d808:	defffb04 	addi	sp,sp,-20
  80d80c:	dfc00415 	stw	ra,16(sp)
  80d810:	df000315 	stw	fp,12(sp)
  80d814:	df000304 	addi	fp,sp,12
  80d818:	e13ffe15 	stw	r4,-8(fp)
  80d81c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d820:	e0bffe17 	ldw	r2,-8(fp)
  80d824:	10000816 	blt	r2,zero,80d848 <fstat+0x40>
  80d828:	01400304 	movi	r5,12
  80d82c:	e13ffe17 	ldw	r4,-8(fp)
  80d830:	080ae240 	call	80ae24 <__mulsi3>
  80d834:	1007883a 	mov	r3,r2
  80d838:	00802074 	movhi	r2,129
  80d83c:	10860d04 	addi	r2,r2,6196
  80d840:	1885883a 	add	r2,r3,r2
  80d844:	00000106 	br	80d84c <fstat+0x44>
  80d848:	0005883a 	mov	r2,zero
  80d84c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80d850:	e0bffd17 	ldw	r2,-12(fp)
  80d854:	10001026 	beq	r2,zero,80d898 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80d858:	e0bffd17 	ldw	r2,-12(fp)
  80d85c:	10800017 	ldw	r2,0(r2)
  80d860:	10800817 	ldw	r2,32(r2)
  80d864:	10000726 	beq	r2,zero,80d884 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  80d868:	e0bffd17 	ldw	r2,-12(fp)
  80d86c:	10800017 	ldw	r2,0(r2)
  80d870:	10800817 	ldw	r2,32(r2)
  80d874:	e17fff17 	ldw	r5,-4(fp)
  80d878:	e13ffd17 	ldw	r4,-12(fp)
  80d87c:	103ee83a 	callr	r2
  80d880:	00000a06 	br	80d8ac <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80d884:	e0bfff17 	ldw	r2,-4(fp)
  80d888:	00c80004 	movi	r3,8192
  80d88c:	10c00115 	stw	r3,4(r2)
      return 0;
  80d890:	0005883a 	mov	r2,zero
  80d894:	00000506 	br	80d8ac <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d898:	080d7cc0 	call	80d7cc <alt_get_errno>
  80d89c:	1007883a 	mov	r3,r2
  80d8a0:	00801444 	movi	r2,81
  80d8a4:	18800015 	stw	r2,0(r3)
    return -1;
  80d8a8:	00bfffc4 	movi	r2,-1
  }
}
  80d8ac:	e037883a 	mov	sp,fp
  80d8b0:	dfc00117 	ldw	ra,4(sp)
  80d8b4:	df000017 	ldw	fp,0(sp)
  80d8b8:	dec00204 	addi	sp,sp,8
  80d8bc:	f800283a 	ret

0080d8c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d8c0:	defffe04 	addi	sp,sp,-8
  80d8c4:	dfc00115 	stw	ra,4(sp)
  80d8c8:	df000015 	stw	fp,0(sp)
  80d8cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d8d0:	d0a00b17 	ldw	r2,-32724(gp)
  80d8d4:	10000326 	beq	r2,zero,80d8e4 <alt_get_errno+0x24>
  80d8d8:	d0a00b17 	ldw	r2,-32724(gp)
  80d8dc:	103ee83a 	callr	r2
  80d8e0:	00000106 	br	80d8e8 <alt_get_errno+0x28>
  80d8e4:	d0a71004 	addi	r2,gp,-25536
}
  80d8e8:	e037883a 	mov	sp,fp
  80d8ec:	dfc00117 	ldw	ra,4(sp)
  80d8f0:	df000017 	ldw	fp,0(sp)
  80d8f4:	dec00204 	addi	sp,sp,8
  80d8f8:	f800283a 	ret

0080d8fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80d8fc:	deffed04 	addi	sp,sp,-76
  80d900:	dfc01215 	stw	ra,72(sp)
  80d904:	df001115 	stw	fp,68(sp)
  80d908:	df001104 	addi	fp,sp,68
  80d90c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d910:	e0bfff17 	ldw	r2,-4(fp)
  80d914:	10000816 	blt	r2,zero,80d938 <isatty+0x3c>
  80d918:	01400304 	movi	r5,12
  80d91c:	e13fff17 	ldw	r4,-4(fp)
  80d920:	080ae240 	call	80ae24 <__mulsi3>
  80d924:	1007883a 	mov	r3,r2
  80d928:	00802074 	movhi	r2,129
  80d92c:	10860d04 	addi	r2,r2,6196
  80d930:	1885883a 	add	r2,r3,r2
  80d934:	00000106 	br	80d93c <isatty+0x40>
  80d938:	0005883a 	mov	r2,zero
  80d93c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80d940:	e0bfef17 	ldw	r2,-68(fp)
  80d944:	10000e26 	beq	r2,zero,80d980 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80d948:	e0bfef17 	ldw	r2,-68(fp)
  80d94c:	10800017 	ldw	r2,0(r2)
  80d950:	10800817 	ldw	r2,32(r2)
  80d954:	1000021e 	bne	r2,zero,80d960 <isatty+0x64>
    {
      return 1;
  80d958:	00800044 	movi	r2,1
  80d95c:	00000d06 	br	80d994 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80d960:	e0bff004 	addi	r2,fp,-64
  80d964:	100b883a 	mov	r5,r2
  80d968:	e13fff17 	ldw	r4,-4(fp)
  80d96c:	080d8080 	call	80d808 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80d970:	e0bff117 	ldw	r2,-60(fp)
  80d974:	10880020 	cmpeqi	r2,r2,8192
  80d978:	10803fcc 	andi	r2,r2,255
  80d97c:	00000506 	br	80d994 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d980:	080d8c00 	call	80d8c0 <alt_get_errno>
  80d984:	1007883a 	mov	r3,r2
  80d988:	00801444 	movi	r2,81
  80d98c:	18800015 	stw	r2,0(r3)
    return 0;
  80d990:	0005883a 	mov	r2,zero
  }
}
  80d994:	e037883a 	mov	sp,fp
  80d998:	dfc00117 	ldw	ra,4(sp)
  80d99c:	df000017 	ldw	fp,0(sp)
  80d9a0:	dec00204 	addi	sp,sp,8
  80d9a4:	f800283a 	ret

0080d9a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80d9a8:	defffc04 	addi	sp,sp,-16
  80d9ac:	df000315 	stw	fp,12(sp)
  80d9b0:	df000304 	addi	fp,sp,12
  80d9b4:	e13ffd15 	stw	r4,-12(fp)
  80d9b8:	e17ffe15 	stw	r5,-8(fp)
  80d9bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80d9c0:	e0fffe17 	ldw	r3,-8(fp)
  80d9c4:	e0bffd17 	ldw	r2,-12(fp)
  80d9c8:	18800c26 	beq	r3,r2,80d9fc <alt_load_section+0x54>
  {
    while( to != end )
  80d9cc:	00000806 	br	80d9f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80d9d0:	e0bffe17 	ldw	r2,-8(fp)
  80d9d4:	10c00104 	addi	r3,r2,4
  80d9d8:	e0fffe15 	stw	r3,-8(fp)
  80d9dc:	e0fffd17 	ldw	r3,-12(fp)
  80d9e0:	19000104 	addi	r4,r3,4
  80d9e4:	e13ffd15 	stw	r4,-12(fp)
  80d9e8:	18c00017 	ldw	r3,0(r3)
  80d9ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80d9f0:	e0fffe17 	ldw	r3,-8(fp)
  80d9f4:	e0bfff17 	ldw	r2,-4(fp)
  80d9f8:	18bff51e 	bne	r3,r2,80d9d0 <__alt_data_end+0xff80d9d0>
    {
      *to++ = *from++;
    }
  }
}
  80d9fc:	0001883a 	nop
  80da00:	e037883a 	mov	sp,fp
  80da04:	df000017 	ldw	fp,0(sp)
  80da08:	dec00104 	addi	sp,sp,4
  80da0c:	f800283a 	ret

0080da10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80da10:	defffe04 	addi	sp,sp,-8
  80da14:	dfc00115 	stw	ra,4(sp)
  80da18:	df000015 	stw	fp,0(sp)
  80da1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80da20:	01802074 	movhi	r6,129
  80da24:	318ad004 	addi	r6,r6,11072
  80da28:	01402074 	movhi	r5,129
  80da2c:	2943da04 	addi	r5,r5,3944
  80da30:	01002074 	movhi	r4,129
  80da34:	210ad004 	addi	r4,r4,11072
  80da38:	080d9a80 	call	80d9a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80da3c:	01802034 	movhi	r6,128
  80da40:	31809104 	addi	r6,r6,580
  80da44:	01402034 	movhi	r5,128
  80da48:	29400804 	addi	r5,r5,32
  80da4c:	01002034 	movhi	r4,128
  80da50:	21000804 	addi	r4,r4,32
  80da54:	080d9a80 	call	80d9a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80da58:	01802074 	movhi	r6,129
  80da5c:	3183da04 	addi	r6,r6,3944
  80da60:	01402074 	movhi	r5,129
  80da64:	29430104 	addi	r5,r5,3076
  80da68:	01002074 	movhi	r4,129
  80da6c:	21030104 	addi	r4,r4,3076
  80da70:	080d9a80 	call	80d9a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80da74:	080f9600 	call	80f960 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80da78:	080fcf80 	call	80fcf8 <alt_icache_flush_all>
}
  80da7c:	0001883a 	nop
  80da80:	e037883a 	mov	sp,fp
  80da84:	dfc00117 	ldw	ra,4(sp)
  80da88:	df000017 	ldw	fp,0(sp)
  80da8c:	dec00204 	addi	sp,sp,8
  80da90:	f800283a 	ret

0080da94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80da94:	defffe04 	addi	sp,sp,-8
  80da98:	dfc00115 	stw	ra,4(sp)
  80da9c:	df000015 	stw	fp,0(sp)
  80daa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80daa4:	d0a00b17 	ldw	r2,-32724(gp)
  80daa8:	10000326 	beq	r2,zero,80dab8 <alt_get_errno+0x24>
  80daac:	d0a00b17 	ldw	r2,-32724(gp)
  80dab0:	103ee83a 	callr	r2
  80dab4:	00000106 	br	80dabc <alt_get_errno+0x28>
  80dab8:	d0a71004 	addi	r2,gp,-25536
}
  80dabc:	e037883a 	mov	sp,fp
  80dac0:	dfc00117 	ldw	ra,4(sp)
  80dac4:	df000017 	ldw	fp,0(sp)
  80dac8:	dec00204 	addi	sp,sp,8
  80dacc:	f800283a 	ret

0080dad0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80dad0:	defff904 	addi	sp,sp,-28
  80dad4:	dfc00615 	stw	ra,24(sp)
  80dad8:	df000515 	stw	fp,20(sp)
  80dadc:	df000504 	addi	fp,sp,20
  80dae0:	e13ffd15 	stw	r4,-12(fp)
  80dae4:	e17ffe15 	stw	r5,-8(fp)
  80dae8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80daec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80daf0:	e0bffd17 	ldw	r2,-12(fp)
  80daf4:	10000816 	blt	r2,zero,80db18 <lseek+0x48>
  80daf8:	01400304 	movi	r5,12
  80dafc:	e13ffd17 	ldw	r4,-12(fp)
  80db00:	080ae240 	call	80ae24 <__mulsi3>
  80db04:	1007883a 	mov	r3,r2
  80db08:	00802074 	movhi	r2,129
  80db0c:	10860d04 	addi	r2,r2,6196
  80db10:	1885883a 	add	r2,r3,r2
  80db14:	00000106 	br	80db1c <lseek+0x4c>
  80db18:	0005883a 	mov	r2,zero
  80db1c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80db20:	e0bffc17 	ldw	r2,-16(fp)
  80db24:	10001026 	beq	r2,zero,80db68 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80db28:	e0bffc17 	ldw	r2,-16(fp)
  80db2c:	10800017 	ldw	r2,0(r2)
  80db30:	10800717 	ldw	r2,28(r2)
  80db34:	10000926 	beq	r2,zero,80db5c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80db38:	e0bffc17 	ldw	r2,-16(fp)
  80db3c:	10800017 	ldw	r2,0(r2)
  80db40:	10800717 	ldw	r2,28(r2)
  80db44:	e1bfff17 	ldw	r6,-4(fp)
  80db48:	e17ffe17 	ldw	r5,-8(fp)
  80db4c:	e13ffc17 	ldw	r4,-16(fp)
  80db50:	103ee83a 	callr	r2
  80db54:	e0bffb15 	stw	r2,-20(fp)
  80db58:	00000506 	br	80db70 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80db5c:	00bfde84 	movi	r2,-134
  80db60:	e0bffb15 	stw	r2,-20(fp)
  80db64:	00000206 	br	80db70 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80db68:	00bfebc4 	movi	r2,-81
  80db6c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80db70:	e0bffb17 	ldw	r2,-20(fp)
  80db74:	1000070e 	bge	r2,zero,80db94 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  80db78:	080da940 	call	80da94 <alt_get_errno>
  80db7c:	1007883a 	mov	r3,r2
  80db80:	e0bffb17 	ldw	r2,-20(fp)
  80db84:	0085c83a 	sub	r2,zero,r2
  80db88:	18800015 	stw	r2,0(r3)
    rc = -1;
  80db8c:	00bfffc4 	movi	r2,-1
  80db90:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80db94:	e0bffb17 	ldw	r2,-20(fp)
}
  80db98:	e037883a 	mov	sp,fp
  80db9c:	dfc00117 	ldw	ra,4(sp)
  80dba0:	df000017 	ldw	fp,0(sp)
  80dba4:	dec00204 	addi	sp,sp,8
  80dba8:	f800283a 	ret

0080dbac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80dbac:	defffd04 	addi	sp,sp,-12
  80dbb0:	dfc00215 	stw	ra,8(sp)
  80dbb4:	df000115 	stw	fp,4(sp)
  80dbb8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80dbbc:	0009883a 	mov	r4,zero
  80dbc0:	080e0540 	call	80e054 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80dbc4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80dbc8:	080e08c0 	call	80e08c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80dbcc:	01802074 	movhi	r6,129
  80dbd0:	3183cf04 	addi	r6,r6,3900
  80dbd4:	01402074 	movhi	r5,129
  80dbd8:	2943cf04 	addi	r5,r5,3900
  80dbdc:	01002074 	movhi	r4,129
  80dbe0:	2103cf04 	addi	r4,r4,3900
  80dbe4:	08100b00 	call	8100b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80dbe8:	080fba80 	call	80fba8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80dbec:	01002074 	movhi	r4,129
  80dbf0:	213f0204 	addi	r4,r4,-1016
  80dbf4:	08108700 	call	810870 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80dbf8:	d0a71117 	ldw	r2,-25532(gp)
  80dbfc:	d0e71217 	ldw	r3,-25528(gp)
  80dc00:	d1271317 	ldw	r4,-25524(gp)
  80dc04:	200d883a 	mov	r6,r4
  80dc08:	180b883a 	mov	r5,r3
  80dc0c:	1009883a 	mov	r4,r2
  80dc10:	08002900 	call	800290 <main>
  80dc14:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80dc18:	01000044 	movi	r4,1
  80dc1c:	080d6c80 	call	80d6c8 <close>
  exit (result);
  80dc20:	e13fff17 	ldw	r4,-4(fp)
  80dc24:	08108840 	call	810884 <exit>

0080dc28 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80dc28:	defffe04 	addi	sp,sp,-8
  80dc2c:	df000115 	stw	fp,4(sp)
  80dc30:	df000104 	addi	fp,sp,4
  80dc34:	e13fff15 	stw	r4,-4(fp)
}
  80dc38:	0001883a 	nop
  80dc3c:	e037883a 	mov	sp,fp
  80dc40:	df000017 	ldw	fp,0(sp)
  80dc44:	dec00104 	addi	sp,sp,4
  80dc48:	f800283a 	ret

0080dc4c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80dc4c:	defffe04 	addi	sp,sp,-8
  80dc50:	df000115 	stw	fp,4(sp)
  80dc54:	df000104 	addi	fp,sp,4
  80dc58:	e13fff15 	stw	r4,-4(fp)
}
  80dc5c:	0001883a 	nop
  80dc60:	e037883a 	mov	sp,fp
  80dc64:	df000017 	ldw	fp,0(sp)
  80dc68:	dec00104 	addi	sp,sp,4
  80dc6c:	f800283a 	ret

0080dc70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dc70:	defffe04 	addi	sp,sp,-8
  80dc74:	dfc00115 	stw	ra,4(sp)
  80dc78:	df000015 	stw	fp,0(sp)
  80dc7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dc80:	d0a00b17 	ldw	r2,-32724(gp)
  80dc84:	10000326 	beq	r2,zero,80dc94 <alt_get_errno+0x24>
  80dc88:	d0a00b17 	ldw	r2,-32724(gp)
  80dc8c:	103ee83a 	callr	r2
  80dc90:	00000106 	br	80dc98 <alt_get_errno+0x28>
  80dc94:	d0a71004 	addi	r2,gp,-25536
}
  80dc98:	e037883a 	mov	sp,fp
  80dc9c:	dfc00117 	ldw	ra,4(sp)
  80dca0:	df000017 	ldw	fp,0(sp)
  80dca4:	dec00204 	addi	sp,sp,8
  80dca8:	f800283a 	ret

0080dcac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80dcac:	defff904 	addi	sp,sp,-28
  80dcb0:	dfc00615 	stw	ra,24(sp)
  80dcb4:	df000515 	stw	fp,20(sp)
  80dcb8:	df000504 	addi	fp,sp,20
  80dcbc:	e13ffd15 	stw	r4,-12(fp)
  80dcc0:	e17ffe15 	stw	r5,-8(fp)
  80dcc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dcc8:	e0bffd17 	ldw	r2,-12(fp)
  80dccc:	10000816 	blt	r2,zero,80dcf0 <read+0x44>
  80dcd0:	01400304 	movi	r5,12
  80dcd4:	e13ffd17 	ldw	r4,-12(fp)
  80dcd8:	080ae240 	call	80ae24 <__mulsi3>
  80dcdc:	1007883a 	mov	r3,r2
  80dce0:	00802074 	movhi	r2,129
  80dce4:	10860d04 	addi	r2,r2,6196
  80dce8:	1885883a 	add	r2,r3,r2
  80dcec:	00000106 	br	80dcf4 <read+0x48>
  80dcf0:	0005883a 	mov	r2,zero
  80dcf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80dcf8:	e0bffb17 	ldw	r2,-20(fp)
  80dcfc:	10002226 	beq	r2,zero,80dd88 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80dd00:	e0bffb17 	ldw	r2,-20(fp)
  80dd04:	10800217 	ldw	r2,8(r2)
  80dd08:	108000cc 	andi	r2,r2,3
  80dd0c:	10800060 	cmpeqi	r2,r2,1
  80dd10:	1000181e 	bne	r2,zero,80dd74 <read+0xc8>
        (fd->dev->read))
  80dd14:	e0bffb17 	ldw	r2,-20(fp)
  80dd18:	10800017 	ldw	r2,0(r2)
  80dd1c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80dd20:	10001426 	beq	r2,zero,80dd74 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80dd24:	e0bffb17 	ldw	r2,-20(fp)
  80dd28:	10800017 	ldw	r2,0(r2)
  80dd2c:	10800517 	ldw	r2,20(r2)
  80dd30:	e0ffff17 	ldw	r3,-4(fp)
  80dd34:	180d883a 	mov	r6,r3
  80dd38:	e17ffe17 	ldw	r5,-8(fp)
  80dd3c:	e13ffb17 	ldw	r4,-20(fp)
  80dd40:	103ee83a 	callr	r2
  80dd44:	e0bffc15 	stw	r2,-16(fp)
  80dd48:	e0bffc17 	ldw	r2,-16(fp)
  80dd4c:	1000070e 	bge	r2,zero,80dd6c <read+0xc0>
        {
          ALT_ERRNO = -rval;
  80dd50:	080dc700 	call	80dc70 <alt_get_errno>
  80dd54:	1007883a 	mov	r3,r2
  80dd58:	e0bffc17 	ldw	r2,-16(fp)
  80dd5c:	0085c83a 	sub	r2,zero,r2
  80dd60:	18800015 	stw	r2,0(r3)
          return -1;
  80dd64:	00bfffc4 	movi	r2,-1
  80dd68:	00000c06 	br	80dd9c <read+0xf0>
        }
        return rval;
  80dd6c:	e0bffc17 	ldw	r2,-16(fp)
  80dd70:	00000a06 	br	80dd9c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80dd74:	080dc700 	call	80dc70 <alt_get_errno>
  80dd78:	1007883a 	mov	r3,r2
  80dd7c:	00800344 	movi	r2,13
  80dd80:	18800015 	stw	r2,0(r3)
  80dd84:	00000406 	br	80dd98 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80dd88:	080dc700 	call	80dc70 <alt_get_errno>
  80dd8c:	1007883a 	mov	r3,r2
  80dd90:	00801444 	movi	r2,81
  80dd94:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80dd98:	00bfffc4 	movi	r2,-1
}
  80dd9c:	e037883a 	mov	sp,fp
  80dda0:	dfc00117 	ldw	ra,4(sp)
  80dda4:	df000017 	ldw	fp,0(sp)
  80dda8:	dec00204 	addi	sp,sp,8
  80ddac:	f800283a 	ret

0080ddb0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80ddb0:	defffc04 	addi	sp,sp,-16
  80ddb4:	dfc00315 	stw	ra,12(sp)
  80ddb8:	df000215 	stw	fp,8(sp)
  80ddbc:	dc000115 	stw	r16,4(sp)
  80ddc0:	df000204 	addi	fp,sp,8
  80ddc4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80ddc8:	e0bffe17 	ldw	r2,-8(fp)
  80ddcc:	108000d0 	cmplti	r2,r2,3
  80ddd0:	1000111e 	bne	r2,zero,80de18 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  80ddd4:	04002074 	movhi	r16,129
  80ddd8:	84060d04 	addi	r16,r16,6196
  80dddc:	e0bffe17 	ldw	r2,-8(fp)
  80dde0:	01400304 	movi	r5,12
  80dde4:	1009883a 	mov	r4,r2
  80dde8:	080ae240 	call	80ae24 <__mulsi3>
  80ddec:	8085883a 	add	r2,r16,r2
  80ddf0:	10800204 	addi	r2,r2,8
  80ddf4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80ddf8:	04002074 	movhi	r16,129
  80ddfc:	84060d04 	addi	r16,r16,6196
  80de00:	e0bffe17 	ldw	r2,-8(fp)
  80de04:	01400304 	movi	r5,12
  80de08:	1009883a 	mov	r4,r2
  80de0c:	080ae240 	call	80ae24 <__mulsi3>
  80de10:	8085883a 	add	r2,r16,r2
  80de14:	10000015 	stw	zero,0(r2)
  }
}
  80de18:	0001883a 	nop
  80de1c:	e6ffff04 	addi	sp,fp,-4
  80de20:	dfc00217 	ldw	ra,8(sp)
  80de24:	df000117 	ldw	fp,4(sp)
  80de28:	dc000017 	ldw	r16,0(sp)
  80de2c:	dec00304 	addi	sp,sp,12
  80de30:	f800283a 	ret

0080de34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80de34:	defff904 	addi	sp,sp,-28
  80de38:	df000615 	stw	fp,24(sp)
  80de3c:	df000604 	addi	fp,sp,24
  80de40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80de44:	0005303a 	rdctl	r2,status
  80de48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80de4c:	e0fffe17 	ldw	r3,-8(fp)
  80de50:	00bfff84 	movi	r2,-2
  80de54:	1884703a 	and	r2,r3,r2
  80de58:	1001703a 	wrctl	status,r2
  
  return context;
  80de5c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80de60:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80de64:	d0a00c17 	ldw	r2,-32720(gp)
  80de68:	10c000c4 	addi	r3,r2,3
  80de6c:	00bfff04 	movi	r2,-4
  80de70:	1884703a 	and	r2,r3,r2
  80de74:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80de78:	d0e00c17 	ldw	r3,-32720(gp)
  80de7c:	e0bfff17 	ldw	r2,-4(fp)
  80de80:	1887883a 	add	r3,r3,r2
  80de84:	00804034 	movhi	r2,256
  80de88:	10800004 	addi	r2,r2,0
  80de8c:	10c0062e 	bgeu	r2,r3,80dea8 <sbrk+0x74>
  80de90:	e0bffb17 	ldw	r2,-20(fp)
  80de94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80de98:	e0bffa17 	ldw	r2,-24(fp)
  80de9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80dea0:	00bfffc4 	movi	r2,-1
  80dea4:	00000b06 	br	80ded4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80dea8:	d0a00c17 	ldw	r2,-32720(gp)
  80deac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80deb0:	d0e00c17 	ldw	r3,-32720(gp)
  80deb4:	e0bfff17 	ldw	r2,-4(fp)
  80deb8:	1885883a 	add	r2,r3,r2
  80debc:	d0a00c15 	stw	r2,-32720(gp)
  80dec0:	e0bffb17 	ldw	r2,-20(fp)
  80dec4:	e0bffc15 	stw	r2,-16(fp)
  80dec8:	e0bffc17 	ldw	r2,-16(fp)
  80decc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80ded0:	e0bffd17 	ldw	r2,-12(fp)
} 
  80ded4:	e037883a 	mov	sp,fp
  80ded8:	df000017 	ldw	fp,0(sp)
  80dedc:	dec00104 	addi	sp,sp,4
  80dee0:	f800283a 	ret

0080dee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dee4:	defffe04 	addi	sp,sp,-8
  80dee8:	dfc00115 	stw	ra,4(sp)
  80deec:	df000015 	stw	fp,0(sp)
  80def0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80def4:	d0a00b17 	ldw	r2,-32724(gp)
  80def8:	10000326 	beq	r2,zero,80df08 <alt_get_errno+0x24>
  80defc:	d0a00b17 	ldw	r2,-32724(gp)
  80df00:	103ee83a 	callr	r2
  80df04:	00000106 	br	80df0c <alt_get_errno+0x28>
  80df08:	d0a71004 	addi	r2,gp,-25536
}
  80df0c:	e037883a 	mov	sp,fp
  80df10:	dfc00117 	ldw	ra,4(sp)
  80df14:	df000017 	ldw	fp,0(sp)
  80df18:	dec00204 	addi	sp,sp,8
  80df1c:	f800283a 	ret

0080df20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80df20:	defff904 	addi	sp,sp,-28
  80df24:	dfc00615 	stw	ra,24(sp)
  80df28:	df000515 	stw	fp,20(sp)
  80df2c:	df000504 	addi	fp,sp,20
  80df30:	e13ffd15 	stw	r4,-12(fp)
  80df34:	e17ffe15 	stw	r5,-8(fp)
  80df38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80df3c:	e0bffd17 	ldw	r2,-12(fp)
  80df40:	10000816 	blt	r2,zero,80df64 <write+0x44>
  80df44:	01400304 	movi	r5,12
  80df48:	e13ffd17 	ldw	r4,-12(fp)
  80df4c:	080ae240 	call	80ae24 <__mulsi3>
  80df50:	1007883a 	mov	r3,r2
  80df54:	00802074 	movhi	r2,129
  80df58:	10860d04 	addi	r2,r2,6196
  80df5c:	1885883a 	add	r2,r3,r2
  80df60:	00000106 	br	80df68 <write+0x48>
  80df64:	0005883a 	mov	r2,zero
  80df68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80df6c:	e0bffb17 	ldw	r2,-20(fp)
  80df70:	10002126 	beq	r2,zero,80dff8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80df74:	e0bffb17 	ldw	r2,-20(fp)
  80df78:	10800217 	ldw	r2,8(r2)
  80df7c:	108000cc 	andi	r2,r2,3
  80df80:	10001826 	beq	r2,zero,80dfe4 <write+0xc4>
  80df84:	e0bffb17 	ldw	r2,-20(fp)
  80df88:	10800017 	ldw	r2,0(r2)
  80df8c:	10800617 	ldw	r2,24(r2)
  80df90:	10001426 	beq	r2,zero,80dfe4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80df94:	e0bffb17 	ldw	r2,-20(fp)
  80df98:	10800017 	ldw	r2,0(r2)
  80df9c:	10800617 	ldw	r2,24(r2)
  80dfa0:	e0ffff17 	ldw	r3,-4(fp)
  80dfa4:	180d883a 	mov	r6,r3
  80dfa8:	e17ffe17 	ldw	r5,-8(fp)
  80dfac:	e13ffb17 	ldw	r4,-20(fp)
  80dfb0:	103ee83a 	callr	r2
  80dfb4:	e0bffc15 	stw	r2,-16(fp)
  80dfb8:	e0bffc17 	ldw	r2,-16(fp)
  80dfbc:	1000070e 	bge	r2,zero,80dfdc <write+0xbc>
      {
        ALT_ERRNO = -rval;
  80dfc0:	080dee40 	call	80dee4 <alt_get_errno>
  80dfc4:	1007883a 	mov	r3,r2
  80dfc8:	e0bffc17 	ldw	r2,-16(fp)
  80dfcc:	0085c83a 	sub	r2,zero,r2
  80dfd0:	18800015 	stw	r2,0(r3)
        return -1;
  80dfd4:	00bfffc4 	movi	r2,-1
  80dfd8:	00000c06 	br	80e00c <write+0xec>
      }
      return rval;
  80dfdc:	e0bffc17 	ldw	r2,-16(fp)
  80dfe0:	00000a06 	br	80e00c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80dfe4:	080dee40 	call	80dee4 <alt_get_errno>
  80dfe8:	1007883a 	mov	r3,r2
  80dfec:	00800344 	movi	r2,13
  80dff0:	18800015 	stw	r2,0(r3)
  80dff4:	00000406 	br	80e008 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80dff8:	080dee40 	call	80dee4 <alt_get_errno>
  80dffc:	1007883a 	mov	r3,r2
  80e000:	00801444 	movi	r2,81
  80e004:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e008:	00bfffc4 	movi	r2,-1
}
  80e00c:	e037883a 	mov	sp,fp
  80e010:	dfc00117 	ldw	ra,4(sp)
  80e014:	df000017 	ldw	fp,0(sp)
  80e018:	dec00204 	addi	sp,sp,8
  80e01c:	f800283a 	ret

0080e020 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80e020:	defffd04 	addi	sp,sp,-12
  80e024:	dfc00215 	stw	ra,8(sp)
  80e028:	df000115 	stw	fp,4(sp)
  80e02c:	df000104 	addi	fp,sp,4
  80e030:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80e034:	d1600804 	addi	r5,gp,-32736
  80e038:	e13fff17 	ldw	r4,-4(fp)
  80e03c:	080f9e40 	call	80f9e4 <alt_dev_llist_insert>
}
  80e040:	e037883a 	mov	sp,fp
  80e044:	dfc00117 	ldw	ra,4(sp)
  80e048:	df000017 	ldw	fp,0(sp)
  80e04c:	dec00204 	addi	sp,sp,8
  80e050:	f800283a 	ret

0080e054 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80e054:	defffd04 	addi	sp,sp,-12
  80e058:	dfc00215 	stw	ra,8(sp)
  80e05c:	df000115 	stw	fp,4(sp)
  80e060:	df000104 	addi	fp,sp,4
  80e064:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80e068:	08105540 	call	810554 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80e06c:	00800044 	movi	r2,1
  80e070:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80e074:	0001883a 	nop
  80e078:	e037883a 	mov	sp,fp
  80e07c:	dfc00117 	ldw	ra,4(sp)
  80e080:	df000017 	ldw	fp,0(sp)
  80e084:	dec00204 	addi	sp,sp,8
  80e088:	f800283a 	ret

0080e08c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80e08c:	defffd04 	addi	sp,sp,-12
  80e090:	dfc00215 	stw	ra,8(sp)
  80e094:	df000115 	stw	fp,4(sp)
  80e098:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80e09c:	01c0fa04 	movi	r7,1000
  80e0a0:	01800044 	movi	r6,1
  80e0a4:	000b883a 	mov	r5,zero
  80e0a8:	01004034 	movhi	r4,256
  80e0ac:	21040804 	addi	r4,r4,4128
  80e0b0:	080f7b80 	call	80f7b8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_DMA_INIT ( DMA, dma);
  80e0b4:	d8000015 	stw	zero,0(sp)
  80e0b8:	000f883a 	mov	r7,zero
  80e0bc:	01804034 	movhi	r6,256
  80e0c0:	31841004 	addi	r6,r6,4160
  80e0c4:	01402074 	movhi	r5,129
  80e0c8:	29469d04 	addi	r5,r5,6772
  80e0cc:	01002074 	movhi	r4,129
  80e0d0:	21069604 	addi	r4,r4,6744
  80e0d4:	080ec240 	call	80ec24 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80e0d8:	01800404 	movi	r6,16
  80e0dc:	000b883a 	mov	r5,zero
  80e0e0:	01002074 	movhi	r4,129
  80e0e4:	2106ae04 	addi	r4,r4,6840
  80e0e8:	080ee3c0 	call	80ee3c <altera_avalon_jtag_uart_init>
  80e0ec:	01002074 	movhi	r4,129
  80e0f0:	2106a404 	addi	r4,r4,6800
  80e0f4:	080e0200 	call	80e020 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  80e0f8:	0001883a 	nop
}
  80e0fc:	0001883a 	nop
  80e100:	e037883a 	mov	sp,fp
  80e104:	dfc00117 	ldw	ra,4(sp)
  80e108:	df000017 	ldw	fp,0(sp)
  80e10c:	dec00204 	addi	sp,sp,8
  80e110:	f800283a 	ret

0080e114 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
  80e114:	defffd04 	addi	sp,sp,-12
  80e118:	dfc00215 	stw	ra,8(sp)
  80e11c:	df000115 	stw	fp,4(sp)
  80e120:	df000104 	addi	fp,sp,4
  80e124:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
  80e128:	d1600f04 	addi	r5,gp,-32708
  80e12c:	e13fff17 	ldw	r4,-4(fp)
  80e130:	080f9e40 	call	80f9e4 <alt_dev_llist_insert>
}
  80e134:	e037883a 	mov	sp,fp
  80e138:	dfc00117 	ldw	ra,4(sp)
  80e13c:	df000017 	ldw	fp,0(sp)
  80e140:	dec00204 	addi	sp,sp,8
  80e144:	f800283a 	ret

0080e148 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
  80e148:	defffd04 	addi	sp,sp,-12
  80e14c:	dfc00215 	stw	ra,8(sp)
  80e150:	df000115 	stw	fp,4(sp)
  80e154:	df000104 	addi	fp,sp,4
  80e158:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
  80e15c:	d1600d04 	addi	r5,gp,-32716
  80e160:	e13fff17 	ldw	r4,-4(fp)
  80e164:	080f9e40 	call	80f9e4 <alt_dev_llist_insert>
}
  80e168:	e037883a 	mov	sp,fp
  80e16c:	dfc00117 	ldw	ra,4(sp)
  80e170:	df000017 	ldw	fp,0(sp)
  80e174:	dec00204 	addi	sp,sp,8
  80e178:	f800283a 	ret

0080e17c <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  80e17c:	defffc04 	addi	sp,sp,-16
  80e180:	df000315 	stw	fp,12(sp)
  80e184:	df000304 	addi	fp,sp,12
  80e188:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  80e18c:	e0bfff17 	ldw	r2,-4(fp)
  80e190:	10c00117 	ldw	r3,4(r2)
  80e194:	e0bfff17 	ldw	r2,-4(fp)
  80e198:	10800217 	ldw	r2,8(r2)
  80e19c:	18802e26 	beq	r3,r2,80e258 <alt_avalon_dma_launch_bidir+0xdc>
  80e1a0:	e0bfff17 	ldw	r2,-4(fp)
  80e1a4:	10c00317 	ldw	r3,12(r2)
  80e1a8:	e0bfff17 	ldw	r2,-4(fp)
  80e1ac:	10800417 	ldw	r2,16(r2)
  80e1b0:	18802926 	beq	r3,r2,80e258 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
  80e1b4:	e0bfff17 	ldw	r2,-4(fp)
  80e1b8:	00c00044 	movi	r3,1
  80e1bc:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
  80e1c0:	e0bfff17 	ldw	r2,-4(fp)
  80e1c4:	10800117 	ldw	r2,4(r2)
  80e1c8:	1004913a 	slli	r2,r2,4
  80e1cc:	10800904 	addi	r2,r2,36
  80e1d0:	e0ffff17 	ldw	r3,-4(fp)
  80e1d4:	1885883a 	add	r2,r3,r2
  80e1d8:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
  80e1dc:	e0bfff17 	ldw	r2,-4(fp)
  80e1e0:	10800317 	ldw	r2,12(r2)
  80e1e4:	1004913a 	slli	r2,r2,4
  80e1e8:	10801904 	addi	r2,r2,100
  80e1ec:	e0ffff17 	ldw	r3,-4(fp)
  80e1f0:	1885883a 	add	r2,r3,r2
  80e1f4:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  80e1f8:	e0bfff17 	ldw	r2,-4(fp)
  80e1fc:	10800017 	ldw	r2,0(r2)
  80e200:	10800104 	addi	r2,r2,4
  80e204:	e0fffd17 	ldw	r3,-12(fp)
  80e208:	18c00017 	ldw	r3,0(r3)
  80e20c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  80e210:	e0bfff17 	ldw	r2,-4(fp)
  80e214:	10800017 	ldw	r2,0(r2)
  80e218:	10800204 	addi	r2,r2,8
  80e21c:	e0fffe17 	ldw	r3,-8(fp)
  80e220:	18c00017 	ldw	r3,0(r3)
  80e224:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
  80e228:	e0bfff17 	ldw	r2,-4(fp)
  80e22c:	10800017 	ldw	r2,0(r2)
  80e230:	11000304 	addi	r4,r2,12
  80e234:	e0bffd17 	ldw	r2,-12(fp)
  80e238:	11400117 	ldw	r5,4(r2)
  80e23c:	e0bffe17 	ldw	r2,-8(fp)
  80e240:	10c00117 	ldw	r3,4(r2)
  80e244:	2805883a 	mov	r2,r5
  80e248:	1880012e 	bgeu	r3,r2,80e250 <alt_avalon_dma_launch_bidir+0xd4>
  80e24c:	1805883a 	mov	r2,r3
  80e250:	20800035 	stwio	r2,0(r4)
  80e254:	00000206 	br	80e260 <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
  80e258:	e0bfff17 	ldw	r2,-4(fp)
  80e25c:	10000815 	stw	zero,32(r2)
  }
}
  80e260:	0001883a 	nop
  80e264:	e037883a 	mov	sp,fp
  80e268:	df000017 	ldw	fp,0(sp)
  80e26c:	dec00104 	addi	sp,sp,4
  80e270:	f800283a 	ret

0080e274 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
  80e274:	defffd04 	addi	sp,sp,-12
  80e278:	df000215 	stw	fp,8(sp)
  80e27c:	df000204 	addi	fp,sp,8
  80e280:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
  80e284:	e0bfff17 	ldw	r2,-4(fp)
  80e288:	10c00117 	ldw	r3,4(r2)
  80e28c:	e0bfff17 	ldw	r2,-4(fp)
  80e290:	10800217 	ldw	r2,8(r2)
  80e294:	18801726 	beq	r3,r2,80e2f4 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
  80e298:	e0bfff17 	ldw	r2,-4(fp)
  80e29c:	00c00044 	movi	r3,1
  80e2a0:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
  80e2a4:	e0bfff17 	ldw	r2,-4(fp)
  80e2a8:	10800117 	ldw	r2,4(r2)
  80e2ac:	1004913a 	slli	r2,r2,4
  80e2b0:	10800904 	addi	r2,r2,36
  80e2b4:	e0ffff17 	ldw	r3,-4(fp)
  80e2b8:	1885883a 	add	r2,r3,r2
  80e2bc:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  80e2c0:	e0bfff17 	ldw	r2,-4(fp)
  80e2c4:	10800017 	ldw	r2,0(r2)
  80e2c8:	10800104 	addi	r2,r2,4
  80e2cc:	e0fffe17 	ldw	r3,-8(fp)
  80e2d0:	18c00017 	ldw	r3,0(r3)
  80e2d4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  80e2d8:	e0bfff17 	ldw	r2,-4(fp)
  80e2dc:	10800017 	ldw	r2,0(r2)
  80e2e0:	10800304 	addi	r2,r2,12
  80e2e4:	e0fffe17 	ldw	r3,-8(fp)
  80e2e8:	18c00117 	ldw	r3,4(r3)
  80e2ec:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
  80e2f0:	00000206 	br	80e2fc <alt_avalon_dma_launch_txonly+0x88>
    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  }
  else
  {
    priv->active = 0;
  80e2f4:	e0bfff17 	ldw	r2,-4(fp)
  80e2f8:	10000815 	stw	zero,32(r2)
  }
}
  80e2fc:	0001883a 	nop
  80e300:	e037883a 	mov	sp,fp
  80e304:	df000017 	ldw	fp,0(sp)
  80e308:	dec00104 	addi	sp,sp,4
  80e30c:	f800283a 	ret

0080e310 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
  80e310:	defffd04 	addi	sp,sp,-12
  80e314:	df000215 	stw	fp,8(sp)
  80e318:	df000204 	addi	fp,sp,8
  80e31c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
  80e320:	e0bfff17 	ldw	r2,-4(fp)
  80e324:	10c00317 	ldw	r3,12(r2)
  80e328:	e0bfff17 	ldw	r2,-4(fp)
  80e32c:	10800417 	ldw	r2,16(r2)
  80e330:	18801726 	beq	r3,r2,80e390 <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
  80e334:	e0bfff17 	ldw	r2,-4(fp)
  80e338:	00c00044 	movi	r3,1
  80e33c:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
  80e340:	e0bfff17 	ldw	r2,-4(fp)
  80e344:	10800317 	ldw	r2,12(r2)
  80e348:	1004913a 	slli	r2,r2,4
  80e34c:	10801904 	addi	r2,r2,100
  80e350:	e0ffff17 	ldw	r3,-4(fp)
  80e354:	1885883a 	add	r2,r3,r2
  80e358:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  80e35c:	e0bfff17 	ldw	r2,-4(fp)
  80e360:	10800017 	ldw	r2,0(r2)
  80e364:	10800204 	addi	r2,r2,8
  80e368:	e0fffe17 	ldw	r3,-8(fp)
  80e36c:	18c00017 	ldw	r3,0(r3)
  80e370:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  80e374:	e0bfff17 	ldw	r2,-4(fp)
  80e378:	10800017 	ldw	r2,0(r2)
  80e37c:	10800304 	addi	r2,r2,12
  80e380:	e0fffe17 	ldw	r3,-8(fp)
  80e384:	18c00117 	ldw	r3,4(r3)
  80e388:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
  80e38c:	00000206 	br	80e398 <alt_avalon_dma_launch_rxonly+0x88>
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  }
  else
  {
    priv->active = 0;
  80e390:	e0bfff17 	ldw	r2,-4(fp)
  80e394:	10000815 	stw	zero,32(r2)
  }
}
  80e398:	0001883a 	nop
  80e39c:	e037883a 	mov	sp,fp
  80e3a0:	df000017 	ldw	fp,0(sp)
  80e3a4:	dec00104 	addi	sp,sp,4
  80e3a8:	f800283a 	ret

0080e3ac <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
  80e3ac:	defffa04 	addi	sp,sp,-24
  80e3b0:	df000515 	stw	fp,20(sp)
  80e3b4:	df000504 	addi	fp,sp,20
  80e3b8:	e13ffd15 	stw	r4,-12(fp)
  80e3bc:	e17ffe15 	stw	r5,-8(fp)
  80e3c0:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
  80e3c4:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
  80e3c8:	e0bffd17 	ldw	r2,-12(fp)
  80e3cc:	10c00117 	ldw	r3,4(r2)
  80e3d0:	e0bffd17 	ldw	r2,-12(fp)
  80e3d4:	10800217 	ldw	r2,8(r2)
  80e3d8:	18800a1e 	bne	r3,r2,80e404 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
  80e3dc:	e0bffd17 	ldw	r2,-12(fp)
  80e3e0:	10c00317 	ldw	r3,12(r2)
  80e3e4:	e0bffd17 	ldw	r2,-12(fp)
  80e3e8:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
  80e3ec:	1880051e 	bne	r3,r2,80e404 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  80e3f0:	e0bffd17 	ldw	r2,-12(fp)
  80e3f4:	10800017 	ldw	r2,0(r2)
  80e3f8:	10800304 	addi	r2,r2,12
  80e3fc:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
  80e400:	10000226 	beq	r2,zero,80e40c <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
  80e404:	00bffec4 	movi	r2,-5
  80e408:	0000b506 	br	80e6e0 <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
  80e40c:	e0bffe17 	ldw	r2,-8(fp)
  80e410:	108002a8 	cmpgeui	r2,r2,10
  80e414:	1000781e 	bne	r2,zero,80e5f8 <alt_avalon_dma_ioctl+0x24c>
  80e418:	e0bffe17 	ldw	r2,-8(fp)
  80e41c:	100690ba 	slli	r3,r2,2
  80e420:	00802074 	movhi	r2,129
  80e424:	10b90d04 	addi	r2,r2,-7116
  80e428:	1885883a 	add	r2,r3,r2
  80e42c:	10800017 	ldw	r2,0(r2)
  80e430:	1000683a 	jmp	r2
  80e434:	0080e5f8 	rdprs	r2,zero,919
  80e438:	0080e45c 	xori	r2,zero,913
  80e43c:	0080e4b4 	movhi	r2,914
  80e440:	0080e4e0 	cmpeqi	r2,zero,915
  80e444:	0080e538 	rdprs	r2,zero,916
  80e448:	0080e564 	muli	r2,zero,917
  80e44c:	0080e580 	call	80e58 <__alt_mem_sdram-0x77f1a8>
  80e450:	0080e5a0 	cmpeqi	r2,zero,918
  80e454:	0080e5c0 	call	80e5c <__alt_mem_sdram-0x77f1a4>
  80e458:	0080e5e0 	cmpeqi	r2,zero,919
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
  80e45c:	e0bffd17 	ldw	r2,-12(fp)
  80e460:	10800517 	ldw	r2,20(r2)
  80e464:	1080100c 	andi	r2,r2,64
  80e468:	10000f1e 	bne	r2,zero,80e4a8 <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
  80e46c:	e0bffd17 	ldw	r2,-12(fp)
  80e470:	10800017 	ldw	r2,0(r2)
  80e474:	10800104 	addi	r2,r2,4
  80e478:	e0ffff17 	ldw	r3,-4(fp)
  80e47c:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
  80e480:	e0bffd17 	ldw	r2,-12(fp)
  80e484:	10800517 	ldw	r2,20(r2)
  80e488:	10c00814 	ori	r3,r2,32
  80e48c:	e0bffd17 	ldw	r2,-12(fp)
  80e490:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
  80e494:	e0fffd17 	ldw	r3,-12(fp)
  80e498:	00802074 	movhi	r2,129
  80e49c:	10b8c404 	addi	r2,r2,-7408
  80e4a0:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
  80e4a4:	00005606 	br	80e600 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
  80e4a8:	00bffec4 	movi	r2,-5
  80e4ac:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
  80e4b0:	00005306 	br	80e600 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
  80e4b4:	e0bffd17 	ldw	r2,-12(fp)
  80e4b8:	10c00517 	ldw	r3,20(r2)
  80e4bc:	00bff7c4 	movi	r2,-33
  80e4c0:	1886703a 	and	r3,r3,r2
  80e4c4:	e0bffd17 	ldw	r2,-12(fp)
  80e4c8:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  80e4cc:	e0fffd17 	ldw	r3,-12(fp)
  80e4d0:	00802074 	movhi	r2,129
  80e4d4:	10b85f04 	addi	r2,r2,-7812
  80e4d8:	18800715 	stw	r2,28(r3)
    break;
  80e4dc:	00004806 	br	80e600 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
  80e4e0:	e0bffd17 	ldw	r2,-12(fp)
  80e4e4:	10800517 	ldw	r2,20(r2)
  80e4e8:	1080080c 	andi	r2,r2,32
  80e4ec:	10000f1e 	bne	r2,zero,80e52c <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
  80e4f0:	e0bffd17 	ldw	r2,-12(fp)
  80e4f4:	10800017 	ldw	r2,0(r2)
  80e4f8:	10800204 	addi	r2,r2,8
  80e4fc:	e0ffff17 	ldw	r3,-4(fp)
  80e500:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
  80e504:	e0bffd17 	ldw	r2,-12(fp)
  80e508:	10800517 	ldw	r2,20(r2)
  80e50c:	10c01014 	ori	r3,r2,64
  80e510:	e0bffd17 	ldw	r2,-12(fp)
  80e514:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
  80e518:	e0fffd17 	ldw	r3,-12(fp)
  80e51c:	00802074 	movhi	r2,129
  80e520:	10b89d04 	addi	r2,r2,-7564
  80e524:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
  80e528:	00003506 	br	80e600 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
  80e52c:	00bffec4 	movi	r2,-5
  80e530:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
  80e534:	00003206 	br	80e600 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
  80e538:	e0bffd17 	ldw	r2,-12(fp)
  80e53c:	10c00517 	ldw	r3,20(r2)
  80e540:	00bfefc4 	movi	r2,-65
  80e544:	1886703a 	and	r3,r3,r2
  80e548:	e0bffd17 	ldw	r2,-12(fp)
  80e54c:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  80e550:	e0fffd17 	ldw	r3,-12(fp)
  80e554:	00802074 	movhi	r2,129
  80e558:	10b85f04 	addi	r2,r2,-7812
  80e55c:	18800715 	stw	r2,28(r3)
    break;
  80e560:	00002706 	br	80e600 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e564:	e0bffd17 	ldw	r2,-12(fp)
  80e568:	10c00517 	ldw	r3,20(r2)
  80e56c:	00bffc04 	movi	r2,-16
  80e570:	1886703a 	and	r3,r3,r2
  80e574:	e0bffd17 	ldw	r2,-12(fp)
  80e578:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
  80e57c:	00002006 	br	80e600 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e580:	e0bffd17 	ldw	r2,-12(fp)
  80e584:	10c00517 	ldw	r3,20(r2)
  80e588:	00bffc04 	movi	r2,-16
  80e58c:	1884703a 	and	r2,r3,r2
  80e590:	10c00054 	ori	r3,r2,1
  80e594:	e0bffd17 	ldw	r2,-12(fp)
  80e598:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
  80e59c:	00001806 	br	80e600 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e5a0:	e0bffd17 	ldw	r2,-12(fp)
  80e5a4:	10c00517 	ldw	r3,20(r2)
  80e5a8:	00bffc04 	movi	r2,-16
  80e5ac:	1884703a 	and	r2,r3,r2
  80e5b0:	10c000d4 	ori	r3,r2,3
  80e5b4:	e0bffd17 	ldw	r2,-12(fp)
  80e5b8:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
  80e5bc:	00001006 	br	80e600 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e5c0:	e0bffd17 	ldw	r2,-12(fp)
  80e5c4:	10c00517 	ldw	r3,20(r2)
  80e5c8:	00bffc04 	movi	r2,-16
  80e5cc:	1884703a 	and	r2,r3,r2
  80e5d0:	10c001d4 	ori	r3,r2,7
  80e5d4:	e0bffd17 	ldw	r2,-12(fp)
  80e5d8:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
  80e5dc:	00000806 	br	80e600 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e5e0:	e0bffd17 	ldw	r2,-12(fp)
  80e5e4:	10800517 	ldw	r2,20(r2)
  80e5e8:	10c003d4 	ori	r3,r2,15
  80e5ec:	e0bffd17 	ldw	r2,-12(fp)
  80e5f0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
  80e5f4:	00000206 	br	80e600 <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
  80e5f8:	00bff9c4 	movi	r2,-25
  80e5fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
  80e600:	e0bffb17 	ldw	r2,-20(fp)
  80e604:	1000351e 	bne	r2,zero,80e6dc <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
  80e608:	e0bffd17 	ldw	r2,-12(fp)
  80e60c:	10800517 	ldw	r2,20(r2)
  80e610:	108003cc 	andi	r2,r2,15
  80e614:	10c00060 	cmpeqi	r3,r2,1
  80e618:	1800091e 	bne	r3,zero,80e640 <alt_avalon_dma_ioctl+0x294>
  80e61c:	0080052e 	bgeu	zero,r2,80e634 <alt_avalon_dma_ioctl+0x288>
  80e620:	10c000e0 	cmpeqi	r3,r2,3
  80e624:	1800091e 	bne	r3,zero,80e64c <alt_avalon_dma_ioctl+0x2a0>
  80e628:	108001e0 	cmpeqi	r2,r2,7
  80e62c:	10000a1e 	bne	r2,zero,80e658 <alt_avalon_dma_ioctl+0x2ac>
  80e630:	00000c06 	br	80e664 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
  80e634:	00800044 	movi	r2,1
  80e638:	e0bffc15 	stw	r2,-16(fp)
       break;
  80e63c:	00000b06 	br	80e66c <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
  80e640:	00800084 	movi	r2,2
  80e644:	e0bffc15 	stw	r2,-16(fp)
       break;
  80e648:	00000806 	br	80e66c <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
  80e64c:	00800104 	movi	r2,4
  80e650:	e0bffc15 	stw	r2,-16(fp)
       break;
  80e654:	00000506 	br	80e66c <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
  80e658:	00810004 	movi	r2,1024
  80e65c:	e0bffc15 	stw	r2,-16(fp)
       break;
  80e660:	00000206 	br	80e66c <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
  80e664:	00820004 	movi	r2,2048
  80e668:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
  80e66c:	e0bffd17 	ldw	r2,-12(fp)
  80e670:	10800517 	ldw	r2,20(r2)
  80e674:	1080080c 	andi	r2,r2,32
  80e678:	10000726 	beq	r2,zero,80e698 <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80e67c:	e0bffd17 	ldw	r2,-12(fp)
  80e680:	10800017 	ldw	r2,0(r2)
  80e684:	10800604 	addi	r2,r2,24
  80e688:	e0fffc17 	ldw	r3,-16(fp)
  80e68c:	18c07e14 	ori	r3,r3,504
  80e690:	10c00035 	stwio	r3,0(r2)
  80e694:	00001106 	br	80e6dc <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
  80e698:	e0bffd17 	ldw	r2,-12(fp)
  80e69c:	10800517 	ldw	r2,20(r2)
  80e6a0:	1080100c 	andi	r2,r2,64
  80e6a4:	10000726 	beq	r2,zero,80e6c4 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80e6a8:	e0bffd17 	ldw	r2,-12(fp)
  80e6ac:	10800017 	ldw	r2,0(r2)
  80e6b0:	10800604 	addi	r2,r2,24
  80e6b4:	e0fffc17 	ldw	r3,-16(fp)
  80e6b8:	18c0be14 	ori	r3,r3,760
  80e6bc:	10c00035 	stwio	r3,0(r2)
  80e6c0:	00000606 	br	80e6dc <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80e6c4:	e0bffd17 	ldw	r2,-12(fp)
  80e6c8:	10800017 	ldw	r2,0(r2)
  80e6cc:	10800604 	addi	r2,r2,24
  80e6d0:	e0fffc17 	ldw	r3,-16(fp)
  80e6d4:	18c03e14 	ori	r3,r3,248
  80e6d8:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
  80e6dc:	e0bffb17 	ldw	r2,-20(fp)
}
  80e6e0:	e037883a 	mov	sp,fp
  80e6e4:	df000017 	ldw	fp,0(sp)
  80e6e8:	dec00104 	addi	sp,sp,4
  80e6ec:	f800283a 	ret

0080e6f0 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
  80e6f0:	defffb04 	addi	sp,sp,-20
  80e6f4:	dfc00415 	stw	ra,16(sp)
  80e6f8:	df000315 	stw	fp,12(sp)
  80e6fc:	df000304 	addi	fp,sp,12
  80e700:	e13ffd15 	stw	r4,-12(fp)
  80e704:	e17ffe15 	stw	r5,-8(fp)
  80e708:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
  80e70c:	e0bffd17 	ldw	r2,-12(fp)
  80e710:	10800617 	ldw	r2,24(r2)
  80e714:	e1bfff17 	ldw	r6,-4(fp)
  80e718:	e17ffe17 	ldw	r5,-8(fp)
  80e71c:	1009883a 	mov	r4,r2
  80e720:	080e3ac0 	call	80e3ac <alt_avalon_dma_ioctl>
             req,
             arg);
}
  80e724:	e037883a 	mov	sp,fp
  80e728:	dfc00117 	ldw	ra,4(sp)
  80e72c:	df000017 	ldw	fp,0(sp)
  80e730:	dec00204 	addi	sp,sp,8
  80e734:	f800283a 	ret

0080e738 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
  80e738:	defffb04 	addi	sp,sp,-20
  80e73c:	dfc00415 	stw	ra,16(sp)
  80e740:	df000315 	stw	fp,12(sp)
  80e744:	df000304 	addi	fp,sp,12
  80e748:	e13ffd15 	stw	r4,-12(fp)
  80e74c:	e17ffe15 	stw	r5,-8(fp)
  80e750:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
  80e754:	e0bffd17 	ldw	r2,-12(fp)
  80e758:	10800617 	ldw	r2,24(r2)
  80e75c:	e1bfff17 	ldw	r6,-4(fp)
  80e760:	e17ffe17 	ldw	r5,-8(fp)
  80e764:	1009883a 	mov	r4,r2
  80e768:	080e3ac0 	call	80e3ac <alt_avalon_dma_ioctl>
             req,
             arg);
}
  80e76c:	e037883a 	mov	sp,fp
  80e770:	dfc00117 	ldw	ra,4(sp)
  80e774:	df000017 	ldw	fp,0(sp)
  80e778:	dec00204 	addi	sp,sp,8
  80e77c:	f800283a 	ret

0080e780 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
  80e780:	defff404 	addi	sp,sp,-48
  80e784:	dfc00b15 	stw	ra,44(sp)
  80e788:	df000a15 	stw	fp,40(sp)
  80e78c:	df000a04 	addi	fp,sp,40
  80e790:	e13ffc15 	stw	r4,-16(fp)
  80e794:	e17ffd15 	stw	r5,-12(fp)
  80e798:	e1bffe15 	stw	r6,-8(fp)
  80e79c:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
  80e7a0:	e0bffc17 	ldw	r2,-16(fp)
  80e7a4:	10800617 	ldw	r2,24(r2)
  80e7a8:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  80e7ac:	e0bff617 	ldw	r2,-40(fp)
  80e7b0:	10800517 	ldw	r2,20(r2)
  80e7b4:	108003cc 	andi	r2,r2,15
  80e7b8:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
  80e7bc:	e0fffd17 	ldw	r3,-12(fp)
  80e7c0:	e0bff717 	ldw	r2,-36(fp)
  80e7c4:	1884703a 	and	r2,r3,r2
  80e7c8:	1000081e 	bne	r2,zero,80e7ec <alt_avalon_dma_prepare+0x6c>
  80e7cc:	e0fffe17 	ldw	r3,-8(fp)
  80e7d0:	e0bff717 	ldw	r2,-36(fp)
  80e7d4:	1884703a 	and	r2,r3,r2
  80e7d8:	1000041e 	bne	r2,zero,80e7ec <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
  80e7dc:	e0bff617 	ldw	r2,-40(fp)
  80e7e0:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
  80e7e4:	e0bffe17 	ldw	r2,-8(fp)
  80e7e8:	1880022e 	bgeu	r3,r2,80e7f4 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
  80e7ec:	00bffa84 	movi	r2,-22
  80e7f0:	00002c06 	br	80e8a4 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
  80e7f4:	e0bff617 	ldw	r2,-40(fp)
  80e7f8:	10800317 	ldw	r2,12(r2)
  80e7fc:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
  80e800:	e0bff617 	ldw	r2,-40(fp)
  80e804:	10800417 	ldw	r2,16(r2)
  80e808:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
  80e80c:	e0bff917 	ldw	r2,-28(fp)
  80e810:	1004913a 	slli	r2,r2,4
  80e814:	10801904 	addi	r2,r2,100
  80e818:	e0fff617 	ldw	r3,-40(fp)
  80e81c:	1885883a 	add	r2,r3,r2
  80e820:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80e824:	e0bff917 	ldw	r2,-28(fp)
  80e828:	10800044 	addi	r2,r2,1
  80e82c:	108000cc 	andi	r2,r2,3
  80e830:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
  80e834:	e0fffb17 	ldw	r3,-20(fp)
  80e838:	e0bff817 	ldw	r2,-32(fp)
  80e83c:	1880021e 	bne	r3,r2,80e848 <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
  80e840:	00bff904 	movi	r2,-28
  80e844:	00001706 	br	80e8a4 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
  80e848:	e0bffa17 	ldw	r2,-24(fp)
  80e84c:	e0fffd17 	ldw	r3,-12(fp)
  80e850:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
  80e854:	e0bffa17 	ldw	r2,-24(fp)
  80e858:	e0fffe17 	ldw	r3,-8(fp)
  80e85c:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
  80e860:	e0bffa17 	ldw	r2,-24(fp)
  80e864:	e0ffff17 	ldw	r3,-4(fp)
  80e868:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
  80e86c:	e0bffa17 	ldw	r2,-24(fp)
  80e870:	e0c00217 	ldw	r3,8(fp)
  80e874:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
  80e878:	e0bff617 	ldw	r2,-40(fp)
  80e87c:	e0fffb17 	ldw	r3,-20(fp)
  80e880:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
  80e884:	e0bff617 	ldw	r2,-40(fp)
  80e888:	10800817 	ldw	r2,32(r2)
  80e88c:	1000041e 	bne	r2,zero,80e8a0 <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
  80e890:	e0bff617 	ldw	r2,-40(fp)
  80e894:	10800717 	ldw	r2,28(r2)
  80e898:	e13ff617 	ldw	r4,-40(fp)
  80e89c:	103ee83a 	callr	r2
  }

  return 0;
  80e8a0:	0005883a 	mov	r2,zero
}
  80e8a4:	e037883a 	mov	sp,fp
  80e8a8:	dfc00117 	ldw	ra,4(sp)
  80e8ac:	df000017 	ldw	fp,0(sp)
  80e8b0:	dec00204 	addi	sp,sp,8
  80e8b4:	f800283a 	ret

0080e8b8 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
  80e8b8:	defffb04 	addi	sp,sp,-20
  80e8bc:	df000415 	stw	fp,16(sp)
  80e8c0:	df000404 	addi	fp,sp,16
  80e8c4:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  80e8c8:	e0bfff17 	ldw	r2,-4(fp)
  80e8cc:	10800617 	ldw	r2,24(r2)
  80e8d0:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
  80e8d4:	e0bffc17 	ldw	r2,-16(fp)
  80e8d8:	10800117 	ldw	r2,4(r2)
  80e8dc:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
  80e8e0:	e0bffc17 	ldw	r2,-16(fp)
  80e8e4:	10800217 	ldw	r2,8(r2)
  80e8e8:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
  80e8ec:	e0bffd17 	ldw	r2,-12(fp)
  80e8f0:	e0fffe17 	ldw	r3,-8(fp)
  80e8f4:	1880052e 	bgeu	r3,r2,80e90c <alt_avalon_dma_space+0x54>
  80e8f8:	e0fffd17 	ldw	r3,-12(fp)
  80e8fc:	e0bffe17 	ldw	r2,-8(fp)
  80e900:	1885c83a 	sub	r2,r3,r2
  80e904:	10bfffc4 	addi	r2,r2,-1
  80e908:	00000406 	br	80e91c <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
  80e90c:	e0fffd17 	ldw	r3,-12(fp)
  80e910:	e0bffe17 	ldw	r2,-8(fp)
  80e914:	1885c83a 	sub	r2,r3,r2
  80e918:	108000c4 	addi	r2,r2,3
}
  80e91c:	e037883a 	mov	sp,fp
  80e920:	df000017 	ldw	fp,0(sp)
  80e924:	dec00104 	addi	sp,sp,4
  80e928:	f800283a 	ret

0080e92c <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
  80e92c:	defff404 	addi	sp,sp,-48
  80e930:	dfc00b15 	stw	ra,44(sp)
  80e934:	df000a15 	stw	fp,40(sp)
  80e938:	df000a04 	addi	fp,sp,40
  80e93c:	e13ffc15 	stw	r4,-16(fp)
  80e940:	e17ffd15 	stw	r5,-12(fp)
  80e944:	e1bffe15 	stw	r6,-8(fp)
  80e948:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  80e94c:	e0bffc17 	ldw	r2,-16(fp)
  80e950:	10800617 	ldw	r2,24(r2)
  80e954:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  80e958:	e0bff617 	ldw	r2,-40(fp)
  80e95c:	10800517 	ldw	r2,20(r2)
  80e960:	108003cc 	andi	r2,r2,15
  80e964:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
  80e968:	e0fffd17 	ldw	r3,-12(fp)
  80e96c:	e0bff717 	ldw	r2,-36(fp)
  80e970:	1884703a 	and	r2,r3,r2
  80e974:	1000081e 	bne	r2,zero,80e998 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
  80e978:	e0fffe17 	ldw	r3,-8(fp)
  80e97c:	e0bff717 	ldw	r2,-36(fp)
  80e980:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
  80e984:	1000041e 	bne	r2,zero,80e998 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
  80e988:	e0bff617 	ldw	r2,-40(fp)
  80e98c:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
  80e990:	e0bffe17 	ldw	r2,-8(fp)
  80e994:	1880022e 	bgeu	r3,r2,80e9a0 <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
  80e998:	00bffa84 	movi	r2,-22
  80e99c:	00002c06 	br	80ea50 <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
  80e9a0:	e0bff617 	ldw	r2,-40(fp)
  80e9a4:	10800117 	ldw	r2,4(r2)
  80e9a8:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
  80e9ac:	e0bff617 	ldw	r2,-40(fp)
  80e9b0:	10800217 	ldw	r2,8(r2)
  80e9b4:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
  80e9b8:	e0bff917 	ldw	r2,-28(fp)
  80e9bc:	1004913a 	slli	r2,r2,4
  80e9c0:	10800904 	addi	r2,r2,36
  80e9c4:	e0fff617 	ldw	r3,-40(fp)
  80e9c8:	1885883a 	add	r2,r3,r2
  80e9cc:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80e9d0:	e0bff917 	ldw	r2,-28(fp)
  80e9d4:	10800044 	addi	r2,r2,1
  80e9d8:	108000cc 	andi	r2,r2,3
  80e9dc:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
  80e9e0:	e0fffb17 	ldw	r3,-20(fp)
  80e9e4:	e0bff817 	ldw	r2,-32(fp)
  80e9e8:	1880021e 	bne	r3,r2,80e9f4 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
  80e9ec:	00bff904 	movi	r2,-28
  80e9f0:	00001706 	br	80ea50 <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
  80e9f4:	e0bffa17 	ldw	r2,-24(fp)
  80e9f8:	e0fffd17 	ldw	r3,-12(fp)
  80e9fc:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
  80ea00:	e0bffa17 	ldw	r2,-24(fp)
  80ea04:	e0fffe17 	ldw	r3,-8(fp)
  80ea08:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
  80ea0c:	e0bffa17 	ldw	r2,-24(fp)
  80ea10:	e0ffff17 	ldw	r3,-4(fp)
  80ea14:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
  80ea18:	e0bffa17 	ldw	r2,-24(fp)
  80ea1c:	e0c00217 	ldw	r3,8(fp)
  80ea20:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
  80ea24:	e0bff617 	ldw	r2,-40(fp)
  80ea28:	e0fffb17 	ldw	r3,-20(fp)
  80ea2c:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
  80ea30:	e0bff617 	ldw	r2,-40(fp)
  80ea34:	10800817 	ldw	r2,32(r2)
  80ea38:	1000041e 	bne	r2,zero,80ea4c <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
  80ea3c:	e0bff617 	ldw	r2,-40(fp)
  80ea40:	10800717 	ldw	r2,28(r2)
  80ea44:	e13ff617 	ldw	r4,-40(fp)
  80ea48:	103ee83a 	callr	r2
  }

  return 0;
  80ea4c:	0005883a 	mov	r2,zero
}
  80ea50:	e037883a 	mov	sp,fp
  80ea54:	dfc00117 	ldw	ra,4(sp)
  80ea58:	df000017 	ldw	fp,0(sp)
  80ea5c:	dec00204 	addi	sp,sp,8
  80ea60:	f800283a 	ret

0080ea64 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
  80ea64:	defff104 	addi	sp,sp,-60
  80ea68:	dfc00e15 	stw	ra,56(sp)
  80ea6c:	df000d15 	stw	fp,52(sp)
  80ea70:	df000d04 	addi	fp,sp,52
  80ea74:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
  80ea78:	e0bfff17 	ldw	r2,-4(fp)
  80ea7c:	e0bff315 	stw	r2,-52(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  80ea80:	e0bff317 	ldw	r2,-52(fp)
  80ea84:	10800517 	ldw	r2,20(r2)
  80ea88:	1080080c 	andi	r2,r2,32
  80ea8c:	e0bff415 	stw	r2,-48(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
  80ea90:	e0bff317 	ldw	r2,-52(fp)
  80ea94:	10800517 	ldw	r2,20(r2)
  80ea98:	1080100c 	andi	r2,r2,64
  80ea9c:	e0bff515 	stw	r2,-44(fp)

  tx_start = priv->tx_start;
  80eaa0:	e0bff317 	ldw	r2,-52(fp)
  80eaa4:	10800117 	ldw	r2,4(r2)
  80eaa8:	e0bff615 	stw	r2,-40(fp)
  rx_start = priv->rx_start;
  80eaac:	e0bff317 	ldw	r2,-52(fp)
  80eab0:	10800317 	ldw	r2,12(r2)
  80eab4:	e0bff715 	stw	r2,-36(fp)

  tx_slot = &priv->tx_buf[tx_start];
  80eab8:	e0bff617 	ldw	r2,-40(fp)
  80eabc:	1004913a 	slli	r2,r2,4
  80eac0:	10800904 	addi	r2,r2,36
  80eac4:	e0fff317 	ldw	r3,-52(fp)
  80eac8:	1885883a 	add	r2,r3,r2
  80eacc:	e0bff815 	stw	r2,-32(fp)
  rx_slot = &priv->rx_buf[rx_start];
  80ead0:	e0bff717 	ldw	r2,-36(fp)
  80ead4:	1004913a 	slli	r2,r2,4
  80ead8:	10801904 	addi	r2,r2,100
  80eadc:	e0fff317 	ldw	r3,-52(fp)
  80eae0:	1885883a 	add	r2,r3,r2
  80eae4:	e0bff915 	stw	r2,-28(fp)

  /* Increment the descriptors */

  if (!stream_tx)
  80eae8:	e0bff417 	ldw	r2,-48(fp)
  80eaec:	1000051e 	bne	r2,zero,80eb04 <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80eaf0:	e0bff617 	ldw	r2,-40(fp)
  80eaf4:	10800044 	addi	r2,r2,1
  80eaf8:	10c000cc 	andi	r3,r2,3
  80eafc:	e0bff317 	ldw	r2,-52(fp)
  80eb00:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
  80eb04:	e0bff517 	ldw	r2,-44(fp)
  80eb08:	1000051e 	bne	r2,zero,80eb20 <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80eb0c:	e0bff717 	ldw	r2,-36(fp)
  80eb10:	10800044 	addi	r2,r2,1
  80eb14:	10c000cc 	andi	r3,r2,3
  80eb18:	e0bff317 	ldw	r2,-52(fp)
  80eb1c:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
  80eb20:	e0bff317 	ldw	r2,-52(fp)
  80eb24:	10800017 	ldw	r2,0(r2)
  80eb28:	0007883a 	mov	r3,zero
  80eb2c:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
  80eb30:	e0bff317 	ldw	r2,-52(fp)
  80eb34:	10800017 	ldw	r2,0(r2)
  80eb38:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
  80eb3c:	e0bff317 	ldw	r2,-52(fp)
  80eb40:	10800717 	ldw	r2,28(r2)
  80eb44:	e13ff317 	ldw	r4,-52(fp)
  80eb48:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
  80eb4c:	e0bff417 	ldw	r2,-48(fp)
  80eb50:	1000151e 	bne	r2,zero,80eba8 <alt_avalon_dma_irq+0x144>
  80eb54:	e0bff817 	ldw	r2,-32(fp)
  80eb58:	10800217 	ldw	r2,8(r2)
  80eb5c:	10001226 	beq	r2,zero,80eba8 <alt_avalon_dma_irq+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eb60:	0005303a 	rdctl	r2,status
  80eb64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb68:	e0fffc17 	ldw	r3,-16(fp)
  80eb6c:	00bfff84 	movi	r2,-2
  80eb70:	1884703a 	and	r2,r3,r2
  80eb74:	1001703a 	wrctl	status,r2
  
  return context;
  80eb78:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
  80eb7c:	e0bffb15 	stw	r2,-20(fp)
    tx_slot->done (tx_slot->handle);
  80eb80:	e0bff817 	ldw	r2,-32(fp)
  80eb84:	10800217 	ldw	r2,8(r2)
  80eb88:	e0fff817 	ldw	r3,-32(fp)
  80eb8c:	18c00317 	ldw	r3,12(r3)
  80eb90:	1809883a 	mov	r4,r3
  80eb94:	103ee83a 	callr	r2
  80eb98:	e0bffb17 	ldw	r2,-20(fp)
  80eb9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eba0:	e0bffe17 	ldw	r2,-8(fp)
  80eba4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
  80eba8:	e0bff517 	ldw	r2,-44(fp)
  80ebac:	1000171e 	bne	r2,zero,80ec0c <alt_avalon_dma_irq+0x1a8>
  80ebb0:	e0bff917 	ldw	r2,-28(fp)
  80ebb4:	10800217 	ldw	r2,8(r2)
  80ebb8:	10001426 	beq	r2,zero,80ec0c <alt_avalon_dma_irq+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ebbc:	0005303a 	rdctl	r2,status
  80ebc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ebc4:	e0fffd17 	ldw	r3,-12(fp)
  80ebc8:	00bfff84 	movi	r2,-2
  80ebcc:	1884703a 	and	r2,r3,r2
  80ebd0:	1001703a 	wrctl	status,r2
  
  return context;
  80ebd4:	e0bffd17 	ldw	r2,-12(fp)
  {
    cpu_sr = alt_irq_disable_all();
  80ebd8:	e0bffb15 	stw	r2,-20(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
  80ebdc:	e0bff917 	ldw	r2,-28(fp)
  80ebe0:	10800217 	ldw	r2,8(r2)
  80ebe4:	e0fff917 	ldw	r3,-28(fp)
  80ebe8:	19000317 	ldw	r4,12(r3)
  80ebec:	e0fff917 	ldw	r3,-28(fp)
  80ebf0:	18c00017 	ldw	r3,0(r3)
  80ebf4:	180b883a 	mov	r5,r3
  80ebf8:	103ee83a 	callr	r2
  80ebfc:	e0bffb17 	ldw	r2,-20(fp)
  80ec00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ec04:	e0bffa17 	ldw	r2,-24(fp)
  80ec08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
  80ec0c:	0001883a 	nop
  80ec10:	e037883a 	mov	sp,fp
  80ec14:	dfc00117 	ldw	ra,4(sp)
  80ec18:	df000017 	ldw	fp,0(sp)
  80ec1c:	dec00204 	addi	sp,sp,8
  80ec20:	f800283a 	ret

0080ec24 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
  80ec24:	defff904 	addi	sp,sp,-28
  80ec28:	dfc00615 	stw	ra,24(sp)
  80ec2c:	df000515 	stw	fp,20(sp)
  80ec30:	df000504 	addi	fp,sp,20
  80ec34:	e13ffc15 	stw	r4,-16(fp)
  80ec38:	e17ffd15 	stw	r5,-12(fp)
  80ec3c:	e1bffe15 	stw	r6,-8(fp)
  80ec40:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  80ec44:	e0bffe17 	ldw	r2,-8(fp)
  80ec48:	10800604 	addi	r2,r2,24
  80ec4c:	00c40004 	movi	r3,4096
  80ec50:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  80ec54:	e0bffe17 	ldw	r2,-8(fp)
  80ec58:	10800604 	addi	r2,r2,24
  80ec5c:	00c40004 	movi	r3,4096
  80ec60:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
  80ec64:	e0bffe17 	ldw	r2,-8(fp)
  80ec68:	10800604 	addi	r2,r2,24
  80ec6c:	00c03f04 	movi	r3,252
  80ec70:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
  80ec74:	0007883a 	mov	r3,zero
  80ec78:	e0bffe17 	ldw	r2,-8(fp)
  80ec7c:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
  80ec80:	e0bffc17 	ldw	r2,-16(fp)
  80ec84:	10800617 	ldw	r2,24(r2)
  80ec88:	d8000015 	stw	zero,0(sp)
  80ec8c:	100f883a 	mov	r7,r2
  80ec90:	01802074 	movhi	r6,129
  80ec94:	31ba9904 	addi	r6,r6,-5532
  80ec98:	e1400217 	ldw	r5,8(fp)
  80ec9c:	e13fff17 	ldw	r4,-4(fp)
  80eca0:	080fd2c0 	call	80fd2c <alt_ic_isr_register>
  80eca4:	10000616 	blt	r2,zero,80ecc0 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
  80eca8:	e0bffc17 	ldw	r2,-16(fp)
  80ecac:	1009883a 	mov	r4,r2
  80ecb0:	080e1140 	call	80e114 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
  80ecb4:	e0bffd17 	ldw	r2,-12(fp)
  80ecb8:	1009883a 	mov	r4,r2
  80ecbc:	080e1480 	call	80e148 <alt_dma_rxchan_reg>
  }
}
  80ecc0:	0001883a 	nop
  80ecc4:	e037883a 	mov	sp,fp
  80ecc8:	dfc00117 	ldw	ra,4(sp)
  80eccc:	df000017 	ldw	fp,0(sp)
  80ecd0:	dec00204 	addi	sp,sp,8
  80ecd4:	f800283a 	ret

0080ecd8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ecd8:	defffa04 	addi	sp,sp,-24
  80ecdc:	dfc00515 	stw	ra,20(sp)
  80ece0:	df000415 	stw	fp,16(sp)
  80ece4:	df000404 	addi	fp,sp,16
  80ece8:	e13ffd15 	stw	r4,-12(fp)
  80ecec:	e17ffe15 	stw	r5,-8(fp)
  80ecf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ecf4:	e0bffd17 	ldw	r2,-12(fp)
  80ecf8:	10800017 	ldw	r2,0(r2)
  80ecfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80ed00:	e0bffc17 	ldw	r2,-16(fp)
  80ed04:	10c00a04 	addi	r3,r2,40
  80ed08:	e0bffd17 	ldw	r2,-12(fp)
  80ed0c:	10800217 	ldw	r2,8(r2)
  80ed10:	100f883a 	mov	r7,r2
  80ed14:	e1bfff17 	ldw	r6,-4(fp)
  80ed18:	e17ffe17 	ldw	r5,-8(fp)
  80ed1c:	1809883a 	mov	r4,r3
  80ed20:	080f3000 	call	80f300 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80ed24:	e037883a 	mov	sp,fp
  80ed28:	dfc00117 	ldw	ra,4(sp)
  80ed2c:	df000017 	ldw	fp,0(sp)
  80ed30:	dec00204 	addi	sp,sp,8
  80ed34:	f800283a 	ret

0080ed38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ed38:	defffa04 	addi	sp,sp,-24
  80ed3c:	dfc00515 	stw	ra,20(sp)
  80ed40:	df000415 	stw	fp,16(sp)
  80ed44:	df000404 	addi	fp,sp,16
  80ed48:	e13ffd15 	stw	r4,-12(fp)
  80ed4c:	e17ffe15 	stw	r5,-8(fp)
  80ed50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ed54:	e0bffd17 	ldw	r2,-12(fp)
  80ed58:	10800017 	ldw	r2,0(r2)
  80ed5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ed60:	e0bffc17 	ldw	r2,-16(fp)
  80ed64:	10c00a04 	addi	r3,r2,40
  80ed68:	e0bffd17 	ldw	r2,-12(fp)
  80ed6c:	10800217 	ldw	r2,8(r2)
  80ed70:	100f883a 	mov	r7,r2
  80ed74:	e1bfff17 	ldw	r6,-4(fp)
  80ed78:	e17ffe17 	ldw	r5,-8(fp)
  80ed7c:	1809883a 	mov	r4,r3
  80ed80:	080f51c0 	call	80f51c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80ed84:	e037883a 	mov	sp,fp
  80ed88:	dfc00117 	ldw	ra,4(sp)
  80ed8c:	df000017 	ldw	fp,0(sp)
  80ed90:	dec00204 	addi	sp,sp,8
  80ed94:	f800283a 	ret

0080ed98 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80ed98:	defffc04 	addi	sp,sp,-16
  80ed9c:	dfc00315 	stw	ra,12(sp)
  80eda0:	df000215 	stw	fp,8(sp)
  80eda4:	df000204 	addi	fp,sp,8
  80eda8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80edac:	e0bfff17 	ldw	r2,-4(fp)
  80edb0:	10800017 	ldw	r2,0(r2)
  80edb4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80edb8:	e0bffe17 	ldw	r2,-8(fp)
  80edbc:	10c00a04 	addi	r3,r2,40
  80edc0:	e0bfff17 	ldw	r2,-4(fp)
  80edc4:	10800217 	ldw	r2,8(r2)
  80edc8:	100b883a 	mov	r5,r2
  80edcc:	1809883a 	mov	r4,r3
  80edd0:	080f1a80 	call	80f1a8 <altera_avalon_jtag_uart_close>
}
  80edd4:	e037883a 	mov	sp,fp
  80edd8:	dfc00117 	ldw	ra,4(sp)
  80eddc:	df000017 	ldw	fp,0(sp)
  80ede0:	dec00204 	addi	sp,sp,8
  80ede4:	f800283a 	ret

0080ede8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80ede8:	defffa04 	addi	sp,sp,-24
  80edec:	dfc00515 	stw	ra,20(sp)
  80edf0:	df000415 	stw	fp,16(sp)
  80edf4:	df000404 	addi	fp,sp,16
  80edf8:	e13ffd15 	stw	r4,-12(fp)
  80edfc:	e17ffe15 	stw	r5,-8(fp)
  80ee00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80ee04:	e0bffd17 	ldw	r2,-12(fp)
  80ee08:	10800017 	ldw	r2,0(r2)
  80ee0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ee10:	e0bffc17 	ldw	r2,-16(fp)
  80ee14:	10800a04 	addi	r2,r2,40
  80ee18:	e1bfff17 	ldw	r6,-4(fp)
  80ee1c:	e17ffe17 	ldw	r5,-8(fp)
  80ee20:	1009883a 	mov	r4,r2
  80ee24:	080f2100 	call	80f210 <altera_avalon_jtag_uart_ioctl>
}
  80ee28:	e037883a 	mov	sp,fp
  80ee2c:	dfc00117 	ldw	ra,4(sp)
  80ee30:	df000017 	ldw	fp,0(sp)
  80ee34:	dec00204 	addi	sp,sp,8
  80ee38:	f800283a 	ret

0080ee3c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ee3c:	defffa04 	addi	sp,sp,-24
  80ee40:	dfc00515 	stw	ra,20(sp)
  80ee44:	df000415 	stw	fp,16(sp)
  80ee48:	df000404 	addi	fp,sp,16
  80ee4c:	e13ffd15 	stw	r4,-12(fp)
  80ee50:	e17ffe15 	stw	r5,-8(fp)
  80ee54:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ee58:	e0bffd17 	ldw	r2,-12(fp)
  80ee5c:	00c00044 	movi	r3,1
  80ee60:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ee64:	e0bffd17 	ldw	r2,-12(fp)
  80ee68:	10800017 	ldw	r2,0(r2)
  80ee6c:	10800104 	addi	r2,r2,4
  80ee70:	1007883a 	mov	r3,r2
  80ee74:	e0bffd17 	ldw	r2,-12(fp)
  80ee78:	10800817 	ldw	r2,32(r2)
  80ee7c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80ee80:	e0bffe17 	ldw	r2,-8(fp)
  80ee84:	e0ffff17 	ldw	r3,-4(fp)
  80ee88:	d8000015 	stw	zero,0(sp)
  80ee8c:	e1fffd17 	ldw	r7,-12(fp)
  80ee90:	01802074 	movhi	r6,129
  80ee94:	31bbbf04 	addi	r6,r6,-4356
  80ee98:	180b883a 	mov	r5,r3
  80ee9c:	1009883a 	mov	r4,r2
  80eea0:	080fd2c0 	call	80fd2c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80eea4:	e0bffd17 	ldw	r2,-12(fp)
  80eea8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80eeac:	e0bffd17 	ldw	r2,-12(fp)
  80eeb0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80eeb4:	d0e71517 	ldw	r3,-25516(gp)
  80eeb8:	e1fffd17 	ldw	r7,-12(fp)
  80eebc:	01802074 	movhi	r6,129
  80eec0:	31bc4204 	addi	r6,r6,-3832
  80eec4:	180b883a 	mov	r5,r3
  80eec8:	1009883a 	mov	r4,r2
  80eecc:	080f8340 	call	80f834 <alt_alarm_start>
  80eed0:	1000040e 	bge	r2,zero,80eee4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80eed4:	e0fffd17 	ldw	r3,-12(fp)
  80eed8:	00a00034 	movhi	r2,32768
  80eedc:	10bfffc4 	addi	r2,r2,-1
  80eee0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80eee4:	0001883a 	nop
  80eee8:	e037883a 	mov	sp,fp
  80eeec:	dfc00117 	ldw	ra,4(sp)
  80eef0:	df000017 	ldw	fp,0(sp)
  80eef4:	dec00204 	addi	sp,sp,8
  80eef8:	f800283a 	ret

0080eefc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80eefc:	defff804 	addi	sp,sp,-32
  80ef00:	df000715 	stw	fp,28(sp)
  80ef04:	df000704 	addi	fp,sp,28
  80ef08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ef0c:	e0bfff17 	ldw	r2,-4(fp)
  80ef10:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80ef14:	e0bffb17 	ldw	r2,-20(fp)
  80ef18:	10800017 	ldw	r2,0(r2)
  80ef1c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ef20:	e0bffc17 	ldw	r2,-16(fp)
  80ef24:	10800104 	addi	r2,r2,4
  80ef28:	10800037 	ldwio	r2,0(r2)
  80ef2c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ef30:	e0bffd17 	ldw	r2,-12(fp)
  80ef34:	1080c00c 	andi	r2,r2,768
  80ef38:	10006d26 	beq	r2,zero,80f0f0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ef3c:	e0bffd17 	ldw	r2,-12(fp)
  80ef40:	1080400c 	andi	r2,r2,256
  80ef44:	10003526 	beq	r2,zero,80f01c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ef48:	00800074 	movhi	r2,1
  80ef4c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ef50:	e0bffb17 	ldw	r2,-20(fp)
  80ef54:	10800a17 	ldw	r2,40(r2)
  80ef58:	10800044 	addi	r2,r2,1
  80ef5c:	1081ffcc 	andi	r2,r2,2047
  80ef60:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80ef64:	e0bffb17 	ldw	r2,-20(fp)
  80ef68:	10c00b17 	ldw	r3,44(r2)
  80ef6c:	e0bffe17 	ldw	r2,-8(fp)
  80ef70:	18801526 	beq	r3,r2,80efc8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ef74:	e0bffc17 	ldw	r2,-16(fp)
  80ef78:	10800037 	ldwio	r2,0(r2)
  80ef7c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ef80:	e0bff917 	ldw	r2,-28(fp)
  80ef84:	10a0000c 	andi	r2,r2,32768
  80ef88:	10001126 	beq	r2,zero,80efd0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ef8c:	e0bffb17 	ldw	r2,-20(fp)
  80ef90:	10800a17 	ldw	r2,40(r2)
  80ef94:	e0fff917 	ldw	r3,-28(fp)
  80ef98:	1809883a 	mov	r4,r3
  80ef9c:	e0fffb17 	ldw	r3,-20(fp)
  80efa0:	1885883a 	add	r2,r3,r2
  80efa4:	10800e04 	addi	r2,r2,56
  80efa8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80efac:	e0bffb17 	ldw	r2,-20(fp)
  80efb0:	10800a17 	ldw	r2,40(r2)
  80efb4:	10800044 	addi	r2,r2,1
  80efb8:	10c1ffcc 	andi	r3,r2,2047
  80efbc:	e0bffb17 	ldw	r2,-20(fp)
  80efc0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80efc4:	003fe206 	br	80ef50 <__alt_data_end+0xff80ef50>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80efc8:	0001883a 	nop
  80efcc:	00000106 	br	80efd4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80efd0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80efd4:	e0bff917 	ldw	r2,-28(fp)
  80efd8:	10bfffec 	andhi	r2,r2,65535
  80efdc:	10000f26 	beq	r2,zero,80f01c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80efe0:	e0bffb17 	ldw	r2,-20(fp)
  80efe4:	10c00817 	ldw	r3,32(r2)
  80efe8:	00bfff84 	movi	r2,-2
  80efec:	1886703a 	and	r3,r3,r2
  80eff0:	e0bffb17 	ldw	r2,-20(fp)
  80eff4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80eff8:	e0bffc17 	ldw	r2,-16(fp)
  80effc:	10800104 	addi	r2,r2,4
  80f000:	1007883a 	mov	r3,r2
  80f004:	e0bffb17 	ldw	r2,-20(fp)
  80f008:	10800817 	ldw	r2,32(r2)
  80f00c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f010:	e0bffc17 	ldw	r2,-16(fp)
  80f014:	10800104 	addi	r2,r2,4
  80f018:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80f01c:	e0bffd17 	ldw	r2,-12(fp)
  80f020:	1080800c 	andi	r2,r2,512
  80f024:	103fbe26 	beq	r2,zero,80ef20 <__alt_data_end+0xff80ef20>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80f028:	e0bffd17 	ldw	r2,-12(fp)
  80f02c:	1004d43a 	srli	r2,r2,16
  80f030:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f034:	00001406 	br	80f088 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80f038:	e0bffc17 	ldw	r2,-16(fp)
  80f03c:	e0fffb17 	ldw	r3,-20(fp)
  80f040:	18c00d17 	ldw	r3,52(r3)
  80f044:	e13ffb17 	ldw	r4,-20(fp)
  80f048:	20c7883a 	add	r3,r4,r3
  80f04c:	18c20e04 	addi	r3,r3,2104
  80f050:	18c00003 	ldbu	r3,0(r3)
  80f054:	18c03fcc 	andi	r3,r3,255
  80f058:	18c0201c 	xori	r3,r3,128
  80f05c:	18ffe004 	addi	r3,r3,-128
  80f060:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f064:	e0bffb17 	ldw	r2,-20(fp)
  80f068:	10800d17 	ldw	r2,52(r2)
  80f06c:	10800044 	addi	r2,r2,1
  80f070:	10c1ffcc 	andi	r3,r2,2047
  80f074:	e0bffb17 	ldw	r2,-20(fp)
  80f078:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80f07c:	e0bffa17 	ldw	r2,-24(fp)
  80f080:	10bfffc4 	addi	r2,r2,-1
  80f084:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f088:	e0bffa17 	ldw	r2,-24(fp)
  80f08c:	10000526 	beq	r2,zero,80f0a4 <altera_avalon_jtag_uart_irq+0x1a8>
  80f090:	e0bffb17 	ldw	r2,-20(fp)
  80f094:	10c00d17 	ldw	r3,52(r2)
  80f098:	e0bffb17 	ldw	r2,-20(fp)
  80f09c:	10800c17 	ldw	r2,48(r2)
  80f0a0:	18bfe51e 	bne	r3,r2,80f038 <__alt_data_end+0xff80f038>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80f0a4:	e0bffa17 	ldw	r2,-24(fp)
  80f0a8:	103f9d26 	beq	r2,zero,80ef20 <__alt_data_end+0xff80ef20>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f0ac:	e0bffb17 	ldw	r2,-20(fp)
  80f0b0:	10c00817 	ldw	r3,32(r2)
  80f0b4:	00bfff44 	movi	r2,-3
  80f0b8:	1886703a 	and	r3,r3,r2
  80f0bc:	e0bffb17 	ldw	r2,-20(fp)
  80f0c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f0c4:	e0bffb17 	ldw	r2,-20(fp)
  80f0c8:	10800017 	ldw	r2,0(r2)
  80f0cc:	10800104 	addi	r2,r2,4
  80f0d0:	1007883a 	mov	r3,r2
  80f0d4:	e0bffb17 	ldw	r2,-20(fp)
  80f0d8:	10800817 	ldw	r2,32(r2)
  80f0dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f0e0:	e0bffc17 	ldw	r2,-16(fp)
  80f0e4:	10800104 	addi	r2,r2,4
  80f0e8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80f0ec:	003f8c06 	br	80ef20 <__alt_data_end+0xff80ef20>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80f0f0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80f0f4:	0001883a 	nop
  80f0f8:	e037883a 	mov	sp,fp
  80f0fc:	df000017 	ldw	fp,0(sp)
  80f100:	dec00104 	addi	sp,sp,4
  80f104:	f800283a 	ret

0080f108 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80f108:	defff804 	addi	sp,sp,-32
  80f10c:	df000715 	stw	fp,28(sp)
  80f110:	df000704 	addi	fp,sp,28
  80f114:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80f118:	e0bffb17 	ldw	r2,-20(fp)
  80f11c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80f120:	e0bff917 	ldw	r2,-28(fp)
  80f124:	10800017 	ldw	r2,0(r2)
  80f128:	10800104 	addi	r2,r2,4
  80f12c:	10800037 	ldwio	r2,0(r2)
  80f130:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80f134:	e0bffa17 	ldw	r2,-24(fp)
  80f138:	1081000c 	andi	r2,r2,1024
  80f13c:	10000b26 	beq	r2,zero,80f16c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80f140:	e0bff917 	ldw	r2,-28(fp)
  80f144:	10800017 	ldw	r2,0(r2)
  80f148:	10800104 	addi	r2,r2,4
  80f14c:	1007883a 	mov	r3,r2
  80f150:	e0bff917 	ldw	r2,-28(fp)
  80f154:	10800817 	ldw	r2,32(r2)
  80f158:	10810014 	ori	r2,r2,1024
  80f15c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80f160:	e0bff917 	ldw	r2,-28(fp)
  80f164:	10000915 	stw	zero,36(r2)
  80f168:	00000a06 	br	80f194 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80f16c:	e0bff917 	ldw	r2,-28(fp)
  80f170:	10c00917 	ldw	r3,36(r2)
  80f174:	00a00034 	movhi	r2,32768
  80f178:	10bfff04 	addi	r2,r2,-4
  80f17c:	10c00536 	bltu	r2,r3,80f194 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80f180:	e0bff917 	ldw	r2,-28(fp)
  80f184:	10800917 	ldw	r2,36(r2)
  80f188:	10c00044 	addi	r3,r2,1
  80f18c:	e0bff917 	ldw	r2,-28(fp)
  80f190:	10c00915 	stw	r3,36(r2)
  80f194:	d0a71517 	ldw	r2,-25516(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80f198:	e037883a 	mov	sp,fp
  80f19c:	df000017 	ldw	fp,0(sp)
  80f1a0:	dec00104 	addi	sp,sp,4
  80f1a4:	f800283a 	ret

0080f1a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80f1a8:	defffd04 	addi	sp,sp,-12
  80f1ac:	df000215 	stw	fp,8(sp)
  80f1b0:	df000204 	addi	fp,sp,8
  80f1b4:	e13ffe15 	stw	r4,-8(fp)
  80f1b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f1bc:	00000506 	br	80f1d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80f1c0:	e0bfff17 	ldw	r2,-4(fp)
  80f1c4:	1090000c 	andi	r2,r2,16384
  80f1c8:	10000226 	beq	r2,zero,80f1d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80f1cc:	00bffd44 	movi	r2,-11
  80f1d0:	00000b06 	br	80f200 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f1d4:	e0bffe17 	ldw	r2,-8(fp)
  80f1d8:	10c00d17 	ldw	r3,52(r2)
  80f1dc:	e0bffe17 	ldw	r2,-8(fp)
  80f1e0:	10800c17 	ldw	r2,48(r2)
  80f1e4:	18800526 	beq	r3,r2,80f1fc <altera_avalon_jtag_uart_close+0x54>
  80f1e8:	e0bffe17 	ldw	r2,-8(fp)
  80f1ec:	10c00917 	ldw	r3,36(r2)
  80f1f0:	e0bffe17 	ldw	r2,-8(fp)
  80f1f4:	10800117 	ldw	r2,4(r2)
  80f1f8:	18bff136 	bltu	r3,r2,80f1c0 <__alt_data_end+0xff80f1c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f1fc:	0005883a 	mov	r2,zero
}
  80f200:	e037883a 	mov	sp,fp
  80f204:	df000017 	ldw	fp,0(sp)
  80f208:	dec00104 	addi	sp,sp,4
  80f20c:	f800283a 	ret

0080f210 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80f210:	defffa04 	addi	sp,sp,-24
  80f214:	df000515 	stw	fp,20(sp)
  80f218:	df000504 	addi	fp,sp,20
  80f21c:	e13ffd15 	stw	r4,-12(fp)
  80f220:	e17ffe15 	stw	r5,-8(fp)
  80f224:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80f228:	00bff9c4 	movi	r2,-25
  80f22c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80f230:	e0bffe17 	ldw	r2,-8(fp)
  80f234:	10da8060 	cmpeqi	r3,r2,27137
  80f238:	1800031e 	bne	r3,zero,80f248 <altera_avalon_jtag_uart_ioctl+0x38>
  80f23c:	109a80a0 	cmpeqi	r2,r2,27138
  80f240:	1000181e 	bne	r2,zero,80f2a4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80f244:	00002906 	br	80f2ec <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80f248:	e0bffd17 	ldw	r2,-12(fp)
  80f24c:	10c00117 	ldw	r3,4(r2)
  80f250:	00a00034 	movhi	r2,32768
  80f254:	10bfffc4 	addi	r2,r2,-1
  80f258:	18802126 	beq	r3,r2,80f2e0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80f25c:	e0bfff17 	ldw	r2,-4(fp)
  80f260:	10800017 	ldw	r2,0(r2)
  80f264:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80f268:	e0bffc17 	ldw	r2,-16(fp)
  80f26c:	10800090 	cmplti	r2,r2,2
  80f270:	1000061e 	bne	r2,zero,80f28c <altera_avalon_jtag_uart_ioctl+0x7c>
  80f274:	e0fffc17 	ldw	r3,-16(fp)
  80f278:	00a00034 	movhi	r2,32768
  80f27c:	10bfffc4 	addi	r2,r2,-1
  80f280:	18800226 	beq	r3,r2,80f28c <altera_avalon_jtag_uart_ioctl+0x7c>
  80f284:	e0bffc17 	ldw	r2,-16(fp)
  80f288:	00000206 	br	80f294 <altera_avalon_jtag_uart_ioctl+0x84>
  80f28c:	00a00034 	movhi	r2,32768
  80f290:	10bfff84 	addi	r2,r2,-2
  80f294:	e0fffd17 	ldw	r3,-12(fp)
  80f298:	18800115 	stw	r2,4(r3)
      rc = 0;
  80f29c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f2a0:	00000f06 	br	80f2e0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80f2a4:	e0bffd17 	ldw	r2,-12(fp)
  80f2a8:	10c00117 	ldw	r3,4(r2)
  80f2ac:	00a00034 	movhi	r2,32768
  80f2b0:	10bfffc4 	addi	r2,r2,-1
  80f2b4:	18800c26 	beq	r3,r2,80f2e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80f2b8:	e0bffd17 	ldw	r2,-12(fp)
  80f2bc:	10c00917 	ldw	r3,36(r2)
  80f2c0:	e0bffd17 	ldw	r2,-12(fp)
  80f2c4:	10800117 	ldw	r2,4(r2)
  80f2c8:	1885803a 	cmpltu	r2,r3,r2
  80f2cc:	10c03fcc 	andi	r3,r2,255
  80f2d0:	e0bfff17 	ldw	r2,-4(fp)
  80f2d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80f2d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f2dc:	00000206 	br	80f2e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80f2e0:	0001883a 	nop
  80f2e4:	00000106 	br	80f2ec <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80f2e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80f2ec:	e0bffb17 	ldw	r2,-20(fp)
}
  80f2f0:	e037883a 	mov	sp,fp
  80f2f4:	df000017 	ldw	fp,0(sp)
  80f2f8:	dec00104 	addi	sp,sp,4
  80f2fc:	f800283a 	ret

0080f300 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80f300:	defff304 	addi	sp,sp,-52
  80f304:	dfc00c15 	stw	ra,48(sp)
  80f308:	df000b15 	stw	fp,44(sp)
  80f30c:	df000b04 	addi	fp,sp,44
  80f310:	e13ffc15 	stw	r4,-16(fp)
  80f314:	e17ffd15 	stw	r5,-12(fp)
  80f318:	e1bffe15 	stw	r6,-8(fp)
  80f31c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80f320:	e0bffd17 	ldw	r2,-12(fp)
  80f324:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f328:	00004706 	br	80f448 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80f32c:	e0bffc17 	ldw	r2,-16(fp)
  80f330:	10800a17 	ldw	r2,40(r2)
  80f334:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80f338:	e0bffc17 	ldw	r2,-16(fp)
  80f33c:	10800b17 	ldw	r2,44(r2)
  80f340:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80f344:	e0fff717 	ldw	r3,-36(fp)
  80f348:	e0bff817 	ldw	r2,-32(fp)
  80f34c:	18800536 	bltu	r3,r2,80f364 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80f350:	e0fff717 	ldw	r3,-36(fp)
  80f354:	e0bff817 	ldw	r2,-32(fp)
  80f358:	1885c83a 	sub	r2,r3,r2
  80f35c:	e0bff615 	stw	r2,-40(fp)
  80f360:	00000406 	br	80f374 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80f364:	00c20004 	movi	r3,2048
  80f368:	e0bff817 	ldw	r2,-32(fp)
  80f36c:	1885c83a 	sub	r2,r3,r2
  80f370:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f374:	e0bff617 	ldw	r2,-40(fp)
  80f378:	10001e26 	beq	r2,zero,80f3f4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80f37c:	e0fffe17 	ldw	r3,-8(fp)
  80f380:	e0bff617 	ldw	r2,-40(fp)
  80f384:	1880022e 	bgeu	r3,r2,80f390 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80f388:	e0bffe17 	ldw	r2,-8(fp)
  80f38c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80f390:	e0bffc17 	ldw	r2,-16(fp)
  80f394:	10c00e04 	addi	r3,r2,56
  80f398:	e0bff817 	ldw	r2,-32(fp)
  80f39c:	1885883a 	add	r2,r3,r2
  80f3a0:	e1bff617 	ldw	r6,-40(fp)
  80f3a4:	100b883a 	mov	r5,r2
  80f3a8:	e13ff517 	ldw	r4,-44(fp)
  80f3ac:	08063a40 	call	8063a4 <memcpy>
      ptr   += n;
  80f3b0:	e0fff517 	ldw	r3,-44(fp)
  80f3b4:	e0bff617 	ldw	r2,-40(fp)
  80f3b8:	1885883a 	add	r2,r3,r2
  80f3bc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80f3c0:	e0fffe17 	ldw	r3,-8(fp)
  80f3c4:	e0bff617 	ldw	r2,-40(fp)
  80f3c8:	1885c83a 	sub	r2,r3,r2
  80f3cc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f3d0:	e0fff817 	ldw	r3,-32(fp)
  80f3d4:	e0bff617 	ldw	r2,-40(fp)
  80f3d8:	1885883a 	add	r2,r3,r2
  80f3dc:	10c1ffcc 	andi	r3,r2,2047
  80f3e0:	e0bffc17 	ldw	r2,-16(fp)
  80f3e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80f3e8:	e0bffe17 	ldw	r2,-8(fp)
  80f3ec:	00bfcf16 	blt	zero,r2,80f32c <__alt_data_end+0xff80f32c>
  80f3f0:	00000106 	br	80f3f8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80f3f4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80f3f8:	e0fff517 	ldw	r3,-44(fp)
  80f3fc:	e0bffd17 	ldw	r2,-12(fp)
  80f400:	1880141e 	bne	r3,r2,80f454 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80f404:	e0bfff17 	ldw	r2,-4(fp)
  80f408:	1090000c 	andi	r2,r2,16384
  80f40c:	1000131e 	bne	r2,zero,80f45c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80f410:	0001883a 	nop
  80f414:	e0bffc17 	ldw	r2,-16(fp)
  80f418:	10c00a17 	ldw	r3,40(r2)
  80f41c:	e0bff717 	ldw	r2,-36(fp)
  80f420:	1880051e 	bne	r3,r2,80f438 <altera_avalon_jtag_uart_read+0x138>
  80f424:	e0bffc17 	ldw	r2,-16(fp)
  80f428:	10c00917 	ldw	r3,36(r2)
  80f42c:	e0bffc17 	ldw	r2,-16(fp)
  80f430:	10800117 	ldw	r2,4(r2)
  80f434:	18bff736 	bltu	r3,r2,80f414 <__alt_data_end+0xff80f414>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80f438:	e0bffc17 	ldw	r2,-16(fp)
  80f43c:	10c00a17 	ldw	r3,40(r2)
  80f440:	e0bff717 	ldw	r2,-36(fp)
  80f444:	18800726 	beq	r3,r2,80f464 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f448:	e0bffe17 	ldw	r2,-8(fp)
  80f44c:	00bfb716 	blt	zero,r2,80f32c <__alt_data_end+0xff80f32c>
  80f450:	00000506 	br	80f468 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80f454:	0001883a 	nop
  80f458:	00000306 	br	80f468 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80f45c:	0001883a 	nop
  80f460:	00000106 	br	80f468 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80f464:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80f468:	e0fff517 	ldw	r3,-44(fp)
  80f46c:	e0bffd17 	ldw	r2,-12(fp)
  80f470:	18801826 	beq	r3,r2,80f4d4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f474:	0005303a 	rdctl	r2,status
  80f478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f47c:	e0fffb17 	ldw	r3,-20(fp)
  80f480:	00bfff84 	movi	r2,-2
  80f484:	1884703a 	and	r2,r3,r2
  80f488:	1001703a 	wrctl	status,r2
  
  return context;
  80f48c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80f490:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f494:	e0bffc17 	ldw	r2,-16(fp)
  80f498:	10800817 	ldw	r2,32(r2)
  80f49c:	10c00054 	ori	r3,r2,1
  80f4a0:	e0bffc17 	ldw	r2,-16(fp)
  80f4a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f4a8:	e0bffc17 	ldw	r2,-16(fp)
  80f4ac:	10800017 	ldw	r2,0(r2)
  80f4b0:	10800104 	addi	r2,r2,4
  80f4b4:	1007883a 	mov	r3,r2
  80f4b8:	e0bffc17 	ldw	r2,-16(fp)
  80f4bc:	10800817 	ldw	r2,32(r2)
  80f4c0:	18800035 	stwio	r2,0(r3)
  80f4c4:	e0bffa17 	ldw	r2,-24(fp)
  80f4c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f4cc:	e0bff917 	ldw	r2,-28(fp)
  80f4d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80f4d4:	e0fff517 	ldw	r3,-44(fp)
  80f4d8:	e0bffd17 	ldw	r2,-12(fp)
  80f4dc:	18800426 	beq	r3,r2,80f4f0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80f4e0:	e0fff517 	ldw	r3,-44(fp)
  80f4e4:	e0bffd17 	ldw	r2,-12(fp)
  80f4e8:	1885c83a 	sub	r2,r3,r2
  80f4ec:	00000606 	br	80f508 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80f4f0:	e0bfff17 	ldw	r2,-4(fp)
  80f4f4:	1090000c 	andi	r2,r2,16384
  80f4f8:	10000226 	beq	r2,zero,80f504 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80f4fc:	00bffd44 	movi	r2,-11
  80f500:	00000106 	br	80f508 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80f504:	00bffec4 	movi	r2,-5
}
  80f508:	e037883a 	mov	sp,fp
  80f50c:	dfc00117 	ldw	ra,4(sp)
  80f510:	df000017 	ldw	fp,0(sp)
  80f514:	dec00204 	addi	sp,sp,8
  80f518:	f800283a 	ret

0080f51c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80f51c:	defff304 	addi	sp,sp,-52
  80f520:	dfc00c15 	stw	ra,48(sp)
  80f524:	df000b15 	stw	fp,44(sp)
  80f528:	df000b04 	addi	fp,sp,44
  80f52c:	e13ffc15 	stw	r4,-16(fp)
  80f530:	e17ffd15 	stw	r5,-12(fp)
  80f534:	e1bffe15 	stw	r6,-8(fp)
  80f538:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80f53c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80f540:	e0bffd17 	ldw	r2,-12(fp)
  80f544:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f548:	00003706 	br	80f628 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80f54c:	e0bffc17 	ldw	r2,-16(fp)
  80f550:	10800c17 	ldw	r2,48(r2)
  80f554:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80f558:	e0bffc17 	ldw	r2,-16(fp)
  80f55c:	10800d17 	ldw	r2,52(r2)
  80f560:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80f564:	e0fff917 	ldw	r3,-28(fp)
  80f568:	e0bff517 	ldw	r2,-44(fp)
  80f56c:	1880062e 	bgeu	r3,r2,80f588 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80f570:	e0fff517 	ldw	r3,-44(fp)
  80f574:	e0bff917 	ldw	r2,-28(fp)
  80f578:	1885c83a 	sub	r2,r3,r2
  80f57c:	10bfffc4 	addi	r2,r2,-1
  80f580:	e0bff615 	stw	r2,-40(fp)
  80f584:	00000b06 	br	80f5b4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80f588:	e0bff517 	ldw	r2,-44(fp)
  80f58c:	10000526 	beq	r2,zero,80f5a4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80f590:	00c20004 	movi	r3,2048
  80f594:	e0bff917 	ldw	r2,-28(fp)
  80f598:	1885c83a 	sub	r2,r3,r2
  80f59c:	e0bff615 	stw	r2,-40(fp)
  80f5a0:	00000406 	br	80f5b4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80f5a4:	00c1ffc4 	movi	r3,2047
  80f5a8:	e0bff917 	ldw	r2,-28(fp)
  80f5ac:	1885c83a 	sub	r2,r3,r2
  80f5b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f5b4:	e0bff617 	ldw	r2,-40(fp)
  80f5b8:	10001e26 	beq	r2,zero,80f634 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80f5bc:	e0fffe17 	ldw	r3,-8(fp)
  80f5c0:	e0bff617 	ldw	r2,-40(fp)
  80f5c4:	1880022e 	bgeu	r3,r2,80f5d0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80f5c8:	e0bffe17 	ldw	r2,-8(fp)
  80f5cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80f5d0:	e0bffc17 	ldw	r2,-16(fp)
  80f5d4:	10c20e04 	addi	r3,r2,2104
  80f5d8:	e0bff917 	ldw	r2,-28(fp)
  80f5dc:	1885883a 	add	r2,r3,r2
  80f5e0:	e1bff617 	ldw	r6,-40(fp)
  80f5e4:	e17ffd17 	ldw	r5,-12(fp)
  80f5e8:	1009883a 	mov	r4,r2
  80f5ec:	08063a40 	call	8063a4 <memcpy>
      ptr   += n;
  80f5f0:	e0fffd17 	ldw	r3,-12(fp)
  80f5f4:	e0bff617 	ldw	r2,-40(fp)
  80f5f8:	1885883a 	add	r2,r3,r2
  80f5fc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80f600:	e0fffe17 	ldw	r3,-8(fp)
  80f604:	e0bff617 	ldw	r2,-40(fp)
  80f608:	1885c83a 	sub	r2,r3,r2
  80f60c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f610:	e0fff917 	ldw	r3,-28(fp)
  80f614:	e0bff617 	ldw	r2,-40(fp)
  80f618:	1885883a 	add	r2,r3,r2
  80f61c:	10c1ffcc 	andi	r3,r2,2047
  80f620:	e0bffc17 	ldw	r2,-16(fp)
  80f624:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f628:	e0bffe17 	ldw	r2,-8(fp)
  80f62c:	00bfc716 	blt	zero,r2,80f54c <__alt_data_end+0xff80f54c>
  80f630:	00000106 	br	80f638 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80f634:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f638:	0005303a 	rdctl	r2,status
  80f63c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f640:	e0fffb17 	ldw	r3,-20(fp)
  80f644:	00bfff84 	movi	r2,-2
  80f648:	1884703a 	and	r2,r3,r2
  80f64c:	1001703a 	wrctl	status,r2
  
  return context;
  80f650:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80f654:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f658:	e0bffc17 	ldw	r2,-16(fp)
  80f65c:	10800817 	ldw	r2,32(r2)
  80f660:	10c00094 	ori	r3,r2,2
  80f664:	e0bffc17 	ldw	r2,-16(fp)
  80f668:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f66c:	e0bffc17 	ldw	r2,-16(fp)
  80f670:	10800017 	ldw	r2,0(r2)
  80f674:	10800104 	addi	r2,r2,4
  80f678:	1007883a 	mov	r3,r2
  80f67c:	e0bffc17 	ldw	r2,-16(fp)
  80f680:	10800817 	ldw	r2,32(r2)
  80f684:	18800035 	stwio	r2,0(r3)
  80f688:	e0bffa17 	ldw	r2,-24(fp)
  80f68c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f690:	e0bff817 	ldw	r2,-32(fp)
  80f694:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80f698:	e0bffe17 	ldw	r2,-8(fp)
  80f69c:	0080100e 	bge	zero,r2,80f6e0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80f6a0:	e0bfff17 	ldw	r2,-4(fp)
  80f6a4:	1090000c 	andi	r2,r2,16384
  80f6a8:	1000101e 	bne	r2,zero,80f6ec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80f6ac:	0001883a 	nop
  80f6b0:	e0bffc17 	ldw	r2,-16(fp)
  80f6b4:	10c00d17 	ldw	r3,52(r2)
  80f6b8:	e0bff517 	ldw	r2,-44(fp)
  80f6bc:	1880051e 	bne	r3,r2,80f6d4 <altera_avalon_jtag_uart_write+0x1b8>
  80f6c0:	e0bffc17 	ldw	r2,-16(fp)
  80f6c4:	10c00917 	ldw	r3,36(r2)
  80f6c8:	e0bffc17 	ldw	r2,-16(fp)
  80f6cc:	10800117 	ldw	r2,4(r2)
  80f6d0:	18bff736 	bltu	r3,r2,80f6b0 <__alt_data_end+0xff80f6b0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80f6d4:	e0bffc17 	ldw	r2,-16(fp)
  80f6d8:	10800917 	ldw	r2,36(r2)
  80f6dc:	1000051e 	bne	r2,zero,80f6f4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80f6e0:	e0bffe17 	ldw	r2,-8(fp)
  80f6e4:	00bfd016 	blt	zero,r2,80f628 <__alt_data_end+0xff80f628>
  80f6e8:	00000306 	br	80f6f8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80f6ec:	0001883a 	nop
  80f6f0:	00000106 	br	80f6f8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80f6f4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80f6f8:	e0fffd17 	ldw	r3,-12(fp)
  80f6fc:	e0bff717 	ldw	r2,-36(fp)
  80f700:	18800426 	beq	r3,r2,80f714 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80f704:	e0fffd17 	ldw	r3,-12(fp)
  80f708:	e0bff717 	ldw	r2,-36(fp)
  80f70c:	1885c83a 	sub	r2,r3,r2
  80f710:	00000606 	br	80f72c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80f714:	e0bfff17 	ldw	r2,-4(fp)
  80f718:	1090000c 	andi	r2,r2,16384
  80f71c:	10000226 	beq	r2,zero,80f728 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80f720:	00bffd44 	movi	r2,-11
  80f724:	00000106 	br	80f72c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80f728:	00bffec4 	movi	r2,-5
}
  80f72c:	e037883a 	mov	sp,fp
  80f730:	dfc00117 	ldw	ra,4(sp)
  80f734:	df000017 	ldw	fp,0(sp)
  80f738:	dec00204 	addi	sp,sp,8
  80f73c:	f800283a 	ret

0080f740 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80f740:	defffa04 	addi	sp,sp,-24
  80f744:	dfc00515 	stw	ra,20(sp)
  80f748:	df000415 	stw	fp,16(sp)
  80f74c:	df000404 	addi	fp,sp,16
  80f750:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80f754:	0007883a 	mov	r3,zero
  80f758:	e0bfff17 	ldw	r2,-4(fp)
  80f75c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80f760:	e0bfff17 	ldw	r2,-4(fp)
  80f764:	10800104 	addi	r2,r2,4
  80f768:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f76c:	0005303a 	rdctl	r2,status
  80f770:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f774:	e0fffd17 	ldw	r3,-12(fp)
  80f778:	00bfff84 	movi	r2,-2
  80f77c:	1884703a 	and	r2,r3,r2
  80f780:	1001703a 	wrctl	status,r2
  
  return context;
  80f784:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80f788:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80f78c:	081044c0 	call	81044c <alt_tick>
  80f790:	e0bffc17 	ldw	r2,-16(fp)
  80f794:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f798:	e0bffe17 	ldw	r2,-8(fp)
  80f79c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80f7a0:	0001883a 	nop
  80f7a4:	e037883a 	mov	sp,fp
  80f7a8:	dfc00117 	ldw	ra,4(sp)
  80f7ac:	df000017 	ldw	fp,0(sp)
  80f7b0:	dec00204 	addi	sp,sp,8
  80f7b4:	f800283a 	ret

0080f7b8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80f7b8:	defff804 	addi	sp,sp,-32
  80f7bc:	dfc00715 	stw	ra,28(sp)
  80f7c0:	df000615 	stw	fp,24(sp)
  80f7c4:	df000604 	addi	fp,sp,24
  80f7c8:	e13ffc15 	stw	r4,-16(fp)
  80f7cc:	e17ffd15 	stw	r5,-12(fp)
  80f7d0:	e1bffe15 	stw	r6,-8(fp)
  80f7d4:	e1ffff15 	stw	r7,-4(fp)
  80f7d8:	e0bfff17 	ldw	r2,-4(fp)
  80f7dc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80f7e0:	d0a71517 	ldw	r2,-25516(gp)
  80f7e4:	1000021e 	bne	r2,zero,80f7f0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80f7e8:	e0bffb17 	ldw	r2,-20(fp)
  80f7ec:	d0a71515 	stw	r2,-25516(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80f7f0:	e0bffc17 	ldw	r2,-16(fp)
  80f7f4:	10800104 	addi	r2,r2,4
  80f7f8:	00c001c4 	movi	r3,7
  80f7fc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80f800:	d8000015 	stw	zero,0(sp)
  80f804:	e1fffc17 	ldw	r7,-16(fp)
  80f808:	01802074 	movhi	r6,129
  80f80c:	31bdd004 	addi	r6,r6,-2240
  80f810:	e17ffe17 	ldw	r5,-8(fp)
  80f814:	e13ffd17 	ldw	r4,-12(fp)
  80f818:	080fd2c0 	call	80fd2c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80f81c:	0001883a 	nop
  80f820:	e037883a 	mov	sp,fp
  80f824:	dfc00117 	ldw	ra,4(sp)
  80f828:	df000017 	ldw	fp,0(sp)
  80f82c:	dec00204 	addi	sp,sp,8
  80f830:	f800283a 	ret

0080f834 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f834:	defff504 	addi	sp,sp,-44
  80f838:	df000a15 	stw	fp,40(sp)
  80f83c:	df000a04 	addi	fp,sp,40
  80f840:	e13ffc15 	stw	r4,-16(fp)
  80f844:	e17ffd15 	stw	r5,-12(fp)
  80f848:	e1bffe15 	stw	r6,-8(fp)
  80f84c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f850:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f854:	d0a71517 	ldw	r2,-25516(gp)
  
  if (alt_ticks_per_second ())
  80f858:	10003c26 	beq	r2,zero,80f94c <alt_alarm_start+0x118>
  {
    if (alarm)
  80f85c:	e0bffc17 	ldw	r2,-16(fp)
  80f860:	10003826 	beq	r2,zero,80f944 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80f864:	e0bffc17 	ldw	r2,-16(fp)
  80f868:	e0fffe17 	ldw	r3,-8(fp)
  80f86c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80f870:	e0bffc17 	ldw	r2,-16(fp)
  80f874:	e0ffff17 	ldw	r3,-4(fp)
  80f878:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f87c:	0005303a 	rdctl	r2,status
  80f880:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f884:	e0fff917 	ldw	r3,-28(fp)
  80f888:	00bfff84 	movi	r2,-2
  80f88c:	1884703a 	and	r2,r3,r2
  80f890:	1001703a 	wrctl	status,r2
  
  return context;
  80f894:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80f898:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f89c:	d0a71617 	ldw	r2,-25512(gp)
      
      current_nticks = alt_nticks();
  80f8a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f8a4:	e0fffd17 	ldw	r3,-12(fp)
  80f8a8:	e0bff617 	ldw	r2,-40(fp)
  80f8ac:	1885883a 	add	r2,r3,r2
  80f8b0:	10c00044 	addi	r3,r2,1
  80f8b4:	e0bffc17 	ldw	r2,-16(fp)
  80f8b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f8bc:	e0bffc17 	ldw	r2,-16(fp)
  80f8c0:	10c00217 	ldw	r3,8(r2)
  80f8c4:	e0bff617 	ldw	r2,-40(fp)
  80f8c8:	1880042e 	bgeu	r3,r2,80f8dc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80f8cc:	e0bffc17 	ldw	r2,-16(fp)
  80f8d0:	00c00044 	movi	r3,1
  80f8d4:	10c00405 	stb	r3,16(r2)
  80f8d8:	00000206 	br	80f8e4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80f8dc:	e0bffc17 	ldw	r2,-16(fp)
  80f8e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f8e4:	e0bffc17 	ldw	r2,-16(fp)
  80f8e8:	d0e01204 	addi	r3,gp,-32696
  80f8ec:	e0fffa15 	stw	r3,-24(fp)
  80f8f0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f8f4:	e0bffb17 	ldw	r2,-20(fp)
  80f8f8:	e0fffa17 	ldw	r3,-24(fp)
  80f8fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f900:	e0bffa17 	ldw	r2,-24(fp)
  80f904:	10c00017 	ldw	r3,0(r2)
  80f908:	e0bffb17 	ldw	r2,-20(fp)
  80f90c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f910:	e0bffa17 	ldw	r2,-24(fp)
  80f914:	10800017 	ldw	r2,0(r2)
  80f918:	e0fffb17 	ldw	r3,-20(fp)
  80f91c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f920:	e0bffa17 	ldw	r2,-24(fp)
  80f924:	e0fffb17 	ldw	r3,-20(fp)
  80f928:	10c00015 	stw	r3,0(r2)
  80f92c:	e0bff817 	ldw	r2,-32(fp)
  80f930:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f934:	e0bff717 	ldw	r2,-36(fp)
  80f938:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80f93c:	0005883a 	mov	r2,zero
  80f940:	00000306 	br	80f950 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80f944:	00bffa84 	movi	r2,-22
  80f948:	00000106 	br	80f950 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80f94c:	00bfde84 	movi	r2,-134
  }
}
  80f950:	e037883a 	mov	sp,fp
  80f954:	df000017 	ldw	fp,0(sp)
  80f958:	dec00104 	addi	sp,sp,4
  80f95c:	f800283a 	ret

0080f960 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80f960:	defffe04 	addi	sp,sp,-8
  80f964:	df000115 	stw	fp,4(sp)
  80f968:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f96c:	e03fff15 	stw	zero,-4(fp)
  80f970:	00000506 	br	80f988 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80f974:	e0bfff17 	ldw	r2,-4(fp)
  80f978:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f97c:	e0bfff17 	ldw	r2,-4(fp)
  80f980:	10800804 	addi	r2,r2,32
  80f984:	e0bfff15 	stw	r2,-4(fp)
  80f988:	e0bfff17 	ldw	r2,-4(fp)
  80f98c:	10820030 	cmpltui	r2,r2,2048
  80f990:	103ff81e 	bne	r2,zero,80f974 <__alt_data_end+0xff80f974>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80f994:	0001883a 	nop
  80f998:	e037883a 	mov	sp,fp
  80f99c:	df000017 	ldw	fp,0(sp)
  80f9a0:	dec00104 	addi	sp,sp,4
  80f9a4:	f800283a 	ret

0080f9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f9a8:	defffe04 	addi	sp,sp,-8
  80f9ac:	dfc00115 	stw	ra,4(sp)
  80f9b0:	df000015 	stw	fp,0(sp)
  80f9b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f9b8:	d0a00b17 	ldw	r2,-32724(gp)
  80f9bc:	10000326 	beq	r2,zero,80f9cc <alt_get_errno+0x24>
  80f9c0:	d0a00b17 	ldw	r2,-32724(gp)
  80f9c4:	103ee83a 	callr	r2
  80f9c8:	00000106 	br	80f9d0 <alt_get_errno+0x28>
  80f9cc:	d0a71004 	addi	r2,gp,-25536
}
  80f9d0:	e037883a 	mov	sp,fp
  80f9d4:	dfc00117 	ldw	ra,4(sp)
  80f9d8:	df000017 	ldw	fp,0(sp)
  80f9dc:	dec00204 	addi	sp,sp,8
  80f9e0:	f800283a 	ret

0080f9e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80f9e4:	defffa04 	addi	sp,sp,-24
  80f9e8:	dfc00515 	stw	ra,20(sp)
  80f9ec:	df000415 	stw	fp,16(sp)
  80f9f0:	df000404 	addi	fp,sp,16
  80f9f4:	e13ffe15 	stw	r4,-8(fp)
  80f9f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80f9fc:	e0bffe17 	ldw	r2,-8(fp)
  80fa00:	10000326 	beq	r2,zero,80fa10 <alt_dev_llist_insert+0x2c>
  80fa04:	e0bffe17 	ldw	r2,-8(fp)
  80fa08:	10800217 	ldw	r2,8(r2)
  80fa0c:	1000061e 	bne	r2,zero,80fa28 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80fa10:	080f9a80 	call	80f9a8 <alt_get_errno>
  80fa14:	1007883a 	mov	r3,r2
  80fa18:	00800584 	movi	r2,22
  80fa1c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80fa20:	00bffa84 	movi	r2,-22
  80fa24:	00001306 	br	80fa74 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80fa28:	e0bffe17 	ldw	r2,-8(fp)
  80fa2c:	e0ffff17 	ldw	r3,-4(fp)
  80fa30:	e0fffc15 	stw	r3,-16(fp)
  80fa34:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80fa38:	e0bffd17 	ldw	r2,-12(fp)
  80fa3c:	e0fffc17 	ldw	r3,-16(fp)
  80fa40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80fa44:	e0bffc17 	ldw	r2,-16(fp)
  80fa48:	10c00017 	ldw	r3,0(r2)
  80fa4c:	e0bffd17 	ldw	r2,-12(fp)
  80fa50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80fa54:	e0bffc17 	ldw	r2,-16(fp)
  80fa58:	10800017 	ldw	r2,0(r2)
  80fa5c:	e0fffd17 	ldw	r3,-12(fp)
  80fa60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80fa64:	e0bffc17 	ldw	r2,-16(fp)
  80fa68:	e0fffd17 	ldw	r3,-12(fp)
  80fa6c:	10c00015 	stw	r3,0(r2)

  return 0;  
  80fa70:	0005883a 	mov	r2,zero
}
  80fa74:	e037883a 	mov	sp,fp
  80fa78:	dfc00117 	ldw	ra,4(sp)
  80fa7c:	df000017 	ldw	fp,0(sp)
  80fa80:	dec00204 	addi	sp,sp,8
  80fa84:	f800283a 	ret

0080fa88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fa88:	defffe04 	addi	sp,sp,-8
  80fa8c:	dfc00115 	stw	ra,4(sp)
  80fa90:	df000015 	stw	fp,0(sp)
  80fa94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fa98:	d0a00b17 	ldw	r2,-32724(gp)
  80fa9c:	10000326 	beq	r2,zero,80faac <alt_get_errno+0x24>
  80faa0:	d0a00b17 	ldw	r2,-32724(gp)
  80faa4:	103ee83a 	callr	r2
  80faa8:	00000106 	br	80fab0 <alt_get_errno+0x28>
  80faac:	d0a71004 	addi	r2,gp,-25536
}
  80fab0:	e037883a 	mov	sp,fp
  80fab4:	dfc00117 	ldw	ra,4(sp)
  80fab8:	df000017 	ldw	fp,0(sp)
  80fabc:	dec00204 	addi	sp,sp,8
  80fac0:	f800283a 	ret

0080fac4 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
  80fac4:	defffc04 	addi	sp,sp,-16
  80fac8:	dfc00315 	stw	ra,12(sp)
  80facc:	df000215 	stw	fp,8(sp)
  80fad0:	df000204 	addi	fp,sp,8
  80fad4:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
  80fad8:	d1600d04 	addi	r5,gp,-32716
  80fadc:	e13fff17 	ldw	r4,-4(fp)
  80fae0:	080fc680 	call	80fc68 <alt_find_dev>
  80fae4:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
  80fae8:	e0bffe17 	ldw	r2,-8(fp)
  80faec:	1000041e 	bne	r2,zero,80fb00 <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
  80faf0:	080fa880 	call	80fa88 <alt_get_errno>
  80faf4:	1007883a 	mov	r3,r2
  80faf8:	008004c4 	movi	r2,19
  80fafc:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80fb00:	e0bffe17 	ldw	r2,-8(fp)
}
  80fb04:	e037883a 	mov	sp,fp
  80fb08:	dfc00117 	ldw	ra,4(sp)
  80fb0c:	df000017 	ldw	fp,0(sp)
  80fb10:	dec00204 	addi	sp,sp,8
  80fb14:	f800283a 	ret

0080fb18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fb18:	defffe04 	addi	sp,sp,-8
  80fb1c:	dfc00115 	stw	ra,4(sp)
  80fb20:	df000015 	stw	fp,0(sp)
  80fb24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fb28:	d0a00b17 	ldw	r2,-32724(gp)
  80fb2c:	10000326 	beq	r2,zero,80fb3c <alt_get_errno+0x24>
  80fb30:	d0a00b17 	ldw	r2,-32724(gp)
  80fb34:	103ee83a 	callr	r2
  80fb38:	00000106 	br	80fb40 <alt_get_errno+0x28>
  80fb3c:	d0a71004 	addi	r2,gp,-25536
}
  80fb40:	e037883a 	mov	sp,fp
  80fb44:	dfc00117 	ldw	ra,4(sp)
  80fb48:	df000017 	ldw	fp,0(sp)
  80fb4c:	dec00204 	addi	sp,sp,8
  80fb50:	f800283a 	ret

0080fb54 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
  80fb54:	defffc04 	addi	sp,sp,-16
  80fb58:	dfc00315 	stw	ra,12(sp)
  80fb5c:	df000215 	stw	fp,8(sp)
  80fb60:	df000204 	addi	fp,sp,8
  80fb64:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
  80fb68:	d1600f04 	addi	r5,gp,-32708
  80fb6c:	e13fff17 	ldw	r4,-4(fp)
  80fb70:	080fc680 	call	80fc68 <alt_find_dev>
  80fb74:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
  80fb78:	e0bffe17 	ldw	r2,-8(fp)
  80fb7c:	1000041e 	bne	r2,zero,80fb90 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
  80fb80:	080fb180 	call	80fb18 <alt_get_errno>
  80fb84:	1007883a 	mov	r3,r2
  80fb88:	008004c4 	movi	r2,19
  80fb8c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80fb90:	e0bffe17 	ldw	r2,-8(fp)
}
  80fb94:	e037883a 	mov	sp,fp
  80fb98:	dfc00117 	ldw	ra,4(sp)
  80fb9c:	df000017 	ldw	fp,0(sp)
  80fba0:	dec00204 	addi	sp,sp,8
  80fba4:	f800283a 	ret

0080fba8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80fba8:	defffd04 	addi	sp,sp,-12
  80fbac:	dfc00215 	stw	ra,8(sp)
  80fbb0:	df000115 	stw	fp,4(sp)
  80fbb4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80fbb8:	00802074 	movhi	r2,129
  80fbbc:	10830004 	addi	r2,r2,3072
  80fbc0:	e0bfff15 	stw	r2,-4(fp)
  80fbc4:	00000606 	br	80fbe0 <_do_ctors+0x38>
        (*ctor) (); 
  80fbc8:	e0bfff17 	ldw	r2,-4(fp)
  80fbcc:	10800017 	ldw	r2,0(r2)
  80fbd0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80fbd4:	e0bfff17 	ldw	r2,-4(fp)
  80fbd8:	10bfff04 	addi	r2,r2,-4
  80fbdc:	e0bfff15 	stw	r2,-4(fp)
  80fbe0:	e0ffff17 	ldw	r3,-4(fp)
  80fbe4:	00802074 	movhi	r2,129
  80fbe8:	10830104 	addi	r2,r2,3076
  80fbec:	18bff62e 	bgeu	r3,r2,80fbc8 <__alt_data_end+0xff80fbc8>
        (*ctor) (); 
}
  80fbf0:	0001883a 	nop
  80fbf4:	e037883a 	mov	sp,fp
  80fbf8:	dfc00117 	ldw	ra,4(sp)
  80fbfc:	df000017 	ldw	fp,0(sp)
  80fc00:	dec00204 	addi	sp,sp,8
  80fc04:	f800283a 	ret

0080fc08 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80fc08:	defffd04 	addi	sp,sp,-12
  80fc0c:	dfc00215 	stw	ra,8(sp)
  80fc10:	df000115 	stw	fp,4(sp)
  80fc14:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80fc18:	00802074 	movhi	r2,129
  80fc1c:	10830004 	addi	r2,r2,3072
  80fc20:	e0bfff15 	stw	r2,-4(fp)
  80fc24:	00000606 	br	80fc40 <_do_dtors+0x38>
        (*dtor) (); 
  80fc28:	e0bfff17 	ldw	r2,-4(fp)
  80fc2c:	10800017 	ldw	r2,0(r2)
  80fc30:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80fc34:	e0bfff17 	ldw	r2,-4(fp)
  80fc38:	10bfff04 	addi	r2,r2,-4
  80fc3c:	e0bfff15 	stw	r2,-4(fp)
  80fc40:	e0ffff17 	ldw	r3,-4(fp)
  80fc44:	00802074 	movhi	r2,129
  80fc48:	10830104 	addi	r2,r2,3076
  80fc4c:	18bff62e 	bgeu	r3,r2,80fc28 <__alt_data_end+0xff80fc28>
        (*dtor) (); 
}
  80fc50:	0001883a 	nop
  80fc54:	e037883a 	mov	sp,fp
  80fc58:	dfc00117 	ldw	ra,4(sp)
  80fc5c:	df000017 	ldw	fp,0(sp)
  80fc60:	dec00204 	addi	sp,sp,8
  80fc64:	f800283a 	ret

0080fc68 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80fc68:	defffa04 	addi	sp,sp,-24
  80fc6c:	dfc00515 	stw	ra,20(sp)
  80fc70:	df000415 	stw	fp,16(sp)
  80fc74:	df000404 	addi	fp,sp,16
  80fc78:	e13ffe15 	stw	r4,-8(fp)
  80fc7c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80fc80:	e0bfff17 	ldw	r2,-4(fp)
  80fc84:	10800017 	ldw	r2,0(r2)
  80fc88:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80fc8c:	e13ffe17 	ldw	r4,-8(fp)
  80fc90:	08008f00 	call	8008f0 <strlen>
  80fc94:	10800044 	addi	r2,r2,1
  80fc98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80fc9c:	00000d06 	br	80fcd4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80fca0:	e0bffc17 	ldw	r2,-16(fp)
  80fca4:	10800217 	ldw	r2,8(r2)
  80fca8:	e0fffd17 	ldw	r3,-12(fp)
  80fcac:	180d883a 	mov	r6,r3
  80fcb0:	e17ffe17 	ldw	r5,-8(fp)
  80fcb4:	1009883a 	mov	r4,r2
  80fcb8:	08108bc0 	call	8108bc <memcmp>
  80fcbc:	1000021e 	bne	r2,zero,80fcc8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80fcc0:	e0bffc17 	ldw	r2,-16(fp)
  80fcc4:	00000706 	br	80fce4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80fcc8:	e0bffc17 	ldw	r2,-16(fp)
  80fccc:	10800017 	ldw	r2,0(r2)
  80fcd0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80fcd4:	e0fffc17 	ldw	r3,-16(fp)
  80fcd8:	e0bfff17 	ldw	r2,-4(fp)
  80fcdc:	18bff01e 	bne	r3,r2,80fca0 <__alt_data_end+0xff80fca0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80fce0:	0005883a 	mov	r2,zero
}
  80fce4:	e037883a 	mov	sp,fp
  80fce8:	dfc00117 	ldw	ra,4(sp)
  80fcec:	df000017 	ldw	fp,0(sp)
  80fcf0:	dec00204 	addi	sp,sp,8
  80fcf4:	f800283a 	ret

0080fcf8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80fcf8:	defffe04 	addi	sp,sp,-8
  80fcfc:	dfc00115 	stw	ra,4(sp)
  80fd00:	df000015 	stw	fp,0(sp)
  80fd04:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80fd08:	01440004 	movi	r5,4096
  80fd0c:	0009883a 	mov	r4,zero
  80fd10:	08107440 	call	810744 <alt_icache_flush>
#endif
}
  80fd14:	0001883a 	nop
  80fd18:	e037883a 	mov	sp,fp
  80fd1c:	dfc00117 	ldw	ra,4(sp)
  80fd20:	df000017 	ldw	fp,0(sp)
  80fd24:	dec00204 	addi	sp,sp,8
  80fd28:	f800283a 	ret

0080fd2c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80fd2c:	defff904 	addi	sp,sp,-28
  80fd30:	dfc00615 	stw	ra,24(sp)
  80fd34:	df000515 	stw	fp,20(sp)
  80fd38:	df000504 	addi	fp,sp,20
  80fd3c:	e13ffc15 	stw	r4,-16(fp)
  80fd40:	e17ffd15 	stw	r5,-12(fp)
  80fd44:	e1bffe15 	stw	r6,-8(fp)
  80fd48:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80fd4c:	e0800217 	ldw	r2,8(fp)
  80fd50:	d8800015 	stw	r2,0(sp)
  80fd54:	e1ffff17 	ldw	r7,-4(fp)
  80fd58:	e1bffe17 	ldw	r6,-8(fp)
  80fd5c:	e17ffd17 	ldw	r5,-12(fp)
  80fd60:	e13ffc17 	ldw	r4,-16(fp)
  80fd64:	080fedc0 	call	80fedc <alt_iic_isr_register>
}  
  80fd68:	e037883a 	mov	sp,fp
  80fd6c:	dfc00117 	ldw	ra,4(sp)
  80fd70:	df000017 	ldw	fp,0(sp)
  80fd74:	dec00204 	addi	sp,sp,8
  80fd78:	f800283a 	ret

0080fd7c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80fd7c:	defff904 	addi	sp,sp,-28
  80fd80:	df000615 	stw	fp,24(sp)
  80fd84:	df000604 	addi	fp,sp,24
  80fd88:	e13ffe15 	stw	r4,-8(fp)
  80fd8c:	e17fff15 	stw	r5,-4(fp)
  80fd90:	e0bfff17 	ldw	r2,-4(fp)
  80fd94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fd98:	0005303a 	rdctl	r2,status
  80fd9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fda0:	e0fffb17 	ldw	r3,-20(fp)
  80fda4:	00bfff84 	movi	r2,-2
  80fda8:	1884703a 	and	r2,r3,r2
  80fdac:	1001703a 	wrctl	status,r2
  
  return context;
  80fdb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fdb4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80fdb8:	00c00044 	movi	r3,1
  80fdbc:	e0bffa17 	ldw	r2,-24(fp)
  80fdc0:	1884983a 	sll	r2,r3,r2
  80fdc4:	1007883a 	mov	r3,r2
  80fdc8:	d0a71417 	ldw	r2,-25520(gp)
  80fdcc:	1884b03a 	or	r2,r3,r2
  80fdd0:	d0a71415 	stw	r2,-25520(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fdd4:	d0a71417 	ldw	r2,-25520(gp)
  80fdd8:	100170fa 	wrctl	ienable,r2
  80fddc:	e0bffc17 	ldw	r2,-16(fp)
  80fde0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fde4:	e0bffd17 	ldw	r2,-12(fp)
  80fde8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fdec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80fdf0:	0001883a 	nop
}
  80fdf4:	e037883a 	mov	sp,fp
  80fdf8:	df000017 	ldw	fp,0(sp)
  80fdfc:	dec00104 	addi	sp,sp,4
  80fe00:	f800283a 	ret

0080fe04 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80fe04:	defff904 	addi	sp,sp,-28
  80fe08:	df000615 	stw	fp,24(sp)
  80fe0c:	df000604 	addi	fp,sp,24
  80fe10:	e13ffe15 	stw	r4,-8(fp)
  80fe14:	e17fff15 	stw	r5,-4(fp)
  80fe18:	e0bfff17 	ldw	r2,-4(fp)
  80fe1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe20:	0005303a 	rdctl	r2,status
  80fe24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe28:	e0fffb17 	ldw	r3,-20(fp)
  80fe2c:	00bfff84 	movi	r2,-2
  80fe30:	1884703a 	and	r2,r3,r2
  80fe34:	1001703a 	wrctl	status,r2
  
  return context;
  80fe38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fe3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80fe40:	00c00044 	movi	r3,1
  80fe44:	e0bffa17 	ldw	r2,-24(fp)
  80fe48:	1884983a 	sll	r2,r3,r2
  80fe4c:	0084303a 	nor	r2,zero,r2
  80fe50:	1007883a 	mov	r3,r2
  80fe54:	d0a71417 	ldw	r2,-25520(gp)
  80fe58:	1884703a 	and	r2,r3,r2
  80fe5c:	d0a71415 	stw	r2,-25520(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fe60:	d0a71417 	ldw	r2,-25520(gp)
  80fe64:	100170fa 	wrctl	ienable,r2
  80fe68:	e0bffc17 	ldw	r2,-16(fp)
  80fe6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fe70:	e0bffd17 	ldw	r2,-12(fp)
  80fe74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fe78:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80fe7c:	0001883a 	nop
}
  80fe80:	e037883a 	mov	sp,fp
  80fe84:	df000017 	ldw	fp,0(sp)
  80fe88:	dec00104 	addi	sp,sp,4
  80fe8c:	f800283a 	ret

0080fe90 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80fe90:	defffc04 	addi	sp,sp,-16
  80fe94:	df000315 	stw	fp,12(sp)
  80fe98:	df000304 	addi	fp,sp,12
  80fe9c:	e13ffe15 	stw	r4,-8(fp)
  80fea0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80fea4:	000530fa 	rdctl	r2,ienable
  80fea8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80feac:	00c00044 	movi	r3,1
  80feb0:	e0bfff17 	ldw	r2,-4(fp)
  80feb4:	1884983a 	sll	r2,r3,r2
  80feb8:	1007883a 	mov	r3,r2
  80febc:	e0bffd17 	ldw	r2,-12(fp)
  80fec0:	1884703a 	and	r2,r3,r2
  80fec4:	1004c03a 	cmpne	r2,r2,zero
  80fec8:	10803fcc 	andi	r2,r2,255
}
  80fecc:	e037883a 	mov	sp,fp
  80fed0:	df000017 	ldw	fp,0(sp)
  80fed4:	dec00104 	addi	sp,sp,4
  80fed8:	f800283a 	ret

0080fedc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80fedc:	defff504 	addi	sp,sp,-44
  80fee0:	dfc00a15 	stw	ra,40(sp)
  80fee4:	df000915 	stw	fp,36(sp)
  80fee8:	df000904 	addi	fp,sp,36
  80feec:	e13ffc15 	stw	r4,-16(fp)
  80fef0:	e17ffd15 	stw	r5,-12(fp)
  80fef4:	e1bffe15 	stw	r6,-8(fp)
  80fef8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80fefc:	00bffa84 	movi	r2,-22
  80ff00:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80ff04:	e0bffd17 	ldw	r2,-12(fp)
  80ff08:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ff0c:	e0bff817 	ldw	r2,-32(fp)
  80ff10:	10800808 	cmpgei	r2,r2,32
  80ff14:	1000271e 	bne	r2,zero,80ffb4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff18:	0005303a 	rdctl	r2,status
  80ff1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff20:	e0fffb17 	ldw	r3,-20(fp)
  80ff24:	00bfff84 	movi	r2,-2
  80ff28:	1884703a 	and	r2,r3,r2
  80ff2c:	1001703a 	wrctl	status,r2
  
  return context;
  80ff30:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80ff34:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80ff38:	00802074 	movhi	r2,129
  80ff3c:	1091de04 	addi	r2,r2,18296
  80ff40:	e0fff817 	ldw	r3,-32(fp)
  80ff44:	180690fa 	slli	r3,r3,3
  80ff48:	10c5883a 	add	r2,r2,r3
  80ff4c:	e0fffe17 	ldw	r3,-8(fp)
  80ff50:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80ff54:	00802074 	movhi	r2,129
  80ff58:	1091de04 	addi	r2,r2,18296
  80ff5c:	e0fff817 	ldw	r3,-32(fp)
  80ff60:	180690fa 	slli	r3,r3,3
  80ff64:	10c5883a 	add	r2,r2,r3
  80ff68:	10800104 	addi	r2,r2,4
  80ff6c:	e0ffff17 	ldw	r3,-4(fp)
  80ff70:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80ff74:	e0bffe17 	ldw	r2,-8(fp)
  80ff78:	10000526 	beq	r2,zero,80ff90 <alt_iic_isr_register+0xb4>
  80ff7c:	e0bff817 	ldw	r2,-32(fp)
  80ff80:	100b883a 	mov	r5,r2
  80ff84:	e13ffc17 	ldw	r4,-16(fp)
  80ff88:	080fd7c0 	call	80fd7c <alt_ic_irq_enable>
  80ff8c:	00000406 	br	80ffa0 <alt_iic_isr_register+0xc4>
  80ff90:	e0bff817 	ldw	r2,-32(fp)
  80ff94:	100b883a 	mov	r5,r2
  80ff98:	e13ffc17 	ldw	r4,-16(fp)
  80ff9c:	080fe040 	call	80fe04 <alt_ic_irq_disable>
  80ffa0:	e0bff715 	stw	r2,-36(fp)
  80ffa4:	e0bffa17 	ldw	r2,-24(fp)
  80ffa8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ffac:	e0bff917 	ldw	r2,-28(fp)
  80ffb0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80ffb4:	e0bff717 	ldw	r2,-36(fp)
}
  80ffb8:	e037883a 	mov	sp,fp
  80ffbc:	dfc00117 	ldw	ra,4(sp)
  80ffc0:	df000017 	ldw	fp,0(sp)
  80ffc4:	dec00204 	addi	sp,sp,8
  80ffc8:	f800283a 	ret

0080ffcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80ffcc:	defff804 	addi	sp,sp,-32
  80ffd0:	dfc00715 	stw	ra,28(sp)
  80ffd4:	df000615 	stw	fp,24(sp)
  80ffd8:	dc000515 	stw	r16,20(sp)
  80ffdc:	df000604 	addi	fp,sp,24
  80ffe0:	e13ffb15 	stw	r4,-20(fp)
  80ffe4:	e17ffc15 	stw	r5,-16(fp)
  80ffe8:	e1bffd15 	stw	r6,-12(fp)
  80ffec:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  80fff0:	e1bffe17 	ldw	r6,-8(fp)
  80fff4:	e17ffd17 	ldw	r5,-12(fp)
  80fff8:	e13ffc17 	ldw	r4,-16(fp)
  80fffc:	08102540 	call	810254 <open>
  810000:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  810004:	e0bffa17 	ldw	r2,-24(fp)
  810008:	10002216 	blt	r2,zero,810094 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  81000c:	04002074 	movhi	r16,129
  810010:	84060d04 	addi	r16,r16,6196
  810014:	e0bffa17 	ldw	r2,-24(fp)
  810018:	01400304 	movi	r5,12
  81001c:	1009883a 	mov	r4,r2
  810020:	080ae240 	call	80ae24 <__mulsi3>
  810024:	8085883a 	add	r2,r16,r2
  810028:	10c00017 	ldw	r3,0(r2)
  81002c:	e0bffb17 	ldw	r2,-20(fp)
  810030:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  810034:	04002074 	movhi	r16,129
  810038:	84060d04 	addi	r16,r16,6196
  81003c:	e0bffa17 	ldw	r2,-24(fp)
  810040:	01400304 	movi	r5,12
  810044:	1009883a 	mov	r4,r2
  810048:	080ae240 	call	80ae24 <__mulsi3>
  81004c:	8085883a 	add	r2,r16,r2
  810050:	10800104 	addi	r2,r2,4
  810054:	10c00017 	ldw	r3,0(r2)
  810058:	e0bffb17 	ldw	r2,-20(fp)
  81005c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  810060:	04002074 	movhi	r16,129
  810064:	84060d04 	addi	r16,r16,6196
  810068:	e0bffa17 	ldw	r2,-24(fp)
  81006c:	01400304 	movi	r5,12
  810070:	1009883a 	mov	r4,r2
  810074:	080ae240 	call	80ae24 <__mulsi3>
  810078:	8085883a 	add	r2,r16,r2
  81007c:	10800204 	addi	r2,r2,8
  810080:	10c00017 	ldw	r3,0(r2)
  810084:	e0bffb17 	ldw	r2,-20(fp)
  810088:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81008c:	e13ffa17 	ldw	r4,-24(fp)
  810090:	080ddb00 	call	80ddb0 <alt_release_fd>
  }
} 
  810094:	0001883a 	nop
  810098:	e6ffff04 	addi	sp,fp,-4
  81009c:	dfc00217 	ldw	ra,8(sp)
  8100a0:	df000117 	ldw	fp,4(sp)
  8100a4:	dc000017 	ldw	r16,0(sp)
  8100a8:	dec00304 	addi	sp,sp,12
  8100ac:	f800283a 	ret

008100b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8100b0:	defffb04 	addi	sp,sp,-20
  8100b4:	dfc00415 	stw	ra,16(sp)
  8100b8:	df000315 	stw	fp,12(sp)
  8100bc:	df000304 	addi	fp,sp,12
  8100c0:	e13ffd15 	stw	r4,-12(fp)
  8100c4:	e17ffe15 	stw	r5,-8(fp)
  8100c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8100cc:	01c07fc4 	movi	r7,511
  8100d0:	01800044 	movi	r6,1
  8100d4:	e17ffd17 	ldw	r5,-12(fp)
  8100d8:	01002074 	movhi	r4,129
  8100dc:	21061004 	addi	r4,r4,6208
  8100e0:	080ffcc0 	call	80ffcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8100e4:	01c07fc4 	movi	r7,511
  8100e8:	000d883a 	mov	r6,zero
  8100ec:	e17ffe17 	ldw	r5,-8(fp)
  8100f0:	01002074 	movhi	r4,129
  8100f4:	21060d04 	addi	r4,r4,6196
  8100f8:	080ffcc0 	call	80ffcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8100fc:	01c07fc4 	movi	r7,511
  810100:	01800044 	movi	r6,1
  810104:	e17fff17 	ldw	r5,-4(fp)
  810108:	01002074 	movhi	r4,129
  81010c:	21061304 	addi	r4,r4,6220
  810110:	080ffcc0 	call	80ffcc <alt_open_fd>
}  
  810114:	0001883a 	nop
  810118:	e037883a 	mov	sp,fp
  81011c:	dfc00117 	ldw	ra,4(sp)
  810120:	df000017 	ldw	fp,0(sp)
  810124:	dec00204 	addi	sp,sp,8
  810128:	f800283a 	ret

0081012c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81012c:	defffe04 	addi	sp,sp,-8
  810130:	dfc00115 	stw	ra,4(sp)
  810134:	df000015 	stw	fp,0(sp)
  810138:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81013c:	d0a00b17 	ldw	r2,-32724(gp)
  810140:	10000326 	beq	r2,zero,810150 <alt_get_errno+0x24>
  810144:	d0a00b17 	ldw	r2,-32724(gp)
  810148:	103ee83a 	callr	r2
  81014c:	00000106 	br	810154 <alt_get_errno+0x28>
  810150:	d0a71004 	addi	r2,gp,-25536
}
  810154:	e037883a 	mov	sp,fp
  810158:	dfc00117 	ldw	ra,4(sp)
  81015c:	df000017 	ldw	fp,0(sp)
  810160:	dec00204 	addi	sp,sp,8
  810164:	f800283a 	ret

00810168 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810168:	defffb04 	addi	sp,sp,-20
  81016c:	dfc00415 	stw	ra,16(sp)
  810170:	df000315 	stw	fp,12(sp)
  810174:	dc000215 	stw	r16,8(sp)
  810178:	df000304 	addi	fp,sp,12
  81017c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810180:	e0bffe17 	ldw	r2,-8(fp)
  810184:	10800217 	ldw	r2,8(r2)
  810188:	10d00034 	orhi	r3,r2,16384
  81018c:	e0bffe17 	ldw	r2,-8(fp)
  810190:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810194:	e03ffd15 	stw	zero,-12(fp)
  810198:	00002306 	br	810228 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81019c:	04002074 	movhi	r16,129
  8101a0:	84060d04 	addi	r16,r16,6196
  8101a4:	e0bffd17 	ldw	r2,-12(fp)
  8101a8:	01400304 	movi	r5,12
  8101ac:	1009883a 	mov	r4,r2
  8101b0:	080ae240 	call	80ae24 <__mulsi3>
  8101b4:	8085883a 	add	r2,r16,r2
  8101b8:	10c00017 	ldw	r3,0(r2)
  8101bc:	e0bffe17 	ldw	r2,-8(fp)
  8101c0:	10800017 	ldw	r2,0(r2)
  8101c4:	1880151e 	bne	r3,r2,81021c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8101c8:	04002074 	movhi	r16,129
  8101cc:	84060d04 	addi	r16,r16,6196
  8101d0:	e0bffd17 	ldw	r2,-12(fp)
  8101d4:	01400304 	movi	r5,12
  8101d8:	1009883a 	mov	r4,r2
  8101dc:	080ae240 	call	80ae24 <__mulsi3>
  8101e0:	8085883a 	add	r2,r16,r2
  8101e4:	10800204 	addi	r2,r2,8
  8101e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8101ec:	10000b0e 	bge	r2,zero,81021c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8101f0:	01400304 	movi	r5,12
  8101f4:	e13ffd17 	ldw	r4,-12(fp)
  8101f8:	080ae240 	call	80ae24 <__mulsi3>
  8101fc:	1007883a 	mov	r3,r2
  810200:	00802074 	movhi	r2,129
  810204:	10860d04 	addi	r2,r2,6196
  810208:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81020c:	e0bffe17 	ldw	r2,-8(fp)
  810210:	18800226 	beq	r3,r2,81021c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810214:	00bffcc4 	movi	r2,-13
  810218:	00000806 	br	81023c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81021c:	e0bffd17 	ldw	r2,-12(fp)
  810220:	10800044 	addi	r2,r2,1
  810224:	e0bffd15 	stw	r2,-12(fp)
  810228:	d0a00a17 	ldw	r2,-32728(gp)
  81022c:	1007883a 	mov	r3,r2
  810230:	e0bffd17 	ldw	r2,-12(fp)
  810234:	18bfd92e 	bgeu	r3,r2,81019c <__alt_data_end+0xff81019c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810238:	0005883a 	mov	r2,zero
}
  81023c:	e6ffff04 	addi	sp,fp,-4
  810240:	dfc00217 	ldw	ra,8(sp)
  810244:	df000117 	ldw	fp,4(sp)
  810248:	dc000017 	ldw	r16,0(sp)
  81024c:	dec00304 	addi	sp,sp,12
  810250:	f800283a 	ret

00810254 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810254:	defff604 	addi	sp,sp,-40
  810258:	dfc00915 	stw	ra,36(sp)
  81025c:	df000815 	stw	fp,32(sp)
  810260:	df000804 	addi	fp,sp,32
  810264:	e13ffd15 	stw	r4,-12(fp)
  810268:	e17ffe15 	stw	r5,-8(fp)
  81026c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  810270:	00bfffc4 	movi	r2,-1
  810274:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  810278:	00bffb44 	movi	r2,-19
  81027c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  810280:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810284:	d1600804 	addi	r5,gp,-32736
  810288:	e13ffd17 	ldw	r4,-12(fp)
  81028c:	080fc680 	call	80fc68 <alt_find_dev>
  810290:	e0bff815 	stw	r2,-32(fp)
  810294:	e0bff817 	ldw	r2,-32(fp)
  810298:	1000051e 	bne	r2,zero,8102b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81029c:	e13ffd17 	ldw	r4,-12(fp)
  8102a0:	08105780 	call	810578 <alt_find_file>
  8102a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8102a8:	00800044 	movi	r2,1
  8102ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8102b0:	e0bff817 	ldw	r2,-32(fp)
  8102b4:	10002b26 	beq	r2,zero,810364 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8102b8:	e13ff817 	ldw	r4,-32(fp)
  8102bc:	08106800 	call	810680 <alt_get_fd>
  8102c0:	e0bff915 	stw	r2,-28(fp)
  8102c4:	e0bff917 	ldw	r2,-28(fp)
  8102c8:	1000030e 	bge	r2,zero,8102d8 <open+0x84>
    {
      status = index;
  8102cc:	e0bff917 	ldw	r2,-28(fp)
  8102d0:	e0bffa15 	stw	r2,-24(fp)
  8102d4:	00002506 	br	81036c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  8102d8:	01400304 	movi	r5,12
  8102dc:	e13ff917 	ldw	r4,-28(fp)
  8102e0:	080ae240 	call	80ae24 <__mulsi3>
  8102e4:	1007883a 	mov	r3,r2
  8102e8:	00802074 	movhi	r2,129
  8102ec:	10860d04 	addi	r2,r2,6196
  8102f0:	1885883a 	add	r2,r3,r2
  8102f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8102f8:	e0fffe17 	ldw	r3,-8(fp)
  8102fc:	00900034 	movhi	r2,16384
  810300:	10bfffc4 	addi	r2,r2,-1
  810304:	1886703a 	and	r3,r3,r2
  810308:	e0bffc17 	ldw	r2,-16(fp)
  81030c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  810310:	e0bffb17 	ldw	r2,-20(fp)
  810314:	1000051e 	bne	r2,zero,81032c <open+0xd8>
  810318:	e13ffc17 	ldw	r4,-16(fp)
  81031c:	08101680 	call	810168 <alt_file_locked>
  810320:	e0bffa15 	stw	r2,-24(fp)
  810324:	e0bffa17 	ldw	r2,-24(fp)
  810328:	10001016 	blt	r2,zero,81036c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81032c:	e0bff817 	ldw	r2,-32(fp)
  810330:	10800317 	ldw	r2,12(r2)
  810334:	10000826 	beq	r2,zero,810358 <open+0x104>
  810338:	e0bff817 	ldw	r2,-32(fp)
  81033c:	10800317 	ldw	r2,12(r2)
  810340:	e1ffff17 	ldw	r7,-4(fp)
  810344:	e1bffe17 	ldw	r6,-8(fp)
  810348:	e17ffd17 	ldw	r5,-12(fp)
  81034c:	e13ffc17 	ldw	r4,-16(fp)
  810350:	103ee83a 	callr	r2
  810354:	00000106 	br	81035c <open+0x108>
  810358:	0005883a 	mov	r2,zero
  81035c:	e0bffa15 	stw	r2,-24(fp)
  810360:	00000206 	br	81036c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810364:	00bffb44 	movi	r2,-19
  810368:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81036c:	e0bffa17 	ldw	r2,-24(fp)
  810370:	1000090e 	bge	r2,zero,810398 <open+0x144>
  {
    alt_release_fd (index);  
  810374:	e13ff917 	ldw	r4,-28(fp)
  810378:	080ddb00 	call	80ddb0 <alt_release_fd>
    ALT_ERRNO = -status;
  81037c:	081012c0 	call	81012c <alt_get_errno>
  810380:	1007883a 	mov	r3,r2
  810384:	e0bffa17 	ldw	r2,-24(fp)
  810388:	0085c83a 	sub	r2,zero,r2
  81038c:	18800015 	stw	r2,0(r3)
    return -1;
  810390:	00bfffc4 	movi	r2,-1
  810394:	00000106 	br	81039c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  810398:	e0bff917 	ldw	r2,-28(fp)
}
  81039c:	e037883a 	mov	sp,fp
  8103a0:	dfc00117 	ldw	ra,4(sp)
  8103a4:	df000017 	ldw	fp,0(sp)
  8103a8:	dec00204 	addi	sp,sp,8
  8103ac:	f800283a 	ret

008103b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8103b0:	defffa04 	addi	sp,sp,-24
  8103b4:	df000515 	stw	fp,20(sp)
  8103b8:	df000504 	addi	fp,sp,20
  8103bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8103c0:	0005303a 	rdctl	r2,status
  8103c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8103c8:	e0fffc17 	ldw	r3,-16(fp)
  8103cc:	00bfff84 	movi	r2,-2
  8103d0:	1884703a 	and	r2,r3,r2
  8103d4:	1001703a 	wrctl	status,r2
  
  return context;
  8103d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8103dc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8103e0:	e0bfff17 	ldw	r2,-4(fp)
  8103e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8103e8:	e0bffd17 	ldw	r2,-12(fp)
  8103ec:	10800017 	ldw	r2,0(r2)
  8103f0:	e0fffd17 	ldw	r3,-12(fp)
  8103f4:	18c00117 	ldw	r3,4(r3)
  8103f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8103fc:	e0bffd17 	ldw	r2,-12(fp)
  810400:	10800117 	ldw	r2,4(r2)
  810404:	e0fffd17 	ldw	r3,-12(fp)
  810408:	18c00017 	ldw	r3,0(r3)
  81040c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  810410:	e0bffd17 	ldw	r2,-12(fp)
  810414:	e0fffd17 	ldw	r3,-12(fp)
  810418:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  81041c:	e0bffd17 	ldw	r2,-12(fp)
  810420:	e0fffd17 	ldw	r3,-12(fp)
  810424:	10c00015 	stw	r3,0(r2)
  810428:	e0bffb17 	ldw	r2,-20(fp)
  81042c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810430:	e0bffe17 	ldw	r2,-8(fp)
  810434:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  810438:	0001883a 	nop
  81043c:	e037883a 	mov	sp,fp
  810440:	df000017 	ldw	fp,0(sp)
  810444:	dec00104 	addi	sp,sp,4
  810448:	f800283a 	ret

0081044c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81044c:	defffb04 	addi	sp,sp,-20
  810450:	dfc00415 	stw	ra,16(sp)
  810454:	df000315 	stw	fp,12(sp)
  810458:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81045c:	d0a01217 	ldw	r2,-32696(gp)
  810460:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  810464:	d0a71617 	ldw	r2,-25512(gp)
  810468:	10800044 	addi	r2,r2,1
  81046c:	d0a71615 	stw	r2,-25512(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810470:	00002e06 	br	81052c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  810474:	e0bffd17 	ldw	r2,-12(fp)
  810478:	10800017 	ldw	r2,0(r2)
  81047c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  810480:	e0bffd17 	ldw	r2,-12(fp)
  810484:	10800403 	ldbu	r2,16(r2)
  810488:	10803fcc 	andi	r2,r2,255
  81048c:	10000426 	beq	r2,zero,8104a0 <alt_tick+0x54>
  810490:	d0a71617 	ldw	r2,-25512(gp)
  810494:	1000021e 	bne	r2,zero,8104a0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  810498:	e0bffd17 	ldw	r2,-12(fp)
  81049c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8104a0:	e0bffd17 	ldw	r2,-12(fp)
  8104a4:	10800217 	ldw	r2,8(r2)
  8104a8:	d0e71617 	ldw	r3,-25512(gp)
  8104ac:	18801d36 	bltu	r3,r2,810524 <alt_tick+0xd8>
  8104b0:	e0bffd17 	ldw	r2,-12(fp)
  8104b4:	10800403 	ldbu	r2,16(r2)
  8104b8:	10803fcc 	andi	r2,r2,255
  8104bc:	1000191e 	bne	r2,zero,810524 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8104c0:	e0bffd17 	ldw	r2,-12(fp)
  8104c4:	10800317 	ldw	r2,12(r2)
  8104c8:	e0fffd17 	ldw	r3,-12(fp)
  8104cc:	18c00517 	ldw	r3,20(r3)
  8104d0:	1809883a 	mov	r4,r3
  8104d4:	103ee83a 	callr	r2
  8104d8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8104dc:	e0bfff17 	ldw	r2,-4(fp)
  8104e0:	1000031e 	bne	r2,zero,8104f0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8104e4:	e13ffd17 	ldw	r4,-12(fp)
  8104e8:	08103b00 	call	8103b0 <alt_alarm_stop>
  8104ec:	00000d06 	br	810524 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8104f0:	e0bffd17 	ldw	r2,-12(fp)
  8104f4:	10c00217 	ldw	r3,8(r2)
  8104f8:	e0bfff17 	ldw	r2,-4(fp)
  8104fc:	1887883a 	add	r3,r3,r2
  810500:	e0bffd17 	ldw	r2,-12(fp)
  810504:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  810508:	e0bffd17 	ldw	r2,-12(fp)
  81050c:	10c00217 	ldw	r3,8(r2)
  810510:	d0a71617 	ldw	r2,-25512(gp)
  810514:	1880032e 	bgeu	r3,r2,810524 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  810518:	e0bffd17 	ldw	r2,-12(fp)
  81051c:	00c00044 	movi	r3,1
  810520:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  810524:	e0bffe17 	ldw	r2,-8(fp)
  810528:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81052c:	e0fffd17 	ldw	r3,-12(fp)
  810530:	d0a01204 	addi	r2,gp,-32696
  810534:	18bfcf1e 	bne	r3,r2,810474 <__alt_data_end+0xff810474>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  810538:	0001883a 	nop
}
  81053c:	0001883a 	nop
  810540:	e037883a 	mov	sp,fp
  810544:	dfc00117 	ldw	ra,4(sp)
  810548:	df000017 	ldw	fp,0(sp)
  81054c:	dec00204 	addi	sp,sp,8
  810550:	f800283a 	ret

00810554 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  810554:	deffff04 	addi	sp,sp,-4
  810558:	df000015 	stw	fp,0(sp)
  81055c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  810560:	000170fa 	wrctl	ienable,zero
}
  810564:	0001883a 	nop
  810568:	e037883a 	mov	sp,fp
  81056c:	df000017 	ldw	fp,0(sp)
  810570:	dec00104 	addi	sp,sp,4
  810574:	f800283a 	ret

00810578 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  810578:	defffb04 	addi	sp,sp,-20
  81057c:	dfc00415 	stw	ra,16(sp)
  810580:	df000315 	stw	fp,12(sp)
  810584:	df000304 	addi	fp,sp,12
  810588:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81058c:	d0a00617 	ldw	r2,-32744(gp)
  810590:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810594:	00003106 	br	81065c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  810598:	e0bffd17 	ldw	r2,-12(fp)
  81059c:	10800217 	ldw	r2,8(r2)
  8105a0:	1009883a 	mov	r4,r2
  8105a4:	08008f00 	call	8008f0 <strlen>
  8105a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8105ac:	e0bffd17 	ldw	r2,-12(fp)
  8105b0:	10c00217 	ldw	r3,8(r2)
  8105b4:	e0bffe17 	ldw	r2,-8(fp)
  8105b8:	10bfffc4 	addi	r2,r2,-1
  8105bc:	1885883a 	add	r2,r3,r2
  8105c0:	10800003 	ldbu	r2,0(r2)
  8105c4:	10803fcc 	andi	r2,r2,255
  8105c8:	1080201c 	xori	r2,r2,128
  8105cc:	10bfe004 	addi	r2,r2,-128
  8105d0:	10800bd8 	cmpnei	r2,r2,47
  8105d4:	1000031e 	bne	r2,zero,8105e4 <alt_find_file+0x6c>
    {
      len -= 1;
  8105d8:	e0bffe17 	ldw	r2,-8(fp)
  8105dc:	10bfffc4 	addi	r2,r2,-1
  8105e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8105e4:	e0bffe17 	ldw	r2,-8(fp)
  8105e8:	e0ffff17 	ldw	r3,-4(fp)
  8105ec:	1885883a 	add	r2,r3,r2
  8105f0:	10800003 	ldbu	r2,0(r2)
  8105f4:	10803fcc 	andi	r2,r2,255
  8105f8:	1080201c 	xori	r2,r2,128
  8105fc:	10bfe004 	addi	r2,r2,-128
  810600:	10800be0 	cmpeqi	r2,r2,47
  810604:	1000081e 	bne	r2,zero,810628 <alt_find_file+0xb0>
  810608:	e0bffe17 	ldw	r2,-8(fp)
  81060c:	e0ffff17 	ldw	r3,-4(fp)
  810610:	1885883a 	add	r2,r3,r2
  810614:	10800003 	ldbu	r2,0(r2)
  810618:	10803fcc 	andi	r2,r2,255
  81061c:	1080201c 	xori	r2,r2,128
  810620:	10bfe004 	addi	r2,r2,-128
  810624:	10000a1e 	bne	r2,zero,810650 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  810628:	e0bffd17 	ldw	r2,-12(fp)
  81062c:	10800217 	ldw	r2,8(r2)
  810630:	e0fffe17 	ldw	r3,-8(fp)
  810634:	180d883a 	mov	r6,r3
  810638:	e17fff17 	ldw	r5,-4(fp)
  81063c:	1009883a 	mov	r4,r2
  810640:	08108bc0 	call	8108bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810644:	1000021e 	bne	r2,zero,810650 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  810648:	e0bffd17 	ldw	r2,-12(fp)
  81064c:	00000706 	br	81066c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  810650:	e0bffd17 	ldw	r2,-12(fp)
  810654:	10800017 	ldw	r2,0(r2)
  810658:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81065c:	e0fffd17 	ldw	r3,-12(fp)
  810660:	d0a00604 	addi	r2,gp,-32744
  810664:	18bfcc1e 	bne	r3,r2,810598 <__alt_data_end+0xff810598>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  810668:	0005883a 	mov	r2,zero
}
  81066c:	e037883a 	mov	sp,fp
  810670:	dfc00117 	ldw	ra,4(sp)
  810674:	df000017 	ldw	fp,0(sp)
  810678:	dec00204 	addi	sp,sp,8
  81067c:	f800283a 	ret

00810680 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  810680:	defffa04 	addi	sp,sp,-24
  810684:	dfc00515 	stw	ra,20(sp)
  810688:	df000415 	stw	fp,16(sp)
  81068c:	dc000315 	stw	r16,12(sp)
  810690:	df000404 	addi	fp,sp,16
  810694:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  810698:	00bffa04 	movi	r2,-24
  81069c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8106a0:	e03ffc15 	stw	zero,-16(fp)
  8106a4:	00001d06 	br	81071c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
  8106a8:	04002074 	movhi	r16,129
  8106ac:	84060d04 	addi	r16,r16,6196
  8106b0:	e0bffc17 	ldw	r2,-16(fp)
  8106b4:	01400304 	movi	r5,12
  8106b8:	1009883a 	mov	r4,r2
  8106bc:	080ae240 	call	80ae24 <__mulsi3>
  8106c0:	8085883a 	add	r2,r16,r2
  8106c4:	10800017 	ldw	r2,0(r2)
  8106c8:	1000111e 	bne	r2,zero,810710 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
  8106cc:	04002074 	movhi	r16,129
  8106d0:	84060d04 	addi	r16,r16,6196
  8106d4:	e0bffc17 	ldw	r2,-16(fp)
  8106d8:	01400304 	movi	r5,12
  8106dc:	1009883a 	mov	r4,r2
  8106e0:	080ae240 	call	80ae24 <__mulsi3>
  8106e4:	8085883a 	add	r2,r16,r2
  8106e8:	e0fffe17 	ldw	r3,-8(fp)
  8106ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8106f0:	d0e00a17 	ldw	r3,-32728(gp)
  8106f4:	e0bffc17 	ldw	r2,-16(fp)
  8106f8:	1880020e 	bge	r3,r2,810704 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
  8106fc:	e0bffc17 	ldw	r2,-16(fp)
  810700:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  810704:	e0bffc17 	ldw	r2,-16(fp)
  810708:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81070c:	00000606 	br	810728 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810710:	e0bffc17 	ldw	r2,-16(fp)
  810714:	10800044 	addi	r2,r2,1
  810718:	e0bffc15 	stw	r2,-16(fp)
  81071c:	e0bffc17 	ldw	r2,-16(fp)
  810720:	10800810 	cmplti	r2,r2,32
  810724:	103fe01e 	bne	r2,zero,8106a8 <__alt_data_end+0xff8106a8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  810728:	e0bffd17 	ldw	r2,-12(fp)
}
  81072c:	e6ffff04 	addi	sp,fp,-4
  810730:	dfc00217 	ldw	ra,8(sp)
  810734:	df000117 	ldw	fp,4(sp)
  810738:	dc000017 	ldw	r16,0(sp)
  81073c:	dec00304 	addi	sp,sp,12
  810740:	f800283a 	ret

00810744 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  810744:	defffb04 	addi	sp,sp,-20
  810748:	df000415 	stw	fp,16(sp)
  81074c:	df000404 	addi	fp,sp,16
  810750:	e13ffe15 	stw	r4,-8(fp)
  810754:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  810758:	e0bfff17 	ldw	r2,-4(fp)
  81075c:	10840070 	cmpltui	r2,r2,4097
  810760:	1000021e 	bne	r2,zero,81076c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  810764:	00840004 	movi	r2,4096
  810768:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81076c:	e0fffe17 	ldw	r3,-8(fp)
  810770:	e0bfff17 	ldw	r2,-4(fp)
  810774:	1885883a 	add	r2,r3,r2
  810778:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81077c:	e0bffe17 	ldw	r2,-8(fp)
  810780:	e0bffc15 	stw	r2,-16(fp)
  810784:	00000506 	br	81079c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  810788:	e0bffc17 	ldw	r2,-16(fp)
  81078c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810790:	e0bffc17 	ldw	r2,-16(fp)
  810794:	10800804 	addi	r2,r2,32
  810798:	e0bffc15 	stw	r2,-16(fp)
  81079c:	e0fffc17 	ldw	r3,-16(fp)
  8107a0:	e0bffd17 	ldw	r2,-12(fp)
  8107a4:	18bff836 	bltu	r3,r2,810788 <__alt_data_end+0xff810788>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8107a8:	e0bffe17 	ldw	r2,-8(fp)
  8107ac:	108007cc 	andi	r2,r2,31
  8107b0:	10000226 	beq	r2,zero,8107bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8107b4:	e0bffc17 	ldw	r2,-16(fp)
  8107b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8107bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8107c0:	0001883a 	nop
  8107c4:	e037883a 	mov	sp,fp
  8107c8:	df000017 	ldw	fp,0(sp)
  8107cc:	dec00104 	addi	sp,sp,4
  8107d0:	f800283a 	ret

008107d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8107d4:	defffe04 	addi	sp,sp,-8
  8107d8:	df000115 	stw	fp,4(sp)
  8107dc:	df000104 	addi	fp,sp,4
  8107e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  8107e4:	e0bfff17 	ldw	r2,-4(fp)
  8107e8:	10bffe84 	addi	r2,r2,-6
  8107ec:	10c00428 	cmpgeui	r3,r2,16
  8107f0:	18001a1e 	bne	r3,zero,81085c <alt_exception_cause_generated_bad_addr+0x88>
  8107f4:	100690ba 	slli	r3,r2,2
  8107f8:	00802074 	movhi	r2,129
  8107fc:	10820304 	addi	r2,r2,2060
  810800:	1885883a 	add	r2,r3,r2
  810804:	10800017 	ldw	r2,0(r2)
  810808:	1000683a 	jmp	r2
  81080c:	0081084c 	andi	r2,zero,1057
  810810:	0081084c 	andi	r2,zero,1057
  810814:	0081085c 	xori	r2,zero,1057
  810818:	0081085c 	xori	r2,zero,1057
  81081c:	0081085c 	xori	r2,zero,1057
  810820:	0081084c 	andi	r2,zero,1057
  810824:	00810854 	movui	r2,1057
  810828:	0081085c 	xori	r2,zero,1057
  81082c:	0081084c 	andi	r2,zero,1057
  810830:	0081084c 	andi	r2,zero,1057
  810834:	0081085c 	xori	r2,zero,1057
  810838:	0081084c 	andi	r2,zero,1057
  81083c:	00810854 	movui	r2,1057
  810840:	0081085c 	xori	r2,zero,1057
  810844:	0081085c 	xori	r2,zero,1057
  810848:	0081084c 	andi	r2,zero,1057
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81084c:	00800044 	movi	r2,1
  810850:	00000306 	br	810860 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  810854:	0005883a 	mov	r2,zero
  810858:	00000106 	br	810860 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  81085c:	0005883a 	mov	r2,zero
  }
}
  810860:	e037883a 	mov	sp,fp
  810864:	df000017 	ldw	fp,0(sp)
  810868:	dec00104 	addi	sp,sp,4
  81086c:	f800283a 	ret

00810870 <atexit>:
  810870:	200b883a 	mov	r5,r4
  810874:	000f883a 	mov	r7,zero
  810878:	000d883a 	mov	r6,zero
  81087c:	0009883a 	mov	r4,zero
  810880:	08109381 	jmpi	810938 <__register_exitproc>

00810884 <exit>:
  810884:	defffe04 	addi	sp,sp,-8
  810888:	000b883a 	mov	r5,zero
  81088c:	dc000015 	stw	r16,0(sp)
  810890:	dfc00115 	stw	ra,4(sp)
  810894:	2021883a 	mov	r16,r4
  810898:	0810a500 	call	810a50 <__call_exitprocs>
  81089c:	00802074 	movhi	r2,129
  8108a0:	108abc04 	addi	r2,r2,10992
  8108a4:	11000017 	ldw	r4,0(r2)
  8108a8:	20800f17 	ldw	r2,60(r4)
  8108ac:	10000126 	beq	r2,zero,8108b4 <exit+0x30>
  8108b0:	103ee83a 	callr	r2
  8108b4:	8009883a 	mov	r4,r16
  8108b8:	0810bd00 	call	810bd0 <_exit>

008108bc <memcmp>:
  8108bc:	01c000c4 	movi	r7,3
  8108c0:	3980192e 	bgeu	r7,r6,810928 <memcmp+0x6c>
  8108c4:	2144b03a 	or	r2,r4,r5
  8108c8:	11c4703a 	and	r2,r2,r7
  8108cc:	10000f26 	beq	r2,zero,81090c <memcmp+0x50>
  8108d0:	20800003 	ldbu	r2,0(r4)
  8108d4:	28c00003 	ldbu	r3,0(r5)
  8108d8:	10c0151e 	bne	r2,r3,810930 <memcmp+0x74>
  8108dc:	31bfff84 	addi	r6,r6,-2
  8108e0:	01ffffc4 	movi	r7,-1
  8108e4:	00000406 	br	8108f8 <memcmp+0x3c>
  8108e8:	20800003 	ldbu	r2,0(r4)
  8108ec:	28c00003 	ldbu	r3,0(r5)
  8108f0:	31bfffc4 	addi	r6,r6,-1
  8108f4:	10c00e1e 	bne	r2,r3,810930 <memcmp+0x74>
  8108f8:	21000044 	addi	r4,r4,1
  8108fc:	29400044 	addi	r5,r5,1
  810900:	31fff91e 	bne	r6,r7,8108e8 <__alt_data_end+0xff8108e8>
  810904:	0005883a 	mov	r2,zero
  810908:	f800283a 	ret
  81090c:	20c00017 	ldw	r3,0(r4)
  810910:	28800017 	ldw	r2,0(r5)
  810914:	18bfee1e 	bne	r3,r2,8108d0 <__alt_data_end+0xff8108d0>
  810918:	31bfff04 	addi	r6,r6,-4
  81091c:	21000104 	addi	r4,r4,4
  810920:	29400104 	addi	r5,r5,4
  810924:	39bff936 	bltu	r7,r6,81090c <__alt_data_end+0xff81090c>
  810928:	303fe91e 	bne	r6,zero,8108d0 <__alt_data_end+0xff8108d0>
  81092c:	003ff506 	br	810904 <__alt_data_end+0xff810904>
  810930:	10c5c83a 	sub	r2,r2,r3
  810934:	f800283a 	ret

00810938 <__register_exitproc>:
  810938:	defffa04 	addi	sp,sp,-24
  81093c:	dc000315 	stw	r16,12(sp)
  810940:	04002074 	movhi	r16,129
  810944:	840abc04 	addi	r16,r16,10992
  810948:	80c00017 	ldw	r3,0(r16)
  81094c:	dc400415 	stw	r17,16(sp)
  810950:	dfc00515 	stw	ra,20(sp)
  810954:	18805217 	ldw	r2,328(r3)
  810958:	2023883a 	mov	r17,r4
  81095c:	10003726 	beq	r2,zero,810a3c <__register_exitproc+0x104>
  810960:	10c00117 	ldw	r3,4(r2)
  810964:	010007c4 	movi	r4,31
  810968:	20c00e16 	blt	r4,r3,8109a4 <__register_exitproc+0x6c>
  81096c:	1a000044 	addi	r8,r3,1
  810970:	8800221e 	bne	r17,zero,8109fc <__register_exitproc+0xc4>
  810974:	18c00084 	addi	r3,r3,2
  810978:	18c7883a 	add	r3,r3,r3
  81097c:	18c7883a 	add	r3,r3,r3
  810980:	12000115 	stw	r8,4(r2)
  810984:	10c7883a 	add	r3,r2,r3
  810988:	19400015 	stw	r5,0(r3)
  81098c:	0005883a 	mov	r2,zero
  810990:	dfc00517 	ldw	ra,20(sp)
  810994:	dc400417 	ldw	r17,16(sp)
  810998:	dc000317 	ldw	r16,12(sp)
  81099c:	dec00604 	addi	sp,sp,24
  8109a0:	f800283a 	ret
  8109a4:	00800034 	movhi	r2,0
  8109a8:	10800004 	addi	r2,r2,0
  8109ac:	10002626 	beq	r2,zero,810a48 <__register_exitproc+0x110>
  8109b0:	01006404 	movi	r4,400
  8109b4:	d9400015 	stw	r5,0(sp)
  8109b8:	d9800115 	stw	r6,4(sp)
  8109bc:	d9c00215 	stw	r7,8(sp)
  8109c0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8109c4:	d9400017 	ldw	r5,0(sp)
  8109c8:	d9800117 	ldw	r6,4(sp)
  8109cc:	d9c00217 	ldw	r7,8(sp)
  8109d0:	10001d26 	beq	r2,zero,810a48 <__register_exitproc+0x110>
  8109d4:	81000017 	ldw	r4,0(r16)
  8109d8:	10000115 	stw	zero,4(r2)
  8109dc:	02000044 	movi	r8,1
  8109e0:	22405217 	ldw	r9,328(r4)
  8109e4:	0007883a 	mov	r3,zero
  8109e8:	12400015 	stw	r9,0(r2)
  8109ec:	20805215 	stw	r2,328(r4)
  8109f0:	10006215 	stw	zero,392(r2)
  8109f4:	10006315 	stw	zero,396(r2)
  8109f8:	883fde26 	beq	r17,zero,810974 <__alt_data_end+0xff810974>
  8109fc:	18c9883a 	add	r4,r3,r3
  810a00:	2109883a 	add	r4,r4,r4
  810a04:	1109883a 	add	r4,r2,r4
  810a08:	21802215 	stw	r6,136(r4)
  810a0c:	01800044 	movi	r6,1
  810a10:	12406217 	ldw	r9,392(r2)
  810a14:	30cc983a 	sll	r6,r6,r3
  810a18:	4992b03a 	or	r9,r9,r6
  810a1c:	12406215 	stw	r9,392(r2)
  810a20:	21c04215 	stw	r7,264(r4)
  810a24:	01000084 	movi	r4,2
  810a28:	893fd21e 	bne	r17,r4,810974 <__alt_data_end+0xff810974>
  810a2c:	11006317 	ldw	r4,396(r2)
  810a30:	218cb03a 	or	r6,r4,r6
  810a34:	11806315 	stw	r6,396(r2)
  810a38:	003fce06 	br	810974 <__alt_data_end+0xff810974>
  810a3c:	18805304 	addi	r2,r3,332
  810a40:	18805215 	stw	r2,328(r3)
  810a44:	003fc606 	br	810960 <__alt_data_end+0xff810960>
  810a48:	00bfffc4 	movi	r2,-1
  810a4c:	003fd006 	br	810990 <__alt_data_end+0xff810990>

00810a50 <__call_exitprocs>:
  810a50:	defff504 	addi	sp,sp,-44
  810a54:	df000915 	stw	fp,36(sp)
  810a58:	dd400615 	stw	r21,24(sp)
  810a5c:	dc800315 	stw	r18,12(sp)
  810a60:	dfc00a15 	stw	ra,40(sp)
  810a64:	ddc00815 	stw	r23,32(sp)
  810a68:	dd800715 	stw	r22,28(sp)
  810a6c:	dd000515 	stw	r20,20(sp)
  810a70:	dcc00415 	stw	r19,16(sp)
  810a74:	dc400215 	stw	r17,8(sp)
  810a78:	dc000115 	stw	r16,4(sp)
  810a7c:	d9000015 	stw	r4,0(sp)
  810a80:	2839883a 	mov	fp,r5
  810a84:	04800044 	movi	r18,1
  810a88:	057fffc4 	movi	r21,-1
  810a8c:	00802074 	movhi	r2,129
  810a90:	108abc04 	addi	r2,r2,10992
  810a94:	12000017 	ldw	r8,0(r2)
  810a98:	45005217 	ldw	r20,328(r8)
  810a9c:	44c05204 	addi	r19,r8,328
  810aa0:	a0001c26 	beq	r20,zero,810b14 <__call_exitprocs+0xc4>
  810aa4:	a0800117 	ldw	r2,4(r20)
  810aa8:	15ffffc4 	addi	r23,r2,-1
  810aac:	b8000d16 	blt	r23,zero,810ae4 <__call_exitprocs+0x94>
  810ab0:	14000044 	addi	r16,r2,1
  810ab4:	8421883a 	add	r16,r16,r16
  810ab8:	8421883a 	add	r16,r16,r16
  810abc:	84402004 	addi	r17,r16,128
  810ac0:	a463883a 	add	r17,r20,r17
  810ac4:	a421883a 	add	r16,r20,r16
  810ac8:	e0001e26 	beq	fp,zero,810b44 <__call_exitprocs+0xf4>
  810acc:	80804017 	ldw	r2,256(r16)
  810ad0:	e0801c26 	beq	fp,r2,810b44 <__call_exitprocs+0xf4>
  810ad4:	bdffffc4 	addi	r23,r23,-1
  810ad8:	843fff04 	addi	r16,r16,-4
  810adc:	8c7fff04 	addi	r17,r17,-4
  810ae0:	bd7ff91e 	bne	r23,r21,810ac8 <__alt_data_end+0xff810ac8>
  810ae4:	00800034 	movhi	r2,0
  810ae8:	10800004 	addi	r2,r2,0
  810aec:	10000926 	beq	r2,zero,810b14 <__call_exitprocs+0xc4>
  810af0:	a0800117 	ldw	r2,4(r20)
  810af4:	1000301e 	bne	r2,zero,810bb8 <__call_exitprocs+0x168>
  810af8:	a0800017 	ldw	r2,0(r20)
  810afc:	10003226 	beq	r2,zero,810bc8 <__call_exitprocs+0x178>
  810b00:	a009883a 	mov	r4,r20
  810b04:	98800015 	stw	r2,0(r19)
  810b08:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  810b0c:	9d000017 	ldw	r20,0(r19)
  810b10:	a03fe41e 	bne	r20,zero,810aa4 <__alt_data_end+0xff810aa4>
  810b14:	dfc00a17 	ldw	ra,40(sp)
  810b18:	df000917 	ldw	fp,36(sp)
  810b1c:	ddc00817 	ldw	r23,32(sp)
  810b20:	dd800717 	ldw	r22,28(sp)
  810b24:	dd400617 	ldw	r21,24(sp)
  810b28:	dd000517 	ldw	r20,20(sp)
  810b2c:	dcc00417 	ldw	r19,16(sp)
  810b30:	dc800317 	ldw	r18,12(sp)
  810b34:	dc400217 	ldw	r17,8(sp)
  810b38:	dc000117 	ldw	r16,4(sp)
  810b3c:	dec00b04 	addi	sp,sp,44
  810b40:	f800283a 	ret
  810b44:	a0800117 	ldw	r2,4(r20)
  810b48:	80c00017 	ldw	r3,0(r16)
  810b4c:	10bfffc4 	addi	r2,r2,-1
  810b50:	15c01426 	beq	r2,r23,810ba4 <__call_exitprocs+0x154>
  810b54:	80000015 	stw	zero,0(r16)
  810b58:	183fde26 	beq	r3,zero,810ad4 <__alt_data_end+0xff810ad4>
  810b5c:	95c8983a 	sll	r4,r18,r23
  810b60:	a0806217 	ldw	r2,392(r20)
  810b64:	a5800117 	ldw	r22,4(r20)
  810b68:	2084703a 	and	r2,r4,r2
  810b6c:	10000b26 	beq	r2,zero,810b9c <__call_exitprocs+0x14c>
  810b70:	a0806317 	ldw	r2,396(r20)
  810b74:	2088703a 	and	r4,r4,r2
  810b78:	20000c1e 	bne	r4,zero,810bac <__call_exitprocs+0x15c>
  810b7c:	89400017 	ldw	r5,0(r17)
  810b80:	d9000017 	ldw	r4,0(sp)
  810b84:	183ee83a 	callr	r3
  810b88:	a0800117 	ldw	r2,4(r20)
  810b8c:	15bfbf1e 	bne	r2,r22,810a8c <__alt_data_end+0xff810a8c>
  810b90:	98800017 	ldw	r2,0(r19)
  810b94:	153fcf26 	beq	r2,r20,810ad4 <__alt_data_end+0xff810ad4>
  810b98:	003fbc06 	br	810a8c <__alt_data_end+0xff810a8c>
  810b9c:	183ee83a 	callr	r3
  810ba0:	003ff906 	br	810b88 <__alt_data_end+0xff810b88>
  810ba4:	a5c00115 	stw	r23,4(r20)
  810ba8:	003feb06 	br	810b58 <__alt_data_end+0xff810b58>
  810bac:	89000017 	ldw	r4,0(r17)
  810bb0:	183ee83a 	callr	r3
  810bb4:	003ff406 	br	810b88 <__alt_data_end+0xff810b88>
  810bb8:	a0800017 	ldw	r2,0(r20)
  810bbc:	a027883a 	mov	r19,r20
  810bc0:	1029883a 	mov	r20,r2
  810bc4:	003fb606 	br	810aa0 <__alt_data_end+0xff810aa0>
  810bc8:	0005883a 	mov	r2,zero
  810bcc:	003ffb06 	br	810bbc <__alt_data_end+0xff810bbc>

00810bd0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  810bd0:	defffd04 	addi	sp,sp,-12
  810bd4:	df000215 	stw	fp,8(sp)
  810bd8:	df000204 	addi	fp,sp,8
  810bdc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  810be0:	0001883a 	nop
  810be4:	e0bfff17 	ldw	r2,-4(fp)
  810be8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  810bec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  810bf0:	10000226 	beq	r2,zero,810bfc <_exit+0x2c>
    ALT_SIM_FAIL();
  810bf4:	002af070 	cmpltui	zero,zero,43969
  810bf8:	00000106 	br	810c00 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  810bfc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  810c00:	003fff06 	br	810c00 <__alt_data_end+0xff810c00>
