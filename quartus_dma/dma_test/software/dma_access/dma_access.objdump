
dma_access.elf:     file format elf32-littlenios2
dma_access.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00011110 memsz 0x00011110 flags r-x
    LOAD off    0x00012130 vaddr 0x00811130 paddr 0x00812d08 align 2**12
         filesz 0x00001bd8 memsz 0x00001bd8 flags rw-
    LOAD off    0x000148e0 vaddr 0x008148e0 paddr 0x008148e0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010abc  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000430  00810d00  00810d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd8  00811130  00812d08  00012130  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  008148e0  008148e0  000148e0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00814a40  00814a40  00013d08  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013d08  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fa0  00000000  00000000  00013d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002570e  00000000  00000000  00014cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009a19  00000000  00000000  0003a3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bdce  00000000  00000000  00043df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024b0  00000000  00000000  0004fbc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d9e  00000000  00000000  00052078  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017ce0  00000000  00000000  00055e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006daf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001950  00000000  00000000  0006db28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000729fe  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00072a01  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072a04  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072a05  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00072a06  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00072a0a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00072a0e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00072a12  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00072a1b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00072a24  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00072a2d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000032  00000000  00000000  00072a35  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c3b  00000000  00000000  00072a67  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004bc64  00000000  00000000  000776a2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00810d00 l    d  .rodata	00000000 .rodata
00811130 l    d  .rwdata	00000000 .rwdata
008148e0 l    d  .bss	00000000 .bss
00814a40 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../dma_access_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00800290 l     F .text	00000068 alt_dma_txchan_send
008002f8 l     F .text	00000058 alt_dma_txchan_ioctl
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00810f72 l     O .rodata	00000010 zeroes.4404
00803f64 l     F .text	000000bc __sbprintf
00810f82 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00804174 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805ccc l     F .text	00000008 __fp_unlock
00805ce0 l     F .text	0000019c __sinit.part.1
00805e7c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00811538 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081197c l     O .rwdata	00000020 lc_ctype_charset
0081195c l     O .rwdata	00000020 lc_message_charset
0081199c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00810fb4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00808af0 l     F .text	000000fc __sprint_r.part.0
008110d8 l     O .rodata	00000010 zeroes.4349
0080a12c l     F .text	000000bc __sbprintf
008110e8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d788 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080d89c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
0080d8c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080d9e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080dadc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080dbc4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080dcb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080de8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00812cf0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080e100 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080e23c l     F .text	00000034 alt_dev_reg
00811b7c l     O .rwdata	000000a4 dma_priv
00811c20 l     O .rwdata	0000001c dma_tx
00811c3c l     O .rwdata	0000001c dma_rx
00811c58 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
0080e330 l     F .text	00000034 alt_dma_txchan_reg
0080e364 l     F .text	00000034 alt_dma_rxchan_reg
0080e490 l     F .text	0000009c alt_avalon_dma_launch_txonly
0080e52c l     F .text	0000009c alt_avalon_dma_launch_rxonly
0080e5c8 l     F .text	00000344 alt_avalon_dma_ioctl
0080ec80 l     F .text	000001c0 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080f118 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080f324 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080f95c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080fbc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
0080fca4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008100c8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00810228 l     F .text	0000003c alt_get_errno
00810264 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00814914 g     O .bss	00000004 alt_instruction_exception_handler
00808188 g     F .text	00000074 _mprec_log10
00808274 g     F .text	0000008c __any_on
0080a6e0 g     F .text	00000054 _isatty_r
00810fc0 g     O .rodata	00000028 __mprec_tinytens
0080ddc8 g     F .text	0000007c alt_main
00801aac g     F .text	000000c0 _puts_r
00814940 g     O .bss	00000100 alt_irq
0080a734 g     F .text	00000060 _lseek_r
00812d08 g       *ABS*	00000000 __flash_rwdata_start
0080c2a0 g     F .text	00000088 .hidden __eqdf2
00814a40 g       *ABS*	00000000 __alt_heap_start
00801a70 g     F .text	0000003c printf
008003e8 g     F .text	00000080 doneCallback
0080a94c g     F .text	0000009c _wcrtomb_r
008089b0 g     F .text	0000005c __sseek
0080602c g     F .text	00000010 __sinit
0080ee40 g     F .text	000000b4 alt_avalon_dma_init
0080a7f4 g     F .text	00000140 __swbuf_r
00806b00 g     F .text	0000007c _setlocale_r
00805e84 g     F .text	00000078 __sfmoreglue
0080de68 g     F .text	00000024 __malloc_unlock
00806fc4 g     F .text	0000015c memmove
00806014 g     F .text	00000018 _cleanup
00807248 g     F .text	000000a8 _Balloc
00800608 g     F .text	00000070 .hidden __fixsfsi
0080c328 g     F .text	000000dc .hidden __gtdf2
00810650 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080a684 g     F .text	0000005c _fstat_r
008148ec g     O .bss	00000004 errno
0080892c g     F .text	00000008 __seofread
00814900 g     O .bss	00000004 alt_argv
0081acb8 g       *ABS*	00000000 _gp
0080d904 g     F .text	00000054 alt_dma_txchan_open
008119fc g     O .rwdata	00000180 alt_fd_list
0080d958 g     F .text	00000090 alt_find_dev
00806e7c g     F .text	00000148 memcpy
00805cd4 g     F .text	0000000c _cleanup_r
00800f24 g     F .text	000000dc .hidden __floatsidf
008101ac g     F .text	0000007c alt_io_redirect
0080c404 g     F .text	000000f4 .hidden __ltdf2
00810d00 g       *ABS*	00000000 __DTOR_END__
00801b6c g     F .text	00000014 puts
008108d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00808864 g     F .text	00000074 __fpclassifyd
008080e4 g     F .text	000000a4 __ratio
0080a110 g     F .text	0000001c __vfiprintf_internal
0080f51c g     F .text	0000021c altera_avalon_jtag_uart_read
0080120c g     F .text	00000014 malloc
00801a40 g     F .text	00000030 _printf_r
0080b7ec g     F .text	00000064 .hidden __udivsi3
0080db18 g     F .text	000000ac isatty
00811010 g     O .rodata	000000c8 __mprec_tens
00806b7c g     F .text	0000000c __locale_charset
00810840 g     F .text	00000090 alt_icache_flush
008148e8 g     O .bss	00000004 __malloc_top_pad
00812cc8 g     O .rwdata	00000004 __mb_cur_max
00806bac g     F .text	0000000c _localeconv_r
0080767c g     F .text	0000003c __i2b
008064b0 g     F .text	000004c8 __sfvwrite_r
00801b80 g     F .text	00000054 _sbrk_r
0080a794 g     F .text	00000060 _read_r
00812ce0 g     O .rwdata	00000004 alt_max_fd
0080a378 g     F .text	000000f0 _fclose_r
00805c9c g     F .text	00000030 fflush
008148e4 g     O .bss	00000004 __malloc_max_sbrked_mem
00800678 g     F .text	000008ac .hidden __adddf3
0080e398 g     F .text	000000f8 alt_avalon_dma_launch_bidir
00807e8c g     F .text	0000010c __b2d
0080fce0 g     F .text	00000054 alt_dma_rxchan_open
0080b130 g     F .text	000005c4 .hidden __umoddi3
0080dcec g     F .text	000000dc lseek
00812cc0 g     O .rwdata	00000004 _global_impure_ptr
00808300 g     F .text	00000564 _realloc_r
00814a40 g       *ABS*	00000000 __bss_end
0080ffd8 g     F .text	000000f0 alt_iic_isr_register
00810548 g     F .text	00000108 alt_tick
0080ab34 g     F .text	000005fc .hidden __udivdi3
0080a5e0 g     F .text	00000024 _fputwc_r
00810fe8 g     O .rodata	00000028 __mprec_bigtens
00807460 g     F .text	00000104 __s2b
0080d6e0 g     F .text	000000a8 .hidden __floatunsidf
00807bcc g     F .text	00000060 __mcmp
0080604c g     F .text	00000018 __fp_lock_all
0080ff8c g     F .text	0000004c alt_ic_irq_enabled
008104ac g     F .text	0000009c alt_alarm_stop
00814908 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
008119d4 g     O .rwdata	00000028 alt_dev_null
0080fb7c g     F .text	00000048 alt_dcache_flush_all
00807564 g     F .text	00000068 __hi0bits
0080d660 g     F .text	00000080 .hidden __fixdfsi
00812d08 g       *ABS*	00000000 __ram_rwdata_end
00812cd8 g     O .rwdata	00000008 alt_dev_list
0080ead4 g     F .text	00000074 alt_avalon_dma_space
0080e13c g     F .text	00000100 write
00811130 g       *ABS*	00000000 __ram_rodata_end
0080da24 g     F .text	000000b8 fstat
0080c404 g     F .text	000000f4 .hidden __ledf2
00807944 g     F .text	00000140 __pow5mult
00808c04 g     F .text	0000150c ___vfiprintf_internal_r
008148f8 g     O .bss	00000004 __nlocale_changed
0080b850 g     F .text	00000058 .hidden __umodsi3
00814a40 g       *ABS*	00000000 end
0080f058 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00810d00 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080f9d4 g     F .text	0000007c alt_avalon_timer_sc_init
008011a8 g     F .text	00000064 .hidden __clzsi2
0080f738 g     F .text	00000224 altera_avalon_jtag_uart_write
0080603c g     F .text	00000004 __sfp_lock_acquire
00806d98 g     F .text	000000e4 memchr
00801c6c g     F .text	000022dc ___vfprintf_internal_r
008061a0 g     F .text	00000310 _free_r
00806b88 g     F .text	00000010 __locale_mb_cur_max
0080eb48 g     F .text	00000138 alt_avalon_dma_send
00810b4c g     F .text	00000180 __call_exitprocs
00812ce4 g     O .rwdata	00000008 alt_dma_txchan_list
008148f4 g     O .bss	00000004 __mlocale_changed
00812cb8 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081490c g     O .bss	00000004 _alt_tick_rate
00807a84 g     F .text	00000148 __lshift
00814910 g     O .bss	00000004 _alt_nticks
0080dec8 g     F .text	00000104 read
0080e2a8 g     F .text	00000088 alt_sys_init
00810a34 g     F .text	00000118 __register_exitproc
008076b8 g     F .text	0000028c __multiply
0080f3c4 g     F .text	00000068 altera_avalon_jtag_uart_close
0080b8a8 g     F .text	00000028 .hidden __mulsi3
00811130 g       *ABS*	00000000 __ram_rwdata_start
00810d00 g       *ABS*	00000000 __ram_rodata_start
00814918 g     O .bss	00000028 __malloc_current_mallinfo
00807f98 g     F .text	0000014c __d2b
0080eef4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081077c g     F .text	000000c4 alt_get_fd
0080a248 g     F .text	00000054 _close_r
008109b8 g     F .text	0000007c memcmp
0080efb4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00814a40 g       *ABS*	00000000 __alt_stack_base
0080f004 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00804020 g     F .text	00000154 __swsetup_r
0080b8d0 g     F .text	000009d0 .hidden __divdf3
00805efc g     F .text	00000118 __sfp
008081fc g     F .text	00000078 __copybits
00811130 g     O .rwdata	00000408 __malloc_av_
00806048 g     F .text	00000004 __sinit_lock_release
0080c4f8 g     F .text	0000086c .hidden __muldf3
008088d8 g     F .text	00000054 __sread
00810674 g     F .text	00000108 alt_find_file
0080fc00 g     F .text	000000a4 alt_dev_llist_insert
0080de44 g     F .text	00000024 __malloc_lock
0080e050 g     F .text	000000b0 sbrk
00805c40 g     F .text	0000005c _fflush_r
0080a29c g     F .text	000000dc _calloc_r
008148e0 g       *ABS*	00000000 __bss_start
00807120 g     F .text	00000128 memset
00800468 g     F .text	000001a0 main
0080e954 g     F .text	00000048 alt_avalon_dma_rx_ioctl
00814904 g     O .bss	00000004 alt_envp
008148e0 g     O .bss	00000004 __malloc_max_total_mem
0080ef54 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080a934 g     F .text	00000018 __swbuf
00808a0c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080a468 g     F .text	00000014 fclose
00801000 g     F .text	000001a8 .hidden __truncdfsf2
0080439c g     F .text	00001688 _dtoa_r
00801234 g     F .text	0000080c _malloc_r
0080aaa8 g     F .text	00000030 __ascii_wctomb
00812cec g     O .rwdata	00000004 alt_errno
00806978 g     F .text	000000c4 _fwalk
0080b6f4 g     F .text	00000084 .hidden __divsi3
0080607c g     F .text	00000124 _malloc_trim_r
00810d00 g       *ABS*	00000000 __CTOR_END__
00808a14 g     F .text	000000dc strcmp
00810d00 g       *ABS*	00000000 __flash_rodata_start
00810d00 g       *ABS*	00000000 __DTOR_LIST__
0080c2a0 g     F .text	00000088 .hidden __nedf2
0080e270 g     F .text	00000038 alt_irq_init
0080dfcc g     F .text	00000084 alt_release_fd
00810e2b g     O .rodata	00000100 .hidden __clz_tab
008148f0 g     O .bss	00000004 _PathLocale
0081096c g     F .text	00000014 atexit
0080a1e8 g     F .text	00000060 _write_r
00806bb8 g     F .text	00000018 setlocale
00812cc4 g     O .rwdata	00000004 _impure_ptr
008148fc g     O .bss	00000004 alt_argc
00805a24 g     F .text	0000021c __sflush_r
0080fd94 g     F .text	00000060 _do_dtors
00806ba4 g     F .text	00000008 __locale_cjk_lang
00800020 g       .exceptions	00000000 alt_irq_entry
00800350 g     F .text	00000098 dma_check
00807e28 g     F .text	00000064 __ulp
00806064 g     F .text	00000018 __fp_unlock_all
00812cd0 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806bd0 g     F .text	0000000c localeconv
0080fe28 g     F .text	00000050 alt_ic_isr_register
00812d08 g       *ABS*	00000000 _edata
00814a40 g       *ABS*	00000000 _end
0080a47c g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080f42c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080ff00 g     F .text	0000008c alt_ic_irq_disable
00808934 g     F .text	0000007c __swrite
00812cbc g     O .rwdata	00000004 __malloc_trim_threshold
00806b98 g     F .text	0000000c __locale_msgcharset
00810980 g     F .text	00000038 exit
00806a3c g     F .text	000000c4 _fwalk_reent
00807c2c g     F .text	000001fc __mdiff
0080b778 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806040 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00810ccc g     F .text	00000034 _exit
0080fa50 g     F .text	0000012c alt_alarm_start
00806bdc g     F .text	000001bc __smakebuf_r
00801bd4 g     F .text	00000098 strlen
00810350 g     F .text	0000015c open
0080c328 g     F .text	000000dc .hidden __gedf2
00812ccc g     O .rwdata	00000004 __wctomb
00808bec g     F .text	00000018 __sprint_r
0080fdf4 g     F .text	00000034 alt_icache_flush_all
00812cfc g     O .rwdata	00000004 alt_priority_mask
0080fe78 g     F .text	00000088 alt_ic_irq_enable
00803f48 g     F .text	0000001c __vfprintf_internal
0080aad8 g     F .text	0000005c _wctomb_r
0080e99c g     F .text	00000138 alt_avalon_dma_prepare
0080cd64 g     F .text	000008fc .hidden __subdf3
00812cf4 g     O .rwdata	00000008 alt_dma_rxchan_list
008075cc g     F .text	000000b0 __lo0bits
00812d00 g     O .rwdata	00000008 alt_alarm_list
0080fd34 g     F .text	00000060 _do_ctors
0080a9e8 g     F .text	000000c0 wcrtomb
0080d7c4 g     F .text	000000d8 close
0080dc2c g     F .text	00000084 alt_load
0080e90c g     F .text	00000048 alt_avalon_dma_tx_ioctl
0080a604 g     F .text	00000080 fputwc
00801220 g     F .text	00000014 free
00806044 g     F .text	00000004 __sinit_lock_acquire
00807318 g     F .text	00000148 __multadd
008072f0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10925004 	addi	r2,r2,18752
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10925004 	addi	r2,r2,18752
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a71717 	ldw	r2,-25508(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a71717 	ldw	r2,-25508(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6ab2e14 	ori	gp,gp,44216
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10923814 	ori	r2,r2,18656

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18d29014 	ori	r3,r3,19008

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080dc2c0 	call	80dc2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080ddc80 	call	80ddc8 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  800290:	defff904 	addi	sp,sp,-28
  800294:	dfc00615 	stw	ra,24(sp)
  800298:	df000515 	stw	fp,20(sp)
  80029c:	df000504 	addi	fp,sp,20
  8002a0:	e13ffc15 	stw	r4,-16(fp)
  8002a4:	e17ffd15 	stw	r5,-12(fp)
  8002a8:	e1bffe15 	stw	r6,-8(fp)
  8002ac:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->dma_send (dma, 
        from, 
        length,
        done, 
        handle) : -ENODEV;
  8002b0:	e0bffc17 	ldw	r2,-16(fp)
  8002b4:	10000a26 	beq	r2,zero,8002e0 <alt_dma_txchan_send+0x50>
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
  8002b8:	e0bffc17 	ldw	r2,-16(fp)
  8002bc:	10800417 	ldw	r2,16(r2)
        from, 
        length,
        done, 
        handle) : -ENODEV;
  8002c0:	e0c00217 	ldw	r3,8(fp)
  8002c4:	d8c00015 	stw	r3,0(sp)
  8002c8:	e1ffff17 	ldw	r7,-4(fp)
  8002cc:	e1bffe17 	ldw	r6,-8(fp)
  8002d0:	e17ffd17 	ldw	r5,-12(fp)
  8002d4:	e13ffc17 	ldw	r4,-16(fp)
  8002d8:	103ee83a 	callr	r2
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
  8002dc:	00000106 	br	8002e4 <alt_dma_txchan_send+0x54>
        from, 
        length,
        done, 
        handle) : -ENODEV;
  8002e0:	00bffb44 	movi	r2,-19
}
  8002e4:	e037883a 	mov	sp,fp
  8002e8:	dfc00117 	ldw	ra,4(sp)
  8002ec:	df000017 	ldw	fp,0(sp)
  8002f0:	dec00204 	addi	sp,sp,8
  8002f4:	f800283a 	ret

008002f8 <alt_dma_txchan_ioctl>:
 */

static ALT_INLINE int alt_dma_txchan_ioctl (alt_dma_txchan dma, 
              int            req, 
              void*          arg)
{
  8002f8:	defffb04 	addi	sp,sp,-20
  8002fc:	dfc00415 	stw	ra,16(sp)
  800300:	df000315 	stw	fp,12(sp)
  800304:	df000304 	addi	fp,sp,12
  800308:	e13ffd15 	stw	r4,-12(fp)
  80030c:	e17ffe15 	stw	r5,-8(fp)
  800310:	e1bfff15 	stw	r6,-4(fp)
  return dma ? dma->ioctl (dma, req, arg) : -ENODEV;
  800314:	e0bffd17 	ldw	r2,-12(fp)
  800318:	10000726 	beq	r2,zero,800338 <alt_dma_txchan_ioctl+0x40>
  80031c:	e0bffd17 	ldw	r2,-12(fp)
  800320:	10800517 	ldw	r2,20(r2)
  800324:	e1bfff17 	ldw	r6,-4(fp)
  800328:	e17ffe17 	ldw	r5,-8(fp)
  80032c:	e13ffd17 	ldw	r4,-12(fp)
  800330:	103ee83a 	callr	r2
  800334:	00000106 	br	80033c <alt_dma_txchan_ioctl+0x44>
  800338:	00bffb44 	movi	r2,-19
}
  80033c:	e037883a 	mov	sp,fp
  800340:	dfc00117 	ldw	ra,4(sp)
  800344:	df000017 	ldw	fp,0(sp)
  800348:	dec00204 	addi	sp,sp,8
  80034c:	f800283a 	ret

00800350 <dma_check>:
#define DMA_STATUS() printf("Status: %u\n", IORD_ALTERA_AVALON_DMA_STATUS(DMA_BASE))

#define ALT_CI_DMA_ACCESS_0(A,B) __builtin_custom_fnff(ALT_CI_DMA_ACCESS_0_N,(A),(B))

void dma_check()
{
  800350:	defffb04 	addi	sp,sp,-20
  800354:	dfc00415 	stw	ra,16(sp)
  800358:	df000315 	stw	fp,12(sp)
  80035c:	df000304 	addi	fp,sp,12
  int STATUS_MASK = 0x11111;
  800360:	00800074 	movhi	r2,1
  800364:	10844444 	addi	r2,r2,4369
  800368:	e0bfff15 	stw	r2,-4(fp)

  printf("readaddress: %x, writeaddress: %x, length: %x, status: %x, control: %x\n",
  80036c:	00804034 	movhi	r2,256
  800370:	10840904 	addi	r2,r2,4132
  800374:	11000037 	ldwio	r4,0(r2)
  800378:	00804034 	movhi	r2,256
  80037c:	10840a04 	addi	r2,r2,4136
  800380:	11400037 	ldwio	r5,0(r2)
  800384:	00804034 	movhi	r2,256
  800388:	10840b04 	addi	r2,r2,4140
  80038c:	11800037 	ldwio	r6,0(r2)
      IORD_ALTERA_AVALON_DMA_RADDRESS(DMA_BASE),
      IORD_ALTERA_AVALON_DMA_WADDRESS(DMA_BASE),
      IORD_ALTERA_AVALON_DMA_LENGTH(DMA_BASE),
      IORD_ALTERA_AVALON_DMA_STATUS(DMA_BASE) & STATUS_MASK,
  800390:	00804034 	movhi	r2,256
  800394:	10840804 	addi	r2,r2,4128
  800398:	10c00037 	ldwio	r3,0(r2)

void dma_check()
{
  int STATUS_MASK = 0x11111;

  printf("readaddress: %x, writeaddress: %x, length: %x, status: %x, control: %x\n",
  80039c:	e0bfff17 	ldw	r2,-4(fp)
  8003a0:	1886703a 	and	r3,r3,r2
  8003a4:	00804034 	movhi	r2,256
  8003a8:	10840e04 	addi	r2,r2,4152
  8003ac:	10800037 	ldwio	r2,0(r2)
  8003b0:	d8800115 	stw	r2,4(sp)
  8003b4:	d8c00015 	stw	r3,0(sp)
  8003b8:	300f883a 	mov	r7,r6
  8003bc:	280d883a 	mov	r6,r5
  8003c0:	200b883a 	mov	r5,r4
  8003c4:	01002074 	movhi	r4,129
  8003c8:	21034004 	addi	r4,r4,3328
  8003cc:	0801a700 	call	801a70 <printf>
      IORD_ALTERA_AVALON_DMA_WADDRESS(DMA_BASE),
      IORD_ALTERA_AVALON_DMA_LENGTH(DMA_BASE),
      IORD_ALTERA_AVALON_DMA_STATUS(DMA_BASE) & STATUS_MASK,
      IORD_ALTERA_AVALON_DMA_CONTROL(DMA_BASE)
      );
}
  8003d0:	0001883a 	nop
  8003d4:	e037883a 	mov	sp,fp
  8003d8:	dfc00117 	ldw	ra,4(sp)
  8003dc:	df000017 	ldw	fp,0(sp)
  8003e0:	dec00204 	addi	sp,sp,8
  8003e4:	f800283a 	ret

008003e8 <doneCallback>:

void doneCallback(void *handle)
{
  8003e8:	defffc04 	addi	sp,sp,-16
  8003ec:	dfc00315 	stw	ra,12(sp)
  8003f0:	df000215 	stw	fp,8(sp)
  8003f4:	df000204 	addi	fp,sp,8
  8003f8:	e13fff15 	stw	r4,-4(fp)
  dma_check();
  8003fc:	08003500 	call	800350 <dma_check>
  printf("done\n");
  800400:	01002074 	movhi	r4,129
  800404:	21035204 	addi	r4,r4,3400
  800408:	0801b6c0 	call	801b6c <puts>

  int res = ALT_CI_DMA_ACCESS_0(10.0, 10.0);
  80040c:	00904834 	movhi	r2,16672
  800410:	00d04834 	movhi	r3,16672
  800414:	10c5c032 	custom	0,r2,r2,r3
  800418:	1009883a 	mov	r4,r2
  80041c:	08006080 	call	800608 <__fixsfsi>
  800420:	e0bffe15 	stw	r2,-8(fp)

  printf("res: %d\n", res);
  800424:	e17ffe17 	ldw	r5,-8(fp)
  800428:	01002074 	movhi	r4,129
  80042c:	21035404 	addi	r4,r4,3408
  800430:	0801a700 	call	801a70 <printf>
  DMA_STATUS();
  800434:	00804034 	movhi	r2,256
  800438:	10840804 	addi	r2,r2,4128
  80043c:	10800037 	ldwio	r2,0(r2)
  800440:	100b883a 	mov	r5,r2
  800444:	01002074 	movhi	r4,129
  800448:	21035704 	addi	r4,r4,3420
  80044c:	0801a700 	call	801a70 <printf>
}
  800450:	0001883a 	nop
  800454:	e037883a 	mov	sp,fp
  800458:	dfc00117 	ldw	ra,4(sp)
  80045c:	df000017 	ldw	fp,0(sp)
  800460:	dec00204 	addi	sp,sp,8
  800464:	f800283a 	ret

00800468 <main>:

int main()
{
  800468:	defff704 	addi	sp,sp,-36
  80046c:	dfc00815 	stw	ra,32(sp)
  800470:	df000715 	stw	fp,28(sp)
  800474:	dc000615 	stw	r16,24(sp)
  800478:	df000704 	addi	fp,sp,28
  printf("Hello from Nios II!\n");
  80047c:	01002074 	movhi	r4,129
  800480:	21035a04 	addi	r4,r4,3432
  800484:	0801b6c0 	call	801b6c <puts>

  // allocate memory for data to be sent over DMA
  int *a = (int*) malloc(sizeof(int));
  800488:	01000104 	movi	r4,4
  80048c:	080120c0 	call	80120c <malloc>
  800490:	e0bffb15 	stw	r2,-20(fp)
  if (a == NULL)
  800494:	e0bffb17 	ldw	r2,-20(fp)
  800498:	1000051e 	bne	r2,zero,8004b0 <main+0x48>
  {
    printf("Memory allocation failed for int\n");
  80049c:	01002074 	movhi	r4,129
  8004a0:	21035f04 	addi	r4,r4,3452
  8004a4:	0801b6c0 	call	801b6c <puts>
    return 1;
  8004a8:	00800044 	movi	r2,1
  8004ac:	00005006 	br	8005f0 <main+0x188>
  }
  *a = 94;
  8004b0:	e0bffb17 	ldw	r2,-20(fp)
  8004b4:	00c01784 	movi	r3,94
  8004b8:	10c00015 	stw	r3,0(r2)

  // array
  float *b = (float*) malloc(10 * sizeof(float));
  8004bc:	01000a04 	movi	r4,40
  8004c0:	080120c0 	call	80120c <malloc>
  8004c4:	e0bffc15 	stw	r2,-16(fp)
  if (b == NULL)
  8004c8:	e0bffc17 	ldw	r2,-16(fp)
  8004cc:	1000051e 	bne	r2,zero,8004e4 <main+0x7c>
  {
    printf("Memory allocation failed for array \n");
  8004d0:	01002074 	movhi	r4,129
  8004d4:	21036804 	addi	r4,r4,3488
  8004d8:	0801b6c0 	call	801b6c <puts>
    return 1;
  8004dc:	00800044 	movi	r2,1
  8004e0:	00004306 	br	8005f0 <main+0x188>
  }

  // fill the array with data
  for (int i = 0; i < 10; i++) {
  8004e4:	e03ffa15 	stw	zero,-24(fp)
  8004e8:	00001b06 	br	800558 <main+0xf0>
    b[i] = i + 1.0;
  8004ec:	e0bffa17 	ldw	r2,-24(fp)
  8004f0:	1085883a 	add	r2,r2,r2
  8004f4:	1085883a 	add	r2,r2,r2
  8004f8:	1007883a 	mov	r3,r2
  8004fc:	e0bffc17 	ldw	r2,-16(fp)
  800500:	10e1883a 	add	r16,r2,r3
  800504:	e13ffa17 	ldw	r4,-24(fp)
  800508:	0800f240 	call	800f24 <__floatsidf>
  80050c:	1011883a 	mov	r8,r2
  800510:	1813883a 	mov	r9,r3
  800514:	000d883a 	mov	r6,zero
  800518:	01cffc34 	movhi	r7,16368
  80051c:	4009883a 	mov	r4,r8
  800520:	480b883a 	mov	r5,r9
  800524:	08006780 	call	800678 <__adddf3>
  800528:	1009883a 	mov	r4,r2
  80052c:	180b883a 	mov	r5,r3
  800530:	2005883a 	mov	r2,r4
  800534:	2807883a 	mov	r3,r5
  800538:	1009883a 	mov	r4,r2
  80053c:	180b883a 	mov	r5,r3
  800540:	08010000 	call	801000 <__truncdfsf2>
  800544:	1007883a 	mov	r3,r2
  800548:	80c00015 	stw	r3,0(r16)
    printf("Memory allocation failed for array \n");
    return 1;
  }

  // fill the array with data
  for (int i = 0; i < 10; i++) {
  80054c:	e0bffa17 	ldw	r2,-24(fp)
  800550:	10800044 	addi	r2,r2,1
  800554:	e0bffa15 	stw	r2,-24(fp)
  800558:	e0bffa17 	ldw	r2,-24(fp)
  80055c:	10800290 	cmplti	r2,r2,10
  800560:	103fe21e 	bne	r2,zero,8004ec <__alt_data_end+0xff8004ec>
  }


  // open TX channel of DMA
  alt_dma_txchan tx;
  tx = alt_dma_txchan_open ("/dev/dma");
  800564:	01002074 	movhi	r4,129
  800568:	21037104 	addi	r4,r4,3524
  80056c:	080d9040 	call	80d904 <alt_dma_txchan_open>
  800570:	e0bffd15 	stw	r2,-12(fp)
  if (tx == NULL)
  800574:	e0bffd17 	ldw	r2,-12(fp)
  800578:	1000041e 	bne	r2,zero,80058c <main+0x124>
  {
    printf("Failed to open DMA channel\n");
  80057c:	01002074 	movhi	r4,129
  800580:	21037404 	addi	r4,r4,3536
  800584:	0801b6c0 	call	801b6c <puts>
  800588:	00001606 	br	8005e4 <main+0x17c>
  else
  {

    // ALT_DMA_TX_ONLY_ON is an integer specifying the control command to be execuded 
    // parameters = channel, control command and pointer for additional control commands
    alt_dma_txchan_ioctl(tx, ALT_DMA_TX_ONLY_ON, 0);
  80058c:	000d883a 	mov	r6,zero
  800590:	014000c4 	movi	r5,3
  800594:	e13ffd17 	ldw	r4,-12(fp)
  800598:	08002f80 	call	8002f8 <alt_dma_txchan_ioctl>
    //alt_dma_txchan_ioctl(tx, ALT_DMA_SET_MODE_32, NULL);
    dma_check();
  80059c:	08003500 	call	800350 <dma_check>

    // initiate data transfer over DMA
    // parameters = channel, data (pointer to data), size of data, callback function, pointer for callback function
    //int ret = alt_dma_txchan_send(tx, a, sizeof(int), doneCallback, NULL);
    int ret = alt_dma_txchan_send(tx, b, 10 * sizeof(float), doneCallback, NULL);
  8005a0:	d8000015 	stw	zero,0(sp)
  8005a4:	01c02034 	movhi	r7,128
  8005a8:	39c0fa04 	addi	r7,r7,1000
  8005ac:	01800a04 	movi	r6,40
  8005b0:	e17ffc17 	ldw	r5,-16(fp)
  8005b4:	e13ffd17 	ldw	r4,-12(fp)
  8005b8:	08002900 	call	800290 <alt_dma_txchan_send>
  8005bc:	e0bffe15 	stw	r2,-8(fp)
    if (ret < 0) {
  8005c0:	e0bffe17 	ldw	r2,-8(fp)
  8005c4:	1000040e 	bge	r2,zero,8005d8 <main+0x170>
      printf("Failed to send data over DMA channel\n");
  8005c8:	01002074 	movhi	r4,129
  8005cc:	21037b04 	addi	r4,r4,3564
  8005d0:	0801b6c0 	call	801b6c <puts>
  8005d4:	00000306 	br	8005e4 <main+0x17c>
    } else {
      printf("Data sent successfully\n");
  8005d8:	01002074 	movhi	r4,129
  8005dc:	21038504 	addi	r4,r4,3604
  8005e0:	0801b6c0 	call	801b6c <puts>
    }
  }

  // free allocated memory
  free(a);
  8005e4:	e13ffb17 	ldw	r4,-20(fp)
  8005e8:	08012200 	call	801220 <free>
  return 0;
  8005ec:	0005883a 	mov	r2,zero
}
  8005f0:	e6ffff04 	addi	sp,fp,-4
  8005f4:	dfc00217 	ldw	ra,8(sp)
  8005f8:	df000117 	ldw	fp,4(sp)
  8005fc:	dc000017 	ldw	r16,0(sp)
  800600:	dec00304 	addi	sp,sp,12
  800604:	f800283a 	ret

00800608 <__fixsfsi>:
  800608:	200ad5fa 	srli	r5,r4,23
  80060c:	00c02034 	movhi	r3,128
  800610:	18ffffc4 	addi	r3,r3,-1
  800614:	29403fcc 	andi	r5,r5,255
  800618:	00801f84 	movi	r2,126
  80061c:	1906703a 	and	r3,r3,r4
  800620:	2008d7fa 	srli	r4,r4,31
  800624:	11400e0e 	bge	r2,r5,800660 <__fixsfsi+0x58>
  800628:	00802744 	movi	r2,157
  80062c:	11400816 	blt	r2,r5,800650 <__fixsfsi+0x48>
  800630:	00802544 	movi	r2,149
  800634:	18c02034 	orhi	r3,r3,128
  800638:	11400b0e 	bge	r2,r5,800668 <__fixsfsi+0x60>
  80063c:	28bfda84 	addi	r2,r5,-150
  800640:	1884983a 	sll	r2,r3,r2
  800644:	20000726 	beq	r4,zero,800664 <__fixsfsi+0x5c>
  800648:	0085c83a 	sub	r2,zero,r2
  80064c:	f800283a 	ret
  800650:	00a00034 	movhi	r2,32768
  800654:	10bfffc4 	addi	r2,r2,-1
  800658:	2085883a 	add	r2,r4,r2
  80065c:	f800283a 	ret
  800660:	0005883a 	mov	r2,zero
  800664:	f800283a 	ret
  800668:	00802584 	movi	r2,150
  80066c:	1145c83a 	sub	r2,r2,r5
  800670:	1884d83a 	srl	r2,r3,r2
  800674:	003ff306 	br	800644 <__alt_data_end+0xff800644>

00800678 <__adddf3>:
  800678:	02c00434 	movhi	r11,16
  80067c:	5affffc4 	addi	r11,r11,-1
  800680:	2806d7fa 	srli	r3,r5,31
  800684:	2ad4703a 	and	r10,r5,r11
  800688:	3ad2703a 	and	r9,r7,r11
  80068c:	3804d53a 	srli	r2,r7,20
  800690:	3018d77a 	srli	r12,r6,29
  800694:	280ad53a 	srli	r5,r5,20
  800698:	501490fa 	slli	r10,r10,3
  80069c:	2010d77a 	srli	r8,r4,29
  8006a0:	481290fa 	slli	r9,r9,3
  8006a4:	380ed7fa 	srli	r7,r7,31
  8006a8:	defffb04 	addi	sp,sp,-20
  8006ac:	dc800215 	stw	r18,8(sp)
  8006b0:	dc400115 	stw	r17,4(sp)
  8006b4:	dc000015 	stw	r16,0(sp)
  8006b8:	dfc00415 	stw	ra,16(sp)
  8006bc:	dcc00315 	stw	r19,12(sp)
  8006c0:	1c803fcc 	andi	r18,r3,255
  8006c4:	2c01ffcc 	andi	r16,r5,2047
  8006c8:	5210b03a 	or	r8,r10,r8
  8006cc:	202290fa 	slli	r17,r4,3
  8006d0:	1081ffcc 	andi	r2,r2,2047
  8006d4:	4b12b03a 	or	r9,r9,r12
  8006d8:	300c90fa 	slli	r6,r6,3
  8006dc:	91c07526 	beq	r18,r7,8008b4 <__adddf3+0x23c>
  8006e0:	8087c83a 	sub	r3,r16,r2
  8006e4:	00c0ab0e 	bge	zero,r3,800994 <__adddf3+0x31c>
  8006e8:	10002a1e 	bne	r2,zero,800794 <__adddf3+0x11c>
  8006ec:	4984b03a 	or	r2,r9,r6
  8006f0:	1000961e 	bne	r2,zero,80094c <__adddf3+0x2d4>
  8006f4:	888001cc 	andi	r2,r17,7
  8006f8:	10000726 	beq	r2,zero,800718 <__adddf3+0xa0>
  8006fc:	888003cc 	andi	r2,r17,15
  800700:	00c00104 	movi	r3,4
  800704:	10c00426 	beq	r2,r3,800718 <__adddf3+0xa0>
  800708:	88c7883a 	add	r3,r17,r3
  80070c:	1c63803a 	cmpltu	r17,r3,r17
  800710:	4451883a 	add	r8,r8,r17
  800714:	1823883a 	mov	r17,r3
  800718:	4080202c 	andhi	r2,r8,128
  80071c:	10005926 	beq	r2,zero,800884 <__adddf3+0x20c>
  800720:	84000044 	addi	r16,r16,1
  800724:	0081ffc4 	movi	r2,2047
  800728:	8080ba26 	beq	r16,r2,800a14 <__adddf3+0x39c>
  80072c:	00bfe034 	movhi	r2,65408
  800730:	10bfffc4 	addi	r2,r2,-1
  800734:	4090703a 	and	r8,r8,r2
  800738:	4004977a 	slli	r2,r8,29
  80073c:	4010927a 	slli	r8,r8,9
  800740:	8822d0fa 	srli	r17,r17,3
  800744:	8401ffcc 	andi	r16,r16,2047
  800748:	4010d33a 	srli	r8,r8,12
  80074c:	9007883a 	mov	r3,r18
  800750:	1444b03a 	or	r2,r2,r17
  800754:	8401ffcc 	andi	r16,r16,2047
  800758:	8020953a 	slli	r16,r16,20
  80075c:	18c03fcc 	andi	r3,r3,255
  800760:	01000434 	movhi	r4,16
  800764:	213fffc4 	addi	r4,r4,-1
  800768:	180697fa 	slli	r3,r3,31
  80076c:	4110703a 	and	r8,r8,r4
  800770:	4410b03a 	or	r8,r8,r16
  800774:	40c6b03a 	or	r3,r8,r3
  800778:	dfc00417 	ldw	ra,16(sp)
  80077c:	dcc00317 	ldw	r19,12(sp)
  800780:	dc800217 	ldw	r18,8(sp)
  800784:	dc400117 	ldw	r17,4(sp)
  800788:	dc000017 	ldw	r16,0(sp)
  80078c:	dec00504 	addi	sp,sp,20
  800790:	f800283a 	ret
  800794:	0081ffc4 	movi	r2,2047
  800798:	80bfd626 	beq	r16,r2,8006f4 <__alt_data_end+0xff8006f4>
  80079c:	4a402034 	orhi	r9,r9,128
  8007a0:	00800e04 	movi	r2,56
  8007a4:	10c09f16 	blt	r2,r3,800a24 <__adddf3+0x3ac>
  8007a8:	008007c4 	movi	r2,31
  8007ac:	10c0c216 	blt	r2,r3,800ab8 <__adddf3+0x440>
  8007b0:	00800804 	movi	r2,32
  8007b4:	10c5c83a 	sub	r2,r2,r3
  8007b8:	488a983a 	sll	r5,r9,r2
  8007bc:	30c8d83a 	srl	r4,r6,r3
  8007c0:	3084983a 	sll	r2,r6,r2
  8007c4:	48c6d83a 	srl	r3,r9,r3
  8007c8:	290cb03a 	or	r6,r5,r4
  8007cc:	1004c03a 	cmpne	r2,r2,zero
  8007d0:	308cb03a 	or	r6,r6,r2
  8007d4:	898dc83a 	sub	r6,r17,r6
  8007d8:	89a3803a 	cmpltu	r17,r17,r6
  8007dc:	40d1c83a 	sub	r8,r8,r3
  8007e0:	4451c83a 	sub	r8,r8,r17
  8007e4:	3023883a 	mov	r17,r6
  8007e8:	4080202c 	andhi	r2,r8,128
  8007ec:	10002326 	beq	r2,zero,80087c <__adddf3+0x204>
  8007f0:	04c02034 	movhi	r19,128
  8007f4:	9cffffc4 	addi	r19,r19,-1
  8007f8:	44e6703a 	and	r19,r8,r19
  8007fc:	98007626 	beq	r19,zero,8009d8 <__adddf3+0x360>
  800800:	9809883a 	mov	r4,r19
  800804:	08011a80 	call	8011a8 <__clzsi2>
  800808:	10fffe04 	addi	r3,r2,-8
  80080c:	010007c4 	movi	r4,31
  800810:	20c07716 	blt	r4,r3,8009f0 <__adddf3+0x378>
  800814:	00800804 	movi	r2,32
  800818:	10c5c83a 	sub	r2,r2,r3
  80081c:	8884d83a 	srl	r2,r17,r2
  800820:	98d0983a 	sll	r8,r19,r3
  800824:	88e2983a 	sll	r17,r17,r3
  800828:	1204b03a 	or	r2,r2,r8
  80082c:	1c007416 	blt	r3,r16,800a00 <__adddf3+0x388>
  800830:	1c21c83a 	sub	r16,r3,r16
  800834:	82000044 	addi	r8,r16,1
  800838:	00c007c4 	movi	r3,31
  80083c:	1a009116 	blt	r3,r8,800a84 <__adddf3+0x40c>
  800840:	00c00804 	movi	r3,32
  800844:	1a07c83a 	sub	r3,r3,r8
  800848:	8a08d83a 	srl	r4,r17,r8
  80084c:	88e2983a 	sll	r17,r17,r3
  800850:	10c6983a 	sll	r3,r2,r3
  800854:	1210d83a 	srl	r8,r2,r8
  800858:	8804c03a 	cmpne	r2,r17,zero
  80085c:	1906b03a 	or	r3,r3,r4
  800860:	18a2b03a 	or	r17,r3,r2
  800864:	0021883a 	mov	r16,zero
  800868:	003fa206 	br	8006f4 <__alt_data_end+0xff8006f4>
  80086c:	1890b03a 	or	r8,r3,r2
  800870:	40017d26 	beq	r8,zero,800e68 <__adddf3+0x7f0>
  800874:	1011883a 	mov	r8,r2
  800878:	1823883a 	mov	r17,r3
  80087c:	888001cc 	andi	r2,r17,7
  800880:	103f9e1e 	bne	r2,zero,8006fc <__alt_data_end+0xff8006fc>
  800884:	4004977a 	slli	r2,r8,29
  800888:	8822d0fa 	srli	r17,r17,3
  80088c:	4010d0fa 	srli	r8,r8,3
  800890:	9007883a 	mov	r3,r18
  800894:	1444b03a 	or	r2,r2,r17
  800898:	0101ffc4 	movi	r4,2047
  80089c:	81002426 	beq	r16,r4,800930 <__adddf3+0x2b8>
  8008a0:	8120703a 	and	r16,r16,r4
  8008a4:	01000434 	movhi	r4,16
  8008a8:	213fffc4 	addi	r4,r4,-1
  8008ac:	4110703a 	and	r8,r8,r4
  8008b0:	003fa806 	br	800754 <__alt_data_end+0xff800754>
  8008b4:	8089c83a 	sub	r4,r16,r2
  8008b8:	01005e0e 	bge	zero,r4,800a34 <__adddf3+0x3bc>
  8008bc:	10002b26 	beq	r2,zero,80096c <__adddf3+0x2f4>
  8008c0:	0081ffc4 	movi	r2,2047
  8008c4:	80bf8b26 	beq	r16,r2,8006f4 <__alt_data_end+0xff8006f4>
  8008c8:	4a402034 	orhi	r9,r9,128
  8008cc:	00800e04 	movi	r2,56
  8008d0:	1100a40e 	bge	r2,r4,800b64 <__adddf3+0x4ec>
  8008d4:	498cb03a 	or	r6,r9,r6
  8008d8:	300ac03a 	cmpne	r5,r6,zero
  8008dc:	0013883a 	mov	r9,zero
  8008e0:	2c4b883a 	add	r5,r5,r17
  8008e4:	2c63803a 	cmpltu	r17,r5,r17
  8008e8:	4a11883a 	add	r8,r9,r8
  8008ec:	8a11883a 	add	r8,r17,r8
  8008f0:	2823883a 	mov	r17,r5
  8008f4:	4080202c 	andhi	r2,r8,128
  8008f8:	103fe026 	beq	r2,zero,80087c <__alt_data_end+0xff80087c>
  8008fc:	84000044 	addi	r16,r16,1
  800900:	0081ffc4 	movi	r2,2047
  800904:	8080d226 	beq	r16,r2,800c50 <__adddf3+0x5d8>
  800908:	00bfe034 	movhi	r2,65408
  80090c:	10bfffc4 	addi	r2,r2,-1
  800910:	4090703a 	and	r8,r8,r2
  800914:	880ad07a 	srli	r5,r17,1
  800918:	400897fa 	slli	r4,r8,31
  80091c:	88c0004c 	andi	r3,r17,1
  800920:	28e2b03a 	or	r17,r5,r3
  800924:	4010d07a 	srli	r8,r8,1
  800928:	2462b03a 	or	r17,r4,r17
  80092c:	003f7106 	br	8006f4 <__alt_data_end+0xff8006f4>
  800930:	4088b03a 	or	r4,r8,r2
  800934:	20014526 	beq	r4,zero,800e4c <__adddf3+0x7d4>
  800938:	01000434 	movhi	r4,16
  80093c:	42000234 	orhi	r8,r8,8
  800940:	213fffc4 	addi	r4,r4,-1
  800944:	4110703a 	and	r8,r8,r4
  800948:	003f8206 	br	800754 <__alt_data_end+0xff800754>
  80094c:	18ffffc4 	addi	r3,r3,-1
  800950:	1800491e 	bne	r3,zero,800a78 <__adddf3+0x400>
  800954:	898bc83a 	sub	r5,r17,r6
  800958:	8963803a 	cmpltu	r17,r17,r5
  80095c:	4251c83a 	sub	r8,r8,r9
  800960:	4451c83a 	sub	r8,r8,r17
  800964:	2823883a 	mov	r17,r5
  800968:	003f9f06 	br	8007e8 <__alt_data_end+0xff8007e8>
  80096c:	4984b03a 	or	r2,r9,r6
  800970:	103f6026 	beq	r2,zero,8006f4 <__alt_data_end+0xff8006f4>
  800974:	213fffc4 	addi	r4,r4,-1
  800978:	2000931e 	bne	r4,zero,800bc8 <__adddf3+0x550>
  80097c:	898d883a 	add	r6,r17,r6
  800980:	3463803a 	cmpltu	r17,r6,r17
  800984:	4251883a 	add	r8,r8,r9
  800988:	8a11883a 	add	r8,r17,r8
  80098c:	3023883a 	mov	r17,r6
  800990:	003fd806 	br	8008f4 <__alt_data_end+0xff8008f4>
  800994:	1800541e 	bne	r3,zero,800ae8 <__adddf3+0x470>
  800998:	80800044 	addi	r2,r16,1
  80099c:	1081ffcc 	andi	r2,r2,2047
  8009a0:	00c00044 	movi	r3,1
  8009a4:	1880a00e 	bge	r3,r2,800c28 <__adddf3+0x5b0>
  8009a8:	8989c83a 	sub	r4,r17,r6
  8009ac:	8905803a 	cmpltu	r2,r17,r4
  8009b0:	4267c83a 	sub	r19,r8,r9
  8009b4:	98a7c83a 	sub	r19,r19,r2
  8009b8:	9880202c 	andhi	r2,r19,128
  8009bc:	10006326 	beq	r2,zero,800b4c <__adddf3+0x4d4>
  8009c0:	3463c83a 	sub	r17,r6,r17
  8009c4:	4a07c83a 	sub	r3,r9,r8
  8009c8:	344d803a 	cmpltu	r6,r6,r17
  8009cc:	19a7c83a 	sub	r19,r3,r6
  8009d0:	3825883a 	mov	r18,r7
  8009d4:	983f8a1e 	bne	r19,zero,800800 <__alt_data_end+0xff800800>
  8009d8:	8809883a 	mov	r4,r17
  8009dc:	08011a80 	call	8011a8 <__clzsi2>
  8009e0:	10800804 	addi	r2,r2,32
  8009e4:	10fffe04 	addi	r3,r2,-8
  8009e8:	010007c4 	movi	r4,31
  8009ec:	20ff890e 	bge	r4,r3,800814 <__alt_data_end+0xff800814>
  8009f0:	10bff604 	addi	r2,r2,-40
  8009f4:	8884983a 	sll	r2,r17,r2
  8009f8:	0023883a 	mov	r17,zero
  8009fc:	1c3f8c0e 	bge	r3,r16,800830 <__alt_data_end+0xff800830>
  800a00:	023fe034 	movhi	r8,65408
  800a04:	423fffc4 	addi	r8,r8,-1
  800a08:	80e1c83a 	sub	r16,r16,r3
  800a0c:	1210703a 	and	r8,r2,r8
  800a10:	003f3806 	br	8006f4 <__alt_data_end+0xff8006f4>
  800a14:	9007883a 	mov	r3,r18
  800a18:	0011883a 	mov	r8,zero
  800a1c:	0005883a 	mov	r2,zero
  800a20:	003f4c06 	br	800754 <__alt_data_end+0xff800754>
  800a24:	498cb03a 	or	r6,r9,r6
  800a28:	300cc03a 	cmpne	r6,r6,zero
  800a2c:	0007883a 	mov	r3,zero
  800a30:	003f6806 	br	8007d4 <__alt_data_end+0xff8007d4>
  800a34:	20009c1e 	bne	r4,zero,800ca8 <__adddf3+0x630>
  800a38:	80800044 	addi	r2,r16,1
  800a3c:	1141ffcc 	andi	r5,r2,2047
  800a40:	01000044 	movi	r4,1
  800a44:	2140670e 	bge	r4,r5,800be4 <__adddf3+0x56c>
  800a48:	0101ffc4 	movi	r4,2047
  800a4c:	11007f26 	beq	r2,r4,800c4c <__adddf3+0x5d4>
  800a50:	898d883a 	add	r6,r17,r6
  800a54:	4247883a 	add	r3,r8,r9
  800a58:	3451803a 	cmpltu	r8,r6,r17
  800a5c:	40d1883a 	add	r8,r8,r3
  800a60:	402297fa 	slli	r17,r8,31
  800a64:	300cd07a 	srli	r6,r6,1
  800a68:	4010d07a 	srli	r8,r8,1
  800a6c:	1021883a 	mov	r16,r2
  800a70:	89a2b03a 	or	r17,r17,r6
  800a74:	003f1f06 	br	8006f4 <__alt_data_end+0xff8006f4>
  800a78:	0081ffc4 	movi	r2,2047
  800a7c:	80bf481e 	bne	r16,r2,8007a0 <__alt_data_end+0xff8007a0>
  800a80:	003f1c06 	br	8006f4 <__alt_data_end+0xff8006f4>
  800a84:	843ff844 	addi	r16,r16,-31
  800a88:	01000804 	movi	r4,32
  800a8c:	1406d83a 	srl	r3,r2,r16
  800a90:	41005026 	beq	r8,r4,800bd4 <__adddf3+0x55c>
  800a94:	01001004 	movi	r4,64
  800a98:	2211c83a 	sub	r8,r4,r8
  800a9c:	1204983a 	sll	r2,r2,r8
  800aa0:	88a2b03a 	or	r17,r17,r2
  800aa4:	8822c03a 	cmpne	r17,r17,zero
  800aa8:	1c62b03a 	or	r17,r3,r17
  800aac:	0011883a 	mov	r8,zero
  800ab0:	0021883a 	mov	r16,zero
  800ab4:	003f7106 	br	80087c <__alt_data_end+0xff80087c>
  800ab8:	193ff804 	addi	r4,r3,-32
  800abc:	00800804 	movi	r2,32
  800ac0:	4908d83a 	srl	r4,r9,r4
  800ac4:	18804526 	beq	r3,r2,800bdc <__adddf3+0x564>
  800ac8:	00801004 	movi	r2,64
  800acc:	10c5c83a 	sub	r2,r2,r3
  800ad0:	4886983a 	sll	r3,r9,r2
  800ad4:	198cb03a 	or	r6,r3,r6
  800ad8:	300cc03a 	cmpne	r6,r6,zero
  800adc:	218cb03a 	or	r6,r4,r6
  800ae0:	0007883a 	mov	r3,zero
  800ae4:	003f3b06 	br	8007d4 <__alt_data_end+0xff8007d4>
  800ae8:	80002a26 	beq	r16,zero,800b94 <__adddf3+0x51c>
  800aec:	0101ffc4 	movi	r4,2047
  800af0:	11006826 	beq	r2,r4,800c94 <__adddf3+0x61c>
  800af4:	00c7c83a 	sub	r3,zero,r3
  800af8:	42002034 	orhi	r8,r8,128
  800afc:	01000e04 	movi	r4,56
  800b00:	20c07c16 	blt	r4,r3,800cf4 <__adddf3+0x67c>
  800b04:	010007c4 	movi	r4,31
  800b08:	20c0da16 	blt	r4,r3,800e74 <__adddf3+0x7fc>
  800b0c:	01000804 	movi	r4,32
  800b10:	20c9c83a 	sub	r4,r4,r3
  800b14:	4114983a 	sll	r10,r8,r4
  800b18:	88cad83a 	srl	r5,r17,r3
  800b1c:	8908983a 	sll	r4,r17,r4
  800b20:	40c6d83a 	srl	r3,r8,r3
  800b24:	5162b03a 	or	r17,r10,r5
  800b28:	2008c03a 	cmpne	r4,r4,zero
  800b2c:	8922b03a 	or	r17,r17,r4
  800b30:	3463c83a 	sub	r17,r6,r17
  800b34:	48c7c83a 	sub	r3,r9,r3
  800b38:	344d803a 	cmpltu	r6,r6,r17
  800b3c:	1991c83a 	sub	r8,r3,r6
  800b40:	1021883a 	mov	r16,r2
  800b44:	3825883a 	mov	r18,r7
  800b48:	003f2706 	br	8007e8 <__alt_data_end+0xff8007e8>
  800b4c:	24d0b03a 	or	r8,r4,r19
  800b50:	40001b1e 	bne	r8,zero,800bc0 <__adddf3+0x548>
  800b54:	0005883a 	mov	r2,zero
  800b58:	0007883a 	mov	r3,zero
  800b5c:	0021883a 	mov	r16,zero
  800b60:	003f4d06 	br	800898 <__alt_data_end+0xff800898>
  800b64:	008007c4 	movi	r2,31
  800b68:	11003c16 	blt	r2,r4,800c5c <__adddf3+0x5e4>
  800b6c:	00800804 	movi	r2,32
  800b70:	1105c83a 	sub	r2,r2,r4
  800b74:	488e983a 	sll	r7,r9,r2
  800b78:	310ad83a 	srl	r5,r6,r4
  800b7c:	3084983a 	sll	r2,r6,r2
  800b80:	4912d83a 	srl	r9,r9,r4
  800b84:	394ab03a 	or	r5,r7,r5
  800b88:	1004c03a 	cmpne	r2,r2,zero
  800b8c:	288ab03a 	or	r5,r5,r2
  800b90:	003f5306 	br	8008e0 <__alt_data_end+0xff8008e0>
  800b94:	4448b03a 	or	r4,r8,r17
  800b98:	20003e26 	beq	r4,zero,800c94 <__adddf3+0x61c>
  800b9c:	00c6303a 	nor	r3,zero,r3
  800ba0:	18003a1e 	bne	r3,zero,800c8c <__adddf3+0x614>
  800ba4:	3463c83a 	sub	r17,r6,r17
  800ba8:	4a07c83a 	sub	r3,r9,r8
  800bac:	344d803a 	cmpltu	r6,r6,r17
  800bb0:	1991c83a 	sub	r8,r3,r6
  800bb4:	1021883a 	mov	r16,r2
  800bb8:	3825883a 	mov	r18,r7
  800bbc:	003f0a06 	br	8007e8 <__alt_data_end+0xff8007e8>
  800bc0:	2023883a 	mov	r17,r4
  800bc4:	003f0d06 	br	8007fc <__alt_data_end+0xff8007fc>
  800bc8:	0081ffc4 	movi	r2,2047
  800bcc:	80bf3f1e 	bne	r16,r2,8008cc <__alt_data_end+0xff8008cc>
  800bd0:	003ec806 	br	8006f4 <__alt_data_end+0xff8006f4>
  800bd4:	0005883a 	mov	r2,zero
  800bd8:	003fb106 	br	800aa0 <__alt_data_end+0xff800aa0>
  800bdc:	0007883a 	mov	r3,zero
  800be0:	003fbc06 	br	800ad4 <__alt_data_end+0xff800ad4>
  800be4:	4444b03a 	or	r2,r8,r17
  800be8:	8000871e 	bne	r16,zero,800e08 <__adddf3+0x790>
  800bec:	1000ba26 	beq	r2,zero,800ed8 <__adddf3+0x860>
  800bf0:	4984b03a 	or	r2,r9,r6
  800bf4:	103ebf26 	beq	r2,zero,8006f4 <__alt_data_end+0xff8006f4>
  800bf8:	8985883a 	add	r2,r17,r6
  800bfc:	4247883a 	add	r3,r8,r9
  800c00:	1451803a 	cmpltu	r8,r2,r17
  800c04:	40d1883a 	add	r8,r8,r3
  800c08:	40c0202c 	andhi	r3,r8,128
  800c0c:	1023883a 	mov	r17,r2
  800c10:	183f1a26 	beq	r3,zero,80087c <__alt_data_end+0xff80087c>
  800c14:	00bfe034 	movhi	r2,65408
  800c18:	10bfffc4 	addi	r2,r2,-1
  800c1c:	2021883a 	mov	r16,r4
  800c20:	4090703a 	and	r8,r8,r2
  800c24:	003eb306 	br	8006f4 <__alt_data_end+0xff8006f4>
  800c28:	4444b03a 	or	r2,r8,r17
  800c2c:	8000291e 	bne	r16,zero,800cd4 <__adddf3+0x65c>
  800c30:	10004b1e 	bne	r2,zero,800d60 <__adddf3+0x6e8>
  800c34:	4990b03a 	or	r8,r9,r6
  800c38:	40008b26 	beq	r8,zero,800e68 <__adddf3+0x7f0>
  800c3c:	4811883a 	mov	r8,r9
  800c40:	3023883a 	mov	r17,r6
  800c44:	3825883a 	mov	r18,r7
  800c48:	003eaa06 	br	8006f4 <__alt_data_end+0xff8006f4>
  800c4c:	1021883a 	mov	r16,r2
  800c50:	0011883a 	mov	r8,zero
  800c54:	0005883a 	mov	r2,zero
  800c58:	003f0f06 	br	800898 <__alt_data_end+0xff800898>
  800c5c:	217ff804 	addi	r5,r4,-32
  800c60:	00800804 	movi	r2,32
  800c64:	494ad83a 	srl	r5,r9,r5
  800c68:	20807d26 	beq	r4,r2,800e60 <__adddf3+0x7e8>
  800c6c:	00801004 	movi	r2,64
  800c70:	1109c83a 	sub	r4,r2,r4
  800c74:	4912983a 	sll	r9,r9,r4
  800c78:	498cb03a 	or	r6,r9,r6
  800c7c:	300cc03a 	cmpne	r6,r6,zero
  800c80:	298ab03a 	or	r5,r5,r6
  800c84:	0013883a 	mov	r9,zero
  800c88:	003f1506 	br	8008e0 <__alt_data_end+0xff8008e0>
  800c8c:	0101ffc4 	movi	r4,2047
  800c90:	113f9a1e 	bne	r2,r4,800afc <__alt_data_end+0xff800afc>
  800c94:	4811883a 	mov	r8,r9
  800c98:	3023883a 	mov	r17,r6
  800c9c:	1021883a 	mov	r16,r2
  800ca0:	3825883a 	mov	r18,r7
  800ca4:	003e9306 	br	8006f4 <__alt_data_end+0xff8006f4>
  800ca8:	8000161e 	bne	r16,zero,800d04 <__adddf3+0x68c>
  800cac:	444ab03a 	or	r5,r8,r17
  800cb0:	28005126 	beq	r5,zero,800df8 <__adddf3+0x780>
  800cb4:	0108303a 	nor	r4,zero,r4
  800cb8:	20004d1e 	bne	r4,zero,800df0 <__adddf3+0x778>
  800cbc:	89a3883a 	add	r17,r17,r6
  800cc0:	4253883a 	add	r9,r8,r9
  800cc4:	898d803a 	cmpltu	r6,r17,r6
  800cc8:	3251883a 	add	r8,r6,r9
  800ccc:	1021883a 	mov	r16,r2
  800cd0:	003f0806 	br	8008f4 <__alt_data_end+0xff8008f4>
  800cd4:	1000301e 	bne	r2,zero,800d98 <__adddf3+0x720>
  800cd8:	4984b03a 	or	r2,r9,r6
  800cdc:	10007126 	beq	r2,zero,800ea4 <__adddf3+0x82c>
  800ce0:	4811883a 	mov	r8,r9
  800ce4:	3023883a 	mov	r17,r6
  800ce8:	3825883a 	mov	r18,r7
  800cec:	0401ffc4 	movi	r16,2047
  800cf0:	003e8006 	br	8006f4 <__alt_data_end+0xff8006f4>
  800cf4:	4462b03a 	or	r17,r8,r17
  800cf8:	8822c03a 	cmpne	r17,r17,zero
  800cfc:	0007883a 	mov	r3,zero
  800d00:	003f8b06 	br	800b30 <__alt_data_end+0xff800b30>
  800d04:	0141ffc4 	movi	r5,2047
  800d08:	11403b26 	beq	r2,r5,800df8 <__adddf3+0x780>
  800d0c:	0109c83a 	sub	r4,zero,r4
  800d10:	42002034 	orhi	r8,r8,128
  800d14:	01400e04 	movi	r5,56
  800d18:	29006716 	blt	r5,r4,800eb8 <__adddf3+0x840>
  800d1c:	014007c4 	movi	r5,31
  800d20:	29007016 	blt	r5,r4,800ee4 <__adddf3+0x86c>
  800d24:	01400804 	movi	r5,32
  800d28:	290bc83a 	sub	r5,r5,r4
  800d2c:	4154983a 	sll	r10,r8,r5
  800d30:	890ed83a 	srl	r7,r17,r4
  800d34:	894a983a 	sll	r5,r17,r5
  800d38:	4108d83a 	srl	r4,r8,r4
  800d3c:	51e2b03a 	or	r17,r10,r7
  800d40:	280ac03a 	cmpne	r5,r5,zero
  800d44:	8962b03a 	or	r17,r17,r5
  800d48:	89a3883a 	add	r17,r17,r6
  800d4c:	2253883a 	add	r9,r4,r9
  800d50:	898d803a 	cmpltu	r6,r17,r6
  800d54:	3251883a 	add	r8,r6,r9
  800d58:	1021883a 	mov	r16,r2
  800d5c:	003ee506 	br	8008f4 <__alt_data_end+0xff8008f4>
  800d60:	4984b03a 	or	r2,r9,r6
  800d64:	103e6326 	beq	r2,zero,8006f4 <__alt_data_end+0xff8006f4>
  800d68:	8987c83a 	sub	r3,r17,r6
  800d6c:	88c9803a 	cmpltu	r4,r17,r3
  800d70:	4245c83a 	sub	r2,r8,r9
  800d74:	1105c83a 	sub	r2,r2,r4
  800d78:	1100202c 	andhi	r4,r2,128
  800d7c:	203ebb26 	beq	r4,zero,80086c <__alt_data_end+0xff80086c>
  800d80:	3463c83a 	sub	r17,r6,r17
  800d84:	4a07c83a 	sub	r3,r9,r8
  800d88:	344d803a 	cmpltu	r6,r6,r17
  800d8c:	1991c83a 	sub	r8,r3,r6
  800d90:	3825883a 	mov	r18,r7
  800d94:	003e5706 	br	8006f4 <__alt_data_end+0xff8006f4>
  800d98:	4984b03a 	or	r2,r9,r6
  800d9c:	10002e26 	beq	r2,zero,800e58 <__adddf3+0x7e0>
  800da0:	4004d0fa 	srli	r2,r8,3
  800da4:	8822d0fa 	srli	r17,r17,3
  800da8:	4010977a 	slli	r8,r8,29
  800dac:	10c0022c 	andhi	r3,r2,8
  800db0:	4462b03a 	or	r17,r8,r17
  800db4:	18000826 	beq	r3,zero,800dd8 <__adddf3+0x760>
  800db8:	4808d0fa 	srli	r4,r9,3
  800dbc:	20c0022c 	andhi	r3,r4,8
  800dc0:	1800051e 	bne	r3,zero,800dd8 <__adddf3+0x760>
  800dc4:	300cd0fa 	srli	r6,r6,3
  800dc8:	4806977a 	slli	r3,r9,29
  800dcc:	2005883a 	mov	r2,r4
  800dd0:	3825883a 	mov	r18,r7
  800dd4:	19a2b03a 	or	r17,r3,r6
  800dd8:	8810d77a 	srli	r8,r17,29
  800ddc:	100490fa 	slli	r2,r2,3
  800de0:	882290fa 	slli	r17,r17,3
  800de4:	0401ffc4 	movi	r16,2047
  800de8:	4090b03a 	or	r8,r8,r2
  800dec:	003e4106 	br	8006f4 <__alt_data_end+0xff8006f4>
  800df0:	0141ffc4 	movi	r5,2047
  800df4:	117fc71e 	bne	r2,r5,800d14 <__alt_data_end+0xff800d14>
  800df8:	4811883a 	mov	r8,r9
  800dfc:	3023883a 	mov	r17,r6
  800e00:	1021883a 	mov	r16,r2
  800e04:	003e3b06 	br	8006f4 <__alt_data_end+0xff8006f4>
  800e08:	10002f26 	beq	r2,zero,800ec8 <__adddf3+0x850>
  800e0c:	4984b03a 	or	r2,r9,r6
  800e10:	10001126 	beq	r2,zero,800e58 <__adddf3+0x7e0>
  800e14:	4004d0fa 	srli	r2,r8,3
  800e18:	8822d0fa 	srli	r17,r17,3
  800e1c:	4010977a 	slli	r8,r8,29
  800e20:	10c0022c 	andhi	r3,r2,8
  800e24:	4462b03a 	or	r17,r8,r17
  800e28:	183feb26 	beq	r3,zero,800dd8 <__alt_data_end+0xff800dd8>
  800e2c:	4808d0fa 	srli	r4,r9,3
  800e30:	20c0022c 	andhi	r3,r4,8
  800e34:	183fe81e 	bne	r3,zero,800dd8 <__alt_data_end+0xff800dd8>
  800e38:	300cd0fa 	srli	r6,r6,3
  800e3c:	4806977a 	slli	r3,r9,29
  800e40:	2005883a 	mov	r2,r4
  800e44:	19a2b03a 	or	r17,r3,r6
  800e48:	003fe306 	br	800dd8 <__alt_data_end+0xff800dd8>
  800e4c:	0011883a 	mov	r8,zero
  800e50:	0005883a 	mov	r2,zero
  800e54:	003e3f06 	br	800754 <__alt_data_end+0xff800754>
  800e58:	0401ffc4 	movi	r16,2047
  800e5c:	003e2506 	br	8006f4 <__alt_data_end+0xff8006f4>
  800e60:	0013883a 	mov	r9,zero
  800e64:	003f8406 	br	800c78 <__alt_data_end+0xff800c78>
  800e68:	0005883a 	mov	r2,zero
  800e6c:	0007883a 	mov	r3,zero
  800e70:	003e8906 	br	800898 <__alt_data_end+0xff800898>
  800e74:	197ff804 	addi	r5,r3,-32
  800e78:	01000804 	movi	r4,32
  800e7c:	414ad83a 	srl	r5,r8,r5
  800e80:	19002426 	beq	r3,r4,800f14 <__adddf3+0x89c>
  800e84:	01001004 	movi	r4,64
  800e88:	20c7c83a 	sub	r3,r4,r3
  800e8c:	40c6983a 	sll	r3,r8,r3
  800e90:	1c46b03a 	or	r3,r3,r17
  800e94:	1806c03a 	cmpne	r3,r3,zero
  800e98:	28e2b03a 	or	r17,r5,r3
  800e9c:	0007883a 	mov	r3,zero
  800ea0:	003f2306 	br	800b30 <__alt_data_end+0xff800b30>
  800ea4:	0007883a 	mov	r3,zero
  800ea8:	5811883a 	mov	r8,r11
  800eac:	00bfffc4 	movi	r2,-1
  800eb0:	0401ffc4 	movi	r16,2047
  800eb4:	003e7806 	br	800898 <__alt_data_end+0xff800898>
  800eb8:	4462b03a 	or	r17,r8,r17
  800ebc:	8822c03a 	cmpne	r17,r17,zero
  800ec0:	0009883a 	mov	r4,zero
  800ec4:	003fa006 	br	800d48 <__alt_data_end+0xff800d48>
  800ec8:	4811883a 	mov	r8,r9
  800ecc:	3023883a 	mov	r17,r6
  800ed0:	0401ffc4 	movi	r16,2047
  800ed4:	003e0706 	br	8006f4 <__alt_data_end+0xff8006f4>
  800ed8:	4811883a 	mov	r8,r9
  800edc:	3023883a 	mov	r17,r6
  800ee0:	003e0406 	br	8006f4 <__alt_data_end+0xff8006f4>
  800ee4:	21fff804 	addi	r7,r4,-32
  800ee8:	01400804 	movi	r5,32
  800eec:	41ced83a 	srl	r7,r8,r7
  800ef0:	21400a26 	beq	r4,r5,800f1c <__adddf3+0x8a4>
  800ef4:	01401004 	movi	r5,64
  800ef8:	2909c83a 	sub	r4,r5,r4
  800efc:	4108983a 	sll	r4,r8,r4
  800f00:	2448b03a 	or	r4,r4,r17
  800f04:	2008c03a 	cmpne	r4,r4,zero
  800f08:	3922b03a 	or	r17,r7,r4
  800f0c:	0009883a 	mov	r4,zero
  800f10:	003f8d06 	br	800d48 <__alt_data_end+0xff800d48>
  800f14:	0007883a 	mov	r3,zero
  800f18:	003fdd06 	br	800e90 <__alt_data_end+0xff800e90>
  800f1c:	0009883a 	mov	r4,zero
  800f20:	003ff706 	br	800f00 <__alt_data_end+0xff800f00>

00800f24 <__floatsidf>:
  800f24:	defffd04 	addi	sp,sp,-12
  800f28:	dfc00215 	stw	ra,8(sp)
  800f2c:	dc400115 	stw	r17,4(sp)
  800f30:	dc000015 	stw	r16,0(sp)
  800f34:	20002b26 	beq	r4,zero,800fe4 <__floatsidf+0xc0>
  800f38:	2023883a 	mov	r17,r4
  800f3c:	2020d7fa 	srli	r16,r4,31
  800f40:	20002d16 	blt	r4,zero,800ff8 <__floatsidf+0xd4>
  800f44:	8809883a 	mov	r4,r17
  800f48:	08011a80 	call	8011a8 <__clzsi2>
  800f4c:	01410784 	movi	r5,1054
  800f50:	288bc83a 	sub	r5,r5,r2
  800f54:	01010cc4 	movi	r4,1075
  800f58:	2149c83a 	sub	r4,r4,r5
  800f5c:	00c007c4 	movi	r3,31
  800f60:	1900160e 	bge	r3,r4,800fbc <__floatsidf+0x98>
  800f64:	00c104c4 	movi	r3,1043
  800f68:	1947c83a 	sub	r3,r3,r5
  800f6c:	88c6983a 	sll	r3,r17,r3
  800f70:	00800434 	movhi	r2,16
  800f74:	10bfffc4 	addi	r2,r2,-1
  800f78:	1886703a 	and	r3,r3,r2
  800f7c:	2941ffcc 	andi	r5,r5,2047
  800f80:	800d883a 	mov	r6,r16
  800f84:	0005883a 	mov	r2,zero
  800f88:	280a953a 	slli	r5,r5,20
  800f8c:	31803fcc 	andi	r6,r6,255
  800f90:	01000434 	movhi	r4,16
  800f94:	300c97fa 	slli	r6,r6,31
  800f98:	213fffc4 	addi	r4,r4,-1
  800f9c:	1906703a 	and	r3,r3,r4
  800fa0:	1946b03a 	or	r3,r3,r5
  800fa4:	1986b03a 	or	r3,r3,r6
  800fa8:	dfc00217 	ldw	ra,8(sp)
  800fac:	dc400117 	ldw	r17,4(sp)
  800fb0:	dc000017 	ldw	r16,0(sp)
  800fb4:	dec00304 	addi	sp,sp,12
  800fb8:	f800283a 	ret
  800fbc:	00c002c4 	movi	r3,11
  800fc0:	1887c83a 	sub	r3,r3,r2
  800fc4:	88c6d83a 	srl	r3,r17,r3
  800fc8:	8904983a 	sll	r2,r17,r4
  800fcc:	01000434 	movhi	r4,16
  800fd0:	213fffc4 	addi	r4,r4,-1
  800fd4:	2941ffcc 	andi	r5,r5,2047
  800fd8:	1906703a 	and	r3,r3,r4
  800fdc:	800d883a 	mov	r6,r16
  800fe0:	003fe906 	br	800f88 <__alt_data_end+0xff800f88>
  800fe4:	000d883a 	mov	r6,zero
  800fe8:	000b883a 	mov	r5,zero
  800fec:	0007883a 	mov	r3,zero
  800ff0:	0005883a 	mov	r2,zero
  800ff4:	003fe406 	br	800f88 <__alt_data_end+0xff800f88>
  800ff8:	0123c83a 	sub	r17,zero,r4
  800ffc:	003fd106 	br	800f44 <__alt_data_end+0xff800f44>

00801000 <__truncdfsf2>:
  801000:	2810d53a 	srli	r8,r5,20
  801004:	01c00434 	movhi	r7,16
  801008:	39ffffc4 	addi	r7,r7,-1
  80100c:	29ce703a 	and	r7,r5,r7
  801010:	4201ffcc 	andi	r8,r8,2047
  801014:	380e90fa 	slli	r7,r7,3
  801018:	200cd77a 	srli	r6,r4,29
  80101c:	42400044 	addi	r9,r8,1
  801020:	4a41ffcc 	andi	r9,r9,2047
  801024:	00c00044 	movi	r3,1
  801028:	280ad7fa 	srli	r5,r5,31
  80102c:	31ceb03a 	or	r7,r6,r7
  801030:	200490fa 	slli	r2,r4,3
  801034:	1a40230e 	bge	r3,r9,8010c4 <__truncdfsf2+0xc4>
  801038:	40ff2004 	addi	r3,r8,-896
  80103c:	01803f84 	movi	r6,254
  801040:	30c01516 	blt	r6,r3,801098 <__truncdfsf2+0x98>
  801044:	00c0380e 	bge	zero,r3,801128 <__truncdfsf2+0x128>
  801048:	200c91ba 	slli	r6,r4,6
  80104c:	380e90fa 	slli	r7,r7,3
  801050:	1004d77a 	srli	r2,r2,29
  801054:	300cc03a 	cmpne	r6,r6,zero
  801058:	31ccb03a 	or	r6,r6,r7
  80105c:	308cb03a 	or	r6,r6,r2
  801060:	308001cc 	andi	r2,r6,7
  801064:	10000426 	beq	r2,zero,801078 <__truncdfsf2+0x78>
  801068:	308003cc 	andi	r2,r6,15
  80106c:	01000104 	movi	r4,4
  801070:	11000126 	beq	r2,r4,801078 <__truncdfsf2+0x78>
  801074:	31800104 	addi	r6,r6,4
  801078:	3081002c 	andhi	r2,r6,1024
  80107c:	10001626 	beq	r2,zero,8010d8 <__truncdfsf2+0xd8>
  801080:	18c00044 	addi	r3,r3,1
  801084:	00803fc4 	movi	r2,255
  801088:	18800326 	beq	r3,r2,801098 <__truncdfsf2+0x98>
  80108c:	300c91ba 	slli	r6,r6,6
  801090:	300cd27a 	srli	r6,r6,9
  801094:	00000206 	br	8010a0 <__truncdfsf2+0xa0>
  801098:	00ffffc4 	movi	r3,-1
  80109c:	000d883a 	mov	r6,zero
  8010a0:	18c03fcc 	andi	r3,r3,255
  8010a4:	180895fa 	slli	r4,r3,23
  8010a8:	00c02034 	movhi	r3,128
  8010ac:	280a97fa 	slli	r5,r5,31
  8010b0:	18ffffc4 	addi	r3,r3,-1
  8010b4:	30c6703a 	and	r3,r6,r3
  8010b8:	1906b03a 	or	r3,r3,r4
  8010bc:	1944b03a 	or	r2,r3,r5
  8010c0:	f800283a 	ret
  8010c4:	40000b1e 	bne	r8,zero,8010f4 <__truncdfsf2+0xf4>
  8010c8:	388cb03a 	or	r6,r7,r2
  8010cc:	0007883a 	mov	r3,zero
  8010d0:	30000426 	beq	r6,zero,8010e4 <__truncdfsf2+0xe4>
  8010d4:	01800144 	movi	r6,5
  8010d8:	00803fc4 	movi	r2,255
  8010dc:	300cd0fa 	srli	r6,r6,3
  8010e0:	18800a26 	beq	r3,r2,80110c <__truncdfsf2+0x10c>
  8010e4:	00802034 	movhi	r2,128
  8010e8:	10bfffc4 	addi	r2,r2,-1
  8010ec:	308c703a 	and	r6,r6,r2
  8010f0:	003feb06 	br	8010a0 <__alt_data_end+0xff8010a0>
  8010f4:	3888b03a 	or	r4,r7,r2
  8010f8:	203fe726 	beq	r4,zero,801098 <__alt_data_end+0xff801098>
  8010fc:	380c90fa 	slli	r6,r7,3
  801100:	00c03fc4 	movi	r3,255
  801104:	31808034 	orhi	r6,r6,512
  801108:	003fd506 	br	801060 <__alt_data_end+0xff801060>
  80110c:	303fe226 	beq	r6,zero,801098 <__alt_data_end+0xff801098>
  801110:	00802034 	movhi	r2,128
  801114:	31801034 	orhi	r6,r6,64
  801118:	10bfffc4 	addi	r2,r2,-1
  80111c:	00ffffc4 	movi	r3,-1
  801120:	308c703a 	and	r6,r6,r2
  801124:	003fde06 	br	8010a0 <__alt_data_end+0xff8010a0>
  801128:	013ffa44 	movi	r4,-23
  80112c:	19000e16 	blt	r3,r4,801168 <__truncdfsf2+0x168>
  801130:	01000784 	movi	r4,30
  801134:	20c9c83a 	sub	r4,r4,r3
  801138:	018007c4 	movi	r6,31
  80113c:	39c02034 	orhi	r7,r7,128
  801140:	31000b16 	blt	r6,r4,801170 <__truncdfsf2+0x170>
  801144:	423f2084 	addi	r8,r8,-894
  801148:	120c983a 	sll	r6,r2,r8
  80114c:	3a0e983a 	sll	r7,r7,r8
  801150:	1104d83a 	srl	r2,r2,r4
  801154:	300cc03a 	cmpne	r6,r6,zero
  801158:	31ceb03a 	or	r7,r6,r7
  80115c:	388cb03a 	or	r6,r7,r2
  801160:	0007883a 	mov	r3,zero
  801164:	003fbe06 	br	801060 <__alt_data_end+0xff801060>
  801168:	0007883a 	mov	r3,zero
  80116c:	003fd906 	br	8010d4 <__alt_data_end+0xff8010d4>
  801170:	01bfff84 	movi	r6,-2
  801174:	30cdc83a 	sub	r6,r6,r3
  801178:	00c00804 	movi	r3,32
  80117c:	398cd83a 	srl	r6,r7,r6
  801180:	20c00726 	beq	r4,r3,8011a0 <__truncdfsf2+0x1a0>
  801184:	423f2884 	addi	r8,r8,-862
  801188:	3a0e983a 	sll	r7,r7,r8
  80118c:	3884b03a 	or	r2,r7,r2
  801190:	1004c03a 	cmpne	r2,r2,zero
  801194:	118cb03a 	or	r6,r2,r6
  801198:	0007883a 	mov	r3,zero
  80119c:	003fb006 	br	801060 <__alt_data_end+0xff801060>
  8011a0:	000f883a 	mov	r7,zero
  8011a4:	003ff906 	br	80118c <__alt_data_end+0xff80118c>

008011a8 <__clzsi2>:
  8011a8:	00bfffd4 	movui	r2,65535
  8011ac:	11000536 	bltu	r2,r4,8011c4 <__clzsi2+0x1c>
  8011b0:	00803fc4 	movi	r2,255
  8011b4:	11000f36 	bltu	r2,r4,8011f4 <__clzsi2+0x4c>
  8011b8:	00800804 	movi	r2,32
  8011bc:	0007883a 	mov	r3,zero
  8011c0:	00000506 	br	8011d8 <__clzsi2+0x30>
  8011c4:	00804034 	movhi	r2,256
  8011c8:	10bfffc4 	addi	r2,r2,-1
  8011cc:	11000c2e 	bgeu	r2,r4,801200 <__clzsi2+0x58>
  8011d0:	00800204 	movi	r2,8
  8011d4:	00c00604 	movi	r3,24
  8011d8:	20c8d83a 	srl	r4,r4,r3
  8011dc:	00c02074 	movhi	r3,129
  8011e0:	18c38ac4 	addi	r3,r3,3627
  8011e4:	1909883a 	add	r4,r3,r4
  8011e8:	20c00003 	ldbu	r3,0(r4)
  8011ec:	10c5c83a 	sub	r2,r2,r3
  8011f0:	f800283a 	ret
  8011f4:	00800604 	movi	r2,24
  8011f8:	00c00204 	movi	r3,8
  8011fc:	003ff606 	br	8011d8 <__alt_data_end+0xff8011d8>
  801200:	00800404 	movi	r2,16
  801204:	1007883a 	mov	r3,r2
  801208:	003ff306 	br	8011d8 <__alt_data_end+0xff8011d8>

0080120c <malloc>:
  80120c:	00802074 	movhi	r2,129
  801210:	108b3104 	addi	r2,r2,11460
  801214:	200b883a 	mov	r5,r4
  801218:	11000017 	ldw	r4,0(r2)
  80121c:	08012341 	jmpi	801234 <_malloc_r>

00801220 <free>:
  801220:	00802074 	movhi	r2,129
  801224:	108b3104 	addi	r2,r2,11460
  801228:	200b883a 	mov	r5,r4
  80122c:	11000017 	ldw	r4,0(r2)
  801230:	08061a01 	jmpi	8061a0 <_free_r>

00801234 <_malloc_r>:
  801234:	defff504 	addi	sp,sp,-44
  801238:	dc800315 	stw	r18,12(sp)
  80123c:	dfc00a15 	stw	ra,40(sp)
  801240:	df000915 	stw	fp,36(sp)
  801244:	ddc00815 	stw	r23,32(sp)
  801248:	dd800715 	stw	r22,28(sp)
  80124c:	dd400615 	stw	r21,24(sp)
  801250:	dd000515 	stw	r20,20(sp)
  801254:	dcc00415 	stw	r19,16(sp)
  801258:	dc400215 	stw	r17,8(sp)
  80125c:	dc000115 	stw	r16,4(sp)
  801260:	288002c4 	addi	r2,r5,11
  801264:	00c00584 	movi	r3,22
  801268:	2025883a 	mov	r18,r4
  80126c:	18807f2e 	bgeu	r3,r2,80146c <_malloc_r+0x238>
  801270:	047ffe04 	movi	r17,-8
  801274:	1462703a 	and	r17,r2,r17
  801278:	8800a316 	blt	r17,zero,801508 <_malloc_r+0x2d4>
  80127c:	8940a236 	bltu	r17,r5,801508 <_malloc_r+0x2d4>
  801280:	080de440 	call	80de44 <__malloc_lock>
  801284:	00807dc4 	movi	r2,503
  801288:	1441e92e 	bgeu	r2,r17,801a30 <_malloc_r+0x7fc>
  80128c:	8804d27a 	srli	r2,r17,9
  801290:	1000a126 	beq	r2,zero,801518 <_malloc_r+0x2e4>
  801294:	00c00104 	movi	r3,4
  801298:	18811e36 	bltu	r3,r2,801714 <_malloc_r+0x4e0>
  80129c:	8804d1ba 	srli	r2,r17,6
  8012a0:	12000e44 	addi	r8,r2,57
  8012a4:	11c00e04 	addi	r7,r2,56
  8012a8:	4209883a 	add	r4,r8,r8
  8012ac:	04c02074 	movhi	r19,129
  8012b0:	2109883a 	add	r4,r4,r4
  8012b4:	9cc44c04 	addi	r19,r19,4400
  8012b8:	2109883a 	add	r4,r4,r4
  8012bc:	9909883a 	add	r4,r19,r4
  8012c0:	24000117 	ldw	r16,4(r4)
  8012c4:	213ffe04 	addi	r4,r4,-8
  8012c8:	24009726 	beq	r4,r16,801528 <_malloc_r+0x2f4>
  8012cc:	80800117 	ldw	r2,4(r16)
  8012d0:	01bfff04 	movi	r6,-4
  8012d4:	014003c4 	movi	r5,15
  8012d8:	1184703a 	and	r2,r2,r6
  8012dc:	1447c83a 	sub	r3,r2,r17
  8012e0:	28c00716 	blt	r5,r3,801300 <_malloc_r+0xcc>
  8012e4:	1800920e 	bge	r3,zero,801530 <_malloc_r+0x2fc>
  8012e8:	84000317 	ldw	r16,12(r16)
  8012ec:	24008e26 	beq	r4,r16,801528 <_malloc_r+0x2f4>
  8012f0:	80800117 	ldw	r2,4(r16)
  8012f4:	1184703a 	and	r2,r2,r6
  8012f8:	1447c83a 	sub	r3,r2,r17
  8012fc:	28fff90e 	bge	r5,r3,8012e4 <__alt_data_end+0xff8012e4>
  801300:	3809883a 	mov	r4,r7
  801304:	01802074 	movhi	r6,129
  801308:	9c000417 	ldw	r16,16(r19)
  80130c:	31844c04 	addi	r6,r6,4400
  801310:	32000204 	addi	r8,r6,8
  801314:	82013426 	beq	r16,r8,8017e8 <_malloc_r+0x5b4>
  801318:	80c00117 	ldw	r3,4(r16)
  80131c:	00bfff04 	movi	r2,-4
  801320:	188e703a 	and	r7,r3,r2
  801324:	3c45c83a 	sub	r2,r7,r17
  801328:	00c003c4 	movi	r3,15
  80132c:	18811f16 	blt	r3,r2,8017ac <_malloc_r+0x578>
  801330:	32000515 	stw	r8,20(r6)
  801334:	32000415 	stw	r8,16(r6)
  801338:	10007f0e 	bge	r2,zero,801538 <_malloc_r+0x304>
  80133c:	00807fc4 	movi	r2,511
  801340:	11c0fd36 	bltu	r2,r7,801738 <_malloc_r+0x504>
  801344:	3806d0fa 	srli	r3,r7,3
  801348:	01c00044 	movi	r7,1
  80134c:	30800117 	ldw	r2,4(r6)
  801350:	19400044 	addi	r5,r3,1
  801354:	294b883a 	add	r5,r5,r5
  801358:	1807d0ba 	srai	r3,r3,2
  80135c:	294b883a 	add	r5,r5,r5
  801360:	294b883a 	add	r5,r5,r5
  801364:	298b883a 	add	r5,r5,r6
  801368:	38c6983a 	sll	r3,r7,r3
  80136c:	29c00017 	ldw	r7,0(r5)
  801370:	2a7ffe04 	addi	r9,r5,-8
  801374:	1886b03a 	or	r3,r3,r2
  801378:	82400315 	stw	r9,12(r16)
  80137c:	81c00215 	stw	r7,8(r16)
  801380:	30c00115 	stw	r3,4(r6)
  801384:	2c000015 	stw	r16,0(r5)
  801388:	3c000315 	stw	r16,12(r7)
  80138c:	2005d0ba 	srai	r2,r4,2
  801390:	01400044 	movi	r5,1
  801394:	288a983a 	sll	r5,r5,r2
  801398:	19406f36 	bltu	r3,r5,801558 <_malloc_r+0x324>
  80139c:	28c4703a 	and	r2,r5,r3
  8013a0:	10000a1e 	bne	r2,zero,8013cc <_malloc_r+0x198>
  8013a4:	00bfff04 	movi	r2,-4
  8013a8:	294b883a 	add	r5,r5,r5
  8013ac:	2088703a 	and	r4,r4,r2
  8013b0:	28c4703a 	and	r2,r5,r3
  8013b4:	21000104 	addi	r4,r4,4
  8013b8:	1000041e 	bne	r2,zero,8013cc <_malloc_r+0x198>
  8013bc:	294b883a 	add	r5,r5,r5
  8013c0:	28c4703a 	and	r2,r5,r3
  8013c4:	21000104 	addi	r4,r4,4
  8013c8:	103ffc26 	beq	r2,zero,8013bc <__alt_data_end+0xff8013bc>
  8013cc:	02bfff04 	movi	r10,-4
  8013d0:	024003c4 	movi	r9,15
  8013d4:	21800044 	addi	r6,r4,1
  8013d8:	318d883a 	add	r6,r6,r6
  8013dc:	318d883a 	add	r6,r6,r6
  8013e0:	318d883a 	add	r6,r6,r6
  8013e4:	998d883a 	add	r6,r19,r6
  8013e8:	333ffe04 	addi	r12,r6,-8
  8013ec:	2017883a 	mov	r11,r4
  8013f0:	31800104 	addi	r6,r6,4
  8013f4:	34000017 	ldw	r16,0(r6)
  8013f8:	31fffd04 	addi	r7,r6,-12
  8013fc:	81c0041e 	bne	r16,r7,801410 <_malloc_r+0x1dc>
  801400:	0000fb06 	br	8017f0 <_malloc_r+0x5bc>
  801404:	1801030e 	bge	r3,zero,801814 <_malloc_r+0x5e0>
  801408:	84000317 	ldw	r16,12(r16)
  80140c:	81c0f826 	beq	r16,r7,8017f0 <_malloc_r+0x5bc>
  801410:	80800117 	ldw	r2,4(r16)
  801414:	1284703a 	and	r2,r2,r10
  801418:	1447c83a 	sub	r3,r2,r17
  80141c:	48fff90e 	bge	r9,r3,801404 <__alt_data_end+0xff801404>
  801420:	80800317 	ldw	r2,12(r16)
  801424:	81000217 	ldw	r4,8(r16)
  801428:	89400054 	ori	r5,r17,1
  80142c:	81400115 	stw	r5,4(r16)
  801430:	20800315 	stw	r2,12(r4)
  801434:	11000215 	stw	r4,8(r2)
  801438:	8463883a 	add	r17,r16,r17
  80143c:	9c400515 	stw	r17,20(r19)
  801440:	9c400415 	stw	r17,16(r19)
  801444:	18800054 	ori	r2,r3,1
  801448:	88800115 	stw	r2,4(r17)
  80144c:	8a000315 	stw	r8,12(r17)
  801450:	8a000215 	stw	r8,8(r17)
  801454:	88e3883a 	add	r17,r17,r3
  801458:	88c00015 	stw	r3,0(r17)
  80145c:	9009883a 	mov	r4,r18
  801460:	080de680 	call	80de68 <__malloc_unlock>
  801464:	80800204 	addi	r2,r16,8
  801468:	00001b06 	br	8014d8 <_malloc_r+0x2a4>
  80146c:	04400404 	movi	r17,16
  801470:	89402536 	bltu	r17,r5,801508 <_malloc_r+0x2d4>
  801474:	080de440 	call	80de44 <__malloc_lock>
  801478:	00800184 	movi	r2,6
  80147c:	01000084 	movi	r4,2
  801480:	04c02074 	movhi	r19,129
  801484:	1085883a 	add	r2,r2,r2
  801488:	9cc44c04 	addi	r19,r19,4400
  80148c:	1085883a 	add	r2,r2,r2
  801490:	9885883a 	add	r2,r19,r2
  801494:	14000117 	ldw	r16,4(r2)
  801498:	10fffe04 	addi	r3,r2,-8
  80149c:	80c0d926 	beq	r16,r3,801804 <_malloc_r+0x5d0>
  8014a0:	80c00117 	ldw	r3,4(r16)
  8014a4:	81000317 	ldw	r4,12(r16)
  8014a8:	00bfff04 	movi	r2,-4
  8014ac:	1884703a 	and	r2,r3,r2
  8014b0:	81400217 	ldw	r5,8(r16)
  8014b4:	8085883a 	add	r2,r16,r2
  8014b8:	10c00117 	ldw	r3,4(r2)
  8014bc:	29000315 	stw	r4,12(r5)
  8014c0:	21400215 	stw	r5,8(r4)
  8014c4:	18c00054 	ori	r3,r3,1
  8014c8:	10c00115 	stw	r3,4(r2)
  8014cc:	9009883a 	mov	r4,r18
  8014d0:	080de680 	call	80de68 <__malloc_unlock>
  8014d4:	80800204 	addi	r2,r16,8
  8014d8:	dfc00a17 	ldw	ra,40(sp)
  8014dc:	df000917 	ldw	fp,36(sp)
  8014e0:	ddc00817 	ldw	r23,32(sp)
  8014e4:	dd800717 	ldw	r22,28(sp)
  8014e8:	dd400617 	ldw	r21,24(sp)
  8014ec:	dd000517 	ldw	r20,20(sp)
  8014f0:	dcc00417 	ldw	r19,16(sp)
  8014f4:	dc800317 	ldw	r18,12(sp)
  8014f8:	dc400217 	ldw	r17,8(sp)
  8014fc:	dc000117 	ldw	r16,4(sp)
  801500:	dec00b04 	addi	sp,sp,44
  801504:	f800283a 	ret
  801508:	00800304 	movi	r2,12
  80150c:	90800015 	stw	r2,0(r18)
  801510:	0005883a 	mov	r2,zero
  801514:	003ff006 	br	8014d8 <__alt_data_end+0xff8014d8>
  801518:	01002004 	movi	r4,128
  80151c:	02001004 	movi	r8,64
  801520:	01c00fc4 	movi	r7,63
  801524:	003f6106 	br	8012ac <__alt_data_end+0xff8012ac>
  801528:	4009883a 	mov	r4,r8
  80152c:	003f7506 	br	801304 <__alt_data_end+0xff801304>
  801530:	81000317 	ldw	r4,12(r16)
  801534:	003fde06 	br	8014b0 <__alt_data_end+0xff8014b0>
  801538:	81c5883a 	add	r2,r16,r7
  80153c:	11400117 	ldw	r5,4(r2)
  801540:	9009883a 	mov	r4,r18
  801544:	29400054 	ori	r5,r5,1
  801548:	11400115 	stw	r5,4(r2)
  80154c:	080de680 	call	80de68 <__malloc_unlock>
  801550:	80800204 	addi	r2,r16,8
  801554:	003fe006 	br	8014d8 <__alt_data_end+0xff8014d8>
  801558:	9c000217 	ldw	r16,8(r19)
  80155c:	00bfff04 	movi	r2,-4
  801560:	85800117 	ldw	r22,4(r16)
  801564:	b0ac703a 	and	r22,r22,r2
  801568:	b4400336 	bltu	r22,r17,801578 <_malloc_r+0x344>
  80156c:	b445c83a 	sub	r2,r22,r17
  801570:	00c003c4 	movi	r3,15
  801574:	18805d16 	blt	r3,r2,8016ec <_malloc_r+0x4b8>
  801578:	05c02074 	movhi	r23,129
  80157c:	00802074 	movhi	r2,129
  801580:	10923a04 	addi	r2,r2,18664
  801584:	bdcb2e04 	addi	r23,r23,11448
  801588:	15400017 	ldw	r21,0(r2)
  80158c:	b8c00017 	ldw	r3,0(r23)
  801590:	00bfffc4 	movi	r2,-1
  801594:	858d883a 	add	r6,r16,r22
  801598:	8d6b883a 	add	r21,r17,r21
  80159c:	1880ea26 	beq	r3,r2,801948 <_malloc_r+0x714>
  8015a0:	ad4403c4 	addi	r21,r21,4111
  8015a4:	00bc0004 	movi	r2,-4096
  8015a8:	a8aa703a 	and	r21,r21,r2
  8015ac:	a80b883a 	mov	r5,r21
  8015b0:	9009883a 	mov	r4,r18
  8015b4:	d9800015 	stw	r6,0(sp)
  8015b8:	0801b800 	call	801b80 <_sbrk_r>
  8015bc:	1029883a 	mov	r20,r2
  8015c0:	00bfffc4 	movi	r2,-1
  8015c4:	d9800017 	ldw	r6,0(sp)
  8015c8:	a080e826 	beq	r20,r2,80196c <_malloc_r+0x738>
  8015cc:	a180a636 	bltu	r20,r6,801868 <_malloc_r+0x634>
  8015d0:	07002074 	movhi	fp,129
  8015d4:	e7124604 	addi	fp,fp,18712
  8015d8:	e0800017 	ldw	r2,0(fp)
  8015dc:	a887883a 	add	r3,r21,r2
  8015e0:	e0c00015 	stw	r3,0(fp)
  8015e4:	3500e626 	beq	r6,r20,801980 <_malloc_r+0x74c>
  8015e8:	b9000017 	ldw	r4,0(r23)
  8015ec:	00bfffc4 	movi	r2,-1
  8015f0:	2080ee26 	beq	r4,r2,8019ac <_malloc_r+0x778>
  8015f4:	a185c83a 	sub	r2,r20,r6
  8015f8:	10c5883a 	add	r2,r2,r3
  8015fc:	e0800015 	stw	r2,0(fp)
  801600:	a0c001cc 	andi	r3,r20,7
  801604:	1800bc26 	beq	r3,zero,8018f8 <_malloc_r+0x6c4>
  801608:	a0e9c83a 	sub	r20,r20,r3
  80160c:	00840204 	movi	r2,4104
  801610:	a5000204 	addi	r20,r20,8
  801614:	10c7c83a 	sub	r3,r2,r3
  801618:	a545883a 	add	r2,r20,r21
  80161c:	1083ffcc 	andi	r2,r2,4095
  801620:	18abc83a 	sub	r21,r3,r2
  801624:	a80b883a 	mov	r5,r21
  801628:	9009883a 	mov	r4,r18
  80162c:	0801b800 	call	801b80 <_sbrk_r>
  801630:	00ffffc4 	movi	r3,-1
  801634:	10c0e126 	beq	r2,r3,8019bc <_malloc_r+0x788>
  801638:	1505c83a 	sub	r2,r2,r20
  80163c:	1545883a 	add	r2,r2,r21
  801640:	10800054 	ori	r2,r2,1
  801644:	e0c00017 	ldw	r3,0(fp)
  801648:	9d000215 	stw	r20,8(r19)
  80164c:	a0800115 	stw	r2,4(r20)
  801650:	a8c7883a 	add	r3,r21,r3
  801654:	e0c00015 	stw	r3,0(fp)
  801658:	84c00e26 	beq	r16,r19,801694 <_malloc_r+0x460>
  80165c:	018003c4 	movi	r6,15
  801660:	3580a72e 	bgeu	r6,r22,801900 <_malloc_r+0x6cc>
  801664:	81400117 	ldw	r5,4(r16)
  801668:	013ffe04 	movi	r4,-8
  80166c:	b0bffd04 	addi	r2,r22,-12
  801670:	1104703a 	and	r2,r2,r4
  801674:	2900004c 	andi	r4,r5,1
  801678:	2088b03a 	or	r4,r4,r2
  80167c:	81000115 	stw	r4,4(r16)
  801680:	01400144 	movi	r5,5
  801684:	8089883a 	add	r4,r16,r2
  801688:	21400115 	stw	r5,4(r4)
  80168c:	21400215 	stw	r5,8(r4)
  801690:	3080cd36 	bltu	r6,r2,8019c8 <_malloc_r+0x794>
  801694:	00802074 	movhi	r2,129
  801698:	10923904 	addi	r2,r2,18660
  80169c:	11000017 	ldw	r4,0(r2)
  8016a0:	20c0012e 	bgeu	r4,r3,8016a8 <_malloc_r+0x474>
  8016a4:	10c00015 	stw	r3,0(r2)
  8016a8:	00802074 	movhi	r2,129
  8016ac:	10923804 	addi	r2,r2,18656
  8016b0:	11000017 	ldw	r4,0(r2)
  8016b4:	9c000217 	ldw	r16,8(r19)
  8016b8:	20c0012e 	bgeu	r4,r3,8016c0 <_malloc_r+0x48c>
  8016bc:	10c00015 	stw	r3,0(r2)
  8016c0:	80c00117 	ldw	r3,4(r16)
  8016c4:	00bfff04 	movi	r2,-4
  8016c8:	1886703a 	and	r3,r3,r2
  8016cc:	1c45c83a 	sub	r2,r3,r17
  8016d0:	1c400236 	bltu	r3,r17,8016dc <_malloc_r+0x4a8>
  8016d4:	00c003c4 	movi	r3,15
  8016d8:	18800416 	blt	r3,r2,8016ec <_malloc_r+0x4b8>
  8016dc:	9009883a 	mov	r4,r18
  8016e0:	080de680 	call	80de68 <__malloc_unlock>
  8016e4:	0005883a 	mov	r2,zero
  8016e8:	003f7b06 	br	8014d8 <__alt_data_end+0xff8014d8>
  8016ec:	88c00054 	ori	r3,r17,1
  8016f0:	80c00115 	stw	r3,4(r16)
  8016f4:	8463883a 	add	r17,r16,r17
  8016f8:	10800054 	ori	r2,r2,1
  8016fc:	9c400215 	stw	r17,8(r19)
  801700:	88800115 	stw	r2,4(r17)
  801704:	9009883a 	mov	r4,r18
  801708:	080de680 	call	80de68 <__malloc_unlock>
  80170c:	80800204 	addi	r2,r16,8
  801710:	003f7106 	br	8014d8 <__alt_data_end+0xff8014d8>
  801714:	00c00504 	movi	r3,20
  801718:	18804a2e 	bgeu	r3,r2,801844 <_malloc_r+0x610>
  80171c:	00c01504 	movi	r3,84
  801720:	18806e36 	bltu	r3,r2,8018dc <_malloc_r+0x6a8>
  801724:	8804d33a 	srli	r2,r17,12
  801728:	12001bc4 	addi	r8,r2,111
  80172c:	11c01b84 	addi	r7,r2,110
  801730:	4209883a 	add	r4,r8,r8
  801734:	003edd06 	br	8012ac <__alt_data_end+0xff8012ac>
  801738:	3804d27a 	srli	r2,r7,9
  80173c:	00c00104 	movi	r3,4
  801740:	1880442e 	bgeu	r3,r2,801854 <_malloc_r+0x620>
  801744:	00c00504 	movi	r3,20
  801748:	18808136 	bltu	r3,r2,801950 <_malloc_r+0x71c>
  80174c:	11401704 	addi	r5,r2,92
  801750:	10c016c4 	addi	r3,r2,91
  801754:	294b883a 	add	r5,r5,r5
  801758:	294b883a 	add	r5,r5,r5
  80175c:	294b883a 	add	r5,r5,r5
  801760:	994b883a 	add	r5,r19,r5
  801764:	28800017 	ldw	r2,0(r5)
  801768:	01802074 	movhi	r6,129
  80176c:	297ffe04 	addi	r5,r5,-8
  801770:	31844c04 	addi	r6,r6,4400
  801774:	28806526 	beq	r5,r2,80190c <_malloc_r+0x6d8>
  801778:	01bfff04 	movi	r6,-4
  80177c:	10c00117 	ldw	r3,4(r2)
  801780:	1986703a 	and	r3,r3,r6
  801784:	38c0022e 	bgeu	r7,r3,801790 <_malloc_r+0x55c>
  801788:	10800217 	ldw	r2,8(r2)
  80178c:	28bffb1e 	bne	r5,r2,80177c <__alt_data_end+0xff80177c>
  801790:	11400317 	ldw	r5,12(r2)
  801794:	98c00117 	ldw	r3,4(r19)
  801798:	81400315 	stw	r5,12(r16)
  80179c:	80800215 	stw	r2,8(r16)
  8017a0:	2c000215 	stw	r16,8(r5)
  8017a4:	14000315 	stw	r16,12(r2)
  8017a8:	003ef806 	br	80138c <__alt_data_end+0xff80138c>
  8017ac:	88c00054 	ori	r3,r17,1
  8017b0:	80c00115 	stw	r3,4(r16)
  8017b4:	8463883a 	add	r17,r16,r17
  8017b8:	34400515 	stw	r17,20(r6)
  8017bc:	34400415 	stw	r17,16(r6)
  8017c0:	10c00054 	ori	r3,r2,1
  8017c4:	8a000315 	stw	r8,12(r17)
  8017c8:	8a000215 	stw	r8,8(r17)
  8017cc:	88c00115 	stw	r3,4(r17)
  8017d0:	88a3883a 	add	r17,r17,r2
  8017d4:	88800015 	stw	r2,0(r17)
  8017d8:	9009883a 	mov	r4,r18
  8017dc:	080de680 	call	80de68 <__malloc_unlock>
  8017e0:	80800204 	addi	r2,r16,8
  8017e4:	003f3c06 	br	8014d8 <__alt_data_end+0xff8014d8>
  8017e8:	30c00117 	ldw	r3,4(r6)
  8017ec:	003ee706 	br	80138c <__alt_data_end+0xff80138c>
  8017f0:	5ac00044 	addi	r11,r11,1
  8017f4:	588000cc 	andi	r2,r11,3
  8017f8:	31800204 	addi	r6,r6,8
  8017fc:	103efd1e 	bne	r2,zero,8013f4 <__alt_data_end+0xff8013f4>
  801800:	00002406 	br	801894 <_malloc_r+0x660>
  801804:	14000317 	ldw	r16,12(r2)
  801808:	143f251e 	bne	r2,r16,8014a0 <__alt_data_end+0xff8014a0>
  80180c:	21000084 	addi	r4,r4,2
  801810:	003ebc06 	br	801304 <__alt_data_end+0xff801304>
  801814:	8085883a 	add	r2,r16,r2
  801818:	10c00117 	ldw	r3,4(r2)
  80181c:	81000317 	ldw	r4,12(r16)
  801820:	81400217 	ldw	r5,8(r16)
  801824:	18c00054 	ori	r3,r3,1
  801828:	10c00115 	stw	r3,4(r2)
  80182c:	29000315 	stw	r4,12(r5)
  801830:	21400215 	stw	r5,8(r4)
  801834:	9009883a 	mov	r4,r18
  801838:	080de680 	call	80de68 <__malloc_unlock>
  80183c:	80800204 	addi	r2,r16,8
  801840:	003f2506 	br	8014d8 <__alt_data_end+0xff8014d8>
  801844:	12001704 	addi	r8,r2,92
  801848:	11c016c4 	addi	r7,r2,91
  80184c:	4209883a 	add	r4,r8,r8
  801850:	003e9606 	br	8012ac <__alt_data_end+0xff8012ac>
  801854:	3804d1ba 	srli	r2,r7,6
  801858:	11400e44 	addi	r5,r2,57
  80185c:	10c00e04 	addi	r3,r2,56
  801860:	294b883a 	add	r5,r5,r5
  801864:	003fbc06 	br	801758 <__alt_data_end+0xff801758>
  801868:	84ff5926 	beq	r16,r19,8015d0 <__alt_data_end+0xff8015d0>
  80186c:	00802074 	movhi	r2,129
  801870:	10844c04 	addi	r2,r2,4400
  801874:	14000217 	ldw	r16,8(r2)
  801878:	00bfff04 	movi	r2,-4
  80187c:	80c00117 	ldw	r3,4(r16)
  801880:	1886703a 	and	r3,r3,r2
  801884:	003f9106 	br	8016cc <__alt_data_end+0xff8016cc>
  801888:	60800217 	ldw	r2,8(r12)
  80188c:	213fffc4 	addi	r4,r4,-1
  801890:	1300651e 	bne	r2,r12,801a28 <_malloc_r+0x7f4>
  801894:	208000cc 	andi	r2,r4,3
  801898:	633ffe04 	addi	r12,r12,-8
  80189c:	103ffa1e 	bne	r2,zero,801888 <__alt_data_end+0xff801888>
  8018a0:	98800117 	ldw	r2,4(r19)
  8018a4:	0146303a 	nor	r3,zero,r5
  8018a8:	1884703a 	and	r2,r3,r2
  8018ac:	98800115 	stw	r2,4(r19)
  8018b0:	294b883a 	add	r5,r5,r5
  8018b4:	117f2836 	bltu	r2,r5,801558 <__alt_data_end+0xff801558>
  8018b8:	283f2726 	beq	r5,zero,801558 <__alt_data_end+0xff801558>
  8018bc:	2886703a 	and	r3,r5,r2
  8018c0:	5809883a 	mov	r4,r11
  8018c4:	183ec31e 	bne	r3,zero,8013d4 <__alt_data_end+0xff8013d4>
  8018c8:	294b883a 	add	r5,r5,r5
  8018cc:	2886703a 	and	r3,r5,r2
  8018d0:	21000104 	addi	r4,r4,4
  8018d4:	183ffc26 	beq	r3,zero,8018c8 <__alt_data_end+0xff8018c8>
  8018d8:	003ebe06 	br	8013d4 <__alt_data_end+0xff8013d4>
  8018dc:	00c05504 	movi	r3,340
  8018e0:	18801236 	bltu	r3,r2,80192c <_malloc_r+0x6f8>
  8018e4:	8804d3fa 	srli	r2,r17,15
  8018e8:	12001e04 	addi	r8,r2,120
  8018ec:	11c01dc4 	addi	r7,r2,119
  8018f0:	4209883a 	add	r4,r8,r8
  8018f4:	003e6d06 	br	8012ac <__alt_data_end+0xff8012ac>
  8018f8:	00c40004 	movi	r3,4096
  8018fc:	003f4606 	br	801618 <__alt_data_end+0xff801618>
  801900:	00800044 	movi	r2,1
  801904:	a0800115 	stw	r2,4(r20)
  801908:	003f7406 	br	8016dc <__alt_data_end+0xff8016dc>
  80190c:	1805d0ba 	srai	r2,r3,2
  801910:	01c00044 	movi	r7,1
  801914:	30c00117 	ldw	r3,4(r6)
  801918:	388e983a 	sll	r7,r7,r2
  80191c:	2805883a 	mov	r2,r5
  801920:	38c6b03a 	or	r3,r7,r3
  801924:	30c00115 	stw	r3,4(r6)
  801928:	003f9b06 	br	801798 <__alt_data_end+0xff801798>
  80192c:	00c15504 	movi	r3,1364
  801930:	18801a36 	bltu	r3,r2,80199c <_malloc_r+0x768>
  801934:	8804d4ba 	srli	r2,r17,18
  801938:	12001f44 	addi	r8,r2,125
  80193c:	11c01f04 	addi	r7,r2,124
  801940:	4209883a 	add	r4,r8,r8
  801944:	003e5906 	br	8012ac <__alt_data_end+0xff8012ac>
  801948:	ad400404 	addi	r21,r21,16
  80194c:	003f1706 	br	8015ac <__alt_data_end+0xff8015ac>
  801950:	00c01504 	movi	r3,84
  801954:	18802336 	bltu	r3,r2,8019e4 <_malloc_r+0x7b0>
  801958:	3804d33a 	srli	r2,r7,12
  80195c:	11401bc4 	addi	r5,r2,111
  801960:	10c01b84 	addi	r3,r2,110
  801964:	294b883a 	add	r5,r5,r5
  801968:	003f7b06 	br	801758 <__alt_data_end+0xff801758>
  80196c:	9c000217 	ldw	r16,8(r19)
  801970:	00bfff04 	movi	r2,-4
  801974:	80c00117 	ldw	r3,4(r16)
  801978:	1886703a 	and	r3,r3,r2
  80197c:	003f5306 	br	8016cc <__alt_data_end+0xff8016cc>
  801980:	3083ffcc 	andi	r2,r6,4095
  801984:	103f181e 	bne	r2,zero,8015e8 <__alt_data_end+0xff8015e8>
  801988:	99000217 	ldw	r4,8(r19)
  80198c:	b545883a 	add	r2,r22,r21
  801990:	10800054 	ori	r2,r2,1
  801994:	20800115 	stw	r2,4(r4)
  801998:	003f3e06 	br	801694 <__alt_data_end+0xff801694>
  80199c:	01003f84 	movi	r4,254
  8019a0:	02001fc4 	movi	r8,127
  8019a4:	01c01f84 	movi	r7,126
  8019a8:	003e4006 	br	8012ac <__alt_data_end+0xff8012ac>
  8019ac:	00802074 	movhi	r2,129
  8019b0:	108b2e04 	addi	r2,r2,11448
  8019b4:	15000015 	stw	r20,0(r2)
  8019b8:	003f1106 	br	801600 <__alt_data_end+0xff801600>
  8019bc:	00800044 	movi	r2,1
  8019c0:	002b883a 	mov	r21,zero
  8019c4:	003f1f06 	br	801644 <__alt_data_end+0xff801644>
  8019c8:	81400204 	addi	r5,r16,8
  8019cc:	9009883a 	mov	r4,r18
  8019d0:	08061a00 	call	8061a0 <_free_r>
  8019d4:	00802074 	movhi	r2,129
  8019d8:	10924604 	addi	r2,r2,18712
  8019dc:	10c00017 	ldw	r3,0(r2)
  8019e0:	003f2c06 	br	801694 <__alt_data_end+0xff801694>
  8019e4:	00c05504 	movi	r3,340
  8019e8:	18800536 	bltu	r3,r2,801a00 <_malloc_r+0x7cc>
  8019ec:	3804d3fa 	srli	r2,r7,15
  8019f0:	11401e04 	addi	r5,r2,120
  8019f4:	10c01dc4 	addi	r3,r2,119
  8019f8:	294b883a 	add	r5,r5,r5
  8019fc:	003f5606 	br	801758 <__alt_data_end+0xff801758>
  801a00:	00c15504 	movi	r3,1364
  801a04:	18800536 	bltu	r3,r2,801a1c <_malloc_r+0x7e8>
  801a08:	3804d4ba 	srli	r2,r7,18
  801a0c:	11401f44 	addi	r5,r2,125
  801a10:	10c01f04 	addi	r3,r2,124
  801a14:	294b883a 	add	r5,r5,r5
  801a18:	003f4f06 	br	801758 <__alt_data_end+0xff801758>
  801a1c:	01403f84 	movi	r5,254
  801a20:	00c01f84 	movi	r3,126
  801a24:	003f4c06 	br	801758 <__alt_data_end+0xff801758>
  801a28:	98800117 	ldw	r2,4(r19)
  801a2c:	003fa006 	br	8018b0 <__alt_data_end+0xff8018b0>
  801a30:	8808d0fa 	srli	r4,r17,3
  801a34:	20800044 	addi	r2,r4,1
  801a38:	1085883a 	add	r2,r2,r2
  801a3c:	003e9006 	br	801480 <__alt_data_end+0xff801480>

00801a40 <_printf_r>:
  801a40:	defffd04 	addi	sp,sp,-12
  801a44:	2805883a 	mov	r2,r5
  801a48:	dfc00015 	stw	ra,0(sp)
  801a4c:	d9800115 	stw	r6,4(sp)
  801a50:	d9c00215 	stw	r7,8(sp)
  801a54:	21400217 	ldw	r5,8(r4)
  801a58:	d9c00104 	addi	r7,sp,4
  801a5c:	100d883a 	mov	r6,r2
  801a60:	0801c6c0 	call	801c6c <___vfprintf_internal_r>
  801a64:	dfc00017 	ldw	ra,0(sp)
  801a68:	dec00304 	addi	sp,sp,12
  801a6c:	f800283a 	ret

00801a70 <printf>:
  801a70:	defffc04 	addi	sp,sp,-16
  801a74:	dfc00015 	stw	ra,0(sp)
  801a78:	d9400115 	stw	r5,4(sp)
  801a7c:	d9800215 	stw	r6,8(sp)
  801a80:	d9c00315 	stw	r7,12(sp)
  801a84:	00802074 	movhi	r2,129
  801a88:	108b3104 	addi	r2,r2,11460
  801a8c:	10800017 	ldw	r2,0(r2)
  801a90:	200b883a 	mov	r5,r4
  801a94:	d9800104 	addi	r6,sp,4
  801a98:	11000217 	ldw	r4,8(r2)
  801a9c:	0803f480 	call	803f48 <__vfprintf_internal>
  801aa0:	dfc00017 	ldw	ra,0(sp)
  801aa4:	dec00404 	addi	sp,sp,16
  801aa8:	f800283a 	ret

00801aac <_puts_r>:
  801aac:	defff604 	addi	sp,sp,-40
  801ab0:	dc000715 	stw	r16,28(sp)
  801ab4:	2021883a 	mov	r16,r4
  801ab8:	2809883a 	mov	r4,r5
  801abc:	dc400815 	stw	r17,32(sp)
  801ac0:	dfc00915 	stw	ra,36(sp)
  801ac4:	2823883a 	mov	r17,r5
  801ac8:	0801bd40 	call	801bd4 <strlen>
  801acc:	10c00044 	addi	r3,r2,1
  801ad0:	d8800115 	stw	r2,4(sp)
  801ad4:	00802074 	movhi	r2,129
  801ad8:	1083cb04 	addi	r2,r2,3884
  801adc:	d8800215 	stw	r2,8(sp)
  801ae0:	00800044 	movi	r2,1
  801ae4:	d8800315 	stw	r2,12(sp)
  801ae8:	00800084 	movi	r2,2
  801aec:	dc400015 	stw	r17,0(sp)
  801af0:	d8c00615 	stw	r3,24(sp)
  801af4:	dec00415 	stw	sp,16(sp)
  801af8:	d8800515 	stw	r2,20(sp)
  801afc:	80000226 	beq	r16,zero,801b08 <_puts_r+0x5c>
  801b00:	80800e17 	ldw	r2,56(r16)
  801b04:	10001426 	beq	r2,zero,801b58 <_puts_r+0xac>
  801b08:	81400217 	ldw	r5,8(r16)
  801b0c:	2880030b 	ldhu	r2,12(r5)
  801b10:	10c8000c 	andi	r3,r2,8192
  801b14:	1800061e 	bne	r3,zero,801b30 <_puts_r+0x84>
  801b18:	29001917 	ldw	r4,100(r5)
  801b1c:	00f7ffc4 	movi	r3,-8193
  801b20:	10880014 	ori	r2,r2,8192
  801b24:	20c6703a 	and	r3,r4,r3
  801b28:	2880030d 	sth	r2,12(r5)
  801b2c:	28c01915 	stw	r3,100(r5)
  801b30:	d9800404 	addi	r6,sp,16
  801b34:	8009883a 	mov	r4,r16
  801b38:	08064b00 	call	8064b0 <__sfvwrite_r>
  801b3c:	1000091e 	bne	r2,zero,801b64 <_puts_r+0xb8>
  801b40:	00800284 	movi	r2,10
  801b44:	dfc00917 	ldw	ra,36(sp)
  801b48:	dc400817 	ldw	r17,32(sp)
  801b4c:	dc000717 	ldw	r16,28(sp)
  801b50:	dec00a04 	addi	sp,sp,40
  801b54:	f800283a 	ret
  801b58:	8009883a 	mov	r4,r16
  801b5c:	080602c0 	call	80602c <__sinit>
  801b60:	003fe906 	br	801b08 <__alt_data_end+0xff801b08>
  801b64:	00bfffc4 	movi	r2,-1
  801b68:	003ff606 	br	801b44 <__alt_data_end+0xff801b44>

00801b6c <puts>:
  801b6c:	00802074 	movhi	r2,129
  801b70:	108b3104 	addi	r2,r2,11460
  801b74:	200b883a 	mov	r5,r4
  801b78:	11000017 	ldw	r4,0(r2)
  801b7c:	0801aac1 	jmpi	801aac <_puts_r>

00801b80 <_sbrk_r>:
  801b80:	defffd04 	addi	sp,sp,-12
  801b84:	dc000015 	stw	r16,0(sp)
  801b88:	04002074 	movhi	r16,129
  801b8c:	dc400115 	stw	r17,4(sp)
  801b90:	84123b04 	addi	r16,r16,18668
  801b94:	2023883a 	mov	r17,r4
  801b98:	2809883a 	mov	r4,r5
  801b9c:	dfc00215 	stw	ra,8(sp)
  801ba0:	80000015 	stw	zero,0(r16)
  801ba4:	080e0500 	call	80e050 <sbrk>
  801ba8:	00ffffc4 	movi	r3,-1
  801bac:	10c00526 	beq	r2,r3,801bc4 <_sbrk_r+0x44>
  801bb0:	dfc00217 	ldw	ra,8(sp)
  801bb4:	dc400117 	ldw	r17,4(sp)
  801bb8:	dc000017 	ldw	r16,0(sp)
  801bbc:	dec00304 	addi	sp,sp,12
  801bc0:	f800283a 	ret
  801bc4:	80c00017 	ldw	r3,0(r16)
  801bc8:	183ff926 	beq	r3,zero,801bb0 <__alt_data_end+0xff801bb0>
  801bcc:	88c00015 	stw	r3,0(r17)
  801bd0:	003ff706 	br	801bb0 <__alt_data_end+0xff801bb0>

00801bd4 <strlen>:
  801bd4:	208000cc 	andi	r2,r4,3
  801bd8:	10002026 	beq	r2,zero,801c5c <strlen+0x88>
  801bdc:	20800007 	ldb	r2,0(r4)
  801be0:	10002026 	beq	r2,zero,801c64 <strlen+0x90>
  801be4:	2005883a 	mov	r2,r4
  801be8:	00000206 	br	801bf4 <strlen+0x20>
  801bec:	10c00007 	ldb	r3,0(r2)
  801bf0:	18001826 	beq	r3,zero,801c54 <strlen+0x80>
  801bf4:	10800044 	addi	r2,r2,1
  801bf8:	10c000cc 	andi	r3,r2,3
  801bfc:	183ffb1e 	bne	r3,zero,801bec <__alt_data_end+0xff801bec>
  801c00:	10c00017 	ldw	r3,0(r2)
  801c04:	01ffbff4 	movhi	r7,65279
  801c08:	39ffbfc4 	addi	r7,r7,-257
  801c0c:	00ca303a 	nor	r5,zero,r3
  801c10:	01a02074 	movhi	r6,32897
  801c14:	19c7883a 	add	r3,r3,r7
  801c18:	31a02004 	addi	r6,r6,-32640
  801c1c:	1946703a 	and	r3,r3,r5
  801c20:	1986703a 	and	r3,r3,r6
  801c24:	1800091e 	bne	r3,zero,801c4c <strlen+0x78>
  801c28:	10800104 	addi	r2,r2,4
  801c2c:	10c00017 	ldw	r3,0(r2)
  801c30:	19cb883a 	add	r5,r3,r7
  801c34:	00c6303a 	nor	r3,zero,r3
  801c38:	28c6703a 	and	r3,r5,r3
  801c3c:	1986703a 	and	r3,r3,r6
  801c40:	183ff926 	beq	r3,zero,801c28 <__alt_data_end+0xff801c28>
  801c44:	00000106 	br	801c4c <strlen+0x78>
  801c48:	10800044 	addi	r2,r2,1
  801c4c:	10c00007 	ldb	r3,0(r2)
  801c50:	183ffd1e 	bne	r3,zero,801c48 <__alt_data_end+0xff801c48>
  801c54:	1105c83a 	sub	r2,r2,r4
  801c58:	f800283a 	ret
  801c5c:	2005883a 	mov	r2,r4
  801c60:	003fe706 	br	801c00 <__alt_data_end+0xff801c00>
  801c64:	0005883a 	mov	r2,zero
  801c68:	f800283a 	ret

00801c6c <___vfprintf_internal_r>:
  801c6c:	deffb804 	addi	sp,sp,-288
  801c70:	dfc04715 	stw	ra,284(sp)
  801c74:	ddc04515 	stw	r23,276(sp)
  801c78:	dd404315 	stw	r21,268(sp)
  801c7c:	d9002d15 	stw	r4,180(sp)
  801c80:	282f883a 	mov	r23,r5
  801c84:	302b883a 	mov	r21,r6
  801c88:	d9c02e15 	stw	r7,184(sp)
  801c8c:	df004615 	stw	fp,280(sp)
  801c90:	dd804415 	stw	r22,272(sp)
  801c94:	dd004215 	stw	r20,264(sp)
  801c98:	dcc04115 	stw	r19,260(sp)
  801c9c:	dc804015 	stw	r18,256(sp)
  801ca0:	dc403f15 	stw	r17,252(sp)
  801ca4:	dc003e15 	stw	r16,248(sp)
  801ca8:	0806bac0 	call	806bac <_localeconv_r>
  801cac:	10800017 	ldw	r2,0(r2)
  801cb0:	1009883a 	mov	r4,r2
  801cb4:	d8803415 	stw	r2,208(sp)
  801cb8:	0801bd40 	call	801bd4 <strlen>
  801cbc:	d8803715 	stw	r2,220(sp)
  801cc0:	d8802d17 	ldw	r2,180(sp)
  801cc4:	10000226 	beq	r2,zero,801cd0 <___vfprintf_internal_r+0x64>
  801cc8:	10800e17 	ldw	r2,56(r2)
  801ccc:	1000fb26 	beq	r2,zero,8020bc <___vfprintf_internal_r+0x450>
  801cd0:	b880030b 	ldhu	r2,12(r23)
  801cd4:	10c8000c 	andi	r3,r2,8192
  801cd8:	1800061e 	bne	r3,zero,801cf4 <___vfprintf_internal_r+0x88>
  801cdc:	b9001917 	ldw	r4,100(r23)
  801ce0:	00f7ffc4 	movi	r3,-8193
  801ce4:	10880014 	ori	r2,r2,8192
  801ce8:	20c6703a 	and	r3,r4,r3
  801cec:	b880030d 	sth	r2,12(r23)
  801cf0:	b8c01915 	stw	r3,100(r23)
  801cf4:	10c0020c 	andi	r3,r2,8
  801cf8:	1800c326 	beq	r3,zero,802008 <___vfprintf_internal_r+0x39c>
  801cfc:	b8c00417 	ldw	r3,16(r23)
  801d00:	1800c126 	beq	r3,zero,802008 <___vfprintf_internal_r+0x39c>
  801d04:	1080068c 	andi	r2,r2,26
  801d08:	00c00284 	movi	r3,10
  801d0c:	10c0c626 	beq	r2,r3,802028 <___vfprintf_internal_r+0x3bc>
  801d10:	d8c00404 	addi	r3,sp,16
  801d14:	05002074 	movhi	r20,129
  801d18:	d9001e04 	addi	r4,sp,120
  801d1c:	a503dc84 	addi	r20,r20,3954
  801d20:	d8c01e15 	stw	r3,120(sp)
  801d24:	d8002015 	stw	zero,128(sp)
  801d28:	d8001f15 	stw	zero,124(sp)
  801d2c:	d8003315 	stw	zero,204(sp)
  801d30:	d8003615 	stw	zero,216(sp)
  801d34:	d8003815 	stw	zero,224(sp)
  801d38:	1811883a 	mov	r8,r3
  801d3c:	d8003915 	stw	zero,228(sp)
  801d40:	d8003a15 	stw	zero,232(sp)
  801d44:	d8002f15 	stw	zero,188(sp)
  801d48:	d9002815 	stw	r4,160(sp)
  801d4c:	a8800007 	ldb	r2,0(r21)
  801d50:	10028b26 	beq	r2,zero,802780 <___vfprintf_internal_r+0xb14>
  801d54:	00c00944 	movi	r3,37
  801d58:	a823883a 	mov	r17,r21
  801d5c:	10c0021e 	bne	r2,r3,801d68 <___vfprintf_internal_r+0xfc>
  801d60:	00001406 	br	801db4 <___vfprintf_internal_r+0x148>
  801d64:	10c00326 	beq	r2,r3,801d74 <___vfprintf_internal_r+0x108>
  801d68:	8c400044 	addi	r17,r17,1
  801d6c:	88800007 	ldb	r2,0(r17)
  801d70:	103ffc1e 	bne	r2,zero,801d64 <__alt_data_end+0xff801d64>
  801d74:	8d61c83a 	sub	r16,r17,r21
  801d78:	80000e26 	beq	r16,zero,801db4 <___vfprintf_internal_r+0x148>
  801d7c:	d8c02017 	ldw	r3,128(sp)
  801d80:	d8801f17 	ldw	r2,124(sp)
  801d84:	45400015 	stw	r21,0(r8)
  801d88:	1c07883a 	add	r3,r3,r16
  801d8c:	10800044 	addi	r2,r2,1
  801d90:	d8c02015 	stw	r3,128(sp)
  801d94:	44000115 	stw	r16,4(r8)
  801d98:	d8801f15 	stw	r2,124(sp)
  801d9c:	00c001c4 	movi	r3,7
  801da0:	1880a916 	blt	r3,r2,802048 <___vfprintf_internal_r+0x3dc>
  801da4:	42000204 	addi	r8,r8,8
  801da8:	d9402f17 	ldw	r5,188(sp)
  801dac:	2c0b883a 	add	r5,r5,r16
  801db0:	d9402f15 	stw	r5,188(sp)
  801db4:	88800007 	ldb	r2,0(r17)
  801db8:	1000aa26 	beq	r2,zero,802064 <___vfprintf_internal_r+0x3f8>
  801dbc:	8d400044 	addi	r21,r17,1
  801dc0:	8c400047 	ldb	r17,1(r17)
  801dc4:	0021883a 	mov	r16,zero
  801dc8:	00bfffc4 	movi	r2,-1
  801dcc:	0025883a 	mov	r18,zero
  801dd0:	dc002905 	stb	r16,164(sp)
  801dd4:	d8002785 	stb	zero,158(sp)
  801dd8:	d8002b05 	stb	zero,172(sp)
  801ddc:	d8802a15 	stw	r2,168(sp)
  801de0:	d8003115 	stw	zero,196(sp)
  801de4:	04c01604 	movi	r19,88
  801de8:	05800244 	movi	r22,9
  801dec:	9021883a 	mov	r16,r18
  801df0:	4039883a 	mov	fp,r8
  801df4:	ad400044 	addi	r21,r21,1
  801df8:	88bff804 	addi	r2,r17,-32
  801dfc:	98833236 	bltu	r19,r2,802ac8 <___vfprintf_internal_r+0xe5c>
  801e00:	100490ba 	slli	r2,r2,2
  801e04:	00c02034 	movhi	r3,128
  801e08:	18c78604 	addi	r3,r3,7704
  801e0c:	10c5883a 	add	r2,r2,r3
  801e10:	10800017 	ldw	r2,0(r2)
  801e14:	1000683a 	jmp	r2
  801e18:	008029c0 	call	8029c <__alt_mem_sdram-0x77fd64>
  801e1c:	00802ac8 	cmpgei	r2,zero,171
  801e20:	00802ac8 	cmpgei	r2,zero,171
  801e24:	008029e0 	cmpeqi	r2,zero,167
  801e28:	00802ac8 	cmpgei	r2,zero,171
  801e2c:	00802ac8 	cmpgei	r2,zero,171
  801e30:	00802ac8 	cmpgei	r2,zero,171
  801e34:	00802ac8 	cmpgei	r2,zero,171
  801e38:	00802ac8 	cmpgei	r2,zero,171
  801e3c:	00802ac8 	cmpgei	r2,zero,171
  801e40:	008020c8 	cmpgei	r2,zero,131
  801e44:	008028d0 	cmplti	r2,zero,163
  801e48:	00802ac8 	cmpgei	r2,zero,171
  801e4c:	00801f8c 	andi	r2,zero,126
  801e50:	008020ec 	andhi	r2,zero,131
  801e54:	00802ac8 	cmpgei	r2,zero,171
  801e58:	0080213c 	xorhi	r2,zero,132
  801e5c:	00802148 	cmpgei	r2,zero,133
  801e60:	00802148 	cmpgei	r2,zero,133
  801e64:	00802148 	cmpgei	r2,zero,133
  801e68:	00802148 	cmpgei	r2,zero,133
  801e6c:	00802148 	cmpgei	r2,zero,133
  801e70:	00802148 	cmpgei	r2,zero,133
  801e74:	00802148 	cmpgei	r2,zero,133
  801e78:	00802148 	cmpgei	r2,zero,133
  801e7c:	00802148 	cmpgei	r2,zero,133
  801e80:	00802ac8 	cmpgei	r2,zero,171
  801e84:	00802ac8 	cmpgei	r2,zero,171
  801e88:	00802ac8 	cmpgei	r2,zero,171
  801e8c:	00802ac8 	cmpgei	r2,zero,171
  801e90:	00802ac8 	cmpgei	r2,zero,171
  801e94:	00802ac8 	cmpgei	r2,zero,171
  801e98:	00802ac8 	cmpgei	r2,zero,171
  801e9c:	00802ac8 	cmpgei	r2,zero,171
  801ea0:	00802ac8 	cmpgei	r2,zero,171
  801ea4:	00802ac8 	cmpgei	r2,zero,171
  801ea8:	00802184 	movi	r2,134
  801eac:	0080224c 	andi	r2,zero,137
  801eb0:	00802ac8 	cmpgei	r2,zero,171
  801eb4:	0080224c 	andi	r2,zero,137
  801eb8:	00802ac8 	cmpgei	r2,zero,171
  801ebc:	00802ac8 	cmpgei	r2,zero,171
  801ec0:	00802ac8 	cmpgei	r2,zero,171
  801ec4:	00802ac8 	cmpgei	r2,zero,171
  801ec8:	008022f8 	rdprs	r2,zero,139
  801ecc:	00802ac8 	cmpgei	r2,zero,171
  801ed0:	00802ac8 	cmpgei	r2,zero,171
  801ed4:	00802304 	movi	r2,140
  801ed8:	00802ac8 	cmpgei	r2,zero,171
  801edc:	00802ac8 	cmpgei	r2,zero,171
  801ee0:	00802ac8 	cmpgei	r2,zero,171
  801ee4:	00802ac8 	cmpgei	r2,zero,171
  801ee8:	00802ac8 	cmpgei	r2,zero,171
  801eec:	00802788 	cmpgei	r2,zero,158
  801ef0:	00802ac8 	cmpgei	r2,zero,171
  801ef4:	00802ac8 	cmpgei	r2,zero,171
  801ef8:	008027f4 	movhi	r2,159
  801efc:	00802ac8 	cmpgei	r2,zero,171
  801f00:	00802ac8 	cmpgei	r2,zero,171
  801f04:	00802ac8 	cmpgei	r2,zero,171
  801f08:	00802ac8 	cmpgei	r2,zero,171
  801f0c:	00802ac8 	cmpgei	r2,zero,171
  801f10:	00802ac8 	cmpgei	r2,zero,171
  801f14:	00802ac8 	cmpgei	r2,zero,171
  801f18:	00802ac8 	cmpgei	r2,zero,171
  801f1c:	00802ac8 	cmpgei	r2,zero,171
  801f20:	00802ac8 	cmpgei	r2,zero,171
  801f24:	00802a6c 	andhi	r2,zero,169
  801f28:	008029ec 	andhi	r2,zero,167
  801f2c:	0080224c 	andi	r2,zero,137
  801f30:	0080224c 	andi	r2,zero,137
  801f34:	0080224c 	andi	r2,zero,137
  801f38:	00802a0c 	andi	r2,zero,168
  801f3c:	008029ec 	andhi	r2,zero,167
  801f40:	00802ac8 	cmpgei	r2,zero,171
  801f44:	00802ac8 	cmpgei	r2,zero,171
  801f48:	00802a18 	cmpnei	r2,zero,168
  801f4c:	00802ac8 	cmpgei	r2,zero,171
  801f50:	00802a2c 	andhi	r2,zero,168
  801f54:	008028b0 	cmpltui	r2,zero,162
  801f58:	00801f98 	cmpnei	r2,zero,126
  801f5c:	008028e8 	cmpgeui	r2,zero,163
  801f60:	00802ac8 	cmpgei	r2,zero,171
  801f64:	008028f4 	movhi	r2,163
  801f68:	00802ac8 	cmpgei	r2,zero,171
  801f6c:	00802958 	cmpnei	r2,zero,165
  801f70:	00802ac8 	cmpgei	r2,zero,171
  801f74:	00802ac8 	cmpgei	r2,zero,171
  801f78:	00802978 	rdprs	r2,zero,165
  801f7c:	d8c03117 	ldw	r3,196(sp)
  801f80:	d8802e15 	stw	r2,184(sp)
  801f84:	00c7c83a 	sub	r3,zero,r3
  801f88:	d8c03115 	stw	r3,196(sp)
  801f8c:	84000114 	ori	r16,r16,4
  801f90:	ac400007 	ldb	r17,0(r21)
  801f94:	003f9706 	br	801df4 <__alt_data_end+0xff801df4>
  801f98:	00800c04 	movi	r2,48
  801f9c:	d8802705 	stb	r2,156(sp)
  801fa0:	00801e04 	movi	r2,120
  801fa4:	d8802745 	stb	r2,157(sp)
  801fa8:	d9002a17 	ldw	r4,168(sp)
  801fac:	d8802e17 	ldw	r2,184(sp)
  801fb0:	d8002785 	stb	zero,158(sp)
  801fb4:	e011883a 	mov	r8,fp
  801fb8:	10c00104 	addi	r3,r2,4
  801fbc:	14c00017 	ldw	r19,0(r2)
  801fc0:	002d883a 	mov	r22,zero
  801fc4:	80800094 	ori	r2,r16,2
  801fc8:	2002ca16 	blt	r4,zero,802af4 <___vfprintf_internal_r+0xe88>
  801fcc:	00bfdfc4 	movi	r2,-129
  801fd0:	80a4703a 	and	r18,r16,r2
  801fd4:	d8c02e15 	stw	r3,184(sp)
  801fd8:	94800094 	ori	r18,r18,2
  801fdc:	9802b41e 	bne	r19,zero,802ab0 <___vfprintf_internal_r+0xe44>
  801fe0:	01402074 	movhi	r5,129
  801fe4:	2943d504 	addi	r5,r5,3924
  801fe8:	d9403915 	stw	r5,228(sp)
  801fec:	04401e04 	movi	r17,120
  801ff0:	d8802a17 	ldw	r2,168(sp)
  801ff4:	0039883a 	mov	fp,zero
  801ff8:	1001fa26 	beq	r2,zero,8027e4 <___vfprintf_internal_r+0xb78>
  801ffc:	0027883a 	mov	r19,zero
  802000:	002d883a 	mov	r22,zero
  802004:	00021906 	br	80286c <___vfprintf_internal_r+0xc00>
  802008:	d9002d17 	ldw	r4,180(sp)
  80200c:	b80b883a 	mov	r5,r23
  802010:	08040200 	call	804020 <__swsetup_r>
  802014:	1005dc1e 	bne	r2,zero,803788 <___vfprintf_internal_r+0x1b1c>
  802018:	b880030b 	ldhu	r2,12(r23)
  80201c:	00c00284 	movi	r3,10
  802020:	1080068c 	andi	r2,r2,26
  802024:	10ff3a1e 	bne	r2,r3,801d10 <__alt_data_end+0xff801d10>
  802028:	b880038f 	ldh	r2,14(r23)
  80202c:	103f3816 	blt	r2,zero,801d10 <__alt_data_end+0xff801d10>
  802030:	d9c02e17 	ldw	r7,184(sp)
  802034:	d9002d17 	ldw	r4,180(sp)
  802038:	a80d883a 	mov	r6,r21
  80203c:	b80b883a 	mov	r5,r23
  802040:	0803f640 	call	803f64 <__sbprintf>
  802044:	00001106 	br	80208c <___vfprintf_internal_r+0x420>
  802048:	d9002d17 	ldw	r4,180(sp)
  80204c:	d9801e04 	addi	r6,sp,120
  802050:	b80b883a 	mov	r5,r23
  802054:	0808bec0 	call	808bec <__sprint_r>
  802058:	1000081e 	bne	r2,zero,80207c <___vfprintf_internal_r+0x410>
  80205c:	da000404 	addi	r8,sp,16
  802060:	003f5106 	br	801da8 <__alt_data_end+0xff801da8>
  802064:	d8802017 	ldw	r2,128(sp)
  802068:	10000426 	beq	r2,zero,80207c <___vfprintf_internal_r+0x410>
  80206c:	d9002d17 	ldw	r4,180(sp)
  802070:	d9801e04 	addi	r6,sp,120
  802074:	b80b883a 	mov	r5,r23
  802078:	0808bec0 	call	808bec <__sprint_r>
  80207c:	b880030b 	ldhu	r2,12(r23)
  802080:	1080100c 	andi	r2,r2,64
  802084:	1005c01e 	bne	r2,zero,803788 <___vfprintf_internal_r+0x1b1c>
  802088:	d8802f17 	ldw	r2,188(sp)
  80208c:	dfc04717 	ldw	ra,284(sp)
  802090:	df004617 	ldw	fp,280(sp)
  802094:	ddc04517 	ldw	r23,276(sp)
  802098:	dd804417 	ldw	r22,272(sp)
  80209c:	dd404317 	ldw	r21,268(sp)
  8020a0:	dd004217 	ldw	r20,264(sp)
  8020a4:	dcc04117 	ldw	r19,260(sp)
  8020a8:	dc804017 	ldw	r18,256(sp)
  8020ac:	dc403f17 	ldw	r17,252(sp)
  8020b0:	dc003e17 	ldw	r16,248(sp)
  8020b4:	dec04804 	addi	sp,sp,288
  8020b8:	f800283a 	ret
  8020bc:	d9002d17 	ldw	r4,180(sp)
  8020c0:	080602c0 	call	80602c <__sinit>
  8020c4:	003f0206 	br	801cd0 <__alt_data_end+0xff801cd0>
  8020c8:	d9002e17 	ldw	r4,184(sp)
  8020cc:	d9402e17 	ldw	r5,184(sp)
  8020d0:	21000017 	ldw	r4,0(r4)
  8020d4:	28800104 	addi	r2,r5,4
  8020d8:	d9003115 	stw	r4,196(sp)
  8020dc:	203fa716 	blt	r4,zero,801f7c <__alt_data_end+0xff801f7c>
  8020e0:	d8802e15 	stw	r2,184(sp)
  8020e4:	ac400007 	ldb	r17,0(r21)
  8020e8:	003f4206 	br	801df4 <__alt_data_end+0xff801df4>
  8020ec:	ac400007 	ldb	r17,0(r21)
  8020f0:	01000a84 	movi	r4,42
  8020f4:	a8c00044 	addi	r3,r21,1
  8020f8:	89075826 	beq	r17,r4,803e5c <___vfprintf_internal_r+0x21f0>
  8020fc:	8cbff404 	addi	r18,r17,-48
  802100:	b486ae36 	bltu	r22,r18,803bbc <___vfprintf_internal_r+0x1f50>
  802104:	0009883a 	mov	r4,zero
  802108:	1823883a 	mov	r17,r3
  80210c:	01400284 	movi	r5,10
  802110:	080b8a80 	call	80b8a8 <__mulsi3>
  802114:	88c00007 	ldb	r3,0(r17)
  802118:	1489883a 	add	r4,r2,r18
  80211c:	8d400044 	addi	r21,r17,1
  802120:	1cbff404 	addi	r18,r3,-48
  802124:	a823883a 	mov	r17,r21
  802128:	b4bff82e 	bgeu	r22,r18,80210c <__alt_data_end+0xff80210c>
  80212c:	1823883a 	mov	r17,r3
  802130:	2005f616 	blt	r4,zero,80390c <___vfprintf_internal_r+0x1ca0>
  802134:	d9002a15 	stw	r4,168(sp)
  802138:	003f2f06 	br	801df8 <__alt_data_end+0xff801df8>
  80213c:	84002014 	ori	r16,r16,128
  802140:	ac400007 	ldb	r17,0(r21)
  802144:	003f2b06 	br	801df4 <__alt_data_end+0xff801df4>
  802148:	8cbff404 	addi	r18,r17,-48
  80214c:	d8003115 	stw	zero,196(sp)
  802150:	0009883a 	mov	r4,zero
  802154:	a823883a 	mov	r17,r21
  802158:	01400284 	movi	r5,10
  80215c:	080b8a80 	call	80b8a8 <__mulsi3>
  802160:	88c00007 	ldb	r3,0(r17)
  802164:	9089883a 	add	r4,r18,r2
  802168:	ad400044 	addi	r21,r21,1
  80216c:	1cbff404 	addi	r18,r3,-48
  802170:	a823883a 	mov	r17,r21
  802174:	b4bff82e 	bgeu	r22,r18,802158 <__alt_data_end+0xff802158>
  802178:	1823883a 	mov	r17,r3
  80217c:	d9003115 	stw	r4,196(sp)
  802180:	003f1d06 	br	801df8 <__alt_data_end+0xff801df8>
  802184:	8025883a 	mov	r18,r16
  802188:	dc002903 	ldbu	r16,164(sp)
  80218c:	e011883a 	mov	r8,fp
  802190:	84003fcc 	andi	r16,r16,255
  802194:	8007531e 	bne	r16,zero,803ee4 <___vfprintf_internal_r+0x2278>
  802198:	94800414 	ori	r18,r18,16
  80219c:	9080080c 	andi	r2,r18,32
  8021a0:	1003a326 	beq	r2,zero,803030 <___vfprintf_internal_r+0x13c4>
  8021a4:	d9002e17 	ldw	r4,184(sp)
  8021a8:	20800117 	ldw	r2,4(r4)
  8021ac:	24c00017 	ldw	r19,0(r4)
  8021b0:	21000204 	addi	r4,r4,8
  8021b4:	d9002e15 	stw	r4,184(sp)
  8021b8:	102d883a 	mov	r22,r2
  8021bc:	10047316 	blt	r2,zero,80338c <___vfprintf_internal_r+0x1720>
  8021c0:	d9002a17 	ldw	r4,168(sp)
  8021c4:	df002783 	ldbu	fp,158(sp)
  8021c8:	2003e416 	blt	r4,zero,80315c <___vfprintf_internal_r+0x14f0>
  8021cc:	00ffdfc4 	movi	r3,-129
  8021d0:	9d84b03a 	or	r2,r19,r22
  8021d4:	90e4703a 	and	r18,r18,r3
  8021d8:	10018026 	beq	r2,zero,8027dc <___vfprintf_internal_r+0xb70>
  8021dc:	b003ab26 	beq	r22,zero,80308c <___vfprintf_internal_r+0x1420>
  8021e0:	dc402915 	stw	r17,164(sp)
  8021e4:	dc001e04 	addi	r16,sp,120
  8021e8:	b023883a 	mov	r17,r22
  8021ec:	402d883a 	mov	r22,r8
  8021f0:	9809883a 	mov	r4,r19
  8021f4:	880b883a 	mov	r5,r17
  8021f8:	01800284 	movi	r6,10
  8021fc:	000f883a 	mov	r7,zero
  802200:	080b1300 	call	80b130 <__umoddi3>
  802204:	10800c04 	addi	r2,r2,48
  802208:	843fffc4 	addi	r16,r16,-1
  80220c:	9809883a 	mov	r4,r19
  802210:	880b883a 	mov	r5,r17
  802214:	80800005 	stb	r2,0(r16)
  802218:	01800284 	movi	r6,10
  80221c:	000f883a 	mov	r7,zero
  802220:	080ab340 	call	80ab34 <__udivdi3>
  802224:	1027883a 	mov	r19,r2
  802228:	10c4b03a 	or	r2,r2,r3
  80222c:	1823883a 	mov	r17,r3
  802230:	103fef1e 	bne	r2,zero,8021f0 <__alt_data_end+0xff8021f0>
  802234:	d8c02817 	ldw	r3,160(sp)
  802238:	dc402917 	ldw	r17,164(sp)
  80223c:	b011883a 	mov	r8,r22
  802240:	1c07c83a 	sub	r3,r3,r16
  802244:	d8c02b15 	stw	r3,172(sp)
  802248:	00005f06 	br	8023c8 <___vfprintf_internal_r+0x75c>
  80224c:	8025883a 	mov	r18,r16
  802250:	dc002903 	ldbu	r16,164(sp)
  802254:	e011883a 	mov	r8,fp
  802258:	84003fcc 	andi	r16,r16,255
  80225c:	80071e1e 	bne	r16,zero,803ed8 <___vfprintf_internal_r+0x226c>
  802260:	9080020c 	andi	r2,r18,8
  802264:	1004af26 	beq	r2,zero,803524 <___vfprintf_internal_r+0x18b8>
  802268:	d9002e17 	ldw	r4,184(sp)
  80226c:	d9402e17 	ldw	r5,184(sp)
  802270:	d8802e17 	ldw	r2,184(sp)
  802274:	21000017 	ldw	r4,0(r4)
  802278:	29400117 	ldw	r5,4(r5)
  80227c:	10800204 	addi	r2,r2,8
  802280:	d9003615 	stw	r4,216(sp)
  802284:	d9403815 	stw	r5,224(sp)
  802288:	d8802e15 	stw	r2,184(sp)
  80228c:	d9003617 	ldw	r4,216(sp)
  802290:	d9403817 	ldw	r5,224(sp)
  802294:	da003d15 	stw	r8,244(sp)
  802298:	04000044 	movi	r16,1
  80229c:	08088640 	call	808864 <__fpclassifyd>
  8022a0:	da003d17 	ldw	r8,244(sp)
  8022a4:	1404441e 	bne	r2,r16,8033b8 <___vfprintf_internal_r+0x174c>
  8022a8:	d9003617 	ldw	r4,216(sp)
  8022ac:	d9403817 	ldw	r5,224(sp)
  8022b0:	000d883a 	mov	r6,zero
  8022b4:	000f883a 	mov	r7,zero
  8022b8:	080c4040 	call	80c404 <__ledf2>
  8022bc:	da003d17 	ldw	r8,244(sp)
  8022c0:	1005e316 	blt	r2,zero,803a50 <___vfprintf_internal_r+0x1de4>
  8022c4:	df002783 	ldbu	fp,158(sp)
  8022c8:	008011c4 	movi	r2,71
  8022cc:	1445580e 	bge	r2,r17,803830 <___vfprintf_internal_r+0x1bc4>
  8022d0:	04002074 	movhi	r16,129
  8022d4:	8403cd04 	addi	r16,r16,3892
  8022d8:	00c000c4 	movi	r3,3
  8022dc:	00bfdfc4 	movi	r2,-129
  8022e0:	d8c02915 	stw	r3,164(sp)
  8022e4:	90a4703a 	and	r18,r18,r2
  8022e8:	d8c02b15 	stw	r3,172(sp)
  8022ec:	d8002a15 	stw	zero,168(sp)
  8022f0:	d8003215 	stw	zero,200(sp)
  8022f4:	00003a06 	br	8023e0 <___vfprintf_internal_r+0x774>
  8022f8:	84000214 	ori	r16,r16,8
  8022fc:	ac400007 	ldb	r17,0(r21)
  802300:	003ebc06 	br	801df4 <__alt_data_end+0xff801df4>
  802304:	8025883a 	mov	r18,r16
  802308:	dc002903 	ldbu	r16,164(sp)
  80230c:	e011883a 	mov	r8,fp
  802310:	84003fcc 	andi	r16,r16,255
  802314:	8007001e 	bne	r16,zero,803f18 <___vfprintf_internal_r+0x22ac>
  802318:	94800414 	ori	r18,r18,16
  80231c:	9080080c 	andi	r2,r18,32
  802320:	1002fa26 	beq	r2,zero,802f0c <___vfprintf_internal_r+0x12a0>
  802324:	d9002e17 	ldw	r4,184(sp)
  802328:	d9402a17 	ldw	r5,168(sp)
  80232c:	d8002785 	stb	zero,158(sp)
  802330:	20800204 	addi	r2,r4,8
  802334:	24c00017 	ldw	r19,0(r4)
  802338:	25800117 	ldw	r22,4(r4)
  80233c:	2804b116 	blt	r5,zero,803604 <___vfprintf_internal_r+0x1998>
  802340:	013fdfc4 	movi	r4,-129
  802344:	9d86b03a 	or	r3,r19,r22
  802348:	d8802e15 	stw	r2,184(sp)
  80234c:	9124703a 	and	r18,r18,r4
  802350:	1802fb1e 	bne	r3,zero,802f40 <___vfprintf_internal_r+0x12d4>
  802354:	d8c02a17 	ldw	r3,168(sp)
  802358:	0039883a 	mov	fp,zero
  80235c:	1805e526 	beq	r3,zero,803af4 <___vfprintf_internal_r+0x1e88>
  802360:	0027883a 	mov	r19,zero
  802364:	002d883a 	mov	r22,zero
  802368:	dc001e04 	addi	r16,sp,120
  80236c:	9806d0fa 	srli	r3,r19,3
  802370:	b008977a 	slli	r4,r22,29
  802374:	b02cd0fa 	srli	r22,r22,3
  802378:	9cc001cc 	andi	r19,r19,7
  80237c:	98800c04 	addi	r2,r19,48
  802380:	843fffc4 	addi	r16,r16,-1
  802384:	20e6b03a 	or	r19,r4,r3
  802388:	80800005 	stb	r2,0(r16)
  80238c:	9d86b03a 	or	r3,r19,r22
  802390:	183ff61e 	bne	r3,zero,80236c <__alt_data_end+0xff80236c>
  802394:	90c0004c 	andi	r3,r18,1
  802398:	18014126 	beq	r3,zero,8028a0 <___vfprintf_internal_r+0xc34>
  80239c:	10803fcc 	andi	r2,r2,255
  8023a0:	1080201c 	xori	r2,r2,128
  8023a4:	10bfe004 	addi	r2,r2,-128
  8023a8:	00c00c04 	movi	r3,48
  8023ac:	10c13c26 	beq	r2,r3,8028a0 <___vfprintf_internal_r+0xc34>
  8023b0:	80ffffc5 	stb	r3,-1(r16)
  8023b4:	d8c02817 	ldw	r3,160(sp)
  8023b8:	80bfffc4 	addi	r2,r16,-1
  8023bc:	1021883a 	mov	r16,r2
  8023c0:	1887c83a 	sub	r3,r3,r2
  8023c4:	d8c02b15 	stw	r3,172(sp)
  8023c8:	d8802b17 	ldw	r2,172(sp)
  8023cc:	d9002a17 	ldw	r4,168(sp)
  8023d0:	1100010e 	bge	r2,r4,8023d8 <___vfprintf_internal_r+0x76c>
  8023d4:	2005883a 	mov	r2,r4
  8023d8:	d8802915 	stw	r2,164(sp)
  8023dc:	d8003215 	stw	zero,200(sp)
  8023e0:	e7003fcc 	andi	fp,fp,255
  8023e4:	e700201c 	xori	fp,fp,128
  8023e8:	e73fe004 	addi	fp,fp,-128
  8023ec:	e0000326 	beq	fp,zero,8023fc <___vfprintf_internal_r+0x790>
  8023f0:	d8c02917 	ldw	r3,164(sp)
  8023f4:	18c00044 	addi	r3,r3,1
  8023f8:	d8c02915 	stw	r3,164(sp)
  8023fc:	90c0008c 	andi	r3,r18,2
  802400:	d8c02c15 	stw	r3,176(sp)
  802404:	18000326 	beq	r3,zero,802414 <___vfprintf_internal_r+0x7a8>
  802408:	d8c02917 	ldw	r3,164(sp)
  80240c:	18c00084 	addi	r3,r3,2
  802410:	d8c02915 	stw	r3,164(sp)
  802414:	90c0210c 	andi	r3,r18,132
  802418:	d8c03015 	stw	r3,192(sp)
  80241c:	1801c51e 	bne	r3,zero,802b34 <___vfprintf_internal_r+0xec8>
  802420:	d9003117 	ldw	r4,196(sp)
  802424:	d8c02917 	ldw	r3,164(sp)
  802428:	20e7c83a 	sub	r19,r4,r3
  80242c:	04c1c10e 	bge	zero,r19,802b34 <___vfprintf_internal_r+0xec8>
  802430:	02400404 	movi	r9,16
  802434:	d8c02017 	ldw	r3,128(sp)
  802438:	d8801f17 	ldw	r2,124(sp)
  80243c:	4cc52f0e 	bge	r9,r19,8038fc <___vfprintf_internal_r+0x1c90>
  802440:	01402074 	movhi	r5,129
  802444:	2943e084 	addi	r5,r5,3970
  802448:	dc403b15 	stw	r17,236(sp)
  80244c:	d9403515 	stw	r5,212(sp)
  802450:	9823883a 	mov	r17,r19
  802454:	482d883a 	mov	r22,r9
  802458:	9027883a 	mov	r19,r18
  80245c:	070001c4 	movi	fp,7
  802460:	8025883a 	mov	r18,r16
  802464:	dc002d17 	ldw	r16,180(sp)
  802468:	00000306 	br	802478 <___vfprintf_internal_r+0x80c>
  80246c:	8c7ffc04 	addi	r17,r17,-16
  802470:	42000204 	addi	r8,r8,8
  802474:	b440130e 	bge	r22,r17,8024c4 <___vfprintf_internal_r+0x858>
  802478:	01002074 	movhi	r4,129
  80247c:	18c00404 	addi	r3,r3,16
  802480:	10800044 	addi	r2,r2,1
  802484:	2103e084 	addi	r4,r4,3970
  802488:	41000015 	stw	r4,0(r8)
  80248c:	45800115 	stw	r22,4(r8)
  802490:	d8c02015 	stw	r3,128(sp)
  802494:	d8801f15 	stw	r2,124(sp)
  802498:	e0bff40e 	bge	fp,r2,80246c <__alt_data_end+0xff80246c>
  80249c:	d9801e04 	addi	r6,sp,120
  8024a0:	b80b883a 	mov	r5,r23
  8024a4:	8009883a 	mov	r4,r16
  8024a8:	0808bec0 	call	808bec <__sprint_r>
  8024ac:	103ef31e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  8024b0:	8c7ffc04 	addi	r17,r17,-16
  8024b4:	d8c02017 	ldw	r3,128(sp)
  8024b8:	d8801f17 	ldw	r2,124(sp)
  8024bc:	da000404 	addi	r8,sp,16
  8024c0:	b47fed16 	blt	r22,r17,802478 <__alt_data_end+0xff802478>
  8024c4:	9021883a 	mov	r16,r18
  8024c8:	9825883a 	mov	r18,r19
  8024cc:	8827883a 	mov	r19,r17
  8024d0:	dc403b17 	ldw	r17,236(sp)
  8024d4:	d9403517 	ldw	r5,212(sp)
  8024d8:	98c7883a 	add	r3,r19,r3
  8024dc:	10800044 	addi	r2,r2,1
  8024e0:	41400015 	stw	r5,0(r8)
  8024e4:	44c00115 	stw	r19,4(r8)
  8024e8:	d8c02015 	stw	r3,128(sp)
  8024ec:	d8801f15 	stw	r2,124(sp)
  8024f0:	010001c4 	movi	r4,7
  8024f4:	2082c516 	blt	r4,r2,80300c <___vfprintf_internal_r+0x13a0>
  8024f8:	df002787 	ldb	fp,158(sp)
  8024fc:	42000204 	addi	r8,r8,8
  802500:	e0000c26 	beq	fp,zero,802534 <___vfprintf_internal_r+0x8c8>
  802504:	d8801f17 	ldw	r2,124(sp)
  802508:	d9002784 	addi	r4,sp,158
  80250c:	18c00044 	addi	r3,r3,1
  802510:	10800044 	addi	r2,r2,1
  802514:	41000015 	stw	r4,0(r8)
  802518:	01000044 	movi	r4,1
  80251c:	41000115 	stw	r4,4(r8)
  802520:	d8c02015 	stw	r3,128(sp)
  802524:	d8801f15 	stw	r2,124(sp)
  802528:	010001c4 	movi	r4,7
  80252c:	20825e16 	blt	r4,r2,802ea8 <___vfprintf_internal_r+0x123c>
  802530:	42000204 	addi	r8,r8,8
  802534:	d8802c17 	ldw	r2,176(sp)
  802538:	10000c26 	beq	r2,zero,80256c <___vfprintf_internal_r+0x900>
  80253c:	d8801f17 	ldw	r2,124(sp)
  802540:	d9002704 	addi	r4,sp,156
  802544:	18c00084 	addi	r3,r3,2
  802548:	10800044 	addi	r2,r2,1
  80254c:	41000015 	stw	r4,0(r8)
  802550:	01000084 	movi	r4,2
  802554:	41000115 	stw	r4,4(r8)
  802558:	d8c02015 	stw	r3,128(sp)
  80255c:	d8801f15 	stw	r2,124(sp)
  802560:	010001c4 	movi	r4,7
  802564:	20825816 	blt	r4,r2,802ec8 <___vfprintf_internal_r+0x125c>
  802568:	42000204 	addi	r8,r8,8
  80256c:	d9003017 	ldw	r4,192(sp)
  802570:	00802004 	movi	r2,128
  802574:	2081bb26 	beq	r4,r2,802c64 <___vfprintf_internal_r+0xff8>
  802578:	d9402a17 	ldw	r5,168(sp)
  80257c:	d8802b17 	ldw	r2,172(sp)
  802580:	28adc83a 	sub	r22,r5,r2
  802584:	0580310e 	bge	zero,r22,80264c <___vfprintf_internal_r+0x9e0>
  802588:	07000404 	movi	fp,16
  80258c:	d8801f17 	ldw	r2,124(sp)
  802590:	e584360e 	bge	fp,r22,80366c <___vfprintf_internal_r+0x1a00>
  802594:	01402074 	movhi	r5,129
  802598:	2943dc84 	addi	r5,r5,3954
  80259c:	dc402a15 	stw	r17,168(sp)
  8025a0:	d9402c15 	stw	r5,176(sp)
  8025a4:	b023883a 	mov	r17,r22
  8025a8:	04c001c4 	movi	r19,7
  8025ac:	a82d883a 	mov	r22,r21
  8025b0:	902b883a 	mov	r21,r18
  8025b4:	8025883a 	mov	r18,r16
  8025b8:	dc002d17 	ldw	r16,180(sp)
  8025bc:	00000306 	br	8025cc <___vfprintf_internal_r+0x960>
  8025c0:	8c7ffc04 	addi	r17,r17,-16
  8025c4:	42000204 	addi	r8,r8,8
  8025c8:	e440110e 	bge	fp,r17,802610 <___vfprintf_internal_r+0x9a4>
  8025cc:	18c00404 	addi	r3,r3,16
  8025d0:	10800044 	addi	r2,r2,1
  8025d4:	45000015 	stw	r20,0(r8)
  8025d8:	47000115 	stw	fp,4(r8)
  8025dc:	d8c02015 	stw	r3,128(sp)
  8025e0:	d8801f15 	stw	r2,124(sp)
  8025e4:	98bff60e 	bge	r19,r2,8025c0 <__alt_data_end+0xff8025c0>
  8025e8:	d9801e04 	addi	r6,sp,120
  8025ec:	b80b883a 	mov	r5,r23
  8025f0:	8009883a 	mov	r4,r16
  8025f4:	0808bec0 	call	808bec <__sprint_r>
  8025f8:	103ea01e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  8025fc:	8c7ffc04 	addi	r17,r17,-16
  802600:	d8c02017 	ldw	r3,128(sp)
  802604:	d8801f17 	ldw	r2,124(sp)
  802608:	da000404 	addi	r8,sp,16
  80260c:	e47fef16 	blt	fp,r17,8025cc <__alt_data_end+0xff8025cc>
  802610:	9021883a 	mov	r16,r18
  802614:	a825883a 	mov	r18,r21
  802618:	b02b883a 	mov	r21,r22
  80261c:	882d883a 	mov	r22,r17
  802620:	dc402a17 	ldw	r17,168(sp)
  802624:	d9002c17 	ldw	r4,176(sp)
  802628:	1d87883a 	add	r3,r3,r22
  80262c:	10800044 	addi	r2,r2,1
  802630:	41000015 	stw	r4,0(r8)
  802634:	45800115 	stw	r22,4(r8)
  802638:	d8c02015 	stw	r3,128(sp)
  80263c:	d8801f15 	stw	r2,124(sp)
  802640:	010001c4 	movi	r4,7
  802644:	20821016 	blt	r4,r2,802e88 <___vfprintf_internal_r+0x121c>
  802648:	42000204 	addi	r8,r8,8
  80264c:	9080400c 	andi	r2,r18,256
  802650:	10013a1e 	bne	r2,zero,802b3c <___vfprintf_internal_r+0xed0>
  802654:	d9402b17 	ldw	r5,172(sp)
  802658:	d8801f17 	ldw	r2,124(sp)
  80265c:	44000015 	stw	r16,0(r8)
  802660:	1947883a 	add	r3,r3,r5
  802664:	10800044 	addi	r2,r2,1
  802668:	41400115 	stw	r5,4(r8)
  80266c:	d8c02015 	stw	r3,128(sp)
  802670:	d8801f15 	stw	r2,124(sp)
  802674:	010001c4 	movi	r4,7
  802678:	2081f516 	blt	r4,r2,802e50 <___vfprintf_internal_r+0x11e4>
  80267c:	42000204 	addi	r8,r8,8
  802680:	9480010c 	andi	r18,r18,4
  802684:	90003226 	beq	r18,zero,802750 <___vfprintf_internal_r+0xae4>
  802688:	d9403117 	ldw	r5,196(sp)
  80268c:	d8802917 	ldw	r2,164(sp)
  802690:	28a1c83a 	sub	r16,r5,r2
  802694:	04002e0e 	bge	zero,r16,802750 <___vfprintf_internal_r+0xae4>
  802698:	04400404 	movi	r17,16
  80269c:	d8801f17 	ldw	r2,124(sp)
  8026a0:	8c04c40e 	bge	r17,r16,8039b4 <___vfprintf_internal_r+0x1d48>
  8026a4:	01402074 	movhi	r5,129
  8026a8:	2943e084 	addi	r5,r5,3970
  8026ac:	d9403515 	stw	r5,212(sp)
  8026b0:	048001c4 	movi	r18,7
  8026b4:	dcc02d17 	ldw	r19,180(sp)
  8026b8:	00000306 	br	8026c8 <___vfprintf_internal_r+0xa5c>
  8026bc:	843ffc04 	addi	r16,r16,-16
  8026c0:	42000204 	addi	r8,r8,8
  8026c4:	8c00130e 	bge	r17,r16,802714 <___vfprintf_internal_r+0xaa8>
  8026c8:	01002074 	movhi	r4,129
  8026cc:	18c00404 	addi	r3,r3,16
  8026d0:	10800044 	addi	r2,r2,1
  8026d4:	2103e084 	addi	r4,r4,3970
  8026d8:	41000015 	stw	r4,0(r8)
  8026dc:	44400115 	stw	r17,4(r8)
  8026e0:	d8c02015 	stw	r3,128(sp)
  8026e4:	d8801f15 	stw	r2,124(sp)
  8026e8:	90bff40e 	bge	r18,r2,8026bc <__alt_data_end+0xff8026bc>
  8026ec:	d9801e04 	addi	r6,sp,120
  8026f0:	b80b883a 	mov	r5,r23
  8026f4:	9809883a 	mov	r4,r19
  8026f8:	0808bec0 	call	808bec <__sprint_r>
  8026fc:	103e5f1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  802700:	843ffc04 	addi	r16,r16,-16
  802704:	d8c02017 	ldw	r3,128(sp)
  802708:	d8801f17 	ldw	r2,124(sp)
  80270c:	da000404 	addi	r8,sp,16
  802710:	8c3fed16 	blt	r17,r16,8026c8 <__alt_data_end+0xff8026c8>
  802714:	d9403517 	ldw	r5,212(sp)
  802718:	1c07883a 	add	r3,r3,r16
  80271c:	10800044 	addi	r2,r2,1
  802720:	41400015 	stw	r5,0(r8)
  802724:	44000115 	stw	r16,4(r8)
  802728:	d8c02015 	stw	r3,128(sp)
  80272c:	d8801f15 	stw	r2,124(sp)
  802730:	010001c4 	movi	r4,7
  802734:	2080060e 	bge	r4,r2,802750 <___vfprintf_internal_r+0xae4>
  802738:	d9002d17 	ldw	r4,180(sp)
  80273c:	d9801e04 	addi	r6,sp,120
  802740:	b80b883a 	mov	r5,r23
  802744:	0808bec0 	call	808bec <__sprint_r>
  802748:	103e4c1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  80274c:	d8c02017 	ldw	r3,128(sp)
  802750:	d8803117 	ldw	r2,196(sp)
  802754:	d9002917 	ldw	r4,164(sp)
  802758:	1100010e 	bge	r2,r4,802760 <___vfprintf_internal_r+0xaf4>
  80275c:	2005883a 	mov	r2,r4
  802760:	d9402f17 	ldw	r5,188(sp)
  802764:	288b883a 	add	r5,r5,r2
  802768:	d9402f15 	stw	r5,188(sp)
  80276c:	1801c01e 	bne	r3,zero,802e70 <___vfprintf_internal_r+0x1204>
  802770:	a8800007 	ldb	r2,0(r21)
  802774:	d8001f15 	stw	zero,124(sp)
  802778:	da000404 	addi	r8,sp,16
  80277c:	103d751e 	bne	r2,zero,801d54 <__alt_data_end+0xff801d54>
  802780:	a823883a 	mov	r17,r21
  802784:	003d8b06 	br	801db4 <__alt_data_end+0xff801db4>
  802788:	8025883a 	mov	r18,r16
  80278c:	dc002903 	ldbu	r16,164(sp)
  802790:	e011883a 	mov	r8,fp
  802794:	84003fcc 	andi	r16,r16,255
  802798:	8005e51e 	bne	r16,zero,803f30 <___vfprintf_internal_r+0x22c4>
  80279c:	94800414 	ori	r18,r18,16
  8027a0:	9080080c 	andi	r2,r18,32
  8027a4:	10022b26 	beq	r2,zero,803054 <___vfprintf_internal_r+0x13e8>
  8027a8:	d9002e17 	ldw	r4,184(sp)
  8027ac:	d9402a17 	ldw	r5,168(sp)
  8027b0:	d8002785 	stb	zero,158(sp)
  8027b4:	20c00204 	addi	r3,r4,8
  8027b8:	24c00017 	ldw	r19,0(r4)
  8027bc:	25800117 	ldw	r22,4(r4)
  8027c0:	28042e16 	blt	r5,zero,80387c <___vfprintf_internal_r+0x1c10>
  8027c4:	013fdfc4 	movi	r4,-129
  8027c8:	9d84b03a 	or	r2,r19,r22
  8027cc:	d8c02e15 	stw	r3,184(sp)
  8027d0:	9124703a 	and	r18,r18,r4
  8027d4:	0039883a 	mov	fp,zero
  8027d8:	103e801e 	bne	r2,zero,8021dc <__alt_data_end+0xff8021dc>
  8027dc:	d9002a17 	ldw	r4,168(sp)
  8027e0:	2002e01e 	bne	r4,zero,803364 <___vfprintf_internal_r+0x16f8>
  8027e4:	d8002a15 	stw	zero,168(sp)
  8027e8:	d8002b15 	stw	zero,172(sp)
  8027ec:	dc001e04 	addi	r16,sp,120
  8027f0:	003ef506 	br	8023c8 <__alt_data_end+0xff8023c8>
  8027f4:	8025883a 	mov	r18,r16
  8027f8:	dc002903 	ldbu	r16,164(sp)
  8027fc:	e011883a 	mov	r8,fp
  802800:	84003fcc 	andi	r16,r16,255
  802804:	8005ba1e 	bne	r16,zero,803ef0 <___vfprintf_internal_r+0x2284>
  802808:	01002074 	movhi	r4,129
  80280c:	2103d004 	addi	r4,r4,3904
  802810:	d9003915 	stw	r4,228(sp)
  802814:	9080080c 	andi	r2,r18,32
  802818:	10006126 	beq	r2,zero,8029a0 <___vfprintf_internal_r+0xd34>
  80281c:	d9402e17 	ldw	r5,184(sp)
  802820:	2cc00017 	ldw	r19,0(r5)
  802824:	2d800117 	ldw	r22,4(r5)
  802828:	29400204 	addi	r5,r5,8
  80282c:	d9402e15 	stw	r5,184(sp)
  802830:	9080004c 	andi	r2,r18,1
  802834:	1001ac26 	beq	r2,zero,802ee8 <___vfprintf_internal_r+0x127c>
  802838:	9d84b03a 	or	r2,r19,r22
  80283c:	10038526 	beq	r2,zero,803654 <___vfprintf_internal_r+0x19e8>
  802840:	d8c02a17 	ldw	r3,168(sp)
  802844:	00800c04 	movi	r2,48
  802848:	d8802705 	stb	r2,156(sp)
  80284c:	dc402745 	stb	r17,157(sp)
  802850:	d8002785 	stb	zero,158(sp)
  802854:	90800094 	ori	r2,r18,2
  802858:	18047916 	blt	r3,zero,803a40 <___vfprintf_internal_r+0x1dd4>
  80285c:	00bfdfc4 	movi	r2,-129
  802860:	90a4703a 	and	r18,r18,r2
  802864:	94800094 	ori	r18,r18,2
  802868:	0039883a 	mov	fp,zero
  80286c:	d9003917 	ldw	r4,228(sp)
  802870:	dc001e04 	addi	r16,sp,120
  802874:	988003cc 	andi	r2,r19,15
  802878:	b006973a 	slli	r3,r22,28
  80287c:	2085883a 	add	r2,r4,r2
  802880:	9826d13a 	srli	r19,r19,4
  802884:	10800003 	ldbu	r2,0(r2)
  802888:	b02cd13a 	srli	r22,r22,4
  80288c:	843fffc4 	addi	r16,r16,-1
  802890:	1ce6b03a 	or	r19,r3,r19
  802894:	80800005 	stb	r2,0(r16)
  802898:	9d84b03a 	or	r2,r19,r22
  80289c:	103ff51e 	bne	r2,zero,802874 <__alt_data_end+0xff802874>
  8028a0:	d8c02817 	ldw	r3,160(sp)
  8028a4:	1c07c83a 	sub	r3,r3,r16
  8028a8:	d8c02b15 	stw	r3,172(sp)
  8028ac:	003ec606 	br	8023c8 <__alt_data_end+0xff8023c8>
  8028b0:	8025883a 	mov	r18,r16
  8028b4:	dc002903 	ldbu	r16,164(sp)
  8028b8:	e011883a 	mov	r8,fp
  8028bc:	84003fcc 	andi	r16,r16,255
  8028c0:	803e9626 	beq	r16,zero,80231c <__alt_data_end+0xff80231c>
  8028c4:	d8c02b03 	ldbu	r3,172(sp)
  8028c8:	d8c02785 	stb	r3,158(sp)
  8028cc:	003e9306 	br	80231c <__alt_data_end+0xff80231c>
  8028d0:	00c00044 	movi	r3,1
  8028d4:	d8c02905 	stb	r3,164(sp)
  8028d8:	00c00ac4 	movi	r3,43
  8028dc:	d8c02b05 	stb	r3,172(sp)
  8028e0:	ac400007 	ldb	r17,0(r21)
  8028e4:	003d4306 	br	801df4 <__alt_data_end+0xff801df4>
  8028e8:	84000814 	ori	r16,r16,32
  8028ec:	ac400007 	ldb	r17,0(r21)
  8028f0:	003d4006 	br	801df4 <__alt_data_end+0xff801df4>
  8028f4:	d8802e17 	ldw	r2,184(sp)
  8028f8:	8025883a 	mov	r18,r16
  8028fc:	d8002785 	stb	zero,158(sp)
  802900:	14000017 	ldw	r16,0(r2)
  802904:	e011883a 	mov	r8,fp
  802908:	14c00104 	addi	r19,r2,4
  80290c:	80042d26 	beq	r16,zero,8039c4 <___vfprintf_internal_r+0x1d58>
  802910:	d8c02a17 	ldw	r3,168(sp)
  802914:	1803e416 	blt	r3,zero,8038a8 <___vfprintf_internal_r+0x1c3c>
  802918:	180d883a 	mov	r6,r3
  80291c:	000b883a 	mov	r5,zero
  802920:	8009883a 	mov	r4,r16
  802924:	df003d15 	stw	fp,244(sp)
  802928:	0806d980 	call	806d98 <memchr>
  80292c:	da003d17 	ldw	r8,244(sp)
  802930:	10046826 	beq	r2,zero,803ad4 <___vfprintf_internal_r+0x1e68>
  802934:	1405c83a 	sub	r2,r2,r16
  802938:	d8802b15 	stw	r2,172(sp)
  80293c:	1003e016 	blt	r2,zero,8038c0 <___vfprintf_internal_r+0x1c54>
  802940:	df002783 	ldbu	fp,158(sp)
  802944:	d8802915 	stw	r2,164(sp)
  802948:	dcc02e15 	stw	r19,184(sp)
  80294c:	d8002a15 	stw	zero,168(sp)
  802950:	d8003215 	stw	zero,200(sp)
  802954:	003ea206 	br	8023e0 <__alt_data_end+0xff8023e0>
  802958:	8025883a 	mov	r18,r16
  80295c:	dc002903 	ldbu	r16,164(sp)
  802960:	e011883a 	mov	r8,fp
  802964:	84003fcc 	andi	r16,r16,255
  802968:	803f8d26 	beq	r16,zero,8027a0 <__alt_data_end+0xff8027a0>
  80296c:	d8c02b03 	ldbu	r3,172(sp)
  802970:	d8c02785 	stb	r3,158(sp)
  802974:	003f8a06 	br	8027a0 <__alt_data_end+0xff8027a0>
  802978:	8025883a 	mov	r18,r16
  80297c:	dc002903 	ldbu	r16,164(sp)
  802980:	e011883a 	mov	r8,fp
  802984:	84003fcc 	andi	r16,r16,255
  802988:	8005661e 	bne	r16,zero,803f24 <___vfprintf_internal_r+0x22b8>
  80298c:	01002074 	movhi	r4,129
  802990:	2103d504 	addi	r4,r4,3924
  802994:	d9003915 	stw	r4,228(sp)
  802998:	9080080c 	andi	r2,r18,32
  80299c:	103f9f1e 	bne	r2,zero,80281c <__alt_data_end+0xff80281c>
  8029a0:	9080040c 	andi	r2,r18,16
  8029a4:	1002eb26 	beq	r2,zero,803554 <___vfprintf_internal_r+0x18e8>
  8029a8:	d8802e17 	ldw	r2,184(sp)
  8029ac:	002d883a 	mov	r22,zero
  8029b0:	14c00017 	ldw	r19,0(r2)
  8029b4:	10800104 	addi	r2,r2,4
  8029b8:	d8802e15 	stw	r2,184(sp)
  8029bc:	003f9c06 	br	802830 <__alt_data_end+0xff802830>
  8029c0:	d8802b07 	ldb	r2,172(sp)
  8029c4:	1002e11e 	bne	r2,zero,80354c <___vfprintf_internal_r+0x18e0>
  8029c8:	00c00044 	movi	r3,1
  8029cc:	d8c02905 	stb	r3,164(sp)
  8029d0:	00c00804 	movi	r3,32
  8029d4:	d8c02b05 	stb	r3,172(sp)
  8029d8:	ac400007 	ldb	r17,0(r21)
  8029dc:	003d0506 	br	801df4 <__alt_data_end+0xff801df4>
  8029e0:	84000054 	ori	r16,r16,1
  8029e4:	ac400007 	ldb	r17,0(r21)
  8029e8:	003d0206 	br	801df4 <__alt_data_end+0xff801df4>
  8029ec:	8025883a 	mov	r18,r16
  8029f0:	dc002903 	ldbu	r16,164(sp)
  8029f4:	e011883a 	mov	r8,fp
  8029f8:	84003fcc 	andi	r16,r16,255
  8029fc:	803de726 	beq	r16,zero,80219c <__alt_data_end+0xff80219c>
  802a00:	d8c02b03 	ldbu	r3,172(sp)
  802a04:	d8c02785 	stb	r3,158(sp)
  802a08:	003de406 	br	80219c <__alt_data_end+0xff80219c>
  802a0c:	84001014 	ori	r16,r16,64
  802a10:	ac400007 	ldb	r17,0(r21)
  802a14:	003cf706 	br	801df4 <__alt_data_end+0xff801df4>
  802a18:	ac400007 	ldb	r17,0(r21)
  802a1c:	00801b04 	movi	r2,108
  802a20:	88838f26 	beq	r17,r2,803860 <___vfprintf_internal_r+0x1bf4>
  802a24:	84000414 	ori	r16,r16,16
  802a28:	003cf206 	br	801df4 <__alt_data_end+0xff801df4>
  802a2c:	8025883a 	mov	r18,r16
  802a30:	dc002903 	ldbu	r16,164(sp)
  802a34:	e011883a 	mov	r8,fp
  802a38:	84003fcc 	andi	r16,r16,255
  802a3c:	80053f1e 	bne	r16,zero,803f3c <___vfprintf_internal_r+0x22d0>
  802a40:	9080080c 	andi	r2,r18,32
  802a44:	1002d226 	beq	r2,zero,803590 <___vfprintf_internal_r+0x1924>
  802a48:	d9002e17 	ldw	r4,184(sp)
  802a4c:	d9402f17 	ldw	r5,188(sp)
  802a50:	20800017 	ldw	r2,0(r4)
  802a54:	2807d7fa 	srai	r3,r5,31
  802a58:	21000104 	addi	r4,r4,4
  802a5c:	d9002e15 	stw	r4,184(sp)
  802a60:	11400015 	stw	r5,0(r2)
  802a64:	10c00115 	stw	r3,4(r2)
  802a68:	003cb806 	br	801d4c <__alt_data_end+0xff801d4c>
  802a6c:	d8c02e17 	ldw	r3,184(sp)
  802a70:	d9002e17 	ldw	r4,184(sp)
  802a74:	8025883a 	mov	r18,r16
  802a78:	18800017 	ldw	r2,0(r3)
  802a7c:	21000104 	addi	r4,r4,4
  802a80:	00c00044 	movi	r3,1
  802a84:	e011883a 	mov	r8,fp
  802a88:	d8c02915 	stw	r3,164(sp)
  802a8c:	d8002785 	stb	zero,158(sp)
  802a90:	d8801405 	stb	r2,80(sp)
  802a94:	d9002e15 	stw	r4,184(sp)
  802a98:	d8c02b15 	stw	r3,172(sp)
  802a9c:	d8002a15 	stw	zero,168(sp)
  802aa0:	d8003215 	stw	zero,200(sp)
  802aa4:	dc001404 	addi	r16,sp,80
  802aa8:	0039883a 	mov	fp,zero
  802aac:	003e5306 	br	8023fc <__alt_data_end+0xff8023fc>
  802ab0:	01002074 	movhi	r4,129
  802ab4:	2103d504 	addi	r4,r4,3924
  802ab8:	0039883a 	mov	fp,zero
  802abc:	d9003915 	stw	r4,228(sp)
  802ac0:	04401e04 	movi	r17,120
  802ac4:	003f6906 	br	80286c <__alt_data_end+0xff80286c>
  802ac8:	8025883a 	mov	r18,r16
  802acc:	dc002903 	ldbu	r16,164(sp)
  802ad0:	e011883a 	mov	r8,fp
  802ad4:	84003fcc 	andi	r16,r16,255
  802ad8:	8005081e 	bne	r16,zero,803efc <___vfprintf_internal_r+0x2290>
  802adc:	883d6126 	beq	r17,zero,802064 <__alt_data_end+0xff802064>
  802ae0:	00c00044 	movi	r3,1
  802ae4:	d8c02915 	stw	r3,164(sp)
  802ae8:	dc401405 	stb	r17,80(sp)
  802aec:	d8002785 	stb	zero,158(sp)
  802af0:	003fe906 	br	802a98 <__alt_data_end+0xff802a98>
  802af4:	01402074 	movhi	r5,129
  802af8:	2943d504 	addi	r5,r5,3924
  802afc:	d9403915 	stw	r5,228(sp)
  802b00:	d8c02e15 	stw	r3,184(sp)
  802b04:	1025883a 	mov	r18,r2
  802b08:	04401e04 	movi	r17,120
  802b0c:	9d84b03a 	or	r2,r19,r22
  802b10:	1000fc1e 	bne	r2,zero,802f04 <___vfprintf_internal_r+0x1298>
  802b14:	0039883a 	mov	fp,zero
  802b18:	00800084 	movi	r2,2
  802b1c:	10803fcc 	andi	r2,r2,255
  802b20:	00c00044 	movi	r3,1
  802b24:	10c20f26 	beq	r2,r3,803364 <___vfprintf_internal_r+0x16f8>
  802b28:	00c00084 	movi	r3,2
  802b2c:	10fd3326 	beq	r2,r3,801ffc <__alt_data_end+0xff801ffc>
  802b30:	003e0b06 	br	802360 <__alt_data_end+0xff802360>
  802b34:	d8c02017 	ldw	r3,128(sp)
  802b38:	003e7106 	br	802500 <__alt_data_end+0xff802500>
  802b3c:	00801944 	movi	r2,101
  802b40:	14407e0e 	bge	r2,r17,802d3c <___vfprintf_internal_r+0x10d0>
  802b44:	d9003617 	ldw	r4,216(sp)
  802b48:	d9403817 	ldw	r5,224(sp)
  802b4c:	000d883a 	mov	r6,zero
  802b50:	000f883a 	mov	r7,zero
  802b54:	d8c03c15 	stw	r3,240(sp)
  802b58:	da003d15 	stw	r8,244(sp)
  802b5c:	080c2a00 	call	80c2a0 <__eqdf2>
  802b60:	d8c03c17 	ldw	r3,240(sp)
  802b64:	da003d17 	ldw	r8,244(sp)
  802b68:	1000f71e 	bne	r2,zero,802f48 <___vfprintf_internal_r+0x12dc>
  802b6c:	d8801f17 	ldw	r2,124(sp)
  802b70:	01002074 	movhi	r4,129
  802b74:	2103dc04 	addi	r4,r4,3952
  802b78:	18c00044 	addi	r3,r3,1
  802b7c:	10800044 	addi	r2,r2,1
  802b80:	41000015 	stw	r4,0(r8)
  802b84:	01000044 	movi	r4,1
  802b88:	41000115 	stw	r4,4(r8)
  802b8c:	d8c02015 	stw	r3,128(sp)
  802b90:	d8801f15 	stw	r2,124(sp)
  802b94:	010001c4 	movi	r4,7
  802b98:	2082b816 	blt	r4,r2,80367c <___vfprintf_internal_r+0x1a10>
  802b9c:	42000204 	addi	r8,r8,8
  802ba0:	d8802617 	ldw	r2,152(sp)
  802ba4:	d9403317 	ldw	r5,204(sp)
  802ba8:	11400216 	blt	r2,r5,802bb4 <___vfprintf_internal_r+0xf48>
  802bac:	9080004c 	andi	r2,r18,1
  802bb0:	103eb326 	beq	r2,zero,802680 <__alt_data_end+0xff802680>
  802bb4:	d8803717 	ldw	r2,220(sp)
  802bb8:	d9003417 	ldw	r4,208(sp)
  802bbc:	d9403717 	ldw	r5,220(sp)
  802bc0:	1887883a 	add	r3,r3,r2
  802bc4:	d8801f17 	ldw	r2,124(sp)
  802bc8:	41000015 	stw	r4,0(r8)
  802bcc:	41400115 	stw	r5,4(r8)
  802bd0:	10800044 	addi	r2,r2,1
  802bd4:	d8c02015 	stw	r3,128(sp)
  802bd8:	d8801f15 	stw	r2,124(sp)
  802bdc:	010001c4 	movi	r4,7
  802be0:	20832916 	blt	r4,r2,803888 <___vfprintf_internal_r+0x1c1c>
  802be4:	42000204 	addi	r8,r8,8
  802be8:	d8803317 	ldw	r2,204(sp)
  802bec:	143fffc4 	addi	r16,r2,-1
  802bf0:	043ea30e 	bge	zero,r16,802680 <__alt_data_end+0xff802680>
  802bf4:	04400404 	movi	r17,16
  802bf8:	d8801f17 	ldw	r2,124(sp)
  802bfc:	8c00880e 	bge	r17,r16,802e20 <___vfprintf_internal_r+0x11b4>
  802c00:	01402074 	movhi	r5,129
  802c04:	2943dc84 	addi	r5,r5,3954
  802c08:	d9402c15 	stw	r5,176(sp)
  802c0c:	058001c4 	movi	r22,7
  802c10:	dcc02d17 	ldw	r19,180(sp)
  802c14:	00000306 	br	802c24 <___vfprintf_internal_r+0xfb8>
  802c18:	42000204 	addi	r8,r8,8
  802c1c:	843ffc04 	addi	r16,r16,-16
  802c20:	8c00820e 	bge	r17,r16,802e2c <___vfprintf_internal_r+0x11c0>
  802c24:	18c00404 	addi	r3,r3,16
  802c28:	10800044 	addi	r2,r2,1
  802c2c:	45000015 	stw	r20,0(r8)
  802c30:	44400115 	stw	r17,4(r8)
  802c34:	d8c02015 	stw	r3,128(sp)
  802c38:	d8801f15 	stw	r2,124(sp)
  802c3c:	b0bff60e 	bge	r22,r2,802c18 <__alt_data_end+0xff802c18>
  802c40:	d9801e04 	addi	r6,sp,120
  802c44:	b80b883a 	mov	r5,r23
  802c48:	9809883a 	mov	r4,r19
  802c4c:	0808bec0 	call	808bec <__sprint_r>
  802c50:	103d0a1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  802c54:	d8c02017 	ldw	r3,128(sp)
  802c58:	d8801f17 	ldw	r2,124(sp)
  802c5c:	da000404 	addi	r8,sp,16
  802c60:	003fee06 	br	802c1c <__alt_data_end+0xff802c1c>
  802c64:	d9403117 	ldw	r5,196(sp)
  802c68:	d8802917 	ldw	r2,164(sp)
  802c6c:	28adc83a 	sub	r22,r5,r2
  802c70:	05be410e 	bge	zero,r22,802578 <__alt_data_end+0xff802578>
  802c74:	07000404 	movi	fp,16
  802c78:	d8801f17 	ldw	r2,124(sp)
  802c7c:	e5838f0e 	bge	fp,r22,803abc <___vfprintf_internal_r+0x1e50>
  802c80:	01402074 	movhi	r5,129
  802c84:	2943dc84 	addi	r5,r5,3954
  802c88:	dc403015 	stw	r17,192(sp)
  802c8c:	d9402c15 	stw	r5,176(sp)
  802c90:	b023883a 	mov	r17,r22
  802c94:	04c001c4 	movi	r19,7
  802c98:	a82d883a 	mov	r22,r21
  802c9c:	902b883a 	mov	r21,r18
  802ca0:	8025883a 	mov	r18,r16
  802ca4:	dc002d17 	ldw	r16,180(sp)
  802ca8:	00000306 	br	802cb8 <___vfprintf_internal_r+0x104c>
  802cac:	8c7ffc04 	addi	r17,r17,-16
  802cb0:	42000204 	addi	r8,r8,8
  802cb4:	e440110e 	bge	fp,r17,802cfc <___vfprintf_internal_r+0x1090>
  802cb8:	18c00404 	addi	r3,r3,16
  802cbc:	10800044 	addi	r2,r2,1
  802cc0:	45000015 	stw	r20,0(r8)
  802cc4:	47000115 	stw	fp,4(r8)
  802cc8:	d8c02015 	stw	r3,128(sp)
  802ccc:	d8801f15 	stw	r2,124(sp)
  802cd0:	98bff60e 	bge	r19,r2,802cac <__alt_data_end+0xff802cac>
  802cd4:	d9801e04 	addi	r6,sp,120
  802cd8:	b80b883a 	mov	r5,r23
  802cdc:	8009883a 	mov	r4,r16
  802ce0:	0808bec0 	call	808bec <__sprint_r>
  802ce4:	103ce51e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  802ce8:	8c7ffc04 	addi	r17,r17,-16
  802cec:	d8c02017 	ldw	r3,128(sp)
  802cf0:	d8801f17 	ldw	r2,124(sp)
  802cf4:	da000404 	addi	r8,sp,16
  802cf8:	e47fef16 	blt	fp,r17,802cb8 <__alt_data_end+0xff802cb8>
  802cfc:	9021883a 	mov	r16,r18
  802d00:	a825883a 	mov	r18,r21
  802d04:	b02b883a 	mov	r21,r22
  802d08:	882d883a 	mov	r22,r17
  802d0c:	dc403017 	ldw	r17,192(sp)
  802d10:	d9002c17 	ldw	r4,176(sp)
  802d14:	1d87883a 	add	r3,r3,r22
  802d18:	10800044 	addi	r2,r2,1
  802d1c:	41000015 	stw	r4,0(r8)
  802d20:	45800115 	stw	r22,4(r8)
  802d24:	d8c02015 	stw	r3,128(sp)
  802d28:	d8801f15 	stw	r2,124(sp)
  802d2c:	010001c4 	movi	r4,7
  802d30:	20818e16 	blt	r4,r2,80336c <___vfprintf_internal_r+0x1700>
  802d34:	42000204 	addi	r8,r8,8
  802d38:	003e0f06 	br	802578 <__alt_data_end+0xff802578>
  802d3c:	d9403317 	ldw	r5,204(sp)
  802d40:	00800044 	movi	r2,1
  802d44:	18c00044 	addi	r3,r3,1
  802d48:	1141530e 	bge	r2,r5,803298 <___vfprintf_internal_r+0x162c>
  802d4c:	dc401f17 	ldw	r17,124(sp)
  802d50:	00800044 	movi	r2,1
  802d54:	40800115 	stw	r2,4(r8)
  802d58:	8c400044 	addi	r17,r17,1
  802d5c:	44000015 	stw	r16,0(r8)
  802d60:	d8c02015 	stw	r3,128(sp)
  802d64:	dc401f15 	stw	r17,124(sp)
  802d68:	008001c4 	movi	r2,7
  802d6c:	14416b16 	blt	r2,r17,80331c <___vfprintf_internal_r+0x16b0>
  802d70:	42000204 	addi	r8,r8,8
  802d74:	d8803717 	ldw	r2,220(sp)
  802d78:	d9003417 	ldw	r4,208(sp)
  802d7c:	8c400044 	addi	r17,r17,1
  802d80:	10c7883a 	add	r3,r2,r3
  802d84:	40800115 	stw	r2,4(r8)
  802d88:	41000015 	stw	r4,0(r8)
  802d8c:	d8c02015 	stw	r3,128(sp)
  802d90:	dc401f15 	stw	r17,124(sp)
  802d94:	008001c4 	movi	r2,7
  802d98:	14416916 	blt	r2,r17,803340 <___vfprintf_internal_r+0x16d4>
  802d9c:	45800204 	addi	r22,r8,8
  802da0:	d9003617 	ldw	r4,216(sp)
  802da4:	d9403817 	ldw	r5,224(sp)
  802da8:	000d883a 	mov	r6,zero
  802dac:	000f883a 	mov	r7,zero
  802db0:	d8c03c15 	stw	r3,240(sp)
  802db4:	080c2a00 	call	80c2a0 <__eqdf2>
  802db8:	d8c03c17 	ldw	r3,240(sp)
  802dbc:	1000bc26 	beq	r2,zero,8030b0 <___vfprintf_internal_r+0x1444>
  802dc0:	d9403317 	ldw	r5,204(sp)
  802dc4:	84000044 	addi	r16,r16,1
  802dc8:	8c400044 	addi	r17,r17,1
  802dcc:	28bfffc4 	addi	r2,r5,-1
  802dd0:	1887883a 	add	r3,r3,r2
  802dd4:	b0800115 	stw	r2,4(r22)
  802dd8:	b4000015 	stw	r16,0(r22)
  802ddc:	d8c02015 	stw	r3,128(sp)
  802de0:	dc401f15 	stw	r17,124(sp)
  802de4:	008001c4 	movi	r2,7
  802de8:	14414316 	blt	r2,r17,8032f8 <___vfprintf_internal_r+0x168c>
  802dec:	b5800204 	addi	r22,r22,8
  802df0:	d9003a17 	ldw	r4,232(sp)
  802df4:	df0022c4 	addi	fp,sp,139
  802df8:	8c400044 	addi	r17,r17,1
  802dfc:	20c7883a 	add	r3,r4,r3
  802e00:	b7000015 	stw	fp,0(r22)
  802e04:	b1000115 	stw	r4,4(r22)
  802e08:	d8c02015 	stw	r3,128(sp)
  802e0c:	dc401f15 	stw	r17,124(sp)
  802e10:	008001c4 	movi	r2,7
  802e14:	14400e16 	blt	r2,r17,802e50 <___vfprintf_internal_r+0x11e4>
  802e18:	b2000204 	addi	r8,r22,8
  802e1c:	003e1806 	br	802680 <__alt_data_end+0xff802680>
  802e20:	01002074 	movhi	r4,129
  802e24:	2103dc84 	addi	r4,r4,3954
  802e28:	d9002c15 	stw	r4,176(sp)
  802e2c:	d9002c17 	ldw	r4,176(sp)
  802e30:	1c07883a 	add	r3,r3,r16
  802e34:	44000115 	stw	r16,4(r8)
  802e38:	41000015 	stw	r4,0(r8)
  802e3c:	10800044 	addi	r2,r2,1
  802e40:	d8c02015 	stw	r3,128(sp)
  802e44:	d8801f15 	stw	r2,124(sp)
  802e48:	010001c4 	movi	r4,7
  802e4c:	20be0b0e 	bge	r4,r2,80267c <__alt_data_end+0xff80267c>
  802e50:	d9002d17 	ldw	r4,180(sp)
  802e54:	d9801e04 	addi	r6,sp,120
  802e58:	b80b883a 	mov	r5,r23
  802e5c:	0808bec0 	call	808bec <__sprint_r>
  802e60:	103c861e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  802e64:	d8c02017 	ldw	r3,128(sp)
  802e68:	da000404 	addi	r8,sp,16
  802e6c:	003e0406 	br	802680 <__alt_data_end+0xff802680>
  802e70:	d9002d17 	ldw	r4,180(sp)
  802e74:	d9801e04 	addi	r6,sp,120
  802e78:	b80b883a 	mov	r5,r23
  802e7c:	0808bec0 	call	808bec <__sprint_r>
  802e80:	103e3b26 	beq	r2,zero,802770 <__alt_data_end+0xff802770>
  802e84:	003c7d06 	br	80207c <__alt_data_end+0xff80207c>
  802e88:	d9002d17 	ldw	r4,180(sp)
  802e8c:	d9801e04 	addi	r6,sp,120
  802e90:	b80b883a 	mov	r5,r23
  802e94:	0808bec0 	call	808bec <__sprint_r>
  802e98:	103c781e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  802e9c:	d8c02017 	ldw	r3,128(sp)
  802ea0:	da000404 	addi	r8,sp,16
  802ea4:	003de906 	br	80264c <__alt_data_end+0xff80264c>
  802ea8:	d9002d17 	ldw	r4,180(sp)
  802eac:	d9801e04 	addi	r6,sp,120
  802eb0:	b80b883a 	mov	r5,r23
  802eb4:	0808bec0 	call	808bec <__sprint_r>
  802eb8:	103c701e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  802ebc:	d8c02017 	ldw	r3,128(sp)
  802ec0:	da000404 	addi	r8,sp,16
  802ec4:	003d9b06 	br	802534 <__alt_data_end+0xff802534>
  802ec8:	d9002d17 	ldw	r4,180(sp)
  802ecc:	d9801e04 	addi	r6,sp,120
  802ed0:	b80b883a 	mov	r5,r23
  802ed4:	0808bec0 	call	808bec <__sprint_r>
  802ed8:	103c681e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  802edc:	d8c02017 	ldw	r3,128(sp)
  802ee0:	da000404 	addi	r8,sp,16
  802ee4:	003da106 	br	80256c <__alt_data_end+0xff80256c>
  802ee8:	d9402a17 	ldw	r5,168(sp)
  802eec:	d8002785 	stb	zero,158(sp)
  802ef0:	283f0616 	blt	r5,zero,802b0c <__alt_data_end+0xff802b0c>
  802ef4:	00ffdfc4 	movi	r3,-129
  802ef8:	9d84b03a 	or	r2,r19,r22
  802efc:	90e4703a 	and	r18,r18,r3
  802f00:	103c3b26 	beq	r2,zero,801ff0 <__alt_data_end+0xff801ff0>
  802f04:	0039883a 	mov	fp,zero
  802f08:	003e5806 	br	80286c <__alt_data_end+0xff80286c>
  802f0c:	9080040c 	andi	r2,r18,16
  802f10:	1001b326 	beq	r2,zero,8035e0 <___vfprintf_internal_r+0x1974>
  802f14:	d8c02e17 	ldw	r3,184(sp)
  802f18:	d9002a17 	ldw	r4,168(sp)
  802f1c:	d8002785 	stb	zero,158(sp)
  802f20:	18800104 	addi	r2,r3,4
  802f24:	1cc00017 	ldw	r19,0(r3)
  802f28:	002d883a 	mov	r22,zero
  802f2c:	2001b516 	blt	r4,zero,803604 <___vfprintf_internal_r+0x1998>
  802f30:	00ffdfc4 	movi	r3,-129
  802f34:	d8802e15 	stw	r2,184(sp)
  802f38:	90e4703a 	and	r18,r18,r3
  802f3c:	983d0526 	beq	r19,zero,802354 <__alt_data_end+0xff802354>
  802f40:	0039883a 	mov	fp,zero
  802f44:	003d0806 	br	802368 <__alt_data_end+0xff802368>
  802f48:	dc402617 	ldw	r17,152(sp)
  802f4c:	0441d30e 	bge	zero,r17,80369c <___vfprintf_internal_r+0x1a30>
  802f50:	dc403217 	ldw	r17,200(sp)
  802f54:	d8803317 	ldw	r2,204(sp)
  802f58:	1440010e 	bge	r2,r17,802f60 <___vfprintf_internal_r+0x12f4>
  802f5c:	1023883a 	mov	r17,r2
  802f60:	04400a0e 	bge	zero,r17,802f8c <___vfprintf_internal_r+0x1320>
  802f64:	d8801f17 	ldw	r2,124(sp)
  802f68:	1c47883a 	add	r3,r3,r17
  802f6c:	44000015 	stw	r16,0(r8)
  802f70:	10800044 	addi	r2,r2,1
  802f74:	44400115 	stw	r17,4(r8)
  802f78:	d8c02015 	stw	r3,128(sp)
  802f7c:	d8801f15 	stw	r2,124(sp)
  802f80:	010001c4 	movi	r4,7
  802f84:	20826516 	blt	r4,r2,80391c <___vfprintf_internal_r+0x1cb0>
  802f88:	42000204 	addi	r8,r8,8
  802f8c:	88026116 	blt	r17,zero,803914 <___vfprintf_internal_r+0x1ca8>
  802f90:	d9003217 	ldw	r4,200(sp)
  802f94:	2463c83a 	sub	r17,r4,r17
  802f98:	04407b0e 	bge	zero,r17,803188 <___vfprintf_internal_r+0x151c>
  802f9c:	05800404 	movi	r22,16
  802fa0:	d8801f17 	ldw	r2,124(sp)
  802fa4:	b4419d0e 	bge	r22,r17,80361c <___vfprintf_internal_r+0x19b0>
  802fa8:	01002074 	movhi	r4,129
  802fac:	2103dc84 	addi	r4,r4,3954
  802fb0:	d9002c15 	stw	r4,176(sp)
  802fb4:	070001c4 	movi	fp,7
  802fb8:	dcc02d17 	ldw	r19,180(sp)
  802fbc:	00000306 	br	802fcc <___vfprintf_internal_r+0x1360>
  802fc0:	42000204 	addi	r8,r8,8
  802fc4:	8c7ffc04 	addi	r17,r17,-16
  802fc8:	b441970e 	bge	r22,r17,803628 <___vfprintf_internal_r+0x19bc>
  802fcc:	18c00404 	addi	r3,r3,16
  802fd0:	10800044 	addi	r2,r2,1
  802fd4:	45000015 	stw	r20,0(r8)
  802fd8:	45800115 	stw	r22,4(r8)
  802fdc:	d8c02015 	stw	r3,128(sp)
  802fe0:	d8801f15 	stw	r2,124(sp)
  802fe4:	e0bff60e 	bge	fp,r2,802fc0 <__alt_data_end+0xff802fc0>
  802fe8:	d9801e04 	addi	r6,sp,120
  802fec:	b80b883a 	mov	r5,r23
  802ff0:	9809883a 	mov	r4,r19
  802ff4:	0808bec0 	call	808bec <__sprint_r>
  802ff8:	103c201e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  802ffc:	d8c02017 	ldw	r3,128(sp)
  803000:	d8801f17 	ldw	r2,124(sp)
  803004:	da000404 	addi	r8,sp,16
  803008:	003fee06 	br	802fc4 <__alt_data_end+0xff802fc4>
  80300c:	d9002d17 	ldw	r4,180(sp)
  803010:	d9801e04 	addi	r6,sp,120
  803014:	b80b883a 	mov	r5,r23
  803018:	0808bec0 	call	808bec <__sprint_r>
  80301c:	103c171e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803020:	d8c02017 	ldw	r3,128(sp)
  803024:	df002787 	ldb	fp,158(sp)
  803028:	da000404 	addi	r8,sp,16
  80302c:	003d3406 	br	802500 <__alt_data_end+0xff802500>
  803030:	9080040c 	andi	r2,r18,16
  803034:	10016126 	beq	r2,zero,8035bc <___vfprintf_internal_r+0x1950>
  803038:	d9402e17 	ldw	r5,184(sp)
  80303c:	2cc00017 	ldw	r19,0(r5)
  803040:	29400104 	addi	r5,r5,4
  803044:	d9402e15 	stw	r5,184(sp)
  803048:	982dd7fa 	srai	r22,r19,31
  80304c:	b005883a 	mov	r2,r22
  803050:	003c5a06 	br	8021bc <__alt_data_end+0xff8021bc>
  803054:	9080040c 	andi	r2,r18,16
  803058:	10003526 	beq	r2,zero,803130 <___vfprintf_internal_r+0x14c4>
  80305c:	d8c02e17 	ldw	r3,184(sp)
  803060:	d9002a17 	ldw	r4,168(sp)
  803064:	d8002785 	stb	zero,158(sp)
  803068:	18800104 	addi	r2,r3,4
  80306c:	1cc00017 	ldw	r19,0(r3)
  803070:	002d883a 	mov	r22,zero
  803074:	20003716 	blt	r4,zero,803154 <___vfprintf_internal_r+0x14e8>
  803078:	00ffdfc4 	movi	r3,-129
  80307c:	d8802e15 	stw	r2,184(sp)
  803080:	90e4703a 	and	r18,r18,r3
  803084:	0039883a 	mov	fp,zero
  803088:	983dd426 	beq	r19,zero,8027dc <__alt_data_end+0xff8027dc>
  80308c:	00800244 	movi	r2,9
  803090:	14fc5336 	bltu	r2,r19,8021e0 <__alt_data_end+0xff8021e0>
  803094:	d8c02817 	ldw	r3,160(sp)
  803098:	dc001dc4 	addi	r16,sp,119
  80309c:	9cc00c04 	addi	r19,r19,48
  8030a0:	1c07c83a 	sub	r3,r3,r16
  8030a4:	dcc01dc5 	stb	r19,119(sp)
  8030a8:	d8c02b15 	stw	r3,172(sp)
  8030ac:	003cc606 	br	8023c8 <__alt_data_end+0xff8023c8>
  8030b0:	d8803317 	ldw	r2,204(sp)
  8030b4:	143fffc4 	addi	r16,r2,-1
  8030b8:	043f4d0e 	bge	zero,r16,802df0 <__alt_data_end+0xff802df0>
  8030bc:	07000404 	movi	fp,16
  8030c0:	e400810e 	bge	fp,r16,8032c8 <___vfprintf_internal_r+0x165c>
  8030c4:	01402074 	movhi	r5,129
  8030c8:	2943dc84 	addi	r5,r5,3954
  8030cc:	d9402c15 	stw	r5,176(sp)
  8030d0:	01c001c4 	movi	r7,7
  8030d4:	dcc02d17 	ldw	r19,180(sp)
  8030d8:	00000306 	br	8030e8 <___vfprintf_internal_r+0x147c>
  8030dc:	b5800204 	addi	r22,r22,8
  8030e0:	843ffc04 	addi	r16,r16,-16
  8030e4:	e4007b0e 	bge	fp,r16,8032d4 <___vfprintf_internal_r+0x1668>
  8030e8:	18c00404 	addi	r3,r3,16
  8030ec:	8c400044 	addi	r17,r17,1
  8030f0:	b5000015 	stw	r20,0(r22)
  8030f4:	b7000115 	stw	fp,4(r22)
  8030f8:	d8c02015 	stw	r3,128(sp)
  8030fc:	dc401f15 	stw	r17,124(sp)
  803100:	3c7ff60e 	bge	r7,r17,8030dc <__alt_data_end+0xff8030dc>
  803104:	d9801e04 	addi	r6,sp,120
  803108:	b80b883a 	mov	r5,r23
  80310c:	9809883a 	mov	r4,r19
  803110:	d9c03c15 	stw	r7,240(sp)
  803114:	0808bec0 	call	808bec <__sprint_r>
  803118:	d9c03c17 	ldw	r7,240(sp)
  80311c:	103bd71e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803120:	d8c02017 	ldw	r3,128(sp)
  803124:	dc401f17 	ldw	r17,124(sp)
  803128:	dd800404 	addi	r22,sp,16
  80312c:	003fec06 	br	8030e0 <__alt_data_end+0xff8030e0>
  803130:	9080100c 	andi	r2,r18,64
  803134:	d8002785 	stb	zero,158(sp)
  803138:	10010e26 	beq	r2,zero,803574 <___vfprintf_internal_r+0x1908>
  80313c:	d9402e17 	ldw	r5,184(sp)
  803140:	d8c02a17 	ldw	r3,168(sp)
  803144:	002d883a 	mov	r22,zero
  803148:	28800104 	addi	r2,r5,4
  80314c:	2cc0000b 	ldhu	r19,0(r5)
  803150:	183fc90e 	bge	r3,zero,803078 <__alt_data_end+0xff803078>
  803154:	d8802e15 	stw	r2,184(sp)
  803158:	0039883a 	mov	fp,zero
  80315c:	9d84b03a 	or	r2,r19,r22
  803160:	103c1e1e 	bne	r2,zero,8021dc <__alt_data_end+0xff8021dc>
  803164:	00800044 	movi	r2,1
  803168:	003e6c06 	br	802b1c <__alt_data_end+0xff802b1c>
  80316c:	d9002d17 	ldw	r4,180(sp)
  803170:	d9801e04 	addi	r6,sp,120
  803174:	b80b883a 	mov	r5,r23
  803178:	0808bec0 	call	808bec <__sprint_r>
  80317c:	103bbf1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803180:	d8c02017 	ldw	r3,128(sp)
  803184:	da000404 	addi	r8,sp,16
  803188:	d9003217 	ldw	r4,200(sp)
  80318c:	d8802617 	ldw	r2,152(sp)
  803190:	d9403317 	ldw	r5,204(sp)
  803194:	8123883a 	add	r17,r16,r4
  803198:	11400216 	blt	r2,r5,8031a4 <___vfprintf_internal_r+0x1538>
  80319c:	9100004c 	andi	r4,r18,1
  8031a0:	20000d26 	beq	r4,zero,8031d8 <___vfprintf_internal_r+0x156c>
  8031a4:	d9003717 	ldw	r4,220(sp)
  8031a8:	d9403417 	ldw	r5,208(sp)
  8031ac:	1907883a 	add	r3,r3,r4
  8031b0:	d9001f17 	ldw	r4,124(sp)
  8031b4:	41400015 	stw	r5,0(r8)
  8031b8:	d9403717 	ldw	r5,220(sp)
  8031bc:	21000044 	addi	r4,r4,1
  8031c0:	d8c02015 	stw	r3,128(sp)
  8031c4:	41400115 	stw	r5,4(r8)
  8031c8:	d9001f15 	stw	r4,124(sp)
  8031cc:	014001c4 	movi	r5,7
  8031d0:	2901e816 	blt	r5,r4,803974 <___vfprintf_internal_r+0x1d08>
  8031d4:	42000204 	addi	r8,r8,8
  8031d8:	d9003317 	ldw	r4,204(sp)
  8031dc:	8121883a 	add	r16,r16,r4
  8031e0:	2085c83a 	sub	r2,r4,r2
  8031e4:	8461c83a 	sub	r16,r16,r17
  8031e8:	1400010e 	bge	r2,r16,8031f0 <___vfprintf_internal_r+0x1584>
  8031ec:	1021883a 	mov	r16,r2
  8031f0:	04000a0e 	bge	zero,r16,80321c <___vfprintf_internal_r+0x15b0>
  8031f4:	d9001f17 	ldw	r4,124(sp)
  8031f8:	1c07883a 	add	r3,r3,r16
  8031fc:	44400015 	stw	r17,0(r8)
  803200:	21000044 	addi	r4,r4,1
  803204:	44000115 	stw	r16,4(r8)
  803208:	d8c02015 	stw	r3,128(sp)
  80320c:	d9001f15 	stw	r4,124(sp)
  803210:	014001c4 	movi	r5,7
  803214:	2901fb16 	blt	r5,r4,803a04 <___vfprintf_internal_r+0x1d98>
  803218:	42000204 	addi	r8,r8,8
  80321c:	8001f716 	blt	r16,zero,8039fc <___vfprintf_internal_r+0x1d90>
  803220:	1421c83a 	sub	r16,r2,r16
  803224:	043d160e 	bge	zero,r16,802680 <__alt_data_end+0xff802680>
  803228:	04400404 	movi	r17,16
  80322c:	d8801f17 	ldw	r2,124(sp)
  803230:	8c3efb0e 	bge	r17,r16,802e20 <__alt_data_end+0xff802e20>
  803234:	01402074 	movhi	r5,129
  803238:	2943dc84 	addi	r5,r5,3954
  80323c:	d9402c15 	stw	r5,176(sp)
  803240:	058001c4 	movi	r22,7
  803244:	dcc02d17 	ldw	r19,180(sp)
  803248:	00000306 	br	803258 <___vfprintf_internal_r+0x15ec>
  80324c:	42000204 	addi	r8,r8,8
  803250:	843ffc04 	addi	r16,r16,-16
  803254:	8c3ef50e 	bge	r17,r16,802e2c <__alt_data_end+0xff802e2c>
  803258:	18c00404 	addi	r3,r3,16
  80325c:	10800044 	addi	r2,r2,1
  803260:	45000015 	stw	r20,0(r8)
  803264:	44400115 	stw	r17,4(r8)
  803268:	d8c02015 	stw	r3,128(sp)
  80326c:	d8801f15 	stw	r2,124(sp)
  803270:	b0bff60e 	bge	r22,r2,80324c <__alt_data_end+0xff80324c>
  803274:	d9801e04 	addi	r6,sp,120
  803278:	b80b883a 	mov	r5,r23
  80327c:	9809883a 	mov	r4,r19
  803280:	0808bec0 	call	808bec <__sprint_r>
  803284:	103b7d1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803288:	d8c02017 	ldw	r3,128(sp)
  80328c:	d8801f17 	ldw	r2,124(sp)
  803290:	da000404 	addi	r8,sp,16
  803294:	003fee06 	br	803250 <__alt_data_end+0xff803250>
  803298:	9088703a 	and	r4,r18,r2
  80329c:	203eab1e 	bne	r4,zero,802d4c <__alt_data_end+0xff802d4c>
  8032a0:	dc401f17 	ldw	r17,124(sp)
  8032a4:	40800115 	stw	r2,4(r8)
  8032a8:	44000015 	stw	r16,0(r8)
  8032ac:	8c400044 	addi	r17,r17,1
  8032b0:	d8c02015 	stw	r3,128(sp)
  8032b4:	dc401f15 	stw	r17,124(sp)
  8032b8:	008001c4 	movi	r2,7
  8032bc:	14400e16 	blt	r2,r17,8032f8 <___vfprintf_internal_r+0x168c>
  8032c0:	45800204 	addi	r22,r8,8
  8032c4:	003eca06 	br	802df0 <__alt_data_end+0xff802df0>
  8032c8:	01002074 	movhi	r4,129
  8032cc:	2103dc84 	addi	r4,r4,3954
  8032d0:	d9002c15 	stw	r4,176(sp)
  8032d4:	d8802c17 	ldw	r2,176(sp)
  8032d8:	1c07883a 	add	r3,r3,r16
  8032dc:	8c400044 	addi	r17,r17,1
  8032e0:	b0800015 	stw	r2,0(r22)
  8032e4:	b4000115 	stw	r16,4(r22)
  8032e8:	d8c02015 	stw	r3,128(sp)
  8032ec:	dc401f15 	stw	r17,124(sp)
  8032f0:	008001c4 	movi	r2,7
  8032f4:	147ebd0e 	bge	r2,r17,802dec <__alt_data_end+0xff802dec>
  8032f8:	d9002d17 	ldw	r4,180(sp)
  8032fc:	d9801e04 	addi	r6,sp,120
  803300:	b80b883a 	mov	r5,r23
  803304:	0808bec0 	call	808bec <__sprint_r>
  803308:	103b5c1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  80330c:	d8c02017 	ldw	r3,128(sp)
  803310:	dc401f17 	ldw	r17,124(sp)
  803314:	dd800404 	addi	r22,sp,16
  803318:	003eb506 	br	802df0 <__alt_data_end+0xff802df0>
  80331c:	d9002d17 	ldw	r4,180(sp)
  803320:	d9801e04 	addi	r6,sp,120
  803324:	b80b883a 	mov	r5,r23
  803328:	0808bec0 	call	808bec <__sprint_r>
  80332c:	103b531e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803330:	d8c02017 	ldw	r3,128(sp)
  803334:	dc401f17 	ldw	r17,124(sp)
  803338:	da000404 	addi	r8,sp,16
  80333c:	003e8d06 	br	802d74 <__alt_data_end+0xff802d74>
  803340:	d9002d17 	ldw	r4,180(sp)
  803344:	d9801e04 	addi	r6,sp,120
  803348:	b80b883a 	mov	r5,r23
  80334c:	0808bec0 	call	808bec <__sprint_r>
  803350:	103b4a1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803354:	d8c02017 	ldw	r3,128(sp)
  803358:	dc401f17 	ldw	r17,124(sp)
  80335c:	dd800404 	addi	r22,sp,16
  803360:	003e8f06 	br	802da0 <__alt_data_end+0xff802da0>
  803364:	0027883a 	mov	r19,zero
  803368:	003f4a06 	br	803094 <__alt_data_end+0xff803094>
  80336c:	d9002d17 	ldw	r4,180(sp)
  803370:	d9801e04 	addi	r6,sp,120
  803374:	b80b883a 	mov	r5,r23
  803378:	0808bec0 	call	808bec <__sprint_r>
  80337c:	103b3f1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803380:	d8c02017 	ldw	r3,128(sp)
  803384:	da000404 	addi	r8,sp,16
  803388:	003c7b06 	br	802578 <__alt_data_end+0xff802578>
  80338c:	d9402a17 	ldw	r5,168(sp)
  803390:	04e7c83a 	sub	r19,zero,r19
  803394:	07000b44 	movi	fp,45
  803398:	9804c03a 	cmpne	r2,r19,zero
  80339c:	05adc83a 	sub	r22,zero,r22
  8033a0:	df002785 	stb	fp,158(sp)
  8033a4:	b0adc83a 	sub	r22,r22,r2
  8033a8:	28017b16 	blt	r5,zero,803998 <___vfprintf_internal_r+0x1d2c>
  8033ac:	00bfdfc4 	movi	r2,-129
  8033b0:	90a4703a 	and	r18,r18,r2
  8033b4:	003b8906 	br	8021dc <__alt_data_end+0xff8021dc>
  8033b8:	d9003617 	ldw	r4,216(sp)
  8033bc:	d9403817 	ldw	r5,224(sp)
  8033c0:	da003d15 	stw	r8,244(sp)
  8033c4:	08088640 	call	808864 <__fpclassifyd>
  8033c8:	da003d17 	ldw	r8,244(sp)
  8033cc:	1000f026 	beq	r2,zero,803790 <___vfprintf_internal_r+0x1b24>
  8033d0:	d9002a17 	ldw	r4,168(sp)
  8033d4:	05bff7c4 	movi	r22,-33
  8033d8:	00bfffc4 	movi	r2,-1
  8033dc:	8dac703a 	and	r22,r17,r22
  8033e0:	20820026 	beq	r4,r2,803be4 <___vfprintf_internal_r+0x1f78>
  8033e4:	008011c4 	movi	r2,71
  8033e8:	b081f726 	beq	r22,r2,803bc8 <___vfprintf_internal_r+0x1f5c>
  8033ec:	d9003817 	ldw	r4,224(sp)
  8033f0:	90c04014 	ori	r3,r18,256
  8033f4:	d8c02c15 	stw	r3,176(sp)
  8033f8:	20021516 	blt	r4,zero,803c50 <___vfprintf_internal_r+0x1fe4>
  8033fc:	dcc03817 	ldw	r19,224(sp)
  803400:	d8002905 	stb	zero,164(sp)
  803404:	00801984 	movi	r2,102
  803408:	8881f926 	beq	r17,r2,803bf0 <___vfprintf_internal_r+0x1f84>
  80340c:	00801184 	movi	r2,70
  803410:	88821c26 	beq	r17,r2,803c84 <___vfprintf_internal_r+0x2018>
  803414:	00801144 	movi	r2,69
  803418:	b081ef26 	beq	r22,r2,803bd8 <___vfprintf_internal_r+0x1f6c>
  80341c:	d8c02a17 	ldw	r3,168(sp)
  803420:	d8802104 	addi	r2,sp,132
  803424:	d8800315 	stw	r2,12(sp)
  803428:	d9403617 	ldw	r5,216(sp)
  80342c:	d8802504 	addi	r2,sp,148
  803430:	d9002d17 	ldw	r4,180(sp)
  803434:	d8800215 	stw	r2,8(sp)
  803438:	d8802604 	addi	r2,sp,152
  80343c:	d8c00015 	stw	r3,0(sp)
  803440:	d8800115 	stw	r2,4(sp)
  803444:	01c00084 	movi	r7,2
  803448:	980d883a 	mov	r6,r19
  80344c:	d8c03c15 	stw	r3,240(sp)
  803450:	da003d15 	stw	r8,244(sp)
  803454:	080439c0 	call	80439c <_dtoa_r>
  803458:	1021883a 	mov	r16,r2
  80345c:	008019c4 	movi	r2,103
  803460:	d8c03c17 	ldw	r3,240(sp)
  803464:	da003d17 	ldw	r8,244(sp)
  803468:	88817126 	beq	r17,r2,803a30 <___vfprintf_internal_r+0x1dc4>
  80346c:	008011c4 	movi	r2,71
  803470:	88829126 	beq	r17,r2,803eb8 <___vfprintf_internal_r+0x224c>
  803474:	80f9883a 	add	fp,r16,r3
  803478:	d9003617 	ldw	r4,216(sp)
  80347c:	000d883a 	mov	r6,zero
  803480:	000f883a 	mov	r7,zero
  803484:	980b883a 	mov	r5,r19
  803488:	da003d15 	stw	r8,244(sp)
  80348c:	080c2a00 	call	80c2a0 <__eqdf2>
  803490:	da003d17 	ldw	r8,244(sp)
  803494:	10018d26 	beq	r2,zero,803acc <___vfprintf_internal_r+0x1e60>
  803498:	d8802117 	ldw	r2,132(sp)
  80349c:	1700062e 	bgeu	r2,fp,8034b8 <___vfprintf_internal_r+0x184c>
  8034a0:	01000c04 	movi	r4,48
  8034a4:	10c00044 	addi	r3,r2,1
  8034a8:	d8c02115 	stw	r3,132(sp)
  8034ac:	11000005 	stb	r4,0(r2)
  8034b0:	d8802117 	ldw	r2,132(sp)
  8034b4:	173ffb36 	bltu	r2,fp,8034a4 <__alt_data_end+0xff8034a4>
  8034b8:	1405c83a 	sub	r2,r2,r16
  8034bc:	d8803315 	stw	r2,204(sp)
  8034c0:	008011c4 	movi	r2,71
  8034c4:	b0817626 	beq	r22,r2,803aa0 <___vfprintf_internal_r+0x1e34>
  8034c8:	00801944 	movi	r2,101
  8034cc:	1442800e 	bge	r2,r17,803ed0 <___vfprintf_internal_r+0x2264>
  8034d0:	d8c02617 	ldw	r3,152(sp)
  8034d4:	00801984 	movi	r2,102
  8034d8:	d8c03215 	stw	r3,200(sp)
  8034dc:	8881fe26 	beq	r17,r2,803cd8 <___vfprintf_internal_r+0x206c>
  8034e0:	d8c03217 	ldw	r3,200(sp)
  8034e4:	d9003317 	ldw	r4,204(sp)
  8034e8:	1901dd16 	blt	r3,r4,803c60 <___vfprintf_internal_r+0x1ff4>
  8034ec:	9480004c 	andi	r18,r18,1
  8034f0:	90022b1e 	bne	r18,zero,803da0 <___vfprintf_internal_r+0x2134>
  8034f4:	1805883a 	mov	r2,r3
  8034f8:	18028316 	blt	r3,zero,803f08 <___vfprintf_internal_r+0x229c>
  8034fc:	d8c03217 	ldw	r3,200(sp)
  803500:	044019c4 	movi	r17,103
  803504:	d8c02b15 	stw	r3,172(sp)
  803508:	df002907 	ldb	fp,164(sp)
  80350c:	e001531e 	bne	fp,zero,803a5c <___vfprintf_internal_r+0x1df0>
  803510:	df002783 	ldbu	fp,158(sp)
  803514:	d8802915 	stw	r2,164(sp)
  803518:	dc802c17 	ldw	r18,176(sp)
  80351c:	d8002a15 	stw	zero,168(sp)
  803520:	003baf06 	br	8023e0 <__alt_data_end+0xff8023e0>
  803524:	d8c02e17 	ldw	r3,184(sp)
  803528:	d9002e17 	ldw	r4,184(sp)
  80352c:	d9402e17 	ldw	r5,184(sp)
  803530:	18c00017 	ldw	r3,0(r3)
  803534:	21000117 	ldw	r4,4(r4)
  803538:	29400204 	addi	r5,r5,8
  80353c:	d8c03615 	stw	r3,216(sp)
  803540:	d9003815 	stw	r4,224(sp)
  803544:	d9402e15 	stw	r5,184(sp)
  803548:	003b5006 	br	80228c <__alt_data_end+0xff80228c>
  80354c:	ac400007 	ldb	r17,0(r21)
  803550:	003a2806 	br	801df4 <__alt_data_end+0xff801df4>
  803554:	9080100c 	andi	r2,r18,64
  803558:	1000a826 	beq	r2,zero,8037fc <___vfprintf_internal_r+0x1b90>
  80355c:	d8c02e17 	ldw	r3,184(sp)
  803560:	002d883a 	mov	r22,zero
  803564:	1cc0000b 	ldhu	r19,0(r3)
  803568:	18c00104 	addi	r3,r3,4
  80356c:	d8c02e15 	stw	r3,184(sp)
  803570:	003caf06 	br	802830 <__alt_data_end+0xff802830>
  803574:	d9002e17 	ldw	r4,184(sp)
  803578:	d9402a17 	ldw	r5,168(sp)
  80357c:	002d883a 	mov	r22,zero
  803580:	20800104 	addi	r2,r4,4
  803584:	24c00017 	ldw	r19,0(r4)
  803588:	283ebb0e 	bge	r5,zero,803078 <__alt_data_end+0xff803078>
  80358c:	003ef106 	br	803154 <__alt_data_end+0xff803154>
  803590:	9080040c 	andi	r2,r18,16
  803594:	1000921e 	bne	r2,zero,8037e0 <___vfprintf_internal_r+0x1b74>
  803598:	9480100c 	andi	r18,r18,64
  80359c:	90013926 	beq	r18,zero,803a84 <___vfprintf_internal_r+0x1e18>
  8035a0:	d9402e17 	ldw	r5,184(sp)
  8035a4:	d8c02f17 	ldw	r3,188(sp)
  8035a8:	28800017 	ldw	r2,0(r5)
  8035ac:	29400104 	addi	r5,r5,4
  8035b0:	d9402e15 	stw	r5,184(sp)
  8035b4:	10c0000d 	sth	r3,0(r2)
  8035b8:	0039e406 	br	801d4c <__alt_data_end+0xff801d4c>
  8035bc:	9080100c 	andi	r2,r18,64
  8035c0:	10008026 	beq	r2,zero,8037c4 <___vfprintf_internal_r+0x1b58>
  8035c4:	d8802e17 	ldw	r2,184(sp)
  8035c8:	14c0000f 	ldh	r19,0(r2)
  8035cc:	10800104 	addi	r2,r2,4
  8035d0:	d8802e15 	stw	r2,184(sp)
  8035d4:	982dd7fa 	srai	r22,r19,31
  8035d8:	b005883a 	mov	r2,r22
  8035dc:	003af706 	br	8021bc <__alt_data_end+0xff8021bc>
  8035e0:	9080100c 	andi	r2,r18,64
  8035e4:	d8002785 	stb	zero,158(sp)
  8035e8:	10008a1e 	bne	r2,zero,803814 <___vfprintf_internal_r+0x1ba8>
  8035ec:	d9002e17 	ldw	r4,184(sp)
  8035f0:	d9402a17 	ldw	r5,168(sp)
  8035f4:	002d883a 	mov	r22,zero
  8035f8:	20800104 	addi	r2,r4,4
  8035fc:	24c00017 	ldw	r19,0(r4)
  803600:	283e4b0e 	bge	r5,zero,802f30 <__alt_data_end+0xff802f30>
  803604:	9d86b03a 	or	r3,r19,r22
  803608:	d8802e15 	stw	r2,184(sp)
  80360c:	183e4c1e 	bne	r3,zero,802f40 <__alt_data_end+0xff802f40>
  803610:	0039883a 	mov	fp,zero
  803614:	0005883a 	mov	r2,zero
  803618:	003d4006 	br	802b1c <__alt_data_end+0xff802b1c>
  80361c:	01402074 	movhi	r5,129
  803620:	2943dc84 	addi	r5,r5,3954
  803624:	d9402c15 	stw	r5,176(sp)
  803628:	d9402c17 	ldw	r5,176(sp)
  80362c:	1c47883a 	add	r3,r3,r17
  803630:	10800044 	addi	r2,r2,1
  803634:	41400015 	stw	r5,0(r8)
  803638:	44400115 	stw	r17,4(r8)
  80363c:	d8c02015 	stw	r3,128(sp)
  803640:	d8801f15 	stw	r2,124(sp)
  803644:	010001c4 	movi	r4,7
  803648:	20bec816 	blt	r4,r2,80316c <__alt_data_end+0xff80316c>
  80364c:	42000204 	addi	r8,r8,8
  803650:	003ecd06 	br	803188 <__alt_data_end+0xff803188>
  803654:	d9002a17 	ldw	r4,168(sp)
  803658:	d8002785 	stb	zero,158(sp)
  80365c:	203d2d16 	blt	r4,zero,802b14 <__alt_data_end+0xff802b14>
  803660:	00bfdfc4 	movi	r2,-129
  803664:	90a4703a 	and	r18,r18,r2
  803668:	003a6106 	br	801ff0 <__alt_data_end+0xff801ff0>
  80366c:	01002074 	movhi	r4,129
  803670:	2103dc84 	addi	r4,r4,3954
  803674:	d9002c15 	stw	r4,176(sp)
  803678:	003bea06 	br	802624 <__alt_data_end+0xff802624>
  80367c:	d9002d17 	ldw	r4,180(sp)
  803680:	d9801e04 	addi	r6,sp,120
  803684:	b80b883a 	mov	r5,r23
  803688:	0808bec0 	call	808bec <__sprint_r>
  80368c:	103a7b1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803690:	d8c02017 	ldw	r3,128(sp)
  803694:	da000404 	addi	r8,sp,16
  803698:	003d4106 	br	802ba0 <__alt_data_end+0xff802ba0>
  80369c:	d8801f17 	ldw	r2,124(sp)
  8036a0:	01402074 	movhi	r5,129
  8036a4:	01000044 	movi	r4,1
  8036a8:	18c00044 	addi	r3,r3,1
  8036ac:	10800044 	addi	r2,r2,1
  8036b0:	2943dc04 	addi	r5,r5,3952
  8036b4:	41000115 	stw	r4,4(r8)
  8036b8:	41400015 	stw	r5,0(r8)
  8036bc:	d8c02015 	stw	r3,128(sp)
  8036c0:	d8801f15 	stw	r2,124(sp)
  8036c4:	010001c4 	movi	r4,7
  8036c8:	20805c16 	blt	r4,r2,80383c <___vfprintf_internal_r+0x1bd0>
  8036cc:	42000204 	addi	r8,r8,8
  8036d0:	8800041e 	bne	r17,zero,8036e4 <___vfprintf_internal_r+0x1a78>
  8036d4:	d8803317 	ldw	r2,204(sp)
  8036d8:	1000021e 	bne	r2,zero,8036e4 <___vfprintf_internal_r+0x1a78>
  8036dc:	9080004c 	andi	r2,r18,1
  8036e0:	103be726 	beq	r2,zero,802680 <__alt_data_end+0xff802680>
  8036e4:	d9003717 	ldw	r4,220(sp)
  8036e8:	d8801f17 	ldw	r2,124(sp)
  8036ec:	d9403417 	ldw	r5,208(sp)
  8036f0:	20c7883a 	add	r3,r4,r3
  8036f4:	10800044 	addi	r2,r2,1
  8036f8:	41000115 	stw	r4,4(r8)
  8036fc:	41400015 	stw	r5,0(r8)
  803700:	d8c02015 	stw	r3,128(sp)
  803704:	d8801f15 	stw	r2,124(sp)
  803708:	010001c4 	movi	r4,7
  80370c:	20812116 	blt	r4,r2,803b94 <___vfprintf_internal_r+0x1f28>
  803710:	42000204 	addi	r8,r8,8
  803714:	0463c83a 	sub	r17,zero,r17
  803718:	0440730e 	bge	zero,r17,8038e8 <___vfprintf_internal_r+0x1c7c>
  80371c:	05800404 	movi	r22,16
  803720:	b440860e 	bge	r22,r17,80393c <___vfprintf_internal_r+0x1cd0>
  803724:	01402074 	movhi	r5,129
  803728:	2943dc84 	addi	r5,r5,3954
  80372c:	d9402c15 	stw	r5,176(sp)
  803730:	070001c4 	movi	fp,7
  803734:	dcc02d17 	ldw	r19,180(sp)
  803738:	00000306 	br	803748 <___vfprintf_internal_r+0x1adc>
  80373c:	42000204 	addi	r8,r8,8
  803740:	8c7ffc04 	addi	r17,r17,-16
  803744:	b440800e 	bge	r22,r17,803948 <___vfprintf_internal_r+0x1cdc>
  803748:	18c00404 	addi	r3,r3,16
  80374c:	10800044 	addi	r2,r2,1
  803750:	45000015 	stw	r20,0(r8)
  803754:	45800115 	stw	r22,4(r8)
  803758:	d8c02015 	stw	r3,128(sp)
  80375c:	d8801f15 	stw	r2,124(sp)
  803760:	e0bff60e 	bge	fp,r2,80373c <__alt_data_end+0xff80373c>
  803764:	d9801e04 	addi	r6,sp,120
  803768:	b80b883a 	mov	r5,r23
  80376c:	9809883a 	mov	r4,r19
  803770:	0808bec0 	call	808bec <__sprint_r>
  803774:	103a411e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803778:	d8c02017 	ldw	r3,128(sp)
  80377c:	d8801f17 	ldw	r2,124(sp)
  803780:	da000404 	addi	r8,sp,16
  803784:	003fee06 	br	803740 <__alt_data_end+0xff803740>
  803788:	00bfffc4 	movi	r2,-1
  80378c:	003a3f06 	br	80208c <__alt_data_end+0xff80208c>
  803790:	008011c4 	movi	r2,71
  803794:	1440b816 	blt	r2,r17,803a78 <___vfprintf_internal_r+0x1e0c>
  803798:	04002074 	movhi	r16,129
  80379c:	8403ce04 	addi	r16,r16,3896
  8037a0:	00c000c4 	movi	r3,3
  8037a4:	00bfdfc4 	movi	r2,-129
  8037a8:	d8c02915 	stw	r3,164(sp)
  8037ac:	90a4703a 	and	r18,r18,r2
  8037b0:	df002783 	ldbu	fp,158(sp)
  8037b4:	d8c02b15 	stw	r3,172(sp)
  8037b8:	d8002a15 	stw	zero,168(sp)
  8037bc:	d8003215 	stw	zero,200(sp)
  8037c0:	003b0706 	br	8023e0 <__alt_data_end+0xff8023e0>
  8037c4:	d8c02e17 	ldw	r3,184(sp)
  8037c8:	1cc00017 	ldw	r19,0(r3)
  8037cc:	18c00104 	addi	r3,r3,4
  8037d0:	d8c02e15 	stw	r3,184(sp)
  8037d4:	982dd7fa 	srai	r22,r19,31
  8037d8:	b005883a 	mov	r2,r22
  8037dc:	003a7706 	br	8021bc <__alt_data_end+0xff8021bc>
  8037e0:	d8c02e17 	ldw	r3,184(sp)
  8037e4:	d9002f17 	ldw	r4,188(sp)
  8037e8:	18800017 	ldw	r2,0(r3)
  8037ec:	18c00104 	addi	r3,r3,4
  8037f0:	d8c02e15 	stw	r3,184(sp)
  8037f4:	11000015 	stw	r4,0(r2)
  8037f8:	00395406 	br	801d4c <__alt_data_end+0xff801d4c>
  8037fc:	d9002e17 	ldw	r4,184(sp)
  803800:	002d883a 	mov	r22,zero
  803804:	24c00017 	ldw	r19,0(r4)
  803808:	21000104 	addi	r4,r4,4
  80380c:	d9002e15 	stw	r4,184(sp)
  803810:	003c0706 	br	802830 <__alt_data_end+0xff802830>
  803814:	d9402e17 	ldw	r5,184(sp)
  803818:	d8c02a17 	ldw	r3,168(sp)
  80381c:	002d883a 	mov	r22,zero
  803820:	28800104 	addi	r2,r5,4
  803824:	2cc0000b 	ldhu	r19,0(r5)
  803828:	183dc10e 	bge	r3,zero,802f30 <__alt_data_end+0xff802f30>
  80382c:	003f7506 	br	803604 <__alt_data_end+0xff803604>
  803830:	04002074 	movhi	r16,129
  803834:	8403cc04 	addi	r16,r16,3888
  803838:	003aa706 	br	8022d8 <__alt_data_end+0xff8022d8>
  80383c:	d9002d17 	ldw	r4,180(sp)
  803840:	d9801e04 	addi	r6,sp,120
  803844:	b80b883a 	mov	r5,r23
  803848:	0808bec0 	call	808bec <__sprint_r>
  80384c:	103a0b1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803850:	dc402617 	ldw	r17,152(sp)
  803854:	d8c02017 	ldw	r3,128(sp)
  803858:	da000404 	addi	r8,sp,16
  80385c:	003f9c06 	br	8036d0 <__alt_data_end+0xff8036d0>
  803860:	ac400043 	ldbu	r17,1(r21)
  803864:	84000814 	ori	r16,r16,32
  803868:	ad400044 	addi	r21,r21,1
  80386c:	8c403fcc 	andi	r17,r17,255
  803870:	8c40201c 	xori	r17,r17,128
  803874:	8c7fe004 	addi	r17,r17,-128
  803878:	00395e06 	br	801df4 <__alt_data_end+0xff801df4>
  80387c:	d8c02e15 	stw	r3,184(sp)
  803880:	0039883a 	mov	fp,zero
  803884:	003e3506 	br	80315c <__alt_data_end+0xff80315c>
  803888:	d9002d17 	ldw	r4,180(sp)
  80388c:	d9801e04 	addi	r6,sp,120
  803890:	b80b883a 	mov	r5,r23
  803894:	0808bec0 	call	808bec <__sprint_r>
  803898:	1039f81e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  80389c:	d8c02017 	ldw	r3,128(sp)
  8038a0:	da000404 	addi	r8,sp,16
  8038a4:	003cd006 	br	802be8 <__alt_data_end+0xff802be8>
  8038a8:	8009883a 	mov	r4,r16
  8038ac:	df003d15 	stw	fp,244(sp)
  8038b0:	0801bd40 	call	801bd4 <strlen>
  8038b4:	d8802b15 	stw	r2,172(sp)
  8038b8:	da003d17 	ldw	r8,244(sp)
  8038bc:	103c200e 	bge	r2,zero,802940 <__alt_data_end+0xff802940>
  8038c0:	0005883a 	mov	r2,zero
  8038c4:	003c1e06 	br	802940 <__alt_data_end+0xff802940>
  8038c8:	d9002d17 	ldw	r4,180(sp)
  8038cc:	d9801e04 	addi	r6,sp,120
  8038d0:	b80b883a 	mov	r5,r23
  8038d4:	0808bec0 	call	808bec <__sprint_r>
  8038d8:	1039e81e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  8038dc:	d8c02017 	ldw	r3,128(sp)
  8038e0:	d8801f17 	ldw	r2,124(sp)
  8038e4:	da000404 	addi	r8,sp,16
  8038e8:	d9403317 	ldw	r5,204(sp)
  8038ec:	10800044 	addi	r2,r2,1
  8038f0:	44000015 	stw	r16,0(r8)
  8038f4:	28c7883a 	add	r3,r5,r3
  8038f8:	003b5b06 	br	802668 <__alt_data_end+0xff802668>
  8038fc:	01002074 	movhi	r4,129
  803900:	2103e084 	addi	r4,r4,3970
  803904:	d9003515 	stw	r4,212(sp)
  803908:	003af206 	br	8024d4 <__alt_data_end+0xff8024d4>
  80390c:	013fffc4 	movi	r4,-1
  803910:	003a0806 	br	802134 <__alt_data_end+0xff802134>
  803914:	0023883a 	mov	r17,zero
  803918:	003d9d06 	br	802f90 <__alt_data_end+0xff802f90>
  80391c:	d9002d17 	ldw	r4,180(sp)
  803920:	d9801e04 	addi	r6,sp,120
  803924:	b80b883a 	mov	r5,r23
  803928:	0808bec0 	call	808bec <__sprint_r>
  80392c:	1039d31e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803930:	d8c02017 	ldw	r3,128(sp)
  803934:	da000404 	addi	r8,sp,16
  803938:	003d9406 	br	802f8c <__alt_data_end+0xff802f8c>
  80393c:	01002074 	movhi	r4,129
  803940:	2103dc84 	addi	r4,r4,3954
  803944:	d9002c15 	stw	r4,176(sp)
  803948:	d9002c17 	ldw	r4,176(sp)
  80394c:	1c47883a 	add	r3,r3,r17
  803950:	10800044 	addi	r2,r2,1
  803954:	41000015 	stw	r4,0(r8)
  803958:	44400115 	stw	r17,4(r8)
  80395c:	d8c02015 	stw	r3,128(sp)
  803960:	d8801f15 	stw	r2,124(sp)
  803964:	010001c4 	movi	r4,7
  803968:	20bfd716 	blt	r4,r2,8038c8 <__alt_data_end+0xff8038c8>
  80396c:	42000204 	addi	r8,r8,8
  803970:	003fdd06 	br	8038e8 <__alt_data_end+0xff8038e8>
  803974:	d9002d17 	ldw	r4,180(sp)
  803978:	d9801e04 	addi	r6,sp,120
  80397c:	b80b883a 	mov	r5,r23
  803980:	0808bec0 	call	808bec <__sprint_r>
  803984:	1039bd1e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803988:	d8802617 	ldw	r2,152(sp)
  80398c:	d8c02017 	ldw	r3,128(sp)
  803990:	da000404 	addi	r8,sp,16
  803994:	003e1006 	br	8031d8 <__alt_data_end+0xff8031d8>
  803998:	00800044 	movi	r2,1
  80399c:	10803fcc 	andi	r2,r2,255
  8039a0:	00c00044 	movi	r3,1
  8039a4:	10fa0d26 	beq	r2,r3,8021dc <__alt_data_end+0xff8021dc>
  8039a8:	00c00084 	movi	r3,2
  8039ac:	10fbaf26 	beq	r2,r3,80286c <__alt_data_end+0xff80286c>
  8039b0:	003a6d06 	br	802368 <__alt_data_end+0xff802368>
  8039b4:	01002074 	movhi	r4,129
  8039b8:	2103e084 	addi	r4,r4,3970
  8039bc:	d9003515 	stw	r4,212(sp)
  8039c0:	003b5406 	br	802714 <__alt_data_end+0xff802714>
  8039c4:	d8802a17 	ldw	r2,168(sp)
  8039c8:	00c00184 	movi	r3,6
  8039cc:	1880012e 	bgeu	r3,r2,8039d4 <___vfprintf_internal_r+0x1d68>
  8039d0:	1805883a 	mov	r2,r3
  8039d4:	d8802b15 	stw	r2,172(sp)
  8039d8:	1000ef16 	blt	r2,zero,803d98 <___vfprintf_internal_r+0x212c>
  8039dc:	04002074 	movhi	r16,129
  8039e0:	d8802915 	stw	r2,164(sp)
  8039e4:	dcc02e15 	stw	r19,184(sp)
  8039e8:	d8002a15 	stw	zero,168(sp)
  8039ec:	d8003215 	stw	zero,200(sp)
  8039f0:	8403da04 	addi	r16,r16,3944
  8039f4:	0039883a 	mov	fp,zero
  8039f8:	003a8006 	br	8023fc <__alt_data_end+0xff8023fc>
  8039fc:	0021883a 	mov	r16,zero
  803a00:	003e0706 	br	803220 <__alt_data_end+0xff803220>
  803a04:	d9002d17 	ldw	r4,180(sp)
  803a08:	d9801e04 	addi	r6,sp,120
  803a0c:	b80b883a 	mov	r5,r23
  803a10:	0808bec0 	call	808bec <__sprint_r>
  803a14:	1039991e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803a18:	d8802617 	ldw	r2,152(sp)
  803a1c:	d9403317 	ldw	r5,204(sp)
  803a20:	d8c02017 	ldw	r3,128(sp)
  803a24:	da000404 	addi	r8,sp,16
  803a28:	2885c83a 	sub	r2,r5,r2
  803a2c:	003dfb06 	br	80321c <__alt_data_end+0xff80321c>
  803a30:	9080004c 	andi	r2,r18,1
  803a34:	103e8f1e 	bne	r2,zero,803474 <__alt_data_end+0xff803474>
  803a38:	d8802117 	ldw	r2,132(sp)
  803a3c:	003e9e06 	br	8034b8 <__alt_data_end+0xff8034b8>
  803a40:	1025883a 	mov	r18,r2
  803a44:	0039883a 	mov	fp,zero
  803a48:	00800084 	movi	r2,2
  803a4c:	003fd306 	br	80399c <__alt_data_end+0xff80399c>
  803a50:	07000b44 	movi	fp,45
  803a54:	df002785 	stb	fp,158(sp)
  803a58:	003a1b06 	br	8022c8 <__alt_data_end+0xff8022c8>
  803a5c:	00c00b44 	movi	r3,45
  803a60:	d8c02785 	stb	r3,158(sp)
  803a64:	d8802915 	stw	r2,164(sp)
  803a68:	dc802c17 	ldw	r18,176(sp)
  803a6c:	d8002a15 	stw	zero,168(sp)
  803a70:	07000b44 	movi	fp,45
  803a74:	003a5e06 	br	8023f0 <__alt_data_end+0xff8023f0>
  803a78:	04002074 	movhi	r16,129
  803a7c:	8403cf04 	addi	r16,r16,3900
  803a80:	003f4706 	br	8037a0 <__alt_data_end+0xff8037a0>
  803a84:	d9002e17 	ldw	r4,184(sp)
  803a88:	d9402f17 	ldw	r5,188(sp)
  803a8c:	20800017 	ldw	r2,0(r4)
  803a90:	21000104 	addi	r4,r4,4
  803a94:	d9002e15 	stw	r4,184(sp)
  803a98:	11400015 	stw	r5,0(r2)
  803a9c:	0038ab06 	br	801d4c <__alt_data_end+0xff801d4c>
  803aa0:	dd802617 	ldw	r22,152(sp)
  803aa4:	00bfff44 	movi	r2,-3
  803aa8:	b0801c16 	blt	r22,r2,803b1c <___vfprintf_internal_r+0x1eb0>
  803aac:	d9402a17 	ldw	r5,168(sp)
  803ab0:	2d801a16 	blt	r5,r22,803b1c <___vfprintf_internal_r+0x1eb0>
  803ab4:	dd803215 	stw	r22,200(sp)
  803ab8:	003e8906 	br	8034e0 <__alt_data_end+0xff8034e0>
  803abc:	01002074 	movhi	r4,129
  803ac0:	2103dc84 	addi	r4,r4,3954
  803ac4:	d9002c15 	stw	r4,176(sp)
  803ac8:	003c9106 	br	802d10 <__alt_data_end+0xff802d10>
  803acc:	e005883a 	mov	r2,fp
  803ad0:	003e7906 	br	8034b8 <__alt_data_end+0xff8034b8>
  803ad4:	d9002a17 	ldw	r4,168(sp)
  803ad8:	df002783 	ldbu	fp,158(sp)
  803adc:	dcc02e15 	stw	r19,184(sp)
  803ae0:	d9002915 	stw	r4,164(sp)
  803ae4:	d9002b15 	stw	r4,172(sp)
  803ae8:	d8002a15 	stw	zero,168(sp)
  803aec:	d8003215 	stw	zero,200(sp)
  803af0:	003a3b06 	br	8023e0 <__alt_data_end+0xff8023e0>
  803af4:	9080004c 	andi	r2,r18,1
  803af8:	0039883a 	mov	fp,zero
  803afc:	10000426 	beq	r2,zero,803b10 <___vfprintf_internal_r+0x1ea4>
  803b00:	00800c04 	movi	r2,48
  803b04:	dc001dc4 	addi	r16,sp,119
  803b08:	d8801dc5 	stb	r2,119(sp)
  803b0c:	003b6406 	br	8028a0 <__alt_data_end+0xff8028a0>
  803b10:	d8002b15 	stw	zero,172(sp)
  803b14:	dc001e04 	addi	r16,sp,120
  803b18:	003a2b06 	br	8023c8 <__alt_data_end+0xff8023c8>
  803b1c:	8c7fff84 	addi	r17,r17,-2
  803b20:	b5bfffc4 	addi	r22,r22,-1
  803b24:	dd802615 	stw	r22,152(sp)
  803b28:	dc4022c5 	stb	r17,139(sp)
  803b2c:	b000bf16 	blt	r22,zero,803e2c <___vfprintf_internal_r+0x21c0>
  803b30:	00800ac4 	movi	r2,43
  803b34:	d8802305 	stb	r2,140(sp)
  803b38:	00800244 	movi	r2,9
  803b3c:	15807016 	blt	r2,r22,803d00 <___vfprintf_internal_r+0x2094>
  803b40:	00800c04 	movi	r2,48
  803b44:	b5800c04 	addi	r22,r22,48
  803b48:	d8802345 	stb	r2,141(sp)
  803b4c:	dd802385 	stb	r22,142(sp)
  803b50:	d88023c4 	addi	r2,sp,143
  803b54:	df0022c4 	addi	fp,sp,139
  803b58:	d8c03317 	ldw	r3,204(sp)
  803b5c:	1739c83a 	sub	fp,r2,fp
  803b60:	d9003317 	ldw	r4,204(sp)
  803b64:	e0c7883a 	add	r3,fp,r3
  803b68:	df003a15 	stw	fp,232(sp)
  803b6c:	d8c02b15 	stw	r3,172(sp)
  803b70:	00800044 	movi	r2,1
  803b74:	1100b30e 	bge	r2,r4,803e44 <___vfprintf_internal_r+0x21d8>
  803b78:	d8c02b17 	ldw	r3,172(sp)
  803b7c:	18c00044 	addi	r3,r3,1
  803b80:	d8c02b15 	stw	r3,172(sp)
  803b84:	1805883a 	mov	r2,r3
  803b88:	1800ac16 	blt	r3,zero,803e3c <___vfprintf_internal_r+0x21d0>
  803b8c:	d8003215 	stw	zero,200(sp)
  803b90:	003e5d06 	br	803508 <__alt_data_end+0xff803508>
  803b94:	d9002d17 	ldw	r4,180(sp)
  803b98:	d9801e04 	addi	r6,sp,120
  803b9c:	b80b883a 	mov	r5,r23
  803ba0:	0808bec0 	call	808bec <__sprint_r>
  803ba4:	1039351e 	bne	r2,zero,80207c <__alt_data_end+0xff80207c>
  803ba8:	dc402617 	ldw	r17,152(sp)
  803bac:	d8c02017 	ldw	r3,128(sp)
  803bb0:	d8801f17 	ldw	r2,124(sp)
  803bb4:	da000404 	addi	r8,sp,16
  803bb8:	003ed606 	br	803714 <__alt_data_end+0xff803714>
  803bbc:	182b883a 	mov	r21,r3
  803bc0:	d8002a15 	stw	zero,168(sp)
  803bc4:	00388c06 	br	801df8 <__alt_data_end+0xff801df8>
  803bc8:	d8802a17 	ldw	r2,168(sp)
  803bcc:	103e071e 	bne	r2,zero,8033ec <__alt_data_end+0xff8033ec>
  803bd0:	dc002a15 	stw	r16,168(sp)
  803bd4:	003e0506 	br	8033ec <__alt_data_end+0xff8033ec>
  803bd8:	d9002a17 	ldw	r4,168(sp)
  803bdc:	20c00044 	addi	r3,r4,1
  803be0:	003e0f06 	br	803420 <__alt_data_end+0xff803420>
  803be4:	01400184 	movi	r5,6
  803be8:	d9402a15 	stw	r5,168(sp)
  803bec:	003dff06 	br	8033ec <__alt_data_end+0xff8033ec>
  803bf0:	d8802104 	addi	r2,sp,132
  803bf4:	d8800315 	stw	r2,12(sp)
  803bf8:	d8802504 	addi	r2,sp,148
  803bfc:	d8800215 	stw	r2,8(sp)
  803c00:	d8802604 	addi	r2,sp,152
  803c04:	d8800115 	stw	r2,4(sp)
  803c08:	d8802a17 	ldw	r2,168(sp)
  803c0c:	d9403617 	ldw	r5,216(sp)
  803c10:	d9002d17 	ldw	r4,180(sp)
  803c14:	d8800015 	stw	r2,0(sp)
  803c18:	01c000c4 	movi	r7,3
  803c1c:	980d883a 	mov	r6,r19
  803c20:	da003d15 	stw	r8,244(sp)
  803c24:	080439c0 	call	80439c <_dtoa_r>
  803c28:	d8c02a17 	ldw	r3,168(sp)
  803c2c:	da003d17 	ldw	r8,244(sp)
  803c30:	1021883a 	mov	r16,r2
  803c34:	10f9883a 	add	fp,r2,r3
  803c38:	81000007 	ldb	r4,0(r16)
  803c3c:	00800c04 	movi	r2,48
  803c40:	20805e26 	beq	r4,r2,803dbc <___vfprintf_internal_r+0x2150>
  803c44:	d8c02617 	ldw	r3,152(sp)
  803c48:	e0f9883a 	add	fp,fp,r3
  803c4c:	003e0a06 	br	803478 <__alt_data_end+0xff803478>
  803c50:	00c00b44 	movi	r3,45
  803c54:	24e0003c 	xorhi	r19,r4,32768
  803c58:	d8c02905 	stb	r3,164(sp)
  803c5c:	003de906 	br	803404 <__alt_data_end+0xff803404>
  803c60:	d8c03217 	ldw	r3,200(sp)
  803c64:	00c07a0e 	bge	zero,r3,803e50 <___vfprintf_internal_r+0x21e4>
  803c68:	00800044 	movi	r2,1
  803c6c:	d9003317 	ldw	r4,204(sp)
  803c70:	1105883a 	add	r2,r2,r4
  803c74:	d8802b15 	stw	r2,172(sp)
  803c78:	10004e16 	blt	r2,zero,803db4 <___vfprintf_internal_r+0x2148>
  803c7c:	044019c4 	movi	r17,103
  803c80:	003e2106 	br	803508 <__alt_data_end+0xff803508>
  803c84:	d9002a17 	ldw	r4,168(sp)
  803c88:	d8802104 	addi	r2,sp,132
  803c8c:	d8800315 	stw	r2,12(sp)
  803c90:	d9000015 	stw	r4,0(sp)
  803c94:	d8802504 	addi	r2,sp,148
  803c98:	d9403617 	ldw	r5,216(sp)
  803c9c:	d9002d17 	ldw	r4,180(sp)
  803ca0:	d8800215 	stw	r2,8(sp)
  803ca4:	d8802604 	addi	r2,sp,152
  803ca8:	d8800115 	stw	r2,4(sp)
  803cac:	01c000c4 	movi	r7,3
  803cb0:	980d883a 	mov	r6,r19
  803cb4:	da003d15 	stw	r8,244(sp)
  803cb8:	080439c0 	call	80439c <_dtoa_r>
  803cbc:	d8c02a17 	ldw	r3,168(sp)
  803cc0:	da003d17 	ldw	r8,244(sp)
  803cc4:	1021883a 	mov	r16,r2
  803cc8:	00801184 	movi	r2,70
  803ccc:	80f9883a 	add	fp,r16,r3
  803cd0:	88bfd926 	beq	r17,r2,803c38 <__alt_data_end+0xff803c38>
  803cd4:	003de806 	br	803478 <__alt_data_end+0xff803478>
  803cd8:	d9002a17 	ldw	r4,168(sp)
  803cdc:	00c04d0e 	bge	zero,r3,803e14 <___vfprintf_internal_r+0x21a8>
  803ce0:	2000441e 	bne	r4,zero,803df4 <___vfprintf_internal_r+0x2188>
  803ce4:	9480004c 	andi	r18,r18,1
  803ce8:	9000421e 	bne	r18,zero,803df4 <___vfprintf_internal_r+0x2188>
  803cec:	1805883a 	mov	r2,r3
  803cf0:	18006f16 	blt	r3,zero,803eb0 <___vfprintf_internal_r+0x2244>
  803cf4:	d8c03217 	ldw	r3,200(sp)
  803cf8:	d8c02b15 	stw	r3,172(sp)
  803cfc:	003e0206 	br	803508 <__alt_data_end+0xff803508>
  803d00:	df0022c4 	addi	fp,sp,139
  803d04:	dc002a15 	stw	r16,168(sp)
  803d08:	4027883a 	mov	r19,r8
  803d0c:	e021883a 	mov	r16,fp
  803d10:	b009883a 	mov	r4,r22
  803d14:	01400284 	movi	r5,10
  803d18:	080b7780 	call	80b778 <__modsi3>
  803d1c:	10800c04 	addi	r2,r2,48
  803d20:	843fffc4 	addi	r16,r16,-1
  803d24:	b009883a 	mov	r4,r22
  803d28:	01400284 	movi	r5,10
  803d2c:	80800005 	stb	r2,0(r16)
  803d30:	080b6f40 	call	80b6f4 <__divsi3>
  803d34:	102d883a 	mov	r22,r2
  803d38:	00800244 	movi	r2,9
  803d3c:	15bff416 	blt	r2,r22,803d10 <__alt_data_end+0xff803d10>
  803d40:	9811883a 	mov	r8,r19
  803d44:	b0800c04 	addi	r2,r22,48
  803d48:	8027883a 	mov	r19,r16
  803d4c:	997fffc4 	addi	r5,r19,-1
  803d50:	98bfffc5 	stb	r2,-1(r19)
  803d54:	dc002a17 	ldw	r16,168(sp)
  803d58:	2f006d2e 	bgeu	r5,fp,803f10 <___vfprintf_internal_r+0x22a4>
  803d5c:	d9c02384 	addi	r7,sp,142
  803d60:	3ccfc83a 	sub	r7,r7,r19
  803d64:	d9002344 	addi	r4,sp,141
  803d68:	e1cf883a 	add	r7,fp,r7
  803d6c:	00000106 	br	803d74 <___vfprintf_internal_r+0x2108>
  803d70:	28800003 	ldbu	r2,0(r5)
  803d74:	20800005 	stb	r2,0(r4)
  803d78:	21000044 	addi	r4,r4,1
  803d7c:	29400044 	addi	r5,r5,1
  803d80:	393ffb1e 	bne	r7,r4,803d70 <__alt_data_end+0xff803d70>
  803d84:	d8802304 	addi	r2,sp,140
  803d88:	14c5c83a 	sub	r2,r2,r19
  803d8c:	d8c02344 	addi	r3,sp,141
  803d90:	1885883a 	add	r2,r3,r2
  803d94:	003f7006 	br	803b58 <__alt_data_end+0xff803b58>
  803d98:	0005883a 	mov	r2,zero
  803d9c:	003f0f06 	br	8039dc <__alt_data_end+0xff8039dc>
  803da0:	d8c03217 	ldw	r3,200(sp)
  803da4:	18c00044 	addi	r3,r3,1
  803da8:	d8c02b15 	stw	r3,172(sp)
  803dac:	1805883a 	mov	r2,r3
  803db0:	183fb20e 	bge	r3,zero,803c7c <__alt_data_end+0xff803c7c>
  803db4:	0005883a 	mov	r2,zero
  803db8:	003fb006 	br	803c7c <__alt_data_end+0xff803c7c>
  803dbc:	d9003617 	ldw	r4,216(sp)
  803dc0:	000d883a 	mov	r6,zero
  803dc4:	000f883a 	mov	r7,zero
  803dc8:	980b883a 	mov	r5,r19
  803dcc:	d8c03c15 	stw	r3,240(sp)
  803dd0:	da003d15 	stw	r8,244(sp)
  803dd4:	080c2a00 	call	80c2a0 <__eqdf2>
  803dd8:	d8c03c17 	ldw	r3,240(sp)
  803ddc:	da003d17 	ldw	r8,244(sp)
  803de0:	103f9826 	beq	r2,zero,803c44 <__alt_data_end+0xff803c44>
  803de4:	00800044 	movi	r2,1
  803de8:	10c7c83a 	sub	r3,r2,r3
  803dec:	d8c02615 	stw	r3,152(sp)
  803df0:	003f9506 	br	803c48 <__alt_data_end+0xff803c48>
  803df4:	d9002a17 	ldw	r4,168(sp)
  803df8:	d8c03217 	ldw	r3,200(sp)
  803dfc:	20800044 	addi	r2,r4,1
  803e00:	1885883a 	add	r2,r3,r2
  803e04:	d8802b15 	stw	r2,172(sp)
  803e08:	103dbf0e 	bge	r2,zero,803508 <__alt_data_end+0xff803508>
  803e0c:	0005883a 	mov	r2,zero
  803e10:	003dbd06 	br	803508 <__alt_data_end+0xff803508>
  803e14:	2000201e 	bne	r4,zero,803e98 <___vfprintf_internal_r+0x222c>
  803e18:	9480004c 	andi	r18,r18,1
  803e1c:	90001e1e 	bne	r18,zero,803e98 <___vfprintf_internal_r+0x222c>
  803e20:	00800044 	movi	r2,1
  803e24:	d8802b15 	stw	r2,172(sp)
  803e28:	003db706 	br	803508 <__alt_data_end+0xff803508>
  803e2c:	00800b44 	movi	r2,45
  803e30:	05adc83a 	sub	r22,zero,r22
  803e34:	d8802305 	stb	r2,140(sp)
  803e38:	003f3f06 	br	803b38 <__alt_data_end+0xff803b38>
  803e3c:	0005883a 	mov	r2,zero
  803e40:	003f5206 	br	803b8c <__alt_data_end+0xff803b8c>
  803e44:	90a4703a 	and	r18,r18,r2
  803e48:	903f4e26 	beq	r18,zero,803b84 <__alt_data_end+0xff803b84>
  803e4c:	003f4a06 	br	803b78 <__alt_data_end+0xff803b78>
  803e50:	00800084 	movi	r2,2
  803e54:	10c5c83a 	sub	r2,r2,r3
  803e58:	003f8406 	br	803c6c <__alt_data_end+0xff803c6c>
  803e5c:	d9402e17 	ldw	r5,184(sp)
  803e60:	d9002e17 	ldw	r4,184(sp)
  803e64:	ac400043 	ldbu	r17,1(r21)
  803e68:	29400017 	ldw	r5,0(r5)
  803e6c:	20800104 	addi	r2,r4,4
  803e70:	d8802e15 	stw	r2,184(sp)
  803e74:	d9402a15 	stw	r5,168(sp)
  803e78:	182b883a 	mov	r21,r3
  803e7c:	283e7b0e 	bge	r5,zero,80386c <__alt_data_end+0xff80386c>
  803e80:	8c403fcc 	andi	r17,r17,255
  803e84:	017fffc4 	movi	r5,-1
  803e88:	8c40201c 	xori	r17,r17,128
  803e8c:	d9402a15 	stw	r5,168(sp)
  803e90:	8c7fe004 	addi	r17,r17,-128
  803e94:	0037d706 	br	801df4 <__alt_data_end+0xff801df4>
  803e98:	d8c02a17 	ldw	r3,168(sp)
  803e9c:	18c00084 	addi	r3,r3,2
  803ea0:	d8c02b15 	stw	r3,172(sp)
  803ea4:	1805883a 	mov	r2,r3
  803ea8:	183d970e 	bge	r3,zero,803508 <__alt_data_end+0xff803508>
  803eac:	003fd706 	br	803e0c <__alt_data_end+0xff803e0c>
  803eb0:	0005883a 	mov	r2,zero
  803eb4:	003f8f06 	br	803cf4 <__alt_data_end+0xff803cf4>
  803eb8:	9080004c 	andi	r2,r18,1
  803ebc:	103f821e 	bne	r2,zero,803cc8 <__alt_data_end+0xff803cc8>
  803ec0:	d8802117 	ldw	r2,132(sp)
  803ec4:	1405c83a 	sub	r2,r2,r16
  803ec8:	d8803315 	stw	r2,204(sp)
  803ecc:	b47ef426 	beq	r22,r17,803aa0 <__alt_data_end+0xff803aa0>
  803ed0:	dd802617 	ldw	r22,152(sp)
  803ed4:	003f1206 	br	803b20 <__alt_data_end+0xff803b20>
  803ed8:	d8c02b03 	ldbu	r3,172(sp)
  803edc:	d8c02785 	stb	r3,158(sp)
  803ee0:	0038df06 	br	802260 <__alt_data_end+0xff802260>
  803ee4:	d8c02b03 	ldbu	r3,172(sp)
  803ee8:	d8c02785 	stb	r3,158(sp)
  803eec:	0038aa06 	br	802198 <__alt_data_end+0xff802198>
  803ef0:	d8c02b03 	ldbu	r3,172(sp)
  803ef4:	d8c02785 	stb	r3,158(sp)
  803ef8:	003a4306 	br	802808 <__alt_data_end+0xff802808>
  803efc:	d8c02b03 	ldbu	r3,172(sp)
  803f00:	d8c02785 	stb	r3,158(sp)
  803f04:	003af506 	br	802adc <__alt_data_end+0xff802adc>
  803f08:	0005883a 	mov	r2,zero
  803f0c:	003d7b06 	br	8034fc <__alt_data_end+0xff8034fc>
  803f10:	d8802344 	addi	r2,sp,141
  803f14:	003f1006 	br	803b58 <__alt_data_end+0xff803b58>
  803f18:	d8c02b03 	ldbu	r3,172(sp)
  803f1c:	d8c02785 	stb	r3,158(sp)
  803f20:	0038fd06 	br	802318 <__alt_data_end+0xff802318>
  803f24:	d8c02b03 	ldbu	r3,172(sp)
  803f28:	d8c02785 	stb	r3,158(sp)
  803f2c:	003a9706 	br	80298c <__alt_data_end+0xff80298c>
  803f30:	d8c02b03 	ldbu	r3,172(sp)
  803f34:	d8c02785 	stb	r3,158(sp)
  803f38:	003a1806 	br	80279c <__alt_data_end+0xff80279c>
  803f3c:	d8c02b03 	ldbu	r3,172(sp)
  803f40:	d8c02785 	stb	r3,158(sp)
  803f44:	003abe06 	br	802a40 <__alt_data_end+0xff802a40>

00803f48 <__vfprintf_internal>:
  803f48:	00802074 	movhi	r2,129
  803f4c:	108b3104 	addi	r2,r2,11460
  803f50:	300f883a 	mov	r7,r6
  803f54:	280d883a 	mov	r6,r5
  803f58:	200b883a 	mov	r5,r4
  803f5c:	11000017 	ldw	r4,0(r2)
  803f60:	0801c6c1 	jmpi	801c6c <___vfprintf_internal_r>

00803f64 <__sbprintf>:
  803f64:	2880030b 	ldhu	r2,12(r5)
  803f68:	2ac01917 	ldw	r11,100(r5)
  803f6c:	2a80038b 	ldhu	r10,14(r5)
  803f70:	2a400717 	ldw	r9,28(r5)
  803f74:	2a000917 	ldw	r8,36(r5)
  803f78:	defee204 	addi	sp,sp,-1144
  803f7c:	00c10004 	movi	r3,1024
  803f80:	dc011a15 	stw	r16,1128(sp)
  803f84:	10bfff4c 	andi	r2,r2,65533
  803f88:	2821883a 	mov	r16,r5
  803f8c:	d8cb883a 	add	r5,sp,r3
  803f90:	dc811c15 	stw	r18,1136(sp)
  803f94:	dc411b15 	stw	r17,1132(sp)
  803f98:	dfc11d15 	stw	ra,1140(sp)
  803f9c:	2025883a 	mov	r18,r4
  803fa0:	d881030d 	sth	r2,1036(sp)
  803fa4:	dac11915 	stw	r11,1124(sp)
  803fa8:	da81038d 	sth	r10,1038(sp)
  803fac:	da410715 	stw	r9,1052(sp)
  803fb0:	da010915 	stw	r8,1060(sp)
  803fb4:	dec10015 	stw	sp,1024(sp)
  803fb8:	dec10415 	stw	sp,1040(sp)
  803fbc:	d8c10215 	stw	r3,1032(sp)
  803fc0:	d8c10515 	stw	r3,1044(sp)
  803fc4:	d8010615 	stw	zero,1048(sp)
  803fc8:	0801c6c0 	call	801c6c <___vfprintf_internal_r>
  803fcc:	1023883a 	mov	r17,r2
  803fd0:	10000416 	blt	r2,zero,803fe4 <__sbprintf+0x80>
  803fd4:	d9410004 	addi	r5,sp,1024
  803fd8:	9009883a 	mov	r4,r18
  803fdc:	0805c400 	call	805c40 <_fflush_r>
  803fe0:	10000d1e 	bne	r2,zero,804018 <__sbprintf+0xb4>
  803fe4:	d881030b 	ldhu	r2,1036(sp)
  803fe8:	1080100c 	andi	r2,r2,64
  803fec:	10000326 	beq	r2,zero,803ffc <__sbprintf+0x98>
  803ff0:	8080030b 	ldhu	r2,12(r16)
  803ff4:	10801014 	ori	r2,r2,64
  803ff8:	8080030d 	sth	r2,12(r16)
  803ffc:	8805883a 	mov	r2,r17
  804000:	dfc11d17 	ldw	ra,1140(sp)
  804004:	dc811c17 	ldw	r18,1136(sp)
  804008:	dc411b17 	ldw	r17,1132(sp)
  80400c:	dc011a17 	ldw	r16,1128(sp)
  804010:	dec11e04 	addi	sp,sp,1144
  804014:	f800283a 	ret
  804018:	047fffc4 	movi	r17,-1
  80401c:	003ff106 	br	803fe4 <__alt_data_end+0xff803fe4>

00804020 <__swsetup_r>:
  804020:	00802074 	movhi	r2,129
  804024:	defffd04 	addi	sp,sp,-12
  804028:	108b3104 	addi	r2,r2,11460
  80402c:	dc400115 	stw	r17,4(sp)
  804030:	2023883a 	mov	r17,r4
  804034:	11000017 	ldw	r4,0(r2)
  804038:	dc000015 	stw	r16,0(sp)
  80403c:	dfc00215 	stw	ra,8(sp)
  804040:	2821883a 	mov	r16,r5
  804044:	20000226 	beq	r4,zero,804050 <__swsetup_r+0x30>
  804048:	20800e17 	ldw	r2,56(r4)
  80404c:	10003126 	beq	r2,zero,804114 <__swsetup_r+0xf4>
  804050:	8080030b 	ldhu	r2,12(r16)
  804054:	10c0020c 	andi	r3,r2,8
  804058:	1009883a 	mov	r4,r2
  80405c:	18000f26 	beq	r3,zero,80409c <__swsetup_r+0x7c>
  804060:	80c00417 	ldw	r3,16(r16)
  804064:	18001526 	beq	r3,zero,8040bc <__swsetup_r+0x9c>
  804068:	1100004c 	andi	r4,r2,1
  80406c:	20001c1e 	bne	r4,zero,8040e0 <__swsetup_r+0xc0>
  804070:	1080008c 	andi	r2,r2,2
  804074:	1000291e 	bne	r2,zero,80411c <__swsetup_r+0xfc>
  804078:	80800517 	ldw	r2,20(r16)
  80407c:	80800215 	stw	r2,8(r16)
  804080:	18001c26 	beq	r3,zero,8040f4 <__swsetup_r+0xd4>
  804084:	0005883a 	mov	r2,zero
  804088:	dfc00217 	ldw	ra,8(sp)
  80408c:	dc400117 	ldw	r17,4(sp)
  804090:	dc000017 	ldw	r16,0(sp)
  804094:	dec00304 	addi	sp,sp,12
  804098:	f800283a 	ret
  80409c:	2080040c 	andi	r2,r4,16
  8040a0:	10002e26 	beq	r2,zero,80415c <__swsetup_r+0x13c>
  8040a4:	2080010c 	andi	r2,r4,4
  8040a8:	10001e1e 	bne	r2,zero,804124 <__swsetup_r+0x104>
  8040ac:	80c00417 	ldw	r3,16(r16)
  8040b0:	20800214 	ori	r2,r4,8
  8040b4:	8080030d 	sth	r2,12(r16)
  8040b8:	183feb1e 	bne	r3,zero,804068 <__alt_data_end+0xff804068>
  8040bc:	1100a00c 	andi	r4,r2,640
  8040c0:	01408004 	movi	r5,512
  8040c4:	217fe826 	beq	r4,r5,804068 <__alt_data_end+0xff804068>
  8040c8:	800b883a 	mov	r5,r16
  8040cc:	8809883a 	mov	r4,r17
  8040d0:	0806bdc0 	call	806bdc <__smakebuf_r>
  8040d4:	8080030b 	ldhu	r2,12(r16)
  8040d8:	80c00417 	ldw	r3,16(r16)
  8040dc:	003fe206 	br	804068 <__alt_data_end+0xff804068>
  8040e0:	80800517 	ldw	r2,20(r16)
  8040e4:	80000215 	stw	zero,8(r16)
  8040e8:	0085c83a 	sub	r2,zero,r2
  8040ec:	80800615 	stw	r2,24(r16)
  8040f0:	183fe41e 	bne	r3,zero,804084 <__alt_data_end+0xff804084>
  8040f4:	80c0030b 	ldhu	r3,12(r16)
  8040f8:	0005883a 	mov	r2,zero
  8040fc:	1900200c 	andi	r4,r3,128
  804100:	203fe126 	beq	r4,zero,804088 <__alt_data_end+0xff804088>
  804104:	18c01014 	ori	r3,r3,64
  804108:	80c0030d 	sth	r3,12(r16)
  80410c:	00bfffc4 	movi	r2,-1
  804110:	003fdd06 	br	804088 <__alt_data_end+0xff804088>
  804114:	080602c0 	call	80602c <__sinit>
  804118:	003fcd06 	br	804050 <__alt_data_end+0xff804050>
  80411c:	0005883a 	mov	r2,zero
  804120:	003fd606 	br	80407c <__alt_data_end+0xff80407c>
  804124:	81400c17 	ldw	r5,48(r16)
  804128:	28000626 	beq	r5,zero,804144 <__swsetup_r+0x124>
  80412c:	80801004 	addi	r2,r16,64
  804130:	28800326 	beq	r5,r2,804140 <__swsetup_r+0x120>
  804134:	8809883a 	mov	r4,r17
  804138:	08061a00 	call	8061a0 <_free_r>
  80413c:	8100030b 	ldhu	r4,12(r16)
  804140:	80000c15 	stw	zero,48(r16)
  804144:	80c00417 	ldw	r3,16(r16)
  804148:	00bff6c4 	movi	r2,-37
  80414c:	1108703a 	and	r4,r2,r4
  804150:	80000115 	stw	zero,4(r16)
  804154:	80c00015 	stw	r3,0(r16)
  804158:	003fd506 	br	8040b0 <__alt_data_end+0xff8040b0>
  80415c:	00800244 	movi	r2,9
  804160:	88800015 	stw	r2,0(r17)
  804164:	20801014 	ori	r2,r4,64
  804168:	8080030d 	sth	r2,12(r16)
  80416c:	00bfffc4 	movi	r2,-1
  804170:	003fc506 	br	804088 <__alt_data_end+0xff804088>

00804174 <quorem>:
  804174:	defff204 	addi	sp,sp,-56
  804178:	ddc00b15 	stw	r23,44(sp)
  80417c:	20800417 	ldw	r2,16(r4)
  804180:	2dc00417 	ldw	r23,16(r5)
  804184:	dfc00d15 	stw	ra,52(sp)
  804188:	df000c15 	stw	fp,48(sp)
  80418c:	dd800a15 	stw	r22,40(sp)
  804190:	dd400915 	stw	r21,36(sp)
  804194:	dd000815 	stw	r20,32(sp)
  804198:	dcc00715 	stw	r19,28(sp)
  80419c:	dc800615 	stw	r18,24(sp)
  8041a0:	dc400515 	stw	r17,20(sp)
  8041a4:	dc000415 	stw	r16,16(sp)
  8041a8:	15c07a16 	blt	r2,r23,804394 <quorem+0x220>
  8041ac:	bdffffc4 	addi	r23,r23,-1
  8041b0:	bde9883a 	add	r20,r23,r23
  8041b4:	28c00504 	addi	r3,r5,20
  8041b8:	a529883a 	add	r20,r20,r20
  8041bc:	1d39883a 	add	fp,r3,r20
  8041c0:	24c00504 	addi	r19,r4,20
  8041c4:	d9400215 	stw	r5,8(sp)
  8041c8:	9d29883a 	add	r20,r19,r20
  8041cc:	e1400017 	ldw	r5,0(fp)
  8041d0:	d9000015 	stw	r4,0(sp)
  8041d4:	a1000017 	ldw	r4,0(r20)
  8041d8:	29400044 	addi	r5,r5,1
  8041dc:	d8c00115 	stw	r3,4(sp)
  8041e0:	dd000315 	stw	r20,12(sp)
  8041e4:	080b7ec0 	call	80b7ec <__udivsi3>
  8041e8:	1025883a 	mov	r18,r2
  8041ec:	10003026 	beq	r2,zero,8042b0 <quorem+0x13c>
  8041f0:	dc400117 	ldw	r17,4(sp)
  8041f4:	9829883a 	mov	r20,r19
  8041f8:	002d883a 	mov	r22,zero
  8041fc:	0021883a 	mov	r16,zero
  804200:	8d400017 	ldw	r21,0(r17)
  804204:	900b883a 	mov	r5,r18
  804208:	8c400104 	addi	r17,r17,4
  80420c:	a93fffcc 	andi	r4,r21,65535
  804210:	080b8a80 	call	80b8a8 <__mulsi3>
  804214:	a808d43a 	srli	r4,r21,16
  804218:	900b883a 	mov	r5,r18
  80421c:	15ad883a 	add	r22,r2,r22
  804220:	080b8a80 	call	80b8a8 <__mulsi3>
  804224:	a1000017 	ldw	r4,0(r20)
  804228:	b00cd43a 	srli	r6,r22,16
  80422c:	b0ffffcc 	andi	r3,r22,65535
  804230:	217fffcc 	andi	r5,r4,65535
  804234:	2c21883a 	add	r16,r5,r16
  804238:	80c7c83a 	sub	r3,r16,r3
  80423c:	2008d43a 	srli	r4,r4,16
  804240:	1185883a 	add	r2,r2,r6
  804244:	1821d43a 	srai	r16,r3,16
  804248:	117fffcc 	andi	r5,r2,65535
  80424c:	2149c83a 	sub	r4,r4,r5
  804250:	2421883a 	add	r16,r4,r16
  804254:	8008943a 	slli	r4,r16,16
  804258:	18ffffcc 	andi	r3,r3,65535
  80425c:	102cd43a 	srli	r22,r2,16
  804260:	20c8b03a 	or	r4,r4,r3
  804264:	a1000015 	stw	r4,0(r20)
  804268:	8021d43a 	srai	r16,r16,16
  80426c:	a5000104 	addi	r20,r20,4
  804270:	e47fe32e 	bgeu	fp,r17,804200 <__alt_data_end+0xff804200>
  804274:	d8c00317 	ldw	r3,12(sp)
  804278:	18800017 	ldw	r2,0(r3)
  80427c:	10000c1e 	bne	r2,zero,8042b0 <quorem+0x13c>
  804280:	18bfff04 	addi	r2,r3,-4
  804284:	9880082e 	bgeu	r19,r2,8042a8 <quorem+0x134>
  804288:	18ffff17 	ldw	r3,-4(r3)
  80428c:	18000326 	beq	r3,zero,80429c <quorem+0x128>
  804290:	00000506 	br	8042a8 <quorem+0x134>
  804294:	10c00017 	ldw	r3,0(r2)
  804298:	1800031e 	bne	r3,zero,8042a8 <quorem+0x134>
  80429c:	10bfff04 	addi	r2,r2,-4
  8042a0:	bdffffc4 	addi	r23,r23,-1
  8042a4:	98bffb36 	bltu	r19,r2,804294 <__alt_data_end+0xff804294>
  8042a8:	d8c00017 	ldw	r3,0(sp)
  8042ac:	1dc00415 	stw	r23,16(r3)
  8042b0:	d9400217 	ldw	r5,8(sp)
  8042b4:	d9000017 	ldw	r4,0(sp)
  8042b8:	0807bcc0 	call	807bcc <__mcmp>
  8042bc:	10002816 	blt	r2,zero,804360 <quorem+0x1ec>
  8042c0:	dc400117 	ldw	r17,4(sp)
  8042c4:	94800044 	addi	r18,r18,1
  8042c8:	980d883a 	mov	r6,r19
  8042cc:	0007883a 	mov	r3,zero
  8042d0:	31000017 	ldw	r4,0(r6)
  8042d4:	89400017 	ldw	r5,0(r17)
  8042d8:	31800104 	addi	r6,r6,4
  8042dc:	20bfffcc 	andi	r2,r4,65535
  8042e0:	10c7883a 	add	r3,r2,r3
  8042e4:	28bfffcc 	andi	r2,r5,65535
  8042e8:	1885c83a 	sub	r2,r3,r2
  8042ec:	280ad43a 	srli	r5,r5,16
  8042f0:	2008d43a 	srli	r4,r4,16
  8042f4:	1007d43a 	srai	r3,r2,16
  8042f8:	10bfffcc 	andi	r2,r2,65535
  8042fc:	2149c83a 	sub	r4,r4,r5
  804300:	20c9883a 	add	r4,r4,r3
  804304:	200a943a 	slli	r5,r4,16
  804308:	8c400104 	addi	r17,r17,4
  80430c:	2007d43a 	srai	r3,r4,16
  804310:	2884b03a 	or	r2,r5,r2
  804314:	30bfff15 	stw	r2,-4(r6)
  804318:	e47fed2e 	bgeu	fp,r17,8042d0 <__alt_data_end+0xff8042d0>
  80431c:	bdc5883a 	add	r2,r23,r23
  804320:	1085883a 	add	r2,r2,r2
  804324:	9887883a 	add	r3,r19,r2
  804328:	18800017 	ldw	r2,0(r3)
  80432c:	10000c1e 	bne	r2,zero,804360 <quorem+0x1ec>
  804330:	18bfff04 	addi	r2,r3,-4
  804334:	9880082e 	bgeu	r19,r2,804358 <quorem+0x1e4>
  804338:	18ffff17 	ldw	r3,-4(r3)
  80433c:	18000326 	beq	r3,zero,80434c <quorem+0x1d8>
  804340:	00000506 	br	804358 <quorem+0x1e4>
  804344:	10c00017 	ldw	r3,0(r2)
  804348:	1800031e 	bne	r3,zero,804358 <quorem+0x1e4>
  80434c:	10bfff04 	addi	r2,r2,-4
  804350:	bdffffc4 	addi	r23,r23,-1
  804354:	98bffb36 	bltu	r19,r2,804344 <__alt_data_end+0xff804344>
  804358:	d8c00017 	ldw	r3,0(sp)
  80435c:	1dc00415 	stw	r23,16(r3)
  804360:	9005883a 	mov	r2,r18
  804364:	dfc00d17 	ldw	ra,52(sp)
  804368:	df000c17 	ldw	fp,48(sp)
  80436c:	ddc00b17 	ldw	r23,44(sp)
  804370:	dd800a17 	ldw	r22,40(sp)
  804374:	dd400917 	ldw	r21,36(sp)
  804378:	dd000817 	ldw	r20,32(sp)
  80437c:	dcc00717 	ldw	r19,28(sp)
  804380:	dc800617 	ldw	r18,24(sp)
  804384:	dc400517 	ldw	r17,20(sp)
  804388:	dc000417 	ldw	r16,16(sp)
  80438c:	dec00e04 	addi	sp,sp,56
  804390:	f800283a 	ret
  804394:	0005883a 	mov	r2,zero
  804398:	003ff206 	br	804364 <__alt_data_end+0xff804364>

0080439c <_dtoa_r>:
  80439c:	20801017 	ldw	r2,64(r4)
  8043a0:	deffde04 	addi	sp,sp,-136
  8043a4:	df002015 	stw	fp,128(sp)
  8043a8:	dcc01b15 	stw	r19,108(sp)
  8043ac:	dc801a15 	stw	r18,104(sp)
  8043b0:	dc401915 	stw	r17,100(sp)
  8043b4:	dc001815 	stw	r16,96(sp)
  8043b8:	dfc02115 	stw	ra,132(sp)
  8043bc:	ddc01f15 	stw	r23,124(sp)
  8043c0:	dd801e15 	stw	r22,120(sp)
  8043c4:	dd401d15 	stw	r21,116(sp)
  8043c8:	dd001c15 	stw	r20,112(sp)
  8043cc:	d9c00315 	stw	r7,12(sp)
  8043d0:	2039883a 	mov	fp,r4
  8043d4:	3023883a 	mov	r17,r6
  8043d8:	2825883a 	mov	r18,r5
  8043dc:	dc002417 	ldw	r16,144(sp)
  8043e0:	3027883a 	mov	r19,r6
  8043e4:	10000826 	beq	r2,zero,804408 <_dtoa_r+0x6c>
  8043e8:	21801117 	ldw	r6,68(r4)
  8043ec:	00c00044 	movi	r3,1
  8043f0:	100b883a 	mov	r5,r2
  8043f4:	1986983a 	sll	r3,r3,r6
  8043f8:	11800115 	stw	r6,4(r2)
  8043fc:	10c00215 	stw	r3,8(r2)
  804400:	08072f00 	call	8072f0 <_Bfree>
  804404:	e0001015 	stw	zero,64(fp)
  804408:	88002e16 	blt	r17,zero,8044c4 <_dtoa_r+0x128>
  80440c:	80000015 	stw	zero,0(r16)
  804410:	889ffc2c 	andhi	r2,r17,32752
  804414:	00dffc34 	movhi	r3,32752
  804418:	10c01c26 	beq	r2,r3,80448c <_dtoa_r+0xf0>
  80441c:	000d883a 	mov	r6,zero
  804420:	000f883a 	mov	r7,zero
  804424:	9009883a 	mov	r4,r18
  804428:	980b883a 	mov	r5,r19
  80442c:	080c2a00 	call	80c2a0 <__eqdf2>
  804430:	10002b1e 	bne	r2,zero,8044e0 <_dtoa_r+0x144>
  804434:	d9c02317 	ldw	r7,140(sp)
  804438:	00800044 	movi	r2,1
  80443c:	38800015 	stw	r2,0(r7)
  804440:	d8802517 	ldw	r2,148(sp)
  804444:	10019e26 	beq	r2,zero,804ac0 <_dtoa_r+0x724>
  804448:	d8c02517 	ldw	r3,148(sp)
  80444c:	00802074 	movhi	r2,129
  804450:	1083dc44 	addi	r2,r2,3953
  804454:	18800015 	stw	r2,0(r3)
  804458:	10bfffc4 	addi	r2,r2,-1
  80445c:	dfc02117 	ldw	ra,132(sp)
  804460:	df002017 	ldw	fp,128(sp)
  804464:	ddc01f17 	ldw	r23,124(sp)
  804468:	dd801e17 	ldw	r22,120(sp)
  80446c:	dd401d17 	ldw	r21,116(sp)
  804470:	dd001c17 	ldw	r20,112(sp)
  804474:	dcc01b17 	ldw	r19,108(sp)
  804478:	dc801a17 	ldw	r18,104(sp)
  80447c:	dc401917 	ldw	r17,100(sp)
  804480:	dc001817 	ldw	r16,96(sp)
  804484:	dec02204 	addi	sp,sp,136
  804488:	f800283a 	ret
  80448c:	d8c02317 	ldw	r3,140(sp)
  804490:	0089c3c4 	movi	r2,9999
  804494:	18800015 	stw	r2,0(r3)
  804498:	90017726 	beq	r18,zero,804a78 <_dtoa_r+0x6dc>
  80449c:	00802074 	movhi	r2,129
  8044a0:	1083e804 	addi	r2,r2,4000
  8044a4:	d9002517 	ldw	r4,148(sp)
  8044a8:	203fec26 	beq	r4,zero,80445c <__alt_data_end+0xff80445c>
  8044ac:	10c000c7 	ldb	r3,3(r2)
  8044b0:	1801781e 	bne	r3,zero,804a94 <_dtoa_r+0x6f8>
  8044b4:	10c000c4 	addi	r3,r2,3
  8044b8:	d9802517 	ldw	r6,148(sp)
  8044bc:	30c00015 	stw	r3,0(r6)
  8044c0:	003fe606 	br	80445c <__alt_data_end+0xff80445c>
  8044c4:	04e00034 	movhi	r19,32768
  8044c8:	9cffffc4 	addi	r19,r19,-1
  8044cc:	00800044 	movi	r2,1
  8044d0:	8ce6703a 	and	r19,r17,r19
  8044d4:	80800015 	stw	r2,0(r16)
  8044d8:	9823883a 	mov	r17,r19
  8044dc:	003fcc06 	br	804410 <__alt_data_end+0xff804410>
  8044e0:	d8800204 	addi	r2,sp,8
  8044e4:	d8800015 	stw	r2,0(sp)
  8044e8:	d9c00104 	addi	r7,sp,4
  8044ec:	900b883a 	mov	r5,r18
  8044f0:	980d883a 	mov	r6,r19
  8044f4:	e009883a 	mov	r4,fp
  8044f8:	8820d53a 	srli	r16,r17,20
  8044fc:	0807f980 	call	807f98 <__d2b>
  804500:	d8800915 	stw	r2,36(sp)
  804504:	8001651e 	bne	r16,zero,804a9c <_dtoa_r+0x700>
  804508:	dd800217 	ldw	r22,8(sp)
  80450c:	dc000117 	ldw	r16,4(sp)
  804510:	00800804 	movi	r2,32
  804514:	b421883a 	add	r16,r22,r16
  804518:	80c10c84 	addi	r3,r16,1074
  80451c:	10c2d10e 	bge	r2,r3,805064 <_dtoa_r+0xcc8>
  804520:	00801004 	movi	r2,64
  804524:	81010484 	addi	r4,r16,1042
  804528:	10c7c83a 	sub	r3,r2,r3
  80452c:	9108d83a 	srl	r4,r18,r4
  804530:	88e2983a 	sll	r17,r17,r3
  804534:	2448b03a 	or	r4,r4,r17
  804538:	080d6e00 	call	80d6e0 <__floatunsidf>
  80453c:	017f8434 	movhi	r5,65040
  804540:	01800044 	movi	r6,1
  804544:	1009883a 	mov	r4,r2
  804548:	194b883a 	add	r5,r3,r5
  80454c:	843fffc4 	addi	r16,r16,-1
  804550:	d9801115 	stw	r6,68(sp)
  804554:	000d883a 	mov	r6,zero
  804558:	01cffe34 	movhi	r7,16376
  80455c:	080cd640 	call	80cd64 <__subdf3>
  804560:	0198dbf4 	movhi	r6,25455
  804564:	01cff4f4 	movhi	r7,16339
  804568:	3190d844 	addi	r6,r6,17249
  80456c:	39e1e9c4 	addi	r7,r7,-30809
  804570:	1009883a 	mov	r4,r2
  804574:	180b883a 	mov	r5,r3
  804578:	080c4f80 	call	80c4f8 <__muldf3>
  80457c:	01a2d874 	movhi	r6,35681
  804580:	01cff1f4 	movhi	r7,16327
  804584:	31b22cc4 	addi	r6,r6,-14157
  804588:	39e28a04 	addi	r7,r7,-30168
  80458c:	180b883a 	mov	r5,r3
  804590:	1009883a 	mov	r4,r2
  804594:	08006780 	call	800678 <__adddf3>
  804598:	8009883a 	mov	r4,r16
  80459c:	1029883a 	mov	r20,r2
  8045a0:	1823883a 	mov	r17,r3
  8045a4:	0800f240 	call	800f24 <__floatsidf>
  8045a8:	019427f4 	movhi	r6,20639
  8045ac:	01cff4f4 	movhi	r7,16339
  8045b0:	319e7ec4 	addi	r6,r6,31227
  8045b4:	39d104c4 	addi	r7,r7,17427
  8045b8:	1009883a 	mov	r4,r2
  8045bc:	180b883a 	mov	r5,r3
  8045c0:	080c4f80 	call	80c4f8 <__muldf3>
  8045c4:	100d883a 	mov	r6,r2
  8045c8:	180f883a 	mov	r7,r3
  8045cc:	a009883a 	mov	r4,r20
  8045d0:	880b883a 	mov	r5,r17
  8045d4:	08006780 	call	800678 <__adddf3>
  8045d8:	1009883a 	mov	r4,r2
  8045dc:	180b883a 	mov	r5,r3
  8045e0:	1029883a 	mov	r20,r2
  8045e4:	1823883a 	mov	r17,r3
  8045e8:	080d6600 	call	80d660 <__fixdfsi>
  8045ec:	000d883a 	mov	r6,zero
  8045f0:	000f883a 	mov	r7,zero
  8045f4:	a009883a 	mov	r4,r20
  8045f8:	880b883a 	mov	r5,r17
  8045fc:	d8800515 	stw	r2,20(sp)
  804600:	080c4040 	call	80c404 <__ledf2>
  804604:	10028716 	blt	r2,zero,805024 <_dtoa_r+0xc88>
  804608:	d8c00517 	ldw	r3,20(sp)
  80460c:	00800584 	movi	r2,22
  804610:	10c27536 	bltu	r2,r3,804fe8 <_dtoa_r+0xc4c>
  804614:	180490fa 	slli	r2,r3,3
  804618:	00c02074 	movhi	r3,129
  80461c:	18c40404 	addi	r3,r3,4112
  804620:	1885883a 	add	r2,r3,r2
  804624:	11000017 	ldw	r4,0(r2)
  804628:	11400117 	ldw	r5,4(r2)
  80462c:	900d883a 	mov	r6,r18
  804630:	980f883a 	mov	r7,r19
  804634:	080c3280 	call	80c328 <__gedf2>
  804638:	00828d0e 	bge	zero,r2,805070 <_dtoa_r+0xcd4>
  80463c:	d9000517 	ldw	r4,20(sp)
  804640:	d8000e15 	stw	zero,56(sp)
  804644:	213fffc4 	addi	r4,r4,-1
  804648:	d9000515 	stw	r4,20(sp)
  80464c:	b42dc83a 	sub	r22,r22,r16
  804650:	b5bfffc4 	addi	r22,r22,-1
  804654:	b0026f16 	blt	r22,zero,805014 <_dtoa_r+0xc78>
  804658:	d8000815 	stw	zero,32(sp)
  80465c:	d9c00517 	ldw	r7,20(sp)
  804660:	38026416 	blt	r7,zero,804ff4 <_dtoa_r+0xc58>
  804664:	b1ed883a 	add	r22,r22,r7
  804668:	d9c00d15 	stw	r7,52(sp)
  80466c:	d8000a15 	stw	zero,40(sp)
  804670:	d9800317 	ldw	r6,12(sp)
  804674:	00800244 	movi	r2,9
  804678:	11811436 	bltu	r2,r6,804acc <_dtoa_r+0x730>
  80467c:	00800144 	movi	r2,5
  804680:	1184e10e 	bge	r2,r6,805a08 <_dtoa_r+0x166c>
  804684:	31bfff04 	addi	r6,r6,-4
  804688:	d9800315 	stw	r6,12(sp)
  80468c:	0023883a 	mov	r17,zero
  804690:	d9800317 	ldw	r6,12(sp)
  804694:	008000c4 	movi	r2,3
  804698:	30836726 	beq	r6,r2,805438 <_dtoa_r+0x109c>
  80469c:	1183410e 	bge	r2,r6,8053a4 <_dtoa_r+0x1008>
  8046a0:	d9c00317 	ldw	r7,12(sp)
  8046a4:	00800104 	movi	r2,4
  8046a8:	38827c26 	beq	r7,r2,80509c <_dtoa_r+0xd00>
  8046ac:	00800144 	movi	r2,5
  8046b0:	3884c41e 	bne	r7,r2,8059c4 <_dtoa_r+0x1628>
  8046b4:	00800044 	movi	r2,1
  8046b8:	d8800b15 	stw	r2,44(sp)
  8046bc:	d8c00517 	ldw	r3,20(sp)
  8046c0:	d9002217 	ldw	r4,136(sp)
  8046c4:	1907883a 	add	r3,r3,r4
  8046c8:	19800044 	addi	r6,r3,1
  8046cc:	d8c00c15 	stw	r3,48(sp)
  8046d0:	d9800615 	stw	r6,24(sp)
  8046d4:	0183a40e 	bge	zero,r6,805568 <_dtoa_r+0x11cc>
  8046d8:	d9800617 	ldw	r6,24(sp)
  8046dc:	3021883a 	mov	r16,r6
  8046e0:	e0001115 	stw	zero,68(fp)
  8046e4:	008005c4 	movi	r2,23
  8046e8:	1184c92e 	bgeu	r2,r6,805a10 <_dtoa_r+0x1674>
  8046ec:	00c00044 	movi	r3,1
  8046f0:	00800104 	movi	r2,4
  8046f4:	1085883a 	add	r2,r2,r2
  8046f8:	11000504 	addi	r4,r2,20
  8046fc:	180b883a 	mov	r5,r3
  804700:	18c00044 	addi	r3,r3,1
  804704:	313ffb2e 	bgeu	r6,r4,8046f4 <__alt_data_end+0xff8046f4>
  804708:	e1401115 	stw	r5,68(fp)
  80470c:	e009883a 	mov	r4,fp
  804710:	08072480 	call	807248 <_Balloc>
  804714:	d8800715 	stw	r2,28(sp)
  804718:	e0801015 	stw	r2,64(fp)
  80471c:	00800384 	movi	r2,14
  804720:	1400f736 	bltu	r2,r16,804b00 <_dtoa_r+0x764>
  804724:	8800f626 	beq	r17,zero,804b00 <_dtoa_r+0x764>
  804728:	d9c00517 	ldw	r7,20(sp)
  80472c:	01c39a0e 	bge	zero,r7,805598 <_dtoa_r+0x11fc>
  804730:	388003cc 	andi	r2,r7,15
  804734:	100490fa 	slli	r2,r2,3
  804738:	382bd13a 	srai	r21,r7,4
  80473c:	00c02074 	movhi	r3,129
  804740:	18c40404 	addi	r3,r3,4112
  804744:	1885883a 	add	r2,r3,r2
  804748:	a8c0040c 	andi	r3,r21,16
  80474c:	12400017 	ldw	r9,0(r2)
  804750:	12000117 	ldw	r8,4(r2)
  804754:	18037926 	beq	r3,zero,80553c <_dtoa_r+0x11a0>
  804758:	00802074 	movhi	r2,129
  80475c:	1083fa04 	addi	r2,r2,4072
  804760:	11800817 	ldw	r6,32(r2)
  804764:	11c00917 	ldw	r7,36(r2)
  804768:	9009883a 	mov	r4,r18
  80476c:	980b883a 	mov	r5,r19
  804770:	da001715 	stw	r8,92(sp)
  804774:	da401615 	stw	r9,88(sp)
  804778:	080b8d00 	call	80b8d0 <__divdf3>
  80477c:	da001717 	ldw	r8,92(sp)
  804780:	da401617 	ldw	r9,88(sp)
  804784:	ad4003cc 	andi	r21,r21,15
  804788:	040000c4 	movi	r16,3
  80478c:	1023883a 	mov	r17,r2
  804790:	1829883a 	mov	r20,r3
  804794:	a8001126 	beq	r21,zero,8047dc <_dtoa_r+0x440>
  804798:	05c02074 	movhi	r23,129
  80479c:	bdc3fa04 	addi	r23,r23,4072
  8047a0:	4805883a 	mov	r2,r9
  8047a4:	4007883a 	mov	r3,r8
  8047a8:	a980004c 	andi	r6,r21,1
  8047ac:	1009883a 	mov	r4,r2
  8047b0:	a82bd07a 	srai	r21,r21,1
  8047b4:	180b883a 	mov	r5,r3
  8047b8:	30000426 	beq	r6,zero,8047cc <_dtoa_r+0x430>
  8047bc:	b9800017 	ldw	r6,0(r23)
  8047c0:	b9c00117 	ldw	r7,4(r23)
  8047c4:	84000044 	addi	r16,r16,1
  8047c8:	080c4f80 	call	80c4f8 <__muldf3>
  8047cc:	bdc00204 	addi	r23,r23,8
  8047d0:	a83ff51e 	bne	r21,zero,8047a8 <__alt_data_end+0xff8047a8>
  8047d4:	1013883a 	mov	r9,r2
  8047d8:	1811883a 	mov	r8,r3
  8047dc:	480d883a 	mov	r6,r9
  8047e0:	400f883a 	mov	r7,r8
  8047e4:	8809883a 	mov	r4,r17
  8047e8:	a00b883a 	mov	r5,r20
  8047ec:	080b8d00 	call	80b8d0 <__divdf3>
  8047f0:	d8800f15 	stw	r2,60(sp)
  8047f4:	d8c01015 	stw	r3,64(sp)
  8047f8:	d8c00e17 	ldw	r3,56(sp)
  8047fc:	18000626 	beq	r3,zero,804818 <_dtoa_r+0x47c>
  804800:	d9000f17 	ldw	r4,60(sp)
  804804:	d9401017 	ldw	r5,64(sp)
  804808:	000d883a 	mov	r6,zero
  80480c:	01cffc34 	movhi	r7,16368
  804810:	080c4040 	call	80c404 <__ledf2>
  804814:	10040b16 	blt	r2,zero,805844 <_dtoa_r+0x14a8>
  804818:	8009883a 	mov	r4,r16
  80481c:	0800f240 	call	800f24 <__floatsidf>
  804820:	d9800f17 	ldw	r6,60(sp)
  804824:	d9c01017 	ldw	r7,64(sp)
  804828:	1009883a 	mov	r4,r2
  80482c:	180b883a 	mov	r5,r3
  804830:	080c4f80 	call	80c4f8 <__muldf3>
  804834:	000d883a 	mov	r6,zero
  804838:	01d00734 	movhi	r7,16412
  80483c:	1009883a 	mov	r4,r2
  804840:	180b883a 	mov	r5,r3
  804844:	08006780 	call	800678 <__adddf3>
  804848:	1021883a 	mov	r16,r2
  80484c:	d8800617 	ldw	r2,24(sp)
  804850:	047f3034 	movhi	r17,64704
  804854:	1c63883a 	add	r17,r3,r17
  804858:	10031826 	beq	r2,zero,8054bc <_dtoa_r+0x1120>
  80485c:	d8c00517 	ldw	r3,20(sp)
  804860:	db000617 	ldw	r12,24(sp)
  804864:	d8c01315 	stw	r3,76(sp)
  804868:	d9000b17 	ldw	r4,44(sp)
  80486c:	20038f26 	beq	r4,zero,8056ac <_dtoa_r+0x1310>
  804870:	60bfffc4 	addi	r2,r12,-1
  804874:	100490fa 	slli	r2,r2,3
  804878:	00c02074 	movhi	r3,129
  80487c:	18c40404 	addi	r3,r3,4112
  804880:	1885883a 	add	r2,r3,r2
  804884:	11800017 	ldw	r6,0(r2)
  804888:	11c00117 	ldw	r7,4(r2)
  80488c:	d8800717 	ldw	r2,28(sp)
  804890:	0009883a 	mov	r4,zero
  804894:	014ff834 	movhi	r5,16352
  804898:	db001615 	stw	r12,88(sp)
  80489c:	15c00044 	addi	r23,r2,1
  8048a0:	080b8d00 	call	80b8d0 <__divdf3>
  8048a4:	800d883a 	mov	r6,r16
  8048a8:	880f883a 	mov	r7,r17
  8048ac:	1009883a 	mov	r4,r2
  8048b0:	180b883a 	mov	r5,r3
  8048b4:	080cd640 	call	80cd64 <__subdf3>
  8048b8:	d9401017 	ldw	r5,64(sp)
  8048bc:	d9000f17 	ldw	r4,60(sp)
  8048c0:	102b883a 	mov	r21,r2
  8048c4:	d8c01215 	stw	r3,72(sp)
  8048c8:	080d6600 	call	80d660 <__fixdfsi>
  8048cc:	1009883a 	mov	r4,r2
  8048d0:	1029883a 	mov	r20,r2
  8048d4:	0800f240 	call	800f24 <__floatsidf>
  8048d8:	d9000f17 	ldw	r4,60(sp)
  8048dc:	d9401017 	ldw	r5,64(sp)
  8048e0:	100d883a 	mov	r6,r2
  8048e4:	180f883a 	mov	r7,r3
  8048e8:	080cd640 	call	80cd64 <__subdf3>
  8048ec:	1823883a 	mov	r17,r3
  8048f0:	d8c00717 	ldw	r3,28(sp)
  8048f4:	d9401217 	ldw	r5,72(sp)
  8048f8:	a2000c04 	addi	r8,r20,48
  8048fc:	1021883a 	mov	r16,r2
  804900:	1a000005 	stb	r8,0(r3)
  804904:	800d883a 	mov	r6,r16
  804908:	880f883a 	mov	r7,r17
  80490c:	a809883a 	mov	r4,r21
  804910:	4029883a 	mov	r20,r8
  804914:	080c3280 	call	80c328 <__gedf2>
  804918:	00841d16 	blt	zero,r2,805990 <_dtoa_r+0x15f4>
  80491c:	800d883a 	mov	r6,r16
  804920:	880f883a 	mov	r7,r17
  804924:	0009883a 	mov	r4,zero
  804928:	014ffc34 	movhi	r5,16368
  80492c:	080cd640 	call	80cd64 <__subdf3>
  804930:	d9401217 	ldw	r5,72(sp)
  804934:	100d883a 	mov	r6,r2
  804938:	180f883a 	mov	r7,r3
  80493c:	a809883a 	mov	r4,r21
  804940:	080c3280 	call	80c328 <__gedf2>
  804944:	db001617 	ldw	r12,88(sp)
  804948:	00840e16 	blt	zero,r2,805984 <_dtoa_r+0x15e8>
  80494c:	00800044 	movi	r2,1
  804950:	13006b0e 	bge	r2,r12,804b00 <_dtoa_r+0x764>
  804954:	d9000717 	ldw	r4,28(sp)
  804958:	dd800f15 	stw	r22,60(sp)
  80495c:	dcc01015 	stw	r19,64(sp)
  804960:	2319883a 	add	r12,r4,r12
  804964:	dcc01217 	ldw	r19,72(sp)
  804968:	602d883a 	mov	r22,r12
  80496c:	dc801215 	stw	r18,72(sp)
  804970:	b825883a 	mov	r18,r23
  804974:	00000906 	br	80499c <_dtoa_r+0x600>
  804978:	080cd640 	call	80cd64 <__subdf3>
  80497c:	a80d883a 	mov	r6,r21
  804980:	980f883a 	mov	r7,r19
  804984:	1009883a 	mov	r4,r2
  804988:	180b883a 	mov	r5,r3
  80498c:	080c4040 	call	80c404 <__ledf2>
  804990:	1003e816 	blt	r2,zero,805934 <_dtoa_r+0x1598>
  804994:	b825883a 	mov	r18,r23
  804998:	bd83e926 	beq	r23,r22,805940 <_dtoa_r+0x15a4>
  80499c:	a809883a 	mov	r4,r21
  8049a0:	980b883a 	mov	r5,r19
  8049a4:	000d883a 	mov	r6,zero
  8049a8:	01d00934 	movhi	r7,16420
  8049ac:	080c4f80 	call	80c4f8 <__muldf3>
  8049b0:	000d883a 	mov	r6,zero
  8049b4:	01d00934 	movhi	r7,16420
  8049b8:	8009883a 	mov	r4,r16
  8049bc:	880b883a 	mov	r5,r17
  8049c0:	102b883a 	mov	r21,r2
  8049c4:	1827883a 	mov	r19,r3
  8049c8:	080c4f80 	call	80c4f8 <__muldf3>
  8049cc:	180b883a 	mov	r5,r3
  8049d0:	1009883a 	mov	r4,r2
  8049d4:	1821883a 	mov	r16,r3
  8049d8:	1023883a 	mov	r17,r2
  8049dc:	080d6600 	call	80d660 <__fixdfsi>
  8049e0:	1009883a 	mov	r4,r2
  8049e4:	1029883a 	mov	r20,r2
  8049e8:	0800f240 	call	800f24 <__floatsidf>
  8049ec:	8809883a 	mov	r4,r17
  8049f0:	800b883a 	mov	r5,r16
  8049f4:	100d883a 	mov	r6,r2
  8049f8:	180f883a 	mov	r7,r3
  8049fc:	080cd640 	call	80cd64 <__subdf3>
  804a00:	a5000c04 	addi	r20,r20,48
  804a04:	a80d883a 	mov	r6,r21
  804a08:	980f883a 	mov	r7,r19
  804a0c:	1009883a 	mov	r4,r2
  804a10:	180b883a 	mov	r5,r3
  804a14:	95000005 	stb	r20,0(r18)
  804a18:	1021883a 	mov	r16,r2
  804a1c:	1823883a 	mov	r17,r3
  804a20:	080c4040 	call	80c404 <__ledf2>
  804a24:	bdc00044 	addi	r23,r23,1
  804a28:	800d883a 	mov	r6,r16
  804a2c:	880f883a 	mov	r7,r17
  804a30:	0009883a 	mov	r4,zero
  804a34:	014ffc34 	movhi	r5,16368
  804a38:	103fcf0e 	bge	r2,zero,804978 <__alt_data_end+0xff804978>
  804a3c:	d8c01317 	ldw	r3,76(sp)
  804a40:	d8c00515 	stw	r3,20(sp)
  804a44:	d9400917 	ldw	r5,36(sp)
  804a48:	e009883a 	mov	r4,fp
  804a4c:	08072f00 	call	8072f0 <_Bfree>
  804a50:	d9000517 	ldw	r4,20(sp)
  804a54:	d9802317 	ldw	r6,140(sp)
  804a58:	d9c02517 	ldw	r7,148(sp)
  804a5c:	b8000005 	stb	zero,0(r23)
  804a60:	20800044 	addi	r2,r4,1
  804a64:	30800015 	stw	r2,0(r6)
  804a68:	3802aa26 	beq	r7,zero,805514 <_dtoa_r+0x1178>
  804a6c:	3dc00015 	stw	r23,0(r7)
  804a70:	d8800717 	ldw	r2,28(sp)
  804a74:	003e7906 	br	80445c <__alt_data_end+0xff80445c>
  804a78:	00800434 	movhi	r2,16
  804a7c:	10bfffc4 	addi	r2,r2,-1
  804a80:	88a2703a 	and	r17,r17,r2
  804a84:	883e851e 	bne	r17,zero,80449c <__alt_data_end+0xff80449c>
  804a88:	00802074 	movhi	r2,129
  804a8c:	1083e504 	addi	r2,r2,3988
  804a90:	003e8406 	br	8044a4 <__alt_data_end+0xff8044a4>
  804a94:	10c00204 	addi	r3,r2,8
  804a98:	003e8706 	br	8044b8 <__alt_data_end+0xff8044b8>
  804a9c:	01400434 	movhi	r5,16
  804aa0:	297fffc4 	addi	r5,r5,-1
  804aa4:	994a703a 	and	r5,r19,r5
  804aa8:	9009883a 	mov	r4,r18
  804aac:	843f0044 	addi	r16,r16,-1023
  804ab0:	294ffc34 	orhi	r5,r5,16368
  804ab4:	dd800217 	ldw	r22,8(sp)
  804ab8:	d8001115 	stw	zero,68(sp)
  804abc:	003ea506 	br	804554 <__alt_data_end+0xff804554>
  804ac0:	00802074 	movhi	r2,129
  804ac4:	1083dc04 	addi	r2,r2,3952
  804ac8:	003e6406 	br	80445c <__alt_data_end+0xff80445c>
  804acc:	e0001115 	stw	zero,68(fp)
  804ad0:	000b883a 	mov	r5,zero
  804ad4:	e009883a 	mov	r4,fp
  804ad8:	08072480 	call	807248 <_Balloc>
  804adc:	01bfffc4 	movi	r6,-1
  804ae0:	01c00044 	movi	r7,1
  804ae4:	d8800715 	stw	r2,28(sp)
  804ae8:	d9800c15 	stw	r6,48(sp)
  804aec:	e0801015 	stw	r2,64(fp)
  804af0:	d8000315 	stw	zero,12(sp)
  804af4:	d9c00b15 	stw	r7,44(sp)
  804af8:	d9800615 	stw	r6,24(sp)
  804afc:	d8002215 	stw	zero,136(sp)
  804b00:	d8800117 	ldw	r2,4(sp)
  804b04:	10008916 	blt	r2,zero,804d2c <_dtoa_r+0x990>
  804b08:	d9000517 	ldw	r4,20(sp)
  804b0c:	00c00384 	movi	r3,14
  804b10:	19008616 	blt	r3,r4,804d2c <_dtoa_r+0x990>
  804b14:	200490fa 	slli	r2,r4,3
  804b18:	00c02074 	movhi	r3,129
  804b1c:	d9802217 	ldw	r6,136(sp)
  804b20:	18c40404 	addi	r3,r3,4112
  804b24:	1885883a 	add	r2,r3,r2
  804b28:	14000017 	ldw	r16,0(r2)
  804b2c:	14400117 	ldw	r17,4(r2)
  804b30:	30016316 	blt	r6,zero,8050c0 <_dtoa_r+0xd24>
  804b34:	800d883a 	mov	r6,r16
  804b38:	880f883a 	mov	r7,r17
  804b3c:	9009883a 	mov	r4,r18
  804b40:	980b883a 	mov	r5,r19
  804b44:	080b8d00 	call	80b8d0 <__divdf3>
  804b48:	180b883a 	mov	r5,r3
  804b4c:	1009883a 	mov	r4,r2
  804b50:	080d6600 	call	80d660 <__fixdfsi>
  804b54:	1009883a 	mov	r4,r2
  804b58:	102b883a 	mov	r21,r2
  804b5c:	0800f240 	call	800f24 <__floatsidf>
  804b60:	800d883a 	mov	r6,r16
  804b64:	880f883a 	mov	r7,r17
  804b68:	1009883a 	mov	r4,r2
  804b6c:	180b883a 	mov	r5,r3
  804b70:	080c4f80 	call	80c4f8 <__muldf3>
  804b74:	100d883a 	mov	r6,r2
  804b78:	180f883a 	mov	r7,r3
  804b7c:	9009883a 	mov	r4,r18
  804b80:	980b883a 	mov	r5,r19
  804b84:	080cd640 	call	80cd64 <__subdf3>
  804b88:	d9c00717 	ldw	r7,28(sp)
  804b8c:	1009883a 	mov	r4,r2
  804b90:	a8800c04 	addi	r2,r21,48
  804b94:	38800005 	stb	r2,0(r7)
  804b98:	3dc00044 	addi	r23,r7,1
  804b9c:	d9c00617 	ldw	r7,24(sp)
  804ba0:	01800044 	movi	r6,1
  804ba4:	180b883a 	mov	r5,r3
  804ba8:	2005883a 	mov	r2,r4
  804bac:	39803826 	beq	r7,r6,804c90 <_dtoa_r+0x8f4>
  804bb0:	000d883a 	mov	r6,zero
  804bb4:	01d00934 	movhi	r7,16420
  804bb8:	080c4f80 	call	80c4f8 <__muldf3>
  804bbc:	000d883a 	mov	r6,zero
  804bc0:	000f883a 	mov	r7,zero
  804bc4:	1009883a 	mov	r4,r2
  804bc8:	180b883a 	mov	r5,r3
  804bcc:	1025883a 	mov	r18,r2
  804bd0:	1827883a 	mov	r19,r3
  804bd4:	080c2a00 	call	80c2a0 <__eqdf2>
  804bd8:	103f9a26 	beq	r2,zero,804a44 <__alt_data_end+0xff804a44>
  804bdc:	d9c00617 	ldw	r7,24(sp)
  804be0:	d8c00717 	ldw	r3,28(sp)
  804be4:	b829883a 	mov	r20,r23
  804be8:	38bfffc4 	addi	r2,r7,-1
  804bec:	18ad883a 	add	r22,r3,r2
  804bf0:	00000a06 	br	804c1c <_dtoa_r+0x880>
  804bf4:	080c4f80 	call	80c4f8 <__muldf3>
  804bf8:	000d883a 	mov	r6,zero
  804bfc:	000f883a 	mov	r7,zero
  804c00:	1009883a 	mov	r4,r2
  804c04:	180b883a 	mov	r5,r3
  804c08:	1025883a 	mov	r18,r2
  804c0c:	1827883a 	mov	r19,r3
  804c10:	b829883a 	mov	r20,r23
  804c14:	080c2a00 	call	80c2a0 <__eqdf2>
  804c18:	103f8a26 	beq	r2,zero,804a44 <__alt_data_end+0xff804a44>
  804c1c:	800d883a 	mov	r6,r16
  804c20:	880f883a 	mov	r7,r17
  804c24:	9009883a 	mov	r4,r18
  804c28:	980b883a 	mov	r5,r19
  804c2c:	080b8d00 	call	80b8d0 <__divdf3>
  804c30:	180b883a 	mov	r5,r3
  804c34:	1009883a 	mov	r4,r2
  804c38:	080d6600 	call	80d660 <__fixdfsi>
  804c3c:	1009883a 	mov	r4,r2
  804c40:	102b883a 	mov	r21,r2
  804c44:	0800f240 	call	800f24 <__floatsidf>
  804c48:	800d883a 	mov	r6,r16
  804c4c:	880f883a 	mov	r7,r17
  804c50:	1009883a 	mov	r4,r2
  804c54:	180b883a 	mov	r5,r3
  804c58:	080c4f80 	call	80c4f8 <__muldf3>
  804c5c:	100d883a 	mov	r6,r2
  804c60:	180f883a 	mov	r7,r3
  804c64:	9009883a 	mov	r4,r18
  804c68:	980b883a 	mov	r5,r19
  804c6c:	080cd640 	call	80cd64 <__subdf3>
  804c70:	aa000c04 	addi	r8,r21,48
  804c74:	a2000005 	stb	r8,0(r20)
  804c78:	000d883a 	mov	r6,zero
  804c7c:	01d00934 	movhi	r7,16420
  804c80:	1009883a 	mov	r4,r2
  804c84:	180b883a 	mov	r5,r3
  804c88:	a5c00044 	addi	r23,r20,1
  804c8c:	b53fd91e 	bne	r22,r20,804bf4 <__alt_data_end+0xff804bf4>
  804c90:	100d883a 	mov	r6,r2
  804c94:	180f883a 	mov	r7,r3
  804c98:	1009883a 	mov	r4,r2
  804c9c:	180b883a 	mov	r5,r3
  804ca0:	08006780 	call	800678 <__adddf3>
  804ca4:	100d883a 	mov	r6,r2
  804ca8:	180f883a 	mov	r7,r3
  804cac:	8009883a 	mov	r4,r16
  804cb0:	880b883a 	mov	r5,r17
  804cb4:	1027883a 	mov	r19,r2
  804cb8:	1825883a 	mov	r18,r3
  804cbc:	080c4040 	call	80c404 <__ledf2>
  804cc0:	10000816 	blt	r2,zero,804ce4 <_dtoa_r+0x948>
  804cc4:	980d883a 	mov	r6,r19
  804cc8:	900f883a 	mov	r7,r18
  804ccc:	8009883a 	mov	r4,r16
  804cd0:	880b883a 	mov	r5,r17
  804cd4:	080c2a00 	call	80c2a0 <__eqdf2>
  804cd8:	103f5a1e 	bne	r2,zero,804a44 <__alt_data_end+0xff804a44>
  804cdc:	ad40004c 	andi	r21,r21,1
  804ce0:	a83f5826 	beq	r21,zero,804a44 <__alt_data_end+0xff804a44>
  804ce4:	bd3fffc3 	ldbu	r20,-1(r23)
  804ce8:	b8bfffc4 	addi	r2,r23,-1
  804cec:	1007883a 	mov	r3,r2
  804cf0:	01400e44 	movi	r5,57
  804cf4:	d9800717 	ldw	r6,28(sp)
  804cf8:	00000506 	br	804d10 <_dtoa_r+0x974>
  804cfc:	18ffffc4 	addi	r3,r3,-1
  804d00:	11824726 	beq	r2,r6,805620 <_dtoa_r+0x1284>
  804d04:	1d000003 	ldbu	r20,0(r3)
  804d08:	102f883a 	mov	r23,r2
  804d0c:	10bfffc4 	addi	r2,r2,-1
  804d10:	a1003fcc 	andi	r4,r20,255
  804d14:	2100201c 	xori	r4,r4,128
  804d18:	213fe004 	addi	r4,r4,-128
  804d1c:	217ff726 	beq	r4,r5,804cfc <__alt_data_end+0xff804cfc>
  804d20:	a2000044 	addi	r8,r20,1
  804d24:	12000005 	stb	r8,0(r2)
  804d28:	003f4606 	br	804a44 <__alt_data_end+0xff804a44>
  804d2c:	d9000b17 	ldw	r4,44(sp)
  804d30:	2000c826 	beq	r4,zero,805054 <_dtoa_r+0xcb8>
  804d34:	d9800317 	ldw	r6,12(sp)
  804d38:	00c00044 	movi	r3,1
  804d3c:	1980f90e 	bge	r3,r6,805124 <_dtoa_r+0xd88>
  804d40:	d8800617 	ldw	r2,24(sp)
  804d44:	d8c00a17 	ldw	r3,40(sp)
  804d48:	157fffc4 	addi	r21,r2,-1
  804d4c:	1d41f316 	blt	r3,r21,80551c <_dtoa_r+0x1180>
  804d50:	1d6bc83a 	sub	r21,r3,r21
  804d54:	d9c00617 	ldw	r7,24(sp)
  804d58:	3802aa16 	blt	r7,zero,805804 <_dtoa_r+0x1468>
  804d5c:	dd000817 	ldw	r20,32(sp)
  804d60:	d8800617 	ldw	r2,24(sp)
  804d64:	d8c00817 	ldw	r3,32(sp)
  804d68:	01400044 	movi	r5,1
  804d6c:	e009883a 	mov	r4,fp
  804d70:	1887883a 	add	r3,r3,r2
  804d74:	d8c00815 	stw	r3,32(sp)
  804d78:	b0ad883a 	add	r22,r22,r2
  804d7c:	080767c0 	call	80767c <__i2b>
  804d80:	1023883a 	mov	r17,r2
  804d84:	a0000826 	beq	r20,zero,804da8 <_dtoa_r+0xa0c>
  804d88:	0580070e 	bge	zero,r22,804da8 <_dtoa_r+0xa0c>
  804d8c:	a005883a 	mov	r2,r20
  804d90:	b500b916 	blt	r22,r20,805078 <_dtoa_r+0xcdc>
  804d94:	d9000817 	ldw	r4,32(sp)
  804d98:	a0a9c83a 	sub	r20,r20,r2
  804d9c:	b0adc83a 	sub	r22,r22,r2
  804da0:	2089c83a 	sub	r4,r4,r2
  804da4:	d9000815 	stw	r4,32(sp)
  804da8:	d9800a17 	ldw	r6,40(sp)
  804dac:	0181810e 	bge	zero,r6,8053b4 <_dtoa_r+0x1018>
  804db0:	d9c00b17 	ldw	r7,44(sp)
  804db4:	3800b326 	beq	r7,zero,805084 <_dtoa_r+0xce8>
  804db8:	a800b226 	beq	r21,zero,805084 <_dtoa_r+0xce8>
  804dbc:	880b883a 	mov	r5,r17
  804dc0:	a80d883a 	mov	r6,r21
  804dc4:	e009883a 	mov	r4,fp
  804dc8:	08079440 	call	807944 <__pow5mult>
  804dcc:	d9800917 	ldw	r6,36(sp)
  804dd0:	100b883a 	mov	r5,r2
  804dd4:	e009883a 	mov	r4,fp
  804dd8:	1023883a 	mov	r17,r2
  804ddc:	08076b80 	call	8076b8 <__multiply>
  804de0:	1021883a 	mov	r16,r2
  804de4:	d8800a17 	ldw	r2,40(sp)
  804de8:	d9400917 	ldw	r5,36(sp)
  804dec:	e009883a 	mov	r4,fp
  804df0:	1545c83a 	sub	r2,r2,r21
  804df4:	d8800a15 	stw	r2,40(sp)
  804df8:	08072f00 	call	8072f0 <_Bfree>
  804dfc:	d8c00a17 	ldw	r3,40(sp)
  804e00:	18009f1e 	bne	r3,zero,805080 <_dtoa_r+0xce4>
  804e04:	05c00044 	movi	r23,1
  804e08:	e009883a 	mov	r4,fp
  804e0c:	b80b883a 	mov	r5,r23
  804e10:	080767c0 	call	80767c <__i2b>
  804e14:	d9000d17 	ldw	r4,52(sp)
  804e18:	102b883a 	mov	r21,r2
  804e1c:	2000ce26 	beq	r4,zero,805158 <_dtoa_r+0xdbc>
  804e20:	200d883a 	mov	r6,r4
  804e24:	100b883a 	mov	r5,r2
  804e28:	e009883a 	mov	r4,fp
  804e2c:	08079440 	call	807944 <__pow5mult>
  804e30:	d9800317 	ldw	r6,12(sp)
  804e34:	102b883a 	mov	r21,r2
  804e38:	b981810e 	bge	r23,r6,805440 <_dtoa_r+0x10a4>
  804e3c:	0027883a 	mov	r19,zero
  804e40:	a8800417 	ldw	r2,16(r21)
  804e44:	05c00804 	movi	r23,32
  804e48:	10800104 	addi	r2,r2,4
  804e4c:	1085883a 	add	r2,r2,r2
  804e50:	1085883a 	add	r2,r2,r2
  804e54:	a885883a 	add	r2,r21,r2
  804e58:	11000017 	ldw	r4,0(r2)
  804e5c:	08075640 	call	807564 <__hi0bits>
  804e60:	b885c83a 	sub	r2,r23,r2
  804e64:	1585883a 	add	r2,r2,r22
  804e68:	108007cc 	andi	r2,r2,31
  804e6c:	1000b326 	beq	r2,zero,80513c <_dtoa_r+0xda0>
  804e70:	00c00804 	movi	r3,32
  804e74:	1887c83a 	sub	r3,r3,r2
  804e78:	01000104 	movi	r4,4
  804e7c:	20c2cd0e 	bge	r4,r3,8059b4 <_dtoa_r+0x1618>
  804e80:	00c00704 	movi	r3,28
  804e84:	1885c83a 	sub	r2,r3,r2
  804e88:	d8c00817 	ldw	r3,32(sp)
  804e8c:	a0a9883a 	add	r20,r20,r2
  804e90:	b0ad883a 	add	r22,r22,r2
  804e94:	1887883a 	add	r3,r3,r2
  804e98:	d8c00815 	stw	r3,32(sp)
  804e9c:	d9800817 	ldw	r6,32(sp)
  804ea0:	0180040e 	bge	zero,r6,804eb4 <_dtoa_r+0xb18>
  804ea4:	800b883a 	mov	r5,r16
  804ea8:	e009883a 	mov	r4,fp
  804eac:	0807a840 	call	807a84 <__lshift>
  804eb0:	1021883a 	mov	r16,r2
  804eb4:	0580050e 	bge	zero,r22,804ecc <_dtoa_r+0xb30>
  804eb8:	a80b883a 	mov	r5,r21
  804ebc:	b00d883a 	mov	r6,r22
  804ec0:	e009883a 	mov	r4,fp
  804ec4:	0807a840 	call	807a84 <__lshift>
  804ec8:	102b883a 	mov	r21,r2
  804ecc:	d9c00e17 	ldw	r7,56(sp)
  804ed0:	3801211e 	bne	r7,zero,805358 <_dtoa_r+0xfbc>
  804ed4:	d9800617 	ldw	r6,24(sp)
  804ed8:	0181380e 	bge	zero,r6,8053bc <_dtoa_r+0x1020>
  804edc:	d8c00b17 	ldw	r3,44(sp)
  804ee0:	1800ab1e 	bne	r3,zero,805190 <_dtoa_r+0xdf4>
  804ee4:	dc800717 	ldw	r18,28(sp)
  804ee8:	dcc00617 	ldw	r19,24(sp)
  804eec:	9029883a 	mov	r20,r18
  804ef0:	00000206 	br	804efc <_dtoa_r+0xb60>
  804ef4:	08073180 	call	807318 <__multadd>
  804ef8:	1021883a 	mov	r16,r2
  804efc:	a80b883a 	mov	r5,r21
  804f00:	8009883a 	mov	r4,r16
  804f04:	08041740 	call	804174 <quorem>
  804f08:	10800c04 	addi	r2,r2,48
  804f0c:	90800005 	stb	r2,0(r18)
  804f10:	94800044 	addi	r18,r18,1
  804f14:	9507c83a 	sub	r3,r18,r20
  804f18:	000f883a 	mov	r7,zero
  804f1c:	01800284 	movi	r6,10
  804f20:	800b883a 	mov	r5,r16
  804f24:	e009883a 	mov	r4,fp
  804f28:	1cfff216 	blt	r3,r19,804ef4 <__alt_data_end+0xff804ef4>
  804f2c:	1011883a 	mov	r8,r2
  804f30:	d8800617 	ldw	r2,24(sp)
  804f34:	0082370e 	bge	zero,r2,805814 <_dtoa_r+0x1478>
  804f38:	d9000717 	ldw	r4,28(sp)
  804f3c:	0025883a 	mov	r18,zero
  804f40:	20af883a 	add	r23,r4,r2
  804f44:	01800044 	movi	r6,1
  804f48:	800b883a 	mov	r5,r16
  804f4c:	e009883a 	mov	r4,fp
  804f50:	da001715 	stw	r8,92(sp)
  804f54:	0807a840 	call	807a84 <__lshift>
  804f58:	a80b883a 	mov	r5,r21
  804f5c:	1009883a 	mov	r4,r2
  804f60:	d8800915 	stw	r2,36(sp)
  804f64:	0807bcc0 	call	807bcc <__mcmp>
  804f68:	da001717 	ldw	r8,92(sp)
  804f6c:	0081800e 	bge	zero,r2,805570 <_dtoa_r+0x11d4>
  804f70:	b93fffc3 	ldbu	r4,-1(r23)
  804f74:	b8bfffc4 	addi	r2,r23,-1
  804f78:	1007883a 	mov	r3,r2
  804f7c:	01800e44 	movi	r6,57
  804f80:	d9c00717 	ldw	r7,28(sp)
  804f84:	00000506 	br	804f9c <_dtoa_r+0xc00>
  804f88:	18ffffc4 	addi	r3,r3,-1
  804f8c:	11c12326 	beq	r2,r7,80541c <_dtoa_r+0x1080>
  804f90:	19000003 	ldbu	r4,0(r3)
  804f94:	102f883a 	mov	r23,r2
  804f98:	10bfffc4 	addi	r2,r2,-1
  804f9c:	21403fcc 	andi	r5,r4,255
  804fa0:	2940201c 	xori	r5,r5,128
  804fa4:	297fe004 	addi	r5,r5,-128
  804fa8:	29bff726 	beq	r5,r6,804f88 <__alt_data_end+0xff804f88>
  804fac:	21000044 	addi	r4,r4,1
  804fb0:	11000005 	stb	r4,0(r2)
  804fb4:	a80b883a 	mov	r5,r21
  804fb8:	e009883a 	mov	r4,fp
  804fbc:	08072f00 	call	8072f0 <_Bfree>
  804fc0:	883ea026 	beq	r17,zero,804a44 <__alt_data_end+0xff804a44>
  804fc4:	90000426 	beq	r18,zero,804fd8 <_dtoa_r+0xc3c>
  804fc8:	94400326 	beq	r18,r17,804fd8 <_dtoa_r+0xc3c>
  804fcc:	900b883a 	mov	r5,r18
  804fd0:	e009883a 	mov	r4,fp
  804fd4:	08072f00 	call	8072f0 <_Bfree>
  804fd8:	880b883a 	mov	r5,r17
  804fdc:	e009883a 	mov	r4,fp
  804fe0:	08072f00 	call	8072f0 <_Bfree>
  804fe4:	003e9706 	br	804a44 <__alt_data_end+0xff804a44>
  804fe8:	01800044 	movi	r6,1
  804fec:	d9800e15 	stw	r6,56(sp)
  804ff0:	003d9606 	br	80464c <__alt_data_end+0xff80464c>
  804ff4:	d8800817 	ldw	r2,32(sp)
  804ff8:	d8c00517 	ldw	r3,20(sp)
  804ffc:	d8000d15 	stw	zero,52(sp)
  805000:	10c5c83a 	sub	r2,r2,r3
  805004:	00c9c83a 	sub	r4,zero,r3
  805008:	d8800815 	stw	r2,32(sp)
  80500c:	d9000a15 	stw	r4,40(sp)
  805010:	003d9706 	br	804670 <__alt_data_end+0xff804670>
  805014:	05adc83a 	sub	r22,zero,r22
  805018:	dd800815 	stw	r22,32(sp)
  80501c:	002d883a 	mov	r22,zero
  805020:	003d8e06 	br	80465c <__alt_data_end+0xff80465c>
  805024:	d9000517 	ldw	r4,20(sp)
  805028:	0800f240 	call	800f24 <__floatsidf>
  80502c:	100d883a 	mov	r6,r2
  805030:	180f883a 	mov	r7,r3
  805034:	a009883a 	mov	r4,r20
  805038:	880b883a 	mov	r5,r17
  80503c:	080c2a00 	call	80c2a0 <__eqdf2>
  805040:	103d7126 	beq	r2,zero,804608 <__alt_data_end+0xff804608>
  805044:	d9c00517 	ldw	r7,20(sp)
  805048:	39ffffc4 	addi	r7,r7,-1
  80504c:	d9c00515 	stw	r7,20(sp)
  805050:	003d6d06 	br	804608 <__alt_data_end+0xff804608>
  805054:	dd400a17 	ldw	r21,40(sp)
  805058:	dd000817 	ldw	r20,32(sp)
  80505c:	0023883a 	mov	r17,zero
  805060:	003f4806 	br	804d84 <__alt_data_end+0xff804d84>
  805064:	10e3c83a 	sub	r17,r2,r3
  805068:	9448983a 	sll	r4,r18,r17
  80506c:	003d3206 	br	804538 <__alt_data_end+0xff804538>
  805070:	d8000e15 	stw	zero,56(sp)
  805074:	003d7506 	br	80464c <__alt_data_end+0xff80464c>
  805078:	b005883a 	mov	r2,r22
  80507c:	003f4506 	br	804d94 <__alt_data_end+0xff804d94>
  805080:	dc000915 	stw	r16,36(sp)
  805084:	d9800a17 	ldw	r6,40(sp)
  805088:	d9400917 	ldw	r5,36(sp)
  80508c:	e009883a 	mov	r4,fp
  805090:	08079440 	call	807944 <__pow5mult>
  805094:	1021883a 	mov	r16,r2
  805098:	003f5a06 	br	804e04 <__alt_data_end+0xff804e04>
  80509c:	01c00044 	movi	r7,1
  8050a0:	d9c00b15 	stw	r7,44(sp)
  8050a4:	d8802217 	ldw	r2,136(sp)
  8050a8:	0081280e 	bge	zero,r2,80554c <_dtoa_r+0x11b0>
  8050ac:	100d883a 	mov	r6,r2
  8050b0:	1021883a 	mov	r16,r2
  8050b4:	d8800c15 	stw	r2,48(sp)
  8050b8:	d8800615 	stw	r2,24(sp)
  8050bc:	003d8806 	br	8046e0 <__alt_data_end+0xff8046e0>
  8050c0:	d8800617 	ldw	r2,24(sp)
  8050c4:	00be9b16 	blt	zero,r2,804b34 <__alt_data_end+0xff804b34>
  8050c8:	10010f1e 	bne	r2,zero,805508 <_dtoa_r+0x116c>
  8050cc:	880b883a 	mov	r5,r17
  8050d0:	000d883a 	mov	r6,zero
  8050d4:	01d00534 	movhi	r7,16404
  8050d8:	8009883a 	mov	r4,r16
  8050dc:	080c4f80 	call	80c4f8 <__muldf3>
  8050e0:	900d883a 	mov	r6,r18
  8050e4:	980f883a 	mov	r7,r19
  8050e8:	1009883a 	mov	r4,r2
  8050ec:	180b883a 	mov	r5,r3
  8050f0:	080c3280 	call	80c328 <__gedf2>
  8050f4:	002b883a 	mov	r21,zero
  8050f8:	0023883a 	mov	r17,zero
  8050fc:	1000bf16 	blt	r2,zero,8053fc <_dtoa_r+0x1060>
  805100:	d9802217 	ldw	r6,136(sp)
  805104:	ddc00717 	ldw	r23,28(sp)
  805108:	018c303a 	nor	r6,zero,r6
  80510c:	d9800515 	stw	r6,20(sp)
  805110:	a80b883a 	mov	r5,r21
  805114:	e009883a 	mov	r4,fp
  805118:	08072f00 	call	8072f0 <_Bfree>
  80511c:	883e4926 	beq	r17,zero,804a44 <__alt_data_end+0xff804a44>
  805120:	003fad06 	br	804fd8 <__alt_data_end+0xff804fd8>
  805124:	d9c01117 	ldw	r7,68(sp)
  805128:	3801bc26 	beq	r7,zero,80581c <_dtoa_r+0x1480>
  80512c:	10810cc4 	addi	r2,r2,1075
  805130:	dd400a17 	ldw	r21,40(sp)
  805134:	dd000817 	ldw	r20,32(sp)
  805138:	003f0a06 	br	804d64 <__alt_data_end+0xff804d64>
  80513c:	00800704 	movi	r2,28
  805140:	d9000817 	ldw	r4,32(sp)
  805144:	a0a9883a 	add	r20,r20,r2
  805148:	b0ad883a 	add	r22,r22,r2
  80514c:	2089883a 	add	r4,r4,r2
  805150:	d9000815 	stw	r4,32(sp)
  805154:	003f5106 	br	804e9c <__alt_data_end+0xff804e9c>
  805158:	d8c00317 	ldw	r3,12(sp)
  80515c:	b8c1fc0e 	bge	r23,r3,805950 <_dtoa_r+0x15b4>
  805160:	0027883a 	mov	r19,zero
  805164:	b805883a 	mov	r2,r23
  805168:	003f3e06 	br	804e64 <__alt_data_end+0xff804e64>
  80516c:	880b883a 	mov	r5,r17
  805170:	e009883a 	mov	r4,fp
  805174:	000f883a 	mov	r7,zero
  805178:	01800284 	movi	r6,10
  80517c:	08073180 	call	807318 <__multadd>
  805180:	d9000c17 	ldw	r4,48(sp)
  805184:	1023883a 	mov	r17,r2
  805188:	0102040e 	bge	zero,r4,80599c <_dtoa_r+0x1600>
  80518c:	d9000615 	stw	r4,24(sp)
  805190:	0500050e 	bge	zero,r20,8051a8 <_dtoa_r+0xe0c>
  805194:	880b883a 	mov	r5,r17
  805198:	a00d883a 	mov	r6,r20
  80519c:	e009883a 	mov	r4,fp
  8051a0:	0807a840 	call	807a84 <__lshift>
  8051a4:	1023883a 	mov	r17,r2
  8051a8:	9801241e 	bne	r19,zero,80563c <_dtoa_r+0x12a0>
  8051ac:	8829883a 	mov	r20,r17
  8051b0:	d9000617 	ldw	r4,24(sp)
  8051b4:	dcc00717 	ldw	r19,28(sp)
  8051b8:	9480004c 	andi	r18,r18,1
  8051bc:	20bfffc4 	addi	r2,r4,-1
  8051c0:	9885883a 	add	r2,r19,r2
  8051c4:	d8800415 	stw	r2,16(sp)
  8051c8:	dc800615 	stw	r18,24(sp)
  8051cc:	a80b883a 	mov	r5,r21
  8051d0:	8009883a 	mov	r4,r16
  8051d4:	08041740 	call	804174 <quorem>
  8051d8:	880b883a 	mov	r5,r17
  8051dc:	8009883a 	mov	r4,r16
  8051e0:	102f883a 	mov	r23,r2
  8051e4:	0807bcc0 	call	807bcc <__mcmp>
  8051e8:	a80b883a 	mov	r5,r21
  8051ec:	a00d883a 	mov	r6,r20
  8051f0:	e009883a 	mov	r4,fp
  8051f4:	102d883a 	mov	r22,r2
  8051f8:	0807c2c0 	call	807c2c <__mdiff>
  8051fc:	1007883a 	mov	r3,r2
  805200:	10800317 	ldw	r2,12(r2)
  805204:	bc800c04 	addi	r18,r23,48
  805208:	180b883a 	mov	r5,r3
  80520c:	10004e1e 	bne	r2,zero,805348 <_dtoa_r+0xfac>
  805210:	8009883a 	mov	r4,r16
  805214:	d8c01615 	stw	r3,88(sp)
  805218:	0807bcc0 	call	807bcc <__mcmp>
  80521c:	d8c01617 	ldw	r3,88(sp)
  805220:	e009883a 	mov	r4,fp
  805224:	d8801615 	stw	r2,88(sp)
  805228:	180b883a 	mov	r5,r3
  80522c:	08072f00 	call	8072f0 <_Bfree>
  805230:	d8801617 	ldw	r2,88(sp)
  805234:	1000041e 	bne	r2,zero,805248 <_dtoa_r+0xeac>
  805238:	d9800317 	ldw	r6,12(sp)
  80523c:	3000021e 	bne	r6,zero,805248 <_dtoa_r+0xeac>
  805240:	d8c00617 	ldw	r3,24(sp)
  805244:	18003726 	beq	r3,zero,805324 <_dtoa_r+0xf88>
  805248:	b0002016 	blt	r22,zero,8052cc <_dtoa_r+0xf30>
  80524c:	b000041e 	bne	r22,zero,805260 <_dtoa_r+0xec4>
  805250:	d9000317 	ldw	r4,12(sp)
  805254:	2000021e 	bne	r4,zero,805260 <_dtoa_r+0xec4>
  805258:	d8c00617 	ldw	r3,24(sp)
  80525c:	18001b26 	beq	r3,zero,8052cc <_dtoa_r+0xf30>
  805260:	00810716 	blt	zero,r2,805680 <_dtoa_r+0x12e4>
  805264:	d8c00417 	ldw	r3,16(sp)
  805268:	9d800044 	addi	r22,r19,1
  80526c:	9c800005 	stb	r18,0(r19)
  805270:	b02f883a 	mov	r23,r22
  805274:	98c10626 	beq	r19,r3,805690 <_dtoa_r+0x12f4>
  805278:	800b883a 	mov	r5,r16
  80527c:	000f883a 	mov	r7,zero
  805280:	01800284 	movi	r6,10
  805284:	e009883a 	mov	r4,fp
  805288:	08073180 	call	807318 <__multadd>
  80528c:	1021883a 	mov	r16,r2
  805290:	000f883a 	mov	r7,zero
  805294:	01800284 	movi	r6,10
  805298:	880b883a 	mov	r5,r17
  80529c:	e009883a 	mov	r4,fp
  8052a0:	8d002526 	beq	r17,r20,805338 <_dtoa_r+0xf9c>
  8052a4:	08073180 	call	807318 <__multadd>
  8052a8:	a00b883a 	mov	r5,r20
  8052ac:	000f883a 	mov	r7,zero
  8052b0:	01800284 	movi	r6,10
  8052b4:	e009883a 	mov	r4,fp
  8052b8:	1023883a 	mov	r17,r2
  8052bc:	08073180 	call	807318 <__multadd>
  8052c0:	1029883a 	mov	r20,r2
  8052c4:	b027883a 	mov	r19,r22
  8052c8:	003fc006 	br	8051cc <__alt_data_end+0xff8051cc>
  8052cc:	9011883a 	mov	r8,r18
  8052d0:	00800e0e 	bge	zero,r2,80530c <_dtoa_r+0xf70>
  8052d4:	800b883a 	mov	r5,r16
  8052d8:	01800044 	movi	r6,1
  8052dc:	e009883a 	mov	r4,fp
  8052e0:	da001715 	stw	r8,92(sp)
  8052e4:	0807a840 	call	807a84 <__lshift>
  8052e8:	a80b883a 	mov	r5,r21
  8052ec:	1009883a 	mov	r4,r2
  8052f0:	1021883a 	mov	r16,r2
  8052f4:	0807bcc0 	call	807bcc <__mcmp>
  8052f8:	da001717 	ldw	r8,92(sp)
  8052fc:	0081960e 	bge	zero,r2,805958 <_dtoa_r+0x15bc>
  805300:	00800e44 	movi	r2,57
  805304:	40817026 	beq	r8,r2,8058c8 <_dtoa_r+0x152c>
  805308:	ba000c44 	addi	r8,r23,49
  80530c:	8825883a 	mov	r18,r17
  805310:	9dc00044 	addi	r23,r19,1
  805314:	9a000005 	stb	r8,0(r19)
  805318:	a023883a 	mov	r17,r20
  80531c:	dc000915 	stw	r16,36(sp)
  805320:	003f2406 	br	804fb4 <__alt_data_end+0xff804fb4>
  805324:	00800e44 	movi	r2,57
  805328:	9011883a 	mov	r8,r18
  80532c:	90816626 	beq	r18,r2,8058c8 <_dtoa_r+0x152c>
  805330:	05bff516 	blt	zero,r22,805308 <__alt_data_end+0xff805308>
  805334:	003ff506 	br	80530c <__alt_data_end+0xff80530c>
  805338:	08073180 	call	807318 <__multadd>
  80533c:	1023883a 	mov	r17,r2
  805340:	1029883a 	mov	r20,r2
  805344:	003fdf06 	br	8052c4 <__alt_data_end+0xff8052c4>
  805348:	e009883a 	mov	r4,fp
  80534c:	08072f00 	call	8072f0 <_Bfree>
  805350:	00800044 	movi	r2,1
  805354:	003fbc06 	br	805248 <__alt_data_end+0xff805248>
  805358:	a80b883a 	mov	r5,r21
  80535c:	8009883a 	mov	r4,r16
  805360:	0807bcc0 	call	807bcc <__mcmp>
  805364:	103edb0e 	bge	r2,zero,804ed4 <__alt_data_end+0xff804ed4>
  805368:	800b883a 	mov	r5,r16
  80536c:	000f883a 	mov	r7,zero
  805370:	01800284 	movi	r6,10
  805374:	e009883a 	mov	r4,fp
  805378:	08073180 	call	807318 <__multadd>
  80537c:	1021883a 	mov	r16,r2
  805380:	d8800517 	ldw	r2,20(sp)
  805384:	d8c00b17 	ldw	r3,44(sp)
  805388:	10bfffc4 	addi	r2,r2,-1
  80538c:	d8800515 	stw	r2,20(sp)
  805390:	183f761e 	bne	r3,zero,80516c <__alt_data_end+0xff80516c>
  805394:	d9000c17 	ldw	r4,48(sp)
  805398:	0101730e 	bge	zero,r4,805968 <_dtoa_r+0x15cc>
  80539c:	d9000615 	stw	r4,24(sp)
  8053a0:	003ed006 	br	804ee4 <__alt_data_end+0xff804ee4>
  8053a4:	00800084 	movi	r2,2
  8053a8:	3081861e 	bne	r6,r2,8059c4 <_dtoa_r+0x1628>
  8053ac:	d8000b15 	stw	zero,44(sp)
  8053b0:	003f3c06 	br	8050a4 <__alt_data_end+0xff8050a4>
  8053b4:	dc000917 	ldw	r16,36(sp)
  8053b8:	003e9206 	br	804e04 <__alt_data_end+0xff804e04>
  8053bc:	d9c00317 	ldw	r7,12(sp)
  8053c0:	00800084 	movi	r2,2
  8053c4:	11fec50e 	bge	r2,r7,804edc <__alt_data_end+0xff804edc>
  8053c8:	d9000617 	ldw	r4,24(sp)
  8053cc:	20013c1e 	bne	r4,zero,8058c0 <_dtoa_r+0x1524>
  8053d0:	a80b883a 	mov	r5,r21
  8053d4:	000f883a 	mov	r7,zero
  8053d8:	01800144 	movi	r6,5
  8053dc:	e009883a 	mov	r4,fp
  8053e0:	08073180 	call	807318 <__multadd>
  8053e4:	100b883a 	mov	r5,r2
  8053e8:	8009883a 	mov	r4,r16
  8053ec:	102b883a 	mov	r21,r2
  8053f0:	0807bcc0 	call	807bcc <__mcmp>
  8053f4:	dc000915 	stw	r16,36(sp)
  8053f8:	00bf410e 	bge	zero,r2,805100 <__alt_data_end+0xff805100>
  8053fc:	d9c00717 	ldw	r7,28(sp)
  805400:	00800c44 	movi	r2,49
  805404:	38800005 	stb	r2,0(r7)
  805408:	d8800517 	ldw	r2,20(sp)
  80540c:	3dc00044 	addi	r23,r7,1
  805410:	10800044 	addi	r2,r2,1
  805414:	d8800515 	stw	r2,20(sp)
  805418:	003f3d06 	br	805110 <__alt_data_end+0xff805110>
  80541c:	d9800517 	ldw	r6,20(sp)
  805420:	d9c00717 	ldw	r7,28(sp)
  805424:	00800c44 	movi	r2,49
  805428:	31800044 	addi	r6,r6,1
  80542c:	d9800515 	stw	r6,20(sp)
  805430:	38800005 	stb	r2,0(r7)
  805434:	003edf06 	br	804fb4 <__alt_data_end+0xff804fb4>
  805438:	d8000b15 	stw	zero,44(sp)
  80543c:	003c9f06 	br	8046bc <__alt_data_end+0xff8046bc>
  805440:	903e7e1e 	bne	r18,zero,804e3c <__alt_data_end+0xff804e3c>
  805444:	00800434 	movhi	r2,16
  805448:	10bfffc4 	addi	r2,r2,-1
  80544c:	9884703a 	and	r2,r19,r2
  805450:	1000ea1e 	bne	r2,zero,8057fc <_dtoa_r+0x1460>
  805454:	9cdffc2c 	andhi	r19,r19,32752
  805458:	9800e826 	beq	r19,zero,8057fc <_dtoa_r+0x1460>
  80545c:	d9c00817 	ldw	r7,32(sp)
  805460:	b5800044 	addi	r22,r22,1
  805464:	04c00044 	movi	r19,1
  805468:	39c00044 	addi	r7,r7,1
  80546c:	d9c00815 	stw	r7,32(sp)
  805470:	d8800d17 	ldw	r2,52(sp)
  805474:	103e721e 	bne	r2,zero,804e40 <__alt_data_end+0xff804e40>
  805478:	00800044 	movi	r2,1
  80547c:	003e7906 	br	804e64 <__alt_data_end+0xff804e64>
  805480:	8009883a 	mov	r4,r16
  805484:	0800f240 	call	800f24 <__floatsidf>
  805488:	d9800f17 	ldw	r6,60(sp)
  80548c:	d9c01017 	ldw	r7,64(sp)
  805490:	1009883a 	mov	r4,r2
  805494:	180b883a 	mov	r5,r3
  805498:	080c4f80 	call	80c4f8 <__muldf3>
  80549c:	000d883a 	mov	r6,zero
  8054a0:	01d00734 	movhi	r7,16412
  8054a4:	1009883a 	mov	r4,r2
  8054a8:	180b883a 	mov	r5,r3
  8054ac:	08006780 	call	800678 <__adddf3>
  8054b0:	047f3034 	movhi	r17,64704
  8054b4:	1021883a 	mov	r16,r2
  8054b8:	1c63883a 	add	r17,r3,r17
  8054bc:	d9000f17 	ldw	r4,60(sp)
  8054c0:	d9401017 	ldw	r5,64(sp)
  8054c4:	000d883a 	mov	r6,zero
  8054c8:	01d00534 	movhi	r7,16404
  8054cc:	080cd640 	call	80cd64 <__subdf3>
  8054d0:	800d883a 	mov	r6,r16
  8054d4:	880f883a 	mov	r7,r17
  8054d8:	1009883a 	mov	r4,r2
  8054dc:	180b883a 	mov	r5,r3
  8054e0:	102b883a 	mov	r21,r2
  8054e4:	1829883a 	mov	r20,r3
  8054e8:	080c3280 	call	80c328 <__gedf2>
  8054ec:	00806c16 	blt	zero,r2,8056a0 <_dtoa_r+0x1304>
  8054f0:	89e0003c 	xorhi	r7,r17,32768
  8054f4:	800d883a 	mov	r6,r16
  8054f8:	a809883a 	mov	r4,r21
  8054fc:	a00b883a 	mov	r5,r20
  805500:	080c4040 	call	80c404 <__ledf2>
  805504:	103d7e0e 	bge	r2,zero,804b00 <__alt_data_end+0xff804b00>
  805508:	002b883a 	mov	r21,zero
  80550c:	0023883a 	mov	r17,zero
  805510:	003efb06 	br	805100 <__alt_data_end+0xff805100>
  805514:	d8800717 	ldw	r2,28(sp)
  805518:	003bd006 	br	80445c <__alt_data_end+0xff80445c>
  80551c:	d9000a17 	ldw	r4,40(sp)
  805520:	d9800d17 	ldw	r6,52(sp)
  805524:	dd400a15 	stw	r21,40(sp)
  805528:	a905c83a 	sub	r2,r21,r4
  80552c:	308d883a 	add	r6,r6,r2
  805530:	d9800d15 	stw	r6,52(sp)
  805534:	002b883a 	mov	r21,zero
  805538:	003e0606 	br	804d54 <__alt_data_end+0xff804d54>
  80553c:	9023883a 	mov	r17,r18
  805540:	9829883a 	mov	r20,r19
  805544:	04000084 	movi	r16,2
  805548:	003c9206 	br	804794 <__alt_data_end+0xff804794>
  80554c:	04000044 	movi	r16,1
  805550:	dc000c15 	stw	r16,48(sp)
  805554:	dc000615 	stw	r16,24(sp)
  805558:	dc002215 	stw	r16,136(sp)
  80555c:	e0001115 	stw	zero,68(fp)
  805560:	000b883a 	mov	r5,zero
  805564:	003c6906 	br	80470c <__alt_data_end+0xff80470c>
  805568:	3021883a 	mov	r16,r6
  80556c:	003ffb06 	br	80555c <__alt_data_end+0xff80555c>
  805570:	1000021e 	bne	r2,zero,80557c <_dtoa_r+0x11e0>
  805574:	4200004c 	andi	r8,r8,1
  805578:	403e7d1e 	bne	r8,zero,804f70 <__alt_data_end+0xff804f70>
  80557c:	01000c04 	movi	r4,48
  805580:	00000106 	br	805588 <_dtoa_r+0x11ec>
  805584:	102f883a 	mov	r23,r2
  805588:	b8bfffc4 	addi	r2,r23,-1
  80558c:	10c00007 	ldb	r3,0(r2)
  805590:	193ffc26 	beq	r3,r4,805584 <__alt_data_end+0xff805584>
  805594:	003e8706 	br	804fb4 <__alt_data_end+0xff804fb4>
  805598:	d8800517 	ldw	r2,20(sp)
  80559c:	00a3c83a 	sub	r17,zero,r2
  8055a0:	8800a426 	beq	r17,zero,805834 <_dtoa_r+0x1498>
  8055a4:	888003cc 	andi	r2,r17,15
  8055a8:	100490fa 	slli	r2,r2,3
  8055ac:	00c02074 	movhi	r3,129
  8055b0:	18c40404 	addi	r3,r3,4112
  8055b4:	1885883a 	add	r2,r3,r2
  8055b8:	11800017 	ldw	r6,0(r2)
  8055bc:	11c00117 	ldw	r7,4(r2)
  8055c0:	9009883a 	mov	r4,r18
  8055c4:	980b883a 	mov	r5,r19
  8055c8:	8823d13a 	srai	r17,r17,4
  8055cc:	080c4f80 	call	80c4f8 <__muldf3>
  8055d0:	d8800f15 	stw	r2,60(sp)
  8055d4:	d8c01015 	stw	r3,64(sp)
  8055d8:	8800e826 	beq	r17,zero,80597c <_dtoa_r+0x15e0>
  8055dc:	05002074 	movhi	r20,129
  8055e0:	a503fa04 	addi	r20,r20,4072
  8055e4:	04000084 	movi	r16,2
  8055e8:	8980004c 	andi	r6,r17,1
  8055ec:	1009883a 	mov	r4,r2
  8055f0:	8823d07a 	srai	r17,r17,1
  8055f4:	180b883a 	mov	r5,r3
  8055f8:	30000426 	beq	r6,zero,80560c <_dtoa_r+0x1270>
  8055fc:	a1800017 	ldw	r6,0(r20)
  805600:	a1c00117 	ldw	r7,4(r20)
  805604:	84000044 	addi	r16,r16,1
  805608:	080c4f80 	call	80c4f8 <__muldf3>
  80560c:	a5000204 	addi	r20,r20,8
  805610:	883ff51e 	bne	r17,zero,8055e8 <__alt_data_end+0xff8055e8>
  805614:	d8800f15 	stw	r2,60(sp)
  805618:	d8c01015 	stw	r3,64(sp)
  80561c:	003c7606 	br	8047f8 <__alt_data_end+0xff8047f8>
  805620:	00c00c04 	movi	r3,48
  805624:	10c00005 	stb	r3,0(r2)
  805628:	d8c00517 	ldw	r3,20(sp)
  80562c:	bd3fffc3 	ldbu	r20,-1(r23)
  805630:	18c00044 	addi	r3,r3,1
  805634:	d8c00515 	stw	r3,20(sp)
  805638:	003db906 	br	804d20 <__alt_data_end+0xff804d20>
  80563c:	89400117 	ldw	r5,4(r17)
  805640:	e009883a 	mov	r4,fp
  805644:	08072480 	call	807248 <_Balloc>
  805648:	89800417 	ldw	r6,16(r17)
  80564c:	89400304 	addi	r5,r17,12
  805650:	11000304 	addi	r4,r2,12
  805654:	31800084 	addi	r6,r6,2
  805658:	318d883a 	add	r6,r6,r6
  80565c:	318d883a 	add	r6,r6,r6
  805660:	1027883a 	mov	r19,r2
  805664:	0806e7c0 	call	806e7c <memcpy>
  805668:	01800044 	movi	r6,1
  80566c:	980b883a 	mov	r5,r19
  805670:	e009883a 	mov	r4,fp
  805674:	0807a840 	call	807a84 <__lshift>
  805678:	1029883a 	mov	r20,r2
  80567c:	003ecc06 	br	8051b0 <__alt_data_end+0xff8051b0>
  805680:	00800e44 	movi	r2,57
  805684:	90809026 	beq	r18,r2,8058c8 <_dtoa_r+0x152c>
  805688:	92000044 	addi	r8,r18,1
  80568c:	003f1f06 	br	80530c <__alt_data_end+0xff80530c>
  805690:	9011883a 	mov	r8,r18
  805694:	8825883a 	mov	r18,r17
  805698:	a023883a 	mov	r17,r20
  80569c:	003e2906 	br	804f44 <__alt_data_end+0xff804f44>
  8056a0:	002b883a 	mov	r21,zero
  8056a4:	0023883a 	mov	r17,zero
  8056a8:	003f5406 	br	8053fc <__alt_data_end+0xff8053fc>
  8056ac:	61bfffc4 	addi	r6,r12,-1
  8056b0:	300490fa 	slli	r2,r6,3
  8056b4:	00c02074 	movhi	r3,129
  8056b8:	18c40404 	addi	r3,r3,4112
  8056bc:	1885883a 	add	r2,r3,r2
  8056c0:	11000017 	ldw	r4,0(r2)
  8056c4:	11400117 	ldw	r5,4(r2)
  8056c8:	d8800717 	ldw	r2,28(sp)
  8056cc:	880f883a 	mov	r7,r17
  8056d0:	d9801215 	stw	r6,72(sp)
  8056d4:	800d883a 	mov	r6,r16
  8056d8:	db001615 	stw	r12,88(sp)
  8056dc:	15c00044 	addi	r23,r2,1
  8056e0:	080c4f80 	call	80c4f8 <__muldf3>
  8056e4:	d9401017 	ldw	r5,64(sp)
  8056e8:	d9000f17 	ldw	r4,60(sp)
  8056ec:	d8c01515 	stw	r3,84(sp)
  8056f0:	d8801415 	stw	r2,80(sp)
  8056f4:	080d6600 	call	80d660 <__fixdfsi>
  8056f8:	1009883a 	mov	r4,r2
  8056fc:	1021883a 	mov	r16,r2
  805700:	0800f240 	call	800f24 <__floatsidf>
  805704:	d9000f17 	ldw	r4,60(sp)
  805708:	d9401017 	ldw	r5,64(sp)
  80570c:	100d883a 	mov	r6,r2
  805710:	180f883a 	mov	r7,r3
  805714:	080cd640 	call	80cd64 <__subdf3>
  805718:	1829883a 	mov	r20,r3
  80571c:	d8c00717 	ldw	r3,28(sp)
  805720:	84000c04 	addi	r16,r16,48
  805724:	1023883a 	mov	r17,r2
  805728:	1c000005 	stb	r16,0(r3)
  80572c:	db001617 	ldw	r12,88(sp)
  805730:	00800044 	movi	r2,1
  805734:	60802226 	beq	r12,r2,8057c0 <_dtoa_r+0x1424>
  805738:	d9c00717 	ldw	r7,28(sp)
  80573c:	8805883a 	mov	r2,r17
  805740:	b82b883a 	mov	r21,r23
  805744:	3b19883a 	add	r12,r7,r12
  805748:	6023883a 	mov	r17,r12
  80574c:	a007883a 	mov	r3,r20
  805750:	dc800f15 	stw	r18,60(sp)
  805754:	000d883a 	mov	r6,zero
  805758:	01d00934 	movhi	r7,16420
  80575c:	1009883a 	mov	r4,r2
  805760:	180b883a 	mov	r5,r3
  805764:	080c4f80 	call	80c4f8 <__muldf3>
  805768:	180b883a 	mov	r5,r3
  80576c:	1009883a 	mov	r4,r2
  805770:	1829883a 	mov	r20,r3
  805774:	1025883a 	mov	r18,r2
  805778:	080d6600 	call	80d660 <__fixdfsi>
  80577c:	1009883a 	mov	r4,r2
  805780:	1021883a 	mov	r16,r2
  805784:	0800f240 	call	800f24 <__floatsidf>
  805788:	100d883a 	mov	r6,r2
  80578c:	180f883a 	mov	r7,r3
  805790:	9009883a 	mov	r4,r18
  805794:	a00b883a 	mov	r5,r20
  805798:	84000c04 	addi	r16,r16,48
  80579c:	080cd640 	call	80cd64 <__subdf3>
  8057a0:	ad400044 	addi	r21,r21,1
  8057a4:	ac3fffc5 	stb	r16,-1(r21)
  8057a8:	ac7fea1e 	bne	r21,r17,805754 <__alt_data_end+0xff805754>
  8057ac:	1023883a 	mov	r17,r2
  8057b0:	d8801217 	ldw	r2,72(sp)
  8057b4:	dc800f17 	ldw	r18,60(sp)
  8057b8:	1829883a 	mov	r20,r3
  8057bc:	b8af883a 	add	r23,r23,r2
  8057c0:	d9001417 	ldw	r4,80(sp)
  8057c4:	d9401517 	ldw	r5,84(sp)
  8057c8:	000d883a 	mov	r6,zero
  8057cc:	01cff834 	movhi	r7,16352
  8057d0:	08006780 	call	800678 <__adddf3>
  8057d4:	880d883a 	mov	r6,r17
  8057d8:	a00f883a 	mov	r7,r20
  8057dc:	1009883a 	mov	r4,r2
  8057e0:	180b883a 	mov	r5,r3
  8057e4:	080c4040 	call	80c404 <__ledf2>
  8057e8:	10003e0e 	bge	r2,zero,8058e4 <_dtoa_r+0x1548>
  8057ec:	d9001317 	ldw	r4,76(sp)
  8057f0:	bd3fffc3 	ldbu	r20,-1(r23)
  8057f4:	d9000515 	stw	r4,20(sp)
  8057f8:	003d3b06 	br	804ce8 <__alt_data_end+0xff804ce8>
  8057fc:	0027883a 	mov	r19,zero
  805800:	003f1b06 	br	805470 <__alt_data_end+0xff805470>
  805804:	d8800817 	ldw	r2,32(sp)
  805808:	11e9c83a 	sub	r20,r2,r7
  80580c:	0005883a 	mov	r2,zero
  805810:	003d5406 	br	804d64 <__alt_data_end+0xff804d64>
  805814:	00800044 	movi	r2,1
  805818:	003dc706 	br	804f38 <__alt_data_end+0xff804f38>
  80581c:	d8c00217 	ldw	r3,8(sp)
  805820:	00800d84 	movi	r2,54
  805824:	dd400a17 	ldw	r21,40(sp)
  805828:	10c5c83a 	sub	r2,r2,r3
  80582c:	dd000817 	ldw	r20,32(sp)
  805830:	003d4c06 	br	804d64 <__alt_data_end+0xff804d64>
  805834:	dc800f15 	stw	r18,60(sp)
  805838:	dcc01015 	stw	r19,64(sp)
  80583c:	04000084 	movi	r16,2
  805840:	003bed06 	br	8047f8 <__alt_data_end+0xff8047f8>
  805844:	d9000617 	ldw	r4,24(sp)
  805848:	203f0d26 	beq	r4,zero,805480 <__alt_data_end+0xff805480>
  80584c:	d9800c17 	ldw	r6,48(sp)
  805850:	01bcab0e 	bge	zero,r6,804b00 <__alt_data_end+0xff804b00>
  805854:	d9401017 	ldw	r5,64(sp)
  805858:	d9000f17 	ldw	r4,60(sp)
  80585c:	000d883a 	mov	r6,zero
  805860:	01d00934 	movhi	r7,16420
  805864:	080c4f80 	call	80c4f8 <__muldf3>
  805868:	81000044 	addi	r4,r16,1
  80586c:	d8800f15 	stw	r2,60(sp)
  805870:	d8c01015 	stw	r3,64(sp)
  805874:	0800f240 	call	800f24 <__floatsidf>
  805878:	d9800f17 	ldw	r6,60(sp)
  80587c:	d9c01017 	ldw	r7,64(sp)
  805880:	1009883a 	mov	r4,r2
  805884:	180b883a 	mov	r5,r3
  805888:	080c4f80 	call	80c4f8 <__muldf3>
  80588c:	01d00734 	movhi	r7,16412
  805890:	000d883a 	mov	r6,zero
  805894:	1009883a 	mov	r4,r2
  805898:	180b883a 	mov	r5,r3
  80589c:	08006780 	call	800678 <__adddf3>
  8058a0:	d9c00517 	ldw	r7,20(sp)
  8058a4:	047f3034 	movhi	r17,64704
  8058a8:	1021883a 	mov	r16,r2
  8058ac:	39ffffc4 	addi	r7,r7,-1
  8058b0:	d9c01315 	stw	r7,76(sp)
  8058b4:	1c63883a 	add	r17,r3,r17
  8058b8:	db000c17 	ldw	r12,48(sp)
  8058bc:	003bea06 	br	804868 <__alt_data_end+0xff804868>
  8058c0:	dc000915 	stw	r16,36(sp)
  8058c4:	003e0e06 	br	805100 <__alt_data_end+0xff805100>
  8058c8:	01000e44 	movi	r4,57
  8058cc:	8825883a 	mov	r18,r17
  8058d0:	9dc00044 	addi	r23,r19,1
  8058d4:	99000005 	stb	r4,0(r19)
  8058d8:	a023883a 	mov	r17,r20
  8058dc:	dc000915 	stw	r16,36(sp)
  8058e0:	003da406 	br	804f74 <__alt_data_end+0xff804f74>
  8058e4:	d9801417 	ldw	r6,80(sp)
  8058e8:	d9c01517 	ldw	r7,84(sp)
  8058ec:	0009883a 	mov	r4,zero
  8058f0:	014ff834 	movhi	r5,16352
  8058f4:	080cd640 	call	80cd64 <__subdf3>
  8058f8:	880d883a 	mov	r6,r17
  8058fc:	a00f883a 	mov	r7,r20
  805900:	1009883a 	mov	r4,r2
  805904:	180b883a 	mov	r5,r3
  805908:	080c3280 	call	80c328 <__gedf2>
  80590c:	00bc7c0e 	bge	zero,r2,804b00 <__alt_data_end+0xff804b00>
  805910:	01000c04 	movi	r4,48
  805914:	00000106 	br	80591c <_dtoa_r+0x1580>
  805918:	102f883a 	mov	r23,r2
  80591c:	b8bfffc4 	addi	r2,r23,-1
  805920:	10c00007 	ldb	r3,0(r2)
  805924:	193ffc26 	beq	r3,r4,805918 <__alt_data_end+0xff805918>
  805928:	d9801317 	ldw	r6,76(sp)
  80592c:	d9800515 	stw	r6,20(sp)
  805930:	003c4406 	br	804a44 <__alt_data_end+0xff804a44>
  805934:	d9801317 	ldw	r6,76(sp)
  805938:	d9800515 	stw	r6,20(sp)
  80593c:	003cea06 	br	804ce8 <__alt_data_end+0xff804ce8>
  805940:	dd800f17 	ldw	r22,60(sp)
  805944:	dcc01017 	ldw	r19,64(sp)
  805948:	dc801217 	ldw	r18,72(sp)
  80594c:	003c6c06 	br	804b00 <__alt_data_end+0xff804b00>
  805950:	903e031e 	bne	r18,zero,805160 <__alt_data_end+0xff805160>
  805954:	003ebb06 	br	805444 <__alt_data_end+0xff805444>
  805958:	103e6c1e 	bne	r2,zero,80530c <__alt_data_end+0xff80530c>
  80595c:	4080004c 	andi	r2,r8,1
  805960:	103e6a26 	beq	r2,zero,80530c <__alt_data_end+0xff80530c>
  805964:	003e6606 	br	805300 <__alt_data_end+0xff805300>
  805968:	d8c00317 	ldw	r3,12(sp)
  80596c:	00800084 	movi	r2,2
  805970:	10c02916 	blt	r2,r3,805a18 <_dtoa_r+0x167c>
  805974:	d9000c17 	ldw	r4,48(sp)
  805978:	003e8806 	br	80539c <__alt_data_end+0xff80539c>
  80597c:	04000084 	movi	r16,2
  805980:	003b9d06 	br	8047f8 <__alt_data_end+0xff8047f8>
  805984:	d9001317 	ldw	r4,76(sp)
  805988:	d9000515 	stw	r4,20(sp)
  80598c:	003cd606 	br	804ce8 <__alt_data_end+0xff804ce8>
  805990:	d8801317 	ldw	r2,76(sp)
  805994:	d8800515 	stw	r2,20(sp)
  805998:	003c2a06 	br	804a44 <__alt_data_end+0xff804a44>
  80599c:	d9800317 	ldw	r6,12(sp)
  8059a0:	00800084 	movi	r2,2
  8059a4:	11801516 	blt	r2,r6,8059fc <_dtoa_r+0x1660>
  8059a8:	d9c00c17 	ldw	r7,48(sp)
  8059ac:	d9c00615 	stw	r7,24(sp)
  8059b0:	003df706 	br	805190 <__alt_data_end+0xff805190>
  8059b4:	193d3926 	beq	r3,r4,804e9c <__alt_data_end+0xff804e9c>
  8059b8:	00c00f04 	movi	r3,60
  8059bc:	1885c83a 	sub	r2,r3,r2
  8059c0:	003ddf06 	br	805140 <__alt_data_end+0xff805140>
  8059c4:	e009883a 	mov	r4,fp
  8059c8:	e0001115 	stw	zero,68(fp)
  8059cc:	000b883a 	mov	r5,zero
  8059d0:	08072480 	call	807248 <_Balloc>
  8059d4:	d8800715 	stw	r2,28(sp)
  8059d8:	d8c00717 	ldw	r3,28(sp)
  8059dc:	00bfffc4 	movi	r2,-1
  8059e0:	01000044 	movi	r4,1
  8059e4:	d8800c15 	stw	r2,48(sp)
  8059e8:	e0c01015 	stw	r3,64(fp)
  8059ec:	d9000b15 	stw	r4,44(sp)
  8059f0:	d8800615 	stw	r2,24(sp)
  8059f4:	d8002215 	stw	zero,136(sp)
  8059f8:	003c4106 	br	804b00 <__alt_data_end+0xff804b00>
  8059fc:	d8c00c17 	ldw	r3,48(sp)
  805a00:	d8c00615 	stw	r3,24(sp)
  805a04:	003e7006 	br	8053c8 <__alt_data_end+0xff8053c8>
  805a08:	04400044 	movi	r17,1
  805a0c:	003b2006 	br	804690 <__alt_data_end+0xff804690>
  805a10:	000b883a 	mov	r5,zero
  805a14:	003b3d06 	br	80470c <__alt_data_end+0xff80470c>
  805a18:	d8800c17 	ldw	r2,48(sp)
  805a1c:	d8800615 	stw	r2,24(sp)
  805a20:	003e6906 	br	8053c8 <__alt_data_end+0xff8053c8>

00805a24 <__sflush_r>:
  805a24:	2880030b 	ldhu	r2,12(r5)
  805a28:	defffb04 	addi	sp,sp,-20
  805a2c:	dcc00315 	stw	r19,12(sp)
  805a30:	dc400115 	stw	r17,4(sp)
  805a34:	dfc00415 	stw	ra,16(sp)
  805a38:	dc800215 	stw	r18,8(sp)
  805a3c:	dc000015 	stw	r16,0(sp)
  805a40:	10c0020c 	andi	r3,r2,8
  805a44:	2823883a 	mov	r17,r5
  805a48:	2027883a 	mov	r19,r4
  805a4c:	1800311e 	bne	r3,zero,805b14 <__sflush_r+0xf0>
  805a50:	28c00117 	ldw	r3,4(r5)
  805a54:	10820014 	ori	r2,r2,2048
  805a58:	2880030d 	sth	r2,12(r5)
  805a5c:	00c04b0e 	bge	zero,r3,805b8c <__sflush_r+0x168>
  805a60:	8a000a17 	ldw	r8,40(r17)
  805a64:	40002326 	beq	r8,zero,805af4 <__sflush_r+0xd0>
  805a68:	9c000017 	ldw	r16,0(r19)
  805a6c:	10c4000c 	andi	r3,r2,4096
  805a70:	98000015 	stw	zero,0(r19)
  805a74:	18004826 	beq	r3,zero,805b98 <__sflush_r+0x174>
  805a78:	89801417 	ldw	r6,80(r17)
  805a7c:	10c0010c 	andi	r3,r2,4
  805a80:	18000626 	beq	r3,zero,805a9c <__sflush_r+0x78>
  805a84:	88c00117 	ldw	r3,4(r17)
  805a88:	88800c17 	ldw	r2,48(r17)
  805a8c:	30cdc83a 	sub	r6,r6,r3
  805a90:	10000226 	beq	r2,zero,805a9c <__sflush_r+0x78>
  805a94:	88800f17 	ldw	r2,60(r17)
  805a98:	308dc83a 	sub	r6,r6,r2
  805a9c:	89400717 	ldw	r5,28(r17)
  805aa0:	000f883a 	mov	r7,zero
  805aa4:	9809883a 	mov	r4,r19
  805aa8:	403ee83a 	callr	r8
  805aac:	00ffffc4 	movi	r3,-1
  805ab0:	10c04426 	beq	r2,r3,805bc4 <__sflush_r+0x1a0>
  805ab4:	88c0030b 	ldhu	r3,12(r17)
  805ab8:	89000417 	ldw	r4,16(r17)
  805abc:	88000115 	stw	zero,4(r17)
  805ac0:	197dffcc 	andi	r5,r3,63487
  805ac4:	8940030d 	sth	r5,12(r17)
  805ac8:	89000015 	stw	r4,0(r17)
  805acc:	18c4000c 	andi	r3,r3,4096
  805ad0:	18002c1e 	bne	r3,zero,805b84 <__sflush_r+0x160>
  805ad4:	89400c17 	ldw	r5,48(r17)
  805ad8:	9c000015 	stw	r16,0(r19)
  805adc:	28000526 	beq	r5,zero,805af4 <__sflush_r+0xd0>
  805ae0:	88801004 	addi	r2,r17,64
  805ae4:	28800226 	beq	r5,r2,805af0 <__sflush_r+0xcc>
  805ae8:	9809883a 	mov	r4,r19
  805aec:	08061a00 	call	8061a0 <_free_r>
  805af0:	88000c15 	stw	zero,48(r17)
  805af4:	0005883a 	mov	r2,zero
  805af8:	dfc00417 	ldw	ra,16(sp)
  805afc:	dcc00317 	ldw	r19,12(sp)
  805b00:	dc800217 	ldw	r18,8(sp)
  805b04:	dc400117 	ldw	r17,4(sp)
  805b08:	dc000017 	ldw	r16,0(sp)
  805b0c:	dec00504 	addi	sp,sp,20
  805b10:	f800283a 	ret
  805b14:	2c800417 	ldw	r18,16(r5)
  805b18:	903ff626 	beq	r18,zero,805af4 <__alt_data_end+0xff805af4>
  805b1c:	2c000017 	ldw	r16,0(r5)
  805b20:	108000cc 	andi	r2,r2,3
  805b24:	2c800015 	stw	r18,0(r5)
  805b28:	84a1c83a 	sub	r16,r16,r18
  805b2c:	1000131e 	bne	r2,zero,805b7c <__sflush_r+0x158>
  805b30:	28800517 	ldw	r2,20(r5)
  805b34:	88800215 	stw	r2,8(r17)
  805b38:	04000316 	blt	zero,r16,805b48 <__sflush_r+0x124>
  805b3c:	003fed06 	br	805af4 <__alt_data_end+0xff805af4>
  805b40:	90a5883a 	add	r18,r18,r2
  805b44:	043feb0e 	bge	zero,r16,805af4 <__alt_data_end+0xff805af4>
  805b48:	88800917 	ldw	r2,36(r17)
  805b4c:	89400717 	ldw	r5,28(r17)
  805b50:	800f883a 	mov	r7,r16
  805b54:	900d883a 	mov	r6,r18
  805b58:	9809883a 	mov	r4,r19
  805b5c:	103ee83a 	callr	r2
  805b60:	80a1c83a 	sub	r16,r16,r2
  805b64:	00bff616 	blt	zero,r2,805b40 <__alt_data_end+0xff805b40>
  805b68:	88c0030b 	ldhu	r3,12(r17)
  805b6c:	00bfffc4 	movi	r2,-1
  805b70:	18c01014 	ori	r3,r3,64
  805b74:	88c0030d 	sth	r3,12(r17)
  805b78:	003fdf06 	br	805af8 <__alt_data_end+0xff805af8>
  805b7c:	0005883a 	mov	r2,zero
  805b80:	003fec06 	br	805b34 <__alt_data_end+0xff805b34>
  805b84:	88801415 	stw	r2,80(r17)
  805b88:	003fd206 	br	805ad4 <__alt_data_end+0xff805ad4>
  805b8c:	28c00f17 	ldw	r3,60(r5)
  805b90:	00ffb316 	blt	zero,r3,805a60 <__alt_data_end+0xff805a60>
  805b94:	003fd706 	br	805af4 <__alt_data_end+0xff805af4>
  805b98:	89400717 	ldw	r5,28(r17)
  805b9c:	000d883a 	mov	r6,zero
  805ba0:	01c00044 	movi	r7,1
  805ba4:	9809883a 	mov	r4,r19
  805ba8:	403ee83a 	callr	r8
  805bac:	100d883a 	mov	r6,r2
  805bb0:	00bfffc4 	movi	r2,-1
  805bb4:	30801426 	beq	r6,r2,805c08 <__sflush_r+0x1e4>
  805bb8:	8880030b 	ldhu	r2,12(r17)
  805bbc:	8a000a17 	ldw	r8,40(r17)
  805bc0:	003fae06 	br	805a7c <__alt_data_end+0xff805a7c>
  805bc4:	98c00017 	ldw	r3,0(r19)
  805bc8:	183fba26 	beq	r3,zero,805ab4 <__alt_data_end+0xff805ab4>
  805bcc:	01000744 	movi	r4,29
  805bd0:	19000626 	beq	r3,r4,805bec <__sflush_r+0x1c8>
  805bd4:	01000584 	movi	r4,22
  805bd8:	19000426 	beq	r3,r4,805bec <__sflush_r+0x1c8>
  805bdc:	88c0030b 	ldhu	r3,12(r17)
  805be0:	18c01014 	ori	r3,r3,64
  805be4:	88c0030d 	sth	r3,12(r17)
  805be8:	003fc306 	br	805af8 <__alt_data_end+0xff805af8>
  805bec:	8880030b 	ldhu	r2,12(r17)
  805bf0:	88c00417 	ldw	r3,16(r17)
  805bf4:	88000115 	stw	zero,4(r17)
  805bf8:	10bdffcc 	andi	r2,r2,63487
  805bfc:	8880030d 	sth	r2,12(r17)
  805c00:	88c00015 	stw	r3,0(r17)
  805c04:	003fb306 	br	805ad4 <__alt_data_end+0xff805ad4>
  805c08:	98800017 	ldw	r2,0(r19)
  805c0c:	103fea26 	beq	r2,zero,805bb8 <__alt_data_end+0xff805bb8>
  805c10:	00c00744 	movi	r3,29
  805c14:	10c00226 	beq	r2,r3,805c20 <__sflush_r+0x1fc>
  805c18:	00c00584 	movi	r3,22
  805c1c:	10c0031e 	bne	r2,r3,805c2c <__sflush_r+0x208>
  805c20:	9c000015 	stw	r16,0(r19)
  805c24:	0005883a 	mov	r2,zero
  805c28:	003fb306 	br	805af8 <__alt_data_end+0xff805af8>
  805c2c:	88c0030b 	ldhu	r3,12(r17)
  805c30:	3005883a 	mov	r2,r6
  805c34:	18c01014 	ori	r3,r3,64
  805c38:	88c0030d 	sth	r3,12(r17)
  805c3c:	003fae06 	br	805af8 <__alt_data_end+0xff805af8>

00805c40 <_fflush_r>:
  805c40:	defffd04 	addi	sp,sp,-12
  805c44:	dc000115 	stw	r16,4(sp)
  805c48:	dfc00215 	stw	ra,8(sp)
  805c4c:	2021883a 	mov	r16,r4
  805c50:	20000226 	beq	r4,zero,805c5c <_fflush_r+0x1c>
  805c54:	20800e17 	ldw	r2,56(r4)
  805c58:	10000c26 	beq	r2,zero,805c8c <_fflush_r+0x4c>
  805c5c:	2880030f 	ldh	r2,12(r5)
  805c60:	1000051e 	bne	r2,zero,805c78 <_fflush_r+0x38>
  805c64:	0005883a 	mov	r2,zero
  805c68:	dfc00217 	ldw	ra,8(sp)
  805c6c:	dc000117 	ldw	r16,4(sp)
  805c70:	dec00304 	addi	sp,sp,12
  805c74:	f800283a 	ret
  805c78:	8009883a 	mov	r4,r16
  805c7c:	dfc00217 	ldw	ra,8(sp)
  805c80:	dc000117 	ldw	r16,4(sp)
  805c84:	dec00304 	addi	sp,sp,12
  805c88:	0805a241 	jmpi	805a24 <__sflush_r>
  805c8c:	d9400015 	stw	r5,0(sp)
  805c90:	080602c0 	call	80602c <__sinit>
  805c94:	d9400017 	ldw	r5,0(sp)
  805c98:	003ff006 	br	805c5c <__alt_data_end+0xff805c5c>

00805c9c <fflush>:
  805c9c:	20000526 	beq	r4,zero,805cb4 <fflush+0x18>
  805ca0:	00802074 	movhi	r2,129
  805ca4:	108b3104 	addi	r2,r2,11460
  805ca8:	200b883a 	mov	r5,r4
  805cac:	11000017 	ldw	r4,0(r2)
  805cb0:	0805c401 	jmpi	805c40 <_fflush_r>
  805cb4:	00802074 	movhi	r2,129
  805cb8:	108b3004 	addi	r2,r2,11456
  805cbc:	11000017 	ldw	r4,0(r2)
  805cc0:	01402034 	movhi	r5,128
  805cc4:	29571004 	addi	r5,r5,23616
  805cc8:	0806a3c1 	jmpi	806a3c <_fwalk_reent>

00805ccc <__fp_unlock>:
  805ccc:	0005883a 	mov	r2,zero
  805cd0:	f800283a 	ret

00805cd4 <_cleanup_r>:
  805cd4:	01402074 	movhi	r5,129
  805cd8:	2968de04 	addi	r5,r5,-23688
  805cdc:	0806a3c1 	jmpi	806a3c <_fwalk_reent>

00805ce0 <__sinit.part.1>:
  805ce0:	defff704 	addi	sp,sp,-36
  805ce4:	00c02034 	movhi	r3,128
  805ce8:	dfc00815 	stw	ra,32(sp)
  805cec:	ddc00715 	stw	r23,28(sp)
  805cf0:	dd800615 	stw	r22,24(sp)
  805cf4:	dd400515 	stw	r21,20(sp)
  805cf8:	dd000415 	stw	r20,16(sp)
  805cfc:	dcc00315 	stw	r19,12(sp)
  805d00:	dc800215 	stw	r18,8(sp)
  805d04:	dc400115 	stw	r17,4(sp)
  805d08:	dc000015 	stw	r16,0(sp)
  805d0c:	18d73504 	addi	r3,r3,23764
  805d10:	24000117 	ldw	r16,4(r4)
  805d14:	20c00f15 	stw	r3,60(r4)
  805d18:	2080bb04 	addi	r2,r4,748
  805d1c:	00c000c4 	movi	r3,3
  805d20:	20c0b915 	stw	r3,740(r4)
  805d24:	2080ba15 	stw	r2,744(r4)
  805d28:	2000b815 	stw	zero,736(r4)
  805d2c:	05c00204 	movi	r23,8
  805d30:	00800104 	movi	r2,4
  805d34:	2025883a 	mov	r18,r4
  805d38:	b80d883a 	mov	r6,r23
  805d3c:	81001704 	addi	r4,r16,92
  805d40:	000b883a 	mov	r5,zero
  805d44:	80000015 	stw	zero,0(r16)
  805d48:	80000115 	stw	zero,4(r16)
  805d4c:	80000215 	stw	zero,8(r16)
  805d50:	8080030d 	sth	r2,12(r16)
  805d54:	80001915 	stw	zero,100(r16)
  805d58:	8000038d 	sth	zero,14(r16)
  805d5c:	80000415 	stw	zero,16(r16)
  805d60:	80000515 	stw	zero,20(r16)
  805d64:	80000615 	stw	zero,24(r16)
  805d68:	08071200 	call	807120 <memset>
  805d6c:	05802074 	movhi	r22,129
  805d70:	94400217 	ldw	r17,8(r18)
  805d74:	05402074 	movhi	r21,129
  805d78:	05002074 	movhi	r20,129
  805d7c:	04c02074 	movhi	r19,129
  805d80:	b5a23604 	addi	r22,r22,-30504
  805d84:	ad624d04 	addi	r21,r21,-30412
  805d88:	a5226c04 	addi	r20,r20,-30288
  805d8c:	9ce28304 	addi	r19,r19,-30196
  805d90:	85800815 	stw	r22,32(r16)
  805d94:	85400915 	stw	r21,36(r16)
  805d98:	85000a15 	stw	r20,40(r16)
  805d9c:	84c00b15 	stw	r19,44(r16)
  805da0:	84000715 	stw	r16,28(r16)
  805da4:	00800284 	movi	r2,10
  805da8:	8880030d 	sth	r2,12(r17)
  805dac:	00800044 	movi	r2,1
  805db0:	b80d883a 	mov	r6,r23
  805db4:	89001704 	addi	r4,r17,92
  805db8:	000b883a 	mov	r5,zero
  805dbc:	88000015 	stw	zero,0(r17)
  805dc0:	88000115 	stw	zero,4(r17)
  805dc4:	88000215 	stw	zero,8(r17)
  805dc8:	88001915 	stw	zero,100(r17)
  805dcc:	8880038d 	sth	r2,14(r17)
  805dd0:	88000415 	stw	zero,16(r17)
  805dd4:	88000515 	stw	zero,20(r17)
  805dd8:	88000615 	stw	zero,24(r17)
  805ddc:	08071200 	call	807120 <memset>
  805de0:	94000317 	ldw	r16,12(r18)
  805de4:	00800484 	movi	r2,18
  805de8:	8c400715 	stw	r17,28(r17)
  805dec:	8d800815 	stw	r22,32(r17)
  805df0:	8d400915 	stw	r21,36(r17)
  805df4:	8d000a15 	stw	r20,40(r17)
  805df8:	8cc00b15 	stw	r19,44(r17)
  805dfc:	8080030d 	sth	r2,12(r16)
  805e00:	00800084 	movi	r2,2
  805e04:	80000015 	stw	zero,0(r16)
  805e08:	80000115 	stw	zero,4(r16)
  805e0c:	80000215 	stw	zero,8(r16)
  805e10:	80001915 	stw	zero,100(r16)
  805e14:	8080038d 	sth	r2,14(r16)
  805e18:	80000415 	stw	zero,16(r16)
  805e1c:	80000515 	stw	zero,20(r16)
  805e20:	80000615 	stw	zero,24(r16)
  805e24:	b80d883a 	mov	r6,r23
  805e28:	000b883a 	mov	r5,zero
  805e2c:	81001704 	addi	r4,r16,92
  805e30:	08071200 	call	807120 <memset>
  805e34:	00800044 	movi	r2,1
  805e38:	84000715 	stw	r16,28(r16)
  805e3c:	85800815 	stw	r22,32(r16)
  805e40:	85400915 	stw	r21,36(r16)
  805e44:	85000a15 	stw	r20,40(r16)
  805e48:	84c00b15 	stw	r19,44(r16)
  805e4c:	90800e15 	stw	r2,56(r18)
  805e50:	dfc00817 	ldw	ra,32(sp)
  805e54:	ddc00717 	ldw	r23,28(sp)
  805e58:	dd800617 	ldw	r22,24(sp)
  805e5c:	dd400517 	ldw	r21,20(sp)
  805e60:	dd000417 	ldw	r20,16(sp)
  805e64:	dcc00317 	ldw	r19,12(sp)
  805e68:	dc800217 	ldw	r18,8(sp)
  805e6c:	dc400117 	ldw	r17,4(sp)
  805e70:	dc000017 	ldw	r16,0(sp)
  805e74:	dec00904 	addi	sp,sp,36
  805e78:	f800283a 	ret

00805e7c <__fp_lock>:
  805e7c:	0005883a 	mov	r2,zero
  805e80:	f800283a 	ret

00805e84 <__sfmoreglue>:
  805e84:	defffc04 	addi	sp,sp,-16
  805e88:	dc800215 	stw	r18,8(sp)
  805e8c:	2825883a 	mov	r18,r5
  805e90:	dc000015 	stw	r16,0(sp)
  805e94:	01401a04 	movi	r5,104
  805e98:	2021883a 	mov	r16,r4
  805e9c:	913fffc4 	addi	r4,r18,-1
  805ea0:	dfc00315 	stw	ra,12(sp)
  805ea4:	dc400115 	stw	r17,4(sp)
  805ea8:	080b8a80 	call	80b8a8 <__mulsi3>
  805eac:	8009883a 	mov	r4,r16
  805eb0:	11401d04 	addi	r5,r2,116
  805eb4:	1023883a 	mov	r17,r2
  805eb8:	08012340 	call	801234 <_malloc_r>
  805ebc:	1021883a 	mov	r16,r2
  805ec0:	10000726 	beq	r2,zero,805ee0 <__sfmoreglue+0x5c>
  805ec4:	11000304 	addi	r4,r2,12
  805ec8:	10000015 	stw	zero,0(r2)
  805ecc:	14800115 	stw	r18,4(r2)
  805ed0:	11000215 	stw	r4,8(r2)
  805ed4:	89801a04 	addi	r6,r17,104
  805ed8:	000b883a 	mov	r5,zero
  805edc:	08071200 	call	807120 <memset>
  805ee0:	8005883a 	mov	r2,r16
  805ee4:	dfc00317 	ldw	ra,12(sp)
  805ee8:	dc800217 	ldw	r18,8(sp)
  805eec:	dc400117 	ldw	r17,4(sp)
  805ef0:	dc000017 	ldw	r16,0(sp)
  805ef4:	dec00404 	addi	sp,sp,16
  805ef8:	f800283a 	ret

00805efc <__sfp>:
  805efc:	defffb04 	addi	sp,sp,-20
  805f00:	dc000015 	stw	r16,0(sp)
  805f04:	04002074 	movhi	r16,129
  805f08:	840b3004 	addi	r16,r16,11456
  805f0c:	dcc00315 	stw	r19,12(sp)
  805f10:	2027883a 	mov	r19,r4
  805f14:	81000017 	ldw	r4,0(r16)
  805f18:	dfc00415 	stw	ra,16(sp)
  805f1c:	dc800215 	stw	r18,8(sp)
  805f20:	20800e17 	ldw	r2,56(r4)
  805f24:	dc400115 	stw	r17,4(sp)
  805f28:	1000021e 	bne	r2,zero,805f34 <__sfp+0x38>
  805f2c:	0805ce00 	call	805ce0 <__sinit.part.1>
  805f30:	81000017 	ldw	r4,0(r16)
  805f34:	2480b804 	addi	r18,r4,736
  805f38:	047fffc4 	movi	r17,-1
  805f3c:	91000117 	ldw	r4,4(r18)
  805f40:	94000217 	ldw	r16,8(r18)
  805f44:	213fffc4 	addi	r4,r4,-1
  805f48:	20000a16 	blt	r4,zero,805f74 <__sfp+0x78>
  805f4c:	8080030f 	ldh	r2,12(r16)
  805f50:	10000c26 	beq	r2,zero,805f84 <__sfp+0x88>
  805f54:	80c01d04 	addi	r3,r16,116
  805f58:	00000206 	br	805f64 <__sfp+0x68>
  805f5c:	18bfe60f 	ldh	r2,-104(r3)
  805f60:	10000826 	beq	r2,zero,805f84 <__sfp+0x88>
  805f64:	213fffc4 	addi	r4,r4,-1
  805f68:	1c3ffd04 	addi	r16,r3,-12
  805f6c:	18c01a04 	addi	r3,r3,104
  805f70:	247ffa1e 	bne	r4,r17,805f5c <__alt_data_end+0xff805f5c>
  805f74:	90800017 	ldw	r2,0(r18)
  805f78:	10001d26 	beq	r2,zero,805ff0 <__sfp+0xf4>
  805f7c:	1025883a 	mov	r18,r2
  805f80:	003fee06 	br	805f3c <__alt_data_end+0xff805f3c>
  805f84:	00bfffc4 	movi	r2,-1
  805f88:	8080038d 	sth	r2,14(r16)
  805f8c:	00800044 	movi	r2,1
  805f90:	8080030d 	sth	r2,12(r16)
  805f94:	80001915 	stw	zero,100(r16)
  805f98:	80000015 	stw	zero,0(r16)
  805f9c:	80000215 	stw	zero,8(r16)
  805fa0:	80000115 	stw	zero,4(r16)
  805fa4:	80000415 	stw	zero,16(r16)
  805fa8:	80000515 	stw	zero,20(r16)
  805fac:	80000615 	stw	zero,24(r16)
  805fb0:	01800204 	movi	r6,8
  805fb4:	000b883a 	mov	r5,zero
  805fb8:	81001704 	addi	r4,r16,92
  805fbc:	08071200 	call	807120 <memset>
  805fc0:	8005883a 	mov	r2,r16
  805fc4:	80000c15 	stw	zero,48(r16)
  805fc8:	80000d15 	stw	zero,52(r16)
  805fcc:	80001115 	stw	zero,68(r16)
  805fd0:	80001215 	stw	zero,72(r16)
  805fd4:	dfc00417 	ldw	ra,16(sp)
  805fd8:	dcc00317 	ldw	r19,12(sp)
  805fdc:	dc800217 	ldw	r18,8(sp)
  805fe0:	dc400117 	ldw	r17,4(sp)
  805fe4:	dc000017 	ldw	r16,0(sp)
  805fe8:	dec00504 	addi	sp,sp,20
  805fec:	f800283a 	ret
  805ff0:	01400104 	movi	r5,4
  805ff4:	9809883a 	mov	r4,r19
  805ff8:	0805e840 	call	805e84 <__sfmoreglue>
  805ffc:	90800015 	stw	r2,0(r18)
  806000:	103fde1e 	bne	r2,zero,805f7c <__alt_data_end+0xff805f7c>
  806004:	00800304 	movi	r2,12
  806008:	98800015 	stw	r2,0(r19)
  80600c:	0005883a 	mov	r2,zero
  806010:	003ff006 	br	805fd4 <__alt_data_end+0xff805fd4>

00806014 <_cleanup>:
  806014:	00802074 	movhi	r2,129
  806018:	108b3004 	addi	r2,r2,11456
  80601c:	11000017 	ldw	r4,0(r2)
  806020:	01402074 	movhi	r5,129
  806024:	2968de04 	addi	r5,r5,-23688
  806028:	0806a3c1 	jmpi	806a3c <_fwalk_reent>

0080602c <__sinit>:
  80602c:	20800e17 	ldw	r2,56(r4)
  806030:	10000126 	beq	r2,zero,806038 <__sinit+0xc>
  806034:	f800283a 	ret
  806038:	0805ce01 	jmpi	805ce0 <__sinit.part.1>

0080603c <__sfp_lock_acquire>:
  80603c:	f800283a 	ret

00806040 <__sfp_lock_release>:
  806040:	f800283a 	ret

00806044 <__sinit_lock_acquire>:
  806044:	f800283a 	ret

00806048 <__sinit_lock_release>:
  806048:	f800283a 	ret

0080604c <__fp_lock_all>:
  80604c:	00802074 	movhi	r2,129
  806050:	108b3104 	addi	r2,r2,11460
  806054:	11000017 	ldw	r4,0(r2)
  806058:	01402034 	movhi	r5,128
  80605c:	29579f04 	addi	r5,r5,24188
  806060:	08069781 	jmpi	806978 <_fwalk>

00806064 <__fp_unlock_all>:
  806064:	00802074 	movhi	r2,129
  806068:	108b3104 	addi	r2,r2,11460
  80606c:	11000017 	ldw	r4,0(r2)
  806070:	01402034 	movhi	r5,128
  806074:	29573304 	addi	r5,r5,23756
  806078:	08069781 	jmpi	806978 <_fwalk>

0080607c <_malloc_trim_r>:
  80607c:	defffb04 	addi	sp,sp,-20
  806080:	dcc00315 	stw	r19,12(sp)
  806084:	04c02074 	movhi	r19,129
  806088:	dc800215 	stw	r18,8(sp)
  80608c:	dc400115 	stw	r17,4(sp)
  806090:	dc000015 	stw	r16,0(sp)
  806094:	dfc00415 	stw	ra,16(sp)
  806098:	2821883a 	mov	r16,r5
  80609c:	9cc44c04 	addi	r19,r19,4400
  8060a0:	2025883a 	mov	r18,r4
  8060a4:	080de440 	call	80de44 <__malloc_lock>
  8060a8:	98800217 	ldw	r2,8(r19)
  8060ac:	14400117 	ldw	r17,4(r2)
  8060b0:	00bfff04 	movi	r2,-4
  8060b4:	88a2703a 	and	r17,r17,r2
  8060b8:	8c21c83a 	sub	r16,r17,r16
  8060bc:	8403fbc4 	addi	r16,r16,4079
  8060c0:	8020d33a 	srli	r16,r16,12
  8060c4:	0083ffc4 	movi	r2,4095
  8060c8:	843fffc4 	addi	r16,r16,-1
  8060cc:	8020933a 	slli	r16,r16,12
  8060d0:	1400060e 	bge	r2,r16,8060ec <_malloc_trim_r+0x70>
  8060d4:	000b883a 	mov	r5,zero
  8060d8:	9009883a 	mov	r4,r18
  8060dc:	0801b800 	call	801b80 <_sbrk_r>
  8060e0:	98c00217 	ldw	r3,8(r19)
  8060e4:	1c47883a 	add	r3,r3,r17
  8060e8:	10c00a26 	beq	r2,r3,806114 <_malloc_trim_r+0x98>
  8060ec:	9009883a 	mov	r4,r18
  8060f0:	080de680 	call	80de68 <__malloc_unlock>
  8060f4:	0005883a 	mov	r2,zero
  8060f8:	dfc00417 	ldw	ra,16(sp)
  8060fc:	dcc00317 	ldw	r19,12(sp)
  806100:	dc800217 	ldw	r18,8(sp)
  806104:	dc400117 	ldw	r17,4(sp)
  806108:	dc000017 	ldw	r16,0(sp)
  80610c:	dec00504 	addi	sp,sp,20
  806110:	f800283a 	ret
  806114:	040bc83a 	sub	r5,zero,r16
  806118:	9009883a 	mov	r4,r18
  80611c:	0801b800 	call	801b80 <_sbrk_r>
  806120:	00ffffc4 	movi	r3,-1
  806124:	10c00d26 	beq	r2,r3,80615c <_malloc_trim_r+0xe0>
  806128:	00c02074 	movhi	r3,129
  80612c:	18d24604 	addi	r3,r3,18712
  806130:	18800017 	ldw	r2,0(r3)
  806134:	99000217 	ldw	r4,8(r19)
  806138:	8c23c83a 	sub	r17,r17,r16
  80613c:	8c400054 	ori	r17,r17,1
  806140:	1421c83a 	sub	r16,r2,r16
  806144:	24400115 	stw	r17,4(r4)
  806148:	9009883a 	mov	r4,r18
  80614c:	1c000015 	stw	r16,0(r3)
  806150:	080de680 	call	80de68 <__malloc_unlock>
  806154:	00800044 	movi	r2,1
  806158:	003fe706 	br	8060f8 <__alt_data_end+0xff8060f8>
  80615c:	000b883a 	mov	r5,zero
  806160:	9009883a 	mov	r4,r18
  806164:	0801b800 	call	801b80 <_sbrk_r>
  806168:	99000217 	ldw	r4,8(r19)
  80616c:	014003c4 	movi	r5,15
  806170:	1107c83a 	sub	r3,r2,r4
  806174:	28ffdd0e 	bge	r5,r3,8060ec <__alt_data_end+0xff8060ec>
  806178:	01402074 	movhi	r5,129
  80617c:	294b2e04 	addi	r5,r5,11448
  806180:	29400017 	ldw	r5,0(r5)
  806184:	18c00054 	ori	r3,r3,1
  806188:	20c00115 	stw	r3,4(r4)
  80618c:	00c02074 	movhi	r3,129
  806190:	1145c83a 	sub	r2,r2,r5
  806194:	18d24604 	addi	r3,r3,18712
  806198:	18800015 	stw	r2,0(r3)
  80619c:	003fd306 	br	8060ec <__alt_data_end+0xff8060ec>

008061a0 <_free_r>:
  8061a0:	28004126 	beq	r5,zero,8062a8 <_free_r+0x108>
  8061a4:	defffd04 	addi	sp,sp,-12
  8061a8:	dc400115 	stw	r17,4(sp)
  8061ac:	dc000015 	stw	r16,0(sp)
  8061b0:	2023883a 	mov	r17,r4
  8061b4:	2821883a 	mov	r16,r5
  8061b8:	dfc00215 	stw	ra,8(sp)
  8061bc:	080de440 	call	80de44 <__malloc_lock>
  8061c0:	81ffff17 	ldw	r7,-4(r16)
  8061c4:	00bfff84 	movi	r2,-2
  8061c8:	01002074 	movhi	r4,129
  8061cc:	81bffe04 	addi	r6,r16,-8
  8061d0:	3884703a 	and	r2,r7,r2
  8061d4:	21044c04 	addi	r4,r4,4400
  8061d8:	308b883a 	add	r5,r6,r2
  8061dc:	2a400117 	ldw	r9,4(r5)
  8061e0:	22000217 	ldw	r8,8(r4)
  8061e4:	00ffff04 	movi	r3,-4
  8061e8:	48c6703a 	and	r3,r9,r3
  8061ec:	2a005726 	beq	r5,r8,80634c <_free_r+0x1ac>
  8061f0:	28c00115 	stw	r3,4(r5)
  8061f4:	39c0004c 	andi	r7,r7,1
  8061f8:	3800091e 	bne	r7,zero,806220 <_free_r+0x80>
  8061fc:	823ffe17 	ldw	r8,-8(r16)
  806200:	22400204 	addi	r9,r4,8
  806204:	320dc83a 	sub	r6,r6,r8
  806208:	31c00217 	ldw	r7,8(r6)
  80620c:	1205883a 	add	r2,r2,r8
  806210:	3a406526 	beq	r7,r9,8063a8 <_free_r+0x208>
  806214:	32000317 	ldw	r8,12(r6)
  806218:	3a000315 	stw	r8,12(r7)
  80621c:	41c00215 	stw	r7,8(r8)
  806220:	28cf883a 	add	r7,r5,r3
  806224:	39c00117 	ldw	r7,4(r7)
  806228:	39c0004c 	andi	r7,r7,1
  80622c:	38003a26 	beq	r7,zero,806318 <_free_r+0x178>
  806230:	10c00054 	ori	r3,r2,1
  806234:	30c00115 	stw	r3,4(r6)
  806238:	3087883a 	add	r3,r6,r2
  80623c:	18800015 	stw	r2,0(r3)
  806240:	00c07fc4 	movi	r3,511
  806244:	18801936 	bltu	r3,r2,8062ac <_free_r+0x10c>
  806248:	1004d0fa 	srli	r2,r2,3
  80624c:	01c00044 	movi	r7,1
  806250:	21400117 	ldw	r5,4(r4)
  806254:	10c00044 	addi	r3,r2,1
  806258:	18c7883a 	add	r3,r3,r3
  80625c:	1005d0ba 	srai	r2,r2,2
  806260:	18c7883a 	add	r3,r3,r3
  806264:	18c7883a 	add	r3,r3,r3
  806268:	1907883a 	add	r3,r3,r4
  80626c:	3884983a 	sll	r2,r7,r2
  806270:	19c00017 	ldw	r7,0(r3)
  806274:	1a3ffe04 	addi	r8,r3,-8
  806278:	1144b03a 	or	r2,r2,r5
  80627c:	32000315 	stw	r8,12(r6)
  806280:	31c00215 	stw	r7,8(r6)
  806284:	20800115 	stw	r2,4(r4)
  806288:	19800015 	stw	r6,0(r3)
  80628c:	39800315 	stw	r6,12(r7)
  806290:	8809883a 	mov	r4,r17
  806294:	dfc00217 	ldw	ra,8(sp)
  806298:	dc400117 	ldw	r17,4(sp)
  80629c:	dc000017 	ldw	r16,0(sp)
  8062a0:	dec00304 	addi	sp,sp,12
  8062a4:	080de681 	jmpi	80de68 <__malloc_unlock>
  8062a8:	f800283a 	ret
  8062ac:	100ad27a 	srli	r5,r2,9
  8062b0:	00c00104 	movi	r3,4
  8062b4:	19404a36 	bltu	r3,r5,8063e0 <_free_r+0x240>
  8062b8:	100ad1ba 	srli	r5,r2,6
  8062bc:	28c00e44 	addi	r3,r5,57
  8062c0:	18c7883a 	add	r3,r3,r3
  8062c4:	29400e04 	addi	r5,r5,56
  8062c8:	18c7883a 	add	r3,r3,r3
  8062cc:	18c7883a 	add	r3,r3,r3
  8062d0:	1909883a 	add	r4,r3,r4
  8062d4:	20c00017 	ldw	r3,0(r4)
  8062d8:	01c02074 	movhi	r7,129
  8062dc:	213ffe04 	addi	r4,r4,-8
  8062e0:	39c44c04 	addi	r7,r7,4400
  8062e4:	20c04426 	beq	r4,r3,8063f8 <_free_r+0x258>
  8062e8:	01ffff04 	movi	r7,-4
  8062ec:	19400117 	ldw	r5,4(r3)
  8062f0:	29ca703a 	and	r5,r5,r7
  8062f4:	1140022e 	bgeu	r2,r5,806300 <_free_r+0x160>
  8062f8:	18c00217 	ldw	r3,8(r3)
  8062fc:	20fffb1e 	bne	r4,r3,8062ec <__alt_data_end+0xff8062ec>
  806300:	19000317 	ldw	r4,12(r3)
  806304:	31000315 	stw	r4,12(r6)
  806308:	30c00215 	stw	r3,8(r6)
  80630c:	21800215 	stw	r6,8(r4)
  806310:	19800315 	stw	r6,12(r3)
  806314:	003fde06 	br	806290 <__alt_data_end+0xff806290>
  806318:	29c00217 	ldw	r7,8(r5)
  80631c:	10c5883a 	add	r2,r2,r3
  806320:	00c02074 	movhi	r3,129
  806324:	18c44e04 	addi	r3,r3,4408
  806328:	38c03b26 	beq	r7,r3,806418 <_free_r+0x278>
  80632c:	2a000317 	ldw	r8,12(r5)
  806330:	11400054 	ori	r5,r2,1
  806334:	3087883a 	add	r3,r6,r2
  806338:	3a000315 	stw	r8,12(r7)
  80633c:	41c00215 	stw	r7,8(r8)
  806340:	31400115 	stw	r5,4(r6)
  806344:	18800015 	stw	r2,0(r3)
  806348:	003fbd06 	br	806240 <__alt_data_end+0xff806240>
  80634c:	39c0004c 	andi	r7,r7,1
  806350:	10c5883a 	add	r2,r2,r3
  806354:	3800071e 	bne	r7,zero,806374 <_free_r+0x1d4>
  806358:	81fffe17 	ldw	r7,-8(r16)
  80635c:	31cdc83a 	sub	r6,r6,r7
  806360:	30c00317 	ldw	r3,12(r6)
  806364:	31400217 	ldw	r5,8(r6)
  806368:	11c5883a 	add	r2,r2,r7
  80636c:	28c00315 	stw	r3,12(r5)
  806370:	19400215 	stw	r5,8(r3)
  806374:	10c00054 	ori	r3,r2,1
  806378:	30c00115 	stw	r3,4(r6)
  80637c:	00c02074 	movhi	r3,129
  806380:	18cb2f04 	addi	r3,r3,11452
  806384:	18c00017 	ldw	r3,0(r3)
  806388:	21800215 	stw	r6,8(r4)
  80638c:	10ffc036 	bltu	r2,r3,806290 <__alt_data_end+0xff806290>
  806390:	00802074 	movhi	r2,129
  806394:	10923a04 	addi	r2,r2,18664
  806398:	11400017 	ldw	r5,0(r2)
  80639c:	8809883a 	mov	r4,r17
  8063a0:	080607c0 	call	80607c <_malloc_trim_r>
  8063a4:	003fba06 	br	806290 <__alt_data_end+0xff806290>
  8063a8:	28c9883a 	add	r4,r5,r3
  8063ac:	21000117 	ldw	r4,4(r4)
  8063b0:	2100004c 	andi	r4,r4,1
  8063b4:	2000391e 	bne	r4,zero,80649c <_free_r+0x2fc>
  8063b8:	29c00217 	ldw	r7,8(r5)
  8063bc:	29000317 	ldw	r4,12(r5)
  8063c0:	1885883a 	add	r2,r3,r2
  8063c4:	10c00054 	ori	r3,r2,1
  8063c8:	39000315 	stw	r4,12(r7)
  8063cc:	21c00215 	stw	r7,8(r4)
  8063d0:	30c00115 	stw	r3,4(r6)
  8063d4:	308d883a 	add	r6,r6,r2
  8063d8:	30800015 	stw	r2,0(r6)
  8063dc:	003fac06 	br	806290 <__alt_data_end+0xff806290>
  8063e0:	00c00504 	movi	r3,20
  8063e4:	19401536 	bltu	r3,r5,80643c <_free_r+0x29c>
  8063e8:	28c01704 	addi	r3,r5,92
  8063ec:	18c7883a 	add	r3,r3,r3
  8063f0:	294016c4 	addi	r5,r5,91
  8063f4:	003fb406 	br	8062c8 <__alt_data_end+0xff8062c8>
  8063f8:	280bd0ba 	srai	r5,r5,2
  8063fc:	00c00044 	movi	r3,1
  806400:	38800117 	ldw	r2,4(r7)
  806404:	194a983a 	sll	r5,r3,r5
  806408:	2007883a 	mov	r3,r4
  80640c:	2884b03a 	or	r2,r5,r2
  806410:	38800115 	stw	r2,4(r7)
  806414:	003fbb06 	br	806304 <__alt_data_end+0xff806304>
  806418:	21800515 	stw	r6,20(r4)
  80641c:	21800415 	stw	r6,16(r4)
  806420:	10c00054 	ori	r3,r2,1
  806424:	31c00315 	stw	r7,12(r6)
  806428:	31c00215 	stw	r7,8(r6)
  80642c:	30c00115 	stw	r3,4(r6)
  806430:	308d883a 	add	r6,r6,r2
  806434:	30800015 	stw	r2,0(r6)
  806438:	003f9506 	br	806290 <__alt_data_end+0xff806290>
  80643c:	00c01504 	movi	r3,84
  806440:	19400536 	bltu	r3,r5,806458 <_free_r+0x2b8>
  806444:	100ad33a 	srli	r5,r2,12
  806448:	28c01bc4 	addi	r3,r5,111
  80644c:	18c7883a 	add	r3,r3,r3
  806450:	29401b84 	addi	r5,r5,110
  806454:	003f9c06 	br	8062c8 <__alt_data_end+0xff8062c8>
  806458:	00c05504 	movi	r3,340
  80645c:	19400536 	bltu	r3,r5,806474 <_free_r+0x2d4>
  806460:	100ad3fa 	srli	r5,r2,15
  806464:	28c01e04 	addi	r3,r5,120
  806468:	18c7883a 	add	r3,r3,r3
  80646c:	29401dc4 	addi	r5,r5,119
  806470:	003f9506 	br	8062c8 <__alt_data_end+0xff8062c8>
  806474:	00c15504 	movi	r3,1364
  806478:	19400536 	bltu	r3,r5,806490 <_free_r+0x2f0>
  80647c:	100ad4ba 	srli	r5,r2,18
  806480:	28c01f44 	addi	r3,r5,125
  806484:	18c7883a 	add	r3,r3,r3
  806488:	29401f04 	addi	r5,r5,124
  80648c:	003f8e06 	br	8062c8 <__alt_data_end+0xff8062c8>
  806490:	00c03f84 	movi	r3,254
  806494:	01401f84 	movi	r5,126
  806498:	003f8b06 	br	8062c8 <__alt_data_end+0xff8062c8>
  80649c:	10c00054 	ori	r3,r2,1
  8064a0:	30c00115 	stw	r3,4(r6)
  8064a4:	308d883a 	add	r6,r6,r2
  8064a8:	30800015 	stw	r2,0(r6)
  8064ac:	003f7806 	br	806290 <__alt_data_end+0xff806290>

008064b0 <__sfvwrite_r>:
  8064b0:	30800217 	ldw	r2,8(r6)
  8064b4:	10006726 	beq	r2,zero,806654 <__sfvwrite_r+0x1a4>
  8064b8:	28c0030b 	ldhu	r3,12(r5)
  8064bc:	defff404 	addi	sp,sp,-48
  8064c0:	dd400715 	stw	r21,28(sp)
  8064c4:	dd000615 	stw	r20,24(sp)
  8064c8:	dc000215 	stw	r16,8(sp)
  8064cc:	dfc00b15 	stw	ra,44(sp)
  8064d0:	df000a15 	stw	fp,40(sp)
  8064d4:	ddc00915 	stw	r23,36(sp)
  8064d8:	dd800815 	stw	r22,32(sp)
  8064dc:	dcc00515 	stw	r19,20(sp)
  8064e0:	dc800415 	stw	r18,16(sp)
  8064e4:	dc400315 	stw	r17,12(sp)
  8064e8:	1880020c 	andi	r2,r3,8
  8064ec:	2821883a 	mov	r16,r5
  8064f0:	202b883a 	mov	r21,r4
  8064f4:	3029883a 	mov	r20,r6
  8064f8:	10002726 	beq	r2,zero,806598 <__sfvwrite_r+0xe8>
  8064fc:	28800417 	ldw	r2,16(r5)
  806500:	10002526 	beq	r2,zero,806598 <__sfvwrite_r+0xe8>
  806504:	1880008c 	andi	r2,r3,2
  806508:	a4400017 	ldw	r17,0(r20)
  80650c:	10002a26 	beq	r2,zero,8065b8 <__sfvwrite_r+0x108>
  806510:	05a00034 	movhi	r22,32768
  806514:	0027883a 	mov	r19,zero
  806518:	0025883a 	mov	r18,zero
  80651c:	b5bf0004 	addi	r22,r22,-1024
  806520:	980d883a 	mov	r6,r19
  806524:	a809883a 	mov	r4,r21
  806528:	90004626 	beq	r18,zero,806644 <__sfvwrite_r+0x194>
  80652c:	900f883a 	mov	r7,r18
  806530:	b480022e 	bgeu	r22,r18,80653c <__sfvwrite_r+0x8c>
  806534:	01e00034 	movhi	r7,32768
  806538:	39ff0004 	addi	r7,r7,-1024
  80653c:	80800917 	ldw	r2,36(r16)
  806540:	81400717 	ldw	r5,28(r16)
  806544:	103ee83a 	callr	r2
  806548:	00805a0e 	bge	zero,r2,8066b4 <__sfvwrite_r+0x204>
  80654c:	a0c00217 	ldw	r3,8(r20)
  806550:	98a7883a 	add	r19,r19,r2
  806554:	90a5c83a 	sub	r18,r18,r2
  806558:	1885c83a 	sub	r2,r3,r2
  80655c:	a0800215 	stw	r2,8(r20)
  806560:	103fef1e 	bne	r2,zero,806520 <__alt_data_end+0xff806520>
  806564:	0005883a 	mov	r2,zero
  806568:	dfc00b17 	ldw	ra,44(sp)
  80656c:	df000a17 	ldw	fp,40(sp)
  806570:	ddc00917 	ldw	r23,36(sp)
  806574:	dd800817 	ldw	r22,32(sp)
  806578:	dd400717 	ldw	r21,28(sp)
  80657c:	dd000617 	ldw	r20,24(sp)
  806580:	dcc00517 	ldw	r19,20(sp)
  806584:	dc800417 	ldw	r18,16(sp)
  806588:	dc400317 	ldw	r17,12(sp)
  80658c:	dc000217 	ldw	r16,8(sp)
  806590:	dec00c04 	addi	sp,sp,48
  806594:	f800283a 	ret
  806598:	800b883a 	mov	r5,r16
  80659c:	a809883a 	mov	r4,r21
  8065a0:	08040200 	call	804020 <__swsetup_r>
  8065a4:	1000ee1e 	bne	r2,zero,806960 <__sfvwrite_r+0x4b0>
  8065a8:	80c0030b 	ldhu	r3,12(r16)
  8065ac:	a4400017 	ldw	r17,0(r20)
  8065b0:	1880008c 	andi	r2,r3,2
  8065b4:	103fd61e 	bne	r2,zero,806510 <__alt_data_end+0xff806510>
  8065b8:	1880004c 	andi	r2,r3,1
  8065bc:	1000421e 	bne	r2,zero,8066c8 <__sfvwrite_r+0x218>
  8065c0:	0039883a 	mov	fp,zero
  8065c4:	0025883a 	mov	r18,zero
  8065c8:	90001a26 	beq	r18,zero,806634 <__sfvwrite_r+0x184>
  8065cc:	1880800c 	andi	r2,r3,512
  8065d0:	84c00217 	ldw	r19,8(r16)
  8065d4:	10002126 	beq	r2,zero,80665c <__sfvwrite_r+0x1ac>
  8065d8:	982f883a 	mov	r23,r19
  8065dc:	94c09636 	bltu	r18,r19,806838 <__sfvwrite_r+0x388>
  8065e0:	1881200c 	andi	r2,r3,1152
  8065e4:	1000a11e 	bne	r2,zero,80686c <__sfvwrite_r+0x3bc>
  8065e8:	81000017 	ldw	r4,0(r16)
  8065ec:	b80d883a 	mov	r6,r23
  8065f0:	e00b883a 	mov	r5,fp
  8065f4:	0806fc40 	call	806fc4 <memmove>
  8065f8:	80c00217 	ldw	r3,8(r16)
  8065fc:	81000017 	ldw	r4,0(r16)
  806600:	9005883a 	mov	r2,r18
  806604:	1ce7c83a 	sub	r19,r3,r19
  806608:	25cf883a 	add	r7,r4,r23
  80660c:	84c00215 	stw	r19,8(r16)
  806610:	81c00015 	stw	r7,0(r16)
  806614:	a0c00217 	ldw	r3,8(r20)
  806618:	e0b9883a 	add	fp,fp,r2
  80661c:	90a5c83a 	sub	r18,r18,r2
  806620:	18a7c83a 	sub	r19,r3,r2
  806624:	a4c00215 	stw	r19,8(r20)
  806628:	983fce26 	beq	r19,zero,806564 <__alt_data_end+0xff806564>
  80662c:	80c0030b 	ldhu	r3,12(r16)
  806630:	903fe61e 	bne	r18,zero,8065cc <__alt_data_end+0xff8065cc>
  806634:	8f000017 	ldw	fp,0(r17)
  806638:	8c800117 	ldw	r18,4(r17)
  80663c:	8c400204 	addi	r17,r17,8
  806640:	003fe106 	br	8065c8 <__alt_data_end+0xff8065c8>
  806644:	8cc00017 	ldw	r19,0(r17)
  806648:	8c800117 	ldw	r18,4(r17)
  80664c:	8c400204 	addi	r17,r17,8
  806650:	003fb306 	br	806520 <__alt_data_end+0xff806520>
  806654:	0005883a 	mov	r2,zero
  806658:	f800283a 	ret
  80665c:	81000017 	ldw	r4,0(r16)
  806660:	80800417 	ldw	r2,16(r16)
  806664:	11005a36 	bltu	r2,r4,8067d0 <__sfvwrite_r+0x320>
  806668:	85c00517 	ldw	r23,20(r16)
  80666c:	95c05836 	bltu	r18,r23,8067d0 <__sfvwrite_r+0x320>
  806670:	00a00034 	movhi	r2,32768
  806674:	10bfffc4 	addi	r2,r2,-1
  806678:	9009883a 	mov	r4,r18
  80667c:	1480012e 	bgeu	r2,r18,806684 <__sfvwrite_r+0x1d4>
  806680:	1009883a 	mov	r4,r2
  806684:	b80b883a 	mov	r5,r23
  806688:	080b6f40 	call	80b6f4 <__divsi3>
  80668c:	b80b883a 	mov	r5,r23
  806690:	1009883a 	mov	r4,r2
  806694:	080b8a80 	call	80b8a8 <__mulsi3>
  806698:	81400717 	ldw	r5,28(r16)
  80669c:	80c00917 	ldw	r3,36(r16)
  8066a0:	100f883a 	mov	r7,r2
  8066a4:	e00d883a 	mov	r6,fp
  8066a8:	a809883a 	mov	r4,r21
  8066ac:	183ee83a 	callr	r3
  8066b0:	00bfd816 	blt	zero,r2,806614 <__alt_data_end+0xff806614>
  8066b4:	8080030b 	ldhu	r2,12(r16)
  8066b8:	10801014 	ori	r2,r2,64
  8066bc:	8080030d 	sth	r2,12(r16)
  8066c0:	00bfffc4 	movi	r2,-1
  8066c4:	003fa806 	br	806568 <__alt_data_end+0xff806568>
  8066c8:	0027883a 	mov	r19,zero
  8066cc:	0011883a 	mov	r8,zero
  8066d0:	0039883a 	mov	fp,zero
  8066d4:	0025883a 	mov	r18,zero
  8066d8:	90001f26 	beq	r18,zero,806758 <__sfvwrite_r+0x2a8>
  8066dc:	40005a26 	beq	r8,zero,806848 <__sfvwrite_r+0x398>
  8066e0:	982d883a 	mov	r22,r19
  8066e4:	94c0012e 	bgeu	r18,r19,8066ec <__sfvwrite_r+0x23c>
  8066e8:	902d883a 	mov	r22,r18
  8066ec:	81000017 	ldw	r4,0(r16)
  8066f0:	80800417 	ldw	r2,16(r16)
  8066f4:	b02f883a 	mov	r23,r22
  8066f8:	81c00517 	ldw	r7,20(r16)
  8066fc:	1100032e 	bgeu	r2,r4,80670c <__sfvwrite_r+0x25c>
  806700:	80c00217 	ldw	r3,8(r16)
  806704:	38c7883a 	add	r3,r7,r3
  806708:	1d801816 	blt	r3,r22,80676c <__sfvwrite_r+0x2bc>
  80670c:	b1c03e16 	blt	r22,r7,806808 <__sfvwrite_r+0x358>
  806710:	80800917 	ldw	r2,36(r16)
  806714:	81400717 	ldw	r5,28(r16)
  806718:	e00d883a 	mov	r6,fp
  80671c:	da000115 	stw	r8,4(sp)
  806720:	a809883a 	mov	r4,r21
  806724:	103ee83a 	callr	r2
  806728:	102f883a 	mov	r23,r2
  80672c:	da000117 	ldw	r8,4(sp)
  806730:	00bfe00e 	bge	zero,r2,8066b4 <__alt_data_end+0xff8066b4>
  806734:	9de7c83a 	sub	r19,r19,r23
  806738:	98001f26 	beq	r19,zero,8067b8 <__sfvwrite_r+0x308>
  80673c:	a0800217 	ldw	r2,8(r20)
  806740:	e5f9883a 	add	fp,fp,r23
  806744:	95e5c83a 	sub	r18,r18,r23
  806748:	15efc83a 	sub	r23,r2,r23
  80674c:	a5c00215 	stw	r23,8(r20)
  806750:	b83f8426 	beq	r23,zero,806564 <__alt_data_end+0xff806564>
  806754:	903fe11e 	bne	r18,zero,8066dc <__alt_data_end+0xff8066dc>
  806758:	8f000017 	ldw	fp,0(r17)
  80675c:	8c800117 	ldw	r18,4(r17)
  806760:	0011883a 	mov	r8,zero
  806764:	8c400204 	addi	r17,r17,8
  806768:	003fdb06 	br	8066d8 <__alt_data_end+0xff8066d8>
  80676c:	180d883a 	mov	r6,r3
  806770:	e00b883a 	mov	r5,fp
  806774:	da000115 	stw	r8,4(sp)
  806778:	d8c00015 	stw	r3,0(sp)
  80677c:	0806fc40 	call	806fc4 <memmove>
  806780:	d8c00017 	ldw	r3,0(sp)
  806784:	80800017 	ldw	r2,0(r16)
  806788:	800b883a 	mov	r5,r16
  80678c:	a809883a 	mov	r4,r21
  806790:	10c5883a 	add	r2,r2,r3
  806794:	80800015 	stw	r2,0(r16)
  806798:	d8c00015 	stw	r3,0(sp)
  80679c:	0805c400 	call	805c40 <_fflush_r>
  8067a0:	d8c00017 	ldw	r3,0(sp)
  8067a4:	da000117 	ldw	r8,4(sp)
  8067a8:	103fc21e 	bne	r2,zero,8066b4 <__alt_data_end+0xff8066b4>
  8067ac:	182f883a 	mov	r23,r3
  8067b0:	9de7c83a 	sub	r19,r19,r23
  8067b4:	983fe11e 	bne	r19,zero,80673c <__alt_data_end+0xff80673c>
  8067b8:	800b883a 	mov	r5,r16
  8067bc:	a809883a 	mov	r4,r21
  8067c0:	0805c400 	call	805c40 <_fflush_r>
  8067c4:	103fbb1e 	bne	r2,zero,8066b4 <__alt_data_end+0xff8066b4>
  8067c8:	0011883a 	mov	r8,zero
  8067cc:	003fdb06 	br	80673c <__alt_data_end+0xff80673c>
  8067d0:	94c0012e 	bgeu	r18,r19,8067d8 <__sfvwrite_r+0x328>
  8067d4:	9027883a 	mov	r19,r18
  8067d8:	980d883a 	mov	r6,r19
  8067dc:	e00b883a 	mov	r5,fp
  8067e0:	0806fc40 	call	806fc4 <memmove>
  8067e4:	80800217 	ldw	r2,8(r16)
  8067e8:	80c00017 	ldw	r3,0(r16)
  8067ec:	14c5c83a 	sub	r2,r2,r19
  8067f0:	1cc7883a 	add	r3,r3,r19
  8067f4:	80800215 	stw	r2,8(r16)
  8067f8:	80c00015 	stw	r3,0(r16)
  8067fc:	10004326 	beq	r2,zero,80690c <__sfvwrite_r+0x45c>
  806800:	9805883a 	mov	r2,r19
  806804:	003f8306 	br	806614 <__alt_data_end+0xff806614>
  806808:	b00d883a 	mov	r6,r22
  80680c:	e00b883a 	mov	r5,fp
  806810:	da000115 	stw	r8,4(sp)
  806814:	0806fc40 	call	806fc4 <memmove>
  806818:	80800217 	ldw	r2,8(r16)
  80681c:	80c00017 	ldw	r3,0(r16)
  806820:	da000117 	ldw	r8,4(sp)
  806824:	1585c83a 	sub	r2,r2,r22
  806828:	1dad883a 	add	r22,r3,r22
  80682c:	80800215 	stw	r2,8(r16)
  806830:	85800015 	stw	r22,0(r16)
  806834:	003fbf06 	br	806734 <__alt_data_end+0xff806734>
  806838:	81000017 	ldw	r4,0(r16)
  80683c:	9027883a 	mov	r19,r18
  806840:	902f883a 	mov	r23,r18
  806844:	003f6906 	br	8065ec <__alt_data_end+0xff8065ec>
  806848:	900d883a 	mov	r6,r18
  80684c:	01400284 	movi	r5,10
  806850:	e009883a 	mov	r4,fp
  806854:	0806d980 	call	806d98 <memchr>
  806858:	10003e26 	beq	r2,zero,806954 <__sfvwrite_r+0x4a4>
  80685c:	10800044 	addi	r2,r2,1
  806860:	1727c83a 	sub	r19,r2,fp
  806864:	02000044 	movi	r8,1
  806868:	003f9d06 	br	8066e0 <__alt_data_end+0xff8066e0>
  80686c:	80800517 	ldw	r2,20(r16)
  806870:	81400417 	ldw	r5,16(r16)
  806874:	81c00017 	ldw	r7,0(r16)
  806878:	10a7883a 	add	r19,r2,r2
  80687c:	9885883a 	add	r2,r19,r2
  806880:	1026d7fa 	srli	r19,r2,31
  806884:	396dc83a 	sub	r22,r7,r5
  806888:	b1000044 	addi	r4,r22,1
  80688c:	9885883a 	add	r2,r19,r2
  806890:	1027d07a 	srai	r19,r2,1
  806894:	2485883a 	add	r2,r4,r18
  806898:	980d883a 	mov	r6,r19
  80689c:	9880022e 	bgeu	r19,r2,8068a8 <__sfvwrite_r+0x3f8>
  8068a0:	1027883a 	mov	r19,r2
  8068a4:	100d883a 	mov	r6,r2
  8068a8:	18c1000c 	andi	r3,r3,1024
  8068ac:	18001c26 	beq	r3,zero,806920 <__sfvwrite_r+0x470>
  8068b0:	300b883a 	mov	r5,r6
  8068b4:	a809883a 	mov	r4,r21
  8068b8:	08012340 	call	801234 <_malloc_r>
  8068bc:	102f883a 	mov	r23,r2
  8068c0:	10002926 	beq	r2,zero,806968 <__sfvwrite_r+0x4b8>
  8068c4:	81400417 	ldw	r5,16(r16)
  8068c8:	b00d883a 	mov	r6,r22
  8068cc:	1009883a 	mov	r4,r2
  8068d0:	0806e7c0 	call	806e7c <memcpy>
  8068d4:	8080030b 	ldhu	r2,12(r16)
  8068d8:	00fedfc4 	movi	r3,-1153
  8068dc:	10c4703a 	and	r2,r2,r3
  8068e0:	10802014 	ori	r2,r2,128
  8068e4:	8080030d 	sth	r2,12(r16)
  8068e8:	bd89883a 	add	r4,r23,r22
  8068ec:	9d8fc83a 	sub	r7,r19,r22
  8068f0:	85c00415 	stw	r23,16(r16)
  8068f4:	84c00515 	stw	r19,20(r16)
  8068f8:	81000015 	stw	r4,0(r16)
  8068fc:	9027883a 	mov	r19,r18
  806900:	81c00215 	stw	r7,8(r16)
  806904:	902f883a 	mov	r23,r18
  806908:	003f3806 	br	8065ec <__alt_data_end+0xff8065ec>
  80690c:	800b883a 	mov	r5,r16
  806910:	a809883a 	mov	r4,r21
  806914:	0805c400 	call	805c40 <_fflush_r>
  806918:	103fb926 	beq	r2,zero,806800 <__alt_data_end+0xff806800>
  80691c:	003f6506 	br	8066b4 <__alt_data_end+0xff8066b4>
  806920:	a809883a 	mov	r4,r21
  806924:	08083000 	call	808300 <_realloc_r>
  806928:	102f883a 	mov	r23,r2
  80692c:	103fee1e 	bne	r2,zero,8068e8 <__alt_data_end+0xff8068e8>
  806930:	81400417 	ldw	r5,16(r16)
  806934:	a809883a 	mov	r4,r21
  806938:	08061a00 	call	8061a0 <_free_r>
  80693c:	8080030b 	ldhu	r2,12(r16)
  806940:	00ffdfc4 	movi	r3,-129
  806944:	1884703a 	and	r2,r3,r2
  806948:	00c00304 	movi	r3,12
  80694c:	a8c00015 	stw	r3,0(r21)
  806950:	003f5906 	br	8066b8 <__alt_data_end+0xff8066b8>
  806954:	94c00044 	addi	r19,r18,1
  806958:	02000044 	movi	r8,1
  80695c:	003f6006 	br	8066e0 <__alt_data_end+0xff8066e0>
  806960:	00bfffc4 	movi	r2,-1
  806964:	003f0006 	br	806568 <__alt_data_end+0xff806568>
  806968:	00800304 	movi	r2,12
  80696c:	a8800015 	stw	r2,0(r21)
  806970:	8080030b 	ldhu	r2,12(r16)
  806974:	003f5006 	br	8066b8 <__alt_data_end+0xff8066b8>

00806978 <_fwalk>:
  806978:	defff704 	addi	sp,sp,-36
  80697c:	dd000415 	stw	r20,16(sp)
  806980:	dfc00815 	stw	ra,32(sp)
  806984:	ddc00715 	stw	r23,28(sp)
  806988:	dd800615 	stw	r22,24(sp)
  80698c:	dd400515 	stw	r21,20(sp)
  806990:	dcc00315 	stw	r19,12(sp)
  806994:	dc800215 	stw	r18,8(sp)
  806998:	dc400115 	stw	r17,4(sp)
  80699c:	dc000015 	stw	r16,0(sp)
  8069a0:	2500b804 	addi	r20,r4,736
  8069a4:	a0002326 	beq	r20,zero,806a34 <_fwalk+0xbc>
  8069a8:	282b883a 	mov	r21,r5
  8069ac:	002f883a 	mov	r23,zero
  8069b0:	05800044 	movi	r22,1
  8069b4:	04ffffc4 	movi	r19,-1
  8069b8:	a4400117 	ldw	r17,4(r20)
  8069bc:	a4800217 	ldw	r18,8(r20)
  8069c0:	8c7fffc4 	addi	r17,r17,-1
  8069c4:	88000d16 	blt	r17,zero,8069fc <_fwalk+0x84>
  8069c8:	94000304 	addi	r16,r18,12
  8069cc:	94800384 	addi	r18,r18,14
  8069d0:	8080000b 	ldhu	r2,0(r16)
  8069d4:	8c7fffc4 	addi	r17,r17,-1
  8069d8:	813ffd04 	addi	r4,r16,-12
  8069dc:	b080042e 	bgeu	r22,r2,8069f0 <_fwalk+0x78>
  8069e0:	9080000f 	ldh	r2,0(r18)
  8069e4:	14c00226 	beq	r2,r19,8069f0 <_fwalk+0x78>
  8069e8:	a83ee83a 	callr	r21
  8069ec:	b8aeb03a 	or	r23,r23,r2
  8069f0:	84001a04 	addi	r16,r16,104
  8069f4:	94801a04 	addi	r18,r18,104
  8069f8:	8cfff51e 	bne	r17,r19,8069d0 <__alt_data_end+0xff8069d0>
  8069fc:	a5000017 	ldw	r20,0(r20)
  806a00:	a03fed1e 	bne	r20,zero,8069b8 <__alt_data_end+0xff8069b8>
  806a04:	b805883a 	mov	r2,r23
  806a08:	dfc00817 	ldw	ra,32(sp)
  806a0c:	ddc00717 	ldw	r23,28(sp)
  806a10:	dd800617 	ldw	r22,24(sp)
  806a14:	dd400517 	ldw	r21,20(sp)
  806a18:	dd000417 	ldw	r20,16(sp)
  806a1c:	dcc00317 	ldw	r19,12(sp)
  806a20:	dc800217 	ldw	r18,8(sp)
  806a24:	dc400117 	ldw	r17,4(sp)
  806a28:	dc000017 	ldw	r16,0(sp)
  806a2c:	dec00904 	addi	sp,sp,36
  806a30:	f800283a 	ret
  806a34:	002f883a 	mov	r23,zero
  806a38:	003ff206 	br	806a04 <__alt_data_end+0xff806a04>

00806a3c <_fwalk_reent>:
  806a3c:	defff704 	addi	sp,sp,-36
  806a40:	dd000415 	stw	r20,16(sp)
  806a44:	dfc00815 	stw	ra,32(sp)
  806a48:	ddc00715 	stw	r23,28(sp)
  806a4c:	dd800615 	stw	r22,24(sp)
  806a50:	dd400515 	stw	r21,20(sp)
  806a54:	dcc00315 	stw	r19,12(sp)
  806a58:	dc800215 	stw	r18,8(sp)
  806a5c:	dc400115 	stw	r17,4(sp)
  806a60:	dc000015 	stw	r16,0(sp)
  806a64:	2500b804 	addi	r20,r4,736
  806a68:	a0002326 	beq	r20,zero,806af8 <_fwalk_reent+0xbc>
  806a6c:	282b883a 	mov	r21,r5
  806a70:	2027883a 	mov	r19,r4
  806a74:	002f883a 	mov	r23,zero
  806a78:	05800044 	movi	r22,1
  806a7c:	04bfffc4 	movi	r18,-1
  806a80:	a4400117 	ldw	r17,4(r20)
  806a84:	a4000217 	ldw	r16,8(r20)
  806a88:	8c7fffc4 	addi	r17,r17,-1
  806a8c:	88000c16 	blt	r17,zero,806ac0 <_fwalk_reent+0x84>
  806a90:	84000304 	addi	r16,r16,12
  806a94:	8080000b 	ldhu	r2,0(r16)
  806a98:	8c7fffc4 	addi	r17,r17,-1
  806a9c:	817ffd04 	addi	r5,r16,-12
  806aa0:	b080052e 	bgeu	r22,r2,806ab8 <_fwalk_reent+0x7c>
  806aa4:	8080008f 	ldh	r2,2(r16)
  806aa8:	9809883a 	mov	r4,r19
  806aac:	14800226 	beq	r2,r18,806ab8 <_fwalk_reent+0x7c>
  806ab0:	a83ee83a 	callr	r21
  806ab4:	b8aeb03a 	or	r23,r23,r2
  806ab8:	84001a04 	addi	r16,r16,104
  806abc:	8cbff51e 	bne	r17,r18,806a94 <__alt_data_end+0xff806a94>
  806ac0:	a5000017 	ldw	r20,0(r20)
  806ac4:	a03fee1e 	bne	r20,zero,806a80 <__alt_data_end+0xff806a80>
  806ac8:	b805883a 	mov	r2,r23
  806acc:	dfc00817 	ldw	ra,32(sp)
  806ad0:	ddc00717 	ldw	r23,28(sp)
  806ad4:	dd800617 	ldw	r22,24(sp)
  806ad8:	dd400517 	ldw	r21,20(sp)
  806adc:	dd000417 	ldw	r20,16(sp)
  806ae0:	dcc00317 	ldw	r19,12(sp)
  806ae4:	dc800217 	ldw	r18,8(sp)
  806ae8:	dc400117 	ldw	r17,4(sp)
  806aec:	dc000017 	ldw	r16,0(sp)
  806af0:	dec00904 	addi	sp,sp,36
  806af4:	f800283a 	ret
  806af8:	002f883a 	mov	r23,zero
  806afc:	003ff206 	br	806ac8 <__alt_data_end+0xff806ac8>

00806b00 <_setlocale_r>:
  806b00:	30001b26 	beq	r6,zero,806b70 <_setlocale_r+0x70>
  806b04:	01402074 	movhi	r5,129
  806b08:	defffe04 	addi	sp,sp,-8
  806b0c:	2943ea04 	addi	r5,r5,4008
  806b10:	3009883a 	mov	r4,r6
  806b14:	dc000015 	stw	r16,0(sp)
  806b18:	dfc00115 	stw	ra,4(sp)
  806b1c:	3021883a 	mov	r16,r6
  806b20:	0808a140 	call	808a14 <strcmp>
  806b24:	1000061e 	bne	r2,zero,806b40 <_setlocale_r+0x40>
  806b28:	00802074 	movhi	r2,129
  806b2c:	1083e904 	addi	r2,r2,4004
  806b30:	dfc00117 	ldw	ra,4(sp)
  806b34:	dc000017 	ldw	r16,0(sp)
  806b38:	dec00204 	addi	sp,sp,8
  806b3c:	f800283a 	ret
  806b40:	01402074 	movhi	r5,129
  806b44:	2943e904 	addi	r5,r5,4004
  806b48:	8009883a 	mov	r4,r16
  806b4c:	0808a140 	call	808a14 <strcmp>
  806b50:	103ff526 	beq	r2,zero,806b28 <__alt_data_end+0xff806b28>
  806b54:	01402074 	movhi	r5,129
  806b58:	2943d404 	addi	r5,r5,3920
  806b5c:	8009883a 	mov	r4,r16
  806b60:	0808a140 	call	808a14 <strcmp>
  806b64:	103ff026 	beq	r2,zero,806b28 <__alt_data_end+0xff806b28>
  806b68:	0005883a 	mov	r2,zero
  806b6c:	003ff006 	br	806b30 <__alt_data_end+0xff806b30>
  806b70:	00802074 	movhi	r2,129
  806b74:	1083e904 	addi	r2,r2,4004
  806b78:	f800283a 	ret

00806b7c <__locale_charset>:
  806b7c:	00802074 	movhi	r2,129
  806b80:	10865f04 	addi	r2,r2,6524
  806b84:	f800283a 	ret

00806b88 <__locale_mb_cur_max>:
  806b88:	00802074 	movhi	r2,129
  806b8c:	108b3204 	addi	r2,r2,11464
  806b90:	10800017 	ldw	r2,0(r2)
  806b94:	f800283a 	ret

00806b98 <__locale_msgcharset>:
  806b98:	00802074 	movhi	r2,129
  806b9c:	10865704 	addi	r2,r2,6492
  806ba0:	f800283a 	ret

00806ba4 <__locale_cjk_lang>:
  806ba4:	0005883a 	mov	r2,zero
  806ba8:	f800283a 	ret

00806bac <_localeconv_r>:
  806bac:	00802074 	movhi	r2,129
  806bb0:	10866704 	addi	r2,r2,6556
  806bb4:	f800283a 	ret

00806bb8 <setlocale>:
  806bb8:	00802074 	movhi	r2,129
  806bbc:	108b3104 	addi	r2,r2,11460
  806bc0:	280d883a 	mov	r6,r5
  806bc4:	200b883a 	mov	r5,r4
  806bc8:	11000017 	ldw	r4,0(r2)
  806bcc:	0806b001 	jmpi	806b00 <_setlocale_r>

00806bd0 <localeconv>:
  806bd0:	00802074 	movhi	r2,129
  806bd4:	10866704 	addi	r2,r2,6556
  806bd8:	f800283a 	ret

00806bdc <__smakebuf_r>:
  806bdc:	2880030b 	ldhu	r2,12(r5)
  806be0:	10c0008c 	andi	r3,r2,2
  806be4:	1800411e 	bne	r3,zero,806cec <__smakebuf_r+0x110>
  806be8:	deffec04 	addi	sp,sp,-80
  806bec:	dc000f15 	stw	r16,60(sp)
  806bf0:	2821883a 	mov	r16,r5
  806bf4:	2940038f 	ldh	r5,14(r5)
  806bf8:	dc401015 	stw	r17,64(sp)
  806bfc:	dfc01315 	stw	ra,76(sp)
  806c00:	dcc01215 	stw	r19,72(sp)
  806c04:	dc801115 	stw	r18,68(sp)
  806c08:	2023883a 	mov	r17,r4
  806c0c:	28001c16 	blt	r5,zero,806c80 <__smakebuf_r+0xa4>
  806c10:	d80d883a 	mov	r6,sp
  806c14:	080a6840 	call	80a684 <_fstat_r>
  806c18:	10001816 	blt	r2,zero,806c7c <__smakebuf_r+0xa0>
  806c1c:	d8800117 	ldw	r2,4(sp)
  806c20:	00e00014 	movui	r3,32768
  806c24:	10bc000c 	andi	r2,r2,61440
  806c28:	14c80020 	cmpeqi	r19,r2,8192
  806c2c:	10c03726 	beq	r2,r3,806d0c <__smakebuf_r+0x130>
  806c30:	80c0030b 	ldhu	r3,12(r16)
  806c34:	18c20014 	ori	r3,r3,2048
  806c38:	80c0030d 	sth	r3,12(r16)
  806c3c:	00c80004 	movi	r3,8192
  806c40:	10c0521e 	bne	r2,r3,806d8c <__smakebuf_r+0x1b0>
  806c44:	8140038f 	ldh	r5,14(r16)
  806c48:	8809883a 	mov	r4,r17
  806c4c:	080a6e00 	call	80a6e0 <_isatty_r>
  806c50:	10004c26 	beq	r2,zero,806d84 <__smakebuf_r+0x1a8>
  806c54:	8080030b 	ldhu	r2,12(r16)
  806c58:	80c010c4 	addi	r3,r16,67
  806c5c:	80c00015 	stw	r3,0(r16)
  806c60:	10800054 	ori	r2,r2,1
  806c64:	8080030d 	sth	r2,12(r16)
  806c68:	00800044 	movi	r2,1
  806c6c:	80c00415 	stw	r3,16(r16)
  806c70:	80800515 	stw	r2,20(r16)
  806c74:	04810004 	movi	r18,1024
  806c78:	00000706 	br	806c98 <__smakebuf_r+0xbc>
  806c7c:	8080030b 	ldhu	r2,12(r16)
  806c80:	10c0200c 	andi	r3,r2,128
  806c84:	18001f1e 	bne	r3,zero,806d04 <__smakebuf_r+0x128>
  806c88:	04810004 	movi	r18,1024
  806c8c:	10820014 	ori	r2,r2,2048
  806c90:	8080030d 	sth	r2,12(r16)
  806c94:	0027883a 	mov	r19,zero
  806c98:	900b883a 	mov	r5,r18
  806c9c:	8809883a 	mov	r4,r17
  806ca0:	08012340 	call	801234 <_malloc_r>
  806ca4:	10002c26 	beq	r2,zero,806d58 <__smakebuf_r+0x17c>
  806ca8:	80c0030b 	ldhu	r3,12(r16)
  806cac:	01002034 	movhi	r4,128
  806cb0:	21173504 	addi	r4,r4,23764
  806cb4:	89000f15 	stw	r4,60(r17)
  806cb8:	18c02014 	ori	r3,r3,128
  806cbc:	80c0030d 	sth	r3,12(r16)
  806cc0:	80800015 	stw	r2,0(r16)
  806cc4:	80800415 	stw	r2,16(r16)
  806cc8:	84800515 	stw	r18,20(r16)
  806ccc:	98001a1e 	bne	r19,zero,806d38 <__smakebuf_r+0x15c>
  806cd0:	dfc01317 	ldw	ra,76(sp)
  806cd4:	dcc01217 	ldw	r19,72(sp)
  806cd8:	dc801117 	ldw	r18,68(sp)
  806cdc:	dc401017 	ldw	r17,64(sp)
  806ce0:	dc000f17 	ldw	r16,60(sp)
  806ce4:	dec01404 	addi	sp,sp,80
  806ce8:	f800283a 	ret
  806cec:	288010c4 	addi	r2,r5,67
  806cf0:	28800015 	stw	r2,0(r5)
  806cf4:	28800415 	stw	r2,16(r5)
  806cf8:	00800044 	movi	r2,1
  806cfc:	28800515 	stw	r2,20(r5)
  806d00:	f800283a 	ret
  806d04:	04801004 	movi	r18,64
  806d08:	003fe006 	br	806c8c <__alt_data_end+0xff806c8c>
  806d0c:	81000a17 	ldw	r4,40(r16)
  806d10:	00c02074 	movhi	r3,129
  806d14:	18e26c04 	addi	r3,r3,-30288
  806d18:	20ffc51e 	bne	r4,r3,806c30 <__alt_data_end+0xff806c30>
  806d1c:	8080030b 	ldhu	r2,12(r16)
  806d20:	04810004 	movi	r18,1024
  806d24:	84801315 	stw	r18,76(r16)
  806d28:	1484b03a 	or	r2,r2,r18
  806d2c:	8080030d 	sth	r2,12(r16)
  806d30:	0027883a 	mov	r19,zero
  806d34:	003fd806 	br	806c98 <__alt_data_end+0xff806c98>
  806d38:	8140038f 	ldh	r5,14(r16)
  806d3c:	8809883a 	mov	r4,r17
  806d40:	080a6e00 	call	80a6e0 <_isatty_r>
  806d44:	103fe226 	beq	r2,zero,806cd0 <__alt_data_end+0xff806cd0>
  806d48:	8080030b 	ldhu	r2,12(r16)
  806d4c:	10800054 	ori	r2,r2,1
  806d50:	8080030d 	sth	r2,12(r16)
  806d54:	003fde06 	br	806cd0 <__alt_data_end+0xff806cd0>
  806d58:	8080030b 	ldhu	r2,12(r16)
  806d5c:	10c0800c 	andi	r3,r2,512
  806d60:	183fdb1e 	bne	r3,zero,806cd0 <__alt_data_end+0xff806cd0>
  806d64:	10800094 	ori	r2,r2,2
  806d68:	80c010c4 	addi	r3,r16,67
  806d6c:	8080030d 	sth	r2,12(r16)
  806d70:	00800044 	movi	r2,1
  806d74:	80c00015 	stw	r3,0(r16)
  806d78:	80c00415 	stw	r3,16(r16)
  806d7c:	80800515 	stw	r2,20(r16)
  806d80:	003fd306 	br	806cd0 <__alt_data_end+0xff806cd0>
  806d84:	04810004 	movi	r18,1024
  806d88:	003fc306 	br	806c98 <__alt_data_end+0xff806c98>
  806d8c:	0027883a 	mov	r19,zero
  806d90:	04810004 	movi	r18,1024
  806d94:	003fc006 	br	806c98 <__alt_data_end+0xff806c98>

00806d98 <memchr>:
  806d98:	208000cc 	andi	r2,r4,3
  806d9c:	280f883a 	mov	r7,r5
  806da0:	10003426 	beq	r2,zero,806e74 <memchr+0xdc>
  806da4:	30bfffc4 	addi	r2,r6,-1
  806da8:	30001a26 	beq	r6,zero,806e14 <memchr+0x7c>
  806dac:	20c00003 	ldbu	r3,0(r4)
  806db0:	29803fcc 	andi	r6,r5,255
  806db4:	30c0051e 	bne	r6,r3,806dcc <memchr+0x34>
  806db8:	00001806 	br	806e1c <memchr+0x84>
  806dbc:	10001526 	beq	r2,zero,806e14 <memchr+0x7c>
  806dc0:	20c00003 	ldbu	r3,0(r4)
  806dc4:	10bfffc4 	addi	r2,r2,-1
  806dc8:	30c01426 	beq	r6,r3,806e1c <memchr+0x84>
  806dcc:	21000044 	addi	r4,r4,1
  806dd0:	20c000cc 	andi	r3,r4,3
  806dd4:	183ff91e 	bne	r3,zero,806dbc <__alt_data_end+0xff806dbc>
  806dd8:	020000c4 	movi	r8,3
  806ddc:	40801136 	bltu	r8,r2,806e24 <memchr+0x8c>
  806de0:	10000c26 	beq	r2,zero,806e14 <memchr+0x7c>
  806de4:	20c00003 	ldbu	r3,0(r4)
  806de8:	29403fcc 	andi	r5,r5,255
  806dec:	28c00b26 	beq	r5,r3,806e1c <memchr+0x84>
  806df0:	20c00044 	addi	r3,r4,1
  806df4:	39803fcc 	andi	r6,r7,255
  806df8:	2089883a 	add	r4,r4,r2
  806dfc:	00000306 	br	806e0c <memchr+0x74>
  806e00:	18c00044 	addi	r3,r3,1
  806e04:	197fffc3 	ldbu	r5,-1(r3)
  806e08:	31400526 	beq	r6,r5,806e20 <memchr+0x88>
  806e0c:	1805883a 	mov	r2,r3
  806e10:	20fffb1e 	bne	r4,r3,806e00 <__alt_data_end+0xff806e00>
  806e14:	0005883a 	mov	r2,zero
  806e18:	f800283a 	ret
  806e1c:	2005883a 	mov	r2,r4
  806e20:	f800283a 	ret
  806e24:	28c03fcc 	andi	r3,r5,255
  806e28:	1812923a 	slli	r9,r3,8
  806e2c:	02ffbff4 	movhi	r11,65279
  806e30:	02a02074 	movhi	r10,32897
  806e34:	48d2b03a 	or	r9,r9,r3
  806e38:	4806943a 	slli	r3,r9,16
  806e3c:	5affbfc4 	addi	r11,r11,-257
  806e40:	52a02004 	addi	r10,r10,-32640
  806e44:	48d2b03a 	or	r9,r9,r3
  806e48:	20c00017 	ldw	r3,0(r4)
  806e4c:	48c6f03a 	xor	r3,r9,r3
  806e50:	1acd883a 	add	r6,r3,r11
  806e54:	00c6303a 	nor	r3,zero,r3
  806e58:	30c6703a 	and	r3,r6,r3
  806e5c:	1a86703a 	and	r3,r3,r10
  806e60:	183fe01e 	bne	r3,zero,806de4 <__alt_data_end+0xff806de4>
  806e64:	10bfff04 	addi	r2,r2,-4
  806e68:	21000104 	addi	r4,r4,4
  806e6c:	40bff636 	bltu	r8,r2,806e48 <__alt_data_end+0xff806e48>
  806e70:	003fdb06 	br	806de0 <__alt_data_end+0xff806de0>
  806e74:	3005883a 	mov	r2,r6
  806e78:	003fd706 	br	806dd8 <__alt_data_end+0xff806dd8>

00806e7c <memcpy>:
  806e7c:	defffd04 	addi	sp,sp,-12
  806e80:	dfc00215 	stw	ra,8(sp)
  806e84:	dc400115 	stw	r17,4(sp)
  806e88:	dc000015 	stw	r16,0(sp)
  806e8c:	00c003c4 	movi	r3,15
  806e90:	2005883a 	mov	r2,r4
  806e94:	1980452e 	bgeu	r3,r6,806fac <memcpy+0x130>
  806e98:	2906b03a 	or	r3,r5,r4
  806e9c:	18c000cc 	andi	r3,r3,3
  806ea0:	1800441e 	bne	r3,zero,806fb4 <memcpy+0x138>
  806ea4:	347ffc04 	addi	r17,r6,-16
  806ea8:	8822d13a 	srli	r17,r17,4
  806eac:	28c00104 	addi	r3,r5,4
  806eb0:	23400104 	addi	r13,r4,4
  806eb4:	8820913a 	slli	r16,r17,4
  806eb8:	2b000204 	addi	r12,r5,8
  806ebc:	22c00204 	addi	r11,r4,8
  806ec0:	84000504 	addi	r16,r16,20
  806ec4:	2a800304 	addi	r10,r5,12
  806ec8:	22400304 	addi	r9,r4,12
  806ecc:	2c21883a 	add	r16,r5,r16
  806ed0:	2811883a 	mov	r8,r5
  806ed4:	200f883a 	mov	r7,r4
  806ed8:	41000017 	ldw	r4,0(r8)
  806edc:	1fc00017 	ldw	ra,0(r3)
  806ee0:	63c00017 	ldw	r15,0(r12)
  806ee4:	39000015 	stw	r4,0(r7)
  806ee8:	53800017 	ldw	r14,0(r10)
  806eec:	6fc00015 	stw	ra,0(r13)
  806ef0:	5bc00015 	stw	r15,0(r11)
  806ef4:	4b800015 	stw	r14,0(r9)
  806ef8:	18c00404 	addi	r3,r3,16
  806efc:	39c00404 	addi	r7,r7,16
  806f00:	42000404 	addi	r8,r8,16
  806f04:	6b400404 	addi	r13,r13,16
  806f08:	63000404 	addi	r12,r12,16
  806f0c:	5ac00404 	addi	r11,r11,16
  806f10:	52800404 	addi	r10,r10,16
  806f14:	4a400404 	addi	r9,r9,16
  806f18:	1c3fef1e 	bne	r3,r16,806ed8 <__alt_data_end+0xff806ed8>
  806f1c:	89c00044 	addi	r7,r17,1
  806f20:	380e913a 	slli	r7,r7,4
  806f24:	310003cc 	andi	r4,r6,15
  806f28:	02c000c4 	movi	r11,3
  806f2c:	11c7883a 	add	r3,r2,r7
  806f30:	29cb883a 	add	r5,r5,r7
  806f34:	5900212e 	bgeu	r11,r4,806fbc <memcpy+0x140>
  806f38:	1813883a 	mov	r9,r3
  806f3c:	2811883a 	mov	r8,r5
  806f40:	200f883a 	mov	r7,r4
  806f44:	42800017 	ldw	r10,0(r8)
  806f48:	4a400104 	addi	r9,r9,4
  806f4c:	39ffff04 	addi	r7,r7,-4
  806f50:	4abfff15 	stw	r10,-4(r9)
  806f54:	42000104 	addi	r8,r8,4
  806f58:	59fffa36 	bltu	r11,r7,806f44 <__alt_data_end+0xff806f44>
  806f5c:	213fff04 	addi	r4,r4,-4
  806f60:	2008d0ba 	srli	r4,r4,2
  806f64:	318000cc 	andi	r6,r6,3
  806f68:	21000044 	addi	r4,r4,1
  806f6c:	2109883a 	add	r4,r4,r4
  806f70:	2109883a 	add	r4,r4,r4
  806f74:	1907883a 	add	r3,r3,r4
  806f78:	290b883a 	add	r5,r5,r4
  806f7c:	30000626 	beq	r6,zero,806f98 <memcpy+0x11c>
  806f80:	198d883a 	add	r6,r3,r6
  806f84:	29c00003 	ldbu	r7,0(r5)
  806f88:	18c00044 	addi	r3,r3,1
  806f8c:	29400044 	addi	r5,r5,1
  806f90:	19ffffc5 	stb	r7,-1(r3)
  806f94:	19bffb1e 	bne	r3,r6,806f84 <__alt_data_end+0xff806f84>
  806f98:	dfc00217 	ldw	ra,8(sp)
  806f9c:	dc400117 	ldw	r17,4(sp)
  806fa0:	dc000017 	ldw	r16,0(sp)
  806fa4:	dec00304 	addi	sp,sp,12
  806fa8:	f800283a 	ret
  806fac:	2007883a 	mov	r3,r4
  806fb0:	003ff206 	br	806f7c <__alt_data_end+0xff806f7c>
  806fb4:	2007883a 	mov	r3,r4
  806fb8:	003ff106 	br	806f80 <__alt_data_end+0xff806f80>
  806fbc:	200d883a 	mov	r6,r4
  806fc0:	003fee06 	br	806f7c <__alt_data_end+0xff806f7c>

00806fc4 <memmove>:
  806fc4:	2005883a 	mov	r2,r4
  806fc8:	29000b2e 	bgeu	r5,r4,806ff8 <memmove+0x34>
  806fcc:	298f883a 	add	r7,r5,r6
  806fd0:	21c0092e 	bgeu	r4,r7,806ff8 <memmove+0x34>
  806fd4:	2187883a 	add	r3,r4,r6
  806fd8:	198bc83a 	sub	r5,r3,r6
  806fdc:	30004826 	beq	r6,zero,807100 <memmove+0x13c>
  806fe0:	39ffffc4 	addi	r7,r7,-1
  806fe4:	39000003 	ldbu	r4,0(r7)
  806fe8:	18ffffc4 	addi	r3,r3,-1
  806fec:	19000005 	stb	r4,0(r3)
  806ff0:	28fffb1e 	bne	r5,r3,806fe0 <__alt_data_end+0xff806fe0>
  806ff4:	f800283a 	ret
  806ff8:	00c003c4 	movi	r3,15
  806ffc:	1980412e 	bgeu	r3,r6,807104 <memmove+0x140>
  807000:	2886b03a 	or	r3,r5,r2
  807004:	18c000cc 	andi	r3,r3,3
  807008:	1800401e 	bne	r3,zero,80710c <memmove+0x148>
  80700c:	33fffc04 	addi	r15,r6,-16
  807010:	781ed13a 	srli	r15,r15,4
  807014:	28c00104 	addi	r3,r5,4
  807018:	13400104 	addi	r13,r2,4
  80701c:	781c913a 	slli	r14,r15,4
  807020:	2b000204 	addi	r12,r5,8
  807024:	12c00204 	addi	r11,r2,8
  807028:	73800504 	addi	r14,r14,20
  80702c:	2a800304 	addi	r10,r5,12
  807030:	12400304 	addi	r9,r2,12
  807034:	2b9d883a 	add	r14,r5,r14
  807038:	2811883a 	mov	r8,r5
  80703c:	100f883a 	mov	r7,r2
  807040:	41000017 	ldw	r4,0(r8)
  807044:	39c00404 	addi	r7,r7,16
  807048:	18c00404 	addi	r3,r3,16
  80704c:	393ffc15 	stw	r4,-16(r7)
  807050:	193ffc17 	ldw	r4,-16(r3)
  807054:	6b400404 	addi	r13,r13,16
  807058:	5ac00404 	addi	r11,r11,16
  80705c:	693ffc15 	stw	r4,-16(r13)
  807060:	61000017 	ldw	r4,0(r12)
  807064:	4a400404 	addi	r9,r9,16
  807068:	42000404 	addi	r8,r8,16
  80706c:	593ffc15 	stw	r4,-16(r11)
  807070:	51000017 	ldw	r4,0(r10)
  807074:	63000404 	addi	r12,r12,16
  807078:	52800404 	addi	r10,r10,16
  80707c:	493ffc15 	stw	r4,-16(r9)
  807080:	1bbfef1e 	bne	r3,r14,807040 <__alt_data_end+0xff807040>
  807084:	79000044 	addi	r4,r15,1
  807088:	2008913a 	slli	r4,r4,4
  80708c:	328003cc 	andi	r10,r6,15
  807090:	02c000c4 	movi	r11,3
  807094:	1107883a 	add	r3,r2,r4
  807098:	290b883a 	add	r5,r5,r4
  80709c:	5a801e2e 	bgeu	r11,r10,807118 <memmove+0x154>
  8070a0:	1813883a 	mov	r9,r3
  8070a4:	2811883a 	mov	r8,r5
  8070a8:	500f883a 	mov	r7,r10
  8070ac:	41000017 	ldw	r4,0(r8)
  8070b0:	4a400104 	addi	r9,r9,4
  8070b4:	39ffff04 	addi	r7,r7,-4
  8070b8:	493fff15 	stw	r4,-4(r9)
  8070bc:	42000104 	addi	r8,r8,4
  8070c0:	59fffa36 	bltu	r11,r7,8070ac <__alt_data_end+0xff8070ac>
  8070c4:	513fff04 	addi	r4,r10,-4
  8070c8:	2008d0ba 	srli	r4,r4,2
  8070cc:	318000cc 	andi	r6,r6,3
  8070d0:	21000044 	addi	r4,r4,1
  8070d4:	2109883a 	add	r4,r4,r4
  8070d8:	2109883a 	add	r4,r4,r4
  8070dc:	1907883a 	add	r3,r3,r4
  8070e0:	290b883a 	add	r5,r5,r4
  8070e4:	30000b26 	beq	r6,zero,807114 <memmove+0x150>
  8070e8:	198d883a 	add	r6,r3,r6
  8070ec:	29c00003 	ldbu	r7,0(r5)
  8070f0:	18c00044 	addi	r3,r3,1
  8070f4:	29400044 	addi	r5,r5,1
  8070f8:	19ffffc5 	stb	r7,-1(r3)
  8070fc:	19bffb1e 	bne	r3,r6,8070ec <__alt_data_end+0xff8070ec>
  807100:	f800283a 	ret
  807104:	1007883a 	mov	r3,r2
  807108:	003ff606 	br	8070e4 <__alt_data_end+0xff8070e4>
  80710c:	1007883a 	mov	r3,r2
  807110:	003ff506 	br	8070e8 <__alt_data_end+0xff8070e8>
  807114:	f800283a 	ret
  807118:	500d883a 	mov	r6,r10
  80711c:	003ff106 	br	8070e4 <__alt_data_end+0xff8070e4>

00807120 <memset>:
  807120:	20c000cc 	andi	r3,r4,3
  807124:	2005883a 	mov	r2,r4
  807128:	18004426 	beq	r3,zero,80723c <memset+0x11c>
  80712c:	31ffffc4 	addi	r7,r6,-1
  807130:	30004026 	beq	r6,zero,807234 <memset+0x114>
  807134:	2813883a 	mov	r9,r5
  807138:	200d883a 	mov	r6,r4
  80713c:	2007883a 	mov	r3,r4
  807140:	00000406 	br	807154 <memset+0x34>
  807144:	3a3fffc4 	addi	r8,r7,-1
  807148:	31800044 	addi	r6,r6,1
  80714c:	38003926 	beq	r7,zero,807234 <memset+0x114>
  807150:	400f883a 	mov	r7,r8
  807154:	18c00044 	addi	r3,r3,1
  807158:	32400005 	stb	r9,0(r6)
  80715c:	1a0000cc 	andi	r8,r3,3
  807160:	403ff81e 	bne	r8,zero,807144 <__alt_data_end+0xff807144>
  807164:	010000c4 	movi	r4,3
  807168:	21c02d2e 	bgeu	r4,r7,807220 <memset+0x100>
  80716c:	29003fcc 	andi	r4,r5,255
  807170:	200c923a 	slli	r6,r4,8
  807174:	3108b03a 	or	r4,r6,r4
  807178:	200c943a 	slli	r6,r4,16
  80717c:	218cb03a 	or	r6,r4,r6
  807180:	010003c4 	movi	r4,15
  807184:	21c0182e 	bgeu	r4,r7,8071e8 <memset+0xc8>
  807188:	3b3ffc04 	addi	r12,r7,-16
  80718c:	6018d13a 	srli	r12,r12,4
  807190:	1a000104 	addi	r8,r3,4
  807194:	1ac00204 	addi	r11,r3,8
  807198:	6008913a 	slli	r4,r12,4
  80719c:	1a800304 	addi	r10,r3,12
  8071a0:	1813883a 	mov	r9,r3
  8071a4:	21000504 	addi	r4,r4,20
  8071a8:	1909883a 	add	r4,r3,r4
  8071ac:	49800015 	stw	r6,0(r9)
  8071b0:	41800015 	stw	r6,0(r8)
  8071b4:	59800015 	stw	r6,0(r11)
  8071b8:	51800015 	stw	r6,0(r10)
  8071bc:	42000404 	addi	r8,r8,16
  8071c0:	4a400404 	addi	r9,r9,16
  8071c4:	5ac00404 	addi	r11,r11,16
  8071c8:	52800404 	addi	r10,r10,16
  8071cc:	413ff71e 	bne	r8,r4,8071ac <__alt_data_end+0xff8071ac>
  8071d0:	63000044 	addi	r12,r12,1
  8071d4:	6018913a 	slli	r12,r12,4
  8071d8:	39c003cc 	andi	r7,r7,15
  8071dc:	010000c4 	movi	r4,3
  8071e0:	1b07883a 	add	r3,r3,r12
  8071e4:	21c00e2e 	bgeu	r4,r7,807220 <memset+0x100>
  8071e8:	1813883a 	mov	r9,r3
  8071ec:	3811883a 	mov	r8,r7
  8071f0:	010000c4 	movi	r4,3
  8071f4:	49800015 	stw	r6,0(r9)
  8071f8:	423fff04 	addi	r8,r8,-4
  8071fc:	4a400104 	addi	r9,r9,4
  807200:	223ffc36 	bltu	r4,r8,8071f4 <__alt_data_end+0xff8071f4>
  807204:	393fff04 	addi	r4,r7,-4
  807208:	2008d0ba 	srli	r4,r4,2
  80720c:	39c000cc 	andi	r7,r7,3
  807210:	21000044 	addi	r4,r4,1
  807214:	2109883a 	add	r4,r4,r4
  807218:	2109883a 	add	r4,r4,r4
  80721c:	1907883a 	add	r3,r3,r4
  807220:	38000526 	beq	r7,zero,807238 <memset+0x118>
  807224:	19cf883a 	add	r7,r3,r7
  807228:	19400005 	stb	r5,0(r3)
  80722c:	18c00044 	addi	r3,r3,1
  807230:	38fffd1e 	bne	r7,r3,807228 <__alt_data_end+0xff807228>
  807234:	f800283a 	ret
  807238:	f800283a 	ret
  80723c:	2007883a 	mov	r3,r4
  807240:	300f883a 	mov	r7,r6
  807244:	003fc706 	br	807164 <__alt_data_end+0xff807164>

00807248 <_Balloc>:
  807248:	20801317 	ldw	r2,76(r4)
  80724c:	defffc04 	addi	sp,sp,-16
  807250:	dc400115 	stw	r17,4(sp)
  807254:	dc000015 	stw	r16,0(sp)
  807258:	dfc00315 	stw	ra,12(sp)
  80725c:	dc800215 	stw	r18,8(sp)
  807260:	2023883a 	mov	r17,r4
  807264:	2821883a 	mov	r16,r5
  807268:	10000f26 	beq	r2,zero,8072a8 <_Balloc+0x60>
  80726c:	8407883a 	add	r3,r16,r16
  807270:	18c7883a 	add	r3,r3,r3
  807274:	10c7883a 	add	r3,r2,r3
  807278:	18800017 	ldw	r2,0(r3)
  80727c:	10001126 	beq	r2,zero,8072c4 <_Balloc+0x7c>
  807280:	11000017 	ldw	r4,0(r2)
  807284:	19000015 	stw	r4,0(r3)
  807288:	10000415 	stw	zero,16(r2)
  80728c:	10000315 	stw	zero,12(r2)
  807290:	dfc00317 	ldw	ra,12(sp)
  807294:	dc800217 	ldw	r18,8(sp)
  807298:	dc400117 	ldw	r17,4(sp)
  80729c:	dc000017 	ldw	r16,0(sp)
  8072a0:	dec00404 	addi	sp,sp,16
  8072a4:	f800283a 	ret
  8072a8:	01800844 	movi	r6,33
  8072ac:	01400104 	movi	r5,4
  8072b0:	080a29c0 	call	80a29c <_calloc_r>
  8072b4:	88801315 	stw	r2,76(r17)
  8072b8:	103fec1e 	bne	r2,zero,80726c <__alt_data_end+0xff80726c>
  8072bc:	0005883a 	mov	r2,zero
  8072c0:	003ff306 	br	807290 <__alt_data_end+0xff807290>
  8072c4:	01400044 	movi	r5,1
  8072c8:	2c24983a 	sll	r18,r5,r16
  8072cc:	8809883a 	mov	r4,r17
  8072d0:	91800144 	addi	r6,r18,5
  8072d4:	318d883a 	add	r6,r6,r6
  8072d8:	318d883a 	add	r6,r6,r6
  8072dc:	080a29c0 	call	80a29c <_calloc_r>
  8072e0:	103ff626 	beq	r2,zero,8072bc <__alt_data_end+0xff8072bc>
  8072e4:	14000115 	stw	r16,4(r2)
  8072e8:	14800215 	stw	r18,8(r2)
  8072ec:	003fe606 	br	807288 <__alt_data_end+0xff807288>

008072f0 <_Bfree>:
  8072f0:	28000826 	beq	r5,zero,807314 <_Bfree+0x24>
  8072f4:	28c00117 	ldw	r3,4(r5)
  8072f8:	20801317 	ldw	r2,76(r4)
  8072fc:	18c7883a 	add	r3,r3,r3
  807300:	18c7883a 	add	r3,r3,r3
  807304:	10c5883a 	add	r2,r2,r3
  807308:	10c00017 	ldw	r3,0(r2)
  80730c:	28c00015 	stw	r3,0(r5)
  807310:	11400015 	stw	r5,0(r2)
  807314:	f800283a 	ret

00807318 <__multadd>:
  807318:	defff704 	addi	sp,sp,-36
  80731c:	dc800215 	stw	r18,8(sp)
  807320:	2c800417 	ldw	r18,16(r5)
  807324:	dd800615 	stw	r22,24(sp)
  807328:	dd400515 	stw	r21,20(sp)
  80732c:	dd000415 	stw	r20,16(sp)
  807330:	dcc00315 	stw	r19,12(sp)
  807334:	dc400115 	stw	r17,4(sp)
  807338:	dc000015 	stw	r16,0(sp)
  80733c:	dfc00815 	stw	ra,32(sp)
  807340:	ddc00715 	stw	r23,28(sp)
  807344:	2827883a 	mov	r19,r5
  807348:	2029883a 	mov	r20,r4
  80734c:	3023883a 	mov	r17,r6
  807350:	3821883a 	mov	r16,r7
  807354:	2d400504 	addi	r21,r5,20
  807358:	002d883a 	mov	r22,zero
  80735c:	adc00017 	ldw	r23,0(r21)
  807360:	880b883a 	mov	r5,r17
  807364:	ad400104 	addi	r21,r21,4
  807368:	b93fffcc 	andi	r4,r23,65535
  80736c:	080b8a80 	call	80b8a8 <__mulsi3>
  807370:	b808d43a 	srli	r4,r23,16
  807374:	880b883a 	mov	r5,r17
  807378:	1421883a 	add	r16,r2,r16
  80737c:	080b8a80 	call	80b8a8 <__mulsi3>
  807380:	800ed43a 	srli	r7,r16,16
  807384:	80ffffcc 	andi	r3,r16,65535
  807388:	b5800044 	addi	r22,r22,1
  80738c:	11c5883a 	add	r2,r2,r7
  807390:	100e943a 	slli	r7,r2,16
  807394:	1020d43a 	srli	r16,r2,16
  807398:	38c7883a 	add	r3,r7,r3
  80739c:	a8ffff15 	stw	r3,-4(r21)
  8073a0:	b4bfee16 	blt	r22,r18,80735c <__alt_data_end+0xff80735c>
  8073a4:	80000926 	beq	r16,zero,8073cc <__multadd+0xb4>
  8073a8:	98800217 	ldw	r2,8(r19)
  8073ac:	9080130e 	bge	r18,r2,8073fc <__multadd+0xe4>
  8073b0:	90800144 	addi	r2,r18,5
  8073b4:	1085883a 	add	r2,r2,r2
  8073b8:	1085883a 	add	r2,r2,r2
  8073bc:	9885883a 	add	r2,r19,r2
  8073c0:	14000015 	stw	r16,0(r2)
  8073c4:	94800044 	addi	r18,r18,1
  8073c8:	9c800415 	stw	r18,16(r19)
  8073cc:	9805883a 	mov	r2,r19
  8073d0:	dfc00817 	ldw	ra,32(sp)
  8073d4:	ddc00717 	ldw	r23,28(sp)
  8073d8:	dd800617 	ldw	r22,24(sp)
  8073dc:	dd400517 	ldw	r21,20(sp)
  8073e0:	dd000417 	ldw	r20,16(sp)
  8073e4:	dcc00317 	ldw	r19,12(sp)
  8073e8:	dc800217 	ldw	r18,8(sp)
  8073ec:	dc400117 	ldw	r17,4(sp)
  8073f0:	dc000017 	ldw	r16,0(sp)
  8073f4:	dec00904 	addi	sp,sp,36
  8073f8:	f800283a 	ret
  8073fc:	99400117 	ldw	r5,4(r19)
  807400:	a009883a 	mov	r4,r20
  807404:	29400044 	addi	r5,r5,1
  807408:	08072480 	call	807248 <_Balloc>
  80740c:	99800417 	ldw	r6,16(r19)
  807410:	99400304 	addi	r5,r19,12
  807414:	11000304 	addi	r4,r2,12
  807418:	31800084 	addi	r6,r6,2
  80741c:	318d883a 	add	r6,r6,r6
  807420:	318d883a 	add	r6,r6,r6
  807424:	1023883a 	mov	r17,r2
  807428:	0806e7c0 	call	806e7c <memcpy>
  80742c:	98000a26 	beq	r19,zero,807458 <__multadd+0x140>
  807430:	98c00117 	ldw	r3,4(r19)
  807434:	a0801317 	ldw	r2,76(r20)
  807438:	18c7883a 	add	r3,r3,r3
  80743c:	18c7883a 	add	r3,r3,r3
  807440:	10c5883a 	add	r2,r2,r3
  807444:	10c00017 	ldw	r3,0(r2)
  807448:	98c00015 	stw	r3,0(r19)
  80744c:	14c00015 	stw	r19,0(r2)
  807450:	8827883a 	mov	r19,r17
  807454:	003fd606 	br	8073b0 <__alt_data_end+0xff8073b0>
  807458:	8827883a 	mov	r19,r17
  80745c:	003fd406 	br	8073b0 <__alt_data_end+0xff8073b0>

00807460 <__s2b>:
  807460:	defff904 	addi	sp,sp,-28
  807464:	dc400115 	stw	r17,4(sp)
  807468:	dc000015 	stw	r16,0(sp)
  80746c:	2023883a 	mov	r17,r4
  807470:	2821883a 	mov	r16,r5
  807474:	39000204 	addi	r4,r7,8
  807478:	01400244 	movi	r5,9
  80747c:	dcc00315 	stw	r19,12(sp)
  807480:	dc800215 	stw	r18,8(sp)
  807484:	dfc00615 	stw	ra,24(sp)
  807488:	dd400515 	stw	r21,20(sp)
  80748c:	dd000415 	stw	r20,16(sp)
  807490:	3825883a 	mov	r18,r7
  807494:	3027883a 	mov	r19,r6
  807498:	080b6f40 	call	80b6f4 <__divsi3>
  80749c:	00c00044 	movi	r3,1
  8074a0:	000b883a 	mov	r5,zero
  8074a4:	1880030e 	bge	r3,r2,8074b4 <__s2b+0x54>
  8074a8:	18c7883a 	add	r3,r3,r3
  8074ac:	29400044 	addi	r5,r5,1
  8074b0:	18bffd16 	blt	r3,r2,8074a8 <__alt_data_end+0xff8074a8>
  8074b4:	8809883a 	mov	r4,r17
  8074b8:	08072480 	call	807248 <_Balloc>
  8074bc:	d8c00717 	ldw	r3,28(sp)
  8074c0:	10c00515 	stw	r3,20(r2)
  8074c4:	00c00044 	movi	r3,1
  8074c8:	10c00415 	stw	r3,16(r2)
  8074cc:	00c00244 	movi	r3,9
  8074d0:	1cc0210e 	bge	r3,r19,807558 <__s2b+0xf8>
  8074d4:	80eb883a 	add	r21,r16,r3
  8074d8:	a829883a 	mov	r20,r21
  8074dc:	84e1883a 	add	r16,r16,r19
  8074e0:	a1c00007 	ldb	r7,0(r20)
  8074e4:	01800284 	movi	r6,10
  8074e8:	a5000044 	addi	r20,r20,1
  8074ec:	100b883a 	mov	r5,r2
  8074f0:	39fff404 	addi	r7,r7,-48
  8074f4:	8809883a 	mov	r4,r17
  8074f8:	08073180 	call	807318 <__multadd>
  8074fc:	a43ff81e 	bne	r20,r16,8074e0 <__alt_data_end+0xff8074e0>
  807500:	ace1883a 	add	r16,r21,r19
  807504:	843ffe04 	addi	r16,r16,-8
  807508:	9c800a0e 	bge	r19,r18,807534 <__s2b+0xd4>
  80750c:	94e5c83a 	sub	r18,r18,r19
  807510:	84a5883a 	add	r18,r16,r18
  807514:	81c00007 	ldb	r7,0(r16)
  807518:	01800284 	movi	r6,10
  80751c:	84000044 	addi	r16,r16,1
  807520:	100b883a 	mov	r5,r2
  807524:	39fff404 	addi	r7,r7,-48
  807528:	8809883a 	mov	r4,r17
  80752c:	08073180 	call	807318 <__multadd>
  807530:	84bff81e 	bne	r16,r18,807514 <__alt_data_end+0xff807514>
  807534:	dfc00617 	ldw	ra,24(sp)
  807538:	dd400517 	ldw	r21,20(sp)
  80753c:	dd000417 	ldw	r20,16(sp)
  807540:	dcc00317 	ldw	r19,12(sp)
  807544:	dc800217 	ldw	r18,8(sp)
  807548:	dc400117 	ldw	r17,4(sp)
  80754c:	dc000017 	ldw	r16,0(sp)
  807550:	dec00704 	addi	sp,sp,28
  807554:	f800283a 	ret
  807558:	84000284 	addi	r16,r16,10
  80755c:	1827883a 	mov	r19,r3
  807560:	003fe906 	br	807508 <__alt_data_end+0xff807508>

00807564 <__hi0bits>:
  807564:	20bfffec 	andhi	r2,r4,65535
  807568:	1000141e 	bne	r2,zero,8075bc <__hi0bits+0x58>
  80756c:	2008943a 	slli	r4,r4,16
  807570:	00800404 	movi	r2,16
  807574:	20ffc02c 	andhi	r3,r4,65280
  807578:	1800021e 	bne	r3,zero,807584 <__hi0bits+0x20>
  80757c:	2008923a 	slli	r4,r4,8
  807580:	10800204 	addi	r2,r2,8
  807584:	20fc002c 	andhi	r3,r4,61440
  807588:	1800021e 	bne	r3,zero,807594 <__hi0bits+0x30>
  80758c:	2008913a 	slli	r4,r4,4
  807590:	10800104 	addi	r2,r2,4
  807594:	20f0002c 	andhi	r3,r4,49152
  807598:	1800031e 	bne	r3,zero,8075a8 <__hi0bits+0x44>
  80759c:	2109883a 	add	r4,r4,r4
  8075a0:	10800084 	addi	r2,r2,2
  8075a4:	2109883a 	add	r4,r4,r4
  8075a8:	20000316 	blt	r4,zero,8075b8 <__hi0bits+0x54>
  8075ac:	2110002c 	andhi	r4,r4,16384
  8075b0:	2000041e 	bne	r4,zero,8075c4 <__hi0bits+0x60>
  8075b4:	00800804 	movi	r2,32
  8075b8:	f800283a 	ret
  8075bc:	0005883a 	mov	r2,zero
  8075c0:	003fec06 	br	807574 <__alt_data_end+0xff807574>
  8075c4:	10800044 	addi	r2,r2,1
  8075c8:	f800283a 	ret

008075cc <__lo0bits>:
  8075cc:	20c00017 	ldw	r3,0(r4)
  8075d0:	188001cc 	andi	r2,r3,7
  8075d4:	10000826 	beq	r2,zero,8075f8 <__lo0bits+0x2c>
  8075d8:	1880004c 	andi	r2,r3,1
  8075dc:	1000211e 	bne	r2,zero,807664 <__lo0bits+0x98>
  8075e0:	1880008c 	andi	r2,r3,2
  8075e4:	1000211e 	bne	r2,zero,80766c <__lo0bits+0xa0>
  8075e8:	1806d0ba 	srli	r3,r3,2
  8075ec:	00800084 	movi	r2,2
  8075f0:	20c00015 	stw	r3,0(r4)
  8075f4:	f800283a 	ret
  8075f8:	18bfffcc 	andi	r2,r3,65535
  8075fc:	10001326 	beq	r2,zero,80764c <__lo0bits+0x80>
  807600:	0005883a 	mov	r2,zero
  807604:	19403fcc 	andi	r5,r3,255
  807608:	2800021e 	bne	r5,zero,807614 <__lo0bits+0x48>
  80760c:	1806d23a 	srli	r3,r3,8
  807610:	10800204 	addi	r2,r2,8
  807614:	194003cc 	andi	r5,r3,15
  807618:	2800021e 	bne	r5,zero,807624 <__lo0bits+0x58>
  80761c:	1806d13a 	srli	r3,r3,4
  807620:	10800104 	addi	r2,r2,4
  807624:	194000cc 	andi	r5,r3,3
  807628:	2800021e 	bne	r5,zero,807634 <__lo0bits+0x68>
  80762c:	1806d0ba 	srli	r3,r3,2
  807630:	10800084 	addi	r2,r2,2
  807634:	1940004c 	andi	r5,r3,1
  807638:	2800081e 	bne	r5,zero,80765c <__lo0bits+0x90>
  80763c:	1806d07a 	srli	r3,r3,1
  807640:	1800051e 	bne	r3,zero,807658 <__lo0bits+0x8c>
  807644:	00800804 	movi	r2,32
  807648:	f800283a 	ret
  80764c:	1806d43a 	srli	r3,r3,16
  807650:	00800404 	movi	r2,16
  807654:	003feb06 	br	807604 <__alt_data_end+0xff807604>
  807658:	10800044 	addi	r2,r2,1
  80765c:	20c00015 	stw	r3,0(r4)
  807660:	f800283a 	ret
  807664:	0005883a 	mov	r2,zero
  807668:	f800283a 	ret
  80766c:	1806d07a 	srli	r3,r3,1
  807670:	00800044 	movi	r2,1
  807674:	20c00015 	stw	r3,0(r4)
  807678:	f800283a 	ret

0080767c <__i2b>:
  80767c:	defffd04 	addi	sp,sp,-12
  807680:	dc000015 	stw	r16,0(sp)
  807684:	04000044 	movi	r16,1
  807688:	dc400115 	stw	r17,4(sp)
  80768c:	2823883a 	mov	r17,r5
  807690:	800b883a 	mov	r5,r16
  807694:	dfc00215 	stw	ra,8(sp)
  807698:	08072480 	call	807248 <_Balloc>
  80769c:	14400515 	stw	r17,20(r2)
  8076a0:	14000415 	stw	r16,16(r2)
  8076a4:	dfc00217 	ldw	ra,8(sp)
  8076a8:	dc400117 	ldw	r17,4(sp)
  8076ac:	dc000017 	ldw	r16,0(sp)
  8076b0:	dec00304 	addi	sp,sp,12
  8076b4:	f800283a 	ret

008076b8 <__multiply>:
  8076b8:	deffef04 	addi	sp,sp,-68
  8076bc:	dc400815 	stw	r17,32(sp)
  8076c0:	dc000715 	stw	r16,28(sp)
  8076c4:	34400417 	ldw	r17,16(r6)
  8076c8:	2c000417 	ldw	r16,16(r5)
  8076cc:	dd800d15 	stw	r22,52(sp)
  8076d0:	dc800915 	stw	r18,36(sp)
  8076d4:	dfc01015 	stw	ra,64(sp)
  8076d8:	df000f15 	stw	fp,60(sp)
  8076dc:	ddc00e15 	stw	r23,56(sp)
  8076e0:	dd400c15 	stw	r21,48(sp)
  8076e4:	dd000b15 	stw	r20,44(sp)
  8076e8:	dcc00a15 	stw	r19,40(sp)
  8076ec:	2825883a 	mov	r18,r5
  8076f0:	302d883a 	mov	r22,r6
  8076f4:	8440050e 	bge	r16,r17,80770c <__multiply+0x54>
  8076f8:	8007883a 	mov	r3,r16
  8076fc:	3025883a 	mov	r18,r6
  807700:	8821883a 	mov	r16,r17
  807704:	282d883a 	mov	r22,r5
  807708:	1823883a 	mov	r17,r3
  80770c:	90800217 	ldw	r2,8(r18)
  807710:	8447883a 	add	r3,r16,r17
  807714:	d8c00215 	stw	r3,8(sp)
  807718:	91400117 	ldw	r5,4(r18)
  80771c:	10c0010e 	bge	r2,r3,807724 <__multiply+0x6c>
  807720:	29400044 	addi	r5,r5,1
  807724:	08072480 	call	807248 <_Balloc>
  807728:	d8c00217 	ldw	r3,8(sp)
  80772c:	d8800615 	stw	r2,24(sp)
  807730:	18eb883a 	add	r21,r3,r3
  807734:	ad6b883a 	add	r21,r21,r21
  807738:	10c00504 	addi	r3,r2,20
  80773c:	1d6b883a 	add	r21,r3,r21
  807740:	d8c00115 	stw	r3,4(sp)
  807744:	dd400315 	stw	r21,12(sp)
  807748:	1805883a 	mov	r2,r3
  80774c:	1d40042e 	bgeu	r3,r21,807760 <__multiply+0xa8>
  807750:	d8c00317 	ldw	r3,12(sp)
  807754:	10000015 	stw	zero,0(r2)
  807758:	10800104 	addi	r2,r2,4
  80775c:	10fffc36 	bltu	r2,r3,807750 <__alt_data_end+0xff807750>
  807760:	8c63883a 	add	r17,r17,r17
  807764:	b5800504 	addi	r22,r22,20
  807768:	8c63883a 	add	r17,r17,r17
  80776c:	94800504 	addi	r18,r18,20
  807770:	8421883a 	add	r16,r16,r16
  807774:	b463883a 	add	r17,r22,r17
  807778:	8421883a 	add	r16,r16,r16
  80777c:	dd800015 	stw	r22,0(sp)
  807780:	dc800415 	stw	r18,16(sp)
  807784:	dc400515 	stw	r17,20(sp)
  807788:	9429883a 	add	r20,r18,r16
  80778c:	b4404f2e 	bgeu	r22,r17,8078cc <__multiply+0x214>
  807790:	d8c00017 	ldw	r3,0(sp)
  807794:	1c800017 	ldw	r18,0(r3)
  807798:	947fffcc 	andi	r17,r18,65535
  80779c:	88001e26 	beq	r17,zero,807818 <__multiply+0x160>
  8077a0:	dd800117 	ldw	r22,4(sp)
  8077a4:	dd400417 	ldw	r21,16(sp)
  8077a8:	0027883a 	mov	r19,zero
  8077ac:	ac800017 	ldw	r18,0(r21)
  8077b0:	b4000017 	ldw	r16,0(r22)
  8077b4:	880b883a 	mov	r5,r17
  8077b8:	913fffcc 	andi	r4,r18,65535
  8077bc:	080b8a80 	call	80b8a8 <__mulsi3>
  8077c0:	9008d43a 	srli	r4,r18,16
  8077c4:	84bfffcc 	andi	r18,r16,65535
  8077c8:	1485883a 	add	r2,r2,r18
  8077cc:	14e5883a 	add	r18,r2,r19
  8077d0:	8020d43a 	srli	r16,r16,16
  8077d4:	9026d43a 	srli	r19,r18,16
  8077d8:	880b883a 	mov	r5,r17
  8077dc:	080b8a80 	call	80b8a8 <__mulsi3>
  8077e0:	1405883a 	add	r2,r2,r16
  8077e4:	14e1883a 	add	r16,r2,r19
  8077e8:	90ffffcc 	andi	r3,r18,65535
  8077ec:	8024943a 	slli	r18,r16,16
  8077f0:	ad400104 	addi	r21,r21,4
  8077f4:	b005883a 	mov	r2,r22
  8077f8:	90c6b03a 	or	r3,r18,r3
  8077fc:	b0c00015 	stw	r3,0(r22)
  807800:	8026d43a 	srli	r19,r16,16
  807804:	b5800104 	addi	r22,r22,4
  807808:	ad3fe836 	bltu	r21,r20,8077ac <__alt_data_end+0xff8077ac>
  80780c:	d8c00017 	ldw	r3,0(sp)
  807810:	14c00115 	stw	r19,4(r2)
  807814:	1c800017 	ldw	r18,0(r3)
  807818:	9024d43a 	srli	r18,r18,16
  80781c:	90002226 	beq	r18,zero,8078a8 <__multiply+0x1f0>
  807820:	d8c00117 	ldw	r3,4(sp)
  807824:	dd800417 	ldw	r22,16(sp)
  807828:	002f883a 	mov	r23,zero
  80782c:	1f000017 	ldw	fp,0(r3)
  807830:	1823883a 	mov	r17,r3
  807834:	182b883a 	mov	r21,r3
  807838:	e021883a 	mov	r16,fp
  80783c:	00000106 	br	807844 <__multiply+0x18c>
  807840:	982b883a 	mov	r21,r19
  807844:	b100000b 	ldhu	r4,0(r22)
  807848:	8020d43a 	srli	r16,r16,16
  80784c:	900b883a 	mov	r5,r18
  807850:	080b8a80 	call	80b8a8 <__mulsi3>
  807854:	1405883a 	add	r2,r2,r16
  807858:	15ef883a 	add	r23,r2,r23
  80785c:	b804943a 	slli	r2,r23,16
  807860:	e0ffffcc 	andi	r3,fp,65535
  807864:	8c400104 	addi	r17,r17,4
  807868:	10c6b03a 	or	r3,r2,r3
  80786c:	88ffff15 	stw	r3,-4(r17)
  807870:	b5800104 	addi	r22,r22,4
  807874:	b13fff17 	ldw	r4,-4(r22)
  807878:	acc00104 	addi	r19,r21,4
  80787c:	900b883a 	mov	r5,r18
  807880:	2008d43a 	srli	r4,r4,16
  807884:	9c000017 	ldw	r16,0(r19)
  807888:	080b8a80 	call	80b8a8 <__mulsi3>
  80788c:	b806d43a 	srli	r3,r23,16
  807890:	813fffcc 	andi	r4,r16,65535
  807894:	1105883a 	add	r2,r2,r4
  807898:	10f9883a 	add	fp,r2,r3
  80789c:	e02ed43a 	srli	r23,fp,16
  8078a0:	b53fe736 	bltu	r22,r20,807840 <__alt_data_end+0xff807840>
  8078a4:	af000115 	stw	fp,4(r21)
  8078a8:	d8c00017 	ldw	r3,0(sp)
  8078ac:	d9000517 	ldw	r4,20(sp)
  8078b0:	18c00104 	addi	r3,r3,4
  8078b4:	d8c00015 	stw	r3,0(sp)
  8078b8:	d8c00117 	ldw	r3,4(sp)
  8078bc:	18c00104 	addi	r3,r3,4
  8078c0:	d8c00115 	stw	r3,4(sp)
  8078c4:	d8c00017 	ldw	r3,0(sp)
  8078c8:	193fb136 	bltu	r3,r4,807790 <__alt_data_end+0xff807790>
  8078cc:	d8c00217 	ldw	r3,8(sp)
  8078d0:	00c00c0e 	bge	zero,r3,807904 <__multiply+0x24c>
  8078d4:	d8c00317 	ldw	r3,12(sp)
  8078d8:	18bfff17 	ldw	r2,-4(r3)
  8078dc:	1d7fff04 	addi	r21,r3,-4
  8078e0:	10000326 	beq	r2,zero,8078f0 <__multiply+0x238>
  8078e4:	00000706 	br	807904 <__multiply+0x24c>
  8078e8:	a8800017 	ldw	r2,0(r21)
  8078ec:	1000051e 	bne	r2,zero,807904 <__multiply+0x24c>
  8078f0:	d8c00217 	ldw	r3,8(sp)
  8078f4:	ad7fff04 	addi	r21,r21,-4
  8078f8:	18ffffc4 	addi	r3,r3,-1
  8078fc:	d8c00215 	stw	r3,8(sp)
  807900:	183ff91e 	bne	r3,zero,8078e8 <__alt_data_end+0xff8078e8>
  807904:	d8c00617 	ldw	r3,24(sp)
  807908:	d9000217 	ldw	r4,8(sp)
  80790c:	1805883a 	mov	r2,r3
  807910:	19000415 	stw	r4,16(r3)
  807914:	dfc01017 	ldw	ra,64(sp)
  807918:	df000f17 	ldw	fp,60(sp)
  80791c:	ddc00e17 	ldw	r23,56(sp)
  807920:	dd800d17 	ldw	r22,52(sp)
  807924:	dd400c17 	ldw	r21,48(sp)
  807928:	dd000b17 	ldw	r20,44(sp)
  80792c:	dcc00a17 	ldw	r19,40(sp)
  807930:	dc800917 	ldw	r18,36(sp)
  807934:	dc400817 	ldw	r17,32(sp)
  807938:	dc000717 	ldw	r16,28(sp)
  80793c:	dec01104 	addi	sp,sp,68
  807940:	f800283a 	ret

00807944 <__pow5mult>:
  807944:	defffa04 	addi	sp,sp,-24
  807948:	dcc00315 	stw	r19,12(sp)
  80794c:	dc000015 	stw	r16,0(sp)
  807950:	dfc00515 	stw	ra,20(sp)
  807954:	dd000415 	stw	r20,16(sp)
  807958:	dc800215 	stw	r18,8(sp)
  80795c:	dc400115 	stw	r17,4(sp)
  807960:	308000cc 	andi	r2,r6,3
  807964:	3021883a 	mov	r16,r6
  807968:	2027883a 	mov	r19,r4
  80796c:	10002f1e 	bne	r2,zero,807a2c <__pow5mult+0xe8>
  807970:	2825883a 	mov	r18,r5
  807974:	8021d0ba 	srai	r16,r16,2
  807978:	80001a26 	beq	r16,zero,8079e4 <__pow5mult+0xa0>
  80797c:	9c401217 	ldw	r17,72(r19)
  807980:	8800061e 	bne	r17,zero,80799c <__pow5mult+0x58>
  807984:	00003406 	br	807a58 <__pow5mult+0x114>
  807988:	8021d07a 	srai	r16,r16,1
  80798c:	80001526 	beq	r16,zero,8079e4 <__pow5mult+0xa0>
  807990:	88800017 	ldw	r2,0(r17)
  807994:	10001c26 	beq	r2,zero,807a08 <__pow5mult+0xc4>
  807998:	1023883a 	mov	r17,r2
  80799c:	8080004c 	andi	r2,r16,1
  8079a0:	103ff926 	beq	r2,zero,807988 <__alt_data_end+0xff807988>
  8079a4:	880d883a 	mov	r6,r17
  8079a8:	900b883a 	mov	r5,r18
  8079ac:	9809883a 	mov	r4,r19
  8079b0:	08076b80 	call	8076b8 <__multiply>
  8079b4:	90001b26 	beq	r18,zero,807a24 <__pow5mult+0xe0>
  8079b8:	91000117 	ldw	r4,4(r18)
  8079bc:	98c01317 	ldw	r3,76(r19)
  8079c0:	8021d07a 	srai	r16,r16,1
  8079c4:	2109883a 	add	r4,r4,r4
  8079c8:	2109883a 	add	r4,r4,r4
  8079cc:	1907883a 	add	r3,r3,r4
  8079d0:	19000017 	ldw	r4,0(r3)
  8079d4:	91000015 	stw	r4,0(r18)
  8079d8:	1c800015 	stw	r18,0(r3)
  8079dc:	1025883a 	mov	r18,r2
  8079e0:	803feb1e 	bne	r16,zero,807990 <__alt_data_end+0xff807990>
  8079e4:	9005883a 	mov	r2,r18
  8079e8:	dfc00517 	ldw	ra,20(sp)
  8079ec:	dd000417 	ldw	r20,16(sp)
  8079f0:	dcc00317 	ldw	r19,12(sp)
  8079f4:	dc800217 	ldw	r18,8(sp)
  8079f8:	dc400117 	ldw	r17,4(sp)
  8079fc:	dc000017 	ldw	r16,0(sp)
  807a00:	dec00604 	addi	sp,sp,24
  807a04:	f800283a 	ret
  807a08:	880d883a 	mov	r6,r17
  807a0c:	880b883a 	mov	r5,r17
  807a10:	9809883a 	mov	r4,r19
  807a14:	08076b80 	call	8076b8 <__multiply>
  807a18:	88800015 	stw	r2,0(r17)
  807a1c:	10000015 	stw	zero,0(r2)
  807a20:	003fdd06 	br	807998 <__alt_data_end+0xff807998>
  807a24:	1025883a 	mov	r18,r2
  807a28:	003fd706 	br	807988 <__alt_data_end+0xff807988>
  807a2c:	10bfffc4 	addi	r2,r2,-1
  807a30:	1085883a 	add	r2,r2,r2
  807a34:	00c02074 	movhi	r3,129
  807a38:	18c3ed04 	addi	r3,r3,4020
  807a3c:	1085883a 	add	r2,r2,r2
  807a40:	1885883a 	add	r2,r3,r2
  807a44:	11800017 	ldw	r6,0(r2)
  807a48:	000f883a 	mov	r7,zero
  807a4c:	08073180 	call	807318 <__multadd>
  807a50:	1025883a 	mov	r18,r2
  807a54:	003fc706 	br	807974 <__alt_data_end+0xff807974>
  807a58:	05000044 	movi	r20,1
  807a5c:	a00b883a 	mov	r5,r20
  807a60:	9809883a 	mov	r4,r19
  807a64:	08072480 	call	807248 <_Balloc>
  807a68:	1023883a 	mov	r17,r2
  807a6c:	00809c44 	movi	r2,625
  807a70:	88800515 	stw	r2,20(r17)
  807a74:	8d000415 	stw	r20,16(r17)
  807a78:	9c401215 	stw	r17,72(r19)
  807a7c:	88000015 	stw	zero,0(r17)
  807a80:	003fc606 	br	80799c <__alt_data_end+0xff80799c>

00807a84 <__lshift>:
  807a84:	defff904 	addi	sp,sp,-28
  807a88:	dd400515 	stw	r21,20(sp)
  807a8c:	dcc00315 	stw	r19,12(sp)
  807a90:	302bd17a 	srai	r21,r6,5
  807a94:	2cc00417 	ldw	r19,16(r5)
  807a98:	28800217 	ldw	r2,8(r5)
  807a9c:	dd000415 	stw	r20,16(sp)
  807aa0:	ace7883a 	add	r19,r21,r19
  807aa4:	dc800215 	stw	r18,8(sp)
  807aa8:	dc400115 	stw	r17,4(sp)
  807aac:	dc000015 	stw	r16,0(sp)
  807ab0:	dfc00615 	stw	ra,24(sp)
  807ab4:	9c000044 	addi	r16,r19,1
  807ab8:	2823883a 	mov	r17,r5
  807abc:	3029883a 	mov	r20,r6
  807ac0:	2025883a 	mov	r18,r4
  807ac4:	29400117 	ldw	r5,4(r5)
  807ac8:	1400030e 	bge	r2,r16,807ad8 <__lshift+0x54>
  807acc:	1085883a 	add	r2,r2,r2
  807ad0:	29400044 	addi	r5,r5,1
  807ad4:	143ffd16 	blt	r2,r16,807acc <__alt_data_end+0xff807acc>
  807ad8:	9009883a 	mov	r4,r18
  807adc:	08072480 	call	807248 <_Balloc>
  807ae0:	10c00504 	addi	r3,r2,20
  807ae4:	0540070e 	bge	zero,r21,807b04 <__lshift+0x80>
  807ae8:	ad6b883a 	add	r21,r21,r21
  807aec:	ad6b883a 	add	r21,r21,r21
  807af0:	1809883a 	mov	r4,r3
  807af4:	1d47883a 	add	r3,r3,r21
  807af8:	20000015 	stw	zero,0(r4)
  807afc:	21000104 	addi	r4,r4,4
  807b00:	193ffd1e 	bne	r3,r4,807af8 <__alt_data_end+0xff807af8>
  807b04:	8a000417 	ldw	r8,16(r17)
  807b08:	89000504 	addi	r4,r17,20
  807b0c:	a18007cc 	andi	r6,r20,31
  807b10:	4211883a 	add	r8,r8,r8
  807b14:	4211883a 	add	r8,r8,r8
  807b18:	2211883a 	add	r8,r4,r8
  807b1c:	30002326 	beq	r6,zero,807bac <__lshift+0x128>
  807b20:	02400804 	movi	r9,32
  807b24:	4993c83a 	sub	r9,r9,r6
  807b28:	000b883a 	mov	r5,zero
  807b2c:	21c00017 	ldw	r7,0(r4)
  807b30:	1815883a 	mov	r10,r3
  807b34:	18c00104 	addi	r3,r3,4
  807b38:	398e983a 	sll	r7,r7,r6
  807b3c:	21000104 	addi	r4,r4,4
  807b40:	394ab03a 	or	r5,r7,r5
  807b44:	197fff15 	stw	r5,-4(r3)
  807b48:	217fff17 	ldw	r5,-4(r4)
  807b4c:	2a4ad83a 	srl	r5,r5,r9
  807b50:	223ff636 	bltu	r4,r8,807b2c <__alt_data_end+0xff807b2c>
  807b54:	51400115 	stw	r5,4(r10)
  807b58:	28001a1e 	bne	r5,zero,807bc4 <__lshift+0x140>
  807b5c:	843fffc4 	addi	r16,r16,-1
  807b60:	14000415 	stw	r16,16(r2)
  807b64:	88000826 	beq	r17,zero,807b88 <__lshift+0x104>
  807b68:	89000117 	ldw	r4,4(r17)
  807b6c:	90c01317 	ldw	r3,76(r18)
  807b70:	2109883a 	add	r4,r4,r4
  807b74:	2109883a 	add	r4,r4,r4
  807b78:	1907883a 	add	r3,r3,r4
  807b7c:	19000017 	ldw	r4,0(r3)
  807b80:	89000015 	stw	r4,0(r17)
  807b84:	1c400015 	stw	r17,0(r3)
  807b88:	dfc00617 	ldw	ra,24(sp)
  807b8c:	dd400517 	ldw	r21,20(sp)
  807b90:	dd000417 	ldw	r20,16(sp)
  807b94:	dcc00317 	ldw	r19,12(sp)
  807b98:	dc800217 	ldw	r18,8(sp)
  807b9c:	dc400117 	ldw	r17,4(sp)
  807ba0:	dc000017 	ldw	r16,0(sp)
  807ba4:	dec00704 	addi	sp,sp,28
  807ba8:	f800283a 	ret
  807bac:	21400017 	ldw	r5,0(r4)
  807bb0:	18c00104 	addi	r3,r3,4
  807bb4:	21000104 	addi	r4,r4,4
  807bb8:	197fff15 	stw	r5,-4(r3)
  807bbc:	223ffb36 	bltu	r4,r8,807bac <__alt_data_end+0xff807bac>
  807bc0:	003fe606 	br	807b5c <__alt_data_end+0xff807b5c>
  807bc4:	9c000084 	addi	r16,r19,2
  807bc8:	003fe406 	br	807b5c <__alt_data_end+0xff807b5c>

00807bcc <__mcmp>:
  807bcc:	20800417 	ldw	r2,16(r4)
  807bd0:	28c00417 	ldw	r3,16(r5)
  807bd4:	10c5c83a 	sub	r2,r2,r3
  807bd8:	1000111e 	bne	r2,zero,807c20 <__mcmp+0x54>
  807bdc:	18c7883a 	add	r3,r3,r3
  807be0:	18c7883a 	add	r3,r3,r3
  807be4:	21000504 	addi	r4,r4,20
  807be8:	29400504 	addi	r5,r5,20
  807bec:	20c5883a 	add	r2,r4,r3
  807bf0:	28cb883a 	add	r5,r5,r3
  807bf4:	00000106 	br	807bfc <__mcmp+0x30>
  807bf8:	20800a2e 	bgeu	r4,r2,807c24 <__mcmp+0x58>
  807bfc:	10bfff04 	addi	r2,r2,-4
  807c00:	297fff04 	addi	r5,r5,-4
  807c04:	11800017 	ldw	r6,0(r2)
  807c08:	28c00017 	ldw	r3,0(r5)
  807c0c:	30fffa26 	beq	r6,r3,807bf8 <__alt_data_end+0xff807bf8>
  807c10:	30c00236 	bltu	r6,r3,807c1c <__mcmp+0x50>
  807c14:	00800044 	movi	r2,1
  807c18:	f800283a 	ret
  807c1c:	00bfffc4 	movi	r2,-1
  807c20:	f800283a 	ret
  807c24:	0005883a 	mov	r2,zero
  807c28:	f800283a 	ret

00807c2c <__mdiff>:
  807c2c:	28c00417 	ldw	r3,16(r5)
  807c30:	30800417 	ldw	r2,16(r6)
  807c34:	defffa04 	addi	sp,sp,-24
  807c38:	dcc00315 	stw	r19,12(sp)
  807c3c:	dc800215 	stw	r18,8(sp)
  807c40:	dfc00515 	stw	ra,20(sp)
  807c44:	dd000415 	stw	r20,16(sp)
  807c48:	dc400115 	stw	r17,4(sp)
  807c4c:	dc000015 	stw	r16,0(sp)
  807c50:	1887c83a 	sub	r3,r3,r2
  807c54:	2825883a 	mov	r18,r5
  807c58:	3027883a 	mov	r19,r6
  807c5c:	1800141e 	bne	r3,zero,807cb0 <__mdiff+0x84>
  807c60:	1085883a 	add	r2,r2,r2
  807c64:	1085883a 	add	r2,r2,r2
  807c68:	2a000504 	addi	r8,r5,20
  807c6c:	34000504 	addi	r16,r6,20
  807c70:	4087883a 	add	r3,r8,r2
  807c74:	8085883a 	add	r2,r16,r2
  807c78:	00000106 	br	807c80 <__mdiff+0x54>
  807c7c:	40c0592e 	bgeu	r8,r3,807de4 <__mdiff+0x1b8>
  807c80:	18ffff04 	addi	r3,r3,-4
  807c84:	10bfff04 	addi	r2,r2,-4
  807c88:	19c00017 	ldw	r7,0(r3)
  807c8c:	11400017 	ldw	r5,0(r2)
  807c90:	397ffa26 	beq	r7,r5,807c7c <__alt_data_end+0xff807c7c>
  807c94:	3940592e 	bgeu	r7,r5,807dfc <__mdiff+0x1d0>
  807c98:	9005883a 	mov	r2,r18
  807c9c:	4023883a 	mov	r17,r8
  807ca0:	9825883a 	mov	r18,r19
  807ca4:	05000044 	movi	r20,1
  807ca8:	1027883a 	mov	r19,r2
  807cac:	00000406 	br	807cc0 <__mdiff+0x94>
  807cb0:	18005616 	blt	r3,zero,807e0c <__mdiff+0x1e0>
  807cb4:	34400504 	addi	r17,r6,20
  807cb8:	2c000504 	addi	r16,r5,20
  807cbc:	0029883a 	mov	r20,zero
  807cc0:	91400117 	ldw	r5,4(r18)
  807cc4:	08072480 	call	807248 <_Balloc>
  807cc8:	92400417 	ldw	r9,16(r18)
  807ccc:	9b000417 	ldw	r12,16(r19)
  807cd0:	12c00504 	addi	r11,r2,20
  807cd4:	4a51883a 	add	r8,r9,r9
  807cd8:	6319883a 	add	r12,r12,r12
  807cdc:	4211883a 	add	r8,r8,r8
  807ce0:	6319883a 	add	r12,r12,r12
  807ce4:	15000315 	stw	r20,12(r2)
  807ce8:	8211883a 	add	r8,r16,r8
  807cec:	8b19883a 	add	r12,r17,r12
  807cf0:	0007883a 	mov	r3,zero
  807cf4:	81400017 	ldw	r5,0(r16)
  807cf8:	89c00017 	ldw	r7,0(r17)
  807cfc:	59800104 	addi	r6,r11,4
  807d00:	293fffcc 	andi	r4,r5,65535
  807d04:	20c7883a 	add	r3,r4,r3
  807d08:	393fffcc 	andi	r4,r7,65535
  807d0c:	1909c83a 	sub	r4,r3,r4
  807d10:	280ad43a 	srli	r5,r5,16
  807d14:	380ed43a 	srli	r7,r7,16
  807d18:	2007d43a 	srai	r3,r4,16
  807d1c:	213fffcc 	andi	r4,r4,65535
  807d20:	29cbc83a 	sub	r5,r5,r7
  807d24:	28c7883a 	add	r3,r5,r3
  807d28:	180a943a 	slli	r5,r3,16
  807d2c:	8c400104 	addi	r17,r17,4
  807d30:	84000104 	addi	r16,r16,4
  807d34:	2908b03a 	or	r4,r5,r4
  807d38:	59000015 	stw	r4,0(r11)
  807d3c:	1807d43a 	srai	r3,r3,16
  807d40:	3015883a 	mov	r10,r6
  807d44:	3017883a 	mov	r11,r6
  807d48:	8b3fea36 	bltu	r17,r12,807cf4 <__alt_data_end+0xff807cf4>
  807d4c:	8200162e 	bgeu	r16,r8,807da8 <__mdiff+0x17c>
  807d50:	8017883a 	mov	r11,r16
  807d54:	59400017 	ldw	r5,0(r11)
  807d58:	31800104 	addi	r6,r6,4
  807d5c:	5ac00104 	addi	r11,r11,4
  807d60:	293fffcc 	andi	r4,r5,65535
  807d64:	20c7883a 	add	r3,r4,r3
  807d68:	280ed43a 	srli	r7,r5,16
  807d6c:	180bd43a 	srai	r5,r3,16
  807d70:	193fffcc 	andi	r4,r3,65535
  807d74:	3947883a 	add	r3,r7,r5
  807d78:	180a943a 	slli	r5,r3,16
  807d7c:	1807d43a 	srai	r3,r3,16
  807d80:	2908b03a 	or	r4,r5,r4
  807d84:	313fff15 	stw	r4,-4(r6)
  807d88:	5a3ff236 	bltu	r11,r8,807d54 <__alt_data_end+0xff807d54>
  807d8c:	0406303a 	nor	r3,zero,r16
  807d90:	1a07883a 	add	r3,r3,r8
  807d94:	1806d0ba 	srli	r3,r3,2
  807d98:	18c00044 	addi	r3,r3,1
  807d9c:	18c7883a 	add	r3,r3,r3
  807da0:	18c7883a 	add	r3,r3,r3
  807da4:	50d5883a 	add	r10,r10,r3
  807da8:	50ffff04 	addi	r3,r10,-4
  807dac:	2000041e 	bne	r4,zero,807dc0 <__mdiff+0x194>
  807db0:	18ffff04 	addi	r3,r3,-4
  807db4:	19000017 	ldw	r4,0(r3)
  807db8:	4a7fffc4 	addi	r9,r9,-1
  807dbc:	203ffc26 	beq	r4,zero,807db0 <__alt_data_end+0xff807db0>
  807dc0:	12400415 	stw	r9,16(r2)
  807dc4:	dfc00517 	ldw	ra,20(sp)
  807dc8:	dd000417 	ldw	r20,16(sp)
  807dcc:	dcc00317 	ldw	r19,12(sp)
  807dd0:	dc800217 	ldw	r18,8(sp)
  807dd4:	dc400117 	ldw	r17,4(sp)
  807dd8:	dc000017 	ldw	r16,0(sp)
  807ddc:	dec00604 	addi	sp,sp,24
  807de0:	f800283a 	ret
  807de4:	000b883a 	mov	r5,zero
  807de8:	08072480 	call	807248 <_Balloc>
  807dec:	00c00044 	movi	r3,1
  807df0:	10c00415 	stw	r3,16(r2)
  807df4:	10000515 	stw	zero,20(r2)
  807df8:	003ff206 	br	807dc4 <__alt_data_end+0xff807dc4>
  807dfc:	8023883a 	mov	r17,r16
  807e00:	0029883a 	mov	r20,zero
  807e04:	4021883a 	mov	r16,r8
  807e08:	003fad06 	br	807cc0 <__alt_data_end+0xff807cc0>
  807e0c:	9005883a 	mov	r2,r18
  807e10:	94400504 	addi	r17,r18,20
  807e14:	9c000504 	addi	r16,r19,20
  807e18:	9825883a 	mov	r18,r19
  807e1c:	05000044 	movi	r20,1
  807e20:	1027883a 	mov	r19,r2
  807e24:	003fa606 	br	807cc0 <__alt_data_end+0xff807cc0>

00807e28 <__ulp>:
  807e28:	295ffc2c 	andhi	r5,r5,32752
  807e2c:	00bf3034 	movhi	r2,64704
  807e30:	2887883a 	add	r3,r5,r2
  807e34:	00c0020e 	bge	zero,r3,807e40 <__ulp+0x18>
  807e38:	0005883a 	mov	r2,zero
  807e3c:	f800283a 	ret
  807e40:	00c7c83a 	sub	r3,zero,r3
  807e44:	1807d53a 	srai	r3,r3,20
  807e48:	008004c4 	movi	r2,19
  807e4c:	10c00b0e 	bge	r2,r3,807e7c <__ulp+0x54>
  807e50:	18bffb04 	addi	r2,r3,-20
  807e54:	01000784 	movi	r4,30
  807e58:	0007883a 	mov	r3,zero
  807e5c:	20800516 	blt	r4,r2,807e74 <__ulp+0x4c>
  807e60:	010007c4 	movi	r4,31
  807e64:	2089c83a 	sub	r4,r4,r2
  807e68:	00800044 	movi	r2,1
  807e6c:	1104983a 	sll	r2,r2,r4
  807e70:	f800283a 	ret
  807e74:	00800044 	movi	r2,1
  807e78:	f800283a 	ret
  807e7c:	01400234 	movhi	r5,8
  807e80:	28c7d83a 	sra	r3,r5,r3
  807e84:	0005883a 	mov	r2,zero
  807e88:	f800283a 	ret

00807e8c <__b2d>:
  807e8c:	defffa04 	addi	sp,sp,-24
  807e90:	dc000015 	stw	r16,0(sp)
  807e94:	24000417 	ldw	r16,16(r4)
  807e98:	dc400115 	stw	r17,4(sp)
  807e9c:	24400504 	addi	r17,r4,20
  807ea0:	8421883a 	add	r16,r16,r16
  807ea4:	8421883a 	add	r16,r16,r16
  807ea8:	8c21883a 	add	r16,r17,r16
  807eac:	dc800215 	stw	r18,8(sp)
  807eb0:	84bfff17 	ldw	r18,-4(r16)
  807eb4:	dd000415 	stw	r20,16(sp)
  807eb8:	dcc00315 	stw	r19,12(sp)
  807ebc:	9009883a 	mov	r4,r18
  807ec0:	2829883a 	mov	r20,r5
  807ec4:	dfc00515 	stw	ra,20(sp)
  807ec8:	08075640 	call	807564 <__hi0bits>
  807ecc:	00c00804 	movi	r3,32
  807ed0:	1889c83a 	sub	r4,r3,r2
  807ed4:	a1000015 	stw	r4,0(r20)
  807ed8:	01000284 	movi	r4,10
  807edc:	84ffff04 	addi	r19,r16,-4
  807ee0:	20801216 	blt	r4,r2,807f2c <__b2d+0xa0>
  807ee4:	018002c4 	movi	r6,11
  807ee8:	308dc83a 	sub	r6,r6,r2
  807eec:	9186d83a 	srl	r3,r18,r6
  807ef0:	18cffc34 	orhi	r3,r3,16368
  807ef4:	8cc0212e 	bgeu	r17,r19,807f7c <__b2d+0xf0>
  807ef8:	813ffe17 	ldw	r4,-8(r16)
  807efc:	218cd83a 	srl	r6,r4,r6
  807f00:	10800544 	addi	r2,r2,21
  807f04:	9084983a 	sll	r2,r18,r2
  807f08:	1184b03a 	or	r2,r2,r6
  807f0c:	dfc00517 	ldw	ra,20(sp)
  807f10:	dd000417 	ldw	r20,16(sp)
  807f14:	dcc00317 	ldw	r19,12(sp)
  807f18:	dc800217 	ldw	r18,8(sp)
  807f1c:	dc400117 	ldw	r17,4(sp)
  807f20:	dc000017 	ldw	r16,0(sp)
  807f24:	dec00604 	addi	sp,sp,24
  807f28:	f800283a 	ret
  807f2c:	8cc00f2e 	bgeu	r17,r19,807f6c <__b2d+0xe0>
  807f30:	117ffd44 	addi	r5,r2,-11
  807f34:	80bffe17 	ldw	r2,-8(r16)
  807f38:	28000e26 	beq	r5,zero,807f74 <__b2d+0xe8>
  807f3c:	1949c83a 	sub	r4,r3,r5
  807f40:	9164983a 	sll	r18,r18,r5
  807f44:	1106d83a 	srl	r3,r2,r4
  807f48:	81bffe04 	addi	r6,r16,-8
  807f4c:	948ffc34 	orhi	r18,r18,16368
  807f50:	90c6b03a 	or	r3,r18,r3
  807f54:	89800e2e 	bgeu	r17,r6,807f90 <__b2d+0x104>
  807f58:	81bffd17 	ldw	r6,-12(r16)
  807f5c:	1144983a 	sll	r2,r2,r5
  807f60:	310ad83a 	srl	r5,r6,r4
  807f64:	2884b03a 	or	r2,r5,r2
  807f68:	003fe806 	br	807f0c <__alt_data_end+0xff807f0c>
  807f6c:	10bffd44 	addi	r2,r2,-11
  807f70:	1000041e 	bne	r2,zero,807f84 <__b2d+0xf8>
  807f74:	90cffc34 	orhi	r3,r18,16368
  807f78:	003fe406 	br	807f0c <__alt_data_end+0xff807f0c>
  807f7c:	000d883a 	mov	r6,zero
  807f80:	003fdf06 	br	807f00 <__alt_data_end+0xff807f00>
  807f84:	90a4983a 	sll	r18,r18,r2
  807f88:	0005883a 	mov	r2,zero
  807f8c:	003ff906 	br	807f74 <__alt_data_end+0xff807f74>
  807f90:	1144983a 	sll	r2,r2,r5
  807f94:	003fdd06 	br	807f0c <__alt_data_end+0xff807f0c>

00807f98 <__d2b>:
  807f98:	defff804 	addi	sp,sp,-32
  807f9c:	dc000215 	stw	r16,8(sp)
  807fa0:	3021883a 	mov	r16,r6
  807fa4:	dc400315 	stw	r17,12(sp)
  807fa8:	8022907a 	slli	r17,r16,1
  807fac:	dd000615 	stw	r20,24(sp)
  807fb0:	2829883a 	mov	r20,r5
  807fb4:	01400044 	movi	r5,1
  807fb8:	dcc00515 	stw	r19,20(sp)
  807fbc:	dc800415 	stw	r18,16(sp)
  807fc0:	dfc00715 	stw	ra,28(sp)
  807fc4:	3825883a 	mov	r18,r7
  807fc8:	8822d57a 	srli	r17,r17,21
  807fcc:	08072480 	call	807248 <_Balloc>
  807fd0:	1027883a 	mov	r19,r2
  807fd4:	00800434 	movhi	r2,16
  807fd8:	10bfffc4 	addi	r2,r2,-1
  807fdc:	808c703a 	and	r6,r16,r2
  807fe0:	88000126 	beq	r17,zero,807fe8 <__d2b+0x50>
  807fe4:	31800434 	orhi	r6,r6,16
  807fe8:	d9800015 	stw	r6,0(sp)
  807fec:	a0002426 	beq	r20,zero,808080 <__d2b+0xe8>
  807ff0:	d9000104 	addi	r4,sp,4
  807ff4:	dd000115 	stw	r20,4(sp)
  807ff8:	08075cc0 	call	8075cc <__lo0bits>
  807ffc:	d8c00017 	ldw	r3,0(sp)
  808000:	10002f1e 	bne	r2,zero,8080c0 <__d2b+0x128>
  808004:	d9000117 	ldw	r4,4(sp)
  808008:	99000515 	stw	r4,20(r19)
  80800c:	1821003a 	cmpeq	r16,r3,zero
  808010:	01000084 	movi	r4,2
  808014:	2421c83a 	sub	r16,r4,r16
  808018:	98c00615 	stw	r3,24(r19)
  80801c:	9c000415 	stw	r16,16(r19)
  808020:	88001f1e 	bne	r17,zero,8080a0 <__d2b+0x108>
  808024:	10bef384 	addi	r2,r2,-1074
  808028:	90800015 	stw	r2,0(r18)
  80802c:	00900034 	movhi	r2,16384
  808030:	10bfffc4 	addi	r2,r2,-1
  808034:	8085883a 	add	r2,r16,r2
  808038:	1085883a 	add	r2,r2,r2
  80803c:	1085883a 	add	r2,r2,r2
  808040:	9885883a 	add	r2,r19,r2
  808044:	11000517 	ldw	r4,20(r2)
  808048:	8020917a 	slli	r16,r16,5
  80804c:	08075640 	call	807564 <__hi0bits>
  808050:	d8c00817 	ldw	r3,32(sp)
  808054:	8085c83a 	sub	r2,r16,r2
  808058:	18800015 	stw	r2,0(r3)
  80805c:	9805883a 	mov	r2,r19
  808060:	dfc00717 	ldw	ra,28(sp)
  808064:	dd000617 	ldw	r20,24(sp)
  808068:	dcc00517 	ldw	r19,20(sp)
  80806c:	dc800417 	ldw	r18,16(sp)
  808070:	dc400317 	ldw	r17,12(sp)
  808074:	dc000217 	ldw	r16,8(sp)
  808078:	dec00804 	addi	sp,sp,32
  80807c:	f800283a 	ret
  808080:	d809883a 	mov	r4,sp
  808084:	08075cc0 	call	8075cc <__lo0bits>
  808088:	d8c00017 	ldw	r3,0(sp)
  80808c:	04000044 	movi	r16,1
  808090:	9c000415 	stw	r16,16(r19)
  808094:	98c00515 	stw	r3,20(r19)
  808098:	10800804 	addi	r2,r2,32
  80809c:	883fe126 	beq	r17,zero,808024 <__alt_data_end+0xff808024>
  8080a0:	00c00d44 	movi	r3,53
  8080a4:	8c7ef344 	addi	r17,r17,-1075
  8080a8:	88a3883a 	add	r17,r17,r2
  8080ac:	1885c83a 	sub	r2,r3,r2
  8080b0:	d8c00817 	ldw	r3,32(sp)
  8080b4:	94400015 	stw	r17,0(r18)
  8080b8:	18800015 	stw	r2,0(r3)
  8080bc:	003fe706 	br	80805c <__alt_data_end+0xff80805c>
  8080c0:	01000804 	movi	r4,32
  8080c4:	2089c83a 	sub	r4,r4,r2
  8080c8:	1908983a 	sll	r4,r3,r4
  8080cc:	d9400117 	ldw	r5,4(sp)
  8080d0:	1886d83a 	srl	r3,r3,r2
  8080d4:	2148b03a 	or	r4,r4,r5
  8080d8:	99000515 	stw	r4,20(r19)
  8080dc:	d8c00015 	stw	r3,0(sp)
  8080e0:	003fca06 	br	80800c <__alt_data_end+0xff80800c>

008080e4 <__ratio>:
  8080e4:	defff904 	addi	sp,sp,-28
  8080e8:	dc400315 	stw	r17,12(sp)
  8080ec:	2823883a 	mov	r17,r5
  8080f0:	d9400104 	addi	r5,sp,4
  8080f4:	dfc00615 	stw	ra,24(sp)
  8080f8:	dcc00515 	stw	r19,20(sp)
  8080fc:	dc800415 	stw	r18,16(sp)
  808100:	2027883a 	mov	r19,r4
  808104:	dc000215 	stw	r16,8(sp)
  808108:	0807e8c0 	call	807e8c <__b2d>
  80810c:	d80b883a 	mov	r5,sp
  808110:	8809883a 	mov	r4,r17
  808114:	1025883a 	mov	r18,r2
  808118:	1821883a 	mov	r16,r3
  80811c:	0807e8c0 	call	807e8c <__b2d>
  808120:	8a000417 	ldw	r8,16(r17)
  808124:	99000417 	ldw	r4,16(r19)
  808128:	d9400117 	ldw	r5,4(sp)
  80812c:	2209c83a 	sub	r4,r4,r8
  808130:	2010917a 	slli	r8,r4,5
  808134:	d9000017 	ldw	r4,0(sp)
  808138:	2909c83a 	sub	r4,r5,r4
  80813c:	4109883a 	add	r4,r8,r4
  808140:	01000e0e 	bge	zero,r4,80817c <__ratio+0x98>
  808144:	2008953a 	slli	r4,r4,20
  808148:	2421883a 	add	r16,r4,r16
  80814c:	100d883a 	mov	r6,r2
  808150:	180f883a 	mov	r7,r3
  808154:	9009883a 	mov	r4,r18
  808158:	800b883a 	mov	r5,r16
  80815c:	080b8d00 	call	80b8d0 <__divdf3>
  808160:	dfc00617 	ldw	ra,24(sp)
  808164:	dcc00517 	ldw	r19,20(sp)
  808168:	dc800417 	ldw	r18,16(sp)
  80816c:	dc400317 	ldw	r17,12(sp)
  808170:	dc000217 	ldw	r16,8(sp)
  808174:	dec00704 	addi	sp,sp,28
  808178:	f800283a 	ret
  80817c:	2008953a 	slli	r4,r4,20
  808180:	1907c83a 	sub	r3,r3,r4
  808184:	003ff106 	br	80814c <__alt_data_end+0xff80814c>

00808188 <_mprec_log10>:
  808188:	defffe04 	addi	sp,sp,-8
  80818c:	dc000015 	stw	r16,0(sp)
  808190:	dfc00115 	stw	ra,4(sp)
  808194:	008005c4 	movi	r2,23
  808198:	2021883a 	mov	r16,r4
  80819c:	11000d0e 	bge	r2,r4,8081d4 <_mprec_log10+0x4c>
  8081a0:	0005883a 	mov	r2,zero
  8081a4:	00cffc34 	movhi	r3,16368
  8081a8:	843fffc4 	addi	r16,r16,-1
  8081ac:	000d883a 	mov	r6,zero
  8081b0:	01d00934 	movhi	r7,16420
  8081b4:	1009883a 	mov	r4,r2
  8081b8:	180b883a 	mov	r5,r3
  8081bc:	080c4f80 	call	80c4f8 <__muldf3>
  8081c0:	803ff91e 	bne	r16,zero,8081a8 <__alt_data_end+0xff8081a8>
  8081c4:	dfc00117 	ldw	ra,4(sp)
  8081c8:	dc000017 	ldw	r16,0(sp)
  8081cc:	dec00204 	addi	sp,sp,8
  8081d0:	f800283a 	ret
  8081d4:	202090fa 	slli	r16,r4,3
  8081d8:	00802074 	movhi	r2,129
  8081dc:	10840404 	addi	r2,r2,4112
  8081e0:	1421883a 	add	r16,r2,r16
  8081e4:	80800017 	ldw	r2,0(r16)
  8081e8:	80c00117 	ldw	r3,4(r16)
  8081ec:	dfc00117 	ldw	ra,4(sp)
  8081f0:	dc000017 	ldw	r16,0(sp)
  8081f4:	dec00204 	addi	sp,sp,8
  8081f8:	f800283a 	ret

008081fc <__copybits>:
  8081fc:	297fffc4 	addi	r5,r5,-1
  808200:	280fd17a 	srai	r7,r5,5
  808204:	30c00417 	ldw	r3,16(r6)
  808208:	30800504 	addi	r2,r6,20
  80820c:	39c00044 	addi	r7,r7,1
  808210:	18c7883a 	add	r3,r3,r3
  808214:	39cf883a 	add	r7,r7,r7
  808218:	18c7883a 	add	r3,r3,r3
  80821c:	39cf883a 	add	r7,r7,r7
  808220:	10c7883a 	add	r3,r2,r3
  808224:	21cf883a 	add	r7,r4,r7
  808228:	10c00d2e 	bgeu	r2,r3,808260 <__copybits+0x64>
  80822c:	200b883a 	mov	r5,r4
  808230:	12000017 	ldw	r8,0(r2)
  808234:	29400104 	addi	r5,r5,4
  808238:	10800104 	addi	r2,r2,4
  80823c:	2a3fff15 	stw	r8,-4(r5)
  808240:	10fffb36 	bltu	r2,r3,808230 <__alt_data_end+0xff808230>
  808244:	1985c83a 	sub	r2,r3,r6
  808248:	10bffac4 	addi	r2,r2,-21
  80824c:	1004d0ba 	srli	r2,r2,2
  808250:	10800044 	addi	r2,r2,1
  808254:	1085883a 	add	r2,r2,r2
  808258:	1085883a 	add	r2,r2,r2
  80825c:	2089883a 	add	r4,r4,r2
  808260:	21c0032e 	bgeu	r4,r7,808270 <__copybits+0x74>
  808264:	20000015 	stw	zero,0(r4)
  808268:	21000104 	addi	r4,r4,4
  80826c:	21fffd36 	bltu	r4,r7,808264 <__alt_data_end+0xff808264>
  808270:	f800283a 	ret

00808274 <__any_on>:
  808274:	20c00417 	ldw	r3,16(r4)
  808278:	2805d17a 	srai	r2,r5,5
  80827c:	21000504 	addi	r4,r4,20
  808280:	18800d0e 	bge	r3,r2,8082b8 <__any_on+0x44>
  808284:	18c7883a 	add	r3,r3,r3
  808288:	18c7883a 	add	r3,r3,r3
  80828c:	20c7883a 	add	r3,r4,r3
  808290:	20c0192e 	bgeu	r4,r3,8082f8 <__any_on+0x84>
  808294:	18bfff17 	ldw	r2,-4(r3)
  808298:	18ffff04 	addi	r3,r3,-4
  80829c:	1000041e 	bne	r2,zero,8082b0 <__any_on+0x3c>
  8082a0:	20c0142e 	bgeu	r4,r3,8082f4 <__any_on+0x80>
  8082a4:	18ffff04 	addi	r3,r3,-4
  8082a8:	19400017 	ldw	r5,0(r3)
  8082ac:	283ffc26 	beq	r5,zero,8082a0 <__alt_data_end+0xff8082a0>
  8082b0:	00800044 	movi	r2,1
  8082b4:	f800283a 	ret
  8082b8:	10c00a0e 	bge	r2,r3,8082e4 <__any_on+0x70>
  8082bc:	1085883a 	add	r2,r2,r2
  8082c0:	1085883a 	add	r2,r2,r2
  8082c4:	294007cc 	andi	r5,r5,31
  8082c8:	2087883a 	add	r3,r4,r2
  8082cc:	283ff026 	beq	r5,zero,808290 <__alt_data_end+0xff808290>
  8082d0:	19800017 	ldw	r6,0(r3)
  8082d4:	3144d83a 	srl	r2,r6,r5
  8082d8:	114a983a 	sll	r5,r2,r5
  8082dc:	317ff41e 	bne	r6,r5,8082b0 <__alt_data_end+0xff8082b0>
  8082e0:	003feb06 	br	808290 <__alt_data_end+0xff808290>
  8082e4:	1085883a 	add	r2,r2,r2
  8082e8:	1085883a 	add	r2,r2,r2
  8082ec:	2087883a 	add	r3,r4,r2
  8082f0:	003fe706 	br	808290 <__alt_data_end+0xff808290>
  8082f4:	f800283a 	ret
  8082f8:	0005883a 	mov	r2,zero
  8082fc:	f800283a 	ret

00808300 <_realloc_r>:
  808300:	defff604 	addi	sp,sp,-40
  808304:	dc800215 	stw	r18,8(sp)
  808308:	dfc00915 	stw	ra,36(sp)
  80830c:	df000815 	stw	fp,32(sp)
  808310:	ddc00715 	stw	r23,28(sp)
  808314:	dd800615 	stw	r22,24(sp)
  808318:	dd400515 	stw	r21,20(sp)
  80831c:	dd000415 	stw	r20,16(sp)
  808320:	dcc00315 	stw	r19,12(sp)
  808324:	dc400115 	stw	r17,4(sp)
  808328:	dc000015 	stw	r16,0(sp)
  80832c:	3025883a 	mov	r18,r6
  808330:	2800b726 	beq	r5,zero,808610 <_realloc_r+0x310>
  808334:	282b883a 	mov	r21,r5
  808338:	2029883a 	mov	r20,r4
  80833c:	080de440 	call	80de44 <__malloc_lock>
  808340:	a8bfff17 	ldw	r2,-4(r21)
  808344:	043fff04 	movi	r16,-4
  808348:	90c002c4 	addi	r3,r18,11
  80834c:	01000584 	movi	r4,22
  808350:	acfffe04 	addi	r19,r21,-8
  808354:	1420703a 	and	r16,r2,r16
  808358:	20c0332e 	bgeu	r4,r3,808428 <_realloc_r+0x128>
  80835c:	047ffe04 	movi	r17,-8
  808360:	1c62703a 	and	r17,r3,r17
  808364:	8807883a 	mov	r3,r17
  808368:	88005816 	blt	r17,zero,8084cc <_realloc_r+0x1cc>
  80836c:	8c805736 	bltu	r17,r18,8084cc <_realloc_r+0x1cc>
  808370:	80c0300e 	bge	r16,r3,808434 <_realloc_r+0x134>
  808374:	07002074 	movhi	fp,129
  808378:	e7044c04 	addi	fp,fp,4400
  80837c:	e1c00217 	ldw	r7,8(fp)
  808380:	9c09883a 	add	r4,r19,r16
  808384:	22000117 	ldw	r8,4(r4)
  808388:	21c06326 	beq	r4,r7,808518 <_realloc_r+0x218>
  80838c:	017fff84 	movi	r5,-2
  808390:	414a703a 	and	r5,r8,r5
  808394:	214b883a 	add	r5,r4,r5
  808398:	29800117 	ldw	r6,4(r5)
  80839c:	3180004c 	andi	r6,r6,1
  8083a0:	30003f26 	beq	r6,zero,8084a0 <_realloc_r+0x1a0>
  8083a4:	1080004c 	andi	r2,r2,1
  8083a8:	10008326 	beq	r2,zero,8085b8 <_realloc_r+0x2b8>
  8083ac:	900b883a 	mov	r5,r18
  8083b0:	a009883a 	mov	r4,r20
  8083b4:	08012340 	call	801234 <_malloc_r>
  8083b8:	1025883a 	mov	r18,r2
  8083bc:	10011e26 	beq	r2,zero,808838 <_realloc_r+0x538>
  8083c0:	a93fff17 	ldw	r4,-4(r21)
  8083c4:	10fffe04 	addi	r3,r2,-8
  8083c8:	00bfff84 	movi	r2,-2
  8083cc:	2084703a 	and	r2,r4,r2
  8083d0:	9885883a 	add	r2,r19,r2
  8083d4:	1880ee26 	beq	r3,r2,808790 <_realloc_r+0x490>
  8083d8:	81bfff04 	addi	r6,r16,-4
  8083dc:	00800904 	movi	r2,36
  8083e0:	1180b836 	bltu	r2,r6,8086c4 <_realloc_r+0x3c4>
  8083e4:	00c004c4 	movi	r3,19
  8083e8:	19809636 	bltu	r3,r6,808644 <_realloc_r+0x344>
  8083ec:	9005883a 	mov	r2,r18
  8083f0:	a807883a 	mov	r3,r21
  8083f4:	19000017 	ldw	r4,0(r3)
  8083f8:	11000015 	stw	r4,0(r2)
  8083fc:	19000117 	ldw	r4,4(r3)
  808400:	11000115 	stw	r4,4(r2)
  808404:	18c00217 	ldw	r3,8(r3)
  808408:	10c00215 	stw	r3,8(r2)
  80840c:	a80b883a 	mov	r5,r21
  808410:	a009883a 	mov	r4,r20
  808414:	08061a00 	call	8061a0 <_free_r>
  808418:	a009883a 	mov	r4,r20
  80841c:	080de680 	call	80de68 <__malloc_unlock>
  808420:	9005883a 	mov	r2,r18
  808424:	00001206 	br	808470 <_realloc_r+0x170>
  808428:	00c00404 	movi	r3,16
  80842c:	1823883a 	mov	r17,r3
  808430:	003fce06 	br	80836c <__alt_data_end+0xff80836c>
  808434:	a825883a 	mov	r18,r21
  808438:	8445c83a 	sub	r2,r16,r17
  80843c:	00c003c4 	movi	r3,15
  808440:	18802636 	bltu	r3,r2,8084dc <_realloc_r+0x1dc>
  808444:	99800117 	ldw	r6,4(r19)
  808448:	9c07883a 	add	r3,r19,r16
  80844c:	3180004c 	andi	r6,r6,1
  808450:	3420b03a 	or	r16,r6,r16
  808454:	9c000115 	stw	r16,4(r19)
  808458:	18800117 	ldw	r2,4(r3)
  80845c:	10800054 	ori	r2,r2,1
  808460:	18800115 	stw	r2,4(r3)
  808464:	a009883a 	mov	r4,r20
  808468:	080de680 	call	80de68 <__malloc_unlock>
  80846c:	9005883a 	mov	r2,r18
  808470:	dfc00917 	ldw	ra,36(sp)
  808474:	df000817 	ldw	fp,32(sp)
  808478:	ddc00717 	ldw	r23,28(sp)
  80847c:	dd800617 	ldw	r22,24(sp)
  808480:	dd400517 	ldw	r21,20(sp)
  808484:	dd000417 	ldw	r20,16(sp)
  808488:	dcc00317 	ldw	r19,12(sp)
  80848c:	dc800217 	ldw	r18,8(sp)
  808490:	dc400117 	ldw	r17,4(sp)
  808494:	dc000017 	ldw	r16,0(sp)
  808498:	dec00a04 	addi	sp,sp,40
  80849c:	f800283a 	ret
  8084a0:	017fff04 	movi	r5,-4
  8084a4:	414a703a 	and	r5,r8,r5
  8084a8:	814d883a 	add	r6,r16,r5
  8084ac:	30c01f16 	blt	r6,r3,80852c <_realloc_r+0x22c>
  8084b0:	20800317 	ldw	r2,12(r4)
  8084b4:	20c00217 	ldw	r3,8(r4)
  8084b8:	a825883a 	mov	r18,r21
  8084bc:	3021883a 	mov	r16,r6
  8084c0:	18800315 	stw	r2,12(r3)
  8084c4:	10c00215 	stw	r3,8(r2)
  8084c8:	003fdb06 	br	808438 <__alt_data_end+0xff808438>
  8084cc:	00800304 	movi	r2,12
  8084d0:	a0800015 	stw	r2,0(r20)
  8084d4:	0005883a 	mov	r2,zero
  8084d8:	003fe506 	br	808470 <__alt_data_end+0xff808470>
  8084dc:	98c00117 	ldw	r3,4(r19)
  8084e0:	9c4b883a 	add	r5,r19,r17
  8084e4:	11000054 	ori	r4,r2,1
  8084e8:	18c0004c 	andi	r3,r3,1
  8084ec:	1c62b03a 	or	r17,r3,r17
  8084f0:	9c400115 	stw	r17,4(r19)
  8084f4:	29000115 	stw	r4,4(r5)
  8084f8:	2885883a 	add	r2,r5,r2
  8084fc:	10c00117 	ldw	r3,4(r2)
  808500:	29400204 	addi	r5,r5,8
  808504:	a009883a 	mov	r4,r20
  808508:	18c00054 	ori	r3,r3,1
  80850c:	10c00115 	stw	r3,4(r2)
  808510:	08061a00 	call	8061a0 <_free_r>
  808514:	003fd306 	br	808464 <__alt_data_end+0xff808464>
  808518:	017fff04 	movi	r5,-4
  80851c:	414a703a 	and	r5,r8,r5
  808520:	89800404 	addi	r6,r17,16
  808524:	8151883a 	add	r8,r16,r5
  808528:	4180590e 	bge	r8,r6,808690 <_realloc_r+0x390>
  80852c:	1080004c 	andi	r2,r2,1
  808530:	103f9e1e 	bne	r2,zero,8083ac <__alt_data_end+0xff8083ac>
  808534:	adbffe17 	ldw	r22,-8(r21)
  808538:	00bfff04 	movi	r2,-4
  80853c:	9dadc83a 	sub	r22,r19,r22
  808540:	b1800117 	ldw	r6,4(r22)
  808544:	3084703a 	and	r2,r6,r2
  808548:	20002026 	beq	r4,zero,8085cc <_realloc_r+0x2cc>
  80854c:	80af883a 	add	r23,r16,r2
  808550:	b96f883a 	add	r23,r23,r5
  808554:	21c05f26 	beq	r4,r7,8086d4 <_realloc_r+0x3d4>
  808558:	b8c01c16 	blt	r23,r3,8085cc <_realloc_r+0x2cc>
  80855c:	20800317 	ldw	r2,12(r4)
  808560:	20c00217 	ldw	r3,8(r4)
  808564:	81bfff04 	addi	r6,r16,-4
  808568:	01000904 	movi	r4,36
  80856c:	18800315 	stw	r2,12(r3)
  808570:	10c00215 	stw	r3,8(r2)
  808574:	b0c00217 	ldw	r3,8(r22)
  808578:	b0800317 	ldw	r2,12(r22)
  80857c:	b4800204 	addi	r18,r22,8
  808580:	18800315 	stw	r2,12(r3)
  808584:	10c00215 	stw	r3,8(r2)
  808588:	21801b36 	bltu	r4,r6,8085f8 <_realloc_r+0x2f8>
  80858c:	008004c4 	movi	r2,19
  808590:	1180352e 	bgeu	r2,r6,808668 <_realloc_r+0x368>
  808594:	a8800017 	ldw	r2,0(r21)
  808598:	b0800215 	stw	r2,8(r22)
  80859c:	a8800117 	ldw	r2,4(r21)
  8085a0:	b0800315 	stw	r2,12(r22)
  8085a4:	008006c4 	movi	r2,27
  8085a8:	11807f36 	bltu	r2,r6,8087a8 <_realloc_r+0x4a8>
  8085ac:	b0800404 	addi	r2,r22,16
  8085b0:	ad400204 	addi	r21,r21,8
  8085b4:	00002d06 	br	80866c <_realloc_r+0x36c>
  8085b8:	adbffe17 	ldw	r22,-8(r21)
  8085bc:	00bfff04 	movi	r2,-4
  8085c0:	9dadc83a 	sub	r22,r19,r22
  8085c4:	b1000117 	ldw	r4,4(r22)
  8085c8:	2084703a 	and	r2,r4,r2
  8085cc:	b03f7726 	beq	r22,zero,8083ac <__alt_data_end+0xff8083ac>
  8085d0:	80af883a 	add	r23,r16,r2
  8085d4:	b8ff7516 	blt	r23,r3,8083ac <__alt_data_end+0xff8083ac>
  8085d8:	b0800317 	ldw	r2,12(r22)
  8085dc:	b0c00217 	ldw	r3,8(r22)
  8085e0:	81bfff04 	addi	r6,r16,-4
  8085e4:	01000904 	movi	r4,36
  8085e8:	18800315 	stw	r2,12(r3)
  8085ec:	10c00215 	stw	r3,8(r2)
  8085f0:	b4800204 	addi	r18,r22,8
  8085f4:	21bfe52e 	bgeu	r4,r6,80858c <__alt_data_end+0xff80858c>
  8085f8:	a80b883a 	mov	r5,r21
  8085fc:	9009883a 	mov	r4,r18
  808600:	0806fc40 	call	806fc4 <memmove>
  808604:	b821883a 	mov	r16,r23
  808608:	b027883a 	mov	r19,r22
  80860c:	003f8a06 	br	808438 <__alt_data_end+0xff808438>
  808610:	300b883a 	mov	r5,r6
  808614:	dfc00917 	ldw	ra,36(sp)
  808618:	df000817 	ldw	fp,32(sp)
  80861c:	ddc00717 	ldw	r23,28(sp)
  808620:	dd800617 	ldw	r22,24(sp)
  808624:	dd400517 	ldw	r21,20(sp)
  808628:	dd000417 	ldw	r20,16(sp)
  80862c:	dcc00317 	ldw	r19,12(sp)
  808630:	dc800217 	ldw	r18,8(sp)
  808634:	dc400117 	ldw	r17,4(sp)
  808638:	dc000017 	ldw	r16,0(sp)
  80863c:	dec00a04 	addi	sp,sp,40
  808640:	08012341 	jmpi	801234 <_malloc_r>
  808644:	a8c00017 	ldw	r3,0(r21)
  808648:	90c00015 	stw	r3,0(r18)
  80864c:	a8c00117 	ldw	r3,4(r21)
  808650:	90c00115 	stw	r3,4(r18)
  808654:	00c006c4 	movi	r3,27
  808658:	19804536 	bltu	r3,r6,808770 <_realloc_r+0x470>
  80865c:	90800204 	addi	r2,r18,8
  808660:	a8c00204 	addi	r3,r21,8
  808664:	003f6306 	br	8083f4 <__alt_data_end+0xff8083f4>
  808668:	9005883a 	mov	r2,r18
  80866c:	a8c00017 	ldw	r3,0(r21)
  808670:	b821883a 	mov	r16,r23
  808674:	b027883a 	mov	r19,r22
  808678:	10c00015 	stw	r3,0(r2)
  80867c:	a8c00117 	ldw	r3,4(r21)
  808680:	10c00115 	stw	r3,4(r2)
  808684:	a8c00217 	ldw	r3,8(r21)
  808688:	10c00215 	stw	r3,8(r2)
  80868c:	003f6a06 	br	808438 <__alt_data_end+0xff808438>
  808690:	9c67883a 	add	r19,r19,r17
  808694:	4445c83a 	sub	r2,r8,r17
  808698:	e4c00215 	stw	r19,8(fp)
  80869c:	10800054 	ori	r2,r2,1
  8086a0:	98800115 	stw	r2,4(r19)
  8086a4:	a8bfff17 	ldw	r2,-4(r21)
  8086a8:	a009883a 	mov	r4,r20
  8086ac:	1080004c 	andi	r2,r2,1
  8086b0:	1462b03a 	or	r17,r2,r17
  8086b4:	ac7fff15 	stw	r17,-4(r21)
  8086b8:	080de680 	call	80de68 <__malloc_unlock>
  8086bc:	a805883a 	mov	r2,r21
  8086c0:	003f6b06 	br	808470 <__alt_data_end+0xff808470>
  8086c4:	a80b883a 	mov	r5,r21
  8086c8:	9009883a 	mov	r4,r18
  8086cc:	0806fc40 	call	806fc4 <memmove>
  8086d0:	003f4e06 	br	80840c <__alt_data_end+0xff80840c>
  8086d4:	89000404 	addi	r4,r17,16
  8086d8:	b93fbc16 	blt	r23,r4,8085cc <__alt_data_end+0xff8085cc>
  8086dc:	b0800317 	ldw	r2,12(r22)
  8086e0:	b0c00217 	ldw	r3,8(r22)
  8086e4:	81bfff04 	addi	r6,r16,-4
  8086e8:	01000904 	movi	r4,36
  8086ec:	18800315 	stw	r2,12(r3)
  8086f0:	10c00215 	stw	r3,8(r2)
  8086f4:	b4800204 	addi	r18,r22,8
  8086f8:	21804336 	bltu	r4,r6,808808 <_realloc_r+0x508>
  8086fc:	008004c4 	movi	r2,19
  808700:	11803f2e 	bgeu	r2,r6,808800 <_realloc_r+0x500>
  808704:	a8800017 	ldw	r2,0(r21)
  808708:	b0800215 	stw	r2,8(r22)
  80870c:	a8800117 	ldw	r2,4(r21)
  808710:	b0800315 	stw	r2,12(r22)
  808714:	008006c4 	movi	r2,27
  808718:	11803f36 	bltu	r2,r6,808818 <_realloc_r+0x518>
  80871c:	b0800404 	addi	r2,r22,16
  808720:	ad400204 	addi	r21,r21,8
  808724:	a8c00017 	ldw	r3,0(r21)
  808728:	10c00015 	stw	r3,0(r2)
  80872c:	a8c00117 	ldw	r3,4(r21)
  808730:	10c00115 	stw	r3,4(r2)
  808734:	a8c00217 	ldw	r3,8(r21)
  808738:	10c00215 	stw	r3,8(r2)
  80873c:	b447883a 	add	r3,r22,r17
  808740:	bc45c83a 	sub	r2,r23,r17
  808744:	e0c00215 	stw	r3,8(fp)
  808748:	10800054 	ori	r2,r2,1
  80874c:	18800115 	stw	r2,4(r3)
  808750:	b0800117 	ldw	r2,4(r22)
  808754:	a009883a 	mov	r4,r20
  808758:	1080004c 	andi	r2,r2,1
  80875c:	1462b03a 	or	r17,r2,r17
  808760:	b4400115 	stw	r17,4(r22)
  808764:	080de680 	call	80de68 <__malloc_unlock>
  808768:	9005883a 	mov	r2,r18
  80876c:	003f4006 	br	808470 <__alt_data_end+0xff808470>
  808770:	a8c00217 	ldw	r3,8(r21)
  808774:	90c00215 	stw	r3,8(r18)
  808778:	a8c00317 	ldw	r3,12(r21)
  80877c:	90c00315 	stw	r3,12(r18)
  808780:	30801126 	beq	r6,r2,8087c8 <_realloc_r+0x4c8>
  808784:	90800404 	addi	r2,r18,16
  808788:	a8c00404 	addi	r3,r21,16
  80878c:	003f1906 	br	8083f4 <__alt_data_end+0xff8083f4>
  808790:	90ffff17 	ldw	r3,-4(r18)
  808794:	00bfff04 	movi	r2,-4
  808798:	a825883a 	mov	r18,r21
  80879c:	1884703a 	and	r2,r3,r2
  8087a0:	80a1883a 	add	r16,r16,r2
  8087a4:	003f2406 	br	808438 <__alt_data_end+0xff808438>
  8087a8:	a8800217 	ldw	r2,8(r21)
  8087ac:	b0800415 	stw	r2,16(r22)
  8087b0:	a8800317 	ldw	r2,12(r21)
  8087b4:	b0800515 	stw	r2,20(r22)
  8087b8:	31000a26 	beq	r6,r4,8087e4 <_realloc_r+0x4e4>
  8087bc:	b0800604 	addi	r2,r22,24
  8087c0:	ad400404 	addi	r21,r21,16
  8087c4:	003fa906 	br	80866c <__alt_data_end+0xff80866c>
  8087c8:	a9000417 	ldw	r4,16(r21)
  8087cc:	90800604 	addi	r2,r18,24
  8087d0:	a8c00604 	addi	r3,r21,24
  8087d4:	91000415 	stw	r4,16(r18)
  8087d8:	a9000517 	ldw	r4,20(r21)
  8087dc:	91000515 	stw	r4,20(r18)
  8087e0:	003f0406 	br	8083f4 <__alt_data_end+0xff8083f4>
  8087e4:	a8c00417 	ldw	r3,16(r21)
  8087e8:	ad400604 	addi	r21,r21,24
  8087ec:	b0800804 	addi	r2,r22,32
  8087f0:	b0c00615 	stw	r3,24(r22)
  8087f4:	a8ffff17 	ldw	r3,-4(r21)
  8087f8:	b0c00715 	stw	r3,28(r22)
  8087fc:	003f9b06 	br	80866c <__alt_data_end+0xff80866c>
  808800:	9005883a 	mov	r2,r18
  808804:	003fc706 	br	808724 <__alt_data_end+0xff808724>
  808808:	a80b883a 	mov	r5,r21
  80880c:	9009883a 	mov	r4,r18
  808810:	0806fc40 	call	806fc4 <memmove>
  808814:	003fc906 	br	80873c <__alt_data_end+0xff80873c>
  808818:	a8800217 	ldw	r2,8(r21)
  80881c:	b0800415 	stw	r2,16(r22)
  808820:	a8800317 	ldw	r2,12(r21)
  808824:	b0800515 	stw	r2,20(r22)
  808828:	31000726 	beq	r6,r4,808848 <_realloc_r+0x548>
  80882c:	b0800604 	addi	r2,r22,24
  808830:	ad400404 	addi	r21,r21,16
  808834:	003fbb06 	br	808724 <__alt_data_end+0xff808724>
  808838:	a009883a 	mov	r4,r20
  80883c:	080de680 	call	80de68 <__malloc_unlock>
  808840:	0005883a 	mov	r2,zero
  808844:	003f0a06 	br	808470 <__alt_data_end+0xff808470>
  808848:	a8c00417 	ldw	r3,16(r21)
  80884c:	ad400604 	addi	r21,r21,24
  808850:	b0800804 	addi	r2,r22,32
  808854:	b0c00615 	stw	r3,24(r22)
  808858:	a8ffff17 	ldw	r3,-4(r21)
  80885c:	b0c00715 	stw	r3,28(r22)
  808860:	003fb006 	br	808724 <__alt_data_end+0xff808724>

00808864 <__fpclassifyd>:
  808864:	00a00034 	movhi	r2,32768
  808868:	10bfffc4 	addi	r2,r2,-1
  80886c:	2884703a 	and	r2,r5,r2
  808870:	10000726 	beq	r2,zero,808890 <__fpclassifyd+0x2c>
  808874:	00fffc34 	movhi	r3,65520
  808878:	019ff834 	movhi	r6,32736
  80887c:	28c7883a 	add	r3,r5,r3
  808880:	31bfffc4 	addi	r6,r6,-1
  808884:	30c00536 	bltu	r6,r3,80889c <__fpclassifyd+0x38>
  808888:	00800104 	movi	r2,4
  80888c:	f800283a 	ret
  808890:	2000021e 	bne	r4,zero,80889c <__fpclassifyd+0x38>
  808894:	00800084 	movi	r2,2
  808898:	f800283a 	ret
  80889c:	00dffc34 	movhi	r3,32752
  8088a0:	019ff834 	movhi	r6,32736
  8088a4:	28cb883a 	add	r5,r5,r3
  8088a8:	31bfffc4 	addi	r6,r6,-1
  8088ac:	317ff62e 	bgeu	r6,r5,808888 <__alt_data_end+0xff808888>
  8088b0:	01400434 	movhi	r5,16
  8088b4:	297fffc4 	addi	r5,r5,-1
  8088b8:	28800236 	bltu	r5,r2,8088c4 <__fpclassifyd+0x60>
  8088bc:	008000c4 	movi	r2,3
  8088c0:	f800283a 	ret
  8088c4:	10c00226 	beq	r2,r3,8088d0 <__fpclassifyd+0x6c>
  8088c8:	0005883a 	mov	r2,zero
  8088cc:	f800283a 	ret
  8088d0:	2005003a 	cmpeq	r2,r4,zero
  8088d4:	f800283a 	ret

008088d8 <__sread>:
  8088d8:	defffe04 	addi	sp,sp,-8
  8088dc:	dc000015 	stw	r16,0(sp)
  8088e0:	2821883a 	mov	r16,r5
  8088e4:	2940038f 	ldh	r5,14(r5)
  8088e8:	dfc00115 	stw	ra,4(sp)
  8088ec:	080a7940 	call	80a794 <_read_r>
  8088f0:	10000716 	blt	r2,zero,808910 <__sread+0x38>
  8088f4:	80c01417 	ldw	r3,80(r16)
  8088f8:	1887883a 	add	r3,r3,r2
  8088fc:	80c01415 	stw	r3,80(r16)
  808900:	dfc00117 	ldw	ra,4(sp)
  808904:	dc000017 	ldw	r16,0(sp)
  808908:	dec00204 	addi	sp,sp,8
  80890c:	f800283a 	ret
  808910:	80c0030b 	ldhu	r3,12(r16)
  808914:	18fbffcc 	andi	r3,r3,61439
  808918:	80c0030d 	sth	r3,12(r16)
  80891c:	dfc00117 	ldw	ra,4(sp)
  808920:	dc000017 	ldw	r16,0(sp)
  808924:	dec00204 	addi	sp,sp,8
  808928:	f800283a 	ret

0080892c <__seofread>:
  80892c:	0005883a 	mov	r2,zero
  808930:	f800283a 	ret

00808934 <__swrite>:
  808934:	2880030b 	ldhu	r2,12(r5)
  808938:	defffb04 	addi	sp,sp,-20
  80893c:	dcc00315 	stw	r19,12(sp)
  808940:	dc800215 	stw	r18,8(sp)
  808944:	dc400115 	stw	r17,4(sp)
  808948:	dc000015 	stw	r16,0(sp)
  80894c:	dfc00415 	stw	ra,16(sp)
  808950:	10c0400c 	andi	r3,r2,256
  808954:	2821883a 	mov	r16,r5
  808958:	2023883a 	mov	r17,r4
  80895c:	3025883a 	mov	r18,r6
  808960:	3827883a 	mov	r19,r7
  808964:	18000526 	beq	r3,zero,80897c <__swrite+0x48>
  808968:	2940038f 	ldh	r5,14(r5)
  80896c:	01c00084 	movi	r7,2
  808970:	000d883a 	mov	r6,zero
  808974:	080a7340 	call	80a734 <_lseek_r>
  808978:	8080030b 	ldhu	r2,12(r16)
  80897c:	8140038f 	ldh	r5,14(r16)
  808980:	10bbffcc 	andi	r2,r2,61439
  808984:	980f883a 	mov	r7,r19
  808988:	900d883a 	mov	r6,r18
  80898c:	8809883a 	mov	r4,r17
  808990:	8080030d 	sth	r2,12(r16)
  808994:	dfc00417 	ldw	ra,16(sp)
  808998:	dcc00317 	ldw	r19,12(sp)
  80899c:	dc800217 	ldw	r18,8(sp)
  8089a0:	dc400117 	ldw	r17,4(sp)
  8089a4:	dc000017 	ldw	r16,0(sp)
  8089a8:	dec00504 	addi	sp,sp,20
  8089ac:	080a1e81 	jmpi	80a1e8 <_write_r>

008089b0 <__sseek>:
  8089b0:	defffe04 	addi	sp,sp,-8
  8089b4:	dc000015 	stw	r16,0(sp)
  8089b8:	2821883a 	mov	r16,r5
  8089bc:	2940038f 	ldh	r5,14(r5)
  8089c0:	dfc00115 	stw	ra,4(sp)
  8089c4:	080a7340 	call	80a734 <_lseek_r>
  8089c8:	00ffffc4 	movi	r3,-1
  8089cc:	10c00826 	beq	r2,r3,8089f0 <__sseek+0x40>
  8089d0:	80c0030b 	ldhu	r3,12(r16)
  8089d4:	80801415 	stw	r2,80(r16)
  8089d8:	18c40014 	ori	r3,r3,4096
  8089dc:	80c0030d 	sth	r3,12(r16)
  8089e0:	dfc00117 	ldw	ra,4(sp)
  8089e4:	dc000017 	ldw	r16,0(sp)
  8089e8:	dec00204 	addi	sp,sp,8
  8089ec:	f800283a 	ret
  8089f0:	80c0030b 	ldhu	r3,12(r16)
  8089f4:	18fbffcc 	andi	r3,r3,61439
  8089f8:	80c0030d 	sth	r3,12(r16)
  8089fc:	dfc00117 	ldw	ra,4(sp)
  808a00:	dc000017 	ldw	r16,0(sp)
  808a04:	dec00204 	addi	sp,sp,8
  808a08:	f800283a 	ret

00808a0c <__sclose>:
  808a0c:	2940038f 	ldh	r5,14(r5)
  808a10:	080a2481 	jmpi	80a248 <_close_r>

00808a14 <strcmp>:
  808a14:	2144b03a 	or	r2,r4,r5
  808a18:	108000cc 	andi	r2,r2,3
  808a1c:	1000171e 	bne	r2,zero,808a7c <strcmp+0x68>
  808a20:	20800017 	ldw	r2,0(r4)
  808a24:	28c00017 	ldw	r3,0(r5)
  808a28:	10c0141e 	bne	r2,r3,808a7c <strcmp+0x68>
  808a2c:	027fbff4 	movhi	r9,65279
  808a30:	4a7fbfc4 	addi	r9,r9,-257
  808a34:	0086303a 	nor	r3,zero,r2
  808a38:	02202074 	movhi	r8,32897
  808a3c:	1245883a 	add	r2,r2,r9
  808a40:	42202004 	addi	r8,r8,-32640
  808a44:	10c4703a 	and	r2,r2,r3
  808a48:	1204703a 	and	r2,r2,r8
  808a4c:	10000226 	beq	r2,zero,808a58 <strcmp+0x44>
  808a50:	00002306 	br	808ae0 <strcmp+0xcc>
  808a54:	1000221e 	bne	r2,zero,808ae0 <strcmp+0xcc>
  808a58:	21000104 	addi	r4,r4,4
  808a5c:	20c00017 	ldw	r3,0(r4)
  808a60:	29400104 	addi	r5,r5,4
  808a64:	29800017 	ldw	r6,0(r5)
  808a68:	1a4f883a 	add	r7,r3,r9
  808a6c:	00c4303a 	nor	r2,zero,r3
  808a70:	3884703a 	and	r2,r7,r2
  808a74:	1204703a 	and	r2,r2,r8
  808a78:	19bff626 	beq	r3,r6,808a54 <__alt_data_end+0xff808a54>
  808a7c:	20800003 	ldbu	r2,0(r4)
  808a80:	10c03fcc 	andi	r3,r2,255
  808a84:	18c0201c 	xori	r3,r3,128
  808a88:	18ffe004 	addi	r3,r3,-128
  808a8c:	18000c26 	beq	r3,zero,808ac0 <strcmp+0xac>
  808a90:	29800007 	ldb	r6,0(r5)
  808a94:	19800326 	beq	r3,r6,808aa4 <strcmp+0x90>
  808a98:	00001306 	br	808ae8 <strcmp+0xd4>
  808a9c:	29800007 	ldb	r6,0(r5)
  808aa0:	11800b1e 	bne	r2,r6,808ad0 <strcmp+0xbc>
  808aa4:	21000044 	addi	r4,r4,1
  808aa8:	20c00003 	ldbu	r3,0(r4)
  808aac:	29400044 	addi	r5,r5,1
  808ab0:	18803fcc 	andi	r2,r3,255
  808ab4:	1080201c 	xori	r2,r2,128
  808ab8:	10bfe004 	addi	r2,r2,-128
  808abc:	103ff71e 	bne	r2,zero,808a9c <__alt_data_end+0xff808a9c>
  808ac0:	0007883a 	mov	r3,zero
  808ac4:	28800003 	ldbu	r2,0(r5)
  808ac8:	1885c83a 	sub	r2,r3,r2
  808acc:	f800283a 	ret
  808ad0:	28800003 	ldbu	r2,0(r5)
  808ad4:	18c03fcc 	andi	r3,r3,255
  808ad8:	1885c83a 	sub	r2,r3,r2
  808adc:	f800283a 	ret
  808ae0:	0005883a 	mov	r2,zero
  808ae4:	f800283a 	ret
  808ae8:	10c03fcc 	andi	r3,r2,255
  808aec:	003ff506 	br	808ac4 <__alt_data_end+0xff808ac4>

00808af0 <__sprint_r.part.0>:
  808af0:	28801917 	ldw	r2,100(r5)
  808af4:	defff604 	addi	sp,sp,-40
  808af8:	dd400515 	stw	r21,20(sp)
  808afc:	dfc00915 	stw	ra,36(sp)
  808b00:	df000815 	stw	fp,32(sp)
  808b04:	ddc00715 	stw	r23,28(sp)
  808b08:	dd800615 	stw	r22,24(sp)
  808b0c:	dd000415 	stw	r20,16(sp)
  808b10:	dcc00315 	stw	r19,12(sp)
  808b14:	dc800215 	stw	r18,8(sp)
  808b18:	dc400115 	stw	r17,4(sp)
  808b1c:	dc000015 	stw	r16,0(sp)
  808b20:	1088000c 	andi	r2,r2,8192
  808b24:	302b883a 	mov	r21,r6
  808b28:	10002e26 	beq	r2,zero,808be4 <__sprint_r.part.0+0xf4>
  808b2c:	30800217 	ldw	r2,8(r6)
  808b30:	35800017 	ldw	r22,0(r6)
  808b34:	10002926 	beq	r2,zero,808bdc <__sprint_r.part.0+0xec>
  808b38:	2827883a 	mov	r19,r5
  808b3c:	2029883a 	mov	r20,r4
  808b40:	b5c00104 	addi	r23,r22,4
  808b44:	04bfffc4 	movi	r18,-1
  808b48:	bc400017 	ldw	r17,0(r23)
  808b4c:	b4000017 	ldw	r16,0(r22)
  808b50:	0039883a 	mov	fp,zero
  808b54:	8822d0ba 	srli	r17,r17,2
  808b58:	8800031e 	bne	r17,zero,808b68 <__sprint_r.part.0+0x78>
  808b5c:	00001806 	br	808bc0 <__sprint_r.part.0+0xd0>
  808b60:	84000104 	addi	r16,r16,4
  808b64:	8f001526 	beq	r17,fp,808bbc <__sprint_r.part.0+0xcc>
  808b68:	81400017 	ldw	r5,0(r16)
  808b6c:	980d883a 	mov	r6,r19
  808b70:	a009883a 	mov	r4,r20
  808b74:	080a5e00 	call	80a5e0 <_fputwc_r>
  808b78:	e7000044 	addi	fp,fp,1
  808b7c:	14bff81e 	bne	r2,r18,808b60 <__alt_data_end+0xff808b60>
  808b80:	9005883a 	mov	r2,r18
  808b84:	a8000215 	stw	zero,8(r21)
  808b88:	a8000115 	stw	zero,4(r21)
  808b8c:	dfc00917 	ldw	ra,36(sp)
  808b90:	df000817 	ldw	fp,32(sp)
  808b94:	ddc00717 	ldw	r23,28(sp)
  808b98:	dd800617 	ldw	r22,24(sp)
  808b9c:	dd400517 	ldw	r21,20(sp)
  808ba0:	dd000417 	ldw	r20,16(sp)
  808ba4:	dcc00317 	ldw	r19,12(sp)
  808ba8:	dc800217 	ldw	r18,8(sp)
  808bac:	dc400117 	ldw	r17,4(sp)
  808bb0:	dc000017 	ldw	r16,0(sp)
  808bb4:	dec00a04 	addi	sp,sp,40
  808bb8:	f800283a 	ret
  808bbc:	a8800217 	ldw	r2,8(r21)
  808bc0:	8c63883a 	add	r17,r17,r17
  808bc4:	8c63883a 	add	r17,r17,r17
  808bc8:	1445c83a 	sub	r2,r2,r17
  808bcc:	a8800215 	stw	r2,8(r21)
  808bd0:	b5800204 	addi	r22,r22,8
  808bd4:	bdc00204 	addi	r23,r23,8
  808bd8:	103fdb1e 	bne	r2,zero,808b48 <__alt_data_end+0xff808b48>
  808bdc:	0005883a 	mov	r2,zero
  808be0:	003fe806 	br	808b84 <__alt_data_end+0xff808b84>
  808be4:	08064b00 	call	8064b0 <__sfvwrite_r>
  808be8:	003fe606 	br	808b84 <__alt_data_end+0xff808b84>

00808bec <__sprint_r>:
  808bec:	30c00217 	ldw	r3,8(r6)
  808bf0:	18000126 	beq	r3,zero,808bf8 <__sprint_r+0xc>
  808bf4:	0808af01 	jmpi	808af0 <__sprint_r.part.0>
  808bf8:	30000115 	stw	zero,4(r6)
  808bfc:	0005883a 	mov	r2,zero
  808c00:	f800283a 	ret

00808c04 <___vfiprintf_internal_r>:
  808c04:	deffca04 	addi	sp,sp,-216
  808c08:	dd403115 	stw	r21,196(sp)
  808c0c:	dfc03515 	stw	ra,212(sp)
  808c10:	df003415 	stw	fp,208(sp)
  808c14:	ddc03315 	stw	r23,204(sp)
  808c18:	dd803215 	stw	r22,200(sp)
  808c1c:	dd003015 	stw	r20,192(sp)
  808c20:	dcc02f15 	stw	r19,188(sp)
  808c24:	dc802e15 	stw	r18,184(sp)
  808c28:	dc402d15 	stw	r17,180(sp)
  808c2c:	dc002c15 	stw	r16,176(sp)
  808c30:	d9002115 	stw	r4,132(sp)
  808c34:	d9402015 	stw	r5,128(sp)
  808c38:	d9c02215 	stw	r7,136(sp)
  808c3c:	302b883a 	mov	r21,r6
  808c40:	20000226 	beq	r4,zero,808c4c <___vfiprintf_internal_r+0x48>
  808c44:	20800e17 	ldw	r2,56(r4)
  808c48:	1000cf26 	beq	r2,zero,808f88 <___vfiprintf_internal_r+0x384>
  808c4c:	d8c02017 	ldw	r3,128(sp)
  808c50:	1880030b 	ldhu	r2,12(r3)
  808c54:	10c8000c 	andi	r3,r2,8192
  808c58:	1800071e 	bne	r3,zero,808c78 <___vfiprintf_internal_r+0x74>
  808c5c:	d9402017 	ldw	r5,128(sp)
  808c60:	00f7ffc4 	movi	r3,-8193
  808c64:	10880014 	ori	r2,r2,8192
  808c68:	29001917 	ldw	r4,100(r5)
  808c6c:	2880030d 	sth	r2,12(r5)
  808c70:	20c6703a 	and	r3,r4,r3
  808c74:	28c01915 	stw	r3,100(r5)
  808c78:	10c0020c 	andi	r3,r2,8
  808c7c:	1800a526 	beq	r3,zero,808f14 <___vfiprintf_internal_r+0x310>
  808c80:	d9002017 	ldw	r4,128(sp)
  808c84:	20c00417 	ldw	r3,16(r4)
  808c88:	1800a226 	beq	r3,zero,808f14 <___vfiprintf_internal_r+0x310>
  808c8c:	1080068c 	andi	r2,r2,26
  808c90:	00c00284 	movi	r3,10
  808c94:	10c0a826 	beq	r2,r3,808f38 <___vfiprintf_internal_r+0x334>
  808c98:	d9001a04 	addi	r4,sp,104
  808c9c:	d94019c4 	addi	r5,sp,103
  808ca0:	04802074 	movhi	r18,129
  808ca4:	2145c83a 	sub	r2,r4,r5
  808ca8:	94843604 	addi	r18,r18,4312
  808cac:	d9001e15 	stw	r4,120(sp)
  808cb0:	d9401f15 	stw	r5,124(sp)
  808cb4:	dec01a15 	stw	sp,104(sp)
  808cb8:	d8001c15 	stw	zero,112(sp)
  808cbc:	d8001b15 	stw	zero,108(sp)
  808cc0:	d811883a 	mov	r8,sp
  808cc4:	d8002615 	stw	zero,152(sp)
  808cc8:	d8002415 	stw	zero,144(sp)
  808ccc:	d8802815 	stw	r2,160(sp)
  808cd0:	a82d883a 	mov	r22,r21
  808cd4:	b0800007 	ldb	r2,0(r22)
  808cd8:	10040d26 	beq	r2,zero,809d10 <___vfiprintf_internal_r+0x110c>
  808cdc:	00c00944 	movi	r3,37
  808ce0:	b029883a 	mov	r20,r22
  808ce4:	10c0021e 	bne	r2,r3,808cf0 <___vfiprintf_internal_r+0xec>
  808ce8:	00001606 	br	808d44 <___vfiprintf_internal_r+0x140>
  808cec:	10c00326 	beq	r2,r3,808cfc <___vfiprintf_internal_r+0xf8>
  808cf0:	a5000044 	addi	r20,r20,1
  808cf4:	a0800007 	ldb	r2,0(r20)
  808cf8:	103ffc1e 	bne	r2,zero,808cec <__alt_data_end+0xff808cec>
  808cfc:	a5a1c83a 	sub	r16,r20,r22
  808d00:	80001026 	beq	r16,zero,808d44 <___vfiprintf_internal_r+0x140>
  808d04:	d8c01c17 	ldw	r3,112(sp)
  808d08:	d8801b17 	ldw	r2,108(sp)
  808d0c:	45800015 	stw	r22,0(r8)
  808d10:	80c7883a 	add	r3,r16,r3
  808d14:	10800044 	addi	r2,r2,1
  808d18:	44000115 	stw	r16,4(r8)
  808d1c:	d8c01c15 	stw	r3,112(sp)
  808d20:	d8801b15 	stw	r2,108(sp)
  808d24:	010001c4 	movi	r4,7
  808d28:	2080750e 	bge	r4,r2,808f00 <___vfiprintf_internal_r+0x2fc>
  808d2c:	1803951e 	bne	r3,zero,809b84 <___vfiprintf_internal_r+0xf80>
  808d30:	d8c02417 	ldw	r3,144(sp)
  808d34:	d8001b15 	stw	zero,108(sp)
  808d38:	d811883a 	mov	r8,sp
  808d3c:	1c07883a 	add	r3,r3,r16
  808d40:	d8c02415 	stw	r3,144(sp)
  808d44:	a0800007 	ldb	r2,0(r20)
  808d48:	1002e026 	beq	r2,zero,8098cc <___vfiprintf_internal_r+0xcc8>
  808d4c:	a5800044 	addi	r22,r20,1
  808d50:	a0c00047 	ldb	r3,1(r20)
  808d54:	d8001d85 	stb	zero,118(sp)
  808d58:	0027883a 	mov	r19,zero
  808d5c:	d8002305 	stb	zero,140(sp)
  808d60:	043fffc4 	movi	r16,-1
  808d64:	d8002515 	stw	zero,148(sp)
  808d68:	0023883a 	mov	r17,zero
  808d6c:	05001604 	movi	r20,88
  808d70:	05400244 	movi	r21,9
  808d74:	402f883a 	mov	r23,r8
  808d78:	b5800044 	addi	r22,r22,1
  808d7c:	18bff804 	addi	r2,r3,-32
  808d80:	a0827736 	bltu	r20,r2,809760 <___vfiprintf_internal_r+0xb5c>
  808d84:	100490ba 	slli	r2,r2,2
  808d88:	01002074 	movhi	r4,129
  808d8c:	21236704 	addi	r4,r4,-29284
  808d90:	1105883a 	add	r2,r2,r4
  808d94:	10800017 	ldw	r2,0(r2)
  808d98:	1000683a 	jmp	r2
  808d9c:	00809460 	cmpeqi	r2,zero,593
  808da0:	00809760 	cmpeqi	r2,zero,605
  808da4:	00809760 	cmpeqi	r2,zero,605
  808da8:	0080947c 	xorhi	r2,zero,593
  808dac:	00809760 	cmpeqi	r2,zero,605
  808db0:	00809760 	cmpeqi	r2,zero,605
  808db4:	00809760 	cmpeqi	r2,zero,605
  808db8:	00809760 	cmpeqi	r2,zero,605
  808dbc:	00809760 	cmpeqi	r2,zero,605
  808dc0:	00809760 	cmpeqi	r2,zero,605
  808dc4:	00809684 	movi	r2,602
  808dc8:	008096a8 	cmpgeui	r2,zero,602
  808dcc:	00809760 	cmpeqi	r2,zero,605
  808dd0:	00808fa0 	cmpeqi	r2,zero,574
  808dd4:	008096bc 	xorhi	r2,zero,602
  808dd8:	00809760 	cmpeqi	r2,zero,605
  808ddc:	00809488 	cmpgei	r2,zero,594
  808de0:	00809494 	movui	r2,594
  808de4:	00809494 	movui	r2,594
  808de8:	00809494 	movui	r2,594
  808dec:	00809494 	movui	r2,594
  808df0:	00809494 	movui	r2,594
  808df4:	00809494 	movui	r2,594
  808df8:	00809494 	movui	r2,594
  808dfc:	00809494 	movui	r2,594
  808e00:	00809494 	movui	r2,594
  808e04:	00809760 	cmpeqi	r2,zero,605
  808e08:	00809760 	cmpeqi	r2,zero,605
  808e0c:	00809760 	cmpeqi	r2,zero,605
  808e10:	00809760 	cmpeqi	r2,zero,605
  808e14:	00809760 	cmpeqi	r2,zero,605
  808e18:	00809760 	cmpeqi	r2,zero,605
  808e1c:	00809760 	cmpeqi	r2,zero,605
  808e20:	00809760 	cmpeqi	r2,zero,605
  808e24:	00809760 	cmpeqi	r2,zero,605
  808e28:	00809760 	cmpeqi	r2,zero,605
  808e2c:	008094d4 	movui	r2,595
  808e30:	00809760 	cmpeqi	r2,zero,605
  808e34:	00809760 	cmpeqi	r2,zero,605
  808e38:	00809760 	cmpeqi	r2,zero,605
  808e3c:	00809760 	cmpeqi	r2,zero,605
  808e40:	00809760 	cmpeqi	r2,zero,605
  808e44:	00809760 	cmpeqi	r2,zero,605
  808e48:	00809760 	cmpeqi	r2,zero,605
  808e4c:	00809760 	cmpeqi	r2,zero,605
  808e50:	00809760 	cmpeqi	r2,zero,605
  808e54:	00809760 	cmpeqi	r2,zero,605
  808e58:	00809510 	cmplti	r2,zero,596
  808e5c:	00809760 	cmpeqi	r2,zero,605
  808e60:	00809760 	cmpeqi	r2,zero,605
  808e64:	00809760 	cmpeqi	r2,zero,605
  808e68:	00809760 	cmpeqi	r2,zero,605
  808e6c:	00809760 	cmpeqi	r2,zero,605
  808e70:	0080956c 	andhi	r2,zero,597
  808e74:	00809760 	cmpeqi	r2,zero,605
  808e78:	00809760 	cmpeqi	r2,zero,605
  808e7c:	008095e0 	cmpeqi	r2,zero,599
  808e80:	00809760 	cmpeqi	r2,zero,605
  808e84:	00809760 	cmpeqi	r2,zero,605
  808e88:	00809760 	cmpeqi	r2,zero,605
  808e8c:	00809760 	cmpeqi	r2,zero,605
  808e90:	00809760 	cmpeqi	r2,zero,605
  808e94:	00809760 	cmpeqi	r2,zero,605
  808e98:	00809760 	cmpeqi	r2,zero,605
  808e9c:	00809760 	cmpeqi	r2,zero,605
  808ea0:	00809760 	cmpeqi	r2,zero,605
  808ea4:	00809760 	cmpeqi	r2,zero,605
  808ea8:	00809388 	cmpgei	r2,zero,590
  808eac:	008093b8 	rdprs	r2,zero,590
  808eb0:	00809760 	cmpeqi	r2,zero,605
  808eb4:	00809760 	cmpeqi	r2,zero,605
  808eb8:	00809760 	cmpeqi	r2,zero,605
  808ebc:	00809708 	cmpgei	r2,zero,604
  808ec0:	008093b8 	rdprs	r2,zero,590
  808ec4:	00809760 	cmpeqi	r2,zero,605
  808ec8:	00809760 	cmpeqi	r2,zero,605
  808ecc:	00809260 	cmpeqi	r2,zero,585
  808ed0:	00809760 	cmpeqi	r2,zero,605
  808ed4:	00809274 	movhi	r2,585
  808ed8:	008092ac 	andhi	r2,zero,586
  808edc:	00808fac 	andhi	r2,zero,574
  808ee0:	00809254 	movui	r2,585
  808ee4:	00809760 	cmpeqi	r2,zero,605
  808ee8:	00809620 	cmpeqi	r2,zero,600
  808eec:	00809760 	cmpeqi	r2,zero,605
  808ef0:	0080966c 	andhi	r2,zero,601
  808ef4:	00809760 	cmpeqi	r2,zero,605
  808ef8:	00809760 	cmpeqi	r2,zero,605
  808efc:	00809330 	cmpltui	r2,zero,588
  808f00:	42000204 	addi	r8,r8,8
  808f04:	d8c02417 	ldw	r3,144(sp)
  808f08:	1c07883a 	add	r3,r3,r16
  808f0c:	d8c02415 	stw	r3,144(sp)
  808f10:	003f8c06 	br	808d44 <__alt_data_end+0xff808d44>
  808f14:	d9402017 	ldw	r5,128(sp)
  808f18:	d9002117 	ldw	r4,132(sp)
  808f1c:	08040200 	call	804020 <__swsetup_r>
  808f20:	1003c11e 	bne	r2,zero,809e28 <___vfiprintf_internal_r+0x1224>
  808f24:	d9402017 	ldw	r5,128(sp)
  808f28:	00c00284 	movi	r3,10
  808f2c:	2880030b 	ldhu	r2,12(r5)
  808f30:	1080068c 	andi	r2,r2,26
  808f34:	10ff581e 	bne	r2,r3,808c98 <__alt_data_end+0xff808c98>
  808f38:	d8c02017 	ldw	r3,128(sp)
  808f3c:	1880038f 	ldh	r2,14(r3)
  808f40:	103f5516 	blt	r2,zero,808c98 <__alt_data_end+0xff808c98>
  808f44:	d9c02217 	ldw	r7,136(sp)
  808f48:	d9002117 	ldw	r4,132(sp)
  808f4c:	a80d883a 	mov	r6,r21
  808f50:	180b883a 	mov	r5,r3
  808f54:	080a12c0 	call	80a12c <__sbprintf>
  808f58:	dfc03517 	ldw	ra,212(sp)
  808f5c:	df003417 	ldw	fp,208(sp)
  808f60:	ddc03317 	ldw	r23,204(sp)
  808f64:	dd803217 	ldw	r22,200(sp)
  808f68:	dd403117 	ldw	r21,196(sp)
  808f6c:	dd003017 	ldw	r20,192(sp)
  808f70:	dcc02f17 	ldw	r19,188(sp)
  808f74:	dc802e17 	ldw	r18,184(sp)
  808f78:	dc402d17 	ldw	r17,180(sp)
  808f7c:	dc002c17 	ldw	r16,176(sp)
  808f80:	dec03604 	addi	sp,sp,216
  808f84:	f800283a 	ret
  808f88:	080602c0 	call	80602c <__sinit>
  808f8c:	003f2f06 	br	808c4c <__alt_data_end+0xff808c4c>
  808f90:	d8c02517 	ldw	r3,148(sp)
  808f94:	d8802215 	stw	r2,136(sp)
  808f98:	00c7c83a 	sub	r3,zero,r3
  808f9c:	d8c02515 	stw	r3,148(sp)
  808fa0:	8c400114 	ori	r17,r17,4
  808fa4:	b0c00007 	ldb	r3,0(r22)
  808fa8:	003f7306 	br	808d78 <__alt_data_end+0xff808d78>
  808fac:	00800c04 	movi	r2,48
  808fb0:	d9402217 	ldw	r5,136(sp)
  808fb4:	d8801d05 	stb	r2,116(sp)
  808fb8:	00801e04 	movi	r2,120
  808fbc:	d8801d45 	stb	r2,117(sp)
  808fc0:	d8001d85 	stb	zero,118(sp)
  808fc4:	b811883a 	mov	r8,r23
  808fc8:	28c00104 	addi	r3,r5,4
  808fcc:	2cc00017 	ldw	r19,0(r5)
  808fd0:	0029883a 	mov	r20,zero
  808fd4:	88800094 	ori	r2,r17,2
  808fd8:	80032516 	blt	r16,zero,809c70 <___vfiprintf_internal_r+0x106c>
  808fdc:	00bfdfc4 	movi	r2,-129
  808fe0:	88a2703a 	and	r17,r17,r2
  808fe4:	d8c02215 	stw	r3,136(sp)
  808fe8:	8c400094 	ori	r17,r17,2
  808fec:	98032a1e 	bne	r19,zero,809c98 <___vfiprintf_internal_r+0x1094>
  808ff0:	00802074 	movhi	r2,129
  808ff4:	1083d504 	addi	r2,r2,3924
  808ff8:	d8802615 	stw	r2,152(sp)
  808ffc:	002b883a 	mov	r21,zero
  809000:	8001741e 	bne	r16,zero,8095d4 <___vfiprintf_internal_r+0x9d0>
  809004:	0021883a 	mov	r16,zero
  809008:	0029883a 	mov	r20,zero
  80900c:	ddc01a04 	addi	r23,sp,104
  809010:	8027883a 	mov	r19,r16
  809014:	8500010e 	bge	r16,r20,80901c <___vfiprintf_internal_r+0x418>
  809018:	a027883a 	mov	r19,r20
  80901c:	ad403fcc 	andi	r21,r21,255
  809020:	ad40201c 	xori	r21,r21,128
  809024:	ad7fe004 	addi	r21,r21,-128
  809028:	a8000126 	beq	r21,zero,809030 <___vfiprintf_internal_r+0x42c>
  80902c:	9cc00044 	addi	r19,r19,1
  809030:	89c0008c 	andi	r7,r17,2
  809034:	38000126 	beq	r7,zero,80903c <___vfiprintf_internal_r+0x438>
  809038:	9cc00084 	addi	r19,r19,2
  80903c:	88c0210c 	andi	r3,r17,132
  809040:	1801dd1e 	bne	r3,zero,8097b8 <___vfiprintf_internal_r+0xbb4>
  809044:	d9402517 	ldw	r5,148(sp)
  809048:	2cebc83a 	sub	r21,r5,r19
  80904c:	0541da0e 	bge	zero,r21,8097b8 <___vfiprintf_internal_r+0xbb4>
  809050:	07000404 	movi	fp,16
  809054:	d8801c17 	ldw	r2,112(sp)
  809058:	e543be0e 	bge	fp,r21,809f54 <___vfiprintf_internal_r+0x1350>
  80905c:	01402074 	movhi	r5,129
  809060:	29443a04 	addi	r5,r5,4328
  809064:	dc002715 	stw	r16,156(sp)
  809068:	d9801b17 	ldw	r6,108(sp)
  80906c:	a821883a 	mov	r16,r21
  809070:	d9402315 	stw	r5,140(sp)
  809074:	028001c4 	movi	r10,7
  809078:	d9c02915 	stw	r7,164(sp)
  80907c:	182b883a 	mov	r21,r3
  809080:	00000506 	br	809098 <___vfiprintf_internal_r+0x494>
  809084:	31000084 	addi	r4,r6,2
  809088:	42000204 	addi	r8,r8,8
  80908c:	180d883a 	mov	r6,r3
  809090:	843ffc04 	addi	r16,r16,-16
  809094:	e4000f0e 	bge	fp,r16,8090d4 <___vfiprintf_internal_r+0x4d0>
  809098:	01002074 	movhi	r4,129
  80909c:	10800404 	addi	r2,r2,16
  8090a0:	30c00044 	addi	r3,r6,1
  8090a4:	21043a04 	addi	r4,r4,4328
  8090a8:	41000015 	stw	r4,0(r8)
  8090ac:	47000115 	stw	fp,4(r8)
  8090b0:	d8801c15 	stw	r2,112(sp)
  8090b4:	d8c01b15 	stw	r3,108(sp)
  8090b8:	50fff20e 	bge	r10,r3,809084 <__alt_data_end+0xff809084>
  8090bc:	1001b21e 	bne	r2,zero,809788 <___vfiprintf_internal_r+0xb84>
  8090c0:	843ffc04 	addi	r16,r16,-16
  8090c4:	000d883a 	mov	r6,zero
  8090c8:	01000044 	movi	r4,1
  8090cc:	d811883a 	mov	r8,sp
  8090d0:	e43ff116 	blt	fp,r16,809098 <__alt_data_end+0xff809098>
  8090d4:	a807883a 	mov	r3,r21
  8090d8:	d9c02917 	ldw	r7,164(sp)
  8090dc:	802b883a 	mov	r21,r16
  8090e0:	dc002717 	ldw	r16,156(sp)
  8090e4:	d9402317 	ldw	r5,140(sp)
  8090e8:	a885883a 	add	r2,r21,r2
  8090ec:	45400115 	stw	r21,4(r8)
  8090f0:	41400015 	stw	r5,0(r8)
  8090f4:	d8801c15 	stw	r2,112(sp)
  8090f8:	d9001b15 	stw	r4,108(sp)
  8090fc:	014001c4 	movi	r5,7
  809100:	29026216 	blt	r5,r4,809a8c <___vfiprintf_internal_r+0xe88>
  809104:	d9801d87 	ldb	r6,118(sp)
  809108:	42000204 	addi	r8,r8,8
  80910c:	21400044 	addi	r5,r4,1
  809110:	3001ae1e 	bne	r6,zero,8097cc <___vfiprintf_internal_r+0xbc8>
  809114:	3801bb26 	beq	r7,zero,809804 <___vfiprintf_internal_r+0xc00>
  809118:	d9001d04 	addi	r4,sp,116
  80911c:	10800084 	addi	r2,r2,2
  809120:	41000015 	stw	r4,0(r8)
  809124:	01000084 	movi	r4,2
  809128:	41000115 	stw	r4,4(r8)
  80912c:	d8801c15 	stw	r2,112(sp)
  809130:	d9401b15 	stw	r5,108(sp)
  809134:	010001c4 	movi	r4,7
  809138:	2142680e 	bge	r4,r5,809adc <___vfiprintf_internal_r+0xed8>
  80913c:	1002b11e 	bne	r2,zero,809c04 <___vfiprintf_internal_r+0x1000>
  809140:	01802004 	movi	r6,128
  809144:	01400044 	movi	r5,1
  809148:	0009883a 	mov	r4,zero
  80914c:	d811883a 	mov	r8,sp
  809150:	1981ae1e 	bne	r3,r6,80980c <___vfiprintf_internal_r+0xc08>
  809154:	d8c02517 	ldw	r3,148(sp)
  809158:	1cf9c83a 	sub	fp,r3,r19
  80915c:	0701ab0e 	bge	zero,fp,80980c <___vfiprintf_internal_r+0xc08>
  809160:	05400404 	movi	r21,16
  809164:	af03a90e 	bge	r21,fp,80a00c <___vfiprintf_internal_r+0x1408>
  809168:	01402074 	movhi	r5,129
  80916c:	29443604 	addi	r5,r5,4312
  809170:	d9402315 	stw	r5,140(sp)
  809174:	01c001c4 	movi	r7,7
  809178:	00000506 	br	809190 <___vfiprintf_internal_r+0x58c>
  80917c:	21800084 	addi	r6,r4,2
  809180:	42000204 	addi	r8,r8,8
  809184:	1809883a 	mov	r4,r3
  809188:	e73ffc04 	addi	fp,fp,-16
  80918c:	af000d0e 	bge	r21,fp,8091c4 <___vfiprintf_internal_r+0x5c0>
  809190:	10800404 	addi	r2,r2,16
  809194:	20c00044 	addi	r3,r4,1
  809198:	44800015 	stw	r18,0(r8)
  80919c:	45400115 	stw	r21,4(r8)
  8091a0:	d8801c15 	stw	r2,112(sp)
  8091a4:	d8c01b15 	stw	r3,108(sp)
  8091a8:	38fff40e 	bge	r7,r3,80917c <__alt_data_end+0xff80917c>
  8091ac:	10022b1e 	bne	r2,zero,809a5c <___vfiprintf_internal_r+0xe58>
  8091b0:	e73ffc04 	addi	fp,fp,-16
  8091b4:	01800044 	movi	r6,1
  8091b8:	0009883a 	mov	r4,zero
  8091bc:	d811883a 	mov	r8,sp
  8091c0:	af3ff316 	blt	r21,fp,809190 <__alt_data_end+0xff809190>
  8091c4:	d8c02317 	ldw	r3,140(sp)
  8091c8:	1705883a 	add	r2,r2,fp
  8091cc:	47000115 	stw	fp,4(r8)
  8091d0:	40c00015 	stw	r3,0(r8)
  8091d4:	d8801c15 	stw	r2,112(sp)
  8091d8:	d9801b15 	stw	r6,108(sp)
  8091dc:	00c001c4 	movi	r3,7
  8091e0:	19829416 	blt	r3,r6,809c34 <___vfiprintf_internal_r+0x1030>
  8091e4:	8521c83a 	sub	r16,r16,r20
  8091e8:	42000204 	addi	r8,r8,8
  8091ec:	31400044 	addi	r5,r6,1
  8091f0:	3009883a 	mov	r4,r6
  8091f4:	04018716 	blt	zero,r16,809814 <___vfiprintf_internal_r+0xc10>
  8091f8:	a085883a 	add	r2,r20,r2
  8091fc:	45c00015 	stw	r23,0(r8)
  809200:	45000115 	stw	r20,4(r8)
  809204:	d8801c15 	stw	r2,112(sp)
  809208:	d9401b15 	stw	r5,108(sp)
  80920c:	00c001c4 	movi	r3,7
  809210:	1941c20e 	bge	r3,r5,80991c <___vfiprintf_internal_r+0xd18>
  809214:	1002531e 	bne	r2,zero,809b64 <___vfiprintf_internal_r+0xf60>
  809218:	d8001b15 	stw	zero,108(sp)
  80921c:	8c40010c 	andi	r17,r17,4
  809220:	88023226 	beq	r17,zero,809aec <___vfiprintf_internal_r+0xee8>
  809224:	d9002517 	ldw	r4,148(sp)
  809228:	24e3c83a 	sub	r17,r4,r19
  80922c:	04432916 	blt	zero,r17,809ed4 <___vfiprintf_internal_r+0x12d0>
  809230:	d8802517 	ldw	r2,148(sp)
  809234:	14c0010e 	bge	r2,r19,80923c <___vfiprintf_internal_r+0x638>
  809238:	9805883a 	mov	r2,r19
  80923c:	d8c02417 	ldw	r3,144(sp)
  809240:	1887883a 	add	r3,r3,r2
  809244:	d8c02415 	stw	r3,144(sp)
  809248:	d8001b15 	stw	zero,108(sp)
  80924c:	d811883a 	mov	r8,sp
  809250:	003ea006 	br	808cd4 <__alt_data_end+0xff808cd4>
  809254:	8c400814 	ori	r17,r17,32
  809258:	b0c00007 	ldb	r3,0(r22)
  80925c:	003ec606 	br	808d78 <__alt_data_end+0xff808d78>
  809260:	b0c00007 	ldb	r3,0(r22)
  809264:	00801b04 	movi	r2,108
  809268:	18832026 	beq	r3,r2,809eec <___vfiprintf_internal_r+0x12e8>
  80926c:	8c400414 	ori	r17,r17,16
  809270:	003ec106 	br	808d78 <__alt_data_end+0xff808d78>
  809274:	9cc03fcc 	andi	r19,r19,255
  809278:	b811883a 	mov	r8,r23
  80927c:	9803981e 	bne	r19,zero,80a0e0 <___vfiprintf_internal_r+0x14dc>
  809280:	8880080c 	andi	r2,r17,32
  809284:	1002be26 	beq	r2,zero,809d80 <___vfiprintf_internal_r+0x117c>
  809288:	d9002217 	ldw	r4,136(sp)
  80928c:	d9402417 	ldw	r5,144(sp)
  809290:	20800017 	ldw	r2,0(r4)
  809294:	2807d7fa 	srai	r3,r5,31
  809298:	21000104 	addi	r4,r4,4
  80929c:	d9002215 	stw	r4,136(sp)
  8092a0:	11400015 	stw	r5,0(r2)
  8092a4:	10c00115 	stw	r3,4(r2)
  8092a8:	003e8a06 	br	808cd4 <__alt_data_end+0xff808cd4>
  8092ac:	9cc03fcc 	andi	r19,r19,255
  8092b0:	b811883a 	mov	r8,r23
  8092b4:	9803871e 	bne	r19,zero,80a0d4 <___vfiprintf_internal_r+0x14d0>
  8092b8:	8880080c 	andi	r2,r17,32
  8092bc:	10009a26 	beq	r2,zero,809528 <___vfiprintf_internal_r+0x924>
  8092c0:	d9002217 	ldw	r4,136(sp)
  8092c4:	d8001d85 	stb	zero,118(sp)
  8092c8:	20800204 	addi	r2,r4,8
  8092cc:	24c00017 	ldw	r19,0(r4)
  8092d0:	25000117 	ldw	r20,4(r4)
  8092d4:	8002a416 	blt	r16,zero,809d68 <___vfiprintf_internal_r+0x1164>
  8092d8:	013fdfc4 	movi	r4,-129
  8092dc:	9d06b03a 	or	r3,r19,r20
  8092e0:	d8802215 	stw	r2,136(sp)
  8092e4:	8922703a 	and	r17,r17,r4
  8092e8:	18009b26 	beq	r3,zero,809558 <___vfiprintf_internal_r+0x954>
  8092ec:	002b883a 	mov	r21,zero
  8092f0:	ddc01a04 	addi	r23,sp,104
  8092f4:	9806d0fa 	srli	r3,r19,3
  8092f8:	a008977a 	slli	r4,r20,29
  8092fc:	a028d0fa 	srli	r20,r20,3
  809300:	9cc001cc 	andi	r19,r19,7
  809304:	98800c04 	addi	r2,r19,48
  809308:	bdffffc4 	addi	r23,r23,-1
  80930c:	20e6b03a 	or	r19,r4,r3
  809310:	b8800005 	stb	r2,0(r23)
  809314:	9d06b03a 	or	r3,r19,r20
  809318:	183ff61e 	bne	r3,zero,8092f4 <__alt_data_end+0xff8092f4>
  80931c:	88c0004c 	andi	r3,r17,1
  809320:	18021f1e 	bne	r3,zero,809ba0 <___vfiprintf_internal_r+0xf9c>
  809324:	d9401e17 	ldw	r5,120(sp)
  809328:	2de9c83a 	sub	r20,r5,r23
  80932c:	003f3806 	br	809010 <__alt_data_end+0xff809010>
  809330:	9cc03fcc 	andi	r19,r19,255
  809334:	b811883a 	mov	r8,r23
  809338:	98034f1e 	bne	r19,zero,80a078 <___vfiprintf_internal_r+0x1474>
  80933c:	00802074 	movhi	r2,129
  809340:	1083d504 	addi	r2,r2,3924
  809344:	d8802615 	stw	r2,152(sp)
  809348:	8880080c 	andi	r2,r17,32
  80934c:	1000ac26 	beq	r2,zero,809600 <___vfiprintf_internal_r+0x9fc>
  809350:	d9002217 	ldw	r4,136(sp)
  809354:	24c00017 	ldw	r19,0(r4)
  809358:	25000117 	ldw	r20,4(r4)
  80935c:	21000204 	addi	r4,r4,8
  809360:	d9002215 	stw	r4,136(sp)
  809364:	8880004c 	andi	r2,r17,1
  809368:	1001e726 	beq	r2,zero,809b08 <___vfiprintf_internal_r+0xf04>
  80936c:	9d04b03a 	or	r2,r19,r20
  809370:	10025c1e 	bne	r2,zero,809ce4 <___vfiprintf_internal_r+0x10e0>
  809374:	d8001d85 	stb	zero,118(sp)
  809378:	80024416 	blt	r16,zero,809c8c <___vfiprintf_internal_r+0x1088>
  80937c:	00bfdfc4 	movi	r2,-129
  809380:	88a2703a 	and	r17,r17,r2
  809384:	003f1d06 	br	808ffc <__alt_data_end+0xff808ffc>
  809388:	d8c02217 	ldw	r3,136(sp)
  80938c:	04c00044 	movi	r19,1
  809390:	b811883a 	mov	r8,r23
  809394:	18800017 	ldw	r2,0(r3)
  809398:	18c00104 	addi	r3,r3,4
  80939c:	d8001d85 	stb	zero,118(sp)
  8093a0:	d8801005 	stb	r2,64(sp)
  8093a4:	d8c02215 	stw	r3,136(sp)
  8093a8:	9829883a 	mov	r20,r19
  8093ac:	ddc01004 	addi	r23,sp,64
  8093b0:	0021883a 	mov	r16,zero
  8093b4:	003f1e06 	br	809030 <__alt_data_end+0xff809030>
  8093b8:	9cc03fcc 	andi	r19,r19,255
  8093bc:	b811883a 	mov	r8,r23
  8093c0:	9803331e 	bne	r19,zero,80a090 <___vfiprintf_internal_r+0x148c>
  8093c4:	8880080c 	andi	r2,r17,32
  8093c8:	10004826 	beq	r2,zero,8094ec <___vfiprintf_internal_r+0x8e8>
  8093cc:	d9002217 	ldw	r4,136(sp)
  8093d0:	20800117 	ldw	r2,4(r4)
  8093d4:	24c00017 	ldw	r19,0(r4)
  8093d8:	21000204 	addi	r4,r4,8
  8093dc:	d9002215 	stw	r4,136(sp)
  8093e0:	1029883a 	mov	r20,r2
  8093e4:	10024c16 	blt	r2,zero,809d18 <___vfiprintf_internal_r+0x1114>
  8093e8:	dd401d83 	ldbu	r21,118(sp)
  8093ec:	80007116 	blt	r16,zero,8095b4 <___vfiprintf_internal_r+0x9b0>
  8093f0:	00ffdfc4 	movi	r3,-129
  8093f4:	9d04b03a 	or	r2,r19,r20
  8093f8:	88e2703a 	and	r17,r17,r3
  8093fc:	1000d126 	beq	r2,zero,809744 <___vfiprintf_internal_r+0xb40>
  809400:	a0023526 	beq	r20,zero,809cd8 <___vfiprintf_internal_r+0x10d4>
  809404:	ddc01a04 	addi	r23,sp,104
  809408:	4039883a 	mov	fp,r8
  80940c:	9809883a 	mov	r4,r19
  809410:	a00b883a 	mov	r5,r20
  809414:	01800284 	movi	r6,10
  809418:	000f883a 	mov	r7,zero
  80941c:	080b1300 	call	80b130 <__umoddi3>
  809420:	10800c04 	addi	r2,r2,48
  809424:	bdffffc4 	addi	r23,r23,-1
  809428:	9809883a 	mov	r4,r19
  80942c:	a00b883a 	mov	r5,r20
  809430:	b8800005 	stb	r2,0(r23)
  809434:	01800284 	movi	r6,10
  809438:	000f883a 	mov	r7,zero
  80943c:	080ab340 	call	80ab34 <__udivdi3>
  809440:	1027883a 	mov	r19,r2
  809444:	10c4b03a 	or	r2,r2,r3
  809448:	1829883a 	mov	r20,r3
  80944c:	103fef1e 	bne	r2,zero,80940c <__alt_data_end+0xff80940c>
  809450:	d9001e17 	ldw	r4,120(sp)
  809454:	e011883a 	mov	r8,fp
  809458:	25e9c83a 	sub	r20,r4,r23
  80945c:	003eec06 	br	809010 <__alt_data_end+0xff809010>
  809460:	d8802307 	ldb	r2,140(sp)
  809464:	1002361e 	bne	r2,zero,809d40 <___vfiprintf_internal_r+0x113c>
  809468:	00c00804 	movi	r3,32
  80946c:	d8c02305 	stb	r3,140(sp)
  809470:	04c00044 	movi	r19,1
  809474:	b0c00007 	ldb	r3,0(r22)
  809478:	003e3f06 	br	808d78 <__alt_data_end+0xff808d78>
  80947c:	8c400054 	ori	r17,r17,1
  809480:	b0c00007 	ldb	r3,0(r22)
  809484:	003e3c06 	br	808d78 <__alt_data_end+0xff808d78>
  809488:	8c402014 	ori	r17,r17,128
  80948c:	b0c00007 	ldb	r3,0(r22)
  809490:	003e3906 	br	808d78 <__alt_data_end+0xff808d78>
  809494:	dc002715 	stw	r16,156(sp)
  809498:	d8002515 	stw	zero,148(sp)
  80949c:	1f3ff404 	addi	fp,r3,-48
  8094a0:	0009883a 	mov	r4,zero
  8094a4:	b021883a 	mov	r16,r22
  8094a8:	01400284 	movi	r5,10
  8094ac:	080b8a80 	call	80b8a8 <__mulsi3>
  8094b0:	80c00007 	ldb	r3,0(r16)
  8094b4:	e089883a 	add	r4,fp,r2
  8094b8:	b5800044 	addi	r22,r22,1
  8094bc:	1f3ff404 	addi	fp,r3,-48
  8094c0:	b021883a 	mov	r16,r22
  8094c4:	af3ff82e 	bgeu	r21,fp,8094a8 <__alt_data_end+0xff8094a8>
  8094c8:	d9002515 	stw	r4,148(sp)
  8094cc:	dc002717 	ldw	r16,156(sp)
  8094d0:	003e2a06 	br	808d7c <__alt_data_end+0xff808d7c>
  8094d4:	9cc03fcc 	andi	r19,r19,255
  8094d8:	b811883a 	mov	r8,r23
  8094dc:	9802e91e 	bne	r19,zero,80a084 <___vfiprintf_internal_r+0x1480>
  8094e0:	8c400414 	ori	r17,r17,16
  8094e4:	8880080c 	andi	r2,r17,32
  8094e8:	103fb81e 	bne	r2,zero,8093cc <__alt_data_end+0xff8093cc>
  8094ec:	8880040c 	andi	r2,r17,16
  8094f0:	10022e26 	beq	r2,zero,809dac <___vfiprintf_internal_r+0x11a8>
  8094f4:	d9402217 	ldw	r5,136(sp)
  8094f8:	2cc00017 	ldw	r19,0(r5)
  8094fc:	29400104 	addi	r5,r5,4
  809500:	d9402215 	stw	r5,136(sp)
  809504:	9829d7fa 	srai	r20,r19,31
  809508:	a005883a 	mov	r2,r20
  80950c:	003fb506 	br	8093e4 <__alt_data_end+0xff8093e4>
  809510:	9cc03fcc 	andi	r19,r19,255
  809514:	b811883a 	mov	r8,r23
  809518:	9802fa1e 	bne	r19,zero,80a104 <___vfiprintf_internal_r+0x1500>
  80951c:	8c400414 	ori	r17,r17,16
  809520:	8880080c 	andi	r2,r17,32
  809524:	103f661e 	bne	r2,zero,8092c0 <__alt_data_end+0xff8092c0>
  809528:	8880040c 	andi	r2,r17,16
  80952c:	10020626 	beq	r2,zero,809d48 <___vfiprintf_internal_r+0x1144>
  809530:	d9402217 	ldw	r5,136(sp)
  809534:	d8001d85 	stb	zero,118(sp)
  809538:	0029883a 	mov	r20,zero
  80953c:	28800104 	addi	r2,r5,4
  809540:	2cc00017 	ldw	r19,0(r5)
  809544:	80020816 	blt	r16,zero,809d68 <___vfiprintf_internal_r+0x1164>
  809548:	00ffdfc4 	movi	r3,-129
  80954c:	d8802215 	stw	r2,136(sp)
  809550:	88e2703a 	and	r17,r17,r3
  809554:	983f651e 	bne	r19,zero,8092ec <__alt_data_end+0xff8092ec>
  809558:	002b883a 	mov	r21,zero
  80955c:	8002cf26 	beq	r16,zero,80a09c <___vfiprintf_internal_r+0x1498>
  809560:	0027883a 	mov	r19,zero
  809564:	0029883a 	mov	r20,zero
  809568:	003f6106 	br	8092f0 <__alt_data_end+0xff8092f0>
  80956c:	9cc03fcc 	andi	r19,r19,255
  809570:	b811883a 	mov	r8,r23
  809574:	9802e01e 	bne	r19,zero,80a0f8 <___vfiprintf_internal_r+0x14f4>
  809578:	8c400414 	ori	r17,r17,16
  80957c:	8880080c 	andi	r2,r17,32
  809580:	1000641e 	bne	r2,zero,809714 <___vfiprintf_internal_r+0xb10>
  809584:	8880040c 	andi	r2,r17,16
  809588:	1001c81e 	bne	r2,zero,809cac <___vfiprintf_internal_r+0x10a8>
  80958c:	8880100c 	andi	r2,r17,64
  809590:	d8001d85 	stb	zero,118(sp)
  809594:	1002281e 	bne	r2,zero,809e38 <___vfiprintf_internal_r+0x1234>
  809598:	d9002217 	ldw	r4,136(sp)
  80959c:	0029883a 	mov	r20,zero
  8095a0:	20800104 	addi	r2,r4,4
  8095a4:	24c00017 	ldw	r19,0(r4)
  8095a8:	8001c60e 	bge	r16,zero,809cc4 <___vfiprintf_internal_r+0x10c0>
  8095ac:	d8802215 	stw	r2,136(sp)
  8095b0:	002b883a 	mov	r21,zero
  8095b4:	9d04b03a 	or	r2,r19,r20
  8095b8:	103f911e 	bne	r2,zero,809400 <__alt_data_end+0xff809400>
  8095bc:	00800044 	movi	r2,1
  8095c0:	10803fcc 	andi	r2,r2,255
  8095c4:	00c00044 	movi	r3,1
  8095c8:	10c05f26 	beq	r2,r3,809748 <___vfiprintf_internal_r+0xb44>
  8095cc:	00c00084 	movi	r3,2
  8095d0:	10ffe31e 	bne	r2,r3,809560 <__alt_data_end+0xff809560>
  8095d4:	0027883a 	mov	r19,zero
  8095d8:	0029883a 	mov	r20,zero
  8095dc:	00015106 	br	809b24 <___vfiprintf_internal_r+0xf20>
  8095e0:	9cc03fcc 	andi	r19,r19,255
  8095e4:	b811883a 	mov	r8,r23
  8095e8:	9802c01e 	bne	r19,zero,80a0ec <___vfiprintf_internal_r+0x14e8>
  8095ec:	01402074 	movhi	r5,129
  8095f0:	2943d004 	addi	r5,r5,3904
  8095f4:	d9402615 	stw	r5,152(sp)
  8095f8:	8880080c 	andi	r2,r17,32
  8095fc:	103f541e 	bne	r2,zero,809350 <__alt_data_end+0xff809350>
  809600:	8880040c 	andi	r2,r17,16
  809604:	1001f226 	beq	r2,zero,809dd0 <___vfiprintf_internal_r+0x11cc>
  809608:	d9402217 	ldw	r5,136(sp)
  80960c:	0029883a 	mov	r20,zero
  809610:	2cc00017 	ldw	r19,0(r5)
  809614:	29400104 	addi	r5,r5,4
  809618:	d9402215 	stw	r5,136(sp)
  80961c:	003f5106 	br	809364 <__alt_data_end+0xff809364>
  809620:	d8c02217 	ldw	r3,136(sp)
  809624:	b811883a 	mov	r8,r23
  809628:	d8001d85 	stb	zero,118(sp)
  80962c:	1dc00017 	ldw	r23,0(r3)
  809630:	1f000104 	addi	fp,r3,4
  809634:	b8025926 	beq	r23,zero,809f9c <___vfiprintf_internal_r+0x1398>
  809638:	80023316 	blt	r16,zero,809f08 <___vfiprintf_internal_r+0x1304>
  80963c:	800d883a 	mov	r6,r16
  809640:	000b883a 	mov	r5,zero
  809644:	b809883a 	mov	r4,r23
  809648:	da002a15 	stw	r8,168(sp)
  80964c:	0806d980 	call	806d98 <memchr>
  809650:	da002a17 	ldw	r8,168(sp)
  809654:	10026826 	beq	r2,zero,809ff8 <___vfiprintf_internal_r+0x13f4>
  809658:	15e9c83a 	sub	r20,r2,r23
  80965c:	dd401d83 	ldbu	r21,118(sp)
  809660:	df002215 	stw	fp,136(sp)
  809664:	0021883a 	mov	r16,zero
  809668:	003e6906 	br	809010 <__alt_data_end+0xff809010>
  80966c:	9cc03fcc 	andi	r19,r19,255
  809670:	b811883a 	mov	r8,r23
  809674:	983fc126 	beq	r19,zero,80957c <__alt_data_end+0xff80957c>
  809678:	d8c02303 	ldbu	r3,140(sp)
  80967c:	d8c01d85 	stb	r3,118(sp)
  809680:	003fbe06 	br	80957c <__alt_data_end+0xff80957c>
  809684:	d9002217 	ldw	r4,136(sp)
  809688:	d9402217 	ldw	r5,136(sp)
  80968c:	21000017 	ldw	r4,0(r4)
  809690:	28800104 	addi	r2,r5,4
  809694:	d9002515 	stw	r4,148(sp)
  809698:	203e3d16 	blt	r4,zero,808f90 <__alt_data_end+0xff808f90>
  80969c:	d8802215 	stw	r2,136(sp)
  8096a0:	b0c00007 	ldb	r3,0(r22)
  8096a4:	003db406 	br	808d78 <__alt_data_end+0xff808d78>
  8096a8:	00c00ac4 	movi	r3,43
  8096ac:	d8c02305 	stb	r3,140(sp)
  8096b0:	04c00044 	movi	r19,1
  8096b4:	b0c00007 	ldb	r3,0(r22)
  8096b8:	003daf06 	br	808d78 <__alt_data_end+0xff808d78>
  8096bc:	b0c00007 	ldb	r3,0(r22)
  8096c0:	01000a84 	movi	r4,42
  8096c4:	b4000044 	addi	r16,r22,1
  8096c8:	19025e26 	beq	r3,r4,80a044 <___vfiprintf_internal_r+0x1440>
  8096cc:	1f3ff404 	addi	fp,r3,-48
  8096d0:	0009883a 	mov	r4,zero
  8096d4:	af025236 	bltu	r21,fp,80a020 <___vfiprintf_internal_r+0x141c>
  8096d8:	01400284 	movi	r5,10
  8096dc:	080b8a80 	call	80b8a8 <__mulsi3>
  8096e0:	80c00007 	ldb	r3,0(r16)
  8096e4:	1709883a 	add	r4,r2,fp
  8096e8:	85800044 	addi	r22,r16,1
  8096ec:	1f3ff404 	addi	fp,r3,-48
  8096f0:	b021883a 	mov	r16,r22
  8096f4:	af3ff82e 	bgeu	r21,fp,8096d8 <__alt_data_end+0xff8096d8>
  8096f8:	2021883a 	mov	r16,r4
  8096fc:	203d9f0e 	bge	r4,zero,808d7c <__alt_data_end+0xff808d7c>
  809700:	043fffc4 	movi	r16,-1
  809704:	003d9d06 	br	808d7c <__alt_data_end+0xff808d7c>
  809708:	8c401014 	ori	r17,r17,64
  80970c:	b0c00007 	ldb	r3,0(r22)
  809710:	003d9906 	br	808d78 <__alt_data_end+0xff808d78>
  809714:	d9002217 	ldw	r4,136(sp)
  809718:	d8001d85 	stb	zero,118(sp)
  80971c:	20c00204 	addi	r3,r4,8
  809720:	24c00017 	ldw	r19,0(r4)
  809724:	25000117 	ldw	r20,4(r4)
  809728:	8001e716 	blt	r16,zero,809ec8 <___vfiprintf_internal_r+0x12c4>
  80972c:	013fdfc4 	movi	r4,-129
  809730:	9d04b03a 	or	r2,r19,r20
  809734:	d8c02215 	stw	r3,136(sp)
  809738:	8922703a 	and	r17,r17,r4
  80973c:	002b883a 	mov	r21,zero
  809740:	103f2f1e 	bne	r2,zero,809400 <__alt_data_end+0xff809400>
  809744:	803e2f26 	beq	r16,zero,809004 <__alt_data_end+0xff809004>
  809748:	0027883a 	mov	r19,zero
  80974c:	9cc00c04 	addi	r19,r19,48
  809750:	dcc019c5 	stb	r19,103(sp)
  809754:	dd002817 	ldw	r20,160(sp)
  809758:	ddc019c4 	addi	r23,sp,103
  80975c:	003e2c06 	br	809010 <__alt_data_end+0xff809010>
  809760:	9cc03fcc 	andi	r19,r19,255
  809764:	b811883a 	mov	r8,r23
  809768:	9802571e 	bne	r19,zero,80a0c8 <___vfiprintf_internal_r+0x14c4>
  80976c:	18005726 	beq	r3,zero,8098cc <___vfiprintf_internal_r+0xcc8>
  809770:	04c00044 	movi	r19,1
  809774:	d8c01005 	stb	r3,64(sp)
  809778:	d8001d85 	stb	zero,118(sp)
  80977c:	9829883a 	mov	r20,r19
  809780:	ddc01004 	addi	r23,sp,64
  809784:	003f0a06 	br	8093b0 <__alt_data_end+0xff8093b0>
  809788:	d9402017 	ldw	r5,128(sp)
  80978c:	d9002117 	ldw	r4,132(sp)
  809790:	d9801a04 	addi	r6,sp,104
  809794:	da802a15 	stw	r10,168(sp)
  809798:	0808af00 	call	808af0 <__sprint_r.part.0>
  80979c:	da802a17 	ldw	r10,168(sp)
  8097a0:	1000501e 	bne	r2,zero,8098e4 <___vfiprintf_internal_r+0xce0>
  8097a4:	d9801b17 	ldw	r6,108(sp)
  8097a8:	d8801c17 	ldw	r2,112(sp)
  8097ac:	d811883a 	mov	r8,sp
  8097b0:	31000044 	addi	r4,r6,1
  8097b4:	003e3606 	br	809090 <__alt_data_end+0xff809090>
  8097b8:	d9001b17 	ldw	r4,108(sp)
  8097bc:	d8801c17 	ldw	r2,112(sp)
  8097c0:	21400044 	addi	r5,r4,1
  8097c4:	d9801d87 	ldb	r6,118(sp)
  8097c8:	303e5226 	beq	r6,zero,809114 <__alt_data_end+0xff809114>
  8097cc:	01800044 	movi	r6,1
  8097d0:	d9001d84 	addi	r4,sp,118
  8097d4:	1185883a 	add	r2,r2,r6
  8097d8:	41000015 	stw	r4,0(r8)
  8097dc:	41800115 	stw	r6,4(r8)
  8097e0:	d8801c15 	stw	r2,112(sp)
  8097e4:	d9401b15 	stw	r5,108(sp)
  8097e8:	010001c4 	movi	r4,7
  8097ec:	2140b00e 	bge	r4,r5,809ab0 <___vfiprintf_internal_r+0xeac>
  8097f0:	1000f61e 	bne	r2,zero,809bcc <___vfiprintf_internal_r+0xfc8>
  8097f4:	3800b31e 	bne	r7,zero,809ac4 <___vfiprintf_internal_r+0xec0>
  8097f8:	0009883a 	mov	r4,zero
  8097fc:	300b883a 	mov	r5,r6
  809800:	d811883a 	mov	r8,sp
  809804:	01802004 	movi	r6,128
  809808:	19be5226 	beq	r3,r6,809154 <__alt_data_end+0xff809154>
  80980c:	8521c83a 	sub	r16,r16,r20
  809810:	043e790e 	bge	zero,r16,8091f8 <__alt_data_end+0xff8091f8>
  809814:	05400404 	movi	r21,16
  809818:	ac01b00e 	bge	r21,r16,809edc <___vfiprintf_internal_r+0x12d8>
  80981c:	01402074 	movhi	r5,129
  809820:	29443604 	addi	r5,r5,4312
  809824:	d9402315 	stw	r5,140(sp)
  809828:	070001c4 	movi	fp,7
  80982c:	00000506 	br	809844 <___vfiprintf_internal_r+0xc40>
  809830:	21400084 	addi	r5,r4,2
  809834:	42000204 	addi	r8,r8,8
  809838:	1809883a 	mov	r4,r3
  80983c:	843ffc04 	addi	r16,r16,-16
  809840:	ac000d0e 	bge	r21,r16,809878 <___vfiprintf_internal_r+0xc74>
  809844:	10800404 	addi	r2,r2,16
  809848:	20c00044 	addi	r3,r4,1
  80984c:	44800015 	stw	r18,0(r8)
  809850:	45400115 	stw	r21,4(r8)
  809854:	d8801c15 	stw	r2,112(sp)
  809858:	d8c01b15 	stw	r3,108(sp)
  80985c:	e0fff40e 	bge	fp,r3,809830 <__alt_data_end+0xff809830>
  809860:	1000101e 	bne	r2,zero,8098a4 <___vfiprintf_internal_r+0xca0>
  809864:	843ffc04 	addi	r16,r16,-16
  809868:	01400044 	movi	r5,1
  80986c:	0009883a 	mov	r4,zero
  809870:	d811883a 	mov	r8,sp
  809874:	ac3ff316 	blt	r21,r16,809844 <__alt_data_end+0xff809844>
  809878:	d8c02317 	ldw	r3,140(sp)
  80987c:	1405883a 	add	r2,r2,r16
  809880:	44000115 	stw	r16,4(r8)
  809884:	40c00015 	stw	r3,0(r8)
  809888:	d8801c15 	stw	r2,112(sp)
  80988c:	d9401b15 	stw	r5,108(sp)
  809890:	00c001c4 	movi	r3,7
  809894:	19401916 	blt	r3,r5,8098fc <___vfiprintf_internal_r+0xcf8>
  809898:	42000204 	addi	r8,r8,8
  80989c:	29400044 	addi	r5,r5,1
  8098a0:	003e5506 	br	8091f8 <__alt_data_end+0xff8091f8>
  8098a4:	d9402017 	ldw	r5,128(sp)
  8098a8:	d9002117 	ldw	r4,132(sp)
  8098ac:	d9801a04 	addi	r6,sp,104
  8098b0:	0808af00 	call	808af0 <__sprint_r.part.0>
  8098b4:	10000b1e 	bne	r2,zero,8098e4 <___vfiprintf_internal_r+0xce0>
  8098b8:	d9001b17 	ldw	r4,108(sp)
  8098bc:	d8801c17 	ldw	r2,112(sp)
  8098c0:	d811883a 	mov	r8,sp
  8098c4:	21400044 	addi	r5,r4,1
  8098c8:	003fdc06 	br	80983c <__alt_data_end+0xff80983c>
  8098cc:	d8801c17 	ldw	r2,112(sp)
  8098d0:	10000426 	beq	r2,zero,8098e4 <___vfiprintf_internal_r+0xce0>
  8098d4:	d9402017 	ldw	r5,128(sp)
  8098d8:	d9002117 	ldw	r4,132(sp)
  8098dc:	d9801a04 	addi	r6,sp,104
  8098e0:	0808af00 	call	808af0 <__sprint_r.part.0>
  8098e4:	d9402017 	ldw	r5,128(sp)
  8098e8:	2880030b 	ldhu	r2,12(r5)
  8098ec:	1080100c 	andi	r2,r2,64
  8098f0:	10014d1e 	bne	r2,zero,809e28 <___vfiprintf_internal_r+0x1224>
  8098f4:	d8802417 	ldw	r2,144(sp)
  8098f8:	003d9706 	br	808f58 <__alt_data_end+0xff808f58>
  8098fc:	1000d21e 	bne	r2,zero,809c48 <___vfiprintf_internal_r+0x1044>
  809900:	00c00044 	movi	r3,1
  809904:	a005883a 	mov	r2,r20
  809908:	ddc00015 	stw	r23,0(sp)
  80990c:	dd000115 	stw	r20,4(sp)
  809910:	dd001c15 	stw	r20,112(sp)
  809914:	d8c01b15 	stw	r3,108(sp)
  809918:	d811883a 	mov	r8,sp
  80991c:	42000204 	addi	r8,r8,8
  809920:	8c40010c 	andi	r17,r17,4
  809924:	88004026 	beq	r17,zero,809a28 <___vfiprintf_internal_r+0xe24>
  809928:	d9002517 	ldw	r4,148(sp)
  80992c:	24e3c83a 	sub	r17,r4,r19
  809930:	04403d0e 	bge	zero,r17,809a28 <___vfiprintf_internal_r+0xe24>
  809934:	04000404 	movi	r16,16
  809938:	8441a90e 	bge	r16,r17,809fe0 <___vfiprintf_internal_r+0x13dc>
  80993c:	00c02074 	movhi	r3,129
  809940:	18c43a04 	addi	r3,r3,4328
  809944:	d9001b17 	ldw	r4,108(sp)
  809948:	d8c02315 	stw	r3,140(sp)
  80994c:	050001c4 	movi	r20,7
  809950:	dd402117 	ldw	r21,132(sp)
  809954:	ddc02017 	ldw	r23,128(sp)
  809958:	00000506 	br	809970 <___vfiprintf_internal_r+0xd6c>
  80995c:	21400084 	addi	r5,r4,2
  809960:	42000204 	addi	r8,r8,8
  809964:	1809883a 	mov	r4,r3
  809968:	8c7ffc04 	addi	r17,r17,-16
  80996c:	84400f0e 	bge	r16,r17,8099ac <___vfiprintf_internal_r+0xda8>
  809970:	01402074 	movhi	r5,129
  809974:	10800404 	addi	r2,r2,16
  809978:	20c00044 	addi	r3,r4,1
  80997c:	29443a04 	addi	r5,r5,4328
  809980:	41400015 	stw	r5,0(r8)
  809984:	44000115 	stw	r16,4(r8)
  809988:	d8801c15 	stw	r2,112(sp)
  80998c:	d8c01b15 	stw	r3,108(sp)
  809990:	a0fff20e 	bge	r20,r3,80995c <__alt_data_end+0xff80995c>
  809994:	1000141e 	bne	r2,zero,8099e8 <___vfiprintf_internal_r+0xde4>
  809998:	8c7ffc04 	addi	r17,r17,-16
  80999c:	01400044 	movi	r5,1
  8099a0:	0009883a 	mov	r4,zero
  8099a4:	d811883a 	mov	r8,sp
  8099a8:	847ff116 	blt	r16,r17,809970 <__alt_data_end+0xff809970>
  8099ac:	d8c02317 	ldw	r3,140(sp)
  8099b0:	1445883a 	add	r2,r2,r17
  8099b4:	44400115 	stw	r17,4(r8)
  8099b8:	40c00015 	stw	r3,0(r8)
  8099bc:	d8801c15 	stw	r2,112(sp)
  8099c0:	d9401b15 	stw	r5,108(sp)
  8099c4:	00c001c4 	movi	r3,7
  8099c8:	1940170e 	bge	r3,r5,809a28 <___vfiprintf_internal_r+0xe24>
  8099cc:	1000101e 	bne	r2,zero,809a10 <___vfiprintf_internal_r+0xe0c>
  8099d0:	d8802517 	ldw	r2,148(sp)
  8099d4:	14c11616 	blt	r2,r19,809e30 <___vfiprintf_internal_r+0x122c>
  8099d8:	d9002417 	ldw	r4,144(sp)
  8099dc:	2089883a 	add	r4,r4,r2
  8099e0:	d9002415 	stw	r4,144(sp)
  8099e4:	003e1806 	br	809248 <__alt_data_end+0xff809248>
  8099e8:	d9801a04 	addi	r6,sp,104
  8099ec:	b80b883a 	mov	r5,r23
  8099f0:	a809883a 	mov	r4,r21
  8099f4:	0808af00 	call	808af0 <__sprint_r.part.0>
  8099f8:	103fba1e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  8099fc:	d9001b17 	ldw	r4,108(sp)
  809a00:	d8801c17 	ldw	r2,112(sp)
  809a04:	d811883a 	mov	r8,sp
  809a08:	21400044 	addi	r5,r4,1
  809a0c:	003fd606 	br	809968 <__alt_data_end+0xff809968>
  809a10:	d9402017 	ldw	r5,128(sp)
  809a14:	d9002117 	ldw	r4,132(sp)
  809a18:	d9801a04 	addi	r6,sp,104
  809a1c:	0808af00 	call	808af0 <__sprint_r.part.0>
  809a20:	103fb01e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  809a24:	d8801c17 	ldw	r2,112(sp)
  809a28:	d8c02517 	ldw	r3,148(sp)
  809a2c:	1cc0010e 	bge	r3,r19,809a34 <___vfiprintf_internal_r+0xe30>
  809a30:	9807883a 	mov	r3,r19
  809a34:	d9002417 	ldw	r4,144(sp)
  809a38:	20c9883a 	add	r4,r4,r3
  809a3c:	d9002415 	stw	r4,144(sp)
  809a40:	103e0126 	beq	r2,zero,809248 <__alt_data_end+0xff809248>
  809a44:	d9402017 	ldw	r5,128(sp)
  809a48:	d9002117 	ldw	r4,132(sp)
  809a4c:	d9801a04 	addi	r6,sp,104
  809a50:	0808af00 	call	808af0 <__sprint_r.part.0>
  809a54:	103dfc26 	beq	r2,zero,809248 <__alt_data_end+0xff809248>
  809a58:	003fa206 	br	8098e4 <__alt_data_end+0xff8098e4>
  809a5c:	d9402017 	ldw	r5,128(sp)
  809a60:	d9002117 	ldw	r4,132(sp)
  809a64:	d9801a04 	addi	r6,sp,104
  809a68:	d9c02b15 	stw	r7,172(sp)
  809a6c:	0808af00 	call	808af0 <__sprint_r.part.0>
  809a70:	d9c02b17 	ldw	r7,172(sp)
  809a74:	103f9b1e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  809a78:	d9001b17 	ldw	r4,108(sp)
  809a7c:	d8801c17 	ldw	r2,112(sp)
  809a80:	d811883a 	mov	r8,sp
  809a84:	21800044 	addi	r6,r4,1
  809a88:	003dbf06 	br	809188 <__alt_data_end+0xff809188>
  809a8c:	1000d81e 	bne	r2,zero,809df0 <___vfiprintf_internal_r+0x11ec>
  809a90:	d9001d87 	ldb	r4,118(sp)
  809a94:	20000a26 	beq	r4,zero,809ac0 <___vfiprintf_internal_r+0xebc>
  809a98:	00800044 	movi	r2,1
  809a9c:	d9001d84 	addi	r4,sp,118
  809aa0:	100b883a 	mov	r5,r2
  809aa4:	d9000015 	stw	r4,0(sp)
  809aa8:	d8800115 	stw	r2,4(sp)
  809aac:	d811883a 	mov	r8,sp
  809ab0:	2809883a 	mov	r4,r5
  809ab4:	42000204 	addi	r8,r8,8
  809ab8:	29400044 	addi	r5,r5,1
  809abc:	003d9506 	br	809114 <__alt_data_end+0xff809114>
  809ac0:	3800fd26 	beq	r7,zero,809eb8 <___vfiprintf_internal_r+0x12b4>
  809ac4:	00800084 	movi	r2,2
  809ac8:	d9001d04 	addi	r4,sp,116
  809acc:	d9000015 	stw	r4,0(sp)
  809ad0:	d8800115 	stw	r2,4(sp)
  809ad4:	01400044 	movi	r5,1
  809ad8:	d811883a 	mov	r8,sp
  809adc:	2809883a 	mov	r4,r5
  809ae0:	42000204 	addi	r8,r8,8
  809ae4:	29400044 	addi	r5,r5,1
  809ae8:	003f4606 	br	809804 <__alt_data_end+0xff809804>
  809aec:	d8802517 	ldw	r2,148(sp)
  809af0:	14c0010e 	bge	r2,r19,809af8 <___vfiprintf_internal_r+0xef4>
  809af4:	9805883a 	mov	r2,r19
  809af8:	d9402417 	ldw	r5,144(sp)
  809afc:	288b883a 	add	r5,r5,r2
  809b00:	d9402415 	stw	r5,144(sp)
  809b04:	003dd006 	br	809248 <__alt_data_end+0xff809248>
  809b08:	d8001d85 	stb	zero,118(sp)
  809b0c:	80005d16 	blt	r16,zero,809c84 <___vfiprintf_internal_r+0x1080>
  809b10:	00ffdfc4 	movi	r3,-129
  809b14:	9d04b03a 	or	r2,r19,r20
  809b18:	88e2703a 	and	r17,r17,r3
  809b1c:	103d3726 	beq	r2,zero,808ffc <__alt_data_end+0xff808ffc>
  809b20:	002b883a 	mov	r21,zero
  809b24:	d9002617 	ldw	r4,152(sp)
  809b28:	ddc01a04 	addi	r23,sp,104
  809b2c:	988003cc 	andi	r2,r19,15
  809b30:	a006973a 	slli	r3,r20,28
  809b34:	2085883a 	add	r2,r4,r2
  809b38:	9826d13a 	srli	r19,r19,4
  809b3c:	10800003 	ldbu	r2,0(r2)
  809b40:	a028d13a 	srli	r20,r20,4
  809b44:	bdffffc4 	addi	r23,r23,-1
  809b48:	1ce6b03a 	or	r19,r3,r19
  809b4c:	b8800005 	stb	r2,0(r23)
  809b50:	9d04b03a 	or	r2,r19,r20
  809b54:	103ff51e 	bne	r2,zero,809b2c <__alt_data_end+0xff809b2c>
  809b58:	d8801e17 	ldw	r2,120(sp)
  809b5c:	15e9c83a 	sub	r20,r2,r23
  809b60:	003d2b06 	br	809010 <__alt_data_end+0xff809010>
  809b64:	d9402017 	ldw	r5,128(sp)
  809b68:	d9002117 	ldw	r4,132(sp)
  809b6c:	d9801a04 	addi	r6,sp,104
  809b70:	0808af00 	call	808af0 <__sprint_r.part.0>
  809b74:	103f5b1e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  809b78:	d8801c17 	ldw	r2,112(sp)
  809b7c:	d811883a 	mov	r8,sp
  809b80:	003f6706 	br	809920 <__alt_data_end+0xff809920>
  809b84:	d9402017 	ldw	r5,128(sp)
  809b88:	d9002117 	ldw	r4,132(sp)
  809b8c:	d9801a04 	addi	r6,sp,104
  809b90:	0808af00 	call	808af0 <__sprint_r.part.0>
  809b94:	103f531e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  809b98:	d811883a 	mov	r8,sp
  809b9c:	003cd906 	br	808f04 <__alt_data_end+0xff808f04>
  809ba0:	10803fcc 	andi	r2,r2,255
  809ba4:	1080201c 	xori	r2,r2,128
  809ba8:	10bfe004 	addi	r2,r2,-128
  809bac:	00c00c04 	movi	r3,48
  809bb0:	10ffe926 	beq	r2,r3,809b58 <__alt_data_end+0xff809b58>
  809bb4:	b8ffffc5 	stb	r3,-1(r23)
  809bb8:	d8c01e17 	ldw	r3,120(sp)
  809bbc:	b8bfffc4 	addi	r2,r23,-1
  809bc0:	102f883a 	mov	r23,r2
  809bc4:	18a9c83a 	sub	r20,r3,r2
  809bc8:	003d1106 	br	809010 <__alt_data_end+0xff809010>
  809bcc:	d9402017 	ldw	r5,128(sp)
  809bd0:	d9002117 	ldw	r4,132(sp)
  809bd4:	d9801a04 	addi	r6,sp,104
  809bd8:	d8c02a15 	stw	r3,168(sp)
  809bdc:	d9c02b15 	stw	r7,172(sp)
  809be0:	0808af00 	call	808af0 <__sprint_r.part.0>
  809be4:	d8c02a17 	ldw	r3,168(sp)
  809be8:	d9c02b17 	ldw	r7,172(sp)
  809bec:	103f3d1e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  809bf0:	d9001b17 	ldw	r4,108(sp)
  809bf4:	d8801c17 	ldw	r2,112(sp)
  809bf8:	d811883a 	mov	r8,sp
  809bfc:	21400044 	addi	r5,r4,1
  809c00:	003d4406 	br	809114 <__alt_data_end+0xff809114>
  809c04:	d9402017 	ldw	r5,128(sp)
  809c08:	d9002117 	ldw	r4,132(sp)
  809c0c:	d9801a04 	addi	r6,sp,104
  809c10:	d8c02a15 	stw	r3,168(sp)
  809c14:	0808af00 	call	808af0 <__sprint_r.part.0>
  809c18:	d8c02a17 	ldw	r3,168(sp)
  809c1c:	103f311e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  809c20:	d9001b17 	ldw	r4,108(sp)
  809c24:	d8801c17 	ldw	r2,112(sp)
  809c28:	d811883a 	mov	r8,sp
  809c2c:	21400044 	addi	r5,r4,1
  809c30:	003ef406 	br	809804 <__alt_data_end+0xff809804>
  809c34:	1000bd1e 	bne	r2,zero,809f2c <___vfiprintf_internal_r+0x1328>
  809c38:	01400044 	movi	r5,1
  809c3c:	0009883a 	mov	r4,zero
  809c40:	d811883a 	mov	r8,sp
  809c44:	003ef106 	br	80980c <__alt_data_end+0xff80980c>
  809c48:	d9402017 	ldw	r5,128(sp)
  809c4c:	d9002117 	ldw	r4,132(sp)
  809c50:	d9801a04 	addi	r6,sp,104
  809c54:	0808af00 	call	808af0 <__sprint_r.part.0>
  809c58:	103f221e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  809c5c:	d9401b17 	ldw	r5,108(sp)
  809c60:	d8801c17 	ldw	r2,112(sp)
  809c64:	d811883a 	mov	r8,sp
  809c68:	29400044 	addi	r5,r5,1
  809c6c:	003d6206 	br	8091f8 <__alt_data_end+0xff8091f8>
  809c70:	01402074 	movhi	r5,129
  809c74:	2943d504 	addi	r5,r5,3924
  809c78:	d9402615 	stw	r5,152(sp)
  809c7c:	d8c02215 	stw	r3,136(sp)
  809c80:	1023883a 	mov	r17,r2
  809c84:	9d04b03a 	or	r2,r19,r20
  809c88:	103fa51e 	bne	r2,zero,809b20 <__alt_data_end+0xff809b20>
  809c8c:	002b883a 	mov	r21,zero
  809c90:	00800084 	movi	r2,2
  809c94:	003e4a06 	br	8095c0 <__alt_data_end+0xff8095c0>
  809c98:	01402074 	movhi	r5,129
  809c9c:	2943d504 	addi	r5,r5,3924
  809ca0:	002b883a 	mov	r21,zero
  809ca4:	d9402615 	stw	r5,152(sp)
  809ca8:	003f9e06 	br	809b24 <__alt_data_end+0xff809b24>
  809cac:	d9402217 	ldw	r5,136(sp)
  809cb0:	d8001d85 	stb	zero,118(sp)
  809cb4:	0029883a 	mov	r20,zero
  809cb8:	28800104 	addi	r2,r5,4
  809cbc:	2cc00017 	ldw	r19,0(r5)
  809cc0:	803e3a16 	blt	r16,zero,8095ac <__alt_data_end+0xff8095ac>
  809cc4:	00ffdfc4 	movi	r3,-129
  809cc8:	d8802215 	stw	r2,136(sp)
  809ccc:	88e2703a 	and	r17,r17,r3
  809cd0:	002b883a 	mov	r21,zero
  809cd4:	983e9b26 	beq	r19,zero,809744 <__alt_data_end+0xff809744>
  809cd8:	00800244 	movi	r2,9
  809cdc:	14fdc936 	bltu	r2,r19,809404 <__alt_data_end+0xff809404>
  809ce0:	003e9a06 	br	80974c <__alt_data_end+0xff80974c>
  809ce4:	00800c04 	movi	r2,48
  809ce8:	d8c01d45 	stb	r3,117(sp)
  809cec:	d8801d05 	stb	r2,116(sp)
  809cf0:	d8001d85 	stb	zero,118(sp)
  809cf4:	88c00094 	ori	r3,r17,2
  809cf8:	80009c16 	blt	r16,zero,809f6c <___vfiprintf_internal_r+0x1368>
  809cfc:	00bfdfc4 	movi	r2,-129
  809d00:	88a2703a 	and	r17,r17,r2
  809d04:	8c400094 	ori	r17,r17,2
  809d08:	002b883a 	mov	r21,zero
  809d0c:	003f8506 	br	809b24 <__alt_data_end+0xff809b24>
  809d10:	b029883a 	mov	r20,r22
  809d14:	003c0b06 	br	808d44 <__alt_data_end+0xff808d44>
  809d18:	04e7c83a 	sub	r19,zero,r19
  809d1c:	05400b44 	movi	r21,45
  809d20:	9804c03a 	cmpne	r2,r19,zero
  809d24:	0529c83a 	sub	r20,zero,r20
  809d28:	dd401d85 	stb	r21,118(sp)
  809d2c:	a0a9c83a 	sub	r20,r20,r2
  809d30:	80009716 	blt	r16,zero,809f90 <___vfiprintf_internal_r+0x138c>
  809d34:	00bfdfc4 	movi	r2,-129
  809d38:	88a2703a 	and	r17,r17,r2
  809d3c:	003db006 	br	809400 <__alt_data_end+0xff809400>
  809d40:	b0c00007 	ldb	r3,0(r22)
  809d44:	003c0c06 	br	808d78 <__alt_data_end+0xff808d78>
  809d48:	8880100c 	andi	r2,r17,64
  809d4c:	d8001d85 	stb	zero,118(sp)
  809d50:	1000461e 	bne	r2,zero,809e6c <___vfiprintf_internal_r+0x1268>
  809d54:	d9002217 	ldw	r4,136(sp)
  809d58:	0029883a 	mov	r20,zero
  809d5c:	20800104 	addi	r2,r4,4
  809d60:	24c00017 	ldw	r19,0(r4)
  809d64:	803df80e 	bge	r16,zero,809548 <__alt_data_end+0xff809548>
  809d68:	9d06b03a 	or	r3,r19,r20
  809d6c:	d8802215 	stw	r2,136(sp)
  809d70:	183d5e1e 	bne	r3,zero,8092ec <__alt_data_end+0xff8092ec>
  809d74:	002b883a 	mov	r21,zero
  809d78:	0005883a 	mov	r2,zero
  809d7c:	003e1006 	br	8095c0 <__alt_data_end+0xff8095c0>
  809d80:	8880040c 	andi	r2,r17,16
  809d84:	1000321e 	bne	r2,zero,809e50 <___vfiprintf_internal_r+0x124c>
  809d88:	8c40100c 	andi	r17,r17,64
  809d8c:	88008d26 	beq	r17,zero,809fc4 <___vfiprintf_internal_r+0x13c0>
  809d90:	d9402217 	ldw	r5,136(sp)
  809d94:	d8c02417 	ldw	r3,144(sp)
  809d98:	28800017 	ldw	r2,0(r5)
  809d9c:	29400104 	addi	r5,r5,4
  809da0:	d9402215 	stw	r5,136(sp)
  809da4:	10c0000d 	sth	r3,0(r2)
  809da8:	003bca06 	br	808cd4 <__alt_data_end+0xff808cd4>
  809dac:	8880100c 	andi	r2,r17,64
  809db0:	10003a26 	beq	r2,zero,809e9c <___vfiprintf_internal_r+0x1298>
  809db4:	d8802217 	ldw	r2,136(sp)
  809db8:	14c0000f 	ldh	r19,0(r2)
  809dbc:	10800104 	addi	r2,r2,4
  809dc0:	d8802215 	stw	r2,136(sp)
  809dc4:	9829d7fa 	srai	r20,r19,31
  809dc8:	a005883a 	mov	r2,r20
  809dcc:	003d8506 	br	8093e4 <__alt_data_end+0xff8093e4>
  809dd0:	8880100c 	andi	r2,r17,64
  809dd4:	10002b26 	beq	r2,zero,809e84 <___vfiprintf_internal_r+0x1280>
  809dd8:	d8802217 	ldw	r2,136(sp)
  809ddc:	0029883a 	mov	r20,zero
  809de0:	14c0000b 	ldhu	r19,0(r2)
  809de4:	10800104 	addi	r2,r2,4
  809de8:	d8802215 	stw	r2,136(sp)
  809dec:	003d5d06 	br	809364 <__alt_data_end+0xff809364>
  809df0:	d9402017 	ldw	r5,128(sp)
  809df4:	d9002117 	ldw	r4,132(sp)
  809df8:	d9801a04 	addi	r6,sp,104
  809dfc:	d8c02a15 	stw	r3,168(sp)
  809e00:	d9c02b15 	stw	r7,172(sp)
  809e04:	0808af00 	call	808af0 <__sprint_r.part.0>
  809e08:	d8c02a17 	ldw	r3,168(sp)
  809e0c:	d9c02b17 	ldw	r7,172(sp)
  809e10:	103eb41e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  809e14:	d9001b17 	ldw	r4,108(sp)
  809e18:	d8801c17 	ldw	r2,112(sp)
  809e1c:	d811883a 	mov	r8,sp
  809e20:	21400044 	addi	r5,r4,1
  809e24:	003e6706 	br	8097c4 <__alt_data_end+0xff8097c4>
  809e28:	00bfffc4 	movi	r2,-1
  809e2c:	003c4a06 	br	808f58 <__alt_data_end+0xff808f58>
  809e30:	9805883a 	mov	r2,r19
  809e34:	003ee806 	br	8099d8 <__alt_data_end+0xff8099d8>
  809e38:	d8c02217 	ldw	r3,136(sp)
  809e3c:	0029883a 	mov	r20,zero
  809e40:	18800104 	addi	r2,r3,4
  809e44:	1cc0000b 	ldhu	r19,0(r3)
  809e48:	803f9e0e 	bge	r16,zero,809cc4 <__alt_data_end+0xff809cc4>
  809e4c:	003dd706 	br	8095ac <__alt_data_end+0xff8095ac>
  809e50:	d8c02217 	ldw	r3,136(sp)
  809e54:	d9002417 	ldw	r4,144(sp)
  809e58:	18800017 	ldw	r2,0(r3)
  809e5c:	18c00104 	addi	r3,r3,4
  809e60:	d8c02215 	stw	r3,136(sp)
  809e64:	11000015 	stw	r4,0(r2)
  809e68:	003b9a06 	br	808cd4 <__alt_data_end+0xff808cd4>
  809e6c:	d8c02217 	ldw	r3,136(sp)
  809e70:	0029883a 	mov	r20,zero
  809e74:	18800104 	addi	r2,r3,4
  809e78:	1cc0000b 	ldhu	r19,0(r3)
  809e7c:	803db20e 	bge	r16,zero,809548 <__alt_data_end+0xff809548>
  809e80:	003fb906 	br	809d68 <__alt_data_end+0xff809d68>
  809e84:	d9002217 	ldw	r4,136(sp)
  809e88:	0029883a 	mov	r20,zero
  809e8c:	24c00017 	ldw	r19,0(r4)
  809e90:	21000104 	addi	r4,r4,4
  809e94:	d9002215 	stw	r4,136(sp)
  809e98:	003d3206 	br	809364 <__alt_data_end+0xff809364>
  809e9c:	d8c02217 	ldw	r3,136(sp)
  809ea0:	1cc00017 	ldw	r19,0(r3)
  809ea4:	18c00104 	addi	r3,r3,4
  809ea8:	d8c02215 	stw	r3,136(sp)
  809eac:	9829d7fa 	srai	r20,r19,31
  809eb0:	a005883a 	mov	r2,r20
  809eb4:	003d4b06 	br	8093e4 <__alt_data_end+0xff8093e4>
  809eb8:	0009883a 	mov	r4,zero
  809ebc:	01400044 	movi	r5,1
  809ec0:	d811883a 	mov	r8,sp
  809ec4:	003e4f06 	br	809804 <__alt_data_end+0xff809804>
  809ec8:	d8c02215 	stw	r3,136(sp)
  809ecc:	002b883a 	mov	r21,zero
  809ed0:	003db806 	br	8095b4 <__alt_data_end+0xff8095b4>
  809ed4:	d811883a 	mov	r8,sp
  809ed8:	003e9606 	br	809934 <__alt_data_end+0xff809934>
  809edc:	01002074 	movhi	r4,129
  809ee0:	21043604 	addi	r4,r4,4312
  809ee4:	d9002315 	stw	r4,140(sp)
  809ee8:	003e6306 	br	809878 <__alt_data_end+0xff809878>
  809eec:	b0c00043 	ldbu	r3,1(r22)
  809ef0:	8c400814 	ori	r17,r17,32
  809ef4:	b5800044 	addi	r22,r22,1
  809ef8:	18c03fcc 	andi	r3,r3,255
  809efc:	18c0201c 	xori	r3,r3,128
  809f00:	18ffe004 	addi	r3,r3,-128
  809f04:	003b9c06 	br	808d78 <__alt_data_end+0xff808d78>
  809f08:	b809883a 	mov	r4,r23
  809f0c:	da002a15 	stw	r8,168(sp)
  809f10:	0801bd40 	call	801bd4 <strlen>
  809f14:	1029883a 	mov	r20,r2
  809f18:	dd401d83 	ldbu	r21,118(sp)
  809f1c:	df002215 	stw	fp,136(sp)
  809f20:	0021883a 	mov	r16,zero
  809f24:	da002a17 	ldw	r8,168(sp)
  809f28:	003c3906 	br	809010 <__alt_data_end+0xff809010>
  809f2c:	d9402017 	ldw	r5,128(sp)
  809f30:	d9002117 	ldw	r4,132(sp)
  809f34:	d9801a04 	addi	r6,sp,104
  809f38:	0808af00 	call	808af0 <__sprint_r.part.0>
  809f3c:	103e691e 	bne	r2,zero,8098e4 <__alt_data_end+0xff8098e4>
  809f40:	d9001b17 	ldw	r4,108(sp)
  809f44:	d8801c17 	ldw	r2,112(sp)
  809f48:	d811883a 	mov	r8,sp
  809f4c:	21400044 	addi	r5,r4,1
  809f50:	003e2e06 	br	80980c <__alt_data_end+0xff80980c>
  809f54:	01002074 	movhi	r4,129
  809f58:	21043a04 	addi	r4,r4,4328
  809f5c:	d9002315 	stw	r4,140(sp)
  809f60:	d9001b17 	ldw	r4,108(sp)
  809f64:	21000044 	addi	r4,r4,1
  809f68:	003c5e06 	br	8090e4 <__alt_data_end+0xff8090e4>
  809f6c:	002b883a 	mov	r21,zero
  809f70:	00800084 	movi	r2,2
  809f74:	10803fcc 	andi	r2,r2,255
  809f78:	01000044 	movi	r4,1
  809f7c:	11002b26 	beq	r2,r4,80a02c <___vfiprintf_internal_r+0x1428>
  809f80:	01000084 	movi	r4,2
  809f84:	11002b1e 	bne	r2,r4,80a034 <___vfiprintf_internal_r+0x1430>
  809f88:	1823883a 	mov	r17,r3
  809f8c:	003ee506 	br	809b24 <__alt_data_end+0xff809b24>
  809f90:	8807883a 	mov	r3,r17
  809f94:	00800044 	movi	r2,1
  809f98:	003ff606 	br	809f74 <__alt_data_end+0xff809f74>
  809f9c:	00800184 	movi	r2,6
  809fa0:	1400012e 	bgeu	r2,r16,809fa8 <___vfiprintf_internal_r+0x13a4>
  809fa4:	1021883a 	mov	r16,r2
  809fa8:	8029883a 	mov	r20,r16
  809fac:	8027883a 	mov	r19,r16
  809fb0:	80002216 	blt	r16,zero,80a03c <___vfiprintf_internal_r+0x1438>
  809fb4:	05c02074 	movhi	r23,129
  809fb8:	df002215 	stw	fp,136(sp)
  809fbc:	bdc3da04 	addi	r23,r23,3944
  809fc0:	003cfb06 	br	8093b0 <__alt_data_end+0xff8093b0>
  809fc4:	d9002217 	ldw	r4,136(sp)
  809fc8:	d9402417 	ldw	r5,144(sp)
  809fcc:	20800017 	ldw	r2,0(r4)
  809fd0:	21000104 	addi	r4,r4,4
  809fd4:	d9002215 	stw	r4,136(sp)
  809fd8:	11400015 	stw	r5,0(r2)
  809fdc:	003b3d06 	br	808cd4 <__alt_data_end+0xff808cd4>
  809fe0:	01402074 	movhi	r5,129
  809fe4:	29443a04 	addi	r5,r5,4328
  809fe8:	d9402315 	stw	r5,140(sp)
  809fec:	d9401b17 	ldw	r5,108(sp)
  809ff0:	29400044 	addi	r5,r5,1
  809ff4:	003e6d06 	br	8099ac <__alt_data_end+0xff8099ac>
  809ff8:	8029883a 	mov	r20,r16
  809ffc:	dd401d83 	ldbu	r21,118(sp)
  80a000:	df002215 	stw	fp,136(sp)
  80a004:	0021883a 	mov	r16,zero
  80a008:	003c0106 	br	809010 <__alt_data_end+0xff809010>
  80a00c:	00c02074 	movhi	r3,129
  80a010:	18c43604 	addi	r3,r3,4312
  80a014:	d8c02315 	stw	r3,140(sp)
  80a018:	280d883a 	mov	r6,r5
  80a01c:	003c6906 	br	8091c4 <__alt_data_end+0xff8091c4>
  80a020:	802d883a 	mov	r22,r16
  80a024:	0021883a 	mov	r16,zero
  80a028:	003b5406 	br	808d7c <__alt_data_end+0xff808d7c>
  80a02c:	1823883a 	mov	r17,r3
  80a030:	003cf306 	br	809400 <__alt_data_end+0xff809400>
  80a034:	1823883a 	mov	r17,r3
  80a038:	003cad06 	br	8092f0 <__alt_data_end+0xff8092f0>
  80a03c:	0027883a 	mov	r19,zero
  80a040:	003fdc06 	br	809fb4 <__alt_data_end+0xff809fb4>
  80a044:	d9402217 	ldw	r5,136(sp)
  80a048:	8005883a 	mov	r2,r16
  80a04c:	b0c00043 	ldbu	r3,1(r22)
  80a050:	2c000017 	ldw	r16,0(r5)
  80a054:	29000104 	addi	r4,r5,4
  80a058:	d9002215 	stw	r4,136(sp)
  80a05c:	102d883a 	mov	r22,r2
  80a060:	803fa50e 	bge	r16,zero,809ef8 <__alt_data_end+0xff809ef8>
  80a064:	18c03fcc 	andi	r3,r3,255
  80a068:	18c0201c 	xori	r3,r3,128
  80a06c:	043fffc4 	movi	r16,-1
  80a070:	18ffe004 	addi	r3,r3,-128
  80a074:	003b4006 	br	808d78 <__alt_data_end+0xff808d78>
  80a078:	d9402303 	ldbu	r5,140(sp)
  80a07c:	d9401d85 	stb	r5,118(sp)
  80a080:	003cae06 	br	80933c <__alt_data_end+0xff80933c>
  80a084:	d8c02303 	ldbu	r3,140(sp)
  80a088:	d8c01d85 	stb	r3,118(sp)
  80a08c:	003d1406 	br	8094e0 <__alt_data_end+0xff8094e0>
  80a090:	d8c02303 	ldbu	r3,140(sp)
  80a094:	d8c01d85 	stb	r3,118(sp)
  80a098:	003cca06 	br	8093c4 <__alt_data_end+0xff8093c4>
  80a09c:	8880004c 	andi	r2,r17,1
  80a0a0:	002b883a 	mov	r21,zero
  80a0a4:	10000526 	beq	r2,zero,80a0bc <___vfiprintf_internal_r+0x14b8>
  80a0a8:	00800c04 	movi	r2,48
  80a0ac:	d88019c5 	stb	r2,103(sp)
  80a0b0:	dd002817 	ldw	r20,160(sp)
  80a0b4:	ddc019c4 	addi	r23,sp,103
  80a0b8:	003bd506 	br	809010 <__alt_data_end+0xff809010>
  80a0bc:	0029883a 	mov	r20,zero
  80a0c0:	ddc01a04 	addi	r23,sp,104
  80a0c4:	003bd206 	br	809010 <__alt_data_end+0xff809010>
  80a0c8:	d9002303 	ldbu	r4,140(sp)
  80a0cc:	d9001d85 	stb	r4,118(sp)
  80a0d0:	003da606 	br	80976c <__alt_data_end+0xff80976c>
  80a0d4:	d8c02303 	ldbu	r3,140(sp)
  80a0d8:	d8c01d85 	stb	r3,118(sp)
  80a0dc:	003c7606 	br	8092b8 <__alt_data_end+0xff8092b8>
  80a0e0:	d8c02303 	ldbu	r3,140(sp)
  80a0e4:	d8c01d85 	stb	r3,118(sp)
  80a0e8:	003c6506 	br	809280 <__alt_data_end+0xff809280>
  80a0ec:	d9002303 	ldbu	r4,140(sp)
  80a0f0:	d9001d85 	stb	r4,118(sp)
  80a0f4:	003d3d06 	br	8095ec <__alt_data_end+0xff8095ec>
  80a0f8:	d8c02303 	ldbu	r3,140(sp)
  80a0fc:	d8c01d85 	stb	r3,118(sp)
  80a100:	003d1d06 	br	809578 <__alt_data_end+0xff809578>
  80a104:	d8c02303 	ldbu	r3,140(sp)
  80a108:	d8c01d85 	stb	r3,118(sp)
  80a10c:	003d0306 	br	80951c <__alt_data_end+0xff80951c>

0080a110 <__vfiprintf_internal>:
  80a110:	00802074 	movhi	r2,129
  80a114:	108b3104 	addi	r2,r2,11460
  80a118:	300f883a 	mov	r7,r6
  80a11c:	280d883a 	mov	r6,r5
  80a120:	200b883a 	mov	r5,r4
  80a124:	11000017 	ldw	r4,0(r2)
  80a128:	0808c041 	jmpi	808c04 <___vfiprintf_internal_r>

0080a12c <__sbprintf>:
  80a12c:	2880030b 	ldhu	r2,12(r5)
  80a130:	2ac01917 	ldw	r11,100(r5)
  80a134:	2a80038b 	ldhu	r10,14(r5)
  80a138:	2a400717 	ldw	r9,28(r5)
  80a13c:	2a000917 	ldw	r8,36(r5)
  80a140:	defee204 	addi	sp,sp,-1144
  80a144:	00c10004 	movi	r3,1024
  80a148:	dc011a15 	stw	r16,1128(sp)
  80a14c:	10bfff4c 	andi	r2,r2,65533
  80a150:	2821883a 	mov	r16,r5
  80a154:	d8cb883a 	add	r5,sp,r3
  80a158:	dc811c15 	stw	r18,1136(sp)
  80a15c:	dc411b15 	stw	r17,1132(sp)
  80a160:	dfc11d15 	stw	ra,1140(sp)
  80a164:	2025883a 	mov	r18,r4
  80a168:	d881030d 	sth	r2,1036(sp)
  80a16c:	dac11915 	stw	r11,1124(sp)
  80a170:	da81038d 	sth	r10,1038(sp)
  80a174:	da410715 	stw	r9,1052(sp)
  80a178:	da010915 	stw	r8,1060(sp)
  80a17c:	dec10015 	stw	sp,1024(sp)
  80a180:	dec10415 	stw	sp,1040(sp)
  80a184:	d8c10215 	stw	r3,1032(sp)
  80a188:	d8c10515 	stw	r3,1044(sp)
  80a18c:	d8010615 	stw	zero,1048(sp)
  80a190:	0808c040 	call	808c04 <___vfiprintf_internal_r>
  80a194:	1023883a 	mov	r17,r2
  80a198:	10000416 	blt	r2,zero,80a1ac <__sbprintf+0x80>
  80a19c:	d9410004 	addi	r5,sp,1024
  80a1a0:	9009883a 	mov	r4,r18
  80a1a4:	0805c400 	call	805c40 <_fflush_r>
  80a1a8:	10000d1e 	bne	r2,zero,80a1e0 <__sbprintf+0xb4>
  80a1ac:	d881030b 	ldhu	r2,1036(sp)
  80a1b0:	1080100c 	andi	r2,r2,64
  80a1b4:	10000326 	beq	r2,zero,80a1c4 <__sbprintf+0x98>
  80a1b8:	8080030b 	ldhu	r2,12(r16)
  80a1bc:	10801014 	ori	r2,r2,64
  80a1c0:	8080030d 	sth	r2,12(r16)
  80a1c4:	8805883a 	mov	r2,r17
  80a1c8:	dfc11d17 	ldw	ra,1140(sp)
  80a1cc:	dc811c17 	ldw	r18,1136(sp)
  80a1d0:	dc411b17 	ldw	r17,1132(sp)
  80a1d4:	dc011a17 	ldw	r16,1128(sp)
  80a1d8:	dec11e04 	addi	sp,sp,1144
  80a1dc:	f800283a 	ret
  80a1e0:	047fffc4 	movi	r17,-1
  80a1e4:	003ff106 	br	80a1ac <__alt_data_end+0xff80a1ac>

0080a1e8 <_write_r>:
  80a1e8:	defffd04 	addi	sp,sp,-12
  80a1ec:	2805883a 	mov	r2,r5
  80a1f0:	dc000015 	stw	r16,0(sp)
  80a1f4:	04002074 	movhi	r16,129
  80a1f8:	dc400115 	stw	r17,4(sp)
  80a1fc:	300b883a 	mov	r5,r6
  80a200:	84123b04 	addi	r16,r16,18668
  80a204:	2023883a 	mov	r17,r4
  80a208:	380d883a 	mov	r6,r7
  80a20c:	1009883a 	mov	r4,r2
  80a210:	dfc00215 	stw	ra,8(sp)
  80a214:	80000015 	stw	zero,0(r16)
  80a218:	080e13c0 	call	80e13c <write>
  80a21c:	00ffffc4 	movi	r3,-1
  80a220:	10c00526 	beq	r2,r3,80a238 <_write_r+0x50>
  80a224:	dfc00217 	ldw	ra,8(sp)
  80a228:	dc400117 	ldw	r17,4(sp)
  80a22c:	dc000017 	ldw	r16,0(sp)
  80a230:	dec00304 	addi	sp,sp,12
  80a234:	f800283a 	ret
  80a238:	80c00017 	ldw	r3,0(r16)
  80a23c:	183ff926 	beq	r3,zero,80a224 <__alt_data_end+0xff80a224>
  80a240:	88c00015 	stw	r3,0(r17)
  80a244:	003ff706 	br	80a224 <__alt_data_end+0xff80a224>

0080a248 <_close_r>:
  80a248:	defffd04 	addi	sp,sp,-12
  80a24c:	dc000015 	stw	r16,0(sp)
  80a250:	04002074 	movhi	r16,129
  80a254:	dc400115 	stw	r17,4(sp)
  80a258:	84123b04 	addi	r16,r16,18668
  80a25c:	2023883a 	mov	r17,r4
  80a260:	2809883a 	mov	r4,r5
  80a264:	dfc00215 	stw	ra,8(sp)
  80a268:	80000015 	stw	zero,0(r16)
  80a26c:	080d7c40 	call	80d7c4 <close>
  80a270:	00ffffc4 	movi	r3,-1
  80a274:	10c00526 	beq	r2,r3,80a28c <_close_r+0x44>
  80a278:	dfc00217 	ldw	ra,8(sp)
  80a27c:	dc400117 	ldw	r17,4(sp)
  80a280:	dc000017 	ldw	r16,0(sp)
  80a284:	dec00304 	addi	sp,sp,12
  80a288:	f800283a 	ret
  80a28c:	80c00017 	ldw	r3,0(r16)
  80a290:	183ff926 	beq	r3,zero,80a278 <__alt_data_end+0xff80a278>
  80a294:	88c00015 	stw	r3,0(r17)
  80a298:	003ff706 	br	80a278 <__alt_data_end+0xff80a278>

0080a29c <_calloc_r>:
  80a29c:	defffe04 	addi	sp,sp,-8
  80a2a0:	2805883a 	mov	r2,r5
  80a2a4:	dc000015 	stw	r16,0(sp)
  80a2a8:	300b883a 	mov	r5,r6
  80a2ac:	2021883a 	mov	r16,r4
  80a2b0:	1009883a 	mov	r4,r2
  80a2b4:	dfc00115 	stw	ra,4(sp)
  80a2b8:	080b8a80 	call	80b8a8 <__mulsi3>
  80a2bc:	100b883a 	mov	r5,r2
  80a2c0:	8009883a 	mov	r4,r16
  80a2c4:	08012340 	call	801234 <_malloc_r>
  80a2c8:	10002926 	beq	r2,zero,80a370 <_calloc_r+0xd4>
  80a2cc:	11bfff17 	ldw	r6,-4(r2)
  80a2d0:	1021883a 	mov	r16,r2
  80a2d4:	00bfff04 	movi	r2,-4
  80a2d8:	308c703a 	and	r6,r6,r2
  80a2dc:	00c00904 	movi	r3,36
  80a2e0:	308d883a 	add	r6,r6,r2
  80a2e4:	19801636 	bltu	r3,r6,80a340 <_calloc_r+0xa4>
  80a2e8:	008004c4 	movi	r2,19
  80a2ec:	11800b2e 	bgeu	r2,r6,80a31c <_calloc_r+0x80>
  80a2f0:	80000015 	stw	zero,0(r16)
  80a2f4:	80000115 	stw	zero,4(r16)
  80a2f8:	008006c4 	movi	r2,27
  80a2fc:	11801a2e 	bgeu	r2,r6,80a368 <_calloc_r+0xcc>
  80a300:	80000215 	stw	zero,8(r16)
  80a304:	80000315 	stw	zero,12(r16)
  80a308:	30c0151e 	bne	r6,r3,80a360 <_calloc_r+0xc4>
  80a30c:	80000415 	stw	zero,16(r16)
  80a310:	80800604 	addi	r2,r16,24
  80a314:	80000515 	stw	zero,20(r16)
  80a318:	00000106 	br	80a320 <_calloc_r+0x84>
  80a31c:	8005883a 	mov	r2,r16
  80a320:	10000015 	stw	zero,0(r2)
  80a324:	10000115 	stw	zero,4(r2)
  80a328:	10000215 	stw	zero,8(r2)
  80a32c:	8005883a 	mov	r2,r16
  80a330:	dfc00117 	ldw	ra,4(sp)
  80a334:	dc000017 	ldw	r16,0(sp)
  80a338:	dec00204 	addi	sp,sp,8
  80a33c:	f800283a 	ret
  80a340:	000b883a 	mov	r5,zero
  80a344:	8009883a 	mov	r4,r16
  80a348:	08071200 	call	807120 <memset>
  80a34c:	8005883a 	mov	r2,r16
  80a350:	dfc00117 	ldw	ra,4(sp)
  80a354:	dc000017 	ldw	r16,0(sp)
  80a358:	dec00204 	addi	sp,sp,8
  80a35c:	f800283a 	ret
  80a360:	80800404 	addi	r2,r16,16
  80a364:	003fee06 	br	80a320 <__alt_data_end+0xff80a320>
  80a368:	80800204 	addi	r2,r16,8
  80a36c:	003fec06 	br	80a320 <__alt_data_end+0xff80a320>
  80a370:	0005883a 	mov	r2,zero
  80a374:	003fee06 	br	80a330 <__alt_data_end+0xff80a330>

0080a378 <_fclose_r>:
  80a378:	28003926 	beq	r5,zero,80a460 <_fclose_r+0xe8>
  80a37c:	defffc04 	addi	sp,sp,-16
  80a380:	dc400115 	stw	r17,4(sp)
  80a384:	dc000015 	stw	r16,0(sp)
  80a388:	dfc00315 	stw	ra,12(sp)
  80a38c:	dc800215 	stw	r18,8(sp)
  80a390:	2023883a 	mov	r17,r4
  80a394:	2821883a 	mov	r16,r5
  80a398:	20000226 	beq	r4,zero,80a3a4 <_fclose_r+0x2c>
  80a39c:	20800e17 	ldw	r2,56(r4)
  80a3a0:	10002726 	beq	r2,zero,80a440 <_fclose_r+0xc8>
  80a3a4:	8080030f 	ldh	r2,12(r16)
  80a3a8:	1000071e 	bne	r2,zero,80a3c8 <_fclose_r+0x50>
  80a3ac:	0005883a 	mov	r2,zero
  80a3b0:	dfc00317 	ldw	ra,12(sp)
  80a3b4:	dc800217 	ldw	r18,8(sp)
  80a3b8:	dc400117 	ldw	r17,4(sp)
  80a3bc:	dc000017 	ldw	r16,0(sp)
  80a3c0:	dec00404 	addi	sp,sp,16
  80a3c4:	f800283a 	ret
  80a3c8:	800b883a 	mov	r5,r16
  80a3cc:	8809883a 	mov	r4,r17
  80a3d0:	0805a240 	call	805a24 <__sflush_r>
  80a3d4:	1025883a 	mov	r18,r2
  80a3d8:	80800b17 	ldw	r2,44(r16)
  80a3dc:	10000426 	beq	r2,zero,80a3f0 <_fclose_r+0x78>
  80a3e0:	81400717 	ldw	r5,28(r16)
  80a3e4:	8809883a 	mov	r4,r17
  80a3e8:	103ee83a 	callr	r2
  80a3ec:	10001616 	blt	r2,zero,80a448 <_fclose_r+0xd0>
  80a3f0:	8080030b 	ldhu	r2,12(r16)
  80a3f4:	1080200c 	andi	r2,r2,128
  80a3f8:	1000151e 	bne	r2,zero,80a450 <_fclose_r+0xd8>
  80a3fc:	81400c17 	ldw	r5,48(r16)
  80a400:	28000526 	beq	r5,zero,80a418 <_fclose_r+0xa0>
  80a404:	80801004 	addi	r2,r16,64
  80a408:	28800226 	beq	r5,r2,80a414 <_fclose_r+0x9c>
  80a40c:	8809883a 	mov	r4,r17
  80a410:	08061a00 	call	8061a0 <_free_r>
  80a414:	80000c15 	stw	zero,48(r16)
  80a418:	81401117 	ldw	r5,68(r16)
  80a41c:	28000326 	beq	r5,zero,80a42c <_fclose_r+0xb4>
  80a420:	8809883a 	mov	r4,r17
  80a424:	08061a00 	call	8061a0 <_free_r>
  80a428:	80001115 	stw	zero,68(r16)
  80a42c:	080603c0 	call	80603c <__sfp_lock_acquire>
  80a430:	8000030d 	sth	zero,12(r16)
  80a434:	08060400 	call	806040 <__sfp_lock_release>
  80a438:	9005883a 	mov	r2,r18
  80a43c:	003fdc06 	br	80a3b0 <__alt_data_end+0xff80a3b0>
  80a440:	080602c0 	call	80602c <__sinit>
  80a444:	003fd706 	br	80a3a4 <__alt_data_end+0xff80a3a4>
  80a448:	04bfffc4 	movi	r18,-1
  80a44c:	003fe806 	br	80a3f0 <__alt_data_end+0xff80a3f0>
  80a450:	81400417 	ldw	r5,16(r16)
  80a454:	8809883a 	mov	r4,r17
  80a458:	08061a00 	call	8061a0 <_free_r>
  80a45c:	003fe706 	br	80a3fc <__alt_data_end+0xff80a3fc>
  80a460:	0005883a 	mov	r2,zero
  80a464:	f800283a 	ret

0080a468 <fclose>:
  80a468:	00802074 	movhi	r2,129
  80a46c:	108b3104 	addi	r2,r2,11460
  80a470:	200b883a 	mov	r5,r4
  80a474:	11000017 	ldw	r4,0(r2)
  80a478:	080a3781 	jmpi	80a378 <_fclose_r>

0080a47c <__fputwc>:
  80a47c:	defff804 	addi	sp,sp,-32
  80a480:	dcc00415 	stw	r19,16(sp)
  80a484:	dc800315 	stw	r18,12(sp)
  80a488:	dc000115 	stw	r16,4(sp)
  80a48c:	dfc00715 	stw	ra,28(sp)
  80a490:	dd400615 	stw	r21,24(sp)
  80a494:	dd000515 	stw	r20,20(sp)
  80a498:	dc400215 	stw	r17,8(sp)
  80a49c:	2027883a 	mov	r19,r4
  80a4a0:	2825883a 	mov	r18,r5
  80a4a4:	3021883a 	mov	r16,r6
  80a4a8:	0806b880 	call	806b88 <__locale_mb_cur_max>
  80a4ac:	00c00044 	movi	r3,1
  80a4b0:	10c03e26 	beq	r2,r3,80a5ac <__fputwc+0x130>
  80a4b4:	81c01704 	addi	r7,r16,92
  80a4b8:	900d883a 	mov	r6,r18
  80a4bc:	d80b883a 	mov	r5,sp
  80a4c0:	9809883a 	mov	r4,r19
  80a4c4:	080a94c0 	call	80a94c <_wcrtomb_r>
  80a4c8:	1029883a 	mov	r20,r2
  80a4cc:	00bfffc4 	movi	r2,-1
  80a4d0:	a0802026 	beq	r20,r2,80a554 <__fputwc+0xd8>
  80a4d4:	d9400003 	ldbu	r5,0(sp)
  80a4d8:	a0001c26 	beq	r20,zero,80a54c <__fputwc+0xd0>
  80a4dc:	0023883a 	mov	r17,zero
  80a4e0:	05400284 	movi	r21,10
  80a4e4:	00000906 	br	80a50c <__fputwc+0x90>
  80a4e8:	80800017 	ldw	r2,0(r16)
  80a4ec:	11400005 	stb	r5,0(r2)
  80a4f0:	80c00017 	ldw	r3,0(r16)
  80a4f4:	18c00044 	addi	r3,r3,1
  80a4f8:	80c00015 	stw	r3,0(r16)
  80a4fc:	8c400044 	addi	r17,r17,1
  80a500:	dc45883a 	add	r2,sp,r17
  80a504:	8d00112e 	bgeu	r17,r20,80a54c <__fputwc+0xd0>
  80a508:	11400003 	ldbu	r5,0(r2)
  80a50c:	80c00217 	ldw	r3,8(r16)
  80a510:	18ffffc4 	addi	r3,r3,-1
  80a514:	80c00215 	stw	r3,8(r16)
  80a518:	183ff30e 	bge	r3,zero,80a4e8 <__alt_data_end+0xff80a4e8>
  80a51c:	80800617 	ldw	r2,24(r16)
  80a520:	18801916 	blt	r3,r2,80a588 <__fputwc+0x10c>
  80a524:	80800017 	ldw	r2,0(r16)
  80a528:	11400005 	stb	r5,0(r2)
  80a52c:	80800017 	ldw	r2,0(r16)
  80a530:	10c00003 	ldbu	r3,0(r2)
  80a534:	10800044 	addi	r2,r2,1
  80a538:	1d402326 	beq	r3,r21,80a5c8 <__fputwc+0x14c>
  80a53c:	80800015 	stw	r2,0(r16)
  80a540:	8c400044 	addi	r17,r17,1
  80a544:	dc45883a 	add	r2,sp,r17
  80a548:	8d3fef36 	bltu	r17,r20,80a508 <__alt_data_end+0xff80a508>
  80a54c:	9005883a 	mov	r2,r18
  80a550:	00000406 	br	80a564 <__fputwc+0xe8>
  80a554:	80c0030b 	ldhu	r3,12(r16)
  80a558:	a005883a 	mov	r2,r20
  80a55c:	18c01014 	ori	r3,r3,64
  80a560:	80c0030d 	sth	r3,12(r16)
  80a564:	dfc00717 	ldw	ra,28(sp)
  80a568:	dd400617 	ldw	r21,24(sp)
  80a56c:	dd000517 	ldw	r20,20(sp)
  80a570:	dcc00417 	ldw	r19,16(sp)
  80a574:	dc800317 	ldw	r18,12(sp)
  80a578:	dc400217 	ldw	r17,8(sp)
  80a57c:	dc000117 	ldw	r16,4(sp)
  80a580:	dec00804 	addi	sp,sp,32
  80a584:	f800283a 	ret
  80a588:	800d883a 	mov	r6,r16
  80a58c:	29403fcc 	andi	r5,r5,255
  80a590:	9809883a 	mov	r4,r19
  80a594:	080a7f40 	call	80a7f4 <__swbuf_r>
  80a598:	10bfffe0 	cmpeqi	r2,r2,-1
  80a59c:	10803fcc 	andi	r2,r2,255
  80a5a0:	103fd626 	beq	r2,zero,80a4fc <__alt_data_end+0xff80a4fc>
  80a5a4:	00bfffc4 	movi	r2,-1
  80a5a8:	003fee06 	br	80a564 <__alt_data_end+0xff80a564>
  80a5ac:	90ffffc4 	addi	r3,r18,-1
  80a5b0:	01003f84 	movi	r4,254
  80a5b4:	20ffbf36 	bltu	r4,r3,80a4b4 <__alt_data_end+0xff80a4b4>
  80a5b8:	900b883a 	mov	r5,r18
  80a5bc:	dc800005 	stb	r18,0(sp)
  80a5c0:	1029883a 	mov	r20,r2
  80a5c4:	003fc506 	br	80a4dc <__alt_data_end+0xff80a4dc>
  80a5c8:	800d883a 	mov	r6,r16
  80a5cc:	a80b883a 	mov	r5,r21
  80a5d0:	9809883a 	mov	r4,r19
  80a5d4:	080a7f40 	call	80a7f4 <__swbuf_r>
  80a5d8:	10bfffe0 	cmpeqi	r2,r2,-1
  80a5dc:	003fef06 	br	80a59c <__alt_data_end+0xff80a59c>

0080a5e0 <_fputwc_r>:
  80a5e0:	3080030b 	ldhu	r2,12(r6)
  80a5e4:	10c8000c 	andi	r3,r2,8192
  80a5e8:	1800051e 	bne	r3,zero,80a600 <_fputwc_r+0x20>
  80a5ec:	30c01917 	ldw	r3,100(r6)
  80a5f0:	10880014 	ori	r2,r2,8192
  80a5f4:	3080030d 	sth	r2,12(r6)
  80a5f8:	18880014 	ori	r2,r3,8192
  80a5fc:	30801915 	stw	r2,100(r6)
  80a600:	080a47c1 	jmpi	80a47c <__fputwc>

0080a604 <fputwc>:
  80a604:	00802074 	movhi	r2,129
  80a608:	defffc04 	addi	sp,sp,-16
  80a60c:	108b3104 	addi	r2,r2,11460
  80a610:	dc000115 	stw	r16,4(sp)
  80a614:	14000017 	ldw	r16,0(r2)
  80a618:	dc400215 	stw	r17,8(sp)
  80a61c:	dfc00315 	stw	ra,12(sp)
  80a620:	2023883a 	mov	r17,r4
  80a624:	80000226 	beq	r16,zero,80a630 <fputwc+0x2c>
  80a628:	80800e17 	ldw	r2,56(r16)
  80a62c:	10001026 	beq	r2,zero,80a670 <fputwc+0x6c>
  80a630:	2880030b 	ldhu	r2,12(r5)
  80a634:	10c8000c 	andi	r3,r2,8192
  80a638:	1800051e 	bne	r3,zero,80a650 <fputwc+0x4c>
  80a63c:	28c01917 	ldw	r3,100(r5)
  80a640:	10880014 	ori	r2,r2,8192
  80a644:	2880030d 	sth	r2,12(r5)
  80a648:	18880014 	ori	r2,r3,8192
  80a64c:	28801915 	stw	r2,100(r5)
  80a650:	280d883a 	mov	r6,r5
  80a654:	8009883a 	mov	r4,r16
  80a658:	880b883a 	mov	r5,r17
  80a65c:	dfc00317 	ldw	ra,12(sp)
  80a660:	dc400217 	ldw	r17,8(sp)
  80a664:	dc000117 	ldw	r16,4(sp)
  80a668:	dec00404 	addi	sp,sp,16
  80a66c:	080a47c1 	jmpi	80a47c <__fputwc>
  80a670:	8009883a 	mov	r4,r16
  80a674:	d9400015 	stw	r5,0(sp)
  80a678:	080602c0 	call	80602c <__sinit>
  80a67c:	d9400017 	ldw	r5,0(sp)
  80a680:	003feb06 	br	80a630 <__alt_data_end+0xff80a630>

0080a684 <_fstat_r>:
  80a684:	defffd04 	addi	sp,sp,-12
  80a688:	2805883a 	mov	r2,r5
  80a68c:	dc000015 	stw	r16,0(sp)
  80a690:	04002074 	movhi	r16,129
  80a694:	dc400115 	stw	r17,4(sp)
  80a698:	84123b04 	addi	r16,r16,18668
  80a69c:	2023883a 	mov	r17,r4
  80a6a0:	300b883a 	mov	r5,r6
  80a6a4:	1009883a 	mov	r4,r2
  80a6a8:	dfc00215 	stw	ra,8(sp)
  80a6ac:	80000015 	stw	zero,0(r16)
  80a6b0:	080da240 	call	80da24 <fstat>
  80a6b4:	00ffffc4 	movi	r3,-1
  80a6b8:	10c00526 	beq	r2,r3,80a6d0 <_fstat_r+0x4c>
  80a6bc:	dfc00217 	ldw	ra,8(sp)
  80a6c0:	dc400117 	ldw	r17,4(sp)
  80a6c4:	dc000017 	ldw	r16,0(sp)
  80a6c8:	dec00304 	addi	sp,sp,12
  80a6cc:	f800283a 	ret
  80a6d0:	80c00017 	ldw	r3,0(r16)
  80a6d4:	183ff926 	beq	r3,zero,80a6bc <__alt_data_end+0xff80a6bc>
  80a6d8:	88c00015 	stw	r3,0(r17)
  80a6dc:	003ff706 	br	80a6bc <__alt_data_end+0xff80a6bc>

0080a6e0 <_isatty_r>:
  80a6e0:	defffd04 	addi	sp,sp,-12
  80a6e4:	dc000015 	stw	r16,0(sp)
  80a6e8:	04002074 	movhi	r16,129
  80a6ec:	dc400115 	stw	r17,4(sp)
  80a6f0:	84123b04 	addi	r16,r16,18668
  80a6f4:	2023883a 	mov	r17,r4
  80a6f8:	2809883a 	mov	r4,r5
  80a6fc:	dfc00215 	stw	ra,8(sp)
  80a700:	80000015 	stw	zero,0(r16)
  80a704:	080db180 	call	80db18 <isatty>
  80a708:	00ffffc4 	movi	r3,-1
  80a70c:	10c00526 	beq	r2,r3,80a724 <_isatty_r+0x44>
  80a710:	dfc00217 	ldw	ra,8(sp)
  80a714:	dc400117 	ldw	r17,4(sp)
  80a718:	dc000017 	ldw	r16,0(sp)
  80a71c:	dec00304 	addi	sp,sp,12
  80a720:	f800283a 	ret
  80a724:	80c00017 	ldw	r3,0(r16)
  80a728:	183ff926 	beq	r3,zero,80a710 <__alt_data_end+0xff80a710>
  80a72c:	88c00015 	stw	r3,0(r17)
  80a730:	003ff706 	br	80a710 <__alt_data_end+0xff80a710>

0080a734 <_lseek_r>:
  80a734:	defffd04 	addi	sp,sp,-12
  80a738:	2805883a 	mov	r2,r5
  80a73c:	dc000015 	stw	r16,0(sp)
  80a740:	04002074 	movhi	r16,129
  80a744:	dc400115 	stw	r17,4(sp)
  80a748:	300b883a 	mov	r5,r6
  80a74c:	84123b04 	addi	r16,r16,18668
  80a750:	2023883a 	mov	r17,r4
  80a754:	380d883a 	mov	r6,r7
  80a758:	1009883a 	mov	r4,r2
  80a75c:	dfc00215 	stw	ra,8(sp)
  80a760:	80000015 	stw	zero,0(r16)
  80a764:	080dcec0 	call	80dcec <lseek>
  80a768:	00ffffc4 	movi	r3,-1
  80a76c:	10c00526 	beq	r2,r3,80a784 <_lseek_r+0x50>
  80a770:	dfc00217 	ldw	ra,8(sp)
  80a774:	dc400117 	ldw	r17,4(sp)
  80a778:	dc000017 	ldw	r16,0(sp)
  80a77c:	dec00304 	addi	sp,sp,12
  80a780:	f800283a 	ret
  80a784:	80c00017 	ldw	r3,0(r16)
  80a788:	183ff926 	beq	r3,zero,80a770 <__alt_data_end+0xff80a770>
  80a78c:	88c00015 	stw	r3,0(r17)
  80a790:	003ff706 	br	80a770 <__alt_data_end+0xff80a770>

0080a794 <_read_r>:
  80a794:	defffd04 	addi	sp,sp,-12
  80a798:	2805883a 	mov	r2,r5
  80a79c:	dc000015 	stw	r16,0(sp)
  80a7a0:	04002074 	movhi	r16,129
  80a7a4:	dc400115 	stw	r17,4(sp)
  80a7a8:	300b883a 	mov	r5,r6
  80a7ac:	84123b04 	addi	r16,r16,18668
  80a7b0:	2023883a 	mov	r17,r4
  80a7b4:	380d883a 	mov	r6,r7
  80a7b8:	1009883a 	mov	r4,r2
  80a7bc:	dfc00215 	stw	ra,8(sp)
  80a7c0:	80000015 	stw	zero,0(r16)
  80a7c4:	080dec80 	call	80dec8 <read>
  80a7c8:	00ffffc4 	movi	r3,-1
  80a7cc:	10c00526 	beq	r2,r3,80a7e4 <_read_r+0x50>
  80a7d0:	dfc00217 	ldw	ra,8(sp)
  80a7d4:	dc400117 	ldw	r17,4(sp)
  80a7d8:	dc000017 	ldw	r16,0(sp)
  80a7dc:	dec00304 	addi	sp,sp,12
  80a7e0:	f800283a 	ret
  80a7e4:	80c00017 	ldw	r3,0(r16)
  80a7e8:	183ff926 	beq	r3,zero,80a7d0 <__alt_data_end+0xff80a7d0>
  80a7ec:	88c00015 	stw	r3,0(r17)
  80a7f0:	003ff706 	br	80a7d0 <__alt_data_end+0xff80a7d0>

0080a7f4 <__swbuf_r>:
  80a7f4:	defffb04 	addi	sp,sp,-20
  80a7f8:	dcc00315 	stw	r19,12(sp)
  80a7fc:	dc800215 	stw	r18,8(sp)
  80a800:	dc000015 	stw	r16,0(sp)
  80a804:	dfc00415 	stw	ra,16(sp)
  80a808:	dc400115 	stw	r17,4(sp)
  80a80c:	2025883a 	mov	r18,r4
  80a810:	2827883a 	mov	r19,r5
  80a814:	3021883a 	mov	r16,r6
  80a818:	20000226 	beq	r4,zero,80a824 <__swbuf_r+0x30>
  80a81c:	20800e17 	ldw	r2,56(r4)
  80a820:	10004226 	beq	r2,zero,80a92c <__swbuf_r+0x138>
  80a824:	80800617 	ldw	r2,24(r16)
  80a828:	8100030b 	ldhu	r4,12(r16)
  80a82c:	80800215 	stw	r2,8(r16)
  80a830:	2080020c 	andi	r2,r4,8
  80a834:	10003626 	beq	r2,zero,80a910 <__swbuf_r+0x11c>
  80a838:	80c00417 	ldw	r3,16(r16)
  80a83c:	18003426 	beq	r3,zero,80a910 <__swbuf_r+0x11c>
  80a840:	2088000c 	andi	r2,r4,8192
  80a844:	9c403fcc 	andi	r17,r19,255
  80a848:	10001a26 	beq	r2,zero,80a8b4 <__swbuf_r+0xc0>
  80a84c:	80800017 	ldw	r2,0(r16)
  80a850:	81000517 	ldw	r4,20(r16)
  80a854:	10c7c83a 	sub	r3,r2,r3
  80a858:	1900200e 	bge	r3,r4,80a8dc <__swbuf_r+0xe8>
  80a85c:	18c00044 	addi	r3,r3,1
  80a860:	81000217 	ldw	r4,8(r16)
  80a864:	11400044 	addi	r5,r2,1
  80a868:	81400015 	stw	r5,0(r16)
  80a86c:	213fffc4 	addi	r4,r4,-1
  80a870:	81000215 	stw	r4,8(r16)
  80a874:	14c00005 	stb	r19,0(r2)
  80a878:	80800517 	ldw	r2,20(r16)
  80a87c:	10c01e26 	beq	r2,r3,80a8f8 <__swbuf_r+0x104>
  80a880:	8080030b 	ldhu	r2,12(r16)
  80a884:	1080004c 	andi	r2,r2,1
  80a888:	10000226 	beq	r2,zero,80a894 <__swbuf_r+0xa0>
  80a88c:	00800284 	movi	r2,10
  80a890:	88801926 	beq	r17,r2,80a8f8 <__swbuf_r+0x104>
  80a894:	8805883a 	mov	r2,r17
  80a898:	dfc00417 	ldw	ra,16(sp)
  80a89c:	dcc00317 	ldw	r19,12(sp)
  80a8a0:	dc800217 	ldw	r18,8(sp)
  80a8a4:	dc400117 	ldw	r17,4(sp)
  80a8a8:	dc000017 	ldw	r16,0(sp)
  80a8ac:	dec00504 	addi	sp,sp,20
  80a8b0:	f800283a 	ret
  80a8b4:	81401917 	ldw	r5,100(r16)
  80a8b8:	00b7ffc4 	movi	r2,-8193
  80a8bc:	21080014 	ori	r4,r4,8192
  80a8c0:	2884703a 	and	r2,r5,r2
  80a8c4:	80801915 	stw	r2,100(r16)
  80a8c8:	80800017 	ldw	r2,0(r16)
  80a8cc:	8100030d 	sth	r4,12(r16)
  80a8d0:	81000517 	ldw	r4,20(r16)
  80a8d4:	10c7c83a 	sub	r3,r2,r3
  80a8d8:	193fe016 	blt	r3,r4,80a85c <__alt_data_end+0xff80a85c>
  80a8dc:	800b883a 	mov	r5,r16
  80a8e0:	9009883a 	mov	r4,r18
  80a8e4:	0805c400 	call	805c40 <_fflush_r>
  80a8e8:	1000071e 	bne	r2,zero,80a908 <__swbuf_r+0x114>
  80a8ec:	80800017 	ldw	r2,0(r16)
  80a8f0:	00c00044 	movi	r3,1
  80a8f4:	003fda06 	br	80a860 <__alt_data_end+0xff80a860>
  80a8f8:	800b883a 	mov	r5,r16
  80a8fc:	9009883a 	mov	r4,r18
  80a900:	0805c400 	call	805c40 <_fflush_r>
  80a904:	103fe326 	beq	r2,zero,80a894 <__alt_data_end+0xff80a894>
  80a908:	00bfffc4 	movi	r2,-1
  80a90c:	003fe206 	br	80a898 <__alt_data_end+0xff80a898>
  80a910:	800b883a 	mov	r5,r16
  80a914:	9009883a 	mov	r4,r18
  80a918:	08040200 	call	804020 <__swsetup_r>
  80a91c:	103ffa1e 	bne	r2,zero,80a908 <__alt_data_end+0xff80a908>
  80a920:	8100030b 	ldhu	r4,12(r16)
  80a924:	80c00417 	ldw	r3,16(r16)
  80a928:	003fc506 	br	80a840 <__alt_data_end+0xff80a840>
  80a92c:	080602c0 	call	80602c <__sinit>
  80a930:	003fbc06 	br	80a824 <__alt_data_end+0xff80a824>

0080a934 <__swbuf>:
  80a934:	00802074 	movhi	r2,129
  80a938:	108b3104 	addi	r2,r2,11460
  80a93c:	280d883a 	mov	r6,r5
  80a940:	200b883a 	mov	r5,r4
  80a944:	11000017 	ldw	r4,0(r2)
  80a948:	080a7f41 	jmpi	80a7f4 <__swbuf_r>

0080a94c <_wcrtomb_r>:
  80a94c:	defff604 	addi	sp,sp,-40
  80a950:	00802074 	movhi	r2,129
  80a954:	dc800815 	stw	r18,32(sp)
  80a958:	dc400715 	stw	r17,28(sp)
  80a95c:	dc000615 	stw	r16,24(sp)
  80a960:	108b3304 	addi	r2,r2,11468
  80a964:	dfc00915 	stw	ra,36(sp)
  80a968:	2021883a 	mov	r16,r4
  80a96c:	3823883a 	mov	r17,r7
  80a970:	14800017 	ldw	r18,0(r2)
  80a974:	28001426 	beq	r5,zero,80a9c8 <_wcrtomb_r+0x7c>
  80a978:	d9400415 	stw	r5,16(sp)
  80a97c:	d9800515 	stw	r6,20(sp)
  80a980:	0806b7c0 	call	806b7c <__locale_charset>
  80a984:	d9800517 	ldw	r6,20(sp)
  80a988:	d9400417 	ldw	r5,16(sp)
  80a98c:	100f883a 	mov	r7,r2
  80a990:	dc400015 	stw	r17,0(sp)
  80a994:	8009883a 	mov	r4,r16
  80a998:	903ee83a 	callr	r18
  80a99c:	00ffffc4 	movi	r3,-1
  80a9a0:	10c0031e 	bne	r2,r3,80a9b0 <_wcrtomb_r+0x64>
  80a9a4:	88000015 	stw	zero,0(r17)
  80a9a8:	00c02284 	movi	r3,138
  80a9ac:	80c00015 	stw	r3,0(r16)
  80a9b0:	dfc00917 	ldw	ra,36(sp)
  80a9b4:	dc800817 	ldw	r18,32(sp)
  80a9b8:	dc400717 	ldw	r17,28(sp)
  80a9bc:	dc000617 	ldw	r16,24(sp)
  80a9c0:	dec00a04 	addi	sp,sp,40
  80a9c4:	f800283a 	ret
  80a9c8:	0806b7c0 	call	806b7c <__locale_charset>
  80a9cc:	100f883a 	mov	r7,r2
  80a9d0:	dc400015 	stw	r17,0(sp)
  80a9d4:	000d883a 	mov	r6,zero
  80a9d8:	d9400104 	addi	r5,sp,4
  80a9dc:	8009883a 	mov	r4,r16
  80a9e0:	903ee83a 	callr	r18
  80a9e4:	003fed06 	br	80a99c <__alt_data_end+0xff80a99c>

0080a9e8 <wcrtomb>:
  80a9e8:	defff604 	addi	sp,sp,-40
  80a9ec:	00802074 	movhi	r2,129
  80a9f0:	dc800615 	stw	r18,24(sp)
  80a9f4:	dc400515 	stw	r17,20(sp)
  80a9f8:	108b3104 	addi	r2,r2,11460
  80a9fc:	dfc00915 	stw	ra,36(sp)
  80aa00:	dd000815 	stw	r20,32(sp)
  80aa04:	dcc00715 	stw	r19,28(sp)
  80aa08:	dc000415 	stw	r16,16(sp)
  80aa0c:	3025883a 	mov	r18,r6
  80aa10:	14400017 	ldw	r17,0(r2)
  80aa14:	20001926 	beq	r4,zero,80aa7c <wcrtomb+0x94>
  80aa18:	00802074 	movhi	r2,129
  80aa1c:	108b3304 	addi	r2,r2,11468
  80aa20:	15000017 	ldw	r20,0(r2)
  80aa24:	2021883a 	mov	r16,r4
  80aa28:	2827883a 	mov	r19,r5
  80aa2c:	0806b7c0 	call	806b7c <__locale_charset>
  80aa30:	100f883a 	mov	r7,r2
  80aa34:	dc800015 	stw	r18,0(sp)
  80aa38:	980d883a 	mov	r6,r19
  80aa3c:	800b883a 	mov	r5,r16
  80aa40:	8809883a 	mov	r4,r17
  80aa44:	a03ee83a 	callr	r20
  80aa48:	00ffffc4 	movi	r3,-1
  80aa4c:	10c0031e 	bne	r2,r3,80aa5c <wcrtomb+0x74>
  80aa50:	90000015 	stw	zero,0(r18)
  80aa54:	00c02284 	movi	r3,138
  80aa58:	88c00015 	stw	r3,0(r17)
  80aa5c:	dfc00917 	ldw	ra,36(sp)
  80aa60:	dd000817 	ldw	r20,32(sp)
  80aa64:	dcc00717 	ldw	r19,28(sp)
  80aa68:	dc800617 	ldw	r18,24(sp)
  80aa6c:	dc400517 	ldw	r17,20(sp)
  80aa70:	dc000417 	ldw	r16,16(sp)
  80aa74:	dec00a04 	addi	sp,sp,40
  80aa78:	f800283a 	ret
  80aa7c:	00802074 	movhi	r2,129
  80aa80:	108b3304 	addi	r2,r2,11468
  80aa84:	14000017 	ldw	r16,0(r2)
  80aa88:	0806b7c0 	call	806b7c <__locale_charset>
  80aa8c:	100f883a 	mov	r7,r2
  80aa90:	dc800015 	stw	r18,0(sp)
  80aa94:	000d883a 	mov	r6,zero
  80aa98:	d9400104 	addi	r5,sp,4
  80aa9c:	8809883a 	mov	r4,r17
  80aaa0:	803ee83a 	callr	r16
  80aaa4:	003fe806 	br	80aa48 <__alt_data_end+0xff80aa48>

0080aaa8 <__ascii_wctomb>:
  80aaa8:	28000526 	beq	r5,zero,80aac0 <__ascii_wctomb+0x18>
  80aaac:	00803fc4 	movi	r2,255
  80aab0:	11800536 	bltu	r2,r6,80aac8 <__ascii_wctomb+0x20>
  80aab4:	29800005 	stb	r6,0(r5)
  80aab8:	00800044 	movi	r2,1
  80aabc:	f800283a 	ret
  80aac0:	0005883a 	mov	r2,zero
  80aac4:	f800283a 	ret
  80aac8:	00802284 	movi	r2,138
  80aacc:	20800015 	stw	r2,0(r4)
  80aad0:	00bfffc4 	movi	r2,-1
  80aad4:	f800283a 	ret

0080aad8 <_wctomb_r>:
  80aad8:	00802074 	movhi	r2,129
  80aadc:	defff904 	addi	sp,sp,-28
  80aae0:	108b3304 	addi	r2,r2,11468
  80aae4:	dfc00615 	stw	ra,24(sp)
  80aae8:	dc400515 	stw	r17,20(sp)
  80aaec:	dc000415 	stw	r16,16(sp)
  80aaf0:	3823883a 	mov	r17,r7
  80aaf4:	14000017 	ldw	r16,0(r2)
  80aaf8:	d9000115 	stw	r4,4(sp)
  80aafc:	d9400215 	stw	r5,8(sp)
  80ab00:	d9800315 	stw	r6,12(sp)
  80ab04:	0806b7c0 	call	806b7c <__locale_charset>
  80ab08:	d9800317 	ldw	r6,12(sp)
  80ab0c:	d9400217 	ldw	r5,8(sp)
  80ab10:	d9000117 	ldw	r4,4(sp)
  80ab14:	100f883a 	mov	r7,r2
  80ab18:	dc400015 	stw	r17,0(sp)
  80ab1c:	803ee83a 	callr	r16
  80ab20:	dfc00617 	ldw	ra,24(sp)
  80ab24:	dc400517 	ldw	r17,20(sp)
  80ab28:	dc000417 	ldw	r16,16(sp)
  80ab2c:	dec00704 	addi	sp,sp,28
  80ab30:	f800283a 	ret

0080ab34 <__udivdi3>:
  80ab34:	defff404 	addi	sp,sp,-48
  80ab38:	dcc00515 	stw	r19,20(sp)
  80ab3c:	dc000215 	stw	r16,8(sp)
  80ab40:	dfc00b15 	stw	ra,44(sp)
  80ab44:	df000a15 	stw	fp,40(sp)
  80ab48:	ddc00915 	stw	r23,36(sp)
  80ab4c:	dd800815 	stw	r22,32(sp)
  80ab50:	dd400715 	stw	r21,28(sp)
  80ab54:	dd000615 	stw	r20,24(sp)
  80ab58:	dc800415 	stw	r18,16(sp)
  80ab5c:	dc400315 	stw	r17,12(sp)
  80ab60:	2027883a 	mov	r19,r4
  80ab64:	2821883a 	mov	r16,r5
  80ab68:	3800461e 	bne	r7,zero,80ac84 <__udivdi3+0x150>
  80ab6c:	3023883a 	mov	r17,r6
  80ab70:	2025883a 	mov	r18,r4
  80ab74:	2980572e 	bgeu	r5,r6,80acd4 <__udivdi3+0x1a0>
  80ab78:	00bfffd4 	movui	r2,65535
  80ab7c:	282d883a 	mov	r22,r5
  80ab80:	1180b236 	bltu	r2,r6,80ae4c <__udivdi3+0x318>
  80ab84:	00803fc4 	movi	r2,255
  80ab88:	1185803a 	cmpltu	r2,r2,r6
  80ab8c:	100490fa 	slli	r2,r2,3
  80ab90:	3086d83a 	srl	r3,r6,r2
  80ab94:	01002074 	movhi	r4,129
  80ab98:	21038ac4 	addi	r4,r4,3627
  80ab9c:	20c7883a 	add	r3,r4,r3
  80aba0:	18c00003 	ldbu	r3,0(r3)
  80aba4:	1885883a 	add	r2,r3,r2
  80aba8:	00c00804 	movi	r3,32
  80abac:	1887c83a 	sub	r3,r3,r2
  80abb0:	18000526 	beq	r3,zero,80abc8 <__udivdi3+0x94>
  80abb4:	80e0983a 	sll	r16,r16,r3
  80abb8:	9884d83a 	srl	r2,r19,r2
  80abbc:	30e2983a 	sll	r17,r6,r3
  80abc0:	98e4983a 	sll	r18,r19,r3
  80abc4:	142cb03a 	or	r22,r2,r16
  80abc8:	882ad43a 	srli	r21,r17,16
  80abcc:	b009883a 	mov	r4,r22
  80abd0:	8d3fffcc 	andi	r20,r17,65535
  80abd4:	a80b883a 	mov	r5,r21
  80abd8:	080b8500 	call	80b850 <__umodsi3>
  80abdc:	b009883a 	mov	r4,r22
  80abe0:	a80b883a 	mov	r5,r21
  80abe4:	1027883a 	mov	r19,r2
  80abe8:	080b7ec0 	call	80b7ec <__udivsi3>
  80abec:	100b883a 	mov	r5,r2
  80abf0:	a009883a 	mov	r4,r20
  80abf4:	102d883a 	mov	r22,r2
  80abf8:	080b8a80 	call	80b8a8 <__mulsi3>
  80abfc:	9826943a 	slli	r19,r19,16
  80ac00:	9006d43a 	srli	r3,r18,16
  80ac04:	1cc6b03a 	or	r3,r3,r19
  80ac08:	1880052e 	bgeu	r3,r2,80ac20 <__udivdi3+0xec>
  80ac0c:	1c47883a 	add	r3,r3,r17
  80ac10:	b13fffc4 	addi	r4,r22,-1
  80ac14:	1c400136 	bltu	r3,r17,80ac1c <__udivdi3+0xe8>
  80ac18:	18814236 	bltu	r3,r2,80b124 <__udivdi3+0x5f0>
  80ac1c:	202d883a 	mov	r22,r4
  80ac20:	18a1c83a 	sub	r16,r3,r2
  80ac24:	8009883a 	mov	r4,r16
  80ac28:	a80b883a 	mov	r5,r21
  80ac2c:	080b8500 	call	80b850 <__umodsi3>
  80ac30:	1027883a 	mov	r19,r2
  80ac34:	8009883a 	mov	r4,r16
  80ac38:	a80b883a 	mov	r5,r21
  80ac3c:	9826943a 	slli	r19,r19,16
  80ac40:	080b7ec0 	call	80b7ec <__udivsi3>
  80ac44:	100b883a 	mov	r5,r2
  80ac48:	a009883a 	mov	r4,r20
  80ac4c:	94bfffcc 	andi	r18,r18,65535
  80ac50:	1021883a 	mov	r16,r2
  80ac54:	94e4b03a 	or	r18,r18,r19
  80ac58:	080b8a80 	call	80b8a8 <__mulsi3>
  80ac5c:	9080052e 	bgeu	r18,r2,80ac74 <__udivdi3+0x140>
  80ac60:	8ca5883a 	add	r18,r17,r18
  80ac64:	80ffffc4 	addi	r3,r16,-1
  80ac68:	94410c36 	bltu	r18,r17,80b09c <__udivdi3+0x568>
  80ac6c:	90810b2e 	bgeu	r18,r2,80b09c <__udivdi3+0x568>
  80ac70:	843fff84 	addi	r16,r16,-2
  80ac74:	b004943a 	slli	r2,r22,16
  80ac78:	0007883a 	mov	r3,zero
  80ac7c:	1404b03a 	or	r2,r2,r16
  80ac80:	00005e06 	br	80adfc <__udivdi3+0x2c8>
  80ac84:	29c05b36 	bltu	r5,r7,80adf4 <__udivdi3+0x2c0>
  80ac88:	00bfffd4 	movui	r2,65535
  80ac8c:	11c0672e 	bgeu	r2,r7,80ae2c <__udivdi3+0x2f8>
  80ac90:	00804034 	movhi	r2,256
  80ac94:	10bfffc4 	addi	r2,r2,-1
  80ac98:	11c10a36 	bltu	r2,r7,80b0c4 <__udivdi3+0x590>
  80ac9c:	00800404 	movi	r2,16
  80aca0:	3886d83a 	srl	r3,r7,r2
  80aca4:	01002074 	movhi	r4,129
  80aca8:	21038ac4 	addi	r4,r4,3627
  80acac:	20c7883a 	add	r3,r4,r3
  80acb0:	18c00003 	ldbu	r3,0(r3)
  80acb4:	05c00804 	movi	r23,32
  80acb8:	1885883a 	add	r2,r3,r2
  80acbc:	b8afc83a 	sub	r23,r23,r2
  80acc0:	b800671e 	bne	r23,zero,80ae60 <__udivdi3+0x32c>
  80acc4:	3c010536 	bltu	r7,r16,80b0dc <__udivdi3+0x5a8>
  80acc8:	9985403a 	cmpgeu	r2,r19,r6
  80accc:	0007883a 	mov	r3,zero
  80acd0:	00004a06 	br	80adfc <__udivdi3+0x2c8>
  80acd4:	3000041e 	bne	r6,zero,80ace8 <__udivdi3+0x1b4>
  80acd8:	000b883a 	mov	r5,zero
  80acdc:	01000044 	movi	r4,1
  80ace0:	080b7ec0 	call	80b7ec <__udivsi3>
  80ace4:	1023883a 	mov	r17,r2
  80ace8:	00bfffd4 	movui	r2,65535
  80acec:	1440532e 	bgeu	r2,r17,80ae3c <__udivdi3+0x308>
  80acf0:	00804034 	movhi	r2,256
  80acf4:	10bfffc4 	addi	r2,r2,-1
  80acf8:	1440f436 	bltu	r2,r17,80b0cc <__udivdi3+0x598>
  80acfc:	00800404 	movi	r2,16
  80ad00:	8886d83a 	srl	r3,r17,r2
  80ad04:	01002074 	movhi	r4,129
  80ad08:	21038ac4 	addi	r4,r4,3627
  80ad0c:	20c7883a 	add	r3,r4,r3
  80ad10:	18c00003 	ldbu	r3,0(r3)
  80ad14:	1885883a 	add	r2,r3,r2
  80ad18:	00c00804 	movi	r3,32
  80ad1c:	1887c83a 	sub	r3,r3,r2
  80ad20:	1800a51e 	bne	r3,zero,80afb8 <__udivdi3+0x484>
  80ad24:	882ad43a 	srli	r21,r17,16
  80ad28:	8461c83a 	sub	r16,r16,r17
  80ad2c:	8d3fffcc 	andi	r20,r17,65535
  80ad30:	00c00044 	movi	r3,1
  80ad34:	a80b883a 	mov	r5,r21
  80ad38:	8009883a 	mov	r4,r16
  80ad3c:	d8c00115 	stw	r3,4(sp)
  80ad40:	080b8500 	call	80b850 <__umodsi3>
  80ad44:	a80b883a 	mov	r5,r21
  80ad48:	8009883a 	mov	r4,r16
  80ad4c:	1027883a 	mov	r19,r2
  80ad50:	080b7ec0 	call	80b7ec <__udivsi3>
  80ad54:	a00b883a 	mov	r5,r20
  80ad58:	1009883a 	mov	r4,r2
  80ad5c:	102d883a 	mov	r22,r2
  80ad60:	080b8a80 	call	80b8a8 <__mulsi3>
  80ad64:	9826943a 	slli	r19,r19,16
  80ad68:	900ed43a 	srli	r7,r18,16
  80ad6c:	d8c00117 	ldw	r3,4(sp)
  80ad70:	3cceb03a 	or	r7,r7,r19
  80ad74:	3880052e 	bgeu	r7,r2,80ad8c <__udivdi3+0x258>
  80ad78:	3c4f883a 	add	r7,r7,r17
  80ad7c:	b13fffc4 	addi	r4,r22,-1
  80ad80:	3c400136 	bltu	r7,r17,80ad88 <__udivdi3+0x254>
  80ad84:	3880e436 	bltu	r7,r2,80b118 <__udivdi3+0x5e4>
  80ad88:	202d883a 	mov	r22,r4
  80ad8c:	38a1c83a 	sub	r16,r7,r2
  80ad90:	8009883a 	mov	r4,r16
  80ad94:	a80b883a 	mov	r5,r21
  80ad98:	d8c00115 	stw	r3,4(sp)
  80ad9c:	080b8500 	call	80b850 <__umodsi3>
  80ada0:	1027883a 	mov	r19,r2
  80ada4:	8009883a 	mov	r4,r16
  80ada8:	a80b883a 	mov	r5,r21
  80adac:	9826943a 	slli	r19,r19,16
  80adb0:	080b7ec0 	call	80b7ec <__udivsi3>
  80adb4:	a00b883a 	mov	r5,r20
  80adb8:	1009883a 	mov	r4,r2
  80adbc:	94bfffcc 	andi	r18,r18,65535
  80adc0:	1021883a 	mov	r16,r2
  80adc4:	94e4b03a 	or	r18,r18,r19
  80adc8:	080b8a80 	call	80b8a8 <__mulsi3>
  80adcc:	d8c00117 	ldw	r3,4(sp)
  80add0:	9080052e 	bgeu	r18,r2,80ade8 <__udivdi3+0x2b4>
  80add4:	8ca5883a 	add	r18,r17,r18
  80add8:	813fffc4 	addi	r4,r16,-1
  80addc:	9440ad36 	bltu	r18,r17,80b094 <__udivdi3+0x560>
  80ade0:	9080ac2e 	bgeu	r18,r2,80b094 <__udivdi3+0x560>
  80ade4:	843fff84 	addi	r16,r16,-2
  80ade8:	b004943a 	slli	r2,r22,16
  80adec:	1404b03a 	or	r2,r2,r16
  80adf0:	00000206 	br	80adfc <__udivdi3+0x2c8>
  80adf4:	0007883a 	mov	r3,zero
  80adf8:	0005883a 	mov	r2,zero
  80adfc:	dfc00b17 	ldw	ra,44(sp)
  80ae00:	df000a17 	ldw	fp,40(sp)
  80ae04:	ddc00917 	ldw	r23,36(sp)
  80ae08:	dd800817 	ldw	r22,32(sp)
  80ae0c:	dd400717 	ldw	r21,28(sp)
  80ae10:	dd000617 	ldw	r20,24(sp)
  80ae14:	dcc00517 	ldw	r19,20(sp)
  80ae18:	dc800417 	ldw	r18,16(sp)
  80ae1c:	dc400317 	ldw	r17,12(sp)
  80ae20:	dc000217 	ldw	r16,8(sp)
  80ae24:	dec00c04 	addi	sp,sp,48
  80ae28:	f800283a 	ret
  80ae2c:	00803fc4 	movi	r2,255
  80ae30:	11c5803a 	cmpltu	r2,r2,r7
  80ae34:	100490fa 	slli	r2,r2,3
  80ae38:	003f9906 	br	80aca0 <__alt_data_end+0xff80aca0>
  80ae3c:	00803fc4 	movi	r2,255
  80ae40:	1445803a 	cmpltu	r2,r2,r17
  80ae44:	100490fa 	slli	r2,r2,3
  80ae48:	003fad06 	br	80ad00 <__alt_data_end+0xff80ad00>
  80ae4c:	00804034 	movhi	r2,256
  80ae50:	10bfffc4 	addi	r2,r2,-1
  80ae54:	11809f36 	bltu	r2,r6,80b0d4 <__udivdi3+0x5a0>
  80ae58:	00800404 	movi	r2,16
  80ae5c:	003f4c06 	br	80ab90 <__alt_data_end+0xff80ab90>
  80ae60:	3dce983a 	sll	r7,r7,r23
  80ae64:	30b8d83a 	srl	fp,r6,r2
  80ae68:	80a2d83a 	srl	r17,r16,r2
  80ae6c:	35cc983a 	sll	r6,r6,r23
  80ae70:	3f38b03a 	or	fp,r7,fp
  80ae74:	e024d43a 	srli	r18,fp,16
  80ae78:	9884d83a 	srl	r2,r19,r2
  80ae7c:	85e0983a 	sll	r16,r16,r23
  80ae80:	8809883a 	mov	r4,r17
  80ae84:	900b883a 	mov	r5,r18
  80ae88:	d9800015 	stw	r6,0(sp)
  80ae8c:	1420b03a 	or	r16,r2,r16
  80ae90:	080b8500 	call	80b850 <__umodsi3>
  80ae94:	900b883a 	mov	r5,r18
  80ae98:	8809883a 	mov	r4,r17
  80ae9c:	1029883a 	mov	r20,r2
  80aea0:	e5bfffcc 	andi	r22,fp,65535
  80aea4:	080b7ec0 	call	80b7ec <__udivsi3>
  80aea8:	100b883a 	mov	r5,r2
  80aeac:	b009883a 	mov	r4,r22
  80aeb0:	102b883a 	mov	r21,r2
  80aeb4:	080b8a80 	call	80b8a8 <__mulsi3>
  80aeb8:	a028943a 	slli	r20,r20,16
  80aebc:	8006d43a 	srli	r3,r16,16
  80aec0:	1d06b03a 	or	r3,r3,r20
  80aec4:	1880042e 	bgeu	r3,r2,80aed8 <__udivdi3+0x3a4>
  80aec8:	1f07883a 	add	r3,r3,fp
  80aecc:	a93fffc4 	addi	r4,r21,-1
  80aed0:	1f00892e 	bgeu	r3,fp,80b0f8 <__udivdi3+0x5c4>
  80aed4:	202b883a 	mov	r21,r4
  80aed8:	18a3c83a 	sub	r17,r3,r2
  80aedc:	8809883a 	mov	r4,r17
  80aee0:	900b883a 	mov	r5,r18
  80aee4:	080b8500 	call	80b850 <__umodsi3>
  80aee8:	1029883a 	mov	r20,r2
  80aeec:	8809883a 	mov	r4,r17
  80aef0:	900b883a 	mov	r5,r18
  80aef4:	a028943a 	slli	r20,r20,16
  80aef8:	080b7ec0 	call	80b7ec <__udivsi3>
  80aefc:	100b883a 	mov	r5,r2
  80af00:	b009883a 	mov	r4,r22
  80af04:	843fffcc 	andi	r16,r16,65535
  80af08:	1023883a 	mov	r17,r2
  80af0c:	8520b03a 	or	r16,r16,r20
  80af10:	080b8a80 	call	80b8a8 <__mulsi3>
  80af14:	8080042e 	bgeu	r16,r2,80af28 <__udivdi3+0x3f4>
  80af18:	8721883a 	add	r16,r16,fp
  80af1c:	88ffffc4 	addi	r3,r17,-1
  80af20:	8700712e 	bgeu	r16,fp,80b0e8 <__udivdi3+0x5b4>
  80af24:	1823883a 	mov	r17,r3
  80af28:	a80e943a 	slli	r7,r21,16
  80af2c:	d8c00017 	ldw	r3,0(sp)
  80af30:	80a1c83a 	sub	r16,r16,r2
  80af34:	3c64b03a 	or	r18,r7,r17
  80af38:	1d3fffcc 	andi	r20,r3,65535
  80af3c:	9022d43a 	srli	r17,r18,16
  80af40:	95bfffcc 	andi	r22,r18,65535
  80af44:	a00b883a 	mov	r5,r20
  80af48:	b009883a 	mov	r4,r22
  80af4c:	182ad43a 	srli	r21,r3,16
  80af50:	080b8a80 	call	80b8a8 <__mulsi3>
  80af54:	a00b883a 	mov	r5,r20
  80af58:	8809883a 	mov	r4,r17
  80af5c:	1039883a 	mov	fp,r2
  80af60:	080b8a80 	call	80b8a8 <__mulsi3>
  80af64:	8809883a 	mov	r4,r17
  80af68:	a80b883a 	mov	r5,r21
  80af6c:	1029883a 	mov	r20,r2
  80af70:	080b8a80 	call	80b8a8 <__mulsi3>
  80af74:	a80b883a 	mov	r5,r21
  80af78:	b009883a 	mov	r4,r22
  80af7c:	1023883a 	mov	r17,r2
  80af80:	080b8a80 	call	80b8a8 <__mulsi3>
  80af84:	e006d43a 	srli	r3,fp,16
  80af88:	1505883a 	add	r2,r2,r20
  80af8c:	1887883a 	add	r3,r3,r2
  80af90:	1d00022e 	bgeu	r3,r20,80af9c <__udivdi3+0x468>
  80af94:	00800074 	movhi	r2,1
  80af98:	88a3883a 	add	r17,r17,r2
  80af9c:	1804d43a 	srli	r2,r3,16
  80afa0:	1463883a 	add	r17,r2,r17
  80afa4:	84404436 	bltu	r16,r17,80b0b8 <__udivdi3+0x584>
  80afa8:	84403e26 	beq	r16,r17,80b0a4 <__udivdi3+0x570>
  80afac:	9005883a 	mov	r2,r18
  80afb0:	0007883a 	mov	r3,zero
  80afb4:	003f9106 	br	80adfc <__alt_data_end+0xff80adfc>
  80afb8:	88e2983a 	sll	r17,r17,r3
  80afbc:	80aed83a 	srl	r23,r16,r2
  80afc0:	80e0983a 	sll	r16,r16,r3
  80afc4:	882ad43a 	srli	r21,r17,16
  80afc8:	9884d83a 	srl	r2,r19,r2
  80afcc:	b809883a 	mov	r4,r23
  80afd0:	a80b883a 	mov	r5,r21
  80afd4:	98e4983a 	sll	r18,r19,r3
  80afd8:	142cb03a 	or	r22,r2,r16
  80afdc:	080b8500 	call	80b850 <__umodsi3>
  80afe0:	b809883a 	mov	r4,r23
  80afe4:	a80b883a 	mov	r5,r21
  80afe8:	1027883a 	mov	r19,r2
  80afec:	8d3fffcc 	andi	r20,r17,65535
  80aff0:	080b7ec0 	call	80b7ec <__udivsi3>
  80aff4:	a009883a 	mov	r4,r20
  80aff8:	100b883a 	mov	r5,r2
  80affc:	102f883a 	mov	r23,r2
  80b000:	080b8a80 	call	80b8a8 <__mulsi3>
  80b004:	9826943a 	slli	r19,r19,16
  80b008:	b008d43a 	srli	r4,r22,16
  80b00c:	24c8b03a 	or	r4,r4,r19
  80b010:	2080062e 	bgeu	r4,r2,80b02c <__udivdi3+0x4f8>
  80b014:	2449883a 	add	r4,r4,r17
  80b018:	b8ffffc4 	addi	r3,r23,-1
  80b01c:	24403c36 	bltu	r4,r17,80b110 <__udivdi3+0x5dc>
  80b020:	20803b2e 	bgeu	r4,r2,80b110 <__udivdi3+0x5dc>
  80b024:	bdffff84 	addi	r23,r23,-2
  80b028:	2449883a 	add	r4,r4,r17
  80b02c:	20a1c83a 	sub	r16,r4,r2
  80b030:	a80b883a 	mov	r5,r21
  80b034:	8009883a 	mov	r4,r16
  80b038:	080b8500 	call	80b850 <__umodsi3>
  80b03c:	a80b883a 	mov	r5,r21
  80b040:	8009883a 	mov	r4,r16
  80b044:	1027883a 	mov	r19,r2
  80b048:	080b7ec0 	call	80b7ec <__udivsi3>
  80b04c:	a009883a 	mov	r4,r20
  80b050:	100b883a 	mov	r5,r2
  80b054:	9826943a 	slli	r19,r19,16
  80b058:	1039883a 	mov	fp,r2
  80b05c:	080b8a80 	call	80b8a8 <__mulsi3>
  80b060:	b13fffcc 	andi	r4,r22,65535
  80b064:	24c8b03a 	or	r4,r4,r19
  80b068:	2080062e 	bgeu	r4,r2,80b084 <__udivdi3+0x550>
  80b06c:	2449883a 	add	r4,r4,r17
  80b070:	e0ffffc4 	addi	r3,fp,-1
  80b074:	24402436 	bltu	r4,r17,80b108 <__udivdi3+0x5d4>
  80b078:	2080232e 	bgeu	r4,r2,80b108 <__udivdi3+0x5d4>
  80b07c:	e73fff84 	addi	fp,fp,-2
  80b080:	2449883a 	add	r4,r4,r17
  80b084:	b82e943a 	slli	r23,r23,16
  80b088:	20a1c83a 	sub	r16,r4,r2
  80b08c:	bf06b03a 	or	r3,r23,fp
  80b090:	003f2806 	br	80ad34 <__alt_data_end+0xff80ad34>
  80b094:	2021883a 	mov	r16,r4
  80b098:	003f5306 	br	80ade8 <__alt_data_end+0xff80ade8>
  80b09c:	1821883a 	mov	r16,r3
  80b0a0:	003ef406 	br	80ac74 <__alt_data_end+0xff80ac74>
  80b0a4:	1806943a 	slli	r3,r3,16
  80b0a8:	9de6983a 	sll	r19,r19,r23
  80b0ac:	e73fffcc 	andi	fp,fp,65535
  80b0b0:	1f07883a 	add	r3,r3,fp
  80b0b4:	98ffbd2e 	bgeu	r19,r3,80afac <__alt_data_end+0xff80afac>
  80b0b8:	90bfffc4 	addi	r2,r18,-1
  80b0bc:	0007883a 	mov	r3,zero
  80b0c0:	003f4e06 	br	80adfc <__alt_data_end+0xff80adfc>
  80b0c4:	00800604 	movi	r2,24
  80b0c8:	003ef506 	br	80aca0 <__alt_data_end+0xff80aca0>
  80b0cc:	00800604 	movi	r2,24
  80b0d0:	003f0b06 	br	80ad00 <__alt_data_end+0xff80ad00>
  80b0d4:	00800604 	movi	r2,24
  80b0d8:	003ead06 	br	80ab90 <__alt_data_end+0xff80ab90>
  80b0dc:	0007883a 	mov	r3,zero
  80b0e0:	00800044 	movi	r2,1
  80b0e4:	003f4506 	br	80adfc <__alt_data_end+0xff80adfc>
  80b0e8:	80bf8e2e 	bgeu	r16,r2,80af24 <__alt_data_end+0xff80af24>
  80b0ec:	8c7fff84 	addi	r17,r17,-2
  80b0f0:	8721883a 	add	r16,r16,fp
  80b0f4:	003f8c06 	br	80af28 <__alt_data_end+0xff80af28>
  80b0f8:	18bf762e 	bgeu	r3,r2,80aed4 <__alt_data_end+0xff80aed4>
  80b0fc:	ad7fff84 	addi	r21,r21,-2
  80b100:	1f07883a 	add	r3,r3,fp
  80b104:	003f7406 	br	80aed8 <__alt_data_end+0xff80aed8>
  80b108:	1839883a 	mov	fp,r3
  80b10c:	003fdd06 	br	80b084 <__alt_data_end+0xff80b084>
  80b110:	182f883a 	mov	r23,r3
  80b114:	003fc506 	br	80b02c <__alt_data_end+0xff80b02c>
  80b118:	b5bfff84 	addi	r22,r22,-2
  80b11c:	3c4f883a 	add	r7,r7,r17
  80b120:	003f1a06 	br	80ad8c <__alt_data_end+0xff80ad8c>
  80b124:	b5bfff84 	addi	r22,r22,-2
  80b128:	1c47883a 	add	r3,r3,r17
  80b12c:	003ebc06 	br	80ac20 <__alt_data_end+0xff80ac20>

0080b130 <__umoddi3>:
  80b130:	defff304 	addi	sp,sp,-52
  80b134:	df000b15 	stw	fp,44(sp)
  80b138:	dc400415 	stw	r17,16(sp)
  80b13c:	dc000315 	stw	r16,12(sp)
  80b140:	dfc00c15 	stw	ra,48(sp)
  80b144:	ddc00a15 	stw	r23,40(sp)
  80b148:	dd800915 	stw	r22,36(sp)
  80b14c:	dd400815 	stw	r21,32(sp)
  80b150:	dd000715 	stw	r20,28(sp)
  80b154:	dcc00615 	stw	r19,24(sp)
  80b158:	dc800515 	stw	r18,20(sp)
  80b15c:	2021883a 	mov	r16,r4
  80b160:	2823883a 	mov	r17,r5
  80b164:	2839883a 	mov	fp,r5
  80b168:	3800401e 	bne	r7,zero,80b26c <__umoddi3+0x13c>
  80b16c:	3027883a 	mov	r19,r6
  80b170:	2029883a 	mov	r20,r4
  80b174:	2980552e 	bgeu	r5,r6,80b2cc <__umoddi3+0x19c>
  80b178:	00bfffd4 	movui	r2,65535
  80b17c:	1180a236 	bltu	r2,r6,80b408 <__umoddi3+0x2d8>
  80b180:	01003fc4 	movi	r4,255
  80b184:	2189803a 	cmpltu	r4,r4,r6
  80b188:	200890fa 	slli	r4,r4,3
  80b18c:	3104d83a 	srl	r2,r6,r4
  80b190:	00c02074 	movhi	r3,129
  80b194:	18c38ac4 	addi	r3,r3,3627
  80b198:	1885883a 	add	r2,r3,r2
  80b19c:	10c00003 	ldbu	r3,0(r2)
  80b1a0:	00800804 	movi	r2,32
  80b1a4:	1909883a 	add	r4,r3,r4
  80b1a8:	1125c83a 	sub	r18,r2,r4
  80b1ac:	90000526 	beq	r18,zero,80b1c4 <__umoddi3+0x94>
  80b1b0:	8ca2983a 	sll	r17,r17,r18
  80b1b4:	8108d83a 	srl	r4,r16,r4
  80b1b8:	34a6983a 	sll	r19,r6,r18
  80b1bc:	84a8983a 	sll	r20,r16,r18
  80b1c0:	2478b03a 	or	fp,r4,r17
  80b1c4:	982cd43a 	srli	r22,r19,16
  80b1c8:	e009883a 	mov	r4,fp
  80b1cc:	9dffffcc 	andi	r23,r19,65535
  80b1d0:	b00b883a 	mov	r5,r22
  80b1d4:	080b8500 	call	80b850 <__umodsi3>
  80b1d8:	b00b883a 	mov	r5,r22
  80b1dc:	e009883a 	mov	r4,fp
  80b1e0:	102b883a 	mov	r21,r2
  80b1e4:	080b7ec0 	call	80b7ec <__udivsi3>
  80b1e8:	100b883a 	mov	r5,r2
  80b1ec:	b809883a 	mov	r4,r23
  80b1f0:	080b8a80 	call	80b8a8 <__mulsi3>
  80b1f4:	a82a943a 	slli	r21,r21,16
  80b1f8:	a006d43a 	srli	r3,r20,16
  80b1fc:	1d46b03a 	or	r3,r3,r21
  80b200:	1880032e 	bgeu	r3,r2,80b210 <__umoddi3+0xe0>
  80b204:	1cc7883a 	add	r3,r3,r19
  80b208:	1cc00136 	bltu	r3,r19,80b210 <__umoddi3+0xe0>
  80b20c:	18813136 	bltu	r3,r2,80b6d4 <__umoddi3+0x5a4>
  80b210:	18a1c83a 	sub	r16,r3,r2
  80b214:	b00b883a 	mov	r5,r22
  80b218:	8009883a 	mov	r4,r16
  80b21c:	080b8500 	call	80b850 <__umodsi3>
  80b220:	b00b883a 	mov	r5,r22
  80b224:	8009883a 	mov	r4,r16
  80b228:	1023883a 	mov	r17,r2
  80b22c:	080b7ec0 	call	80b7ec <__udivsi3>
  80b230:	100b883a 	mov	r5,r2
  80b234:	b809883a 	mov	r4,r23
  80b238:	8822943a 	slli	r17,r17,16
  80b23c:	080b8a80 	call	80b8a8 <__mulsi3>
  80b240:	a0ffffcc 	andi	r3,r20,65535
  80b244:	1c46b03a 	or	r3,r3,r17
  80b248:	1880042e 	bgeu	r3,r2,80b25c <__umoddi3+0x12c>
  80b24c:	1cc7883a 	add	r3,r3,r19
  80b250:	1cc00236 	bltu	r3,r19,80b25c <__umoddi3+0x12c>
  80b254:	1880012e 	bgeu	r3,r2,80b25c <__umoddi3+0x12c>
  80b258:	1cc7883a 	add	r3,r3,r19
  80b25c:	1885c83a 	sub	r2,r3,r2
  80b260:	1484d83a 	srl	r2,r2,r18
  80b264:	0007883a 	mov	r3,zero
  80b268:	00005306 	br	80b3b8 <__umoddi3+0x288>
  80b26c:	29c05036 	bltu	r5,r7,80b3b0 <__umoddi3+0x280>
  80b270:	00bfffd4 	movui	r2,65535
  80b274:	11c05c2e 	bgeu	r2,r7,80b3e8 <__umoddi3+0x2b8>
  80b278:	00804034 	movhi	r2,256
  80b27c:	10bfffc4 	addi	r2,r2,-1
  80b280:	11c10636 	bltu	r2,r7,80b69c <__umoddi3+0x56c>
  80b284:	01000404 	movi	r4,16
  80b288:	3904d83a 	srl	r2,r7,r4
  80b28c:	00c02074 	movhi	r3,129
  80b290:	18c38ac4 	addi	r3,r3,3627
  80b294:	1885883a 	add	r2,r3,r2
  80b298:	14c00003 	ldbu	r19,0(r2)
  80b29c:	00c00804 	movi	r3,32
  80b2a0:	9927883a 	add	r19,r19,r4
  80b2a4:	1ce9c83a 	sub	r20,r3,r19
  80b2a8:	a0005c1e 	bne	r20,zero,80b41c <__umoddi3+0x2ec>
  80b2ac:	3c400136 	bltu	r7,r17,80b2b4 <__umoddi3+0x184>
  80b2b0:	81810a36 	bltu	r16,r6,80b6dc <__umoddi3+0x5ac>
  80b2b4:	8185c83a 	sub	r2,r16,r6
  80b2b8:	89e3c83a 	sub	r17,r17,r7
  80b2bc:	8089803a 	cmpltu	r4,r16,r2
  80b2c0:	8939c83a 	sub	fp,r17,r4
  80b2c4:	e007883a 	mov	r3,fp
  80b2c8:	00003b06 	br	80b3b8 <__umoddi3+0x288>
  80b2cc:	3000041e 	bne	r6,zero,80b2e0 <__umoddi3+0x1b0>
  80b2d0:	000b883a 	mov	r5,zero
  80b2d4:	01000044 	movi	r4,1
  80b2d8:	080b7ec0 	call	80b7ec <__udivsi3>
  80b2dc:	1027883a 	mov	r19,r2
  80b2e0:	00bfffd4 	movui	r2,65535
  80b2e4:	14c0442e 	bgeu	r2,r19,80b3f8 <__umoddi3+0x2c8>
  80b2e8:	00804034 	movhi	r2,256
  80b2ec:	10bfffc4 	addi	r2,r2,-1
  80b2f0:	14c0ec36 	bltu	r2,r19,80b6a4 <__umoddi3+0x574>
  80b2f4:	00800404 	movi	r2,16
  80b2f8:	9886d83a 	srl	r3,r19,r2
  80b2fc:	01002074 	movhi	r4,129
  80b300:	21038ac4 	addi	r4,r4,3627
  80b304:	20c7883a 	add	r3,r4,r3
  80b308:	18c00003 	ldbu	r3,0(r3)
  80b30c:	1887883a 	add	r3,r3,r2
  80b310:	00800804 	movi	r2,32
  80b314:	10e5c83a 	sub	r18,r2,r3
  80b318:	9000ab1e 	bne	r18,zero,80b5c8 <__umoddi3+0x498>
  80b31c:	982cd43a 	srli	r22,r19,16
  80b320:	8ce3c83a 	sub	r17,r17,r19
  80b324:	9dffffcc 	andi	r23,r19,65535
  80b328:	b00b883a 	mov	r5,r22
  80b32c:	8809883a 	mov	r4,r17
  80b330:	080b8500 	call	80b850 <__umodsi3>
  80b334:	b00b883a 	mov	r5,r22
  80b338:	8809883a 	mov	r4,r17
  80b33c:	102b883a 	mov	r21,r2
  80b340:	080b7ec0 	call	80b7ec <__udivsi3>
  80b344:	b80b883a 	mov	r5,r23
  80b348:	1009883a 	mov	r4,r2
  80b34c:	080b8a80 	call	80b8a8 <__mulsi3>
  80b350:	a82a943a 	slli	r21,r21,16
  80b354:	a006d43a 	srli	r3,r20,16
  80b358:	1d46b03a 	or	r3,r3,r21
  80b35c:	1880042e 	bgeu	r3,r2,80b370 <__umoddi3+0x240>
  80b360:	1cc7883a 	add	r3,r3,r19
  80b364:	1cc00236 	bltu	r3,r19,80b370 <__umoddi3+0x240>
  80b368:	1880012e 	bgeu	r3,r2,80b370 <__umoddi3+0x240>
  80b36c:	1cc7883a 	add	r3,r3,r19
  80b370:	18a1c83a 	sub	r16,r3,r2
  80b374:	b00b883a 	mov	r5,r22
  80b378:	8009883a 	mov	r4,r16
  80b37c:	080b8500 	call	80b850 <__umodsi3>
  80b380:	1023883a 	mov	r17,r2
  80b384:	b00b883a 	mov	r5,r22
  80b388:	8009883a 	mov	r4,r16
  80b38c:	080b7ec0 	call	80b7ec <__udivsi3>
  80b390:	8822943a 	slli	r17,r17,16
  80b394:	b80b883a 	mov	r5,r23
  80b398:	1009883a 	mov	r4,r2
  80b39c:	080b8a80 	call	80b8a8 <__mulsi3>
  80b3a0:	a53fffcc 	andi	r20,r20,65535
  80b3a4:	a446b03a 	or	r3,r20,r17
  80b3a8:	18bfac2e 	bgeu	r3,r2,80b25c <__alt_data_end+0xff80b25c>
  80b3ac:	003fa706 	br	80b24c <__alt_data_end+0xff80b24c>
  80b3b0:	2005883a 	mov	r2,r4
  80b3b4:	2807883a 	mov	r3,r5
  80b3b8:	dfc00c17 	ldw	ra,48(sp)
  80b3bc:	df000b17 	ldw	fp,44(sp)
  80b3c0:	ddc00a17 	ldw	r23,40(sp)
  80b3c4:	dd800917 	ldw	r22,36(sp)
  80b3c8:	dd400817 	ldw	r21,32(sp)
  80b3cc:	dd000717 	ldw	r20,28(sp)
  80b3d0:	dcc00617 	ldw	r19,24(sp)
  80b3d4:	dc800517 	ldw	r18,20(sp)
  80b3d8:	dc400417 	ldw	r17,16(sp)
  80b3dc:	dc000317 	ldw	r16,12(sp)
  80b3e0:	dec00d04 	addi	sp,sp,52
  80b3e4:	f800283a 	ret
  80b3e8:	04c03fc4 	movi	r19,255
  80b3ec:	99c9803a 	cmpltu	r4,r19,r7
  80b3f0:	200890fa 	slli	r4,r4,3
  80b3f4:	003fa406 	br	80b288 <__alt_data_end+0xff80b288>
  80b3f8:	00803fc4 	movi	r2,255
  80b3fc:	14c5803a 	cmpltu	r2,r2,r19
  80b400:	100490fa 	slli	r2,r2,3
  80b404:	003fbc06 	br	80b2f8 <__alt_data_end+0xff80b2f8>
  80b408:	00804034 	movhi	r2,256
  80b40c:	10bfffc4 	addi	r2,r2,-1
  80b410:	1180a636 	bltu	r2,r6,80b6ac <__umoddi3+0x57c>
  80b414:	01000404 	movi	r4,16
  80b418:	003f5c06 	br	80b18c <__alt_data_end+0xff80b18c>
  80b41c:	3d0e983a 	sll	r7,r7,r20
  80b420:	34ead83a 	srl	r21,r6,r19
  80b424:	8cc6d83a 	srl	r3,r17,r19
  80b428:	8d10983a 	sll	r8,r17,r20
  80b42c:	3d6ab03a 	or	r21,r7,r21
  80b430:	a82cd43a 	srli	r22,r21,16
  80b434:	84e2d83a 	srl	r17,r16,r19
  80b438:	1809883a 	mov	r4,r3
  80b43c:	b00b883a 	mov	r5,r22
  80b440:	8a22b03a 	or	r17,r17,r8
  80b444:	3524983a 	sll	r18,r6,r20
  80b448:	dc400015 	stw	r17,0(sp)
  80b44c:	d8c00115 	stw	r3,4(sp)
  80b450:	080b8500 	call	80b850 <__umodsi3>
  80b454:	d8c00117 	ldw	r3,4(sp)
  80b458:	b00b883a 	mov	r5,r22
  80b45c:	1039883a 	mov	fp,r2
  80b460:	1809883a 	mov	r4,r3
  80b464:	080b7ec0 	call	80b7ec <__udivsi3>
  80b468:	adffffcc 	andi	r23,r21,65535
  80b46c:	100b883a 	mov	r5,r2
  80b470:	b809883a 	mov	r4,r23
  80b474:	1023883a 	mov	r17,r2
  80b478:	080b8a80 	call	80b8a8 <__mulsi3>
  80b47c:	d9400017 	ldw	r5,0(sp)
  80b480:	e008943a 	slli	r4,fp,16
  80b484:	8520983a 	sll	r16,r16,r20
  80b488:	2806d43a 	srli	r3,r5,16
  80b48c:	1906b03a 	or	r3,r3,r4
  80b490:	1880042e 	bgeu	r3,r2,80b4a4 <__umoddi3+0x374>
  80b494:	1d47883a 	add	r3,r3,r21
  80b498:	893fffc4 	addi	r4,r17,-1
  80b49c:	1d40892e 	bgeu	r3,r21,80b6c4 <__umoddi3+0x594>
  80b4a0:	2023883a 	mov	r17,r4
  80b4a4:	18b9c83a 	sub	fp,r3,r2
  80b4a8:	b00b883a 	mov	r5,r22
  80b4ac:	e009883a 	mov	r4,fp
  80b4b0:	080b8500 	call	80b850 <__umodsi3>
  80b4b4:	b00b883a 	mov	r5,r22
  80b4b8:	e009883a 	mov	r4,fp
  80b4bc:	d8800215 	stw	r2,8(sp)
  80b4c0:	080b7ec0 	call	80b7ec <__udivsi3>
  80b4c4:	100b883a 	mov	r5,r2
  80b4c8:	b809883a 	mov	r4,r23
  80b4cc:	102d883a 	mov	r22,r2
  80b4d0:	080b8a80 	call	80b8a8 <__mulsi3>
  80b4d4:	d9800217 	ldw	r6,8(sp)
  80b4d8:	d8c00017 	ldw	r3,0(sp)
  80b4dc:	300c943a 	slli	r6,r6,16
  80b4e0:	1a3fffcc 	andi	r8,r3,65535
  80b4e4:	4190b03a 	or	r8,r8,r6
  80b4e8:	4080042e 	bgeu	r8,r2,80b4fc <__umoddi3+0x3cc>
  80b4ec:	4551883a 	add	r8,r8,r21
  80b4f0:	b0ffffc4 	addi	r3,r22,-1
  80b4f4:	45406f2e 	bgeu	r8,r21,80b6b4 <__umoddi3+0x584>
  80b4f8:	182d883a 	mov	r22,r3
  80b4fc:	880e943a 	slli	r7,r17,16
  80b500:	9006d43a 	srli	r3,r18,16
  80b504:	91bfffcc 	andi	r6,r18,65535
  80b508:	3dacb03a 	or	r22,r7,r22
  80b50c:	b02ed43a 	srli	r23,r22,16
  80b510:	b5bfffcc 	andi	r22,r22,65535
  80b514:	300b883a 	mov	r5,r6
  80b518:	b009883a 	mov	r4,r22
  80b51c:	40a3c83a 	sub	r17,r8,r2
  80b520:	d8c00115 	stw	r3,4(sp)
  80b524:	d9800215 	stw	r6,8(sp)
  80b528:	080b8a80 	call	80b8a8 <__mulsi3>
  80b52c:	d9800217 	ldw	r6,8(sp)
  80b530:	b809883a 	mov	r4,r23
  80b534:	1039883a 	mov	fp,r2
  80b538:	300b883a 	mov	r5,r6
  80b53c:	080b8a80 	call	80b8a8 <__mulsi3>
  80b540:	d8c00117 	ldw	r3,4(sp)
  80b544:	b809883a 	mov	r4,r23
  80b548:	d8800215 	stw	r2,8(sp)
  80b54c:	180b883a 	mov	r5,r3
  80b550:	080b8a80 	call	80b8a8 <__mulsi3>
  80b554:	d8c00117 	ldw	r3,4(sp)
  80b558:	b009883a 	mov	r4,r22
  80b55c:	102f883a 	mov	r23,r2
  80b560:	180b883a 	mov	r5,r3
  80b564:	080b8a80 	call	80b8a8 <__mulsi3>
  80b568:	d9800217 	ldw	r6,8(sp)
  80b56c:	e006d43a 	srli	r3,fp,16
  80b570:	1185883a 	add	r2,r2,r6
  80b574:	1885883a 	add	r2,r3,r2
  80b578:	1180022e 	bgeu	r2,r6,80b584 <__umoddi3+0x454>
  80b57c:	00c00074 	movhi	r3,1
  80b580:	b8ef883a 	add	r23,r23,r3
  80b584:	1006d43a 	srli	r3,r2,16
  80b588:	1004943a 	slli	r2,r2,16
  80b58c:	e73fffcc 	andi	fp,fp,65535
  80b590:	1dc7883a 	add	r3,r3,r23
  80b594:	1739883a 	add	fp,r2,fp
  80b598:	88c03a36 	bltu	r17,r3,80b684 <__umoddi3+0x554>
  80b59c:	88c05126 	beq	r17,r3,80b6e4 <__umoddi3+0x5b4>
  80b5a0:	88c9c83a 	sub	r4,r17,r3
  80b5a4:	e00f883a 	mov	r7,fp
  80b5a8:	81cfc83a 	sub	r7,r16,r7
  80b5ac:	81c7803a 	cmpltu	r3,r16,r7
  80b5b0:	20c7c83a 	sub	r3,r4,r3
  80b5b4:	1cc4983a 	sll	r2,r3,r19
  80b5b8:	3d0ed83a 	srl	r7,r7,r20
  80b5bc:	1d06d83a 	srl	r3,r3,r20
  80b5c0:	11c4b03a 	or	r2,r2,r7
  80b5c4:	003f7c06 	br	80b3b8 <__alt_data_end+0xff80b3b8>
  80b5c8:	9ca6983a 	sll	r19,r19,r18
  80b5cc:	88f8d83a 	srl	fp,r17,r3
  80b5d0:	80c4d83a 	srl	r2,r16,r3
  80b5d4:	982cd43a 	srli	r22,r19,16
  80b5d8:	8ca2983a 	sll	r17,r17,r18
  80b5dc:	e009883a 	mov	r4,fp
  80b5e0:	b00b883a 	mov	r5,r22
  80b5e4:	146ab03a 	or	r21,r2,r17
  80b5e8:	080b8500 	call	80b850 <__umodsi3>
  80b5ec:	b00b883a 	mov	r5,r22
  80b5f0:	e009883a 	mov	r4,fp
  80b5f4:	1029883a 	mov	r20,r2
  80b5f8:	9dffffcc 	andi	r23,r19,65535
  80b5fc:	080b7ec0 	call	80b7ec <__udivsi3>
  80b600:	b809883a 	mov	r4,r23
  80b604:	100b883a 	mov	r5,r2
  80b608:	080b8a80 	call	80b8a8 <__mulsi3>
  80b60c:	a008943a 	slli	r4,r20,16
  80b610:	a806d43a 	srli	r3,r21,16
  80b614:	84a8983a 	sll	r20,r16,r18
  80b618:	1906b03a 	or	r3,r3,r4
  80b61c:	1880042e 	bgeu	r3,r2,80b630 <__umoddi3+0x500>
  80b620:	1cc7883a 	add	r3,r3,r19
  80b624:	1cc00236 	bltu	r3,r19,80b630 <__umoddi3+0x500>
  80b628:	1880012e 	bgeu	r3,r2,80b630 <__umoddi3+0x500>
  80b62c:	1cc7883a 	add	r3,r3,r19
  80b630:	18a3c83a 	sub	r17,r3,r2
  80b634:	b00b883a 	mov	r5,r22
  80b638:	8809883a 	mov	r4,r17
  80b63c:	080b8500 	call	80b850 <__umodsi3>
  80b640:	b00b883a 	mov	r5,r22
  80b644:	8809883a 	mov	r4,r17
  80b648:	1021883a 	mov	r16,r2
  80b64c:	080b7ec0 	call	80b7ec <__udivsi3>
  80b650:	100b883a 	mov	r5,r2
  80b654:	b809883a 	mov	r4,r23
  80b658:	8020943a 	slli	r16,r16,16
  80b65c:	080b8a80 	call	80b8a8 <__mulsi3>
  80b660:	a8ffffcc 	andi	r3,r21,65535
  80b664:	1c06b03a 	or	r3,r3,r16
  80b668:	1880042e 	bgeu	r3,r2,80b67c <__umoddi3+0x54c>
  80b66c:	1cc7883a 	add	r3,r3,r19
  80b670:	1cc00236 	bltu	r3,r19,80b67c <__umoddi3+0x54c>
  80b674:	1880012e 	bgeu	r3,r2,80b67c <__umoddi3+0x54c>
  80b678:	1cc7883a 	add	r3,r3,r19
  80b67c:	18a3c83a 	sub	r17,r3,r2
  80b680:	003f2906 	br	80b328 <__alt_data_end+0xff80b328>
  80b684:	e48fc83a 	sub	r7,fp,r18
  80b688:	1d49c83a 	sub	r4,r3,r21
  80b68c:	e1f9803a 	cmpltu	fp,fp,r7
  80b690:	2739c83a 	sub	fp,r4,fp
  80b694:	8f09c83a 	sub	r4,r17,fp
  80b698:	003fc306 	br	80b5a8 <__alt_data_end+0xff80b5a8>
  80b69c:	01000604 	movi	r4,24
  80b6a0:	003ef906 	br	80b288 <__alt_data_end+0xff80b288>
  80b6a4:	00800604 	movi	r2,24
  80b6a8:	003f1306 	br	80b2f8 <__alt_data_end+0xff80b2f8>
  80b6ac:	01000604 	movi	r4,24
  80b6b0:	003eb606 	br	80b18c <__alt_data_end+0xff80b18c>
  80b6b4:	40bf902e 	bgeu	r8,r2,80b4f8 <__alt_data_end+0xff80b4f8>
  80b6b8:	b5bfff84 	addi	r22,r22,-2
  80b6bc:	4551883a 	add	r8,r8,r21
  80b6c0:	003f8e06 	br	80b4fc <__alt_data_end+0xff80b4fc>
  80b6c4:	18bf762e 	bgeu	r3,r2,80b4a0 <__alt_data_end+0xff80b4a0>
  80b6c8:	8c7fff84 	addi	r17,r17,-2
  80b6cc:	1d47883a 	add	r3,r3,r21
  80b6d0:	003f7406 	br	80b4a4 <__alt_data_end+0xff80b4a4>
  80b6d4:	1cc7883a 	add	r3,r3,r19
  80b6d8:	003ecd06 	br	80b210 <__alt_data_end+0xff80b210>
  80b6dc:	8005883a 	mov	r2,r16
  80b6e0:	003ef806 	br	80b2c4 <__alt_data_end+0xff80b2c4>
  80b6e4:	873fe736 	bltu	r16,fp,80b684 <__alt_data_end+0xff80b684>
  80b6e8:	e00f883a 	mov	r7,fp
  80b6ec:	0009883a 	mov	r4,zero
  80b6f0:	003fad06 	br	80b5a8 <__alt_data_end+0xff80b5a8>

0080b6f4 <__divsi3>:
  80b6f4:	20001b16 	blt	r4,zero,80b764 <__divsi3+0x70>
  80b6f8:	000f883a 	mov	r7,zero
  80b6fc:	28001616 	blt	r5,zero,80b758 <__divsi3+0x64>
  80b700:	200d883a 	mov	r6,r4
  80b704:	29001a2e 	bgeu	r5,r4,80b770 <__divsi3+0x7c>
  80b708:	00800804 	movi	r2,32
  80b70c:	00c00044 	movi	r3,1
  80b710:	00000106 	br	80b718 <__divsi3+0x24>
  80b714:	10000d26 	beq	r2,zero,80b74c <__divsi3+0x58>
  80b718:	294b883a 	add	r5,r5,r5
  80b71c:	10bfffc4 	addi	r2,r2,-1
  80b720:	18c7883a 	add	r3,r3,r3
  80b724:	293ffb36 	bltu	r5,r4,80b714 <__alt_data_end+0xff80b714>
  80b728:	0005883a 	mov	r2,zero
  80b72c:	18000726 	beq	r3,zero,80b74c <__divsi3+0x58>
  80b730:	0005883a 	mov	r2,zero
  80b734:	31400236 	bltu	r6,r5,80b740 <__divsi3+0x4c>
  80b738:	314dc83a 	sub	r6,r6,r5
  80b73c:	10c4b03a 	or	r2,r2,r3
  80b740:	1806d07a 	srli	r3,r3,1
  80b744:	280ad07a 	srli	r5,r5,1
  80b748:	183ffa1e 	bne	r3,zero,80b734 <__alt_data_end+0xff80b734>
  80b74c:	38000126 	beq	r7,zero,80b754 <__divsi3+0x60>
  80b750:	0085c83a 	sub	r2,zero,r2
  80b754:	f800283a 	ret
  80b758:	014bc83a 	sub	r5,zero,r5
  80b75c:	39c0005c 	xori	r7,r7,1
  80b760:	003fe706 	br	80b700 <__alt_data_end+0xff80b700>
  80b764:	0109c83a 	sub	r4,zero,r4
  80b768:	01c00044 	movi	r7,1
  80b76c:	003fe306 	br	80b6fc <__alt_data_end+0xff80b6fc>
  80b770:	00c00044 	movi	r3,1
  80b774:	003fee06 	br	80b730 <__alt_data_end+0xff80b730>

0080b778 <__modsi3>:
  80b778:	20001716 	blt	r4,zero,80b7d8 <__modsi3+0x60>
  80b77c:	000f883a 	mov	r7,zero
  80b780:	2005883a 	mov	r2,r4
  80b784:	28001216 	blt	r5,zero,80b7d0 <__modsi3+0x58>
  80b788:	2900162e 	bgeu	r5,r4,80b7e4 <__modsi3+0x6c>
  80b78c:	01800804 	movi	r6,32
  80b790:	00c00044 	movi	r3,1
  80b794:	00000106 	br	80b79c <__modsi3+0x24>
  80b798:	30000a26 	beq	r6,zero,80b7c4 <__modsi3+0x4c>
  80b79c:	294b883a 	add	r5,r5,r5
  80b7a0:	31bfffc4 	addi	r6,r6,-1
  80b7a4:	18c7883a 	add	r3,r3,r3
  80b7a8:	293ffb36 	bltu	r5,r4,80b798 <__alt_data_end+0xff80b798>
  80b7ac:	18000526 	beq	r3,zero,80b7c4 <__modsi3+0x4c>
  80b7b0:	1806d07a 	srli	r3,r3,1
  80b7b4:	11400136 	bltu	r2,r5,80b7bc <__modsi3+0x44>
  80b7b8:	1145c83a 	sub	r2,r2,r5
  80b7bc:	280ad07a 	srli	r5,r5,1
  80b7c0:	183ffb1e 	bne	r3,zero,80b7b0 <__alt_data_end+0xff80b7b0>
  80b7c4:	38000126 	beq	r7,zero,80b7cc <__modsi3+0x54>
  80b7c8:	0085c83a 	sub	r2,zero,r2
  80b7cc:	f800283a 	ret
  80b7d0:	014bc83a 	sub	r5,zero,r5
  80b7d4:	003fec06 	br	80b788 <__alt_data_end+0xff80b788>
  80b7d8:	0109c83a 	sub	r4,zero,r4
  80b7dc:	01c00044 	movi	r7,1
  80b7e0:	003fe706 	br	80b780 <__alt_data_end+0xff80b780>
  80b7e4:	00c00044 	movi	r3,1
  80b7e8:	003ff106 	br	80b7b0 <__alt_data_end+0xff80b7b0>

0080b7ec <__udivsi3>:
  80b7ec:	200d883a 	mov	r6,r4
  80b7f0:	2900152e 	bgeu	r5,r4,80b848 <__udivsi3+0x5c>
  80b7f4:	28001416 	blt	r5,zero,80b848 <__udivsi3+0x5c>
  80b7f8:	00800804 	movi	r2,32
  80b7fc:	00c00044 	movi	r3,1
  80b800:	00000206 	br	80b80c <__udivsi3+0x20>
  80b804:	10000e26 	beq	r2,zero,80b840 <__udivsi3+0x54>
  80b808:	28000516 	blt	r5,zero,80b820 <__udivsi3+0x34>
  80b80c:	294b883a 	add	r5,r5,r5
  80b810:	10bfffc4 	addi	r2,r2,-1
  80b814:	18c7883a 	add	r3,r3,r3
  80b818:	293ffa36 	bltu	r5,r4,80b804 <__alt_data_end+0xff80b804>
  80b81c:	18000826 	beq	r3,zero,80b840 <__udivsi3+0x54>
  80b820:	0005883a 	mov	r2,zero
  80b824:	31400236 	bltu	r6,r5,80b830 <__udivsi3+0x44>
  80b828:	314dc83a 	sub	r6,r6,r5
  80b82c:	10c4b03a 	or	r2,r2,r3
  80b830:	1806d07a 	srli	r3,r3,1
  80b834:	280ad07a 	srli	r5,r5,1
  80b838:	183ffa1e 	bne	r3,zero,80b824 <__alt_data_end+0xff80b824>
  80b83c:	f800283a 	ret
  80b840:	0005883a 	mov	r2,zero
  80b844:	f800283a 	ret
  80b848:	00c00044 	movi	r3,1
  80b84c:	003ff406 	br	80b820 <__alt_data_end+0xff80b820>

0080b850 <__umodsi3>:
  80b850:	2005883a 	mov	r2,r4
  80b854:	2900122e 	bgeu	r5,r4,80b8a0 <__umodsi3+0x50>
  80b858:	28001116 	blt	r5,zero,80b8a0 <__umodsi3+0x50>
  80b85c:	01800804 	movi	r6,32
  80b860:	00c00044 	movi	r3,1
  80b864:	00000206 	br	80b870 <__umodsi3+0x20>
  80b868:	30000c26 	beq	r6,zero,80b89c <__umodsi3+0x4c>
  80b86c:	28000516 	blt	r5,zero,80b884 <__umodsi3+0x34>
  80b870:	294b883a 	add	r5,r5,r5
  80b874:	31bfffc4 	addi	r6,r6,-1
  80b878:	18c7883a 	add	r3,r3,r3
  80b87c:	293ffa36 	bltu	r5,r4,80b868 <__alt_data_end+0xff80b868>
  80b880:	18000626 	beq	r3,zero,80b89c <__umodsi3+0x4c>
  80b884:	1806d07a 	srli	r3,r3,1
  80b888:	11400136 	bltu	r2,r5,80b890 <__umodsi3+0x40>
  80b88c:	1145c83a 	sub	r2,r2,r5
  80b890:	280ad07a 	srli	r5,r5,1
  80b894:	183ffb1e 	bne	r3,zero,80b884 <__alt_data_end+0xff80b884>
  80b898:	f800283a 	ret
  80b89c:	f800283a 	ret
  80b8a0:	00c00044 	movi	r3,1
  80b8a4:	003ff706 	br	80b884 <__alt_data_end+0xff80b884>

0080b8a8 <__mulsi3>:
  80b8a8:	0005883a 	mov	r2,zero
  80b8ac:	20000726 	beq	r4,zero,80b8cc <__mulsi3+0x24>
  80b8b0:	20c0004c 	andi	r3,r4,1
  80b8b4:	2008d07a 	srli	r4,r4,1
  80b8b8:	18000126 	beq	r3,zero,80b8c0 <__mulsi3+0x18>
  80b8bc:	1145883a 	add	r2,r2,r5
  80b8c0:	294b883a 	add	r5,r5,r5
  80b8c4:	203ffa1e 	bne	r4,zero,80b8b0 <__alt_data_end+0xff80b8b0>
  80b8c8:	f800283a 	ret
  80b8cc:	f800283a 	ret

0080b8d0 <__divdf3>:
  80b8d0:	defff004 	addi	sp,sp,-64
  80b8d4:	dc800815 	stw	r18,32(sp)
  80b8d8:	2824d53a 	srli	r18,r5,20
  80b8dc:	dd800c15 	stw	r22,48(sp)
  80b8e0:	282cd7fa 	srli	r22,r5,31
  80b8e4:	dc000615 	stw	r16,24(sp)
  80b8e8:	04000434 	movhi	r16,16
  80b8ec:	843fffc4 	addi	r16,r16,-1
  80b8f0:	dfc00f15 	stw	ra,60(sp)
  80b8f4:	df000e15 	stw	fp,56(sp)
  80b8f8:	ddc00d15 	stw	r23,52(sp)
  80b8fc:	dd400b15 	stw	r21,44(sp)
  80b900:	dd000a15 	stw	r20,40(sp)
  80b904:	dcc00915 	stw	r19,36(sp)
  80b908:	dc400715 	stw	r17,28(sp)
  80b90c:	9481ffcc 	andi	r18,r18,2047
  80b910:	2c20703a 	and	r16,r5,r16
  80b914:	b2003fcc 	andi	r8,r22,255
  80b918:	90006126 	beq	r18,zero,80baa0 <__divdf3+0x1d0>
  80b91c:	0081ffc4 	movi	r2,2047
  80b920:	202b883a 	mov	r21,r4
  80b924:	90803726 	beq	r18,r2,80ba04 <__divdf3+0x134>
  80b928:	80800434 	orhi	r2,r16,16
  80b92c:	100490fa 	slli	r2,r2,3
  80b930:	2020d77a 	srli	r16,r4,29
  80b934:	202a90fa 	slli	r21,r4,3
  80b938:	94bf0044 	addi	r18,r18,-1023
  80b93c:	80a0b03a 	or	r16,r16,r2
  80b940:	0013883a 	mov	r9,zero
  80b944:	000b883a 	mov	r5,zero
  80b948:	3806d53a 	srli	r3,r7,20
  80b94c:	382ed7fa 	srli	r23,r7,31
  80b950:	04400434 	movhi	r17,16
  80b954:	8c7fffc4 	addi	r17,r17,-1
  80b958:	18c1ffcc 	andi	r3,r3,2047
  80b95c:	3029883a 	mov	r20,r6
  80b960:	3c62703a 	and	r17,r7,r17
  80b964:	bf003fcc 	andi	fp,r23,255
  80b968:	18006e26 	beq	r3,zero,80bb24 <__divdf3+0x254>
  80b96c:	0081ffc4 	movi	r2,2047
  80b970:	18806626 	beq	r3,r2,80bb0c <__divdf3+0x23c>
  80b974:	88800434 	orhi	r2,r17,16
  80b978:	100490fa 	slli	r2,r2,3
  80b97c:	3022d77a 	srli	r17,r6,29
  80b980:	302890fa 	slli	r20,r6,3
  80b984:	18ff0044 	addi	r3,r3,-1023
  80b988:	88a2b03a 	or	r17,r17,r2
  80b98c:	000f883a 	mov	r7,zero
  80b990:	b5e6f03a 	xor	r19,r22,r23
  80b994:	3a4cb03a 	or	r6,r7,r9
  80b998:	008003c4 	movi	r2,15
  80b99c:	9809883a 	mov	r4,r19
  80b9a0:	90c7c83a 	sub	r3,r18,r3
  80b9a4:	9cc03fcc 	andi	r19,r19,255
  80b9a8:	11809636 	bltu	r2,r6,80bc04 <__divdf3+0x334>
  80b9ac:	300c90ba 	slli	r6,r6,2
  80b9b0:	00802074 	movhi	r2,129
  80b9b4:	10ae7104 	addi	r2,r2,-17980
  80b9b8:	308d883a 	add	r6,r6,r2
  80b9bc:	30800017 	ldw	r2,0(r6)
  80b9c0:	1000683a 	jmp	r2
  80b9c4:	0080bc04 	movi	r2,752
  80b9c8:	0080ba3c 	xorhi	r2,zero,744
  80b9cc:	0080bbf4 	movhi	r2,751
  80b9d0:	0080ba30 	cmpltui	r2,zero,744
  80b9d4:	0080bbf4 	movhi	r2,751
  80b9d8:	0080bbc8 	cmpgei	r2,zero,751
  80b9dc:	0080bbf4 	movhi	r2,751
  80b9e0:	0080ba30 	cmpltui	r2,zero,744
  80b9e4:	0080ba3c 	xorhi	r2,zero,744
  80b9e8:	0080ba3c 	xorhi	r2,zero,744
  80b9ec:	0080bbc8 	cmpgei	r2,zero,751
  80b9f0:	0080ba30 	cmpltui	r2,zero,744
  80b9f4:	0080ba20 	cmpeqi	r2,zero,744
  80b9f8:	0080ba20 	cmpeqi	r2,zero,744
  80b9fc:	0080ba20 	cmpeqi	r2,zero,744
  80ba00:	0080bf8c 	andi	r2,zero,766
  80ba04:	2404b03a 	or	r2,r4,r16
  80ba08:	10006c1e 	bne	r2,zero,80bbbc <__divdf3+0x2ec>
  80ba0c:	02400204 	movi	r9,8
  80ba10:	0021883a 	mov	r16,zero
  80ba14:	002b883a 	mov	r21,zero
  80ba18:	01400084 	movi	r5,2
  80ba1c:	003fca06 	br	80b948 <__alt_data_end+0xff80b948>
  80ba20:	8023883a 	mov	r17,r16
  80ba24:	a829883a 	mov	r20,r21
  80ba28:	4039883a 	mov	fp,r8
  80ba2c:	280f883a 	mov	r7,r5
  80ba30:	00800084 	movi	r2,2
  80ba34:	3881601e 	bne	r7,r2,80bfb8 <__divdf3+0x6e8>
  80ba38:	e027883a 	mov	r19,fp
  80ba3c:	9900004c 	andi	r4,r19,1
  80ba40:	0081ffc4 	movi	r2,2047
  80ba44:	0021883a 	mov	r16,zero
  80ba48:	002b883a 	mov	r21,zero
  80ba4c:	1004953a 	slli	r2,r2,20
  80ba50:	20c03fcc 	andi	r3,r4,255
  80ba54:	01400434 	movhi	r5,16
  80ba58:	297fffc4 	addi	r5,r5,-1
  80ba5c:	180697fa 	slli	r3,r3,31
  80ba60:	8160703a 	and	r16,r16,r5
  80ba64:	80a0b03a 	or	r16,r16,r2
  80ba68:	80c6b03a 	or	r3,r16,r3
  80ba6c:	a805883a 	mov	r2,r21
  80ba70:	dfc00f17 	ldw	ra,60(sp)
  80ba74:	df000e17 	ldw	fp,56(sp)
  80ba78:	ddc00d17 	ldw	r23,52(sp)
  80ba7c:	dd800c17 	ldw	r22,48(sp)
  80ba80:	dd400b17 	ldw	r21,44(sp)
  80ba84:	dd000a17 	ldw	r20,40(sp)
  80ba88:	dcc00917 	ldw	r19,36(sp)
  80ba8c:	dc800817 	ldw	r18,32(sp)
  80ba90:	dc400717 	ldw	r17,28(sp)
  80ba94:	dc000617 	ldw	r16,24(sp)
  80ba98:	dec01004 	addi	sp,sp,64
  80ba9c:	f800283a 	ret
  80baa0:	2404b03a 	or	r2,r4,r16
  80baa4:	2023883a 	mov	r17,r4
  80baa8:	10003f26 	beq	r2,zero,80bba8 <__divdf3+0x2d8>
  80baac:	80015e26 	beq	r16,zero,80c028 <__divdf3+0x758>
  80bab0:	8009883a 	mov	r4,r16
  80bab4:	d9800215 	stw	r6,8(sp)
  80bab8:	d9c00515 	stw	r7,20(sp)
  80babc:	da000415 	stw	r8,16(sp)
  80bac0:	08011a80 	call	8011a8 <__clzsi2>
  80bac4:	d9800217 	ldw	r6,8(sp)
  80bac8:	d9c00517 	ldw	r7,20(sp)
  80bacc:	da000417 	ldw	r8,16(sp)
  80bad0:	113ffd44 	addi	r4,r2,-11
  80bad4:	00c00704 	movi	r3,28
  80bad8:	19014f16 	blt	r3,r4,80c018 <__divdf3+0x748>
  80badc:	00c00744 	movi	r3,29
  80bae0:	157ffe04 	addi	r21,r2,-8
  80bae4:	1907c83a 	sub	r3,r3,r4
  80bae8:	8560983a 	sll	r16,r16,r21
  80baec:	88c6d83a 	srl	r3,r17,r3
  80baf0:	8d6a983a 	sll	r21,r17,r21
  80baf4:	1c20b03a 	or	r16,r3,r16
  80baf8:	1080fcc4 	addi	r2,r2,1011
  80bafc:	00a5c83a 	sub	r18,zero,r2
  80bb00:	0013883a 	mov	r9,zero
  80bb04:	000b883a 	mov	r5,zero
  80bb08:	003f8f06 	br	80b948 <__alt_data_end+0xff80b948>
  80bb0c:	3444b03a 	or	r2,r6,r17
  80bb10:	1000231e 	bne	r2,zero,80bba0 <__divdf3+0x2d0>
  80bb14:	0023883a 	mov	r17,zero
  80bb18:	0029883a 	mov	r20,zero
  80bb1c:	01c00084 	movi	r7,2
  80bb20:	003f9b06 	br	80b990 <__alt_data_end+0xff80b990>
  80bb24:	3444b03a 	or	r2,r6,r17
  80bb28:	10001926 	beq	r2,zero,80bb90 <__divdf3+0x2c0>
  80bb2c:	88014b26 	beq	r17,zero,80c05c <__divdf3+0x78c>
  80bb30:	8809883a 	mov	r4,r17
  80bb34:	d9400115 	stw	r5,4(sp)
  80bb38:	d9800215 	stw	r6,8(sp)
  80bb3c:	da000415 	stw	r8,16(sp)
  80bb40:	da400315 	stw	r9,12(sp)
  80bb44:	08011a80 	call	8011a8 <__clzsi2>
  80bb48:	d9400117 	ldw	r5,4(sp)
  80bb4c:	d9800217 	ldw	r6,8(sp)
  80bb50:	da000417 	ldw	r8,16(sp)
  80bb54:	da400317 	ldw	r9,12(sp)
  80bb58:	113ffd44 	addi	r4,r2,-11
  80bb5c:	00c00704 	movi	r3,28
  80bb60:	19013a16 	blt	r3,r4,80c04c <__divdf3+0x77c>
  80bb64:	00c00744 	movi	r3,29
  80bb68:	153ffe04 	addi	r20,r2,-8
  80bb6c:	1907c83a 	sub	r3,r3,r4
  80bb70:	8d22983a 	sll	r17,r17,r20
  80bb74:	30c6d83a 	srl	r3,r6,r3
  80bb78:	3528983a 	sll	r20,r6,r20
  80bb7c:	1c62b03a 	or	r17,r3,r17
  80bb80:	1080fcc4 	addi	r2,r2,1011
  80bb84:	0087c83a 	sub	r3,zero,r2
  80bb88:	000f883a 	mov	r7,zero
  80bb8c:	003f8006 	br	80b990 <__alt_data_end+0xff80b990>
  80bb90:	0023883a 	mov	r17,zero
  80bb94:	0029883a 	mov	r20,zero
  80bb98:	01c00044 	movi	r7,1
  80bb9c:	003f7c06 	br	80b990 <__alt_data_end+0xff80b990>
  80bba0:	01c000c4 	movi	r7,3
  80bba4:	003f7a06 	br	80b990 <__alt_data_end+0xff80b990>
  80bba8:	02400104 	movi	r9,4
  80bbac:	0021883a 	mov	r16,zero
  80bbb0:	002b883a 	mov	r21,zero
  80bbb4:	01400044 	movi	r5,1
  80bbb8:	003f6306 	br	80b948 <__alt_data_end+0xff80b948>
  80bbbc:	02400304 	movi	r9,12
  80bbc0:	014000c4 	movi	r5,3
  80bbc4:	003f6006 	br	80b948 <__alt_data_end+0xff80b948>
  80bbc8:	04000434 	movhi	r16,16
  80bbcc:	0009883a 	mov	r4,zero
  80bbd0:	843fffc4 	addi	r16,r16,-1
  80bbd4:	057fffc4 	movi	r21,-1
  80bbd8:	0081ffc4 	movi	r2,2047
  80bbdc:	003f9b06 	br	80ba4c <__alt_data_end+0xff80ba4c>
  80bbe0:	00c00044 	movi	r3,1
  80bbe4:	1887c83a 	sub	r3,r3,r2
  80bbe8:	01000e04 	movi	r4,56
  80bbec:	20c1530e 	bge	r4,r3,80c13c <__divdf3+0x86c>
  80bbf0:	9900004c 	andi	r4,r19,1
  80bbf4:	0005883a 	mov	r2,zero
  80bbf8:	0021883a 	mov	r16,zero
  80bbfc:	002b883a 	mov	r21,zero
  80bc00:	003f9206 	br	80ba4c <__alt_data_end+0xff80ba4c>
  80bc04:	8c012e36 	bltu	r17,r16,80c0c0 <__divdf3+0x7f0>
  80bc08:	84412c26 	beq	r16,r17,80c0bc <__divdf3+0x7ec>
  80bc0c:	a82f883a 	mov	r23,r21
  80bc10:	18ffffc4 	addi	r3,r3,-1
  80bc14:	002b883a 	mov	r21,zero
  80bc18:	a004d63a 	srli	r2,r20,24
  80bc1c:	8822923a 	slli	r17,r17,8
  80bc20:	a028923a 	slli	r20,r20,8
  80bc24:	8009883a 	mov	r4,r16
  80bc28:	88acb03a 	or	r22,r17,r2
  80bc2c:	dd000015 	stw	r20,0(sp)
  80bc30:	b028d43a 	srli	r20,r22,16
  80bc34:	d8c00215 	stw	r3,8(sp)
  80bc38:	b4bfffcc 	andi	r18,r22,65535
  80bc3c:	a00b883a 	mov	r5,r20
  80bc40:	080b7ec0 	call	80b7ec <__udivsi3>
  80bc44:	100b883a 	mov	r5,r2
  80bc48:	9009883a 	mov	r4,r18
  80bc4c:	1023883a 	mov	r17,r2
  80bc50:	080b8a80 	call	80b8a8 <__mulsi3>
  80bc54:	8009883a 	mov	r4,r16
  80bc58:	a00b883a 	mov	r5,r20
  80bc5c:	1039883a 	mov	fp,r2
  80bc60:	080b8500 	call	80b850 <__umodsi3>
  80bc64:	1004943a 	slli	r2,r2,16
  80bc68:	b808d43a 	srli	r4,r23,16
  80bc6c:	d8c00217 	ldw	r3,8(sp)
  80bc70:	2084b03a 	or	r2,r4,r2
  80bc74:	1700062e 	bgeu	r2,fp,80bc90 <__divdf3+0x3c0>
  80bc78:	1585883a 	add	r2,r2,r22
  80bc7c:	893fffc4 	addi	r4,r17,-1
  80bc80:	15811d36 	bltu	r2,r22,80c0f8 <__divdf3+0x828>
  80bc84:	17011c2e 	bgeu	r2,fp,80c0f8 <__divdf3+0x828>
  80bc88:	8c7fff84 	addi	r17,r17,-2
  80bc8c:	1585883a 	add	r2,r2,r22
  80bc90:	1739c83a 	sub	fp,r2,fp
  80bc94:	a00b883a 	mov	r5,r20
  80bc98:	e009883a 	mov	r4,fp
  80bc9c:	d8c00215 	stw	r3,8(sp)
  80bca0:	080b7ec0 	call	80b7ec <__udivsi3>
  80bca4:	100b883a 	mov	r5,r2
  80bca8:	9009883a 	mov	r4,r18
  80bcac:	1021883a 	mov	r16,r2
  80bcb0:	080b8a80 	call	80b8a8 <__mulsi3>
  80bcb4:	a00b883a 	mov	r5,r20
  80bcb8:	e009883a 	mov	r4,fp
  80bcbc:	d8800415 	stw	r2,16(sp)
  80bcc0:	080b8500 	call	80b850 <__umodsi3>
  80bcc4:	1004943a 	slli	r2,r2,16
  80bcc8:	da000417 	ldw	r8,16(sp)
  80bccc:	bdffffcc 	andi	r23,r23,65535
  80bcd0:	b884b03a 	or	r2,r23,r2
  80bcd4:	d8c00217 	ldw	r3,8(sp)
  80bcd8:	1200062e 	bgeu	r2,r8,80bcf4 <__divdf3+0x424>
  80bcdc:	1585883a 	add	r2,r2,r22
  80bce0:	813fffc4 	addi	r4,r16,-1
  80bce4:	15810236 	bltu	r2,r22,80c0f0 <__divdf3+0x820>
  80bce8:	1201012e 	bgeu	r2,r8,80c0f0 <__divdf3+0x820>
  80bcec:	843fff84 	addi	r16,r16,-2
  80bcf0:	1585883a 	add	r2,r2,r22
  80bcf4:	8822943a 	slli	r17,r17,16
  80bcf8:	d9800017 	ldw	r6,0(sp)
  80bcfc:	1211c83a 	sub	r8,r2,r8
  80bd00:	8c22b03a 	or	r17,r17,r16
  80bd04:	373fffcc 	andi	fp,r6,65535
  80bd08:	8abfffcc 	andi	r10,r17,65535
  80bd0c:	8820d43a 	srli	r16,r17,16
  80bd10:	5009883a 	mov	r4,r10
  80bd14:	e00b883a 	mov	r5,fp
  80bd18:	302ed43a 	srli	r23,r6,16
  80bd1c:	d8c00215 	stw	r3,8(sp)
  80bd20:	da000415 	stw	r8,16(sp)
  80bd24:	da800115 	stw	r10,4(sp)
  80bd28:	080b8a80 	call	80b8a8 <__mulsi3>
  80bd2c:	800b883a 	mov	r5,r16
  80bd30:	e009883a 	mov	r4,fp
  80bd34:	d8800515 	stw	r2,20(sp)
  80bd38:	080b8a80 	call	80b8a8 <__mulsi3>
  80bd3c:	8009883a 	mov	r4,r16
  80bd40:	b80b883a 	mov	r5,r23
  80bd44:	d8800315 	stw	r2,12(sp)
  80bd48:	080b8a80 	call	80b8a8 <__mulsi3>
  80bd4c:	da800117 	ldw	r10,4(sp)
  80bd50:	b80b883a 	mov	r5,r23
  80bd54:	1021883a 	mov	r16,r2
  80bd58:	5009883a 	mov	r4,r10
  80bd5c:	080b8a80 	call	80b8a8 <__mulsi3>
  80bd60:	d9c00517 	ldw	r7,20(sp)
  80bd64:	da400317 	ldw	r9,12(sp)
  80bd68:	d8c00217 	ldw	r3,8(sp)
  80bd6c:	3808d43a 	srli	r4,r7,16
  80bd70:	1245883a 	add	r2,r2,r9
  80bd74:	da000417 	ldw	r8,16(sp)
  80bd78:	2085883a 	add	r2,r4,r2
  80bd7c:	1240022e 	bgeu	r2,r9,80bd88 <__divdf3+0x4b8>
  80bd80:	01000074 	movhi	r4,1
  80bd84:	8121883a 	add	r16,r16,r4
  80bd88:	1008d43a 	srli	r4,r2,16
  80bd8c:	1004943a 	slli	r2,r2,16
  80bd90:	39ffffcc 	andi	r7,r7,65535
  80bd94:	2409883a 	add	r4,r4,r16
  80bd98:	11c5883a 	add	r2,r2,r7
  80bd9c:	4100bb36 	bltu	r8,r4,80c08c <__divdf3+0x7bc>
  80bda0:	4100d726 	beq	r8,r4,80c100 <__divdf3+0x830>
  80bda4:	4109c83a 	sub	r4,r8,r4
  80bda8:	a8a1c83a 	sub	r16,r21,r2
  80bdac:	ac2b803a 	cmpltu	r21,r21,r16
  80bdb0:	256bc83a 	sub	r21,r4,r21
  80bdb4:	b540d926 	beq	r22,r21,80c11c <__divdf3+0x84c>
  80bdb8:	a00b883a 	mov	r5,r20
  80bdbc:	a809883a 	mov	r4,r21
  80bdc0:	d8c00215 	stw	r3,8(sp)
  80bdc4:	080b7ec0 	call	80b7ec <__udivsi3>
  80bdc8:	100b883a 	mov	r5,r2
  80bdcc:	9009883a 	mov	r4,r18
  80bdd0:	d8800515 	stw	r2,20(sp)
  80bdd4:	080b8a80 	call	80b8a8 <__mulsi3>
  80bdd8:	a809883a 	mov	r4,r21
  80bddc:	a00b883a 	mov	r5,r20
  80bde0:	d8800415 	stw	r2,16(sp)
  80bde4:	080b8500 	call	80b850 <__umodsi3>
  80bde8:	1004943a 	slli	r2,r2,16
  80bdec:	8008d43a 	srli	r4,r16,16
  80bdf0:	da000417 	ldw	r8,16(sp)
  80bdf4:	d8c00217 	ldw	r3,8(sp)
  80bdf8:	2084b03a 	or	r2,r4,r2
  80bdfc:	d9c00517 	ldw	r7,20(sp)
  80be00:	1200062e 	bgeu	r2,r8,80be1c <__divdf3+0x54c>
  80be04:	1585883a 	add	r2,r2,r22
  80be08:	393fffc4 	addi	r4,r7,-1
  80be0c:	1580c536 	bltu	r2,r22,80c124 <__divdf3+0x854>
  80be10:	1200c42e 	bgeu	r2,r8,80c124 <__divdf3+0x854>
  80be14:	39ffff84 	addi	r7,r7,-2
  80be18:	1585883a 	add	r2,r2,r22
  80be1c:	122bc83a 	sub	r21,r2,r8
  80be20:	a00b883a 	mov	r5,r20
  80be24:	a809883a 	mov	r4,r21
  80be28:	d8c00215 	stw	r3,8(sp)
  80be2c:	d9c00515 	stw	r7,20(sp)
  80be30:	080b7ec0 	call	80b7ec <__udivsi3>
  80be34:	9009883a 	mov	r4,r18
  80be38:	100b883a 	mov	r5,r2
  80be3c:	d8800415 	stw	r2,16(sp)
  80be40:	080b8a80 	call	80b8a8 <__mulsi3>
  80be44:	a809883a 	mov	r4,r21
  80be48:	a00b883a 	mov	r5,r20
  80be4c:	1025883a 	mov	r18,r2
  80be50:	080b8500 	call	80b850 <__umodsi3>
  80be54:	1004943a 	slli	r2,r2,16
  80be58:	813fffcc 	andi	r4,r16,65535
  80be5c:	d8c00217 	ldw	r3,8(sp)
  80be60:	20a0b03a 	or	r16,r4,r2
  80be64:	d9c00517 	ldw	r7,20(sp)
  80be68:	da000417 	ldw	r8,16(sp)
  80be6c:	8480062e 	bgeu	r16,r18,80be88 <__divdf3+0x5b8>
  80be70:	85a1883a 	add	r16,r16,r22
  80be74:	40bfffc4 	addi	r2,r8,-1
  80be78:	8580ac36 	bltu	r16,r22,80c12c <__divdf3+0x85c>
  80be7c:	8480ab2e 	bgeu	r16,r18,80c12c <__divdf3+0x85c>
  80be80:	423fff84 	addi	r8,r8,-2
  80be84:	85a1883a 	add	r16,r16,r22
  80be88:	3804943a 	slli	r2,r7,16
  80be8c:	84a1c83a 	sub	r16,r16,r18
  80be90:	e009883a 	mov	r4,fp
  80be94:	1228b03a 	or	r20,r2,r8
  80be98:	a1ffffcc 	andi	r7,r20,65535
  80be9c:	a024d43a 	srli	r18,r20,16
  80bea0:	380b883a 	mov	r5,r7
  80bea4:	d8c00215 	stw	r3,8(sp)
  80bea8:	d9c00515 	stw	r7,20(sp)
  80beac:	080b8a80 	call	80b8a8 <__mulsi3>
  80beb0:	900b883a 	mov	r5,r18
  80beb4:	e009883a 	mov	r4,fp
  80beb8:	102b883a 	mov	r21,r2
  80bebc:	080b8a80 	call	80b8a8 <__mulsi3>
  80bec0:	900b883a 	mov	r5,r18
  80bec4:	b809883a 	mov	r4,r23
  80bec8:	1039883a 	mov	fp,r2
  80becc:	080b8a80 	call	80b8a8 <__mulsi3>
  80bed0:	d9c00517 	ldw	r7,20(sp)
  80bed4:	b80b883a 	mov	r5,r23
  80bed8:	1025883a 	mov	r18,r2
  80bedc:	3809883a 	mov	r4,r7
  80bee0:	080b8a80 	call	80b8a8 <__mulsi3>
  80bee4:	a808d43a 	srli	r4,r21,16
  80bee8:	1705883a 	add	r2,r2,fp
  80beec:	d8c00217 	ldw	r3,8(sp)
  80bef0:	2085883a 	add	r2,r4,r2
  80bef4:	1700022e 	bgeu	r2,fp,80bf00 <__divdf3+0x630>
  80bef8:	01000074 	movhi	r4,1
  80befc:	9125883a 	add	r18,r18,r4
  80bf00:	1008d43a 	srli	r4,r2,16
  80bf04:	1004943a 	slli	r2,r2,16
  80bf08:	ad7fffcc 	andi	r21,r21,65535
  80bf0c:	2489883a 	add	r4,r4,r18
  80bf10:	1545883a 	add	r2,r2,r21
  80bf14:	81003836 	bltu	r16,r4,80bff8 <__divdf3+0x728>
  80bf18:	81003626 	beq	r16,r4,80bff4 <__divdf3+0x724>
  80bf1c:	a5000054 	ori	r20,r20,1
  80bf20:	1880ffc4 	addi	r2,r3,1023
  80bf24:	00bf2e0e 	bge	zero,r2,80bbe0 <__alt_data_end+0xff80bbe0>
  80bf28:	a10001cc 	andi	r4,r20,7
  80bf2c:	20000726 	beq	r4,zero,80bf4c <__divdf3+0x67c>
  80bf30:	a10003cc 	andi	r4,r20,15
  80bf34:	01400104 	movi	r5,4
  80bf38:	21400426 	beq	r4,r5,80bf4c <__divdf3+0x67c>
  80bf3c:	a149883a 	add	r4,r20,r5
  80bf40:	2529803a 	cmpltu	r20,r4,r20
  80bf44:	8d23883a 	add	r17,r17,r20
  80bf48:	2029883a 	mov	r20,r4
  80bf4c:	8900402c 	andhi	r4,r17,256
  80bf50:	20000426 	beq	r4,zero,80bf64 <__divdf3+0x694>
  80bf54:	18810004 	addi	r2,r3,1024
  80bf58:	00ffc034 	movhi	r3,65280
  80bf5c:	18ffffc4 	addi	r3,r3,-1
  80bf60:	88e2703a 	and	r17,r17,r3
  80bf64:	00c1ff84 	movi	r3,2046
  80bf68:	18beb416 	blt	r3,r2,80ba3c <__alt_data_end+0xff80ba3c>
  80bf6c:	a028d0fa 	srli	r20,r20,3
  80bf70:	882a977a 	slli	r21,r17,29
  80bf74:	8820927a 	slli	r16,r17,9
  80bf78:	1081ffcc 	andi	r2,r2,2047
  80bf7c:	ad2ab03a 	or	r21,r21,r20
  80bf80:	8020d33a 	srli	r16,r16,12
  80bf84:	9900004c 	andi	r4,r19,1
  80bf88:	003eb006 	br	80ba4c <__alt_data_end+0xff80ba4c>
  80bf8c:	8080022c 	andhi	r2,r16,8
  80bf90:	10001226 	beq	r2,zero,80bfdc <__divdf3+0x70c>
  80bf94:	8880022c 	andhi	r2,r17,8
  80bf98:	1000101e 	bne	r2,zero,80bfdc <__divdf3+0x70c>
  80bf9c:	00800434 	movhi	r2,16
  80bfa0:	8c000234 	orhi	r16,r17,8
  80bfa4:	10bfffc4 	addi	r2,r2,-1
  80bfa8:	b809883a 	mov	r4,r23
  80bfac:	80a0703a 	and	r16,r16,r2
  80bfb0:	a02b883a 	mov	r21,r20
  80bfb4:	003f0806 	br	80bbd8 <__alt_data_end+0xff80bbd8>
  80bfb8:	008000c4 	movi	r2,3
  80bfbc:	3880b126 	beq	r7,r2,80c284 <__divdf3+0x9b4>
  80bfc0:	00800044 	movi	r2,1
  80bfc4:	38805b1e 	bne	r7,r2,80c134 <__divdf3+0x864>
  80bfc8:	e009883a 	mov	r4,fp
  80bfcc:	0005883a 	mov	r2,zero
  80bfd0:	0021883a 	mov	r16,zero
  80bfd4:	002b883a 	mov	r21,zero
  80bfd8:	003e9c06 	br	80ba4c <__alt_data_end+0xff80ba4c>
  80bfdc:	00800434 	movhi	r2,16
  80bfe0:	84000234 	orhi	r16,r16,8
  80bfe4:	10bfffc4 	addi	r2,r2,-1
  80bfe8:	b009883a 	mov	r4,r22
  80bfec:	80a0703a 	and	r16,r16,r2
  80bff0:	003ef906 	br	80bbd8 <__alt_data_end+0xff80bbd8>
  80bff4:	103fca26 	beq	r2,zero,80bf20 <__alt_data_end+0xff80bf20>
  80bff8:	b421883a 	add	r16,r22,r16
  80bffc:	a17fffc4 	addi	r5,r20,-1
  80c000:	8580422e 	bgeu	r16,r22,80c10c <__divdf3+0x83c>
  80c004:	2829883a 	mov	r20,r5
  80c008:	813fc41e 	bne	r16,r4,80bf1c <__alt_data_end+0xff80bf1c>
  80c00c:	d9800017 	ldw	r6,0(sp)
  80c010:	30bfc21e 	bne	r6,r2,80bf1c <__alt_data_end+0xff80bf1c>
  80c014:	003fc206 	br	80bf20 <__alt_data_end+0xff80bf20>
  80c018:	143ff604 	addi	r16,r2,-40
  80c01c:	8c20983a 	sll	r16,r17,r16
  80c020:	002b883a 	mov	r21,zero
  80c024:	003eb406 	br	80baf8 <__alt_data_end+0xff80baf8>
  80c028:	d9800215 	stw	r6,8(sp)
  80c02c:	d9c00515 	stw	r7,20(sp)
  80c030:	da000415 	stw	r8,16(sp)
  80c034:	08011a80 	call	8011a8 <__clzsi2>
  80c038:	10800804 	addi	r2,r2,32
  80c03c:	da000417 	ldw	r8,16(sp)
  80c040:	d9c00517 	ldw	r7,20(sp)
  80c044:	d9800217 	ldw	r6,8(sp)
  80c048:	003ea106 	br	80bad0 <__alt_data_end+0xff80bad0>
  80c04c:	147ff604 	addi	r17,r2,-40
  80c050:	3462983a 	sll	r17,r6,r17
  80c054:	0029883a 	mov	r20,zero
  80c058:	003ec906 	br	80bb80 <__alt_data_end+0xff80bb80>
  80c05c:	3009883a 	mov	r4,r6
  80c060:	d9400115 	stw	r5,4(sp)
  80c064:	d9800215 	stw	r6,8(sp)
  80c068:	da000415 	stw	r8,16(sp)
  80c06c:	da400315 	stw	r9,12(sp)
  80c070:	08011a80 	call	8011a8 <__clzsi2>
  80c074:	10800804 	addi	r2,r2,32
  80c078:	da400317 	ldw	r9,12(sp)
  80c07c:	da000417 	ldw	r8,16(sp)
  80c080:	d9800217 	ldw	r6,8(sp)
  80c084:	d9400117 	ldw	r5,4(sp)
  80c088:	003eb306 	br	80bb58 <__alt_data_end+0xff80bb58>
  80c08c:	d9800017 	ldw	r6,0(sp)
  80c090:	a9ab883a 	add	r21,r21,r6
  80c094:	a98b803a 	cmpltu	r5,r21,r6
  80c098:	2d8b883a 	add	r5,r5,r22
  80c09c:	2a11883a 	add	r8,r5,r8
  80c0a0:	897fffc4 	addi	r5,r17,-1
  80c0a4:	b2000c2e 	bgeu	r22,r8,80c0d8 <__divdf3+0x808>
  80c0a8:	41003f36 	bltu	r8,r4,80c1a8 <__divdf3+0x8d8>
  80c0ac:	22006c26 	beq	r4,r8,80c260 <__divdf3+0x990>
  80c0b0:	4109c83a 	sub	r4,r8,r4
  80c0b4:	2823883a 	mov	r17,r5
  80c0b8:	003f3b06 	br	80bda8 <__alt_data_end+0xff80bda8>
  80c0bc:	ad3ed336 	bltu	r21,r20,80bc0c <__alt_data_end+0xff80bc0c>
  80c0c0:	a804d07a 	srli	r2,r21,1
  80c0c4:	802e97fa 	slli	r23,r16,31
  80c0c8:	a82a97fa 	slli	r21,r21,31
  80c0cc:	8020d07a 	srli	r16,r16,1
  80c0d0:	b8aeb03a 	or	r23,r23,r2
  80c0d4:	003ed006 	br	80bc18 <__alt_data_end+0xff80bc18>
  80c0d8:	b23ff51e 	bne	r22,r8,80c0b0 <__alt_data_end+0xff80c0b0>
  80c0dc:	d9800017 	ldw	r6,0(sp)
  80c0e0:	a9bff12e 	bgeu	r21,r6,80c0a8 <__alt_data_end+0xff80c0a8>
  80c0e4:	b109c83a 	sub	r4,r22,r4
  80c0e8:	2823883a 	mov	r17,r5
  80c0ec:	003f2e06 	br	80bda8 <__alt_data_end+0xff80bda8>
  80c0f0:	2021883a 	mov	r16,r4
  80c0f4:	003eff06 	br	80bcf4 <__alt_data_end+0xff80bcf4>
  80c0f8:	2023883a 	mov	r17,r4
  80c0fc:	003ee406 	br	80bc90 <__alt_data_end+0xff80bc90>
  80c100:	a8bfe236 	bltu	r21,r2,80c08c <__alt_data_end+0xff80c08c>
  80c104:	0009883a 	mov	r4,zero
  80c108:	003f2706 	br	80bda8 <__alt_data_end+0xff80bda8>
  80c10c:	81002d36 	bltu	r16,r4,80c1c4 <__divdf3+0x8f4>
  80c110:	24005626 	beq	r4,r16,80c26c <__divdf3+0x99c>
  80c114:	2829883a 	mov	r20,r5
  80c118:	003f8006 	br	80bf1c <__alt_data_end+0xff80bf1c>
  80c11c:	053fffc4 	movi	r20,-1
  80c120:	003f7f06 	br	80bf20 <__alt_data_end+0xff80bf20>
  80c124:	200f883a 	mov	r7,r4
  80c128:	003f3c06 	br	80be1c <__alt_data_end+0xff80be1c>
  80c12c:	1011883a 	mov	r8,r2
  80c130:	003f5506 	br	80be88 <__alt_data_end+0xff80be88>
  80c134:	e027883a 	mov	r19,fp
  80c138:	003f7906 	br	80bf20 <__alt_data_end+0xff80bf20>
  80c13c:	010007c4 	movi	r4,31
  80c140:	20c02816 	blt	r4,r3,80c1e4 <__divdf3+0x914>
  80c144:	00800804 	movi	r2,32
  80c148:	10c5c83a 	sub	r2,r2,r3
  80c14c:	888a983a 	sll	r5,r17,r2
  80c150:	a0c8d83a 	srl	r4,r20,r3
  80c154:	a084983a 	sll	r2,r20,r2
  80c158:	88e2d83a 	srl	r17,r17,r3
  80c15c:	2906b03a 	or	r3,r5,r4
  80c160:	1004c03a 	cmpne	r2,r2,zero
  80c164:	1886b03a 	or	r3,r3,r2
  80c168:	188001cc 	andi	r2,r3,7
  80c16c:	10000726 	beq	r2,zero,80c18c <__divdf3+0x8bc>
  80c170:	188003cc 	andi	r2,r3,15
  80c174:	01000104 	movi	r4,4
  80c178:	11000426 	beq	r2,r4,80c18c <__divdf3+0x8bc>
  80c17c:	1805883a 	mov	r2,r3
  80c180:	10c00104 	addi	r3,r2,4
  80c184:	1885803a 	cmpltu	r2,r3,r2
  80c188:	88a3883a 	add	r17,r17,r2
  80c18c:	8880202c 	andhi	r2,r17,128
  80c190:	10002926 	beq	r2,zero,80c238 <__divdf3+0x968>
  80c194:	9900004c 	andi	r4,r19,1
  80c198:	00800044 	movi	r2,1
  80c19c:	0021883a 	mov	r16,zero
  80c1a0:	002b883a 	mov	r21,zero
  80c1a4:	003e2906 	br	80ba4c <__alt_data_end+0xff80ba4c>
  80c1a8:	d9800017 	ldw	r6,0(sp)
  80c1ac:	8c7fff84 	addi	r17,r17,-2
  80c1b0:	a9ab883a 	add	r21,r21,r6
  80c1b4:	a98b803a 	cmpltu	r5,r21,r6
  80c1b8:	2d8b883a 	add	r5,r5,r22
  80c1bc:	2a11883a 	add	r8,r5,r8
  80c1c0:	003ef806 	br	80bda4 <__alt_data_end+0xff80bda4>
  80c1c4:	d9800017 	ldw	r6,0(sp)
  80c1c8:	318f883a 	add	r7,r6,r6
  80c1cc:	398b803a 	cmpltu	r5,r7,r6
  80c1d0:	2d8d883a 	add	r6,r5,r22
  80c1d4:	81a1883a 	add	r16,r16,r6
  80c1d8:	a17fff84 	addi	r5,r20,-2
  80c1dc:	d9c00015 	stw	r7,0(sp)
  80c1e0:	003f8806 	br	80c004 <__alt_data_end+0xff80c004>
  80c1e4:	013ff844 	movi	r4,-31
  80c1e8:	2085c83a 	sub	r2,r4,r2
  80c1ec:	8888d83a 	srl	r4,r17,r2
  80c1f0:	00800804 	movi	r2,32
  80c1f4:	18802126 	beq	r3,r2,80c27c <__divdf3+0x9ac>
  80c1f8:	04001004 	movi	r16,64
  80c1fc:	80c7c83a 	sub	r3,r16,r3
  80c200:	88e0983a 	sll	r16,r17,r3
  80c204:	8504b03a 	or	r2,r16,r20
  80c208:	1004c03a 	cmpne	r2,r2,zero
  80c20c:	2084b03a 	or	r2,r4,r2
  80c210:	144001cc 	andi	r17,r2,7
  80c214:	88000d1e 	bne	r17,zero,80c24c <__divdf3+0x97c>
  80c218:	0021883a 	mov	r16,zero
  80c21c:	102ad0fa 	srli	r21,r2,3
  80c220:	9900004c 	andi	r4,r19,1
  80c224:	0005883a 	mov	r2,zero
  80c228:	ac6ab03a 	or	r21,r21,r17
  80c22c:	003e0706 	br	80ba4c <__alt_data_end+0xff80ba4c>
  80c230:	1007883a 	mov	r3,r2
  80c234:	0023883a 	mov	r17,zero
  80c238:	8820927a 	slli	r16,r17,9
  80c23c:	1805883a 	mov	r2,r3
  80c240:	8822977a 	slli	r17,r17,29
  80c244:	8020d33a 	srli	r16,r16,12
  80c248:	003ff406 	br	80c21c <__alt_data_end+0xff80c21c>
  80c24c:	10c003cc 	andi	r3,r2,15
  80c250:	01000104 	movi	r4,4
  80c254:	193ff626 	beq	r3,r4,80c230 <__alt_data_end+0xff80c230>
  80c258:	0023883a 	mov	r17,zero
  80c25c:	003fc806 	br	80c180 <__alt_data_end+0xff80c180>
  80c260:	a8bfd136 	bltu	r21,r2,80c1a8 <__alt_data_end+0xff80c1a8>
  80c264:	2823883a 	mov	r17,r5
  80c268:	003fa606 	br	80c104 <__alt_data_end+0xff80c104>
  80c26c:	d9800017 	ldw	r6,0(sp)
  80c270:	30bfd436 	bltu	r6,r2,80c1c4 <__alt_data_end+0xff80c1c4>
  80c274:	2829883a 	mov	r20,r5
  80c278:	003f6406 	br	80c00c <__alt_data_end+0xff80c00c>
  80c27c:	0021883a 	mov	r16,zero
  80c280:	003fe006 	br	80c204 <__alt_data_end+0xff80c204>
  80c284:	00800434 	movhi	r2,16
  80c288:	8c000234 	orhi	r16,r17,8
  80c28c:	10bfffc4 	addi	r2,r2,-1
  80c290:	e009883a 	mov	r4,fp
  80c294:	80a0703a 	and	r16,r16,r2
  80c298:	a02b883a 	mov	r21,r20
  80c29c:	003e4e06 	br	80bbd8 <__alt_data_end+0xff80bbd8>

0080c2a0 <__eqdf2>:
  80c2a0:	2804d53a 	srli	r2,r5,20
  80c2a4:	3806d53a 	srli	r3,r7,20
  80c2a8:	02000434 	movhi	r8,16
  80c2ac:	423fffc4 	addi	r8,r8,-1
  80c2b0:	1081ffcc 	andi	r2,r2,2047
  80c2b4:	0281ffc4 	movi	r10,2047
  80c2b8:	2a12703a 	and	r9,r5,r8
  80c2bc:	18c1ffcc 	andi	r3,r3,2047
  80c2c0:	3a10703a 	and	r8,r7,r8
  80c2c4:	280ad7fa 	srli	r5,r5,31
  80c2c8:	380ed7fa 	srli	r7,r7,31
  80c2cc:	12801026 	beq	r2,r10,80c310 <__eqdf2+0x70>
  80c2d0:	0281ffc4 	movi	r10,2047
  80c2d4:	1a800a26 	beq	r3,r10,80c300 <__eqdf2+0x60>
  80c2d8:	10c00226 	beq	r2,r3,80c2e4 <__eqdf2+0x44>
  80c2dc:	00800044 	movi	r2,1
  80c2e0:	f800283a 	ret
  80c2e4:	4a3ffd1e 	bne	r9,r8,80c2dc <__alt_data_end+0xff80c2dc>
  80c2e8:	21bffc1e 	bne	r4,r6,80c2dc <__alt_data_end+0xff80c2dc>
  80c2ec:	29c00c26 	beq	r5,r7,80c320 <__eqdf2+0x80>
  80c2f0:	103ffa1e 	bne	r2,zero,80c2dc <__alt_data_end+0xff80c2dc>
  80c2f4:	2244b03a 	or	r2,r4,r9
  80c2f8:	1004c03a 	cmpne	r2,r2,zero
  80c2fc:	f800283a 	ret
  80c300:	3214b03a 	or	r10,r6,r8
  80c304:	503ff426 	beq	r10,zero,80c2d8 <__alt_data_end+0xff80c2d8>
  80c308:	00800044 	movi	r2,1
  80c30c:	f800283a 	ret
  80c310:	2254b03a 	or	r10,r4,r9
  80c314:	503fee26 	beq	r10,zero,80c2d0 <__alt_data_end+0xff80c2d0>
  80c318:	00800044 	movi	r2,1
  80c31c:	f800283a 	ret
  80c320:	0005883a 	mov	r2,zero
  80c324:	f800283a 	ret

0080c328 <__gedf2>:
  80c328:	2804d53a 	srli	r2,r5,20
  80c32c:	3806d53a 	srli	r3,r7,20
  80c330:	02000434 	movhi	r8,16
  80c334:	423fffc4 	addi	r8,r8,-1
  80c338:	1081ffcc 	andi	r2,r2,2047
  80c33c:	0241ffc4 	movi	r9,2047
  80c340:	2a14703a 	and	r10,r5,r8
  80c344:	18c1ffcc 	andi	r3,r3,2047
  80c348:	3a10703a 	and	r8,r7,r8
  80c34c:	280ad7fa 	srli	r5,r5,31
  80c350:	380ed7fa 	srli	r7,r7,31
  80c354:	12401d26 	beq	r2,r9,80c3cc <__gedf2+0xa4>
  80c358:	0241ffc4 	movi	r9,2047
  80c35c:	1a401226 	beq	r3,r9,80c3a8 <__gedf2+0x80>
  80c360:	1000081e 	bne	r2,zero,80c384 <__gedf2+0x5c>
  80c364:	2296b03a 	or	r11,r4,r10
  80c368:	5813003a 	cmpeq	r9,r11,zero
  80c36c:	1800091e 	bne	r3,zero,80c394 <__gedf2+0x6c>
  80c370:	3218b03a 	or	r12,r6,r8
  80c374:	6000071e 	bne	r12,zero,80c394 <__gedf2+0x6c>
  80c378:	0005883a 	mov	r2,zero
  80c37c:	5800101e 	bne	r11,zero,80c3c0 <__gedf2+0x98>
  80c380:	f800283a 	ret
  80c384:	18000c1e 	bne	r3,zero,80c3b8 <__gedf2+0x90>
  80c388:	3212b03a 	or	r9,r6,r8
  80c38c:	48000c26 	beq	r9,zero,80c3c0 <__gedf2+0x98>
  80c390:	0013883a 	mov	r9,zero
  80c394:	39c03fcc 	andi	r7,r7,255
  80c398:	48000826 	beq	r9,zero,80c3bc <__gedf2+0x94>
  80c39c:	38000926 	beq	r7,zero,80c3c4 <__gedf2+0x9c>
  80c3a0:	00800044 	movi	r2,1
  80c3a4:	f800283a 	ret
  80c3a8:	3212b03a 	or	r9,r6,r8
  80c3ac:	483fec26 	beq	r9,zero,80c360 <__alt_data_end+0xff80c360>
  80c3b0:	00bfff84 	movi	r2,-2
  80c3b4:	f800283a 	ret
  80c3b8:	39c03fcc 	andi	r7,r7,255
  80c3bc:	29c00626 	beq	r5,r7,80c3d8 <__gedf2+0xb0>
  80c3c0:	283ff726 	beq	r5,zero,80c3a0 <__alt_data_end+0xff80c3a0>
  80c3c4:	00bfffc4 	movi	r2,-1
  80c3c8:	f800283a 	ret
  80c3cc:	2292b03a 	or	r9,r4,r10
  80c3d0:	483fe126 	beq	r9,zero,80c358 <__alt_data_end+0xff80c358>
  80c3d4:	003ff606 	br	80c3b0 <__alt_data_end+0xff80c3b0>
  80c3d8:	18bff916 	blt	r3,r2,80c3c0 <__alt_data_end+0xff80c3c0>
  80c3dc:	10c00316 	blt	r2,r3,80c3ec <__gedf2+0xc4>
  80c3e0:	42bff736 	bltu	r8,r10,80c3c0 <__alt_data_end+0xff80c3c0>
  80c3e4:	52000326 	beq	r10,r8,80c3f4 <__gedf2+0xcc>
  80c3e8:	5200042e 	bgeu	r10,r8,80c3fc <__gedf2+0xd4>
  80c3ec:	283fec1e 	bne	r5,zero,80c3a0 <__alt_data_end+0xff80c3a0>
  80c3f0:	003ff406 	br	80c3c4 <__alt_data_end+0xff80c3c4>
  80c3f4:	313ff236 	bltu	r6,r4,80c3c0 <__alt_data_end+0xff80c3c0>
  80c3f8:	21bffc36 	bltu	r4,r6,80c3ec <__alt_data_end+0xff80c3ec>
  80c3fc:	0005883a 	mov	r2,zero
  80c400:	f800283a 	ret

0080c404 <__ledf2>:
  80c404:	2804d53a 	srli	r2,r5,20
  80c408:	3810d53a 	srli	r8,r7,20
  80c40c:	00c00434 	movhi	r3,16
  80c410:	18ffffc4 	addi	r3,r3,-1
  80c414:	1081ffcc 	andi	r2,r2,2047
  80c418:	0241ffc4 	movi	r9,2047
  80c41c:	28d4703a 	and	r10,r5,r3
  80c420:	4201ffcc 	andi	r8,r8,2047
  80c424:	38c6703a 	and	r3,r7,r3
  80c428:	280ad7fa 	srli	r5,r5,31
  80c42c:	380ed7fa 	srli	r7,r7,31
  80c430:	12401f26 	beq	r2,r9,80c4b0 <__ledf2+0xac>
  80c434:	0241ffc4 	movi	r9,2047
  80c438:	42401426 	beq	r8,r9,80c48c <__ledf2+0x88>
  80c43c:	1000091e 	bne	r2,zero,80c464 <__ledf2+0x60>
  80c440:	2296b03a 	or	r11,r4,r10
  80c444:	5813003a 	cmpeq	r9,r11,zero
  80c448:	29403fcc 	andi	r5,r5,255
  80c44c:	40000a1e 	bne	r8,zero,80c478 <__ledf2+0x74>
  80c450:	30d8b03a 	or	r12,r6,r3
  80c454:	6000081e 	bne	r12,zero,80c478 <__ledf2+0x74>
  80c458:	0005883a 	mov	r2,zero
  80c45c:	5800111e 	bne	r11,zero,80c4a4 <__ledf2+0xa0>
  80c460:	f800283a 	ret
  80c464:	29403fcc 	andi	r5,r5,255
  80c468:	40000c1e 	bne	r8,zero,80c49c <__ledf2+0x98>
  80c46c:	30d2b03a 	or	r9,r6,r3
  80c470:	48000c26 	beq	r9,zero,80c4a4 <__ledf2+0xa0>
  80c474:	0013883a 	mov	r9,zero
  80c478:	39c03fcc 	andi	r7,r7,255
  80c47c:	48000826 	beq	r9,zero,80c4a0 <__ledf2+0x9c>
  80c480:	38001126 	beq	r7,zero,80c4c8 <__ledf2+0xc4>
  80c484:	00800044 	movi	r2,1
  80c488:	f800283a 	ret
  80c48c:	30d2b03a 	or	r9,r6,r3
  80c490:	483fea26 	beq	r9,zero,80c43c <__alt_data_end+0xff80c43c>
  80c494:	00800084 	movi	r2,2
  80c498:	f800283a 	ret
  80c49c:	39c03fcc 	andi	r7,r7,255
  80c4a0:	39400726 	beq	r7,r5,80c4c0 <__ledf2+0xbc>
  80c4a4:	2800081e 	bne	r5,zero,80c4c8 <__ledf2+0xc4>
  80c4a8:	00800044 	movi	r2,1
  80c4ac:	f800283a 	ret
  80c4b0:	2292b03a 	or	r9,r4,r10
  80c4b4:	483fdf26 	beq	r9,zero,80c434 <__alt_data_end+0xff80c434>
  80c4b8:	00800084 	movi	r2,2
  80c4bc:	f800283a 	ret
  80c4c0:	4080030e 	bge	r8,r2,80c4d0 <__ledf2+0xcc>
  80c4c4:	383fef26 	beq	r7,zero,80c484 <__alt_data_end+0xff80c484>
  80c4c8:	00bfffc4 	movi	r2,-1
  80c4cc:	f800283a 	ret
  80c4d0:	123feb16 	blt	r2,r8,80c480 <__alt_data_end+0xff80c480>
  80c4d4:	1abff336 	bltu	r3,r10,80c4a4 <__alt_data_end+0xff80c4a4>
  80c4d8:	50c00326 	beq	r10,r3,80c4e8 <__ledf2+0xe4>
  80c4dc:	50c0042e 	bgeu	r10,r3,80c4f0 <__ledf2+0xec>
  80c4e0:	283fe81e 	bne	r5,zero,80c484 <__alt_data_end+0xff80c484>
  80c4e4:	003ff806 	br	80c4c8 <__alt_data_end+0xff80c4c8>
  80c4e8:	313fee36 	bltu	r6,r4,80c4a4 <__alt_data_end+0xff80c4a4>
  80c4ec:	21bffc36 	bltu	r4,r6,80c4e0 <__alt_data_end+0xff80c4e0>
  80c4f0:	0005883a 	mov	r2,zero
  80c4f4:	f800283a 	ret

0080c4f8 <__muldf3>:
  80c4f8:	deffee04 	addi	sp,sp,-72
  80c4fc:	dd000c15 	stw	r20,48(sp)
  80c500:	2828d53a 	srli	r20,r5,20
  80c504:	ddc00f15 	stw	r23,60(sp)
  80c508:	282ed7fa 	srli	r23,r5,31
  80c50c:	dc000815 	stw	r16,32(sp)
  80c510:	04000434 	movhi	r16,16
  80c514:	dcc00b15 	stw	r19,44(sp)
  80c518:	843fffc4 	addi	r16,r16,-1
  80c51c:	dfc01115 	stw	ra,68(sp)
  80c520:	df001015 	stw	fp,64(sp)
  80c524:	dd800e15 	stw	r22,56(sp)
  80c528:	dd400d15 	stw	r21,52(sp)
  80c52c:	dc800a15 	stw	r18,40(sp)
  80c530:	dc400915 	stw	r17,36(sp)
  80c534:	a501ffcc 	andi	r20,r20,2047
  80c538:	2c20703a 	and	r16,r5,r16
  80c53c:	b827883a 	mov	r19,r23
  80c540:	ba403fcc 	andi	r9,r23,255
  80c544:	a0006026 	beq	r20,zero,80c6c8 <__muldf3+0x1d0>
  80c548:	0081ffc4 	movi	r2,2047
  80c54c:	202d883a 	mov	r22,r4
  80c550:	a0803626 	beq	r20,r2,80c62c <__muldf3+0x134>
  80c554:	84000434 	orhi	r16,r16,16
  80c558:	200ad77a 	srli	r5,r4,29
  80c55c:	800490fa 	slli	r2,r16,3
  80c560:	202c90fa 	slli	r22,r4,3
  80c564:	a53f0044 	addi	r20,r20,-1023
  80c568:	28a0b03a 	or	r16,r5,r2
  80c56c:	002b883a 	mov	r21,zero
  80c570:	000b883a 	mov	r5,zero
  80c574:	3804d53a 	srli	r2,r7,20
  80c578:	3838d7fa 	srli	fp,r7,31
  80c57c:	04400434 	movhi	r17,16
  80c580:	8c7fffc4 	addi	r17,r17,-1
  80c584:	1081ffcc 	andi	r2,r2,2047
  80c588:	3025883a 	mov	r18,r6
  80c58c:	3c62703a 	and	r17,r7,r17
  80c590:	e2803fcc 	andi	r10,fp,255
  80c594:	10006d26 	beq	r2,zero,80c74c <__muldf3+0x254>
  80c598:	00c1ffc4 	movi	r3,2047
  80c59c:	10c06526 	beq	r2,r3,80c734 <__muldf3+0x23c>
  80c5a0:	8c400434 	orhi	r17,r17,16
  80c5a4:	300ed77a 	srli	r7,r6,29
  80c5a8:	880690fa 	slli	r3,r17,3
  80c5ac:	302490fa 	slli	r18,r6,3
  80c5b0:	10bf0044 	addi	r2,r2,-1023
  80c5b4:	38e2b03a 	or	r17,r7,r3
  80c5b8:	000f883a 	mov	r7,zero
  80c5bc:	a087883a 	add	r3,r20,r2
  80c5c0:	010003c4 	movi	r4,15
  80c5c4:	3d44b03a 	or	r2,r7,r21
  80c5c8:	e5ccf03a 	xor	r6,fp,r23
  80c5cc:	1a000044 	addi	r8,r3,1
  80c5d0:	20809b36 	bltu	r4,r2,80c840 <__muldf3+0x348>
  80c5d4:	100490ba 	slli	r2,r2,2
  80c5d8:	01002074 	movhi	r4,129
  80c5dc:	21317b04 	addi	r4,r4,-14868
  80c5e0:	1105883a 	add	r2,r2,r4
  80c5e4:	10800017 	ldw	r2,0(r2)
  80c5e8:	1000683a 	jmp	r2
  80c5ec:	0080c840 	call	80c84 <__alt_mem_sdram-0x77f37c>
  80c5f0:	0080c64c 	andi	r2,zero,793
  80c5f4:	0080c64c 	andi	r2,zero,793
  80c5f8:	0080c648 	cmpgei	r2,zero,793
  80c5fc:	0080c81c 	xori	r2,zero,800
  80c600:	0080c81c 	xori	r2,zero,800
  80c604:	0080c804 	movi	r2,800
  80c608:	0080c648 	cmpgei	r2,zero,793
  80c60c:	0080c81c 	xori	r2,zero,800
  80c610:	0080c804 	movi	r2,800
  80c614:	0080c81c 	xori	r2,zero,800
  80c618:	0080c648 	cmpgei	r2,zero,793
  80c61c:	0080c82c 	andhi	r2,zero,800
  80c620:	0080c82c 	andhi	r2,zero,800
  80c624:	0080c82c 	andhi	r2,zero,800
  80c628:	0080cb8c 	andi	r2,zero,814
  80c62c:	2404b03a 	or	r2,r4,r16
  80c630:	1000711e 	bne	r2,zero,80c7f8 <__muldf3+0x300>
  80c634:	05400204 	movi	r21,8
  80c638:	0021883a 	mov	r16,zero
  80c63c:	002d883a 	mov	r22,zero
  80c640:	01400084 	movi	r5,2
  80c644:	003fcb06 	br	80c574 <__alt_data_end+0xff80c574>
  80c648:	500d883a 	mov	r6,r10
  80c64c:	00800084 	movi	r2,2
  80c650:	38805926 	beq	r7,r2,80c7b8 <__muldf3+0x2c0>
  80c654:	008000c4 	movi	r2,3
  80c658:	3881bb26 	beq	r7,r2,80cd48 <__muldf3+0x850>
  80c65c:	00800044 	movi	r2,1
  80c660:	3881961e 	bne	r7,r2,80ccbc <__muldf3+0x7c4>
  80c664:	3027883a 	mov	r19,r6
  80c668:	0005883a 	mov	r2,zero
  80c66c:	0021883a 	mov	r16,zero
  80c670:	002d883a 	mov	r22,zero
  80c674:	1004953a 	slli	r2,r2,20
  80c678:	98c03fcc 	andi	r3,r19,255
  80c67c:	04400434 	movhi	r17,16
  80c680:	8c7fffc4 	addi	r17,r17,-1
  80c684:	180697fa 	slli	r3,r3,31
  80c688:	8460703a 	and	r16,r16,r17
  80c68c:	80a0b03a 	or	r16,r16,r2
  80c690:	80c6b03a 	or	r3,r16,r3
  80c694:	b005883a 	mov	r2,r22
  80c698:	dfc01117 	ldw	ra,68(sp)
  80c69c:	df001017 	ldw	fp,64(sp)
  80c6a0:	ddc00f17 	ldw	r23,60(sp)
  80c6a4:	dd800e17 	ldw	r22,56(sp)
  80c6a8:	dd400d17 	ldw	r21,52(sp)
  80c6ac:	dd000c17 	ldw	r20,48(sp)
  80c6b0:	dcc00b17 	ldw	r19,44(sp)
  80c6b4:	dc800a17 	ldw	r18,40(sp)
  80c6b8:	dc400917 	ldw	r17,36(sp)
  80c6bc:	dc000817 	ldw	r16,32(sp)
  80c6c0:	dec01204 	addi	sp,sp,72
  80c6c4:	f800283a 	ret
  80c6c8:	2404b03a 	or	r2,r4,r16
  80c6cc:	202b883a 	mov	r21,r4
  80c6d0:	10004426 	beq	r2,zero,80c7e4 <__muldf3+0x2ec>
  80c6d4:	80015126 	beq	r16,zero,80cc1c <__muldf3+0x724>
  80c6d8:	8009883a 	mov	r4,r16
  80c6dc:	d9800715 	stw	r6,28(sp)
  80c6e0:	d9c00215 	stw	r7,8(sp)
  80c6e4:	da400415 	stw	r9,16(sp)
  80c6e8:	08011a80 	call	8011a8 <__clzsi2>
  80c6ec:	d9800717 	ldw	r6,28(sp)
  80c6f0:	d9c00217 	ldw	r7,8(sp)
  80c6f4:	da400417 	ldw	r9,16(sp)
  80c6f8:	113ffd44 	addi	r4,r2,-11
  80c6fc:	00c00704 	movi	r3,28
  80c700:	19014216 	blt	r3,r4,80cc0c <__muldf3+0x714>
  80c704:	00c00744 	movi	r3,29
  80c708:	15bffe04 	addi	r22,r2,-8
  80c70c:	1907c83a 	sub	r3,r3,r4
  80c710:	85a0983a 	sll	r16,r16,r22
  80c714:	a8c6d83a 	srl	r3,r21,r3
  80c718:	adac983a 	sll	r22,r21,r22
  80c71c:	1c20b03a 	or	r16,r3,r16
  80c720:	1080fcc4 	addi	r2,r2,1011
  80c724:	00a9c83a 	sub	r20,zero,r2
  80c728:	002b883a 	mov	r21,zero
  80c72c:	000b883a 	mov	r5,zero
  80c730:	003f9006 	br	80c574 <__alt_data_end+0xff80c574>
  80c734:	3446b03a 	or	r3,r6,r17
  80c738:	1800281e 	bne	r3,zero,80c7dc <__muldf3+0x2e4>
  80c73c:	0023883a 	mov	r17,zero
  80c740:	0025883a 	mov	r18,zero
  80c744:	01c00084 	movi	r7,2
  80c748:	003f9c06 	br	80c5bc <__alt_data_end+0xff80c5bc>
  80c74c:	3446b03a 	or	r3,r6,r17
  80c750:	18001e26 	beq	r3,zero,80c7cc <__muldf3+0x2d4>
  80c754:	88012126 	beq	r17,zero,80cbdc <__muldf3+0x6e4>
  80c758:	8809883a 	mov	r4,r17
  80c75c:	d9400215 	stw	r5,8(sp)
  80c760:	d9800715 	stw	r6,28(sp)
  80c764:	da400415 	stw	r9,16(sp)
  80c768:	da800315 	stw	r10,12(sp)
  80c76c:	08011a80 	call	8011a8 <__clzsi2>
  80c770:	d9400217 	ldw	r5,8(sp)
  80c774:	d9800717 	ldw	r6,28(sp)
  80c778:	da400417 	ldw	r9,16(sp)
  80c77c:	da800317 	ldw	r10,12(sp)
  80c780:	113ffd44 	addi	r4,r2,-11
  80c784:	00c00704 	movi	r3,28
  80c788:	19011016 	blt	r3,r4,80cbcc <__muldf3+0x6d4>
  80c78c:	00c00744 	movi	r3,29
  80c790:	14bffe04 	addi	r18,r2,-8
  80c794:	1907c83a 	sub	r3,r3,r4
  80c798:	8ca2983a 	sll	r17,r17,r18
  80c79c:	30c6d83a 	srl	r3,r6,r3
  80c7a0:	34a4983a 	sll	r18,r6,r18
  80c7a4:	1c62b03a 	or	r17,r3,r17
  80c7a8:	1080fcc4 	addi	r2,r2,1011
  80c7ac:	0085c83a 	sub	r2,zero,r2
  80c7b0:	000f883a 	mov	r7,zero
  80c7b4:	003f8106 	br	80c5bc <__alt_data_end+0xff80c5bc>
  80c7b8:	3027883a 	mov	r19,r6
  80c7bc:	0081ffc4 	movi	r2,2047
  80c7c0:	0021883a 	mov	r16,zero
  80c7c4:	002d883a 	mov	r22,zero
  80c7c8:	003faa06 	br	80c674 <__alt_data_end+0xff80c674>
  80c7cc:	0023883a 	mov	r17,zero
  80c7d0:	0025883a 	mov	r18,zero
  80c7d4:	01c00044 	movi	r7,1
  80c7d8:	003f7806 	br	80c5bc <__alt_data_end+0xff80c5bc>
  80c7dc:	01c000c4 	movi	r7,3
  80c7e0:	003f7606 	br	80c5bc <__alt_data_end+0xff80c5bc>
  80c7e4:	05400104 	movi	r21,4
  80c7e8:	0021883a 	mov	r16,zero
  80c7ec:	002d883a 	mov	r22,zero
  80c7f0:	01400044 	movi	r5,1
  80c7f4:	003f5f06 	br	80c574 <__alt_data_end+0xff80c574>
  80c7f8:	05400304 	movi	r21,12
  80c7fc:	014000c4 	movi	r5,3
  80c800:	003f5c06 	br	80c574 <__alt_data_end+0xff80c574>
  80c804:	04000434 	movhi	r16,16
  80c808:	0027883a 	mov	r19,zero
  80c80c:	843fffc4 	addi	r16,r16,-1
  80c810:	05bfffc4 	movi	r22,-1
  80c814:	0081ffc4 	movi	r2,2047
  80c818:	003f9606 	br	80c674 <__alt_data_end+0xff80c674>
  80c81c:	8023883a 	mov	r17,r16
  80c820:	b025883a 	mov	r18,r22
  80c824:	280f883a 	mov	r7,r5
  80c828:	003f8806 	br	80c64c <__alt_data_end+0xff80c64c>
  80c82c:	8023883a 	mov	r17,r16
  80c830:	b025883a 	mov	r18,r22
  80c834:	480d883a 	mov	r6,r9
  80c838:	280f883a 	mov	r7,r5
  80c83c:	003f8306 	br	80c64c <__alt_data_end+0xff80c64c>
  80c840:	b026d43a 	srli	r19,r22,16
  80c844:	902ed43a 	srli	r23,r18,16
  80c848:	b5bfffcc 	andi	r22,r22,65535
  80c84c:	94bfffcc 	andi	r18,r18,65535
  80c850:	b00b883a 	mov	r5,r22
  80c854:	9009883a 	mov	r4,r18
  80c858:	d8c00515 	stw	r3,20(sp)
  80c85c:	d9800715 	stw	r6,28(sp)
  80c860:	da000615 	stw	r8,24(sp)
  80c864:	080b8a80 	call	80b8a8 <__mulsi3>
  80c868:	980b883a 	mov	r5,r19
  80c86c:	9009883a 	mov	r4,r18
  80c870:	1029883a 	mov	r20,r2
  80c874:	080b8a80 	call	80b8a8 <__mulsi3>
  80c878:	b80b883a 	mov	r5,r23
  80c87c:	9809883a 	mov	r4,r19
  80c880:	102b883a 	mov	r21,r2
  80c884:	080b8a80 	call	80b8a8 <__mulsi3>
  80c888:	b809883a 	mov	r4,r23
  80c88c:	b00b883a 	mov	r5,r22
  80c890:	1039883a 	mov	fp,r2
  80c894:	080b8a80 	call	80b8a8 <__mulsi3>
  80c898:	a008d43a 	srli	r4,r20,16
  80c89c:	1545883a 	add	r2,r2,r21
  80c8a0:	d8c00517 	ldw	r3,20(sp)
  80c8a4:	2085883a 	add	r2,r4,r2
  80c8a8:	d9800717 	ldw	r6,28(sp)
  80c8ac:	da000617 	ldw	r8,24(sp)
  80c8b0:	1540022e 	bgeu	r2,r21,80c8bc <__muldf3+0x3c4>
  80c8b4:	01000074 	movhi	r4,1
  80c8b8:	e139883a 	add	fp,fp,r4
  80c8bc:	100e943a 	slli	r7,r2,16
  80c8c0:	1004d43a 	srli	r2,r2,16
  80c8c4:	882ad43a 	srli	r21,r17,16
  80c8c8:	a53fffcc 	andi	r20,r20,65535
  80c8cc:	8c7fffcc 	andi	r17,r17,65535
  80c8d0:	3d29883a 	add	r20,r7,r20
  80c8d4:	b00b883a 	mov	r5,r22
  80c8d8:	8809883a 	mov	r4,r17
  80c8dc:	d8c00515 	stw	r3,20(sp)
  80c8e0:	d9800715 	stw	r6,28(sp)
  80c8e4:	da000615 	stw	r8,24(sp)
  80c8e8:	dd000115 	stw	r20,4(sp)
  80c8ec:	d8800015 	stw	r2,0(sp)
  80c8f0:	080b8a80 	call	80b8a8 <__mulsi3>
  80c8f4:	980b883a 	mov	r5,r19
  80c8f8:	8809883a 	mov	r4,r17
  80c8fc:	d8800215 	stw	r2,8(sp)
  80c900:	080b8a80 	call	80b8a8 <__mulsi3>
  80c904:	9809883a 	mov	r4,r19
  80c908:	a80b883a 	mov	r5,r21
  80c90c:	1029883a 	mov	r20,r2
  80c910:	080b8a80 	call	80b8a8 <__mulsi3>
  80c914:	b00b883a 	mov	r5,r22
  80c918:	a809883a 	mov	r4,r21
  80c91c:	d8800415 	stw	r2,16(sp)
  80c920:	080b8a80 	call	80b8a8 <__mulsi3>
  80c924:	d9c00217 	ldw	r7,8(sp)
  80c928:	1505883a 	add	r2,r2,r20
  80c92c:	d8c00517 	ldw	r3,20(sp)
  80c930:	3826d43a 	srli	r19,r7,16
  80c934:	d9800717 	ldw	r6,28(sp)
  80c938:	da000617 	ldw	r8,24(sp)
  80c93c:	9885883a 	add	r2,r19,r2
  80c940:	da400417 	ldw	r9,16(sp)
  80c944:	1500022e 	bgeu	r2,r20,80c950 <__muldf3+0x458>
  80c948:	01000074 	movhi	r4,1
  80c94c:	4913883a 	add	r9,r9,r4
  80c950:	1028d43a 	srli	r20,r2,16
  80c954:	1004943a 	slli	r2,r2,16
  80c958:	802cd43a 	srli	r22,r16,16
  80c95c:	843fffcc 	andi	r16,r16,65535
  80c960:	3cffffcc 	andi	r19,r7,65535
  80c964:	9009883a 	mov	r4,r18
  80c968:	800b883a 	mov	r5,r16
  80c96c:	a269883a 	add	r20,r20,r9
  80c970:	d8c00515 	stw	r3,20(sp)
  80c974:	d9800715 	stw	r6,28(sp)
  80c978:	da000615 	stw	r8,24(sp)
  80c97c:	14e7883a 	add	r19,r2,r19
  80c980:	080b8a80 	call	80b8a8 <__mulsi3>
  80c984:	9009883a 	mov	r4,r18
  80c988:	b00b883a 	mov	r5,r22
  80c98c:	d8800315 	stw	r2,12(sp)
  80c990:	080b8a80 	call	80b8a8 <__mulsi3>
  80c994:	b809883a 	mov	r4,r23
  80c998:	b00b883a 	mov	r5,r22
  80c99c:	d8800215 	stw	r2,8(sp)
  80c9a0:	080b8a80 	call	80b8a8 <__mulsi3>
  80c9a4:	b80b883a 	mov	r5,r23
  80c9a8:	8009883a 	mov	r4,r16
  80c9ac:	d8800415 	stw	r2,16(sp)
  80c9b0:	080b8a80 	call	80b8a8 <__mulsi3>
  80c9b4:	da800317 	ldw	r10,12(sp)
  80c9b8:	d9c00217 	ldw	r7,8(sp)
  80c9bc:	d9000017 	ldw	r4,0(sp)
  80c9c0:	502ed43a 	srli	r23,r10,16
  80c9c4:	11c5883a 	add	r2,r2,r7
  80c9c8:	24e5883a 	add	r18,r4,r19
  80c9cc:	b885883a 	add	r2,r23,r2
  80c9d0:	d8c00517 	ldw	r3,20(sp)
  80c9d4:	d9800717 	ldw	r6,28(sp)
  80c9d8:	da000617 	ldw	r8,24(sp)
  80c9dc:	da400417 	ldw	r9,16(sp)
  80c9e0:	11c0022e 	bgeu	r2,r7,80c9ec <__muldf3+0x4f4>
  80c9e4:	01000074 	movhi	r4,1
  80c9e8:	4913883a 	add	r9,r9,r4
  80c9ec:	100ed43a 	srli	r7,r2,16
  80c9f0:	1004943a 	slli	r2,r2,16
  80c9f4:	55ffffcc 	andi	r23,r10,65535
  80c9f8:	3a53883a 	add	r9,r7,r9
  80c9fc:	8809883a 	mov	r4,r17
  80ca00:	800b883a 	mov	r5,r16
  80ca04:	d8c00515 	stw	r3,20(sp)
  80ca08:	d9800715 	stw	r6,28(sp)
  80ca0c:	da000615 	stw	r8,24(sp)
  80ca10:	da400415 	stw	r9,16(sp)
  80ca14:	15ef883a 	add	r23,r2,r23
  80ca18:	080b8a80 	call	80b8a8 <__mulsi3>
  80ca1c:	8809883a 	mov	r4,r17
  80ca20:	b00b883a 	mov	r5,r22
  80ca24:	d8800215 	stw	r2,8(sp)
  80ca28:	080b8a80 	call	80b8a8 <__mulsi3>
  80ca2c:	b00b883a 	mov	r5,r22
  80ca30:	a809883a 	mov	r4,r21
  80ca34:	d8800315 	stw	r2,12(sp)
  80ca38:	080b8a80 	call	80b8a8 <__mulsi3>
  80ca3c:	8009883a 	mov	r4,r16
  80ca40:	a80b883a 	mov	r5,r21
  80ca44:	1023883a 	mov	r17,r2
  80ca48:	080b8a80 	call	80b8a8 <__mulsi3>
  80ca4c:	d9c00217 	ldw	r7,8(sp)
  80ca50:	da800317 	ldw	r10,12(sp)
  80ca54:	d8c00517 	ldw	r3,20(sp)
  80ca58:	3808d43a 	srli	r4,r7,16
  80ca5c:	1285883a 	add	r2,r2,r10
  80ca60:	d9800717 	ldw	r6,28(sp)
  80ca64:	2085883a 	add	r2,r4,r2
  80ca68:	da000617 	ldw	r8,24(sp)
  80ca6c:	da400417 	ldw	r9,16(sp)
  80ca70:	1280022e 	bgeu	r2,r10,80ca7c <__muldf3+0x584>
  80ca74:	01000074 	movhi	r4,1
  80ca78:	8923883a 	add	r17,r17,r4
  80ca7c:	1008943a 	slli	r4,r2,16
  80ca80:	39ffffcc 	andi	r7,r7,65535
  80ca84:	e4b9883a 	add	fp,fp,r18
  80ca88:	21cf883a 	add	r7,r4,r7
  80ca8c:	e4e7803a 	cmpltu	r19,fp,r19
  80ca90:	3d0f883a 	add	r7,r7,r20
  80ca94:	bf39883a 	add	fp,r23,fp
  80ca98:	99c9883a 	add	r4,r19,r7
  80ca9c:	e5ef803a 	cmpltu	r23,fp,r23
  80caa0:	490b883a 	add	r5,r9,r4
  80caa4:	1004d43a 	srli	r2,r2,16
  80caa8:	b965883a 	add	r18,r23,r5
  80caac:	24c9803a 	cmpltu	r4,r4,r19
  80cab0:	3d29803a 	cmpltu	r20,r7,r20
  80cab4:	a128b03a 	or	r20,r20,r4
  80cab8:	95ef803a 	cmpltu	r23,r18,r23
  80cabc:	2a53803a 	cmpltu	r9,r5,r9
  80cac0:	a0a9883a 	add	r20,r20,r2
  80cac4:	4deeb03a 	or	r23,r9,r23
  80cac8:	a5ef883a 	add	r23,r20,r23
  80cacc:	bc63883a 	add	r17,r23,r17
  80cad0:	e004927a 	slli	r2,fp,9
  80cad4:	d9000117 	ldw	r4,4(sp)
  80cad8:	882e927a 	slli	r23,r17,9
  80cadc:	9022d5fa 	srli	r17,r18,23
  80cae0:	e038d5fa 	srli	fp,fp,23
  80cae4:	1104b03a 	or	r2,r2,r4
  80cae8:	9024927a 	slli	r18,r18,9
  80caec:	1004c03a 	cmpne	r2,r2,zero
  80caf0:	bc62b03a 	or	r17,r23,r17
  80caf4:	1738b03a 	or	fp,r2,fp
  80caf8:	8880402c 	andhi	r2,r17,256
  80cafc:	e4a4b03a 	or	r18,fp,r18
  80cb00:	10000726 	beq	r2,zero,80cb20 <__muldf3+0x628>
  80cb04:	9006d07a 	srli	r3,r18,1
  80cb08:	880497fa 	slli	r2,r17,31
  80cb0c:	9480004c 	andi	r18,r18,1
  80cb10:	8822d07a 	srli	r17,r17,1
  80cb14:	1ca4b03a 	or	r18,r3,r18
  80cb18:	14a4b03a 	or	r18,r2,r18
  80cb1c:	4007883a 	mov	r3,r8
  80cb20:	1880ffc4 	addi	r2,r3,1023
  80cb24:	0080460e 	bge	zero,r2,80cc40 <__muldf3+0x748>
  80cb28:	910001cc 	andi	r4,r18,7
  80cb2c:	20000726 	beq	r4,zero,80cb4c <__muldf3+0x654>
  80cb30:	910003cc 	andi	r4,r18,15
  80cb34:	01400104 	movi	r5,4
  80cb38:	21400426 	beq	r4,r5,80cb4c <__muldf3+0x654>
  80cb3c:	9149883a 	add	r4,r18,r5
  80cb40:	24a5803a 	cmpltu	r18,r4,r18
  80cb44:	8ca3883a 	add	r17,r17,r18
  80cb48:	2025883a 	mov	r18,r4
  80cb4c:	8900402c 	andhi	r4,r17,256
  80cb50:	20000426 	beq	r4,zero,80cb64 <__muldf3+0x66c>
  80cb54:	18810004 	addi	r2,r3,1024
  80cb58:	00ffc034 	movhi	r3,65280
  80cb5c:	18ffffc4 	addi	r3,r3,-1
  80cb60:	88e2703a 	and	r17,r17,r3
  80cb64:	00c1ff84 	movi	r3,2046
  80cb68:	18bf1316 	blt	r3,r2,80c7b8 <__alt_data_end+0xff80c7b8>
  80cb6c:	882c977a 	slli	r22,r17,29
  80cb70:	9024d0fa 	srli	r18,r18,3
  80cb74:	8822927a 	slli	r17,r17,9
  80cb78:	1081ffcc 	andi	r2,r2,2047
  80cb7c:	b4acb03a 	or	r22,r22,r18
  80cb80:	8820d33a 	srli	r16,r17,12
  80cb84:	3027883a 	mov	r19,r6
  80cb88:	003eba06 	br	80c674 <__alt_data_end+0xff80c674>
  80cb8c:	8080022c 	andhi	r2,r16,8
  80cb90:	10000926 	beq	r2,zero,80cbb8 <__muldf3+0x6c0>
  80cb94:	8880022c 	andhi	r2,r17,8
  80cb98:	1000071e 	bne	r2,zero,80cbb8 <__muldf3+0x6c0>
  80cb9c:	00800434 	movhi	r2,16
  80cba0:	8c000234 	orhi	r16,r17,8
  80cba4:	10bfffc4 	addi	r2,r2,-1
  80cba8:	e027883a 	mov	r19,fp
  80cbac:	80a0703a 	and	r16,r16,r2
  80cbb0:	902d883a 	mov	r22,r18
  80cbb4:	003f1706 	br	80c814 <__alt_data_end+0xff80c814>
  80cbb8:	00800434 	movhi	r2,16
  80cbbc:	84000234 	orhi	r16,r16,8
  80cbc0:	10bfffc4 	addi	r2,r2,-1
  80cbc4:	80a0703a 	and	r16,r16,r2
  80cbc8:	003f1206 	br	80c814 <__alt_data_end+0xff80c814>
  80cbcc:	147ff604 	addi	r17,r2,-40
  80cbd0:	3462983a 	sll	r17,r6,r17
  80cbd4:	0025883a 	mov	r18,zero
  80cbd8:	003ef306 	br	80c7a8 <__alt_data_end+0xff80c7a8>
  80cbdc:	3009883a 	mov	r4,r6
  80cbe0:	d9400215 	stw	r5,8(sp)
  80cbe4:	d9800715 	stw	r6,28(sp)
  80cbe8:	da400415 	stw	r9,16(sp)
  80cbec:	da800315 	stw	r10,12(sp)
  80cbf0:	08011a80 	call	8011a8 <__clzsi2>
  80cbf4:	10800804 	addi	r2,r2,32
  80cbf8:	da800317 	ldw	r10,12(sp)
  80cbfc:	da400417 	ldw	r9,16(sp)
  80cc00:	d9800717 	ldw	r6,28(sp)
  80cc04:	d9400217 	ldw	r5,8(sp)
  80cc08:	003edd06 	br	80c780 <__alt_data_end+0xff80c780>
  80cc0c:	143ff604 	addi	r16,r2,-40
  80cc10:	ac20983a 	sll	r16,r21,r16
  80cc14:	002d883a 	mov	r22,zero
  80cc18:	003ec106 	br	80c720 <__alt_data_end+0xff80c720>
  80cc1c:	d9800715 	stw	r6,28(sp)
  80cc20:	d9c00215 	stw	r7,8(sp)
  80cc24:	da400415 	stw	r9,16(sp)
  80cc28:	08011a80 	call	8011a8 <__clzsi2>
  80cc2c:	10800804 	addi	r2,r2,32
  80cc30:	da400417 	ldw	r9,16(sp)
  80cc34:	d9c00217 	ldw	r7,8(sp)
  80cc38:	d9800717 	ldw	r6,28(sp)
  80cc3c:	003eae06 	br	80c6f8 <__alt_data_end+0xff80c6f8>
  80cc40:	00c00044 	movi	r3,1
  80cc44:	1887c83a 	sub	r3,r3,r2
  80cc48:	01000e04 	movi	r4,56
  80cc4c:	20fe8516 	blt	r4,r3,80c664 <__alt_data_end+0xff80c664>
  80cc50:	010007c4 	movi	r4,31
  80cc54:	20c01b16 	blt	r4,r3,80ccc4 <__muldf3+0x7cc>
  80cc58:	00800804 	movi	r2,32
  80cc5c:	10c5c83a 	sub	r2,r2,r3
  80cc60:	888a983a 	sll	r5,r17,r2
  80cc64:	90c8d83a 	srl	r4,r18,r3
  80cc68:	9084983a 	sll	r2,r18,r2
  80cc6c:	88e2d83a 	srl	r17,r17,r3
  80cc70:	2906b03a 	or	r3,r5,r4
  80cc74:	1004c03a 	cmpne	r2,r2,zero
  80cc78:	1886b03a 	or	r3,r3,r2
  80cc7c:	188001cc 	andi	r2,r3,7
  80cc80:	10000726 	beq	r2,zero,80cca0 <__muldf3+0x7a8>
  80cc84:	188003cc 	andi	r2,r3,15
  80cc88:	01000104 	movi	r4,4
  80cc8c:	11000426 	beq	r2,r4,80cca0 <__muldf3+0x7a8>
  80cc90:	1805883a 	mov	r2,r3
  80cc94:	10c00104 	addi	r3,r2,4
  80cc98:	1885803a 	cmpltu	r2,r3,r2
  80cc9c:	88a3883a 	add	r17,r17,r2
  80cca0:	8880202c 	andhi	r2,r17,128
  80cca4:	10001c26 	beq	r2,zero,80cd18 <__muldf3+0x820>
  80cca8:	3027883a 	mov	r19,r6
  80ccac:	00800044 	movi	r2,1
  80ccb0:	0021883a 	mov	r16,zero
  80ccb4:	002d883a 	mov	r22,zero
  80ccb8:	003e6e06 	br	80c674 <__alt_data_end+0xff80c674>
  80ccbc:	4007883a 	mov	r3,r8
  80ccc0:	003f9706 	br	80cb20 <__alt_data_end+0xff80cb20>
  80ccc4:	017ff844 	movi	r5,-31
  80ccc8:	2885c83a 	sub	r2,r5,r2
  80cccc:	888ad83a 	srl	r5,r17,r2
  80ccd0:	00800804 	movi	r2,32
  80ccd4:	18801a26 	beq	r3,r2,80cd40 <__muldf3+0x848>
  80ccd8:	01001004 	movi	r4,64
  80ccdc:	20c7c83a 	sub	r3,r4,r3
  80cce0:	88e2983a 	sll	r17,r17,r3
  80cce4:	8ca4b03a 	or	r18,r17,r18
  80cce8:	9004c03a 	cmpne	r2,r18,zero
  80ccec:	2884b03a 	or	r2,r5,r2
  80ccf0:	144001cc 	andi	r17,r2,7
  80ccf4:	88000d1e 	bne	r17,zero,80cd2c <__muldf3+0x834>
  80ccf8:	0021883a 	mov	r16,zero
  80ccfc:	102cd0fa 	srli	r22,r2,3
  80cd00:	3027883a 	mov	r19,r6
  80cd04:	0005883a 	mov	r2,zero
  80cd08:	b46cb03a 	or	r22,r22,r17
  80cd0c:	003e5906 	br	80c674 <__alt_data_end+0xff80c674>
  80cd10:	1007883a 	mov	r3,r2
  80cd14:	0023883a 	mov	r17,zero
  80cd18:	8820927a 	slli	r16,r17,9
  80cd1c:	1805883a 	mov	r2,r3
  80cd20:	8822977a 	slli	r17,r17,29
  80cd24:	8020d33a 	srli	r16,r16,12
  80cd28:	003ff406 	br	80ccfc <__alt_data_end+0xff80ccfc>
  80cd2c:	10c003cc 	andi	r3,r2,15
  80cd30:	01000104 	movi	r4,4
  80cd34:	193ff626 	beq	r3,r4,80cd10 <__alt_data_end+0xff80cd10>
  80cd38:	0023883a 	mov	r17,zero
  80cd3c:	003fd506 	br	80cc94 <__alt_data_end+0xff80cc94>
  80cd40:	0023883a 	mov	r17,zero
  80cd44:	003fe706 	br	80cce4 <__alt_data_end+0xff80cce4>
  80cd48:	00800434 	movhi	r2,16
  80cd4c:	8c000234 	orhi	r16,r17,8
  80cd50:	10bfffc4 	addi	r2,r2,-1
  80cd54:	3027883a 	mov	r19,r6
  80cd58:	80a0703a 	and	r16,r16,r2
  80cd5c:	902d883a 	mov	r22,r18
  80cd60:	003eac06 	br	80c814 <__alt_data_end+0xff80c814>

0080cd64 <__subdf3>:
  80cd64:	02000434 	movhi	r8,16
  80cd68:	423fffc4 	addi	r8,r8,-1
  80cd6c:	defffb04 	addi	sp,sp,-20
  80cd70:	2a14703a 	and	r10,r5,r8
  80cd74:	3812d53a 	srli	r9,r7,20
  80cd78:	3a10703a 	and	r8,r7,r8
  80cd7c:	2006d77a 	srli	r3,r4,29
  80cd80:	3004d77a 	srli	r2,r6,29
  80cd84:	dc000015 	stw	r16,0(sp)
  80cd88:	501490fa 	slli	r10,r10,3
  80cd8c:	2820d53a 	srli	r16,r5,20
  80cd90:	401090fa 	slli	r8,r8,3
  80cd94:	dc800215 	stw	r18,8(sp)
  80cd98:	dc400115 	stw	r17,4(sp)
  80cd9c:	dfc00415 	stw	ra,16(sp)
  80cda0:	202290fa 	slli	r17,r4,3
  80cda4:	dcc00315 	stw	r19,12(sp)
  80cda8:	4a41ffcc 	andi	r9,r9,2047
  80cdac:	0101ffc4 	movi	r4,2047
  80cdb0:	2824d7fa 	srli	r18,r5,31
  80cdb4:	8401ffcc 	andi	r16,r16,2047
  80cdb8:	50c6b03a 	or	r3,r10,r3
  80cdbc:	380ed7fa 	srli	r7,r7,31
  80cdc0:	408ab03a 	or	r5,r8,r2
  80cdc4:	300c90fa 	slli	r6,r6,3
  80cdc8:	49009626 	beq	r9,r4,80d024 <__subdf3+0x2c0>
  80cdcc:	39c0005c 	xori	r7,r7,1
  80cdd0:	8245c83a 	sub	r2,r16,r9
  80cdd4:	3c807426 	beq	r7,r18,80cfa8 <__subdf3+0x244>
  80cdd8:	0080af0e 	bge	zero,r2,80d098 <__subdf3+0x334>
  80cddc:	48002a1e 	bne	r9,zero,80ce88 <__subdf3+0x124>
  80cde0:	2988b03a 	or	r4,r5,r6
  80cde4:	20009a1e 	bne	r4,zero,80d050 <__subdf3+0x2ec>
  80cde8:	888001cc 	andi	r2,r17,7
  80cdec:	10000726 	beq	r2,zero,80ce0c <__subdf3+0xa8>
  80cdf0:	888003cc 	andi	r2,r17,15
  80cdf4:	01000104 	movi	r4,4
  80cdf8:	11000426 	beq	r2,r4,80ce0c <__subdf3+0xa8>
  80cdfc:	890b883a 	add	r5,r17,r4
  80ce00:	2c63803a 	cmpltu	r17,r5,r17
  80ce04:	1c47883a 	add	r3,r3,r17
  80ce08:	2823883a 	mov	r17,r5
  80ce0c:	1880202c 	andhi	r2,r3,128
  80ce10:	10005926 	beq	r2,zero,80cf78 <__subdf3+0x214>
  80ce14:	84000044 	addi	r16,r16,1
  80ce18:	0081ffc4 	movi	r2,2047
  80ce1c:	8080be26 	beq	r16,r2,80d118 <__subdf3+0x3b4>
  80ce20:	017fe034 	movhi	r5,65408
  80ce24:	297fffc4 	addi	r5,r5,-1
  80ce28:	1946703a 	and	r3,r3,r5
  80ce2c:	1804977a 	slli	r2,r3,29
  80ce30:	1806927a 	slli	r3,r3,9
  80ce34:	8822d0fa 	srli	r17,r17,3
  80ce38:	8401ffcc 	andi	r16,r16,2047
  80ce3c:	180ad33a 	srli	r5,r3,12
  80ce40:	9100004c 	andi	r4,r18,1
  80ce44:	1444b03a 	or	r2,r2,r17
  80ce48:	80c1ffcc 	andi	r3,r16,2047
  80ce4c:	1820953a 	slli	r16,r3,20
  80ce50:	20c03fcc 	andi	r3,r4,255
  80ce54:	180897fa 	slli	r4,r3,31
  80ce58:	00c00434 	movhi	r3,16
  80ce5c:	18ffffc4 	addi	r3,r3,-1
  80ce60:	28c6703a 	and	r3,r5,r3
  80ce64:	1c06b03a 	or	r3,r3,r16
  80ce68:	1906b03a 	or	r3,r3,r4
  80ce6c:	dfc00417 	ldw	ra,16(sp)
  80ce70:	dcc00317 	ldw	r19,12(sp)
  80ce74:	dc800217 	ldw	r18,8(sp)
  80ce78:	dc400117 	ldw	r17,4(sp)
  80ce7c:	dc000017 	ldw	r16,0(sp)
  80ce80:	dec00504 	addi	sp,sp,20
  80ce84:	f800283a 	ret
  80ce88:	0101ffc4 	movi	r4,2047
  80ce8c:	813fd626 	beq	r16,r4,80cde8 <__alt_data_end+0xff80cde8>
  80ce90:	29402034 	orhi	r5,r5,128
  80ce94:	01000e04 	movi	r4,56
  80ce98:	2080a316 	blt	r4,r2,80d128 <__subdf3+0x3c4>
  80ce9c:	010007c4 	movi	r4,31
  80cea0:	2080c616 	blt	r4,r2,80d1bc <__subdf3+0x458>
  80cea4:	01000804 	movi	r4,32
  80cea8:	2089c83a 	sub	r4,r4,r2
  80ceac:	2910983a 	sll	r8,r5,r4
  80ceb0:	308ed83a 	srl	r7,r6,r2
  80ceb4:	3108983a 	sll	r4,r6,r4
  80ceb8:	2884d83a 	srl	r2,r5,r2
  80cebc:	41ccb03a 	or	r6,r8,r7
  80cec0:	2008c03a 	cmpne	r4,r4,zero
  80cec4:	310cb03a 	or	r6,r6,r4
  80cec8:	898dc83a 	sub	r6,r17,r6
  80cecc:	89a3803a 	cmpltu	r17,r17,r6
  80ced0:	1887c83a 	sub	r3,r3,r2
  80ced4:	1c47c83a 	sub	r3,r3,r17
  80ced8:	3023883a 	mov	r17,r6
  80cedc:	1880202c 	andhi	r2,r3,128
  80cee0:	10002326 	beq	r2,zero,80cf70 <__subdf3+0x20c>
  80cee4:	04c02034 	movhi	r19,128
  80cee8:	9cffffc4 	addi	r19,r19,-1
  80ceec:	1ce6703a 	and	r19,r3,r19
  80cef0:	98007a26 	beq	r19,zero,80d0dc <__subdf3+0x378>
  80cef4:	9809883a 	mov	r4,r19
  80cef8:	08011a80 	call	8011a8 <__clzsi2>
  80cefc:	113ffe04 	addi	r4,r2,-8
  80cf00:	00c007c4 	movi	r3,31
  80cf04:	19007b16 	blt	r3,r4,80d0f4 <__subdf3+0x390>
  80cf08:	00800804 	movi	r2,32
  80cf0c:	1105c83a 	sub	r2,r2,r4
  80cf10:	8884d83a 	srl	r2,r17,r2
  80cf14:	9906983a 	sll	r3,r19,r4
  80cf18:	8922983a 	sll	r17,r17,r4
  80cf1c:	10c4b03a 	or	r2,r2,r3
  80cf20:	24007816 	blt	r4,r16,80d104 <__subdf3+0x3a0>
  80cf24:	2421c83a 	sub	r16,r4,r16
  80cf28:	80c00044 	addi	r3,r16,1
  80cf2c:	010007c4 	movi	r4,31
  80cf30:	20c09516 	blt	r4,r3,80d188 <__subdf3+0x424>
  80cf34:	01400804 	movi	r5,32
  80cf38:	28cbc83a 	sub	r5,r5,r3
  80cf3c:	88c8d83a 	srl	r4,r17,r3
  80cf40:	8962983a 	sll	r17,r17,r5
  80cf44:	114a983a 	sll	r5,r2,r5
  80cf48:	10c6d83a 	srl	r3,r2,r3
  80cf4c:	8804c03a 	cmpne	r2,r17,zero
  80cf50:	290ab03a 	or	r5,r5,r4
  80cf54:	28a2b03a 	or	r17,r5,r2
  80cf58:	0021883a 	mov	r16,zero
  80cf5c:	003fa206 	br	80cde8 <__alt_data_end+0xff80cde8>
  80cf60:	2090b03a 	or	r8,r4,r2
  80cf64:	40018e26 	beq	r8,zero,80d5a0 <__subdf3+0x83c>
  80cf68:	1007883a 	mov	r3,r2
  80cf6c:	2023883a 	mov	r17,r4
  80cf70:	888001cc 	andi	r2,r17,7
  80cf74:	103f9e1e 	bne	r2,zero,80cdf0 <__alt_data_end+0xff80cdf0>
  80cf78:	1804977a 	slli	r2,r3,29
  80cf7c:	8822d0fa 	srli	r17,r17,3
  80cf80:	1810d0fa 	srli	r8,r3,3
  80cf84:	9100004c 	andi	r4,r18,1
  80cf88:	1444b03a 	or	r2,r2,r17
  80cf8c:	00c1ffc4 	movi	r3,2047
  80cf90:	80c02826 	beq	r16,r3,80d034 <__subdf3+0x2d0>
  80cf94:	01400434 	movhi	r5,16
  80cf98:	297fffc4 	addi	r5,r5,-1
  80cf9c:	80e0703a 	and	r16,r16,r3
  80cfa0:	414a703a 	and	r5,r8,r5
  80cfa4:	003fa806 	br	80ce48 <__alt_data_end+0xff80ce48>
  80cfa8:	0080630e 	bge	zero,r2,80d138 <__subdf3+0x3d4>
  80cfac:	48003026 	beq	r9,zero,80d070 <__subdf3+0x30c>
  80cfb0:	0101ffc4 	movi	r4,2047
  80cfb4:	813f8c26 	beq	r16,r4,80cde8 <__alt_data_end+0xff80cde8>
  80cfb8:	29402034 	orhi	r5,r5,128
  80cfbc:	01000e04 	movi	r4,56
  80cfc0:	2080a90e 	bge	r4,r2,80d268 <__subdf3+0x504>
  80cfc4:	298cb03a 	or	r6,r5,r6
  80cfc8:	3012c03a 	cmpne	r9,r6,zero
  80cfcc:	0005883a 	mov	r2,zero
  80cfd0:	4c53883a 	add	r9,r9,r17
  80cfd4:	4c63803a 	cmpltu	r17,r9,r17
  80cfd8:	10c7883a 	add	r3,r2,r3
  80cfdc:	88c7883a 	add	r3,r17,r3
  80cfe0:	4823883a 	mov	r17,r9
  80cfe4:	1880202c 	andhi	r2,r3,128
  80cfe8:	1000d026 	beq	r2,zero,80d32c <__subdf3+0x5c8>
  80cfec:	84000044 	addi	r16,r16,1
  80cff0:	0081ffc4 	movi	r2,2047
  80cff4:	8080fe26 	beq	r16,r2,80d3f0 <__subdf3+0x68c>
  80cff8:	00bfe034 	movhi	r2,65408
  80cffc:	10bfffc4 	addi	r2,r2,-1
  80d000:	1886703a 	and	r3,r3,r2
  80d004:	880ad07a 	srli	r5,r17,1
  80d008:	180497fa 	slli	r2,r3,31
  80d00c:	8900004c 	andi	r4,r17,1
  80d010:	2922b03a 	or	r17,r5,r4
  80d014:	1806d07a 	srli	r3,r3,1
  80d018:	1462b03a 	or	r17,r2,r17
  80d01c:	3825883a 	mov	r18,r7
  80d020:	003f7106 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d024:	2984b03a 	or	r2,r5,r6
  80d028:	103f6826 	beq	r2,zero,80cdcc <__alt_data_end+0xff80cdcc>
  80d02c:	39c03fcc 	andi	r7,r7,255
  80d030:	003f6706 	br	80cdd0 <__alt_data_end+0xff80cdd0>
  80d034:	4086b03a 	or	r3,r8,r2
  80d038:	18015226 	beq	r3,zero,80d584 <__subdf3+0x820>
  80d03c:	00c00434 	movhi	r3,16
  80d040:	41400234 	orhi	r5,r8,8
  80d044:	18ffffc4 	addi	r3,r3,-1
  80d048:	28ca703a 	and	r5,r5,r3
  80d04c:	003f7e06 	br	80ce48 <__alt_data_end+0xff80ce48>
  80d050:	10bfffc4 	addi	r2,r2,-1
  80d054:	1000491e 	bne	r2,zero,80d17c <__subdf3+0x418>
  80d058:	898fc83a 	sub	r7,r17,r6
  80d05c:	89e3803a 	cmpltu	r17,r17,r7
  80d060:	1947c83a 	sub	r3,r3,r5
  80d064:	1c47c83a 	sub	r3,r3,r17
  80d068:	3823883a 	mov	r17,r7
  80d06c:	003f9b06 	br	80cedc <__alt_data_end+0xff80cedc>
  80d070:	2988b03a 	or	r4,r5,r6
  80d074:	203f5c26 	beq	r4,zero,80cde8 <__alt_data_end+0xff80cde8>
  80d078:	10bfffc4 	addi	r2,r2,-1
  80d07c:	1000931e 	bne	r2,zero,80d2cc <__subdf3+0x568>
  80d080:	898d883a 	add	r6,r17,r6
  80d084:	3463803a 	cmpltu	r17,r6,r17
  80d088:	1947883a 	add	r3,r3,r5
  80d08c:	88c7883a 	add	r3,r17,r3
  80d090:	3023883a 	mov	r17,r6
  80d094:	003fd306 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d098:	1000541e 	bne	r2,zero,80d1ec <__subdf3+0x488>
  80d09c:	80800044 	addi	r2,r16,1
  80d0a0:	1081ffcc 	andi	r2,r2,2047
  80d0a4:	01000044 	movi	r4,1
  80d0a8:	2080a20e 	bge	r4,r2,80d334 <__subdf3+0x5d0>
  80d0ac:	8989c83a 	sub	r4,r17,r6
  80d0b0:	8905803a 	cmpltu	r2,r17,r4
  80d0b4:	1967c83a 	sub	r19,r3,r5
  80d0b8:	98a7c83a 	sub	r19,r19,r2
  80d0bc:	9880202c 	andhi	r2,r19,128
  80d0c0:	10006326 	beq	r2,zero,80d250 <__subdf3+0x4ec>
  80d0c4:	3463c83a 	sub	r17,r6,r17
  80d0c8:	28c7c83a 	sub	r3,r5,r3
  80d0cc:	344d803a 	cmpltu	r6,r6,r17
  80d0d0:	19a7c83a 	sub	r19,r3,r6
  80d0d4:	3825883a 	mov	r18,r7
  80d0d8:	983f861e 	bne	r19,zero,80cef4 <__alt_data_end+0xff80cef4>
  80d0dc:	8809883a 	mov	r4,r17
  80d0e0:	08011a80 	call	8011a8 <__clzsi2>
  80d0e4:	10800804 	addi	r2,r2,32
  80d0e8:	113ffe04 	addi	r4,r2,-8
  80d0ec:	00c007c4 	movi	r3,31
  80d0f0:	193f850e 	bge	r3,r4,80cf08 <__alt_data_end+0xff80cf08>
  80d0f4:	10bff604 	addi	r2,r2,-40
  80d0f8:	8884983a 	sll	r2,r17,r2
  80d0fc:	0023883a 	mov	r17,zero
  80d100:	243f880e 	bge	r4,r16,80cf24 <__alt_data_end+0xff80cf24>
  80d104:	00ffe034 	movhi	r3,65408
  80d108:	18ffffc4 	addi	r3,r3,-1
  80d10c:	8121c83a 	sub	r16,r16,r4
  80d110:	10c6703a 	and	r3,r2,r3
  80d114:	003f3406 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d118:	9100004c 	andi	r4,r18,1
  80d11c:	000b883a 	mov	r5,zero
  80d120:	0005883a 	mov	r2,zero
  80d124:	003f4806 	br	80ce48 <__alt_data_end+0xff80ce48>
  80d128:	298cb03a 	or	r6,r5,r6
  80d12c:	300cc03a 	cmpne	r6,r6,zero
  80d130:	0005883a 	mov	r2,zero
  80d134:	003f6406 	br	80cec8 <__alt_data_end+0xff80cec8>
  80d138:	10009a1e 	bne	r2,zero,80d3a4 <__subdf3+0x640>
  80d13c:	82400044 	addi	r9,r16,1
  80d140:	4881ffcc 	andi	r2,r9,2047
  80d144:	02800044 	movi	r10,1
  80d148:	5080670e 	bge	r10,r2,80d2e8 <__subdf3+0x584>
  80d14c:	0081ffc4 	movi	r2,2047
  80d150:	4880af26 	beq	r9,r2,80d410 <__subdf3+0x6ac>
  80d154:	898d883a 	add	r6,r17,r6
  80d158:	1945883a 	add	r2,r3,r5
  80d15c:	3447803a 	cmpltu	r3,r6,r17
  80d160:	1887883a 	add	r3,r3,r2
  80d164:	182297fa 	slli	r17,r3,31
  80d168:	300cd07a 	srli	r6,r6,1
  80d16c:	1806d07a 	srli	r3,r3,1
  80d170:	4821883a 	mov	r16,r9
  80d174:	89a2b03a 	or	r17,r17,r6
  80d178:	003f1b06 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d17c:	0101ffc4 	movi	r4,2047
  80d180:	813f441e 	bne	r16,r4,80ce94 <__alt_data_end+0xff80ce94>
  80d184:	003f1806 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d188:	843ff844 	addi	r16,r16,-31
  80d18c:	01400804 	movi	r5,32
  80d190:	1408d83a 	srl	r4,r2,r16
  80d194:	19405026 	beq	r3,r5,80d2d8 <__subdf3+0x574>
  80d198:	01401004 	movi	r5,64
  80d19c:	28c7c83a 	sub	r3,r5,r3
  80d1a0:	10c4983a 	sll	r2,r2,r3
  80d1a4:	88a2b03a 	or	r17,r17,r2
  80d1a8:	8822c03a 	cmpne	r17,r17,zero
  80d1ac:	2462b03a 	or	r17,r4,r17
  80d1b0:	0007883a 	mov	r3,zero
  80d1b4:	0021883a 	mov	r16,zero
  80d1b8:	003f6d06 	br	80cf70 <__alt_data_end+0xff80cf70>
  80d1bc:	11fff804 	addi	r7,r2,-32
  80d1c0:	01000804 	movi	r4,32
  80d1c4:	29ced83a 	srl	r7,r5,r7
  80d1c8:	11004526 	beq	r2,r4,80d2e0 <__subdf3+0x57c>
  80d1cc:	01001004 	movi	r4,64
  80d1d0:	2089c83a 	sub	r4,r4,r2
  80d1d4:	2904983a 	sll	r2,r5,r4
  80d1d8:	118cb03a 	or	r6,r2,r6
  80d1dc:	300cc03a 	cmpne	r6,r6,zero
  80d1e0:	398cb03a 	or	r6,r7,r6
  80d1e4:	0005883a 	mov	r2,zero
  80d1e8:	003f3706 	br	80cec8 <__alt_data_end+0xff80cec8>
  80d1ec:	80002a26 	beq	r16,zero,80d298 <__subdf3+0x534>
  80d1f0:	0101ffc4 	movi	r4,2047
  80d1f4:	49006626 	beq	r9,r4,80d390 <__subdf3+0x62c>
  80d1f8:	0085c83a 	sub	r2,zero,r2
  80d1fc:	18c02034 	orhi	r3,r3,128
  80d200:	01000e04 	movi	r4,56
  80d204:	20807e16 	blt	r4,r2,80d400 <__subdf3+0x69c>
  80d208:	010007c4 	movi	r4,31
  80d20c:	2080e716 	blt	r4,r2,80d5ac <__subdf3+0x848>
  80d210:	01000804 	movi	r4,32
  80d214:	2089c83a 	sub	r4,r4,r2
  80d218:	1914983a 	sll	r10,r3,r4
  80d21c:	8890d83a 	srl	r8,r17,r2
  80d220:	8908983a 	sll	r4,r17,r4
  80d224:	1884d83a 	srl	r2,r3,r2
  80d228:	5222b03a 	or	r17,r10,r8
  80d22c:	2006c03a 	cmpne	r3,r4,zero
  80d230:	88e2b03a 	or	r17,r17,r3
  80d234:	3463c83a 	sub	r17,r6,r17
  80d238:	2885c83a 	sub	r2,r5,r2
  80d23c:	344d803a 	cmpltu	r6,r6,r17
  80d240:	1187c83a 	sub	r3,r2,r6
  80d244:	4821883a 	mov	r16,r9
  80d248:	3825883a 	mov	r18,r7
  80d24c:	003f2306 	br	80cedc <__alt_data_end+0xff80cedc>
  80d250:	24d0b03a 	or	r8,r4,r19
  80d254:	40001b1e 	bne	r8,zero,80d2c4 <__subdf3+0x560>
  80d258:	0005883a 	mov	r2,zero
  80d25c:	0009883a 	mov	r4,zero
  80d260:	0021883a 	mov	r16,zero
  80d264:	003f4906 	br	80cf8c <__alt_data_end+0xff80cf8c>
  80d268:	010007c4 	movi	r4,31
  80d26c:	20803a16 	blt	r4,r2,80d358 <__subdf3+0x5f4>
  80d270:	01000804 	movi	r4,32
  80d274:	2089c83a 	sub	r4,r4,r2
  80d278:	2912983a 	sll	r9,r5,r4
  80d27c:	3090d83a 	srl	r8,r6,r2
  80d280:	3108983a 	sll	r4,r6,r4
  80d284:	2884d83a 	srl	r2,r5,r2
  80d288:	4a12b03a 	or	r9,r9,r8
  80d28c:	2008c03a 	cmpne	r4,r4,zero
  80d290:	4912b03a 	or	r9,r9,r4
  80d294:	003f4e06 	br	80cfd0 <__alt_data_end+0xff80cfd0>
  80d298:	1c48b03a 	or	r4,r3,r17
  80d29c:	20003c26 	beq	r4,zero,80d390 <__subdf3+0x62c>
  80d2a0:	0084303a 	nor	r2,zero,r2
  80d2a4:	1000381e 	bne	r2,zero,80d388 <__subdf3+0x624>
  80d2a8:	3463c83a 	sub	r17,r6,r17
  80d2ac:	28c5c83a 	sub	r2,r5,r3
  80d2b0:	344d803a 	cmpltu	r6,r6,r17
  80d2b4:	1187c83a 	sub	r3,r2,r6
  80d2b8:	4821883a 	mov	r16,r9
  80d2bc:	3825883a 	mov	r18,r7
  80d2c0:	003f0606 	br	80cedc <__alt_data_end+0xff80cedc>
  80d2c4:	2023883a 	mov	r17,r4
  80d2c8:	003f0906 	br	80cef0 <__alt_data_end+0xff80cef0>
  80d2cc:	0101ffc4 	movi	r4,2047
  80d2d0:	813f3a1e 	bne	r16,r4,80cfbc <__alt_data_end+0xff80cfbc>
  80d2d4:	003ec406 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d2d8:	0005883a 	mov	r2,zero
  80d2dc:	003fb106 	br	80d1a4 <__alt_data_end+0xff80d1a4>
  80d2e0:	0005883a 	mov	r2,zero
  80d2e4:	003fbc06 	br	80d1d8 <__alt_data_end+0xff80d1d8>
  80d2e8:	1c44b03a 	or	r2,r3,r17
  80d2ec:	80008e1e 	bne	r16,zero,80d528 <__subdf3+0x7c4>
  80d2f0:	1000c826 	beq	r2,zero,80d614 <__subdf3+0x8b0>
  80d2f4:	2984b03a 	or	r2,r5,r6
  80d2f8:	103ebb26 	beq	r2,zero,80cde8 <__alt_data_end+0xff80cde8>
  80d2fc:	8989883a 	add	r4,r17,r6
  80d300:	1945883a 	add	r2,r3,r5
  80d304:	2447803a 	cmpltu	r3,r4,r17
  80d308:	1887883a 	add	r3,r3,r2
  80d30c:	1880202c 	andhi	r2,r3,128
  80d310:	2023883a 	mov	r17,r4
  80d314:	103f1626 	beq	r2,zero,80cf70 <__alt_data_end+0xff80cf70>
  80d318:	00bfe034 	movhi	r2,65408
  80d31c:	10bfffc4 	addi	r2,r2,-1
  80d320:	5021883a 	mov	r16,r10
  80d324:	1886703a 	and	r3,r3,r2
  80d328:	003eaf06 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d32c:	3825883a 	mov	r18,r7
  80d330:	003f0f06 	br	80cf70 <__alt_data_end+0xff80cf70>
  80d334:	1c44b03a 	or	r2,r3,r17
  80d338:	8000251e 	bne	r16,zero,80d3d0 <__subdf3+0x66c>
  80d33c:	1000661e 	bne	r2,zero,80d4d8 <__subdf3+0x774>
  80d340:	2990b03a 	or	r8,r5,r6
  80d344:	40009626 	beq	r8,zero,80d5a0 <__subdf3+0x83c>
  80d348:	2807883a 	mov	r3,r5
  80d34c:	3023883a 	mov	r17,r6
  80d350:	3825883a 	mov	r18,r7
  80d354:	003ea406 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d358:	127ff804 	addi	r9,r2,-32
  80d35c:	01000804 	movi	r4,32
  80d360:	2a52d83a 	srl	r9,r5,r9
  80d364:	11008c26 	beq	r2,r4,80d598 <__subdf3+0x834>
  80d368:	01001004 	movi	r4,64
  80d36c:	2085c83a 	sub	r2,r4,r2
  80d370:	2884983a 	sll	r2,r5,r2
  80d374:	118cb03a 	or	r6,r2,r6
  80d378:	300cc03a 	cmpne	r6,r6,zero
  80d37c:	4992b03a 	or	r9,r9,r6
  80d380:	0005883a 	mov	r2,zero
  80d384:	003f1206 	br	80cfd0 <__alt_data_end+0xff80cfd0>
  80d388:	0101ffc4 	movi	r4,2047
  80d38c:	493f9c1e 	bne	r9,r4,80d200 <__alt_data_end+0xff80d200>
  80d390:	2807883a 	mov	r3,r5
  80d394:	3023883a 	mov	r17,r6
  80d398:	4821883a 	mov	r16,r9
  80d39c:	3825883a 	mov	r18,r7
  80d3a0:	003e9106 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d3a4:	80001f1e 	bne	r16,zero,80d424 <__subdf3+0x6c0>
  80d3a8:	1c48b03a 	or	r4,r3,r17
  80d3ac:	20005a26 	beq	r4,zero,80d518 <__subdf3+0x7b4>
  80d3b0:	0084303a 	nor	r2,zero,r2
  80d3b4:	1000561e 	bne	r2,zero,80d510 <__subdf3+0x7ac>
  80d3b8:	89a3883a 	add	r17,r17,r6
  80d3bc:	1945883a 	add	r2,r3,r5
  80d3c0:	898d803a 	cmpltu	r6,r17,r6
  80d3c4:	3087883a 	add	r3,r6,r2
  80d3c8:	4821883a 	mov	r16,r9
  80d3cc:	003f0506 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d3d0:	10002b1e 	bne	r2,zero,80d480 <__subdf3+0x71c>
  80d3d4:	2984b03a 	or	r2,r5,r6
  80d3d8:	10008026 	beq	r2,zero,80d5dc <__subdf3+0x878>
  80d3dc:	2807883a 	mov	r3,r5
  80d3e0:	3023883a 	mov	r17,r6
  80d3e4:	3825883a 	mov	r18,r7
  80d3e8:	0401ffc4 	movi	r16,2047
  80d3ec:	003e7e06 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d3f0:	3809883a 	mov	r4,r7
  80d3f4:	0011883a 	mov	r8,zero
  80d3f8:	0005883a 	mov	r2,zero
  80d3fc:	003ee306 	br	80cf8c <__alt_data_end+0xff80cf8c>
  80d400:	1c62b03a 	or	r17,r3,r17
  80d404:	8822c03a 	cmpne	r17,r17,zero
  80d408:	0005883a 	mov	r2,zero
  80d40c:	003f8906 	br	80d234 <__alt_data_end+0xff80d234>
  80d410:	3809883a 	mov	r4,r7
  80d414:	4821883a 	mov	r16,r9
  80d418:	0011883a 	mov	r8,zero
  80d41c:	0005883a 	mov	r2,zero
  80d420:	003eda06 	br	80cf8c <__alt_data_end+0xff80cf8c>
  80d424:	0101ffc4 	movi	r4,2047
  80d428:	49003b26 	beq	r9,r4,80d518 <__subdf3+0x7b4>
  80d42c:	0085c83a 	sub	r2,zero,r2
  80d430:	18c02034 	orhi	r3,r3,128
  80d434:	01000e04 	movi	r4,56
  80d438:	20806e16 	blt	r4,r2,80d5f4 <__subdf3+0x890>
  80d43c:	010007c4 	movi	r4,31
  80d440:	20807716 	blt	r4,r2,80d620 <__subdf3+0x8bc>
  80d444:	01000804 	movi	r4,32
  80d448:	2089c83a 	sub	r4,r4,r2
  80d44c:	1914983a 	sll	r10,r3,r4
  80d450:	8890d83a 	srl	r8,r17,r2
  80d454:	8908983a 	sll	r4,r17,r4
  80d458:	1884d83a 	srl	r2,r3,r2
  80d45c:	5222b03a 	or	r17,r10,r8
  80d460:	2006c03a 	cmpne	r3,r4,zero
  80d464:	88e2b03a 	or	r17,r17,r3
  80d468:	89a3883a 	add	r17,r17,r6
  80d46c:	1145883a 	add	r2,r2,r5
  80d470:	898d803a 	cmpltu	r6,r17,r6
  80d474:	3087883a 	add	r3,r6,r2
  80d478:	4821883a 	mov	r16,r9
  80d47c:	003ed906 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d480:	2984b03a 	or	r2,r5,r6
  80d484:	10004226 	beq	r2,zero,80d590 <__subdf3+0x82c>
  80d488:	1808d0fa 	srli	r4,r3,3
  80d48c:	8822d0fa 	srli	r17,r17,3
  80d490:	1806977a 	slli	r3,r3,29
  80d494:	2080022c 	andhi	r2,r4,8
  80d498:	1c62b03a 	or	r17,r3,r17
  80d49c:	10000826 	beq	r2,zero,80d4c0 <__subdf3+0x75c>
  80d4a0:	2812d0fa 	srli	r9,r5,3
  80d4a4:	4880022c 	andhi	r2,r9,8
  80d4a8:	1000051e 	bne	r2,zero,80d4c0 <__subdf3+0x75c>
  80d4ac:	300cd0fa 	srli	r6,r6,3
  80d4b0:	2804977a 	slli	r2,r5,29
  80d4b4:	4809883a 	mov	r4,r9
  80d4b8:	3825883a 	mov	r18,r7
  80d4bc:	11a2b03a 	or	r17,r2,r6
  80d4c0:	8806d77a 	srli	r3,r17,29
  80d4c4:	200890fa 	slli	r4,r4,3
  80d4c8:	882290fa 	slli	r17,r17,3
  80d4cc:	0401ffc4 	movi	r16,2047
  80d4d0:	1906b03a 	or	r3,r3,r4
  80d4d4:	003e4406 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d4d8:	2984b03a 	or	r2,r5,r6
  80d4dc:	103e4226 	beq	r2,zero,80cde8 <__alt_data_end+0xff80cde8>
  80d4e0:	8989c83a 	sub	r4,r17,r6
  80d4e4:	8911803a 	cmpltu	r8,r17,r4
  80d4e8:	1945c83a 	sub	r2,r3,r5
  80d4ec:	1205c83a 	sub	r2,r2,r8
  80d4f0:	1200202c 	andhi	r8,r2,128
  80d4f4:	403e9a26 	beq	r8,zero,80cf60 <__alt_data_end+0xff80cf60>
  80d4f8:	3463c83a 	sub	r17,r6,r17
  80d4fc:	28c5c83a 	sub	r2,r5,r3
  80d500:	344d803a 	cmpltu	r6,r6,r17
  80d504:	1187c83a 	sub	r3,r2,r6
  80d508:	3825883a 	mov	r18,r7
  80d50c:	003e3606 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d510:	0101ffc4 	movi	r4,2047
  80d514:	493fc71e 	bne	r9,r4,80d434 <__alt_data_end+0xff80d434>
  80d518:	2807883a 	mov	r3,r5
  80d51c:	3023883a 	mov	r17,r6
  80d520:	4821883a 	mov	r16,r9
  80d524:	003e3006 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d528:	10003626 	beq	r2,zero,80d604 <__subdf3+0x8a0>
  80d52c:	2984b03a 	or	r2,r5,r6
  80d530:	10001726 	beq	r2,zero,80d590 <__subdf3+0x82c>
  80d534:	1808d0fa 	srli	r4,r3,3
  80d538:	8822d0fa 	srli	r17,r17,3
  80d53c:	1806977a 	slli	r3,r3,29
  80d540:	2080022c 	andhi	r2,r4,8
  80d544:	1c62b03a 	or	r17,r3,r17
  80d548:	10000726 	beq	r2,zero,80d568 <__subdf3+0x804>
  80d54c:	2812d0fa 	srli	r9,r5,3
  80d550:	4880022c 	andhi	r2,r9,8
  80d554:	1000041e 	bne	r2,zero,80d568 <__subdf3+0x804>
  80d558:	300cd0fa 	srli	r6,r6,3
  80d55c:	2804977a 	slli	r2,r5,29
  80d560:	4809883a 	mov	r4,r9
  80d564:	11a2b03a 	or	r17,r2,r6
  80d568:	8806d77a 	srli	r3,r17,29
  80d56c:	200890fa 	slli	r4,r4,3
  80d570:	882290fa 	slli	r17,r17,3
  80d574:	3825883a 	mov	r18,r7
  80d578:	1906b03a 	or	r3,r3,r4
  80d57c:	0401ffc4 	movi	r16,2047
  80d580:	003e1906 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d584:	000b883a 	mov	r5,zero
  80d588:	0005883a 	mov	r2,zero
  80d58c:	003e2e06 	br	80ce48 <__alt_data_end+0xff80ce48>
  80d590:	0401ffc4 	movi	r16,2047
  80d594:	003e1406 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d598:	0005883a 	mov	r2,zero
  80d59c:	003f7506 	br	80d374 <__alt_data_end+0xff80d374>
  80d5a0:	0005883a 	mov	r2,zero
  80d5a4:	0009883a 	mov	r4,zero
  80d5a8:	003e7806 	br	80cf8c <__alt_data_end+0xff80cf8c>
  80d5ac:	123ff804 	addi	r8,r2,-32
  80d5b0:	01000804 	movi	r4,32
  80d5b4:	1a10d83a 	srl	r8,r3,r8
  80d5b8:	11002526 	beq	r2,r4,80d650 <__subdf3+0x8ec>
  80d5bc:	01001004 	movi	r4,64
  80d5c0:	2085c83a 	sub	r2,r4,r2
  80d5c4:	1884983a 	sll	r2,r3,r2
  80d5c8:	1444b03a 	or	r2,r2,r17
  80d5cc:	1004c03a 	cmpne	r2,r2,zero
  80d5d0:	40a2b03a 	or	r17,r8,r2
  80d5d4:	0005883a 	mov	r2,zero
  80d5d8:	003f1606 	br	80d234 <__alt_data_end+0xff80d234>
  80d5dc:	02000434 	movhi	r8,16
  80d5e0:	0009883a 	mov	r4,zero
  80d5e4:	423fffc4 	addi	r8,r8,-1
  80d5e8:	00bfffc4 	movi	r2,-1
  80d5ec:	0401ffc4 	movi	r16,2047
  80d5f0:	003e6606 	br	80cf8c <__alt_data_end+0xff80cf8c>
  80d5f4:	1c62b03a 	or	r17,r3,r17
  80d5f8:	8822c03a 	cmpne	r17,r17,zero
  80d5fc:	0005883a 	mov	r2,zero
  80d600:	003f9906 	br	80d468 <__alt_data_end+0xff80d468>
  80d604:	2807883a 	mov	r3,r5
  80d608:	3023883a 	mov	r17,r6
  80d60c:	0401ffc4 	movi	r16,2047
  80d610:	003df506 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d614:	2807883a 	mov	r3,r5
  80d618:	3023883a 	mov	r17,r6
  80d61c:	003df206 	br	80cde8 <__alt_data_end+0xff80cde8>
  80d620:	123ff804 	addi	r8,r2,-32
  80d624:	01000804 	movi	r4,32
  80d628:	1a10d83a 	srl	r8,r3,r8
  80d62c:	11000a26 	beq	r2,r4,80d658 <__subdf3+0x8f4>
  80d630:	01001004 	movi	r4,64
  80d634:	2085c83a 	sub	r2,r4,r2
  80d638:	1884983a 	sll	r2,r3,r2
  80d63c:	1444b03a 	or	r2,r2,r17
  80d640:	1004c03a 	cmpne	r2,r2,zero
  80d644:	40a2b03a 	or	r17,r8,r2
  80d648:	0005883a 	mov	r2,zero
  80d64c:	003f8606 	br	80d468 <__alt_data_end+0xff80d468>
  80d650:	0005883a 	mov	r2,zero
  80d654:	003fdc06 	br	80d5c8 <__alt_data_end+0xff80d5c8>
  80d658:	0005883a 	mov	r2,zero
  80d65c:	003ff706 	br	80d63c <__alt_data_end+0xff80d63c>

0080d660 <__fixdfsi>:
  80d660:	280cd53a 	srli	r6,r5,20
  80d664:	00c00434 	movhi	r3,16
  80d668:	18ffffc4 	addi	r3,r3,-1
  80d66c:	3181ffcc 	andi	r6,r6,2047
  80d670:	01c0ff84 	movi	r7,1022
  80d674:	28c6703a 	and	r3,r5,r3
  80d678:	280ad7fa 	srli	r5,r5,31
  80d67c:	3980120e 	bge	r7,r6,80d6c8 <__fixdfsi+0x68>
  80d680:	00810744 	movi	r2,1053
  80d684:	11800c16 	blt	r2,r6,80d6b8 <__fixdfsi+0x58>
  80d688:	00810cc4 	movi	r2,1075
  80d68c:	1185c83a 	sub	r2,r2,r6
  80d690:	01c007c4 	movi	r7,31
  80d694:	18c00434 	orhi	r3,r3,16
  80d698:	38800d16 	blt	r7,r2,80d6d0 <__fixdfsi+0x70>
  80d69c:	31befb44 	addi	r6,r6,-1043
  80d6a0:	2084d83a 	srl	r2,r4,r2
  80d6a4:	1986983a 	sll	r3,r3,r6
  80d6a8:	1884b03a 	or	r2,r3,r2
  80d6ac:	28000726 	beq	r5,zero,80d6cc <__fixdfsi+0x6c>
  80d6b0:	0085c83a 	sub	r2,zero,r2
  80d6b4:	f800283a 	ret
  80d6b8:	00a00034 	movhi	r2,32768
  80d6bc:	10bfffc4 	addi	r2,r2,-1
  80d6c0:	2885883a 	add	r2,r5,r2
  80d6c4:	f800283a 	ret
  80d6c8:	0005883a 	mov	r2,zero
  80d6cc:	f800283a 	ret
  80d6d0:	008104c4 	movi	r2,1043
  80d6d4:	1185c83a 	sub	r2,r2,r6
  80d6d8:	1884d83a 	srl	r2,r3,r2
  80d6dc:	003ff306 	br	80d6ac <__alt_data_end+0xff80d6ac>

0080d6e0 <__floatunsidf>:
  80d6e0:	defffe04 	addi	sp,sp,-8
  80d6e4:	dc000015 	stw	r16,0(sp)
  80d6e8:	dfc00115 	stw	ra,4(sp)
  80d6ec:	2021883a 	mov	r16,r4
  80d6f0:	20002226 	beq	r4,zero,80d77c <__floatunsidf+0x9c>
  80d6f4:	08011a80 	call	8011a8 <__clzsi2>
  80d6f8:	01010784 	movi	r4,1054
  80d6fc:	2089c83a 	sub	r4,r4,r2
  80d700:	01810cc4 	movi	r6,1075
  80d704:	310dc83a 	sub	r6,r6,r4
  80d708:	00c007c4 	movi	r3,31
  80d70c:	1980120e 	bge	r3,r6,80d758 <__floatunsidf+0x78>
  80d710:	00c104c4 	movi	r3,1043
  80d714:	1907c83a 	sub	r3,r3,r4
  80d718:	80ca983a 	sll	r5,r16,r3
  80d71c:	00800434 	movhi	r2,16
  80d720:	10bfffc4 	addi	r2,r2,-1
  80d724:	2101ffcc 	andi	r4,r4,2047
  80d728:	0021883a 	mov	r16,zero
  80d72c:	288a703a 	and	r5,r5,r2
  80d730:	2008953a 	slli	r4,r4,20
  80d734:	00c00434 	movhi	r3,16
  80d738:	18ffffc4 	addi	r3,r3,-1
  80d73c:	28c6703a 	and	r3,r5,r3
  80d740:	8005883a 	mov	r2,r16
  80d744:	1906b03a 	or	r3,r3,r4
  80d748:	dfc00117 	ldw	ra,4(sp)
  80d74c:	dc000017 	ldw	r16,0(sp)
  80d750:	dec00204 	addi	sp,sp,8
  80d754:	f800283a 	ret
  80d758:	00c002c4 	movi	r3,11
  80d75c:	188bc83a 	sub	r5,r3,r2
  80d760:	814ad83a 	srl	r5,r16,r5
  80d764:	00c00434 	movhi	r3,16
  80d768:	18ffffc4 	addi	r3,r3,-1
  80d76c:	81a0983a 	sll	r16,r16,r6
  80d770:	2101ffcc 	andi	r4,r4,2047
  80d774:	28ca703a 	and	r5,r5,r3
  80d778:	003fed06 	br	80d730 <__alt_data_end+0xff80d730>
  80d77c:	0009883a 	mov	r4,zero
  80d780:	000b883a 	mov	r5,zero
  80d784:	003fea06 	br	80d730 <__alt_data_end+0xff80d730>

0080d788 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d788:	defffe04 	addi	sp,sp,-8
  80d78c:	dfc00115 	stw	ra,4(sp)
  80d790:	df000015 	stw	fp,0(sp)
  80d794:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d798:	d0a00d17 	ldw	r2,-32716(gp)
  80d79c:	10000326 	beq	r2,zero,80d7ac <alt_get_errno+0x24>
  80d7a0:	d0a00d17 	ldw	r2,-32716(gp)
  80d7a4:	103ee83a 	callr	r2
  80d7a8:	00000106 	br	80d7b0 <alt_get_errno+0x28>
  80d7ac:	d0a70d04 	addi	r2,gp,-25548
}
  80d7b0:	e037883a 	mov	sp,fp
  80d7b4:	dfc00117 	ldw	ra,4(sp)
  80d7b8:	df000017 	ldw	fp,0(sp)
  80d7bc:	dec00204 	addi	sp,sp,8
  80d7c0:	f800283a 	ret

0080d7c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80d7c4:	defffb04 	addi	sp,sp,-20
  80d7c8:	dfc00415 	stw	ra,16(sp)
  80d7cc:	df000315 	stw	fp,12(sp)
  80d7d0:	df000304 	addi	fp,sp,12
  80d7d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80d7d8:	e0bfff17 	ldw	r2,-4(fp)
  80d7dc:	10000816 	blt	r2,zero,80d800 <close+0x3c>
  80d7e0:	01400304 	movi	r5,12
  80d7e4:	e13fff17 	ldw	r4,-4(fp)
  80d7e8:	080b8a80 	call	80b8a8 <__mulsi3>
  80d7ec:	1007883a 	mov	r3,r2
  80d7f0:	00802074 	movhi	r2,129
  80d7f4:	10867f04 	addi	r2,r2,6652
  80d7f8:	1885883a 	add	r2,r3,r2
  80d7fc:	00000106 	br	80d804 <close+0x40>
  80d800:	0005883a 	mov	r2,zero
  80d804:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80d808:	e0bffd17 	ldw	r2,-12(fp)
  80d80c:	10001926 	beq	r2,zero,80d874 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80d810:	e0bffd17 	ldw	r2,-12(fp)
  80d814:	10800017 	ldw	r2,0(r2)
  80d818:	10800417 	ldw	r2,16(r2)
  80d81c:	10000626 	beq	r2,zero,80d838 <close+0x74>
  80d820:	e0bffd17 	ldw	r2,-12(fp)
  80d824:	10800017 	ldw	r2,0(r2)
  80d828:	10800417 	ldw	r2,16(r2)
  80d82c:	e13ffd17 	ldw	r4,-12(fp)
  80d830:	103ee83a 	callr	r2
  80d834:	00000106 	br	80d83c <close+0x78>
  80d838:	0005883a 	mov	r2,zero
  80d83c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80d840:	e13fff17 	ldw	r4,-4(fp)
  80d844:	080dfcc0 	call	80dfcc <alt_release_fd>
    if (rval < 0)
  80d848:	e0bffe17 	ldw	r2,-8(fp)
  80d84c:	1000070e 	bge	r2,zero,80d86c <close+0xa8>
    {
      ALT_ERRNO = -rval;
  80d850:	080d7880 	call	80d788 <alt_get_errno>
  80d854:	1007883a 	mov	r3,r2
  80d858:	e0bffe17 	ldw	r2,-8(fp)
  80d85c:	0085c83a 	sub	r2,zero,r2
  80d860:	18800015 	stw	r2,0(r3)
      return -1;
  80d864:	00bfffc4 	movi	r2,-1
  80d868:	00000706 	br	80d888 <close+0xc4>
    }
    return 0;
  80d86c:	0005883a 	mov	r2,zero
  80d870:	00000506 	br	80d888 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d874:	080d7880 	call	80d788 <alt_get_errno>
  80d878:	1007883a 	mov	r3,r2
  80d87c:	00801444 	movi	r2,81
  80d880:	18800015 	stw	r2,0(r3)
    return -1;
  80d884:	00bfffc4 	movi	r2,-1
  }
}
  80d888:	e037883a 	mov	sp,fp
  80d88c:	dfc00117 	ldw	ra,4(sp)
  80d890:	df000017 	ldw	fp,0(sp)
  80d894:	dec00204 	addi	sp,sp,8
  80d898:	f800283a 	ret

0080d89c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80d89c:	defffc04 	addi	sp,sp,-16
  80d8a0:	df000315 	stw	fp,12(sp)
  80d8a4:	df000304 	addi	fp,sp,12
  80d8a8:	e13ffd15 	stw	r4,-12(fp)
  80d8ac:	e17ffe15 	stw	r5,-8(fp)
  80d8b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80d8b4:	e0bfff17 	ldw	r2,-4(fp)
}
  80d8b8:	e037883a 	mov	sp,fp
  80d8bc:	df000017 	ldw	fp,0(sp)
  80d8c0:	dec00104 	addi	sp,sp,4
  80d8c4:	f800283a 	ret

0080d8c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d8c8:	defffe04 	addi	sp,sp,-8
  80d8cc:	dfc00115 	stw	ra,4(sp)
  80d8d0:	df000015 	stw	fp,0(sp)
  80d8d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d8d8:	d0a00d17 	ldw	r2,-32716(gp)
  80d8dc:	10000326 	beq	r2,zero,80d8ec <alt_get_errno+0x24>
  80d8e0:	d0a00d17 	ldw	r2,-32716(gp)
  80d8e4:	103ee83a 	callr	r2
  80d8e8:	00000106 	br	80d8f0 <alt_get_errno+0x28>
  80d8ec:	d0a70d04 	addi	r2,gp,-25548
}
  80d8f0:	e037883a 	mov	sp,fp
  80d8f4:	dfc00117 	ldw	ra,4(sp)
  80d8f8:	df000017 	ldw	fp,0(sp)
  80d8fc:	dec00204 	addi	sp,sp,8
  80d900:	f800283a 	ret

0080d904 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
  80d904:	defffc04 	addi	sp,sp,-16
  80d908:	dfc00315 	stw	ra,12(sp)
  80d90c:	df000215 	stw	fp,8(sp)
  80d910:	df000204 	addi	fp,sp,8
  80d914:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
  80d918:	d1600b04 	addi	r5,gp,-32724
  80d91c:	e13fff17 	ldw	r4,-4(fp)
  80d920:	080d9580 	call	80d958 <alt_find_dev>
  80d924:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
  80d928:	e0bffe17 	ldw	r2,-8(fp)
  80d92c:	1000041e 	bne	r2,zero,80d940 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
  80d930:	080d8c80 	call	80d8c8 <alt_get_errno>
  80d934:	1007883a 	mov	r3,r2
  80d938:	008004c4 	movi	r2,19
  80d93c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80d940:	e0bffe17 	ldw	r2,-8(fp)
}
  80d944:	e037883a 	mov	sp,fp
  80d948:	dfc00117 	ldw	ra,4(sp)
  80d94c:	df000017 	ldw	fp,0(sp)
  80d950:	dec00204 	addi	sp,sp,8
  80d954:	f800283a 	ret

0080d958 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80d958:	defffa04 	addi	sp,sp,-24
  80d95c:	dfc00515 	stw	ra,20(sp)
  80d960:	df000415 	stw	fp,16(sp)
  80d964:	df000404 	addi	fp,sp,16
  80d968:	e13ffe15 	stw	r4,-8(fp)
  80d96c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80d970:	e0bfff17 	ldw	r2,-4(fp)
  80d974:	10800017 	ldw	r2,0(r2)
  80d978:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80d97c:	e13ffe17 	ldw	r4,-8(fp)
  80d980:	0801bd40 	call	801bd4 <strlen>
  80d984:	10800044 	addi	r2,r2,1
  80d988:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d98c:	00000d06 	br	80d9c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80d990:	e0bffc17 	ldw	r2,-16(fp)
  80d994:	10800217 	ldw	r2,8(r2)
  80d998:	e0fffd17 	ldw	r3,-12(fp)
  80d99c:	180d883a 	mov	r6,r3
  80d9a0:	e17ffe17 	ldw	r5,-8(fp)
  80d9a4:	1009883a 	mov	r4,r2
  80d9a8:	08109b80 	call	8109b8 <memcmp>
  80d9ac:	1000021e 	bne	r2,zero,80d9b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80d9b0:	e0bffc17 	ldw	r2,-16(fp)
  80d9b4:	00000706 	br	80d9d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80d9b8:	e0bffc17 	ldw	r2,-16(fp)
  80d9bc:	10800017 	ldw	r2,0(r2)
  80d9c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d9c4:	e0fffc17 	ldw	r3,-16(fp)
  80d9c8:	e0bfff17 	ldw	r2,-4(fp)
  80d9cc:	18bff01e 	bne	r3,r2,80d990 <__alt_data_end+0xff80d990>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80d9d0:	0005883a 	mov	r2,zero
}
  80d9d4:	e037883a 	mov	sp,fp
  80d9d8:	dfc00117 	ldw	ra,4(sp)
  80d9dc:	df000017 	ldw	fp,0(sp)
  80d9e0:	dec00204 	addi	sp,sp,8
  80d9e4:	f800283a 	ret

0080d9e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d9e8:	defffe04 	addi	sp,sp,-8
  80d9ec:	dfc00115 	stw	ra,4(sp)
  80d9f0:	df000015 	stw	fp,0(sp)
  80d9f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d9f8:	d0a00d17 	ldw	r2,-32716(gp)
  80d9fc:	10000326 	beq	r2,zero,80da0c <alt_get_errno+0x24>
  80da00:	d0a00d17 	ldw	r2,-32716(gp)
  80da04:	103ee83a 	callr	r2
  80da08:	00000106 	br	80da10 <alt_get_errno+0x28>
  80da0c:	d0a70d04 	addi	r2,gp,-25548
}
  80da10:	e037883a 	mov	sp,fp
  80da14:	dfc00117 	ldw	ra,4(sp)
  80da18:	df000017 	ldw	fp,0(sp)
  80da1c:	dec00204 	addi	sp,sp,8
  80da20:	f800283a 	ret

0080da24 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80da24:	defffb04 	addi	sp,sp,-20
  80da28:	dfc00415 	stw	ra,16(sp)
  80da2c:	df000315 	stw	fp,12(sp)
  80da30:	df000304 	addi	fp,sp,12
  80da34:	e13ffe15 	stw	r4,-8(fp)
  80da38:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80da3c:	e0bffe17 	ldw	r2,-8(fp)
  80da40:	10000816 	blt	r2,zero,80da64 <fstat+0x40>
  80da44:	01400304 	movi	r5,12
  80da48:	e13ffe17 	ldw	r4,-8(fp)
  80da4c:	080b8a80 	call	80b8a8 <__mulsi3>
  80da50:	1007883a 	mov	r3,r2
  80da54:	00802074 	movhi	r2,129
  80da58:	10867f04 	addi	r2,r2,6652
  80da5c:	1885883a 	add	r2,r3,r2
  80da60:	00000106 	br	80da68 <fstat+0x44>
  80da64:	0005883a 	mov	r2,zero
  80da68:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80da6c:	e0bffd17 	ldw	r2,-12(fp)
  80da70:	10001026 	beq	r2,zero,80dab4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80da74:	e0bffd17 	ldw	r2,-12(fp)
  80da78:	10800017 	ldw	r2,0(r2)
  80da7c:	10800817 	ldw	r2,32(r2)
  80da80:	10000726 	beq	r2,zero,80daa0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  80da84:	e0bffd17 	ldw	r2,-12(fp)
  80da88:	10800017 	ldw	r2,0(r2)
  80da8c:	10800817 	ldw	r2,32(r2)
  80da90:	e17fff17 	ldw	r5,-4(fp)
  80da94:	e13ffd17 	ldw	r4,-12(fp)
  80da98:	103ee83a 	callr	r2
  80da9c:	00000a06 	br	80dac8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80daa0:	e0bfff17 	ldw	r2,-4(fp)
  80daa4:	00c80004 	movi	r3,8192
  80daa8:	10c00115 	stw	r3,4(r2)
      return 0;
  80daac:	0005883a 	mov	r2,zero
  80dab0:	00000506 	br	80dac8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dab4:	080d9e80 	call	80d9e8 <alt_get_errno>
  80dab8:	1007883a 	mov	r3,r2
  80dabc:	00801444 	movi	r2,81
  80dac0:	18800015 	stw	r2,0(r3)
    return -1;
  80dac4:	00bfffc4 	movi	r2,-1
  }
}
  80dac8:	e037883a 	mov	sp,fp
  80dacc:	dfc00117 	ldw	ra,4(sp)
  80dad0:	df000017 	ldw	fp,0(sp)
  80dad4:	dec00204 	addi	sp,sp,8
  80dad8:	f800283a 	ret

0080dadc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dadc:	defffe04 	addi	sp,sp,-8
  80dae0:	dfc00115 	stw	ra,4(sp)
  80dae4:	df000015 	stw	fp,0(sp)
  80dae8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80daec:	d0a00d17 	ldw	r2,-32716(gp)
  80daf0:	10000326 	beq	r2,zero,80db00 <alt_get_errno+0x24>
  80daf4:	d0a00d17 	ldw	r2,-32716(gp)
  80daf8:	103ee83a 	callr	r2
  80dafc:	00000106 	br	80db04 <alt_get_errno+0x28>
  80db00:	d0a70d04 	addi	r2,gp,-25548
}
  80db04:	e037883a 	mov	sp,fp
  80db08:	dfc00117 	ldw	ra,4(sp)
  80db0c:	df000017 	ldw	fp,0(sp)
  80db10:	dec00204 	addi	sp,sp,8
  80db14:	f800283a 	ret

0080db18 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80db18:	deffed04 	addi	sp,sp,-76
  80db1c:	dfc01215 	stw	ra,72(sp)
  80db20:	df001115 	stw	fp,68(sp)
  80db24:	df001104 	addi	fp,sp,68
  80db28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80db2c:	e0bfff17 	ldw	r2,-4(fp)
  80db30:	10000816 	blt	r2,zero,80db54 <isatty+0x3c>
  80db34:	01400304 	movi	r5,12
  80db38:	e13fff17 	ldw	r4,-4(fp)
  80db3c:	080b8a80 	call	80b8a8 <__mulsi3>
  80db40:	1007883a 	mov	r3,r2
  80db44:	00802074 	movhi	r2,129
  80db48:	10867f04 	addi	r2,r2,6652
  80db4c:	1885883a 	add	r2,r3,r2
  80db50:	00000106 	br	80db58 <isatty+0x40>
  80db54:	0005883a 	mov	r2,zero
  80db58:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80db5c:	e0bfef17 	ldw	r2,-68(fp)
  80db60:	10000e26 	beq	r2,zero,80db9c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80db64:	e0bfef17 	ldw	r2,-68(fp)
  80db68:	10800017 	ldw	r2,0(r2)
  80db6c:	10800817 	ldw	r2,32(r2)
  80db70:	1000021e 	bne	r2,zero,80db7c <isatty+0x64>
    {
      return 1;
  80db74:	00800044 	movi	r2,1
  80db78:	00000d06 	br	80dbb0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80db7c:	e0bff004 	addi	r2,fp,-64
  80db80:	100b883a 	mov	r5,r2
  80db84:	e13fff17 	ldw	r4,-4(fp)
  80db88:	080da240 	call	80da24 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80db8c:	e0bff117 	ldw	r2,-60(fp)
  80db90:	10880020 	cmpeqi	r2,r2,8192
  80db94:	10803fcc 	andi	r2,r2,255
  80db98:	00000506 	br	80dbb0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80db9c:	080dadc0 	call	80dadc <alt_get_errno>
  80dba0:	1007883a 	mov	r3,r2
  80dba4:	00801444 	movi	r2,81
  80dba8:	18800015 	stw	r2,0(r3)
    return 0;
  80dbac:	0005883a 	mov	r2,zero
  }
}
  80dbb0:	e037883a 	mov	sp,fp
  80dbb4:	dfc00117 	ldw	ra,4(sp)
  80dbb8:	df000017 	ldw	fp,0(sp)
  80dbbc:	dec00204 	addi	sp,sp,8
  80dbc0:	f800283a 	ret

0080dbc4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80dbc4:	defffc04 	addi	sp,sp,-16
  80dbc8:	df000315 	stw	fp,12(sp)
  80dbcc:	df000304 	addi	fp,sp,12
  80dbd0:	e13ffd15 	stw	r4,-12(fp)
  80dbd4:	e17ffe15 	stw	r5,-8(fp)
  80dbd8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80dbdc:	e0fffe17 	ldw	r3,-8(fp)
  80dbe0:	e0bffd17 	ldw	r2,-12(fp)
  80dbe4:	18800c26 	beq	r3,r2,80dc18 <alt_load_section+0x54>
  {
    while( to != end )
  80dbe8:	00000806 	br	80dc0c <alt_load_section+0x48>
    {
      *to++ = *from++;
  80dbec:	e0bffe17 	ldw	r2,-8(fp)
  80dbf0:	10c00104 	addi	r3,r2,4
  80dbf4:	e0fffe15 	stw	r3,-8(fp)
  80dbf8:	e0fffd17 	ldw	r3,-12(fp)
  80dbfc:	19000104 	addi	r4,r3,4
  80dc00:	e13ffd15 	stw	r4,-12(fp)
  80dc04:	18c00017 	ldw	r3,0(r3)
  80dc08:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80dc0c:	e0fffe17 	ldw	r3,-8(fp)
  80dc10:	e0bfff17 	ldw	r2,-4(fp)
  80dc14:	18bff51e 	bne	r3,r2,80dbec <__alt_data_end+0xff80dbec>
    {
      *to++ = *from++;
    }
  }
}
  80dc18:	0001883a 	nop
  80dc1c:	e037883a 	mov	sp,fp
  80dc20:	df000017 	ldw	fp,0(sp)
  80dc24:	dec00104 	addi	sp,sp,4
  80dc28:	f800283a 	ret

0080dc2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80dc2c:	defffe04 	addi	sp,sp,-8
  80dc30:	dfc00115 	stw	ra,4(sp)
  80dc34:	df000015 	stw	fp,0(sp)
  80dc38:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80dc3c:	01802074 	movhi	r6,129
  80dc40:	318b4204 	addi	r6,r6,11528
  80dc44:	01402074 	movhi	r5,129
  80dc48:	29444c04 	addi	r5,r5,4400
  80dc4c:	01002074 	movhi	r4,129
  80dc50:	210b4204 	addi	r4,r4,11528
  80dc54:	080dbc40 	call	80dbc4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80dc58:	01802034 	movhi	r6,128
  80dc5c:	31809104 	addi	r6,r6,580
  80dc60:	01402034 	movhi	r5,128
  80dc64:	29400804 	addi	r5,r5,32
  80dc68:	01002034 	movhi	r4,128
  80dc6c:	21000804 	addi	r4,r4,32
  80dc70:	080dbc40 	call	80dbc4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80dc74:	01802074 	movhi	r6,129
  80dc78:	31844c04 	addi	r6,r6,4400
  80dc7c:	01402074 	movhi	r5,129
  80dc80:	29434004 	addi	r5,r5,3328
  80dc84:	01002074 	movhi	r4,129
  80dc88:	21034004 	addi	r4,r4,3328
  80dc8c:	080dbc40 	call	80dbc4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80dc90:	080fb7c0 	call	80fb7c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80dc94:	080fdf40 	call	80fdf4 <alt_icache_flush_all>
}
  80dc98:	0001883a 	nop
  80dc9c:	e037883a 	mov	sp,fp
  80dca0:	dfc00117 	ldw	ra,4(sp)
  80dca4:	df000017 	ldw	fp,0(sp)
  80dca8:	dec00204 	addi	sp,sp,8
  80dcac:	f800283a 	ret

0080dcb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dcb0:	defffe04 	addi	sp,sp,-8
  80dcb4:	dfc00115 	stw	ra,4(sp)
  80dcb8:	df000015 	stw	fp,0(sp)
  80dcbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dcc0:	d0a00d17 	ldw	r2,-32716(gp)
  80dcc4:	10000326 	beq	r2,zero,80dcd4 <alt_get_errno+0x24>
  80dcc8:	d0a00d17 	ldw	r2,-32716(gp)
  80dccc:	103ee83a 	callr	r2
  80dcd0:	00000106 	br	80dcd8 <alt_get_errno+0x28>
  80dcd4:	d0a70d04 	addi	r2,gp,-25548
}
  80dcd8:	e037883a 	mov	sp,fp
  80dcdc:	dfc00117 	ldw	ra,4(sp)
  80dce0:	df000017 	ldw	fp,0(sp)
  80dce4:	dec00204 	addi	sp,sp,8
  80dce8:	f800283a 	ret

0080dcec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80dcec:	defff904 	addi	sp,sp,-28
  80dcf0:	dfc00615 	stw	ra,24(sp)
  80dcf4:	df000515 	stw	fp,20(sp)
  80dcf8:	df000504 	addi	fp,sp,20
  80dcfc:	e13ffd15 	stw	r4,-12(fp)
  80dd00:	e17ffe15 	stw	r5,-8(fp)
  80dd04:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80dd08:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dd0c:	e0bffd17 	ldw	r2,-12(fp)
  80dd10:	10000816 	blt	r2,zero,80dd34 <lseek+0x48>
  80dd14:	01400304 	movi	r5,12
  80dd18:	e13ffd17 	ldw	r4,-12(fp)
  80dd1c:	080b8a80 	call	80b8a8 <__mulsi3>
  80dd20:	1007883a 	mov	r3,r2
  80dd24:	00802074 	movhi	r2,129
  80dd28:	10867f04 	addi	r2,r2,6652
  80dd2c:	1885883a 	add	r2,r3,r2
  80dd30:	00000106 	br	80dd38 <lseek+0x4c>
  80dd34:	0005883a 	mov	r2,zero
  80dd38:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80dd3c:	e0bffc17 	ldw	r2,-16(fp)
  80dd40:	10001026 	beq	r2,zero,80dd84 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80dd44:	e0bffc17 	ldw	r2,-16(fp)
  80dd48:	10800017 	ldw	r2,0(r2)
  80dd4c:	10800717 	ldw	r2,28(r2)
  80dd50:	10000926 	beq	r2,zero,80dd78 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80dd54:	e0bffc17 	ldw	r2,-16(fp)
  80dd58:	10800017 	ldw	r2,0(r2)
  80dd5c:	10800717 	ldw	r2,28(r2)
  80dd60:	e1bfff17 	ldw	r6,-4(fp)
  80dd64:	e17ffe17 	ldw	r5,-8(fp)
  80dd68:	e13ffc17 	ldw	r4,-16(fp)
  80dd6c:	103ee83a 	callr	r2
  80dd70:	e0bffb15 	stw	r2,-20(fp)
  80dd74:	00000506 	br	80dd8c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80dd78:	00bfde84 	movi	r2,-134
  80dd7c:	e0bffb15 	stw	r2,-20(fp)
  80dd80:	00000206 	br	80dd8c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80dd84:	00bfebc4 	movi	r2,-81
  80dd88:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80dd8c:	e0bffb17 	ldw	r2,-20(fp)
  80dd90:	1000070e 	bge	r2,zero,80ddb0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  80dd94:	080dcb00 	call	80dcb0 <alt_get_errno>
  80dd98:	1007883a 	mov	r3,r2
  80dd9c:	e0bffb17 	ldw	r2,-20(fp)
  80dda0:	0085c83a 	sub	r2,zero,r2
  80dda4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80dda8:	00bfffc4 	movi	r2,-1
  80ddac:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80ddb0:	e0bffb17 	ldw	r2,-20(fp)
}
  80ddb4:	e037883a 	mov	sp,fp
  80ddb8:	dfc00117 	ldw	ra,4(sp)
  80ddbc:	df000017 	ldw	fp,0(sp)
  80ddc0:	dec00204 	addi	sp,sp,8
  80ddc4:	f800283a 	ret

0080ddc8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80ddc8:	defffd04 	addi	sp,sp,-12
  80ddcc:	dfc00215 	stw	ra,8(sp)
  80ddd0:	df000115 	stw	fp,4(sp)
  80ddd4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80ddd8:	0009883a 	mov	r4,zero
  80dddc:	080e2700 	call	80e270 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80dde0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80dde4:	080e2a80 	call	80e2a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80dde8:	01802074 	movhi	r6,129
  80ddec:	31844104 	addi	r6,r6,4356
  80ddf0:	01402074 	movhi	r5,129
  80ddf4:	29444104 	addi	r5,r5,4356
  80ddf8:	01002074 	movhi	r4,129
  80ddfc:	21044104 	addi	r4,r4,4356
  80de00:	08101ac0 	call	8101ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80de04:	080fd340 	call	80fd34 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80de08:	01002074 	movhi	r4,129
  80de0c:	213f6504 	addi	r4,r4,-620
  80de10:	081096c0 	call	81096c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80de14:	d0a71117 	ldw	r2,-25532(gp)
  80de18:	d0e71217 	ldw	r3,-25528(gp)
  80de1c:	d1271317 	ldw	r4,-25524(gp)
  80de20:	200d883a 	mov	r6,r4
  80de24:	180b883a 	mov	r5,r3
  80de28:	1009883a 	mov	r4,r2
  80de2c:	08004680 	call	800468 <main>
  80de30:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80de34:	01000044 	movi	r4,1
  80de38:	080d7c40 	call	80d7c4 <close>
  exit (result);
  80de3c:	e13fff17 	ldw	r4,-4(fp)
  80de40:	08109800 	call	810980 <exit>

0080de44 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80de44:	defffe04 	addi	sp,sp,-8
  80de48:	df000115 	stw	fp,4(sp)
  80de4c:	df000104 	addi	fp,sp,4
  80de50:	e13fff15 	stw	r4,-4(fp)
}
  80de54:	0001883a 	nop
  80de58:	e037883a 	mov	sp,fp
  80de5c:	df000017 	ldw	fp,0(sp)
  80de60:	dec00104 	addi	sp,sp,4
  80de64:	f800283a 	ret

0080de68 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80de68:	defffe04 	addi	sp,sp,-8
  80de6c:	df000115 	stw	fp,4(sp)
  80de70:	df000104 	addi	fp,sp,4
  80de74:	e13fff15 	stw	r4,-4(fp)
}
  80de78:	0001883a 	nop
  80de7c:	e037883a 	mov	sp,fp
  80de80:	df000017 	ldw	fp,0(sp)
  80de84:	dec00104 	addi	sp,sp,4
  80de88:	f800283a 	ret

0080de8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80de8c:	defffe04 	addi	sp,sp,-8
  80de90:	dfc00115 	stw	ra,4(sp)
  80de94:	df000015 	stw	fp,0(sp)
  80de98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80de9c:	d0a00d17 	ldw	r2,-32716(gp)
  80dea0:	10000326 	beq	r2,zero,80deb0 <alt_get_errno+0x24>
  80dea4:	d0a00d17 	ldw	r2,-32716(gp)
  80dea8:	103ee83a 	callr	r2
  80deac:	00000106 	br	80deb4 <alt_get_errno+0x28>
  80deb0:	d0a70d04 	addi	r2,gp,-25548
}
  80deb4:	e037883a 	mov	sp,fp
  80deb8:	dfc00117 	ldw	ra,4(sp)
  80debc:	df000017 	ldw	fp,0(sp)
  80dec0:	dec00204 	addi	sp,sp,8
  80dec4:	f800283a 	ret

0080dec8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80dec8:	defff904 	addi	sp,sp,-28
  80decc:	dfc00615 	stw	ra,24(sp)
  80ded0:	df000515 	stw	fp,20(sp)
  80ded4:	df000504 	addi	fp,sp,20
  80ded8:	e13ffd15 	stw	r4,-12(fp)
  80dedc:	e17ffe15 	stw	r5,-8(fp)
  80dee0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dee4:	e0bffd17 	ldw	r2,-12(fp)
  80dee8:	10000816 	blt	r2,zero,80df0c <read+0x44>
  80deec:	01400304 	movi	r5,12
  80def0:	e13ffd17 	ldw	r4,-12(fp)
  80def4:	080b8a80 	call	80b8a8 <__mulsi3>
  80def8:	1007883a 	mov	r3,r2
  80defc:	00802074 	movhi	r2,129
  80df00:	10867f04 	addi	r2,r2,6652
  80df04:	1885883a 	add	r2,r3,r2
  80df08:	00000106 	br	80df10 <read+0x48>
  80df0c:	0005883a 	mov	r2,zero
  80df10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80df14:	e0bffb17 	ldw	r2,-20(fp)
  80df18:	10002226 	beq	r2,zero,80dfa4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80df1c:	e0bffb17 	ldw	r2,-20(fp)
  80df20:	10800217 	ldw	r2,8(r2)
  80df24:	108000cc 	andi	r2,r2,3
  80df28:	10800060 	cmpeqi	r2,r2,1
  80df2c:	1000181e 	bne	r2,zero,80df90 <read+0xc8>
        (fd->dev->read))
  80df30:	e0bffb17 	ldw	r2,-20(fp)
  80df34:	10800017 	ldw	r2,0(r2)
  80df38:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80df3c:	10001426 	beq	r2,zero,80df90 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80df40:	e0bffb17 	ldw	r2,-20(fp)
  80df44:	10800017 	ldw	r2,0(r2)
  80df48:	10800517 	ldw	r2,20(r2)
  80df4c:	e0ffff17 	ldw	r3,-4(fp)
  80df50:	180d883a 	mov	r6,r3
  80df54:	e17ffe17 	ldw	r5,-8(fp)
  80df58:	e13ffb17 	ldw	r4,-20(fp)
  80df5c:	103ee83a 	callr	r2
  80df60:	e0bffc15 	stw	r2,-16(fp)
  80df64:	e0bffc17 	ldw	r2,-16(fp)
  80df68:	1000070e 	bge	r2,zero,80df88 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  80df6c:	080de8c0 	call	80de8c <alt_get_errno>
  80df70:	1007883a 	mov	r3,r2
  80df74:	e0bffc17 	ldw	r2,-16(fp)
  80df78:	0085c83a 	sub	r2,zero,r2
  80df7c:	18800015 	stw	r2,0(r3)
          return -1;
  80df80:	00bfffc4 	movi	r2,-1
  80df84:	00000c06 	br	80dfb8 <read+0xf0>
        }
        return rval;
  80df88:	e0bffc17 	ldw	r2,-16(fp)
  80df8c:	00000a06 	br	80dfb8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80df90:	080de8c0 	call	80de8c <alt_get_errno>
  80df94:	1007883a 	mov	r3,r2
  80df98:	00800344 	movi	r2,13
  80df9c:	18800015 	stw	r2,0(r3)
  80dfa0:	00000406 	br	80dfb4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80dfa4:	080de8c0 	call	80de8c <alt_get_errno>
  80dfa8:	1007883a 	mov	r3,r2
  80dfac:	00801444 	movi	r2,81
  80dfb0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80dfb4:	00bfffc4 	movi	r2,-1
}
  80dfb8:	e037883a 	mov	sp,fp
  80dfbc:	dfc00117 	ldw	ra,4(sp)
  80dfc0:	df000017 	ldw	fp,0(sp)
  80dfc4:	dec00204 	addi	sp,sp,8
  80dfc8:	f800283a 	ret

0080dfcc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80dfcc:	defffc04 	addi	sp,sp,-16
  80dfd0:	dfc00315 	stw	ra,12(sp)
  80dfd4:	df000215 	stw	fp,8(sp)
  80dfd8:	dc000115 	stw	r16,4(sp)
  80dfdc:	df000204 	addi	fp,sp,8
  80dfe0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80dfe4:	e0bffe17 	ldw	r2,-8(fp)
  80dfe8:	108000d0 	cmplti	r2,r2,3
  80dfec:	1000111e 	bne	r2,zero,80e034 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  80dff0:	04002074 	movhi	r16,129
  80dff4:	84067f04 	addi	r16,r16,6652
  80dff8:	e0bffe17 	ldw	r2,-8(fp)
  80dffc:	01400304 	movi	r5,12
  80e000:	1009883a 	mov	r4,r2
  80e004:	080b8a80 	call	80b8a8 <__mulsi3>
  80e008:	8085883a 	add	r2,r16,r2
  80e00c:	10800204 	addi	r2,r2,8
  80e010:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e014:	04002074 	movhi	r16,129
  80e018:	84067f04 	addi	r16,r16,6652
  80e01c:	e0bffe17 	ldw	r2,-8(fp)
  80e020:	01400304 	movi	r5,12
  80e024:	1009883a 	mov	r4,r2
  80e028:	080b8a80 	call	80b8a8 <__mulsi3>
  80e02c:	8085883a 	add	r2,r16,r2
  80e030:	10000015 	stw	zero,0(r2)
  }
}
  80e034:	0001883a 	nop
  80e038:	e6ffff04 	addi	sp,fp,-4
  80e03c:	dfc00217 	ldw	ra,8(sp)
  80e040:	df000117 	ldw	fp,4(sp)
  80e044:	dc000017 	ldw	r16,0(sp)
  80e048:	dec00304 	addi	sp,sp,12
  80e04c:	f800283a 	ret

0080e050 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e050:	defff904 	addi	sp,sp,-28
  80e054:	df000615 	stw	fp,24(sp)
  80e058:	df000604 	addi	fp,sp,24
  80e05c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e060:	0005303a 	rdctl	r2,status
  80e064:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e068:	e0fffe17 	ldw	r3,-8(fp)
  80e06c:	00bfff84 	movi	r2,-2
  80e070:	1884703a 	and	r2,r3,r2
  80e074:	1001703a 	wrctl	status,r2
  
  return context;
  80e078:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e07c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e080:	d0a00e17 	ldw	r2,-32712(gp)
  80e084:	10c000c4 	addi	r3,r2,3
  80e088:	00bfff04 	movi	r2,-4
  80e08c:	1884703a 	and	r2,r3,r2
  80e090:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e094:	d0e00e17 	ldw	r3,-32712(gp)
  80e098:	e0bfff17 	ldw	r2,-4(fp)
  80e09c:	1887883a 	add	r3,r3,r2
  80e0a0:	00804034 	movhi	r2,256
  80e0a4:	10800004 	addi	r2,r2,0
  80e0a8:	10c0062e 	bgeu	r2,r3,80e0c4 <sbrk+0x74>
  80e0ac:	e0bffb17 	ldw	r2,-20(fp)
  80e0b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e0b4:	e0bffa17 	ldw	r2,-24(fp)
  80e0b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e0bc:	00bfffc4 	movi	r2,-1
  80e0c0:	00000b06 	br	80e0f0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80e0c4:	d0a00e17 	ldw	r2,-32712(gp)
  80e0c8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80e0cc:	d0e00e17 	ldw	r3,-32712(gp)
  80e0d0:	e0bfff17 	ldw	r2,-4(fp)
  80e0d4:	1885883a 	add	r2,r3,r2
  80e0d8:	d0a00e15 	stw	r2,-32712(gp)
  80e0dc:	e0bffb17 	ldw	r2,-20(fp)
  80e0e0:	e0bffc15 	stw	r2,-16(fp)
  80e0e4:	e0bffc17 	ldw	r2,-16(fp)
  80e0e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e0ec:	e0bffd17 	ldw	r2,-12(fp)
} 
  80e0f0:	e037883a 	mov	sp,fp
  80e0f4:	df000017 	ldw	fp,0(sp)
  80e0f8:	dec00104 	addi	sp,sp,4
  80e0fc:	f800283a 	ret

0080e100 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e100:	defffe04 	addi	sp,sp,-8
  80e104:	dfc00115 	stw	ra,4(sp)
  80e108:	df000015 	stw	fp,0(sp)
  80e10c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e110:	d0a00d17 	ldw	r2,-32716(gp)
  80e114:	10000326 	beq	r2,zero,80e124 <alt_get_errno+0x24>
  80e118:	d0a00d17 	ldw	r2,-32716(gp)
  80e11c:	103ee83a 	callr	r2
  80e120:	00000106 	br	80e128 <alt_get_errno+0x28>
  80e124:	d0a70d04 	addi	r2,gp,-25548
}
  80e128:	e037883a 	mov	sp,fp
  80e12c:	dfc00117 	ldw	ra,4(sp)
  80e130:	df000017 	ldw	fp,0(sp)
  80e134:	dec00204 	addi	sp,sp,8
  80e138:	f800283a 	ret

0080e13c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e13c:	defff904 	addi	sp,sp,-28
  80e140:	dfc00615 	stw	ra,24(sp)
  80e144:	df000515 	stw	fp,20(sp)
  80e148:	df000504 	addi	fp,sp,20
  80e14c:	e13ffd15 	stw	r4,-12(fp)
  80e150:	e17ffe15 	stw	r5,-8(fp)
  80e154:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e158:	e0bffd17 	ldw	r2,-12(fp)
  80e15c:	10000816 	blt	r2,zero,80e180 <write+0x44>
  80e160:	01400304 	movi	r5,12
  80e164:	e13ffd17 	ldw	r4,-12(fp)
  80e168:	080b8a80 	call	80b8a8 <__mulsi3>
  80e16c:	1007883a 	mov	r3,r2
  80e170:	00802074 	movhi	r2,129
  80e174:	10867f04 	addi	r2,r2,6652
  80e178:	1885883a 	add	r2,r3,r2
  80e17c:	00000106 	br	80e184 <write+0x48>
  80e180:	0005883a 	mov	r2,zero
  80e184:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e188:	e0bffb17 	ldw	r2,-20(fp)
  80e18c:	10002126 	beq	r2,zero,80e214 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80e190:	e0bffb17 	ldw	r2,-20(fp)
  80e194:	10800217 	ldw	r2,8(r2)
  80e198:	108000cc 	andi	r2,r2,3
  80e19c:	10001826 	beq	r2,zero,80e200 <write+0xc4>
  80e1a0:	e0bffb17 	ldw	r2,-20(fp)
  80e1a4:	10800017 	ldw	r2,0(r2)
  80e1a8:	10800617 	ldw	r2,24(r2)
  80e1ac:	10001426 	beq	r2,zero,80e200 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80e1b0:	e0bffb17 	ldw	r2,-20(fp)
  80e1b4:	10800017 	ldw	r2,0(r2)
  80e1b8:	10800617 	ldw	r2,24(r2)
  80e1bc:	e0ffff17 	ldw	r3,-4(fp)
  80e1c0:	180d883a 	mov	r6,r3
  80e1c4:	e17ffe17 	ldw	r5,-8(fp)
  80e1c8:	e13ffb17 	ldw	r4,-20(fp)
  80e1cc:	103ee83a 	callr	r2
  80e1d0:	e0bffc15 	stw	r2,-16(fp)
  80e1d4:	e0bffc17 	ldw	r2,-16(fp)
  80e1d8:	1000070e 	bge	r2,zero,80e1f8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  80e1dc:	080e1000 	call	80e100 <alt_get_errno>
  80e1e0:	1007883a 	mov	r3,r2
  80e1e4:	e0bffc17 	ldw	r2,-16(fp)
  80e1e8:	0085c83a 	sub	r2,zero,r2
  80e1ec:	18800015 	stw	r2,0(r3)
        return -1;
  80e1f0:	00bfffc4 	movi	r2,-1
  80e1f4:	00000c06 	br	80e228 <write+0xec>
      }
      return rval;
  80e1f8:	e0bffc17 	ldw	r2,-16(fp)
  80e1fc:	00000a06 	br	80e228 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80e200:	080e1000 	call	80e100 <alt_get_errno>
  80e204:	1007883a 	mov	r3,r2
  80e208:	00800344 	movi	r2,13
  80e20c:	18800015 	stw	r2,0(r3)
  80e210:	00000406 	br	80e224 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80e214:	080e1000 	call	80e100 <alt_get_errno>
  80e218:	1007883a 	mov	r3,r2
  80e21c:	00801444 	movi	r2,81
  80e220:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e224:	00bfffc4 	movi	r2,-1
}
  80e228:	e037883a 	mov	sp,fp
  80e22c:	dfc00117 	ldw	ra,4(sp)
  80e230:	df000017 	ldw	fp,0(sp)
  80e234:	dec00204 	addi	sp,sp,8
  80e238:	f800283a 	ret

0080e23c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80e23c:	defffd04 	addi	sp,sp,-12
  80e240:	dfc00215 	stw	ra,8(sp)
  80e244:	df000115 	stw	fp,4(sp)
  80e248:	df000104 	addi	fp,sp,4
  80e24c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80e250:	d1600804 	addi	r5,gp,-32736
  80e254:	e13fff17 	ldw	r4,-4(fp)
  80e258:	080fc000 	call	80fc00 <alt_dev_llist_insert>
}
  80e25c:	e037883a 	mov	sp,fp
  80e260:	dfc00117 	ldw	ra,4(sp)
  80e264:	df000017 	ldw	fp,0(sp)
  80e268:	dec00204 	addi	sp,sp,8
  80e26c:	f800283a 	ret

0080e270 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80e270:	defffd04 	addi	sp,sp,-12
  80e274:	dfc00215 	stw	ra,8(sp)
  80e278:	df000115 	stw	fp,4(sp)
  80e27c:	df000104 	addi	fp,sp,4
  80e280:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80e284:	08106500 	call	810650 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80e288:	00800044 	movi	r2,1
  80e28c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80e290:	0001883a 	nop
  80e294:	e037883a 	mov	sp,fp
  80e298:	dfc00117 	ldw	ra,4(sp)
  80e29c:	df000017 	ldw	fp,0(sp)
  80e2a0:	dec00204 	addi	sp,sp,8
  80e2a4:	f800283a 	ret

0080e2a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80e2a8:	defffd04 	addi	sp,sp,-12
  80e2ac:	dfc00215 	stw	ra,8(sp)
  80e2b0:	df000115 	stw	fp,4(sp)
  80e2b4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80e2b8:	01c0fa04 	movi	r7,1000
  80e2bc:	01800044 	movi	r6,1
  80e2c0:	000b883a 	mov	r5,zero
  80e2c4:	01004034 	movhi	r4,256
  80e2c8:	21040004 	addi	r4,r4,4096
  80e2cc:	080f9d40 	call	80f9d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_DMA_INIT ( DMA, dma);
  80e2d0:	d8000015 	stw	zero,0(sp)
  80e2d4:	000f883a 	mov	r7,zero
  80e2d8:	01804034 	movhi	r6,256
  80e2dc:	31840804 	addi	r6,r6,4128
  80e2e0:	01402074 	movhi	r5,129
  80e2e4:	29470f04 	addi	r5,r5,7228
  80e2e8:	01002074 	movhi	r4,129
  80e2ec:	21070804 	addi	r4,r4,7200
  80e2f0:	080ee400 	call	80ee40 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80e2f4:	01800404 	movi	r6,16
  80e2f8:	000b883a 	mov	r5,zero
  80e2fc:	01002074 	movhi	r4,129
  80e300:	21072004 	addi	r4,r4,7296
  80e304:	080f0580 	call	80f058 <altera_avalon_jtag_uart_init>
  80e308:	01002074 	movhi	r4,129
  80e30c:	21071604 	addi	r4,r4,7256
  80e310:	080e23c0 	call	80e23c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  80e314:	0001883a 	nop
}
  80e318:	0001883a 	nop
  80e31c:	e037883a 	mov	sp,fp
  80e320:	dfc00117 	ldw	ra,4(sp)
  80e324:	df000017 	ldw	fp,0(sp)
  80e328:	dec00204 	addi	sp,sp,8
  80e32c:	f800283a 	ret

0080e330 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
  80e330:	defffd04 	addi	sp,sp,-12
  80e334:	dfc00215 	stw	ra,8(sp)
  80e338:	df000115 	stw	fp,4(sp)
  80e33c:	df000104 	addi	fp,sp,4
  80e340:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
  80e344:	d1600b04 	addi	r5,gp,-32724
  80e348:	e13fff17 	ldw	r4,-4(fp)
  80e34c:	080fc000 	call	80fc00 <alt_dev_llist_insert>
}
  80e350:	e037883a 	mov	sp,fp
  80e354:	dfc00117 	ldw	ra,4(sp)
  80e358:	df000017 	ldw	fp,0(sp)
  80e35c:	dec00204 	addi	sp,sp,8
  80e360:	f800283a 	ret

0080e364 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
  80e364:	defffd04 	addi	sp,sp,-12
  80e368:	dfc00215 	stw	ra,8(sp)
  80e36c:	df000115 	stw	fp,4(sp)
  80e370:	df000104 	addi	fp,sp,4
  80e374:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
  80e378:	d1600f04 	addi	r5,gp,-32708
  80e37c:	e13fff17 	ldw	r4,-4(fp)
  80e380:	080fc000 	call	80fc00 <alt_dev_llist_insert>
}
  80e384:	e037883a 	mov	sp,fp
  80e388:	dfc00117 	ldw	ra,4(sp)
  80e38c:	df000017 	ldw	fp,0(sp)
  80e390:	dec00204 	addi	sp,sp,8
  80e394:	f800283a 	ret

0080e398 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  80e398:	defffc04 	addi	sp,sp,-16
  80e39c:	df000315 	stw	fp,12(sp)
  80e3a0:	df000304 	addi	fp,sp,12
  80e3a4:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  80e3a8:	e0bfff17 	ldw	r2,-4(fp)
  80e3ac:	10c00117 	ldw	r3,4(r2)
  80e3b0:	e0bfff17 	ldw	r2,-4(fp)
  80e3b4:	10800217 	ldw	r2,8(r2)
  80e3b8:	18802e26 	beq	r3,r2,80e474 <alt_avalon_dma_launch_bidir+0xdc>
  80e3bc:	e0bfff17 	ldw	r2,-4(fp)
  80e3c0:	10c00317 	ldw	r3,12(r2)
  80e3c4:	e0bfff17 	ldw	r2,-4(fp)
  80e3c8:	10800417 	ldw	r2,16(r2)
  80e3cc:	18802926 	beq	r3,r2,80e474 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
  80e3d0:	e0bfff17 	ldw	r2,-4(fp)
  80e3d4:	00c00044 	movi	r3,1
  80e3d8:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
  80e3dc:	e0bfff17 	ldw	r2,-4(fp)
  80e3e0:	10800117 	ldw	r2,4(r2)
  80e3e4:	1004913a 	slli	r2,r2,4
  80e3e8:	10800904 	addi	r2,r2,36
  80e3ec:	e0ffff17 	ldw	r3,-4(fp)
  80e3f0:	1885883a 	add	r2,r3,r2
  80e3f4:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
  80e3f8:	e0bfff17 	ldw	r2,-4(fp)
  80e3fc:	10800317 	ldw	r2,12(r2)
  80e400:	1004913a 	slli	r2,r2,4
  80e404:	10801904 	addi	r2,r2,100
  80e408:	e0ffff17 	ldw	r3,-4(fp)
  80e40c:	1885883a 	add	r2,r3,r2
  80e410:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  80e414:	e0bfff17 	ldw	r2,-4(fp)
  80e418:	10800017 	ldw	r2,0(r2)
  80e41c:	10800104 	addi	r2,r2,4
  80e420:	e0fffd17 	ldw	r3,-12(fp)
  80e424:	18c00017 	ldw	r3,0(r3)
  80e428:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  80e42c:	e0bfff17 	ldw	r2,-4(fp)
  80e430:	10800017 	ldw	r2,0(r2)
  80e434:	10800204 	addi	r2,r2,8
  80e438:	e0fffe17 	ldw	r3,-8(fp)
  80e43c:	18c00017 	ldw	r3,0(r3)
  80e440:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
  80e444:	e0bfff17 	ldw	r2,-4(fp)
  80e448:	10800017 	ldw	r2,0(r2)
  80e44c:	11000304 	addi	r4,r2,12
  80e450:	e0bffd17 	ldw	r2,-12(fp)
  80e454:	11400117 	ldw	r5,4(r2)
  80e458:	e0bffe17 	ldw	r2,-8(fp)
  80e45c:	10c00117 	ldw	r3,4(r2)
  80e460:	2805883a 	mov	r2,r5
  80e464:	1880012e 	bgeu	r3,r2,80e46c <alt_avalon_dma_launch_bidir+0xd4>
  80e468:	1805883a 	mov	r2,r3
  80e46c:	20800035 	stwio	r2,0(r4)
  80e470:	00000206 	br	80e47c <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
  80e474:	e0bfff17 	ldw	r2,-4(fp)
  80e478:	10000815 	stw	zero,32(r2)
  }
}
  80e47c:	0001883a 	nop
  80e480:	e037883a 	mov	sp,fp
  80e484:	df000017 	ldw	fp,0(sp)
  80e488:	dec00104 	addi	sp,sp,4
  80e48c:	f800283a 	ret

0080e490 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
  80e490:	defffd04 	addi	sp,sp,-12
  80e494:	df000215 	stw	fp,8(sp)
  80e498:	df000204 	addi	fp,sp,8
  80e49c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
  80e4a0:	e0bfff17 	ldw	r2,-4(fp)
  80e4a4:	10c00117 	ldw	r3,4(r2)
  80e4a8:	e0bfff17 	ldw	r2,-4(fp)
  80e4ac:	10800217 	ldw	r2,8(r2)
  80e4b0:	18801726 	beq	r3,r2,80e510 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
  80e4b4:	e0bfff17 	ldw	r2,-4(fp)
  80e4b8:	00c00044 	movi	r3,1
  80e4bc:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
  80e4c0:	e0bfff17 	ldw	r2,-4(fp)
  80e4c4:	10800117 	ldw	r2,4(r2)
  80e4c8:	1004913a 	slli	r2,r2,4
  80e4cc:	10800904 	addi	r2,r2,36
  80e4d0:	e0ffff17 	ldw	r3,-4(fp)
  80e4d4:	1885883a 	add	r2,r3,r2
  80e4d8:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  80e4dc:	e0bfff17 	ldw	r2,-4(fp)
  80e4e0:	10800017 	ldw	r2,0(r2)
  80e4e4:	10800104 	addi	r2,r2,4
  80e4e8:	e0fffe17 	ldw	r3,-8(fp)
  80e4ec:	18c00017 	ldw	r3,0(r3)
  80e4f0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  80e4f4:	e0bfff17 	ldw	r2,-4(fp)
  80e4f8:	10800017 	ldw	r2,0(r2)
  80e4fc:	10800304 	addi	r2,r2,12
  80e500:	e0fffe17 	ldw	r3,-8(fp)
  80e504:	18c00117 	ldw	r3,4(r3)
  80e508:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
  80e50c:	00000206 	br	80e518 <alt_avalon_dma_launch_txonly+0x88>
    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  }
  else
  {
    priv->active = 0;
  80e510:	e0bfff17 	ldw	r2,-4(fp)
  80e514:	10000815 	stw	zero,32(r2)
  }
}
  80e518:	0001883a 	nop
  80e51c:	e037883a 	mov	sp,fp
  80e520:	df000017 	ldw	fp,0(sp)
  80e524:	dec00104 	addi	sp,sp,4
  80e528:	f800283a 	ret

0080e52c <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
  80e52c:	defffd04 	addi	sp,sp,-12
  80e530:	df000215 	stw	fp,8(sp)
  80e534:	df000204 	addi	fp,sp,8
  80e538:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
  80e53c:	e0bfff17 	ldw	r2,-4(fp)
  80e540:	10c00317 	ldw	r3,12(r2)
  80e544:	e0bfff17 	ldw	r2,-4(fp)
  80e548:	10800417 	ldw	r2,16(r2)
  80e54c:	18801726 	beq	r3,r2,80e5ac <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
  80e550:	e0bfff17 	ldw	r2,-4(fp)
  80e554:	00c00044 	movi	r3,1
  80e558:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
  80e55c:	e0bfff17 	ldw	r2,-4(fp)
  80e560:	10800317 	ldw	r2,12(r2)
  80e564:	1004913a 	slli	r2,r2,4
  80e568:	10801904 	addi	r2,r2,100
  80e56c:	e0ffff17 	ldw	r3,-4(fp)
  80e570:	1885883a 	add	r2,r3,r2
  80e574:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  80e578:	e0bfff17 	ldw	r2,-4(fp)
  80e57c:	10800017 	ldw	r2,0(r2)
  80e580:	10800204 	addi	r2,r2,8
  80e584:	e0fffe17 	ldw	r3,-8(fp)
  80e588:	18c00017 	ldw	r3,0(r3)
  80e58c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  80e590:	e0bfff17 	ldw	r2,-4(fp)
  80e594:	10800017 	ldw	r2,0(r2)
  80e598:	10800304 	addi	r2,r2,12
  80e59c:	e0fffe17 	ldw	r3,-8(fp)
  80e5a0:	18c00117 	ldw	r3,4(r3)
  80e5a4:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
  80e5a8:	00000206 	br	80e5b4 <alt_avalon_dma_launch_rxonly+0x88>
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  }
  else
  {
    priv->active = 0;
  80e5ac:	e0bfff17 	ldw	r2,-4(fp)
  80e5b0:	10000815 	stw	zero,32(r2)
  }
}
  80e5b4:	0001883a 	nop
  80e5b8:	e037883a 	mov	sp,fp
  80e5bc:	df000017 	ldw	fp,0(sp)
  80e5c0:	dec00104 	addi	sp,sp,4
  80e5c4:	f800283a 	ret

0080e5c8 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
  80e5c8:	defffa04 	addi	sp,sp,-24
  80e5cc:	df000515 	stw	fp,20(sp)
  80e5d0:	df000504 	addi	fp,sp,20
  80e5d4:	e13ffd15 	stw	r4,-12(fp)
  80e5d8:	e17ffe15 	stw	r5,-8(fp)
  80e5dc:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
  80e5e0:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
  80e5e4:	e0bffd17 	ldw	r2,-12(fp)
  80e5e8:	10c00117 	ldw	r3,4(r2)
  80e5ec:	e0bffd17 	ldw	r2,-12(fp)
  80e5f0:	10800217 	ldw	r2,8(r2)
  80e5f4:	18800a1e 	bne	r3,r2,80e620 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
  80e5f8:	e0bffd17 	ldw	r2,-12(fp)
  80e5fc:	10c00317 	ldw	r3,12(r2)
  80e600:	e0bffd17 	ldw	r2,-12(fp)
  80e604:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
  80e608:	1880051e 	bne	r3,r2,80e620 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  80e60c:	e0bffd17 	ldw	r2,-12(fp)
  80e610:	10800017 	ldw	r2,0(r2)
  80e614:	10800304 	addi	r2,r2,12
  80e618:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
  80e61c:	10000226 	beq	r2,zero,80e628 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
  80e620:	00bffec4 	movi	r2,-5
  80e624:	0000b506 	br	80e8fc <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
  80e628:	e0bffe17 	ldw	r2,-8(fp)
  80e62c:	108002a8 	cmpgeui	r2,r2,10
  80e630:	1000781e 	bne	r2,zero,80e814 <alt_avalon_dma_ioctl+0x24c>
  80e634:	e0bffe17 	ldw	r2,-8(fp)
  80e638:	100690ba 	slli	r3,r2,2
  80e63c:	00802074 	movhi	r2,129
  80e640:	10b99404 	addi	r2,r2,-6576
  80e644:	1885883a 	add	r2,r3,r2
  80e648:	10800017 	ldw	r2,0(r2)
  80e64c:	1000683a 	jmp	r2
  80e650:	0080e814 	movui	r2,928
  80e654:	0080e678 	rdprs	r2,zero,921
  80e658:	0080e6d0 	cmplti	r2,zero,923
  80e65c:	0080e6fc 	xorhi	r2,zero,923
  80e660:	0080e754 	movui	r2,925
  80e664:	0080e780 	call	80e78 <__alt_mem_sdram-0x77f188>
  80e668:	0080e79c 	xori	r2,zero,926
  80e66c:	0080e7bc 	xorhi	r2,zero,926
  80e670:	0080e7dc 	xori	r2,zero,927
  80e674:	0080e7fc 	xorhi	r2,zero,927
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
  80e678:	e0bffd17 	ldw	r2,-12(fp)
  80e67c:	10800517 	ldw	r2,20(r2)
  80e680:	1080100c 	andi	r2,r2,64
  80e684:	10000f1e 	bne	r2,zero,80e6c4 <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
  80e688:	e0bffd17 	ldw	r2,-12(fp)
  80e68c:	10800017 	ldw	r2,0(r2)
  80e690:	10800104 	addi	r2,r2,4
  80e694:	e0ffff17 	ldw	r3,-4(fp)
  80e698:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
  80e69c:	e0bffd17 	ldw	r2,-12(fp)
  80e6a0:	10800517 	ldw	r2,20(r2)
  80e6a4:	10c00814 	ori	r3,r2,32
  80e6a8:	e0bffd17 	ldw	r2,-12(fp)
  80e6ac:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
  80e6b0:	e0fffd17 	ldw	r3,-12(fp)
  80e6b4:	00802074 	movhi	r2,129
  80e6b8:	10b94b04 	addi	r2,r2,-6868
  80e6bc:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
  80e6c0:	00005606 	br	80e81c <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
  80e6c4:	00bffec4 	movi	r2,-5
  80e6c8:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
  80e6cc:	00005306 	br	80e81c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
  80e6d0:	e0bffd17 	ldw	r2,-12(fp)
  80e6d4:	10c00517 	ldw	r3,20(r2)
  80e6d8:	00bff7c4 	movi	r2,-33
  80e6dc:	1886703a 	and	r3,r3,r2
  80e6e0:	e0bffd17 	ldw	r2,-12(fp)
  80e6e4:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  80e6e8:	e0fffd17 	ldw	r3,-12(fp)
  80e6ec:	00802074 	movhi	r2,129
  80e6f0:	10b8e604 	addi	r2,r2,-7272
  80e6f4:	18800715 	stw	r2,28(r3)
    break;
  80e6f8:	00004806 	br	80e81c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
  80e6fc:	e0bffd17 	ldw	r2,-12(fp)
  80e700:	10800517 	ldw	r2,20(r2)
  80e704:	1080080c 	andi	r2,r2,32
  80e708:	10000f1e 	bne	r2,zero,80e748 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
  80e70c:	e0bffd17 	ldw	r2,-12(fp)
  80e710:	10800017 	ldw	r2,0(r2)
  80e714:	10800204 	addi	r2,r2,8
  80e718:	e0ffff17 	ldw	r3,-4(fp)
  80e71c:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
  80e720:	e0bffd17 	ldw	r2,-12(fp)
  80e724:	10800517 	ldw	r2,20(r2)
  80e728:	10c01014 	ori	r3,r2,64
  80e72c:	e0bffd17 	ldw	r2,-12(fp)
  80e730:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
  80e734:	e0fffd17 	ldw	r3,-12(fp)
  80e738:	00802074 	movhi	r2,129
  80e73c:	10b92404 	addi	r2,r2,-7024
  80e740:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
  80e744:	00003506 	br	80e81c <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
  80e748:	00bffec4 	movi	r2,-5
  80e74c:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
  80e750:	00003206 	br	80e81c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
  80e754:	e0bffd17 	ldw	r2,-12(fp)
  80e758:	10c00517 	ldw	r3,20(r2)
  80e75c:	00bfefc4 	movi	r2,-65
  80e760:	1886703a 	and	r3,r3,r2
  80e764:	e0bffd17 	ldw	r2,-12(fp)
  80e768:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  80e76c:	e0fffd17 	ldw	r3,-12(fp)
  80e770:	00802074 	movhi	r2,129
  80e774:	10b8e604 	addi	r2,r2,-7272
  80e778:	18800715 	stw	r2,28(r3)
    break;
  80e77c:	00002706 	br	80e81c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e780:	e0bffd17 	ldw	r2,-12(fp)
  80e784:	10c00517 	ldw	r3,20(r2)
  80e788:	00bffc04 	movi	r2,-16
  80e78c:	1886703a 	and	r3,r3,r2
  80e790:	e0bffd17 	ldw	r2,-12(fp)
  80e794:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
  80e798:	00002006 	br	80e81c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e79c:	e0bffd17 	ldw	r2,-12(fp)
  80e7a0:	10c00517 	ldw	r3,20(r2)
  80e7a4:	00bffc04 	movi	r2,-16
  80e7a8:	1884703a 	and	r2,r3,r2
  80e7ac:	10c00054 	ori	r3,r2,1
  80e7b0:	e0bffd17 	ldw	r2,-12(fp)
  80e7b4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
  80e7b8:	00001806 	br	80e81c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e7bc:	e0bffd17 	ldw	r2,-12(fp)
  80e7c0:	10c00517 	ldw	r3,20(r2)
  80e7c4:	00bffc04 	movi	r2,-16
  80e7c8:	1884703a 	and	r2,r3,r2
  80e7cc:	10c000d4 	ori	r3,r2,3
  80e7d0:	e0bffd17 	ldw	r2,-12(fp)
  80e7d4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
  80e7d8:	00001006 	br	80e81c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e7dc:	e0bffd17 	ldw	r2,-12(fp)
  80e7e0:	10c00517 	ldw	r3,20(r2)
  80e7e4:	00bffc04 	movi	r2,-16
  80e7e8:	1884703a 	and	r2,r3,r2
  80e7ec:	10c001d4 	ori	r3,r2,7
  80e7f0:	e0bffd17 	ldw	r2,-12(fp)
  80e7f4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
  80e7f8:	00000806 	br	80e81c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80e7fc:	e0bffd17 	ldw	r2,-12(fp)
  80e800:	10800517 	ldw	r2,20(r2)
  80e804:	10c003d4 	ori	r3,r2,15
  80e808:	e0bffd17 	ldw	r2,-12(fp)
  80e80c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
  80e810:	00000206 	br	80e81c <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
  80e814:	00bff9c4 	movi	r2,-25
  80e818:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
  80e81c:	e0bffb17 	ldw	r2,-20(fp)
  80e820:	1000351e 	bne	r2,zero,80e8f8 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
  80e824:	e0bffd17 	ldw	r2,-12(fp)
  80e828:	10800517 	ldw	r2,20(r2)
  80e82c:	108003cc 	andi	r2,r2,15
  80e830:	10c00060 	cmpeqi	r3,r2,1
  80e834:	1800091e 	bne	r3,zero,80e85c <alt_avalon_dma_ioctl+0x294>
  80e838:	0080052e 	bgeu	zero,r2,80e850 <alt_avalon_dma_ioctl+0x288>
  80e83c:	10c000e0 	cmpeqi	r3,r2,3
  80e840:	1800091e 	bne	r3,zero,80e868 <alt_avalon_dma_ioctl+0x2a0>
  80e844:	108001e0 	cmpeqi	r2,r2,7
  80e848:	10000a1e 	bne	r2,zero,80e874 <alt_avalon_dma_ioctl+0x2ac>
  80e84c:	00000c06 	br	80e880 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
  80e850:	00800044 	movi	r2,1
  80e854:	e0bffc15 	stw	r2,-16(fp)
       break;
  80e858:	00000b06 	br	80e888 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
  80e85c:	00800084 	movi	r2,2
  80e860:	e0bffc15 	stw	r2,-16(fp)
       break;
  80e864:	00000806 	br	80e888 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
  80e868:	00800104 	movi	r2,4
  80e86c:	e0bffc15 	stw	r2,-16(fp)
       break;
  80e870:	00000506 	br	80e888 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
  80e874:	00810004 	movi	r2,1024
  80e878:	e0bffc15 	stw	r2,-16(fp)
       break;
  80e87c:	00000206 	br	80e888 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
  80e880:	00820004 	movi	r2,2048
  80e884:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
  80e888:	e0bffd17 	ldw	r2,-12(fp)
  80e88c:	10800517 	ldw	r2,20(r2)
  80e890:	1080080c 	andi	r2,r2,32
  80e894:	10000726 	beq	r2,zero,80e8b4 <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80e898:	e0bffd17 	ldw	r2,-12(fp)
  80e89c:	10800017 	ldw	r2,0(r2)
  80e8a0:	10800604 	addi	r2,r2,24
  80e8a4:	e0fffc17 	ldw	r3,-16(fp)
  80e8a8:	18c07e14 	ori	r3,r3,504
  80e8ac:	10c00035 	stwio	r3,0(r2)
  80e8b0:	00001106 	br	80e8f8 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
  80e8b4:	e0bffd17 	ldw	r2,-12(fp)
  80e8b8:	10800517 	ldw	r2,20(r2)
  80e8bc:	1080100c 	andi	r2,r2,64
  80e8c0:	10000726 	beq	r2,zero,80e8e0 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80e8c4:	e0bffd17 	ldw	r2,-12(fp)
  80e8c8:	10800017 	ldw	r2,0(r2)
  80e8cc:	10800604 	addi	r2,r2,24
  80e8d0:	e0fffc17 	ldw	r3,-16(fp)
  80e8d4:	18c0be14 	ori	r3,r3,760
  80e8d8:	10c00035 	stwio	r3,0(r2)
  80e8dc:	00000606 	br	80e8f8 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80e8e0:	e0bffd17 	ldw	r2,-12(fp)
  80e8e4:	10800017 	ldw	r2,0(r2)
  80e8e8:	10800604 	addi	r2,r2,24
  80e8ec:	e0fffc17 	ldw	r3,-16(fp)
  80e8f0:	18c03e14 	ori	r3,r3,248
  80e8f4:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
  80e8f8:	e0bffb17 	ldw	r2,-20(fp)
}
  80e8fc:	e037883a 	mov	sp,fp
  80e900:	df000017 	ldw	fp,0(sp)
  80e904:	dec00104 	addi	sp,sp,4
  80e908:	f800283a 	ret

0080e90c <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
  80e90c:	defffb04 	addi	sp,sp,-20
  80e910:	dfc00415 	stw	ra,16(sp)
  80e914:	df000315 	stw	fp,12(sp)
  80e918:	df000304 	addi	fp,sp,12
  80e91c:	e13ffd15 	stw	r4,-12(fp)
  80e920:	e17ffe15 	stw	r5,-8(fp)
  80e924:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
  80e928:	e0bffd17 	ldw	r2,-12(fp)
  80e92c:	10800617 	ldw	r2,24(r2)
  80e930:	e1bfff17 	ldw	r6,-4(fp)
  80e934:	e17ffe17 	ldw	r5,-8(fp)
  80e938:	1009883a 	mov	r4,r2
  80e93c:	080e5c80 	call	80e5c8 <alt_avalon_dma_ioctl>
             req,
             arg);
}
  80e940:	e037883a 	mov	sp,fp
  80e944:	dfc00117 	ldw	ra,4(sp)
  80e948:	df000017 	ldw	fp,0(sp)
  80e94c:	dec00204 	addi	sp,sp,8
  80e950:	f800283a 	ret

0080e954 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
  80e954:	defffb04 	addi	sp,sp,-20
  80e958:	dfc00415 	stw	ra,16(sp)
  80e95c:	df000315 	stw	fp,12(sp)
  80e960:	df000304 	addi	fp,sp,12
  80e964:	e13ffd15 	stw	r4,-12(fp)
  80e968:	e17ffe15 	stw	r5,-8(fp)
  80e96c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
  80e970:	e0bffd17 	ldw	r2,-12(fp)
  80e974:	10800617 	ldw	r2,24(r2)
  80e978:	e1bfff17 	ldw	r6,-4(fp)
  80e97c:	e17ffe17 	ldw	r5,-8(fp)
  80e980:	1009883a 	mov	r4,r2
  80e984:	080e5c80 	call	80e5c8 <alt_avalon_dma_ioctl>
             req,
             arg);
}
  80e988:	e037883a 	mov	sp,fp
  80e98c:	dfc00117 	ldw	ra,4(sp)
  80e990:	df000017 	ldw	fp,0(sp)
  80e994:	dec00204 	addi	sp,sp,8
  80e998:	f800283a 	ret

0080e99c <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
  80e99c:	defff404 	addi	sp,sp,-48
  80e9a0:	dfc00b15 	stw	ra,44(sp)
  80e9a4:	df000a15 	stw	fp,40(sp)
  80e9a8:	df000a04 	addi	fp,sp,40
  80e9ac:	e13ffc15 	stw	r4,-16(fp)
  80e9b0:	e17ffd15 	stw	r5,-12(fp)
  80e9b4:	e1bffe15 	stw	r6,-8(fp)
  80e9b8:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
  80e9bc:	e0bffc17 	ldw	r2,-16(fp)
  80e9c0:	10800617 	ldw	r2,24(r2)
  80e9c4:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  80e9c8:	e0bff617 	ldw	r2,-40(fp)
  80e9cc:	10800517 	ldw	r2,20(r2)
  80e9d0:	108003cc 	andi	r2,r2,15
  80e9d4:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
  80e9d8:	e0fffd17 	ldw	r3,-12(fp)
  80e9dc:	e0bff717 	ldw	r2,-36(fp)
  80e9e0:	1884703a 	and	r2,r3,r2
  80e9e4:	1000081e 	bne	r2,zero,80ea08 <alt_avalon_dma_prepare+0x6c>
  80e9e8:	e0fffe17 	ldw	r3,-8(fp)
  80e9ec:	e0bff717 	ldw	r2,-36(fp)
  80e9f0:	1884703a 	and	r2,r3,r2
  80e9f4:	1000041e 	bne	r2,zero,80ea08 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
  80e9f8:	e0bff617 	ldw	r2,-40(fp)
  80e9fc:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
  80ea00:	e0bffe17 	ldw	r2,-8(fp)
  80ea04:	1880022e 	bgeu	r3,r2,80ea10 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
  80ea08:	00bffa84 	movi	r2,-22
  80ea0c:	00002c06 	br	80eac0 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
  80ea10:	e0bff617 	ldw	r2,-40(fp)
  80ea14:	10800317 	ldw	r2,12(r2)
  80ea18:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
  80ea1c:	e0bff617 	ldw	r2,-40(fp)
  80ea20:	10800417 	ldw	r2,16(r2)
  80ea24:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
  80ea28:	e0bff917 	ldw	r2,-28(fp)
  80ea2c:	1004913a 	slli	r2,r2,4
  80ea30:	10801904 	addi	r2,r2,100
  80ea34:	e0fff617 	ldw	r3,-40(fp)
  80ea38:	1885883a 	add	r2,r3,r2
  80ea3c:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80ea40:	e0bff917 	ldw	r2,-28(fp)
  80ea44:	10800044 	addi	r2,r2,1
  80ea48:	108000cc 	andi	r2,r2,3
  80ea4c:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
  80ea50:	e0fffb17 	ldw	r3,-20(fp)
  80ea54:	e0bff817 	ldw	r2,-32(fp)
  80ea58:	1880021e 	bne	r3,r2,80ea64 <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
  80ea5c:	00bff904 	movi	r2,-28
  80ea60:	00001706 	br	80eac0 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
  80ea64:	e0bffa17 	ldw	r2,-24(fp)
  80ea68:	e0fffd17 	ldw	r3,-12(fp)
  80ea6c:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
  80ea70:	e0bffa17 	ldw	r2,-24(fp)
  80ea74:	e0fffe17 	ldw	r3,-8(fp)
  80ea78:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
  80ea7c:	e0bffa17 	ldw	r2,-24(fp)
  80ea80:	e0ffff17 	ldw	r3,-4(fp)
  80ea84:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
  80ea88:	e0bffa17 	ldw	r2,-24(fp)
  80ea8c:	e0c00217 	ldw	r3,8(fp)
  80ea90:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
  80ea94:	e0bff617 	ldw	r2,-40(fp)
  80ea98:	e0fffb17 	ldw	r3,-20(fp)
  80ea9c:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
  80eaa0:	e0bff617 	ldw	r2,-40(fp)
  80eaa4:	10800817 	ldw	r2,32(r2)
  80eaa8:	1000041e 	bne	r2,zero,80eabc <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
  80eaac:	e0bff617 	ldw	r2,-40(fp)
  80eab0:	10800717 	ldw	r2,28(r2)
  80eab4:	e13ff617 	ldw	r4,-40(fp)
  80eab8:	103ee83a 	callr	r2
  }

  return 0;
  80eabc:	0005883a 	mov	r2,zero
}
  80eac0:	e037883a 	mov	sp,fp
  80eac4:	dfc00117 	ldw	ra,4(sp)
  80eac8:	df000017 	ldw	fp,0(sp)
  80eacc:	dec00204 	addi	sp,sp,8
  80ead0:	f800283a 	ret

0080ead4 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
  80ead4:	defffb04 	addi	sp,sp,-20
  80ead8:	df000415 	stw	fp,16(sp)
  80eadc:	df000404 	addi	fp,sp,16
  80eae0:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  80eae4:	e0bfff17 	ldw	r2,-4(fp)
  80eae8:	10800617 	ldw	r2,24(r2)
  80eaec:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
  80eaf0:	e0bffc17 	ldw	r2,-16(fp)
  80eaf4:	10800117 	ldw	r2,4(r2)
  80eaf8:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
  80eafc:	e0bffc17 	ldw	r2,-16(fp)
  80eb00:	10800217 	ldw	r2,8(r2)
  80eb04:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
  80eb08:	e0bffd17 	ldw	r2,-12(fp)
  80eb0c:	e0fffe17 	ldw	r3,-8(fp)
  80eb10:	1880052e 	bgeu	r3,r2,80eb28 <alt_avalon_dma_space+0x54>
  80eb14:	e0fffd17 	ldw	r3,-12(fp)
  80eb18:	e0bffe17 	ldw	r2,-8(fp)
  80eb1c:	1885c83a 	sub	r2,r3,r2
  80eb20:	10bfffc4 	addi	r2,r2,-1
  80eb24:	00000406 	br	80eb38 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
  80eb28:	e0fffd17 	ldw	r3,-12(fp)
  80eb2c:	e0bffe17 	ldw	r2,-8(fp)
  80eb30:	1885c83a 	sub	r2,r3,r2
  80eb34:	108000c4 	addi	r2,r2,3
}
  80eb38:	e037883a 	mov	sp,fp
  80eb3c:	df000017 	ldw	fp,0(sp)
  80eb40:	dec00104 	addi	sp,sp,4
  80eb44:	f800283a 	ret

0080eb48 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
  80eb48:	defff404 	addi	sp,sp,-48
  80eb4c:	dfc00b15 	stw	ra,44(sp)
  80eb50:	df000a15 	stw	fp,40(sp)
  80eb54:	df000a04 	addi	fp,sp,40
  80eb58:	e13ffc15 	stw	r4,-16(fp)
  80eb5c:	e17ffd15 	stw	r5,-12(fp)
  80eb60:	e1bffe15 	stw	r6,-8(fp)
  80eb64:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  80eb68:	e0bffc17 	ldw	r2,-16(fp)
  80eb6c:	10800617 	ldw	r2,24(r2)
  80eb70:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  80eb74:	e0bff617 	ldw	r2,-40(fp)
  80eb78:	10800517 	ldw	r2,20(r2)
  80eb7c:	108003cc 	andi	r2,r2,15
  80eb80:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
  80eb84:	e0fffd17 	ldw	r3,-12(fp)
  80eb88:	e0bff717 	ldw	r2,-36(fp)
  80eb8c:	1884703a 	and	r2,r3,r2
  80eb90:	1000081e 	bne	r2,zero,80ebb4 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
  80eb94:	e0fffe17 	ldw	r3,-8(fp)
  80eb98:	e0bff717 	ldw	r2,-36(fp)
  80eb9c:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
  80eba0:	1000041e 	bne	r2,zero,80ebb4 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
  80eba4:	e0bff617 	ldw	r2,-40(fp)
  80eba8:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
  80ebac:	e0bffe17 	ldw	r2,-8(fp)
  80ebb0:	1880022e 	bgeu	r3,r2,80ebbc <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
  80ebb4:	00bffa84 	movi	r2,-22
  80ebb8:	00002c06 	br	80ec6c <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
  80ebbc:	e0bff617 	ldw	r2,-40(fp)
  80ebc0:	10800117 	ldw	r2,4(r2)
  80ebc4:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
  80ebc8:	e0bff617 	ldw	r2,-40(fp)
  80ebcc:	10800217 	ldw	r2,8(r2)
  80ebd0:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
  80ebd4:	e0bff917 	ldw	r2,-28(fp)
  80ebd8:	1004913a 	slli	r2,r2,4
  80ebdc:	10800904 	addi	r2,r2,36
  80ebe0:	e0fff617 	ldw	r3,-40(fp)
  80ebe4:	1885883a 	add	r2,r3,r2
  80ebe8:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80ebec:	e0bff917 	ldw	r2,-28(fp)
  80ebf0:	10800044 	addi	r2,r2,1
  80ebf4:	108000cc 	andi	r2,r2,3
  80ebf8:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
  80ebfc:	e0fffb17 	ldw	r3,-20(fp)
  80ec00:	e0bff817 	ldw	r2,-32(fp)
  80ec04:	1880021e 	bne	r3,r2,80ec10 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
  80ec08:	00bff904 	movi	r2,-28
  80ec0c:	00001706 	br	80ec6c <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
  80ec10:	e0bffa17 	ldw	r2,-24(fp)
  80ec14:	e0fffd17 	ldw	r3,-12(fp)
  80ec18:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
  80ec1c:	e0bffa17 	ldw	r2,-24(fp)
  80ec20:	e0fffe17 	ldw	r3,-8(fp)
  80ec24:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
  80ec28:	e0bffa17 	ldw	r2,-24(fp)
  80ec2c:	e0ffff17 	ldw	r3,-4(fp)
  80ec30:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
  80ec34:	e0bffa17 	ldw	r2,-24(fp)
  80ec38:	e0c00217 	ldw	r3,8(fp)
  80ec3c:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
  80ec40:	e0bff617 	ldw	r2,-40(fp)
  80ec44:	e0fffb17 	ldw	r3,-20(fp)
  80ec48:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
  80ec4c:	e0bff617 	ldw	r2,-40(fp)
  80ec50:	10800817 	ldw	r2,32(r2)
  80ec54:	1000041e 	bne	r2,zero,80ec68 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
  80ec58:	e0bff617 	ldw	r2,-40(fp)
  80ec5c:	10800717 	ldw	r2,28(r2)
  80ec60:	e13ff617 	ldw	r4,-40(fp)
  80ec64:	103ee83a 	callr	r2
  }

  return 0;
  80ec68:	0005883a 	mov	r2,zero
}
  80ec6c:	e037883a 	mov	sp,fp
  80ec70:	dfc00117 	ldw	ra,4(sp)
  80ec74:	df000017 	ldw	fp,0(sp)
  80ec78:	dec00204 	addi	sp,sp,8
  80ec7c:	f800283a 	ret

0080ec80 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
  80ec80:	defff104 	addi	sp,sp,-60
  80ec84:	dfc00e15 	stw	ra,56(sp)
  80ec88:	df000d15 	stw	fp,52(sp)
  80ec8c:	df000d04 	addi	fp,sp,52
  80ec90:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
  80ec94:	e0bfff17 	ldw	r2,-4(fp)
  80ec98:	e0bff315 	stw	r2,-52(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  80ec9c:	e0bff317 	ldw	r2,-52(fp)
  80eca0:	10800517 	ldw	r2,20(r2)
  80eca4:	1080080c 	andi	r2,r2,32
  80eca8:	e0bff415 	stw	r2,-48(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
  80ecac:	e0bff317 	ldw	r2,-52(fp)
  80ecb0:	10800517 	ldw	r2,20(r2)
  80ecb4:	1080100c 	andi	r2,r2,64
  80ecb8:	e0bff515 	stw	r2,-44(fp)

  tx_start = priv->tx_start;
  80ecbc:	e0bff317 	ldw	r2,-52(fp)
  80ecc0:	10800117 	ldw	r2,4(r2)
  80ecc4:	e0bff615 	stw	r2,-40(fp)
  rx_start = priv->rx_start;
  80ecc8:	e0bff317 	ldw	r2,-52(fp)
  80eccc:	10800317 	ldw	r2,12(r2)
  80ecd0:	e0bff715 	stw	r2,-36(fp)

  tx_slot = &priv->tx_buf[tx_start];
  80ecd4:	e0bff617 	ldw	r2,-40(fp)
  80ecd8:	1004913a 	slli	r2,r2,4
  80ecdc:	10800904 	addi	r2,r2,36
  80ece0:	e0fff317 	ldw	r3,-52(fp)
  80ece4:	1885883a 	add	r2,r3,r2
  80ece8:	e0bff815 	stw	r2,-32(fp)
  rx_slot = &priv->rx_buf[rx_start];
  80ecec:	e0bff717 	ldw	r2,-36(fp)
  80ecf0:	1004913a 	slli	r2,r2,4
  80ecf4:	10801904 	addi	r2,r2,100
  80ecf8:	e0fff317 	ldw	r3,-52(fp)
  80ecfc:	1885883a 	add	r2,r3,r2
  80ed00:	e0bff915 	stw	r2,-28(fp)

  /* Increment the descriptors */

  if (!stream_tx)
  80ed04:	e0bff417 	ldw	r2,-48(fp)
  80ed08:	1000051e 	bne	r2,zero,80ed20 <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80ed0c:	e0bff617 	ldw	r2,-40(fp)
  80ed10:	10800044 	addi	r2,r2,1
  80ed14:	10c000cc 	andi	r3,r2,3
  80ed18:	e0bff317 	ldw	r2,-52(fp)
  80ed1c:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
  80ed20:	e0bff517 	ldw	r2,-44(fp)
  80ed24:	1000051e 	bne	r2,zero,80ed3c <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80ed28:	e0bff717 	ldw	r2,-36(fp)
  80ed2c:	10800044 	addi	r2,r2,1
  80ed30:	10c000cc 	andi	r3,r2,3
  80ed34:	e0bff317 	ldw	r2,-52(fp)
  80ed38:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
  80ed3c:	e0bff317 	ldw	r2,-52(fp)
  80ed40:	10800017 	ldw	r2,0(r2)
  80ed44:	0007883a 	mov	r3,zero
  80ed48:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
  80ed4c:	e0bff317 	ldw	r2,-52(fp)
  80ed50:	10800017 	ldw	r2,0(r2)
  80ed54:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
  80ed58:	e0bff317 	ldw	r2,-52(fp)
  80ed5c:	10800717 	ldw	r2,28(r2)
  80ed60:	e13ff317 	ldw	r4,-52(fp)
  80ed64:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
  80ed68:	e0bff417 	ldw	r2,-48(fp)
  80ed6c:	1000151e 	bne	r2,zero,80edc4 <alt_avalon_dma_irq+0x144>
  80ed70:	e0bff817 	ldw	r2,-32(fp)
  80ed74:	10800217 	ldw	r2,8(r2)
  80ed78:	10001226 	beq	r2,zero,80edc4 <alt_avalon_dma_irq+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed7c:	0005303a 	rdctl	r2,status
  80ed80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed84:	e0fffc17 	ldw	r3,-16(fp)
  80ed88:	00bfff84 	movi	r2,-2
  80ed8c:	1884703a 	and	r2,r3,r2
  80ed90:	1001703a 	wrctl	status,r2
  
  return context;
  80ed94:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
  80ed98:	e0bffb15 	stw	r2,-20(fp)
    tx_slot->done (tx_slot->handle);
  80ed9c:	e0bff817 	ldw	r2,-32(fp)
  80eda0:	10800217 	ldw	r2,8(r2)
  80eda4:	e0fff817 	ldw	r3,-32(fp)
  80eda8:	18c00317 	ldw	r3,12(r3)
  80edac:	1809883a 	mov	r4,r3
  80edb0:	103ee83a 	callr	r2
  80edb4:	e0bffb17 	ldw	r2,-20(fp)
  80edb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80edbc:	e0bffe17 	ldw	r2,-8(fp)
  80edc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
  80edc4:	e0bff517 	ldw	r2,-44(fp)
  80edc8:	1000171e 	bne	r2,zero,80ee28 <alt_avalon_dma_irq+0x1a8>
  80edcc:	e0bff917 	ldw	r2,-28(fp)
  80edd0:	10800217 	ldw	r2,8(r2)
  80edd4:	10001426 	beq	r2,zero,80ee28 <alt_avalon_dma_irq+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80edd8:	0005303a 	rdctl	r2,status
  80eddc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ede0:	e0fffd17 	ldw	r3,-12(fp)
  80ede4:	00bfff84 	movi	r2,-2
  80ede8:	1884703a 	and	r2,r3,r2
  80edec:	1001703a 	wrctl	status,r2
  
  return context;
  80edf0:	e0bffd17 	ldw	r2,-12(fp)
  {
    cpu_sr = alt_irq_disable_all();
  80edf4:	e0bffb15 	stw	r2,-20(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
  80edf8:	e0bff917 	ldw	r2,-28(fp)
  80edfc:	10800217 	ldw	r2,8(r2)
  80ee00:	e0fff917 	ldw	r3,-28(fp)
  80ee04:	19000317 	ldw	r4,12(r3)
  80ee08:	e0fff917 	ldw	r3,-28(fp)
  80ee0c:	18c00017 	ldw	r3,0(r3)
  80ee10:	180b883a 	mov	r5,r3
  80ee14:	103ee83a 	callr	r2
  80ee18:	e0bffb17 	ldw	r2,-20(fp)
  80ee1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee20:	e0bffa17 	ldw	r2,-24(fp)
  80ee24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
  80ee28:	0001883a 	nop
  80ee2c:	e037883a 	mov	sp,fp
  80ee30:	dfc00117 	ldw	ra,4(sp)
  80ee34:	df000017 	ldw	fp,0(sp)
  80ee38:	dec00204 	addi	sp,sp,8
  80ee3c:	f800283a 	ret

0080ee40 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
  80ee40:	defff904 	addi	sp,sp,-28
  80ee44:	dfc00615 	stw	ra,24(sp)
  80ee48:	df000515 	stw	fp,20(sp)
  80ee4c:	df000504 	addi	fp,sp,20
  80ee50:	e13ffc15 	stw	r4,-16(fp)
  80ee54:	e17ffd15 	stw	r5,-12(fp)
  80ee58:	e1bffe15 	stw	r6,-8(fp)
  80ee5c:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  80ee60:	e0bffe17 	ldw	r2,-8(fp)
  80ee64:	10800604 	addi	r2,r2,24
  80ee68:	00c40004 	movi	r3,4096
  80ee6c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  80ee70:	e0bffe17 	ldw	r2,-8(fp)
  80ee74:	10800604 	addi	r2,r2,24
  80ee78:	00c40004 	movi	r3,4096
  80ee7c:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
  80ee80:	e0bffe17 	ldw	r2,-8(fp)
  80ee84:	10800604 	addi	r2,r2,24
  80ee88:	00c03f04 	movi	r3,252
  80ee8c:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
  80ee90:	0007883a 	mov	r3,zero
  80ee94:	e0bffe17 	ldw	r2,-8(fp)
  80ee98:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
  80ee9c:	e0bffc17 	ldw	r2,-16(fp)
  80eea0:	10800617 	ldw	r2,24(r2)
  80eea4:	d8000015 	stw	zero,0(sp)
  80eea8:	100f883a 	mov	r7,r2
  80eeac:	01802074 	movhi	r6,129
  80eeb0:	31bb2004 	addi	r6,r6,-4992
  80eeb4:	e1400217 	ldw	r5,8(fp)
  80eeb8:	e13fff17 	ldw	r4,-4(fp)
  80eebc:	080fe280 	call	80fe28 <alt_ic_isr_register>
  80eec0:	10000616 	blt	r2,zero,80eedc <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
  80eec4:	e0bffc17 	ldw	r2,-16(fp)
  80eec8:	1009883a 	mov	r4,r2
  80eecc:	080e3300 	call	80e330 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
  80eed0:	e0bffd17 	ldw	r2,-12(fp)
  80eed4:	1009883a 	mov	r4,r2
  80eed8:	080e3640 	call	80e364 <alt_dma_rxchan_reg>
  }
}
  80eedc:	0001883a 	nop
  80eee0:	e037883a 	mov	sp,fp
  80eee4:	dfc00117 	ldw	ra,4(sp)
  80eee8:	df000017 	ldw	fp,0(sp)
  80eeec:	dec00204 	addi	sp,sp,8
  80eef0:	f800283a 	ret

0080eef4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80eef4:	defffa04 	addi	sp,sp,-24
  80eef8:	dfc00515 	stw	ra,20(sp)
  80eefc:	df000415 	stw	fp,16(sp)
  80ef00:	df000404 	addi	fp,sp,16
  80ef04:	e13ffd15 	stw	r4,-12(fp)
  80ef08:	e17ffe15 	stw	r5,-8(fp)
  80ef0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ef10:	e0bffd17 	ldw	r2,-12(fp)
  80ef14:	10800017 	ldw	r2,0(r2)
  80ef18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80ef1c:	e0bffc17 	ldw	r2,-16(fp)
  80ef20:	10c00a04 	addi	r3,r2,40
  80ef24:	e0bffd17 	ldw	r2,-12(fp)
  80ef28:	10800217 	ldw	r2,8(r2)
  80ef2c:	100f883a 	mov	r7,r2
  80ef30:	e1bfff17 	ldw	r6,-4(fp)
  80ef34:	e17ffe17 	ldw	r5,-8(fp)
  80ef38:	1809883a 	mov	r4,r3
  80ef3c:	080f51c0 	call	80f51c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80ef40:	e037883a 	mov	sp,fp
  80ef44:	dfc00117 	ldw	ra,4(sp)
  80ef48:	df000017 	ldw	fp,0(sp)
  80ef4c:	dec00204 	addi	sp,sp,8
  80ef50:	f800283a 	ret

0080ef54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ef54:	defffa04 	addi	sp,sp,-24
  80ef58:	dfc00515 	stw	ra,20(sp)
  80ef5c:	df000415 	stw	fp,16(sp)
  80ef60:	df000404 	addi	fp,sp,16
  80ef64:	e13ffd15 	stw	r4,-12(fp)
  80ef68:	e17ffe15 	stw	r5,-8(fp)
  80ef6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ef70:	e0bffd17 	ldw	r2,-12(fp)
  80ef74:	10800017 	ldw	r2,0(r2)
  80ef78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ef7c:	e0bffc17 	ldw	r2,-16(fp)
  80ef80:	10c00a04 	addi	r3,r2,40
  80ef84:	e0bffd17 	ldw	r2,-12(fp)
  80ef88:	10800217 	ldw	r2,8(r2)
  80ef8c:	100f883a 	mov	r7,r2
  80ef90:	e1bfff17 	ldw	r6,-4(fp)
  80ef94:	e17ffe17 	ldw	r5,-8(fp)
  80ef98:	1809883a 	mov	r4,r3
  80ef9c:	080f7380 	call	80f738 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80efa0:	e037883a 	mov	sp,fp
  80efa4:	dfc00117 	ldw	ra,4(sp)
  80efa8:	df000017 	ldw	fp,0(sp)
  80efac:	dec00204 	addi	sp,sp,8
  80efb0:	f800283a 	ret

0080efb4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80efb4:	defffc04 	addi	sp,sp,-16
  80efb8:	dfc00315 	stw	ra,12(sp)
  80efbc:	df000215 	stw	fp,8(sp)
  80efc0:	df000204 	addi	fp,sp,8
  80efc4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80efc8:	e0bfff17 	ldw	r2,-4(fp)
  80efcc:	10800017 	ldw	r2,0(r2)
  80efd0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80efd4:	e0bffe17 	ldw	r2,-8(fp)
  80efd8:	10c00a04 	addi	r3,r2,40
  80efdc:	e0bfff17 	ldw	r2,-4(fp)
  80efe0:	10800217 	ldw	r2,8(r2)
  80efe4:	100b883a 	mov	r5,r2
  80efe8:	1809883a 	mov	r4,r3
  80efec:	080f3c40 	call	80f3c4 <altera_avalon_jtag_uart_close>
}
  80eff0:	e037883a 	mov	sp,fp
  80eff4:	dfc00117 	ldw	ra,4(sp)
  80eff8:	df000017 	ldw	fp,0(sp)
  80effc:	dec00204 	addi	sp,sp,8
  80f000:	f800283a 	ret

0080f004 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80f004:	defffa04 	addi	sp,sp,-24
  80f008:	dfc00515 	stw	ra,20(sp)
  80f00c:	df000415 	stw	fp,16(sp)
  80f010:	df000404 	addi	fp,sp,16
  80f014:	e13ffd15 	stw	r4,-12(fp)
  80f018:	e17ffe15 	stw	r5,-8(fp)
  80f01c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80f020:	e0bffd17 	ldw	r2,-12(fp)
  80f024:	10800017 	ldw	r2,0(r2)
  80f028:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80f02c:	e0bffc17 	ldw	r2,-16(fp)
  80f030:	10800a04 	addi	r2,r2,40
  80f034:	e1bfff17 	ldw	r6,-4(fp)
  80f038:	e17ffe17 	ldw	r5,-8(fp)
  80f03c:	1009883a 	mov	r4,r2
  80f040:	080f42c0 	call	80f42c <altera_avalon_jtag_uart_ioctl>
}
  80f044:	e037883a 	mov	sp,fp
  80f048:	dfc00117 	ldw	ra,4(sp)
  80f04c:	df000017 	ldw	fp,0(sp)
  80f050:	dec00204 	addi	sp,sp,8
  80f054:	f800283a 	ret

0080f058 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80f058:	defffa04 	addi	sp,sp,-24
  80f05c:	dfc00515 	stw	ra,20(sp)
  80f060:	df000415 	stw	fp,16(sp)
  80f064:	df000404 	addi	fp,sp,16
  80f068:	e13ffd15 	stw	r4,-12(fp)
  80f06c:	e17ffe15 	stw	r5,-8(fp)
  80f070:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f074:	e0bffd17 	ldw	r2,-12(fp)
  80f078:	00c00044 	movi	r3,1
  80f07c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80f080:	e0bffd17 	ldw	r2,-12(fp)
  80f084:	10800017 	ldw	r2,0(r2)
  80f088:	10800104 	addi	r2,r2,4
  80f08c:	1007883a 	mov	r3,r2
  80f090:	e0bffd17 	ldw	r2,-12(fp)
  80f094:	10800817 	ldw	r2,32(r2)
  80f098:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80f09c:	e0bffe17 	ldw	r2,-8(fp)
  80f0a0:	e0ffff17 	ldw	r3,-4(fp)
  80f0a4:	d8000015 	stw	zero,0(sp)
  80f0a8:	e1fffd17 	ldw	r7,-12(fp)
  80f0ac:	01802074 	movhi	r6,129
  80f0b0:	31bc4604 	addi	r6,r6,-3816
  80f0b4:	180b883a 	mov	r5,r3
  80f0b8:	1009883a 	mov	r4,r2
  80f0bc:	080fe280 	call	80fe28 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80f0c0:	e0bffd17 	ldw	r2,-12(fp)
  80f0c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80f0c8:	e0bffd17 	ldw	r2,-12(fp)
  80f0cc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f0d0:	d0e71517 	ldw	r3,-25516(gp)
  80f0d4:	e1fffd17 	ldw	r7,-12(fp)
  80f0d8:	01802074 	movhi	r6,129
  80f0dc:	31bcc904 	addi	r6,r6,-3292
  80f0e0:	180b883a 	mov	r5,r3
  80f0e4:	1009883a 	mov	r4,r2
  80f0e8:	080fa500 	call	80fa50 <alt_alarm_start>
  80f0ec:	1000040e 	bge	r2,zero,80f100 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80f0f0:	e0fffd17 	ldw	r3,-12(fp)
  80f0f4:	00a00034 	movhi	r2,32768
  80f0f8:	10bfffc4 	addi	r2,r2,-1
  80f0fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80f100:	0001883a 	nop
  80f104:	e037883a 	mov	sp,fp
  80f108:	dfc00117 	ldw	ra,4(sp)
  80f10c:	df000017 	ldw	fp,0(sp)
  80f110:	dec00204 	addi	sp,sp,8
  80f114:	f800283a 	ret

0080f118 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80f118:	defff804 	addi	sp,sp,-32
  80f11c:	df000715 	stw	fp,28(sp)
  80f120:	df000704 	addi	fp,sp,28
  80f124:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80f128:	e0bfff17 	ldw	r2,-4(fp)
  80f12c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80f130:	e0bffb17 	ldw	r2,-20(fp)
  80f134:	10800017 	ldw	r2,0(r2)
  80f138:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f13c:	e0bffc17 	ldw	r2,-16(fp)
  80f140:	10800104 	addi	r2,r2,4
  80f144:	10800037 	ldwio	r2,0(r2)
  80f148:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80f14c:	e0bffd17 	ldw	r2,-12(fp)
  80f150:	1080c00c 	andi	r2,r2,768
  80f154:	10006d26 	beq	r2,zero,80f30c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80f158:	e0bffd17 	ldw	r2,-12(fp)
  80f15c:	1080400c 	andi	r2,r2,256
  80f160:	10003526 	beq	r2,zero,80f238 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80f164:	00800074 	movhi	r2,1
  80f168:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f16c:	e0bffb17 	ldw	r2,-20(fp)
  80f170:	10800a17 	ldw	r2,40(r2)
  80f174:	10800044 	addi	r2,r2,1
  80f178:	1081ffcc 	andi	r2,r2,2047
  80f17c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80f180:	e0bffb17 	ldw	r2,-20(fp)
  80f184:	10c00b17 	ldw	r3,44(r2)
  80f188:	e0bffe17 	ldw	r2,-8(fp)
  80f18c:	18801526 	beq	r3,r2,80f1e4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80f190:	e0bffc17 	ldw	r2,-16(fp)
  80f194:	10800037 	ldwio	r2,0(r2)
  80f198:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80f19c:	e0bff917 	ldw	r2,-28(fp)
  80f1a0:	10a0000c 	andi	r2,r2,32768
  80f1a4:	10001126 	beq	r2,zero,80f1ec <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80f1a8:	e0bffb17 	ldw	r2,-20(fp)
  80f1ac:	10800a17 	ldw	r2,40(r2)
  80f1b0:	e0fff917 	ldw	r3,-28(fp)
  80f1b4:	1809883a 	mov	r4,r3
  80f1b8:	e0fffb17 	ldw	r3,-20(fp)
  80f1bc:	1885883a 	add	r2,r3,r2
  80f1c0:	10800e04 	addi	r2,r2,56
  80f1c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f1c8:	e0bffb17 	ldw	r2,-20(fp)
  80f1cc:	10800a17 	ldw	r2,40(r2)
  80f1d0:	10800044 	addi	r2,r2,1
  80f1d4:	10c1ffcc 	andi	r3,r2,2047
  80f1d8:	e0bffb17 	ldw	r2,-20(fp)
  80f1dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80f1e0:	003fe206 	br	80f16c <__alt_data_end+0xff80f16c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80f1e4:	0001883a 	nop
  80f1e8:	00000106 	br	80f1f0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80f1ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80f1f0:	e0bff917 	ldw	r2,-28(fp)
  80f1f4:	10bfffec 	andhi	r2,r2,65535
  80f1f8:	10000f26 	beq	r2,zero,80f238 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f1fc:	e0bffb17 	ldw	r2,-20(fp)
  80f200:	10c00817 	ldw	r3,32(r2)
  80f204:	00bfff84 	movi	r2,-2
  80f208:	1886703a 	and	r3,r3,r2
  80f20c:	e0bffb17 	ldw	r2,-20(fp)
  80f210:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80f214:	e0bffc17 	ldw	r2,-16(fp)
  80f218:	10800104 	addi	r2,r2,4
  80f21c:	1007883a 	mov	r3,r2
  80f220:	e0bffb17 	ldw	r2,-20(fp)
  80f224:	10800817 	ldw	r2,32(r2)
  80f228:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f22c:	e0bffc17 	ldw	r2,-16(fp)
  80f230:	10800104 	addi	r2,r2,4
  80f234:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80f238:	e0bffd17 	ldw	r2,-12(fp)
  80f23c:	1080800c 	andi	r2,r2,512
  80f240:	103fbe26 	beq	r2,zero,80f13c <__alt_data_end+0xff80f13c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80f244:	e0bffd17 	ldw	r2,-12(fp)
  80f248:	1004d43a 	srli	r2,r2,16
  80f24c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f250:	00001406 	br	80f2a4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80f254:	e0bffc17 	ldw	r2,-16(fp)
  80f258:	e0fffb17 	ldw	r3,-20(fp)
  80f25c:	18c00d17 	ldw	r3,52(r3)
  80f260:	e13ffb17 	ldw	r4,-20(fp)
  80f264:	20c7883a 	add	r3,r4,r3
  80f268:	18c20e04 	addi	r3,r3,2104
  80f26c:	18c00003 	ldbu	r3,0(r3)
  80f270:	18c03fcc 	andi	r3,r3,255
  80f274:	18c0201c 	xori	r3,r3,128
  80f278:	18ffe004 	addi	r3,r3,-128
  80f27c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f280:	e0bffb17 	ldw	r2,-20(fp)
  80f284:	10800d17 	ldw	r2,52(r2)
  80f288:	10800044 	addi	r2,r2,1
  80f28c:	10c1ffcc 	andi	r3,r2,2047
  80f290:	e0bffb17 	ldw	r2,-20(fp)
  80f294:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80f298:	e0bffa17 	ldw	r2,-24(fp)
  80f29c:	10bfffc4 	addi	r2,r2,-1
  80f2a0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f2a4:	e0bffa17 	ldw	r2,-24(fp)
  80f2a8:	10000526 	beq	r2,zero,80f2c0 <altera_avalon_jtag_uart_irq+0x1a8>
  80f2ac:	e0bffb17 	ldw	r2,-20(fp)
  80f2b0:	10c00d17 	ldw	r3,52(r2)
  80f2b4:	e0bffb17 	ldw	r2,-20(fp)
  80f2b8:	10800c17 	ldw	r2,48(r2)
  80f2bc:	18bfe51e 	bne	r3,r2,80f254 <__alt_data_end+0xff80f254>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80f2c0:	e0bffa17 	ldw	r2,-24(fp)
  80f2c4:	103f9d26 	beq	r2,zero,80f13c <__alt_data_end+0xff80f13c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f2c8:	e0bffb17 	ldw	r2,-20(fp)
  80f2cc:	10c00817 	ldw	r3,32(r2)
  80f2d0:	00bfff44 	movi	r2,-3
  80f2d4:	1886703a 	and	r3,r3,r2
  80f2d8:	e0bffb17 	ldw	r2,-20(fp)
  80f2dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f2e0:	e0bffb17 	ldw	r2,-20(fp)
  80f2e4:	10800017 	ldw	r2,0(r2)
  80f2e8:	10800104 	addi	r2,r2,4
  80f2ec:	1007883a 	mov	r3,r2
  80f2f0:	e0bffb17 	ldw	r2,-20(fp)
  80f2f4:	10800817 	ldw	r2,32(r2)
  80f2f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f2fc:	e0bffc17 	ldw	r2,-16(fp)
  80f300:	10800104 	addi	r2,r2,4
  80f304:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80f308:	003f8c06 	br	80f13c <__alt_data_end+0xff80f13c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80f30c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80f310:	0001883a 	nop
  80f314:	e037883a 	mov	sp,fp
  80f318:	df000017 	ldw	fp,0(sp)
  80f31c:	dec00104 	addi	sp,sp,4
  80f320:	f800283a 	ret

0080f324 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80f324:	defff804 	addi	sp,sp,-32
  80f328:	df000715 	stw	fp,28(sp)
  80f32c:	df000704 	addi	fp,sp,28
  80f330:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80f334:	e0bffb17 	ldw	r2,-20(fp)
  80f338:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80f33c:	e0bff917 	ldw	r2,-28(fp)
  80f340:	10800017 	ldw	r2,0(r2)
  80f344:	10800104 	addi	r2,r2,4
  80f348:	10800037 	ldwio	r2,0(r2)
  80f34c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80f350:	e0bffa17 	ldw	r2,-24(fp)
  80f354:	1081000c 	andi	r2,r2,1024
  80f358:	10000b26 	beq	r2,zero,80f388 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80f35c:	e0bff917 	ldw	r2,-28(fp)
  80f360:	10800017 	ldw	r2,0(r2)
  80f364:	10800104 	addi	r2,r2,4
  80f368:	1007883a 	mov	r3,r2
  80f36c:	e0bff917 	ldw	r2,-28(fp)
  80f370:	10800817 	ldw	r2,32(r2)
  80f374:	10810014 	ori	r2,r2,1024
  80f378:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80f37c:	e0bff917 	ldw	r2,-28(fp)
  80f380:	10000915 	stw	zero,36(r2)
  80f384:	00000a06 	br	80f3b0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80f388:	e0bff917 	ldw	r2,-28(fp)
  80f38c:	10c00917 	ldw	r3,36(r2)
  80f390:	00a00034 	movhi	r2,32768
  80f394:	10bfff04 	addi	r2,r2,-4
  80f398:	10c00536 	bltu	r2,r3,80f3b0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80f39c:	e0bff917 	ldw	r2,-28(fp)
  80f3a0:	10800917 	ldw	r2,36(r2)
  80f3a4:	10c00044 	addi	r3,r2,1
  80f3a8:	e0bff917 	ldw	r2,-28(fp)
  80f3ac:	10c00915 	stw	r3,36(r2)
  80f3b0:	d0a71517 	ldw	r2,-25516(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80f3b4:	e037883a 	mov	sp,fp
  80f3b8:	df000017 	ldw	fp,0(sp)
  80f3bc:	dec00104 	addi	sp,sp,4
  80f3c0:	f800283a 	ret

0080f3c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80f3c4:	defffd04 	addi	sp,sp,-12
  80f3c8:	df000215 	stw	fp,8(sp)
  80f3cc:	df000204 	addi	fp,sp,8
  80f3d0:	e13ffe15 	stw	r4,-8(fp)
  80f3d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f3d8:	00000506 	br	80f3f0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80f3dc:	e0bfff17 	ldw	r2,-4(fp)
  80f3e0:	1090000c 	andi	r2,r2,16384
  80f3e4:	10000226 	beq	r2,zero,80f3f0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80f3e8:	00bffd44 	movi	r2,-11
  80f3ec:	00000b06 	br	80f41c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f3f0:	e0bffe17 	ldw	r2,-8(fp)
  80f3f4:	10c00d17 	ldw	r3,52(r2)
  80f3f8:	e0bffe17 	ldw	r2,-8(fp)
  80f3fc:	10800c17 	ldw	r2,48(r2)
  80f400:	18800526 	beq	r3,r2,80f418 <altera_avalon_jtag_uart_close+0x54>
  80f404:	e0bffe17 	ldw	r2,-8(fp)
  80f408:	10c00917 	ldw	r3,36(r2)
  80f40c:	e0bffe17 	ldw	r2,-8(fp)
  80f410:	10800117 	ldw	r2,4(r2)
  80f414:	18bff136 	bltu	r3,r2,80f3dc <__alt_data_end+0xff80f3dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f418:	0005883a 	mov	r2,zero
}
  80f41c:	e037883a 	mov	sp,fp
  80f420:	df000017 	ldw	fp,0(sp)
  80f424:	dec00104 	addi	sp,sp,4
  80f428:	f800283a 	ret

0080f42c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80f42c:	defffa04 	addi	sp,sp,-24
  80f430:	df000515 	stw	fp,20(sp)
  80f434:	df000504 	addi	fp,sp,20
  80f438:	e13ffd15 	stw	r4,-12(fp)
  80f43c:	e17ffe15 	stw	r5,-8(fp)
  80f440:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80f444:	00bff9c4 	movi	r2,-25
  80f448:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80f44c:	e0bffe17 	ldw	r2,-8(fp)
  80f450:	10da8060 	cmpeqi	r3,r2,27137
  80f454:	1800031e 	bne	r3,zero,80f464 <altera_avalon_jtag_uart_ioctl+0x38>
  80f458:	109a80a0 	cmpeqi	r2,r2,27138
  80f45c:	1000181e 	bne	r2,zero,80f4c0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80f460:	00002906 	br	80f508 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80f464:	e0bffd17 	ldw	r2,-12(fp)
  80f468:	10c00117 	ldw	r3,4(r2)
  80f46c:	00a00034 	movhi	r2,32768
  80f470:	10bfffc4 	addi	r2,r2,-1
  80f474:	18802126 	beq	r3,r2,80f4fc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80f478:	e0bfff17 	ldw	r2,-4(fp)
  80f47c:	10800017 	ldw	r2,0(r2)
  80f480:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80f484:	e0bffc17 	ldw	r2,-16(fp)
  80f488:	10800090 	cmplti	r2,r2,2
  80f48c:	1000061e 	bne	r2,zero,80f4a8 <altera_avalon_jtag_uart_ioctl+0x7c>
  80f490:	e0fffc17 	ldw	r3,-16(fp)
  80f494:	00a00034 	movhi	r2,32768
  80f498:	10bfffc4 	addi	r2,r2,-1
  80f49c:	18800226 	beq	r3,r2,80f4a8 <altera_avalon_jtag_uart_ioctl+0x7c>
  80f4a0:	e0bffc17 	ldw	r2,-16(fp)
  80f4a4:	00000206 	br	80f4b0 <altera_avalon_jtag_uart_ioctl+0x84>
  80f4a8:	00a00034 	movhi	r2,32768
  80f4ac:	10bfff84 	addi	r2,r2,-2
  80f4b0:	e0fffd17 	ldw	r3,-12(fp)
  80f4b4:	18800115 	stw	r2,4(r3)
      rc = 0;
  80f4b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f4bc:	00000f06 	br	80f4fc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80f4c0:	e0bffd17 	ldw	r2,-12(fp)
  80f4c4:	10c00117 	ldw	r3,4(r2)
  80f4c8:	00a00034 	movhi	r2,32768
  80f4cc:	10bfffc4 	addi	r2,r2,-1
  80f4d0:	18800c26 	beq	r3,r2,80f504 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80f4d4:	e0bffd17 	ldw	r2,-12(fp)
  80f4d8:	10c00917 	ldw	r3,36(r2)
  80f4dc:	e0bffd17 	ldw	r2,-12(fp)
  80f4e0:	10800117 	ldw	r2,4(r2)
  80f4e4:	1885803a 	cmpltu	r2,r3,r2
  80f4e8:	10c03fcc 	andi	r3,r2,255
  80f4ec:	e0bfff17 	ldw	r2,-4(fp)
  80f4f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80f4f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f4f8:	00000206 	br	80f504 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80f4fc:	0001883a 	nop
  80f500:	00000106 	br	80f508 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80f504:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80f508:	e0bffb17 	ldw	r2,-20(fp)
}
  80f50c:	e037883a 	mov	sp,fp
  80f510:	df000017 	ldw	fp,0(sp)
  80f514:	dec00104 	addi	sp,sp,4
  80f518:	f800283a 	ret

0080f51c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80f51c:	defff304 	addi	sp,sp,-52
  80f520:	dfc00c15 	stw	ra,48(sp)
  80f524:	df000b15 	stw	fp,44(sp)
  80f528:	df000b04 	addi	fp,sp,44
  80f52c:	e13ffc15 	stw	r4,-16(fp)
  80f530:	e17ffd15 	stw	r5,-12(fp)
  80f534:	e1bffe15 	stw	r6,-8(fp)
  80f538:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80f53c:	e0bffd17 	ldw	r2,-12(fp)
  80f540:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f544:	00004706 	br	80f664 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80f548:	e0bffc17 	ldw	r2,-16(fp)
  80f54c:	10800a17 	ldw	r2,40(r2)
  80f550:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80f554:	e0bffc17 	ldw	r2,-16(fp)
  80f558:	10800b17 	ldw	r2,44(r2)
  80f55c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80f560:	e0fff717 	ldw	r3,-36(fp)
  80f564:	e0bff817 	ldw	r2,-32(fp)
  80f568:	18800536 	bltu	r3,r2,80f580 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80f56c:	e0fff717 	ldw	r3,-36(fp)
  80f570:	e0bff817 	ldw	r2,-32(fp)
  80f574:	1885c83a 	sub	r2,r3,r2
  80f578:	e0bff615 	stw	r2,-40(fp)
  80f57c:	00000406 	br	80f590 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80f580:	00c20004 	movi	r3,2048
  80f584:	e0bff817 	ldw	r2,-32(fp)
  80f588:	1885c83a 	sub	r2,r3,r2
  80f58c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f590:	e0bff617 	ldw	r2,-40(fp)
  80f594:	10001e26 	beq	r2,zero,80f610 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80f598:	e0fffe17 	ldw	r3,-8(fp)
  80f59c:	e0bff617 	ldw	r2,-40(fp)
  80f5a0:	1880022e 	bgeu	r3,r2,80f5ac <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80f5a4:	e0bffe17 	ldw	r2,-8(fp)
  80f5a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80f5ac:	e0bffc17 	ldw	r2,-16(fp)
  80f5b0:	10c00e04 	addi	r3,r2,56
  80f5b4:	e0bff817 	ldw	r2,-32(fp)
  80f5b8:	1885883a 	add	r2,r3,r2
  80f5bc:	e1bff617 	ldw	r6,-40(fp)
  80f5c0:	100b883a 	mov	r5,r2
  80f5c4:	e13ff517 	ldw	r4,-44(fp)
  80f5c8:	0806e7c0 	call	806e7c <memcpy>
      ptr   += n;
  80f5cc:	e0fff517 	ldw	r3,-44(fp)
  80f5d0:	e0bff617 	ldw	r2,-40(fp)
  80f5d4:	1885883a 	add	r2,r3,r2
  80f5d8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80f5dc:	e0fffe17 	ldw	r3,-8(fp)
  80f5e0:	e0bff617 	ldw	r2,-40(fp)
  80f5e4:	1885c83a 	sub	r2,r3,r2
  80f5e8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f5ec:	e0fff817 	ldw	r3,-32(fp)
  80f5f0:	e0bff617 	ldw	r2,-40(fp)
  80f5f4:	1885883a 	add	r2,r3,r2
  80f5f8:	10c1ffcc 	andi	r3,r2,2047
  80f5fc:	e0bffc17 	ldw	r2,-16(fp)
  80f600:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80f604:	e0bffe17 	ldw	r2,-8(fp)
  80f608:	00bfcf16 	blt	zero,r2,80f548 <__alt_data_end+0xff80f548>
  80f60c:	00000106 	br	80f614 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80f610:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80f614:	e0fff517 	ldw	r3,-44(fp)
  80f618:	e0bffd17 	ldw	r2,-12(fp)
  80f61c:	1880141e 	bne	r3,r2,80f670 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80f620:	e0bfff17 	ldw	r2,-4(fp)
  80f624:	1090000c 	andi	r2,r2,16384
  80f628:	1000131e 	bne	r2,zero,80f678 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80f62c:	0001883a 	nop
  80f630:	e0bffc17 	ldw	r2,-16(fp)
  80f634:	10c00a17 	ldw	r3,40(r2)
  80f638:	e0bff717 	ldw	r2,-36(fp)
  80f63c:	1880051e 	bne	r3,r2,80f654 <altera_avalon_jtag_uart_read+0x138>
  80f640:	e0bffc17 	ldw	r2,-16(fp)
  80f644:	10c00917 	ldw	r3,36(r2)
  80f648:	e0bffc17 	ldw	r2,-16(fp)
  80f64c:	10800117 	ldw	r2,4(r2)
  80f650:	18bff736 	bltu	r3,r2,80f630 <__alt_data_end+0xff80f630>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80f654:	e0bffc17 	ldw	r2,-16(fp)
  80f658:	10c00a17 	ldw	r3,40(r2)
  80f65c:	e0bff717 	ldw	r2,-36(fp)
  80f660:	18800726 	beq	r3,r2,80f680 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f664:	e0bffe17 	ldw	r2,-8(fp)
  80f668:	00bfb716 	blt	zero,r2,80f548 <__alt_data_end+0xff80f548>
  80f66c:	00000506 	br	80f684 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80f670:	0001883a 	nop
  80f674:	00000306 	br	80f684 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80f678:	0001883a 	nop
  80f67c:	00000106 	br	80f684 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80f680:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80f684:	e0fff517 	ldw	r3,-44(fp)
  80f688:	e0bffd17 	ldw	r2,-12(fp)
  80f68c:	18801826 	beq	r3,r2,80f6f0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f690:	0005303a 	rdctl	r2,status
  80f694:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f698:	e0fffb17 	ldw	r3,-20(fp)
  80f69c:	00bfff84 	movi	r2,-2
  80f6a0:	1884703a 	and	r2,r3,r2
  80f6a4:	1001703a 	wrctl	status,r2
  
  return context;
  80f6a8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80f6ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f6b0:	e0bffc17 	ldw	r2,-16(fp)
  80f6b4:	10800817 	ldw	r2,32(r2)
  80f6b8:	10c00054 	ori	r3,r2,1
  80f6bc:	e0bffc17 	ldw	r2,-16(fp)
  80f6c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f6c4:	e0bffc17 	ldw	r2,-16(fp)
  80f6c8:	10800017 	ldw	r2,0(r2)
  80f6cc:	10800104 	addi	r2,r2,4
  80f6d0:	1007883a 	mov	r3,r2
  80f6d4:	e0bffc17 	ldw	r2,-16(fp)
  80f6d8:	10800817 	ldw	r2,32(r2)
  80f6dc:	18800035 	stwio	r2,0(r3)
  80f6e0:	e0bffa17 	ldw	r2,-24(fp)
  80f6e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f6e8:	e0bff917 	ldw	r2,-28(fp)
  80f6ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80f6f0:	e0fff517 	ldw	r3,-44(fp)
  80f6f4:	e0bffd17 	ldw	r2,-12(fp)
  80f6f8:	18800426 	beq	r3,r2,80f70c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80f6fc:	e0fff517 	ldw	r3,-44(fp)
  80f700:	e0bffd17 	ldw	r2,-12(fp)
  80f704:	1885c83a 	sub	r2,r3,r2
  80f708:	00000606 	br	80f724 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80f70c:	e0bfff17 	ldw	r2,-4(fp)
  80f710:	1090000c 	andi	r2,r2,16384
  80f714:	10000226 	beq	r2,zero,80f720 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80f718:	00bffd44 	movi	r2,-11
  80f71c:	00000106 	br	80f724 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80f720:	00bffec4 	movi	r2,-5
}
  80f724:	e037883a 	mov	sp,fp
  80f728:	dfc00117 	ldw	ra,4(sp)
  80f72c:	df000017 	ldw	fp,0(sp)
  80f730:	dec00204 	addi	sp,sp,8
  80f734:	f800283a 	ret

0080f738 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80f738:	defff304 	addi	sp,sp,-52
  80f73c:	dfc00c15 	stw	ra,48(sp)
  80f740:	df000b15 	stw	fp,44(sp)
  80f744:	df000b04 	addi	fp,sp,44
  80f748:	e13ffc15 	stw	r4,-16(fp)
  80f74c:	e17ffd15 	stw	r5,-12(fp)
  80f750:	e1bffe15 	stw	r6,-8(fp)
  80f754:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80f758:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80f75c:	e0bffd17 	ldw	r2,-12(fp)
  80f760:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f764:	00003706 	br	80f844 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80f768:	e0bffc17 	ldw	r2,-16(fp)
  80f76c:	10800c17 	ldw	r2,48(r2)
  80f770:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80f774:	e0bffc17 	ldw	r2,-16(fp)
  80f778:	10800d17 	ldw	r2,52(r2)
  80f77c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80f780:	e0fff917 	ldw	r3,-28(fp)
  80f784:	e0bff517 	ldw	r2,-44(fp)
  80f788:	1880062e 	bgeu	r3,r2,80f7a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80f78c:	e0fff517 	ldw	r3,-44(fp)
  80f790:	e0bff917 	ldw	r2,-28(fp)
  80f794:	1885c83a 	sub	r2,r3,r2
  80f798:	10bfffc4 	addi	r2,r2,-1
  80f79c:	e0bff615 	stw	r2,-40(fp)
  80f7a0:	00000b06 	br	80f7d0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80f7a4:	e0bff517 	ldw	r2,-44(fp)
  80f7a8:	10000526 	beq	r2,zero,80f7c0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80f7ac:	00c20004 	movi	r3,2048
  80f7b0:	e0bff917 	ldw	r2,-28(fp)
  80f7b4:	1885c83a 	sub	r2,r3,r2
  80f7b8:	e0bff615 	stw	r2,-40(fp)
  80f7bc:	00000406 	br	80f7d0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80f7c0:	00c1ffc4 	movi	r3,2047
  80f7c4:	e0bff917 	ldw	r2,-28(fp)
  80f7c8:	1885c83a 	sub	r2,r3,r2
  80f7cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f7d0:	e0bff617 	ldw	r2,-40(fp)
  80f7d4:	10001e26 	beq	r2,zero,80f850 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80f7d8:	e0fffe17 	ldw	r3,-8(fp)
  80f7dc:	e0bff617 	ldw	r2,-40(fp)
  80f7e0:	1880022e 	bgeu	r3,r2,80f7ec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80f7e4:	e0bffe17 	ldw	r2,-8(fp)
  80f7e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80f7ec:	e0bffc17 	ldw	r2,-16(fp)
  80f7f0:	10c20e04 	addi	r3,r2,2104
  80f7f4:	e0bff917 	ldw	r2,-28(fp)
  80f7f8:	1885883a 	add	r2,r3,r2
  80f7fc:	e1bff617 	ldw	r6,-40(fp)
  80f800:	e17ffd17 	ldw	r5,-12(fp)
  80f804:	1009883a 	mov	r4,r2
  80f808:	0806e7c0 	call	806e7c <memcpy>
      ptr   += n;
  80f80c:	e0fffd17 	ldw	r3,-12(fp)
  80f810:	e0bff617 	ldw	r2,-40(fp)
  80f814:	1885883a 	add	r2,r3,r2
  80f818:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80f81c:	e0fffe17 	ldw	r3,-8(fp)
  80f820:	e0bff617 	ldw	r2,-40(fp)
  80f824:	1885c83a 	sub	r2,r3,r2
  80f828:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f82c:	e0fff917 	ldw	r3,-28(fp)
  80f830:	e0bff617 	ldw	r2,-40(fp)
  80f834:	1885883a 	add	r2,r3,r2
  80f838:	10c1ffcc 	andi	r3,r2,2047
  80f83c:	e0bffc17 	ldw	r2,-16(fp)
  80f840:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f844:	e0bffe17 	ldw	r2,-8(fp)
  80f848:	00bfc716 	blt	zero,r2,80f768 <__alt_data_end+0xff80f768>
  80f84c:	00000106 	br	80f854 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80f850:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f854:	0005303a 	rdctl	r2,status
  80f858:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f85c:	e0fffb17 	ldw	r3,-20(fp)
  80f860:	00bfff84 	movi	r2,-2
  80f864:	1884703a 	and	r2,r3,r2
  80f868:	1001703a 	wrctl	status,r2
  
  return context;
  80f86c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80f870:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f874:	e0bffc17 	ldw	r2,-16(fp)
  80f878:	10800817 	ldw	r2,32(r2)
  80f87c:	10c00094 	ori	r3,r2,2
  80f880:	e0bffc17 	ldw	r2,-16(fp)
  80f884:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f888:	e0bffc17 	ldw	r2,-16(fp)
  80f88c:	10800017 	ldw	r2,0(r2)
  80f890:	10800104 	addi	r2,r2,4
  80f894:	1007883a 	mov	r3,r2
  80f898:	e0bffc17 	ldw	r2,-16(fp)
  80f89c:	10800817 	ldw	r2,32(r2)
  80f8a0:	18800035 	stwio	r2,0(r3)
  80f8a4:	e0bffa17 	ldw	r2,-24(fp)
  80f8a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f8ac:	e0bff817 	ldw	r2,-32(fp)
  80f8b0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80f8b4:	e0bffe17 	ldw	r2,-8(fp)
  80f8b8:	0080100e 	bge	zero,r2,80f8fc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80f8bc:	e0bfff17 	ldw	r2,-4(fp)
  80f8c0:	1090000c 	andi	r2,r2,16384
  80f8c4:	1000101e 	bne	r2,zero,80f908 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80f8c8:	0001883a 	nop
  80f8cc:	e0bffc17 	ldw	r2,-16(fp)
  80f8d0:	10c00d17 	ldw	r3,52(r2)
  80f8d4:	e0bff517 	ldw	r2,-44(fp)
  80f8d8:	1880051e 	bne	r3,r2,80f8f0 <altera_avalon_jtag_uart_write+0x1b8>
  80f8dc:	e0bffc17 	ldw	r2,-16(fp)
  80f8e0:	10c00917 	ldw	r3,36(r2)
  80f8e4:	e0bffc17 	ldw	r2,-16(fp)
  80f8e8:	10800117 	ldw	r2,4(r2)
  80f8ec:	18bff736 	bltu	r3,r2,80f8cc <__alt_data_end+0xff80f8cc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80f8f0:	e0bffc17 	ldw	r2,-16(fp)
  80f8f4:	10800917 	ldw	r2,36(r2)
  80f8f8:	1000051e 	bne	r2,zero,80f910 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80f8fc:	e0bffe17 	ldw	r2,-8(fp)
  80f900:	00bfd016 	blt	zero,r2,80f844 <__alt_data_end+0xff80f844>
  80f904:	00000306 	br	80f914 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80f908:	0001883a 	nop
  80f90c:	00000106 	br	80f914 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80f910:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80f914:	e0fffd17 	ldw	r3,-12(fp)
  80f918:	e0bff717 	ldw	r2,-36(fp)
  80f91c:	18800426 	beq	r3,r2,80f930 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80f920:	e0fffd17 	ldw	r3,-12(fp)
  80f924:	e0bff717 	ldw	r2,-36(fp)
  80f928:	1885c83a 	sub	r2,r3,r2
  80f92c:	00000606 	br	80f948 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80f930:	e0bfff17 	ldw	r2,-4(fp)
  80f934:	1090000c 	andi	r2,r2,16384
  80f938:	10000226 	beq	r2,zero,80f944 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80f93c:	00bffd44 	movi	r2,-11
  80f940:	00000106 	br	80f948 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80f944:	00bffec4 	movi	r2,-5
}
  80f948:	e037883a 	mov	sp,fp
  80f94c:	dfc00117 	ldw	ra,4(sp)
  80f950:	df000017 	ldw	fp,0(sp)
  80f954:	dec00204 	addi	sp,sp,8
  80f958:	f800283a 	ret

0080f95c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80f95c:	defffa04 	addi	sp,sp,-24
  80f960:	dfc00515 	stw	ra,20(sp)
  80f964:	df000415 	stw	fp,16(sp)
  80f968:	df000404 	addi	fp,sp,16
  80f96c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80f970:	0007883a 	mov	r3,zero
  80f974:	e0bfff17 	ldw	r2,-4(fp)
  80f978:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80f97c:	e0bfff17 	ldw	r2,-4(fp)
  80f980:	10800104 	addi	r2,r2,4
  80f984:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f988:	0005303a 	rdctl	r2,status
  80f98c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f990:	e0fffd17 	ldw	r3,-12(fp)
  80f994:	00bfff84 	movi	r2,-2
  80f998:	1884703a 	and	r2,r3,r2
  80f99c:	1001703a 	wrctl	status,r2
  
  return context;
  80f9a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80f9a4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80f9a8:	08105480 	call	810548 <alt_tick>
  80f9ac:	e0bffc17 	ldw	r2,-16(fp)
  80f9b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f9b4:	e0bffe17 	ldw	r2,-8(fp)
  80f9b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80f9bc:	0001883a 	nop
  80f9c0:	e037883a 	mov	sp,fp
  80f9c4:	dfc00117 	ldw	ra,4(sp)
  80f9c8:	df000017 	ldw	fp,0(sp)
  80f9cc:	dec00204 	addi	sp,sp,8
  80f9d0:	f800283a 	ret

0080f9d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80f9d4:	defff804 	addi	sp,sp,-32
  80f9d8:	dfc00715 	stw	ra,28(sp)
  80f9dc:	df000615 	stw	fp,24(sp)
  80f9e0:	df000604 	addi	fp,sp,24
  80f9e4:	e13ffc15 	stw	r4,-16(fp)
  80f9e8:	e17ffd15 	stw	r5,-12(fp)
  80f9ec:	e1bffe15 	stw	r6,-8(fp)
  80f9f0:	e1ffff15 	stw	r7,-4(fp)
  80f9f4:	e0bfff17 	ldw	r2,-4(fp)
  80f9f8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80f9fc:	d0a71517 	ldw	r2,-25516(gp)
  80fa00:	1000021e 	bne	r2,zero,80fa0c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80fa04:	e0bffb17 	ldw	r2,-20(fp)
  80fa08:	d0a71515 	stw	r2,-25516(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80fa0c:	e0bffc17 	ldw	r2,-16(fp)
  80fa10:	10800104 	addi	r2,r2,4
  80fa14:	00c001c4 	movi	r3,7
  80fa18:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80fa1c:	d8000015 	stw	zero,0(sp)
  80fa20:	e1fffc17 	ldw	r7,-16(fp)
  80fa24:	01802074 	movhi	r6,129
  80fa28:	31be5704 	addi	r6,r6,-1700
  80fa2c:	e17ffe17 	ldw	r5,-8(fp)
  80fa30:	e13ffd17 	ldw	r4,-12(fp)
  80fa34:	080fe280 	call	80fe28 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80fa38:	0001883a 	nop
  80fa3c:	e037883a 	mov	sp,fp
  80fa40:	dfc00117 	ldw	ra,4(sp)
  80fa44:	df000017 	ldw	fp,0(sp)
  80fa48:	dec00204 	addi	sp,sp,8
  80fa4c:	f800283a 	ret

0080fa50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80fa50:	defff504 	addi	sp,sp,-44
  80fa54:	df000a15 	stw	fp,40(sp)
  80fa58:	df000a04 	addi	fp,sp,40
  80fa5c:	e13ffc15 	stw	r4,-16(fp)
  80fa60:	e17ffd15 	stw	r5,-12(fp)
  80fa64:	e1bffe15 	stw	r6,-8(fp)
  80fa68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80fa6c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80fa70:	d0a71517 	ldw	r2,-25516(gp)
  
  if (alt_ticks_per_second ())
  80fa74:	10003c26 	beq	r2,zero,80fb68 <alt_alarm_start+0x118>
  {
    if (alarm)
  80fa78:	e0bffc17 	ldw	r2,-16(fp)
  80fa7c:	10003826 	beq	r2,zero,80fb60 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80fa80:	e0bffc17 	ldw	r2,-16(fp)
  80fa84:	e0fffe17 	ldw	r3,-8(fp)
  80fa88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80fa8c:	e0bffc17 	ldw	r2,-16(fp)
  80fa90:	e0ffff17 	ldw	r3,-4(fp)
  80fa94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa98:	0005303a 	rdctl	r2,status
  80fa9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80faa0:	e0fff917 	ldw	r3,-28(fp)
  80faa4:	00bfff84 	movi	r2,-2
  80faa8:	1884703a 	and	r2,r3,r2
  80faac:	1001703a 	wrctl	status,r2
  
  return context;
  80fab0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80fab4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80fab8:	d0a71617 	ldw	r2,-25512(gp)
      
      current_nticks = alt_nticks();
  80fabc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80fac0:	e0fffd17 	ldw	r3,-12(fp)
  80fac4:	e0bff617 	ldw	r2,-40(fp)
  80fac8:	1885883a 	add	r2,r3,r2
  80facc:	10c00044 	addi	r3,r2,1
  80fad0:	e0bffc17 	ldw	r2,-16(fp)
  80fad4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80fad8:	e0bffc17 	ldw	r2,-16(fp)
  80fadc:	10c00217 	ldw	r3,8(r2)
  80fae0:	e0bff617 	ldw	r2,-40(fp)
  80fae4:	1880042e 	bgeu	r3,r2,80faf8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80fae8:	e0bffc17 	ldw	r2,-16(fp)
  80faec:	00c00044 	movi	r3,1
  80faf0:	10c00405 	stb	r3,16(r2)
  80faf4:	00000206 	br	80fb00 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80faf8:	e0bffc17 	ldw	r2,-16(fp)
  80fafc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80fb00:	e0bffc17 	ldw	r2,-16(fp)
  80fb04:	d0e01204 	addi	r3,gp,-32696
  80fb08:	e0fffa15 	stw	r3,-24(fp)
  80fb0c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80fb10:	e0bffb17 	ldw	r2,-20(fp)
  80fb14:	e0fffa17 	ldw	r3,-24(fp)
  80fb18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80fb1c:	e0bffa17 	ldw	r2,-24(fp)
  80fb20:	10c00017 	ldw	r3,0(r2)
  80fb24:	e0bffb17 	ldw	r2,-20(fp)
  80fb28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80fb2c:	e0bffa17 	ldw	r2,-24(fp)
  80fb30:	10800017 	ldw	r2,0(r2)
  80fb34:	e0fffb17 	ldw	r3,-20(fp)
  80fb38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80fb3c:	e0bffa17 	ldw	r2,-24(fp)
  80fb40:	e0fffb17 	ldw	r3,-20(fp)
  80fb44:	10c00015 	stw	r3,0(r2)
  80fb48:	e0bff817 	ldw	r2,-32(fp)
  80fb4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fb50:	e0bff717 	ldw	r2,-36(fp)
  80fb54:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80fb58:	0005883a 	mov	r2,zero
  80fb5c:	00000306 	br	80fb6c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80fb60:	00bffa84 	movi	r2,-22
  80fb64:	00000106 	br	80fb6c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80fb68:	00bfde84 	movi	r2,-134
  }
}
  80fb6c:	e037883a 	mov	sp,fp
  80fb70:	df000017 	ldw	fp,0(sp)
  80fb74:	dec00104 	addi	sp,sp,4
  80fb78:	f800283a 	ret

0080fb7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80fb7c:	defffe04 	addi	sp,sp,-8
  80fb80:	df000115 	stw	fp,4(sp)
  80fb84:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80fb88:	e03fff15 	stw	zero,-4(fp)
  80fb8c:	00000506 	br	80fba4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80fb90:	e0bfff17 	ldw	r2,-4(fp)
  80fb94:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80fb98:	e0bfff17 	ldw	r2,-4(fp)
  80fb9c:	10800804 	addi	r2,r2,32
  80fba0:	e0bfff15 	stw	r2,-4(fp)
  80fba4:	e0bfff17 	ldw	r2,-4(fp)
  80fba8:	10820030 	cmpltui	r2,r2,2048
  80fbac:	103ff81e 	bne	r2,zero,80fb90 <__alt_data_end+0xff80fb90>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80fbb0:	0001883a 	nop
  80fbb4:	e037883a 	mov	sp,fp
  80fbb8:	df000017 	ldw	fp,0(sp)
  80fbbc:	dec00104 	addi	sp,sp,4
  80fbc0:	f800283a 	ret

0080fbc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fbc4:	defffe04 	addi	sp,sp,-8
  80fbc8:	dfc00115 	stw	ra,4(sp)
  80fbcc:	df000015 	stw	fp,0(sp)
  80fbd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fbd4:	d0a00d17 	ldw	r2,-32716(gp)
  80fbd8:	10000326 	beq	r2,zero,80fbe8 <alt_get_errno+0x24>
  80fbdc:	d0a00d17 	ldw	r2,-32716(gp)
  80fbe0:	103ee83a 	callr	r2
  80fbe4:	00000106 	br	80fbec <alt_get_errno+0x28>
  80fbe8:	d0a70d04 	addi	r2,gp,-25548
}
  80fbec:	e037883a 	mov	sp,fp
  80fbf0:	dfc00117 	ldw	ra,4(sp)
  80fbf4:	df000017 	ldw	fp,0(sp)
  80fbf8:	dec00204 	addi	sp,sp,8
  80fbfc:	f800283a 	ret

0080fc00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80fc00:	defffa04 	addi	sp,sp,-24
  80fc04:	dfc00515 	stw	ra,20(sp)
  80fc08:	df000415 	stw	fp,16(sp)
  80fc0c:	df000404 	addi	fp,sp,16
  80fc10:	e13ffe15 	stw	r4,-8(fp)
  80fc14:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80fc18:	e0bffe17 	ldw	r2,-8(fp)
  80fc1c:	10000326 	beq	r2,zero,80fc2c <alt_dev_llist_insert+0x2c>
  80fc20:	e0bffe17 	ldw	r2,-8(fp)
  80fc24:	10800217 	ldw	r2,8(r2)
  80fc28:	1000061e 	bne	r2,zero,80fc44 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80fc2c:	080fbc40 	call	80fbc4 <alt_get_errno>
  80fc30:	1007883a 	mov	r3,r2
  80fc34:	00800584 	movi	r2,22
  80fc38:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80fc3c:	00bffa84 	movi	r2,-22
  80fc40:	00001306 	br	80fc90 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80fc44:	e0bffe17 	ldw	r2,-8(fp)
  80fc48:	e0ffff17 	ldw	r3,-4(fp)
  80fc4c:	e0fffc15 	stw	r3,-16(fp)
  80fc50:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80fc54:	e0bffd17 	ldw	r2,-12(fp)
  80fc58:	e0fffc17 	ldw	r3,-16(fp)
  80fc5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80fc60:	e0bffc17 	ldw	r2,-16(fp)
  80fc64:	10c00017 	ldw	r3,0(r2)
  80fc68:	e0bffd17 	ldw	r2,-12(fp)
  80fc6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80fc70:	e0bffc17 	ldw	r2,-16(fp)
  80fc74:	10800017 	ldw	r2,0(r2)
  80fc78:	e0fffd17 	ldw	r3,-12(fp)
  80fc7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80fc80:	e0bffc17 	ldw	r2,-16(fp)
  80fc84:	e0fffd17 	ldw	r3,-12(fp)
  80fc88:	10c00015 	stw	r3,0(r2)

  return 0;  
  80fc8c:	0005883a 	mov	r2,zero
}
  80fc90:	e037883a 	mov	sp,fp
  80fc94:	dfc00117 	ldw	ra,4(sp)
  80fc98:	df000017 	ldw	fp,0(sp)
  80fc9c:	dec00204 	addi	sp,sp,8
  80fca0:	f800283a 	ret

0080fca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fca4:	defffe04 	addi	sp,sp,-8
  80fca8:	dfc00115 	stw	ra,4(sp)
  80fcac:	df000015 	stw	fp,0(sp)
  80fcb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fcb4:	d0a00d17 	ldw	r2,-32716(gp)
  80fcb8:	10000326 	beq	r2,zero,80fcc8 <alt_get_errno+0x24>
  80fcbc:	d0a00d17 	ldw	r2,-32716(gp)
  80fcc0:	103ee83a 	callr	r2
  80fcc4:	00000106 	br	80fccc <alt_get_errno+0x28>
  80fcc8:	d0a70d04 	addi	r2,gp,-25548
}
  80fccc:	e037883a 	mov	sp,fp
  80fcd0:	dfc00117 	ldw	ra,4(sp)
  80fcd4:	df000017 	ldw	fp,0(sp)
  80fcd8:	dec00204 	addi	sp,sp,8
  80fcdc:	f800283a 	ret

0080fce0 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
  80fce0:	defffc04 	addi	sp,sp,-16
  80fce4:	dfc00315 	stw	ra,12(sp)
  80fce8:	df000215 	stw	fp,8(sp)
  80fcec:	df000204 	addi	fp,sp,8
  80fcf0:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
  80fcf4:	d1600f04 	addi	r5,gp,-32708
  80fcf8:	e13fff17 	ldw	r4,-4(fp)
  80fcfc:	080d9580 	call	80d958 <alt_find_dev>
  80fd00:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
  80fd04:	e0bffe17 	ldw	r2,-8(fp)
  80fd08:	1000041e 	bne	r2,zero,80fd1c <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
  80fd0c:	080fca40 	call	80fca4 <alt_get_errno>
  80fd10:	1007883a 	mov	r3,r2
  80fd14:	008004c4 	movi	r2,19
  80fd18:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80fd1c:	e0bffe17 	ldw	r2,-8(fp)
}
  80fd20:	e037883a 	mov	sp,fp
  80fd24:	dfc00117 	ldw	ra,4(sp)
  80fd28:	df000017 	ldw	fp,0(sp)
  80fd2c:	dec00204 	addi	sp,sp,8
  80fd30:	f800283a 	ret

0080fd34 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80fd34:	defffd04 	addi	sp,sp,-12
  80fd38:	dfc00215 	stw	ra,8(sp)
  80fd3c:	df000115 	stw	fp,4(sp)
  80fd40:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80fd44:	00802074 	movhi	r2,129
  80fd48:	10833f04 	addi	r2,r2,3324
  80fd4c:	e0bfff15 	stw	r2,-4(fp)
  80fd50:	00000606 	br	80fd6c <_do_ctors+0x38>
        (*ctor) (); 
  80fd54:	e0bfff17 	ldw	r2,-4(fp)
  80fd58:	10800017 	ldw	r2,0(r2)
  80fd5c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80fd60:	e0bfff17 	ldw	r2,-4(fp)
  80fd64:	10bfff04 	addi	r2,r2,-4
  80fd68:	e0bfff15 	stw	r2,-4(fp)
  80fd6c:	e0ffff17 	ldw	r3,-4(fp)
  80fd70:	00802074 	movhi	r2,129
  80fd74:	10834004 	addi	r2,r2,3328
  80fd78:	18bff62e 	bgeu	r3,r2,80fd54 <__alt_data_end+0xff80fd54>
        (*ctor) (); 
}
  80fd7c:	0001883a 	nop
  80fd80:	e037883a 	mov	sp,fp
  80fd84:	dfc00117 	ldw	ra,4(sp)
  80fd88:	df000017 	ldw	fp,0(sp)
  80fd8c:	dec00204 	addi	sp,sp,8
  80fd90:	f800283a 	ret

0080fd94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80fd94:	defffd04 	addi	sp,sp,-12
  80fd98:	dfc00215 	stw	ra,8(sp)
  80fd9c:	df000115 	stw	fp,4(sp)
  80fda0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80fda4:	00802074 	movhi	r2,129
  80fda8:	10833f04 	addi	r2,r2,3324
  80fdac:	e0bfff15 	stw	r2,-4(fp)
  80fdb0:	00000606 	br	80fdcc <_do_dtors+0x38>
        (*dtor) (); 
  80fdb4:	e0bfff17 	ldw	r2,-4(fp)
  80fdb8:	10800017 	ldw	r2,0(r2)
  80fdbc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80fdc0:	e0bfff17 	ldw	r2,-4(fp)
  80fdc4:	10bfff04 	addi	r2,r2,-4
  80fdc8:	e0bfff15 	stw	r2,-4(fp)
  80fdcc:	e0ffff17 	ldw	r3,-4(fp)
  80fdd0:	00802074 	movhi	r2,129
  80fdd4:	10834004 	addi	r2,r2,3328
  80fdd8:	18bff62e 	bgeu	r3,r2,80fdb4 <__alt_data_end+0xff80fdb4>
        (*dtor) (); 
}
  80fddc:	0001883a 	nop
  80fde0:	e037883a 	mov	sp,fp
  80fde4:	dfc00117 	ldw	ra,4(sp)
  80fde8:	df000017 	ldw	fp,0(sp)
  80fdec:	dec00204 	addi	sp,sp,8
  80fdf0:	f800283a 	ret

0080fdf4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80fdf4:	defffe04 	addi	sp,sp,-8
  80fdf8:	dfc00115 	stw	ra,4(sp)
  80fdfc:	df000015 	stw	fp,0(sp)
  80fe00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80fe04:	01440004 	movi	r5,4096
  80fe08:	0009883a 	mov	r4,zero
  80fe0c:	08108400 	call	810840 <alt_icache_flush>
#endif
}
  80fe10:	0001883a 	nop
  80fe14:	e037883a 	mov	sp,fp
  80fe18:	dfc00117 	ldw	ra,4(sp)
  80fe1c:	df000017 	ldw	fp,0(sp)
  80fe20:	dec00204 	addi	sp,sp,8
  80fe24:	f800283a 	ret

0080fe28 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80fe28:	defff904 	addi	sp,sp,-28
  80fe2c:	dfc00615 	stw	ra,24(sp)
  80fe30:	df000515 	stw	fp,20(sp)
  80fe34:	df000504 	addi	fp,sp,20
  80fe38:	e13ffc15 	stw	r4,-16(fp)
  80fe3c:	e17ffd15 	stw	r5,-12(fp)
  80fe40:	e1bffe15 	stw	r6,-8(fp)
  80fe44:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80fe48:	e0800217 	ldw	r2,8(fp)
  80fe4c:	d8800015 	stw	r2,0(sp)
  80fe50:	e1ffff17 	ldw	r7,-4(fp)
  80fe54:	e1bffe17 	ldw	r6,-8(fp)
  80fe58:	e17ffd17 	ldw	r5,-12(fp)
  80fe5c:	e13ffc17 	ldw	r4,-16(fp)
  80fe60:	080ffd80 	call	80ffd8 <alt_iic_isr_register>
}  
  80fe64:	e037883a 	mov	sp,fp
  80fe68:	dfc00117 	ldw	ra,4(sp)
  80fe6c:	df000017 	ldw	fp,0(sp)
  80fe70:	dec00204 	addi	sp,sp,8
  80fe74:	f800283a 	ret

0080fe78 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80fe78:	defff904 	addi	sp,sp,-28
  80fe7c:	df000615 	stw	fp,24(sp)
  80fe80:	df000604 	addi	fp,sp,24
  80fe84:	e13ffe15 	stw	r4,-8(fp)
  80fe88:	e17fff15 	stw	r5,-4(fp)
  80fe8c:	e0bfff17 	ldw	r2,-4(fp)
  80fe90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe94:	0005303a 	rdctl	r2,status
  80fe98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe9c:	e0fffb17 	ldw	r3,-20(fp)
  80fea0:	00bfff84 	movi	r2,-2
  80fea4:	1884703a 	and	r2,r3,r2
  80fea8:	1001703a 	wrctl	status,r2
  
  return context;
  80feac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80feb0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80feb4:	00c00044 	movi	r3,1
  80feb8:	e0bffa17 	ldw	r2,-24(fp)
  80febc:	1884983a 	sll	r2,r3,r2
  80fec0:	1007883a 	mov	r3,r2
  80fec4:	d0a71417 	ldw	r2,-25520(gp)
  80fec8:	1884b03a 	or	r2,r3,r2
  80fecc:	d0a71415 	stw	r2,-25520(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fed0:	d0a71417 	ldw	r2,-25520(gp)
  80fed4:	100170fa 	wrctl	ienable,r2
  80fed8:	e0bffc17 	ldw	r2,-16(fp)
  80fedc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fee0:	e0bffd17 	ldw	r2,-12(fp)
  80fee4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fee8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80feec:	0001883a 	nop
}
  80fef0:	e037883a 	mov	sp,fp
  80fef4:	df000017 	ldw	fp,0(sp)
  80fef8:	dec00104 	addi	sp,sp,4
  80fefc:	f800283a 	ret

0080ff00 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80ff00:	defff904 	addi	sp,sp,-28
  80ff04:	df000615 	stw	fp,24(sp)
  80ff08:	df000604 	addi	fp,sp,24
  80ff0c:	e13ffe15 	stw	r4,-8(fp)
  80ff10:	e17fff15 	stw	r5,-4(fp)
  80ff14:	e0bfff17 	ldw	r2,-4(fp)
  80ff18:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff1c:	0005303a 	rdctl	r2,status
  80ff20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff24:	e0fffb17 	ldw	r3,-20(fp)
  80ff28:	00bfff84 	movi	r2,-2
  80ff2c:	1884703a 	and	r2,r3,r2
  80ff30:	1001703a 	wrctl	status,r2
  
  return context;
  80ff34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ff38:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80ff3c:	00c00044 	movi	r3,1
  80ff40:	e0bffa17 	ldw	r2,-24(fp)
  80ff44:	1884983a 	sll	r2,r3,r2
  80ff48:	0084303a 	nor	r2,zero,r2
  80ff4c:	1007883a 	mov	r3,r2
  80ff50:	d0a71417 	ldw	r2,-25520(gp)
  80ff54:	1884703a 	and	r2,r3,r2
  80ff58:	d0a71415 	stw	r2,-25520(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ff5c:	d0a71417 	ldw	r2,-25520(gp)
  80ff60:	100170fa 	wrctl	ienable,r2
  80ff64:	e0bffc17 	ldw	r2,-16(fp)
  80ff68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ff6c:	e0bffd17 	ldw	r2,-12(fp)
  80ff70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ff74:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80ff78:	0001883a 	nop
}
  80ff7c:	e037883a 	mov	sp,fp
  80ff80:	df000017 	ldw	fp,0(sp)
  80ff84:	dec00104 	addi	sp,sp,4
  80ff88:	f800283a 	ret

0080ff8c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80ff8c:	defffc04 	addi	sp,sp,-16
  80ff90:	df000315 	stw	fp,12(sp)
  80ff94:	df000304 	addi	fp,sp,12
  80ff98:	e13ffe15 	stw	r4,-8(fp)
  80ff9c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80ffa0:	000530fa 	rdctl	r2,ienable
  80ffa4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80ffa8:	00c00044 	movi	r3,1
  80ffac:	e0bfff17 	ldw	r2,-4(fp)
  80ffb0:	1884983a 	sll	r2,r3,r2
  80ffb4:	1007883a 	mov	r3,r2
  80ffb8:	e0bffd17 	ldw	r2,-12(fp)
  80ffbc:	1884703a 	and	r2,r3,r2
  80ffc0:	1004c03a 	cmpne	r2,r2,zero
  80ffc4:	10803fcc 	andi	r2,r2,255
}
  80ffc8:	e037883a 	mov	sp,fp
  80ffcc:	df000017 	ldw	fp,0(sp)
  80ffd0:	dec00104 	addi	sp,sp,4
  80ffd4:	f800283a 	ret

0080ffd8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ffd8:	defff504 	addi	sp,sp,-44
  80ffdc:	dfc00a15 	stw	ra,40(sp)
  80ffe0:	df000915 	stw	fp,36(sp)
  80ffe4:	df000904 	addi	fp,sp,36
  80ffe8:	e13ffc15 	stw	r4,-16(fp)
  80ffec:	e17ffd15 	stw	r5,-12(fp)
  80fff0:	e1bffe15 	stw	r6,-8(fp)
  80fff4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80fff8:	00bffa84 	movi	r2,-22
  80fffc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  810000:	e0bffd17 	ldw	r2,-12(fp)
  810004:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810008:	e0bff817 	ldw	r2,-32(fp)
  81000c:	10800808 	cmpgei	r2,r2,32
  810010:	1000271e 	bne	r2,zero,8100b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810014:	0005303a 	rdctl	r2,status
  810018:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81001c:	e0fffb17 	ldw	r3,-20(fp)
  810020:	00bfff84 	movi	r2,-2
  810024:	1884703a 	and	r2,r3,r2
  810028:	1001703a 	wrctl	status,r2
  
  return context;
  81002c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  810030:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  810034:	00802074 	movhi	r2,129
  810038:	10925004 	addi	r2,r2,18752
  81003c:	e0fff817 	ldw	r3,-32(fp)
  810040:	180690fa 	slli	r3,r3,3
  810044:	10c5883a 	add	r2,r2,r3
  810048:	e0fffe17 	ldw	r3,-8(fp)
  81004c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  810050:	00802074 	movhi	r2,129
  810054:	10925004 	addi	r2,r2,18752
  810058:	e0fff817 	ldw	r3,-32(fp)
  81005c:	180690fa 	slli	r3,r3,3
  810060:	10c5883a 	add	r2,r2,r3
  810064:	10800104 	addi	r2,r2,4
  810068:	e0ffff17 	ldw	r3,-4(fp)
  81006c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  810070:	e0bffe17 	ldw	r2,-8(fp)
  810074:	10000526 	beq	r2,zero,81008c <alt_iic_isr_register+0xb4>
  810078:	e0bff817 	ldw	r2,-32(fp)
  81007c:	100b883a 	mov	r5,r2
  810080:	e13ffc17 	ldw	r4,-16(fp)
  810084:	080fe780 	call	80fe78 <alt_ic_irq_enable>
  810088:	00000406 	br	81009c <alt_iic_isr_register+0xc4>
  81008c:	e0bff817 	ldw	r2,-32(fp)
  810090:	100b883a 	mov	r5,r2
  810094:	e13ffc17 	ldw	r4,-16(fp)
  810098:	080ff000 	call	80ff00 <alt_ic_irq_disable>
  81009c:	e0bff715 	stw	r2,-36(fp)
  8100a0:	e0bffa17 	ldw	r2,-24(fp)
  8100a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8100a8:	e0bff917 	ldw	r2,-28(fp)
  8100ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8100b0:	e0bff717 	ldw	r2,-36(fp)
}
  8100b4:	e037883a 	mov	sp,fp
  8100b8:	dfc00117 	ldw	ra,4(sp)
  8100bc:	df000017 	ldw	fp,0(sp)
  8100c0:	dec00204 	addi	sp,sp,8
  8100c4:	f800283a 	ret

008100c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8100c8:	defff804 	addi	sp,sp,-32
  8100cc:	dfc00715 	stw	ra,28(sp)
  8100d0:	df000615 	stw	fp,24(sp)
  8100d4:	dc000515 	stw	r16,20(sp)
  8100d8:	df000604 	addi	fp,sp,24
  8100dc:	e13ffb15 	stw	r4,-20(fp)
  8100e0:	e17ffc15 	stw	r5,-16(fp)
  8100e4:	e1bffd15 	stw	r6,-12(fp)
  8100e8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  8100ec:	e1bffe17 	ldw	r6,-8(fp)
  8100f0:	e17ffd17 	ldw	r5,-12(fp)
  8100f4:	e13ffc17 	ldw	r4,-16(fp)
  8100f8:	08103500 	call	810350 <open>
  8100fc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  810100:	e0bffa17 	ldw	r2,-24(fp)
  810104:	10002216 	blt	r2,zero,810190 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  810108:	04002074 	movhi	r16,129
  81010c:	84067f04 	addi	r16,r16,6652
  810110:	e0bffa17 	ldw	r2,-24(fp)
  810114:	01400304 	movi	r5,12
  810118:	1009883a 	mov	r4,r2
  81011c:	080b8a80 	call	80b8a8 <__mulsi3>
  810120:	8085883a 	add	r2,r16,r2
  810124:	10c00017 	ldw	r3,0(r2)
  810128:	e0bffb17 	ldw	r2,-20(fp)
  81012c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  810130:	04002074 	movhi	r16,129
  810134:	84067f04 	addi	r16,r16,6652
  810138:	e0bffa17 	ldw	r2,-24(fp)
  81013c:	01400304 	movi	r5,12
  810140:	1009883a 	mov	r4,r2
  810144:	080b8a80 	call	80b8a8 <__mulsi3>
  810148:	8085883a 	add	r2,r16,r2
  81014c:	10800104 	addi	r2,r2,4
  810150:	10c00017 	ldw	r3,0(r2)
  810154:	e0bffb17 	ldw	r2,-20(fp)
  810158:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81015c:	04002074 	movhi	r16,129
  810160:	84067f04 	addi	r16,r16,6652
  810164:	e0bffa17 	ldw	r2,-24(fp)
  810168:	01400304 	movi	r5,12
  81016c:	1009883a 	mov	r4,r2
  810170:	080b8a80 	call	80b8a8 <__mulsi3>
  810174:	8085883a 	add	r2,r16,r2
  810178:	10800204 	addi	r2,r2,8
  81017c:	10c00017 	ldw	r3,0(r2)
  810180:	e0bffb17 	ldw	r2,-20(fp)
  810184:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  810188:	e13ffa17 	ldw	r4,-24(fp)
  81018c:	080dfcc0 	call	80dfcc <alt_release_fd>
  }
} 
  810190:	0001883a 	nop
  810194:	e6ffff04 	addi	sp,fp,-4
  810198:	dfc00217 	ldw	ra,8(sp)
  81019c:	df000117 	ldw	fp,4(sp)
  8101a0:	dc000017 	ldw	r16,0(sp)
  8101a4:	dec00304 	addi	sp,sp,12
  8101a8:	f800283a 	ret

008101ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8101ac:	defffb04 	addi	sp,sp,-20
  8101b0:	dfc00415 	stw	ra,16(sp)
  8101b4:	df000315 	stw	fp,12(sp)
  8101b8:	df000304 	addi	fp,sp,12
  8101bc:	e13ffd15 	stw	r4,-12(fp)
  8101c0:	e17ffe15 	stw	r5,-8(fp)
  8101c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8101c8:	01c07fc4 	movi	r7,511
  8101cc:	01800044 	movi	r6,1
  8101d0:	e17ffd17 	ldw	r5,-12(fp)
  8101d4:	01002074 	movhi	r4,129
  8101d8:	21068204 	addi	r4,r4,6664
  8101dc:	08100c80 	call	8100c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8101e0:	01c07fc4 	movi	r7,511
  8101e4:	000d883a 	mov	r6,zero
  8101e8:	e17ffe17 	ldw	r5,-8(fp)
  8101ec:	01002074 	movhi	r4,129
  8101f0:	21067f04 	addi	r4,r4,6652
  8101f4:	08100c80 	call	8100c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8101f8:	01c07fc4 	movi	r7,511
  8101fc:	01800044 	movi	r6,1
  810200:	e17fff17 	ldw	r5,-4(fp)
  810204:	01002074 	movhi	r4,129
  810208:	21068504 	addi	r4,r4,6676
  81020c:	08100c80 	call	8100c8 <alt_open_fd>
}  
  810210:	0001883a 	nop
  810214:	e037883a 	mov	sp,fp
  810218:	dfc00117 	ldw	ra,4(sp)
  81021c:	df000017 	ldw	fp,0(sp)
  810220:	dec00204 	addi	sp,sp,8
  810224:	f800283a 	ret

00810228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810228:	defffe04 	addi	sp,sp,-8
  81022c:	dfc00115 	stw	ra,4(sp)
  810230:	df000015 	stw	fp,0(sp)
  810234:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810238:	d0a00d17 	ldw	r2,-32716(gp)
  81023c:	10000326 	beq	r2,zero,81024c <alt_get_errno+0x24>
  810240:	d0a00d17 	ldw	r2,-32716(gp)
  810244:	103ee83a 	callr	r2
  810248:	00000106 	br	810250 <alt_get_errno+0x28>
  81024c:	d0a70d04 	addi	r2,gp,-25548
}
  810250:	e037883a 	mov	sp,fp
  810254:	dfc00117 	ldw	ra,4(sp)
  810258:	df000017 	ldw	fp,0(sp)
  81025c:	dec00204 	addi	sp,sp,8
  810260:	f800283a 	ret

00810264 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810264:	defffb04 	addi	sp,sp,-20
  810268:	dfc00415 	stw	ra,16(sp)
  81026c:	df000315 	stw	fp,12(sp)
  810270:	dc000215 	stw	r16,8(sp)
  810274:	df000304 	addi	fp,sp,12
  810278:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81027c:	e0bffe17 	ldw	r2,-8(fp)
  810280:	10800217 	ldw	r2,8(r2)
  810284:	10d00034 	orhi	r3,r2,16384
  810288:	e0bffe17 	ldw	r2,-8(fp)
  81028c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810290:	e03ffd15 	stw	zero,-12(fp)
  810294:	00002306 	br	810324 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810298:	04002074 	movhi	r16,129
  81029c:	84067f04 	addi	r16,r16,6652
  8102a0:	e0bffd17 	ldw	r2,-12(fp)
  8102a4:	01400304 	movi	r5,12
  8102a8:	1009883a 	mov	r4,r2
  8102ac:	080b8a80 	call	80b8a8 <__mulsi3>
  8102b0:	8085883a 	add	r2,r16,r2
  8102b4:	10c00017 	ldw	r3,0(r2)
  8102b8:	e0bffe17 	ldw	r2,-8(fp)
  8102bc:	10800017 	ldw	r2,0(r2)
  8102c0:	1880151e 	bne	r3,r2,810318 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8102c4:	04002074 	movhi	r16,129
  8102c8:	84067f04 	addi	r16,r16,6652
  8102cc:	e0bffd17 	ldw	r2,-12(fp)
  8102d0:	01400304 	movi	r5,12
  8102d4:	1009883a 	mov	r4,r2
  8102d8:	080b8a80 	call	80b8a8 <__mulsi3>
  8102dc:	8085883a 	add	r2,r16,r2
  8102e0:	10800204 	addi	r2,r2,8
  8102e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8102e8:	10000b0e 	bge	r2,zero,810318 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8102ec:	01400304 	movi	r5,12
  8102f0:	e13ffd17 	ldw	r4,-12(fp)
  8102f4:	080b8a80 	call	80b8a8 <__mulsi3>
  8102f8:	1007883a 	mov	r3,r2
  8102fc:	00802074 	movhi	r2,129
  810300:	10867f04 	addi	r2,r2,6652
  810304:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810308:	e0bffe17 	ldw	r2,-8(fp)
  81030c:	18800226 	beq	r3,r2,810318 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810310:	00bffcc4 	movi	r2,-13
  810314:	00000806 	br	810338 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810318:	e0bffd17 	ldw	r2,-12(fp)
  81031c:	10800044 	addi	r2,r2,1
  810320:	e0bffd15 	stw	r2,-12(fp)
  810324:	d0a00a17 	ldw	r2,-32728(gp)
  810328:	1007883a 	mov	r3,r2
  81032c:	e0bffd17 	ldw	r2,-12(fp)
  810330:	18bfd92e 	bgeu	r3,r2,810298 <__alt_data_end+0xff810298>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810334:	0005883a 	mov	r2,zero
}
  810338:	e6ffff04 	addi	sp,fp,-4
  81033c:	dfc00217 	ldw	ra,8(sp)
  810340:	df000117 	ldw	fp,4(sp)
  810344:	dc000017 	ldw	r16,0(sp)
  810348:	dec00304 	addi	sp,sp,12
  81034c:	f800283a 	ret

00810350 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810350:	defff604 	addi	sp,sp,-40
  810354:	dfc00915 	stw	ra,36(sp)
  810358:	df000815 	stw	fp,32(sp)
  81035c:	df000804 	addi	fp,sp,32
  810360:	e13ffd15 	stw	r4,-12(fp)
  810364:	e17ffe15 	stw	r5,-8(fp)
  810368:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81036c:	00bfffc4 	movi	r2,-1
  810370:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  810374:	00bffb44 	movi	r2,-19
  810378:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  81037c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810380:	d1600804 	addi	r5,gp,-32736
  810384:	e13ffd17 	ldw	r4,-12(fp)
  810388:	080d9580 	call	80d958 <alt_find_dev>
  81038c:	e0bff815 	stw	r2,-32(fp)
  810390:	e0bff817 	ldw	r2,-32(fp)
  810394:	1000051e 	bne	r2,zero,8103ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810398:	e13ffd17 	ldw	r4,-12(fp)
  81039c:	08106740 	call	810674 <alt_find_file>
  8103a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8103a4:	00800044 	movi	r2,1
  8103a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8103ac:	e0bff817 	ldw	r2,-32(fp)
  8103b0:	10002b26 	beq	r2,zero,810460 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8103b4:	e13ff817 	ldw	r4,-32(fp)
  8103b8:	081077c0 	call	81077c <alt_get_fd>
  8103bc:	e0bff915 	stw	r2,-28(fp)
  8103c0:	e0bff917 	ldw	r2,-28(fp)
  8103c4:	1000030e 	bge	r2,zero,8103d4 <open+0x84>
    {
      status = index;
  8103c8:	e0bff917 	ldw	r2,-28(fp)
  8103cc:	e0bffa15 	stw	r2,-24(fp)
  8103d0:	00002506 	br	810468 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  8103d4:	01400304 	movi	r5,12
  8103d8:	e13ff917 	ldw	r4,-28(fp)
  8103dc:	080b8a80 	call	80b8a8 <__mulsi3>
  8103e0:	1007883a 	mov	r3,r2
  8103e4:	00802074 	movhi	r2,129
  8103e8:	10867f04 	addi	r2,r2,6652
  8103ec:	1885883a 	add	r2,r3,r2
  8103f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8103f4:	e0fffe17 	ldw	r3,-8(fp)
  8103f8:	00900034 	movhi	r2,16384
  8103fc:	10bfffc4 	addi	r2,r2,-1
  810400:	1886703a 	and	r3,r3,r2
  810404:	e0bffc17 	ldw	r2,-16(fp)
  810408:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81040c:	e0bffb17 	ldw	r2,-20(fp)
  810410:	1000051e 	bne	r2,zero,810428 <open+0xd8>
  810414:	e13ffc17 	ldw	r4,-16(fp)
  810418:	08102640 	call	810264 <alt_file_locked>
  81041c:	e0bffa15 	stw	r2,-24(fp)
  810420:	e0bffa17 	ldw	r2,-24(fp)
  810424:	10001016 	blt	r2,zero,810468 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  810428:	e0bff817 	ldw	r2,-32(fp)
  81042c:	10800317 	ldw	r2,12(r2)
  810430:	10000826 	beq	r2,zero,810454 <open+0x104>
  810434:	e0bff817 	ldw	r2,-32(fp)
  810438:	10800317 	ldw	r2,12(r2)
  81043c:	e1ffff17 	ldw	r7,-4(fp)
  810440:	e1bffe17 	ldw	r6,-8(fp)
  810444:	e17ffd17 	ldw	r5,-12(fp)
  810448:	e13ffc17 	ldw	r4,-16(fp)
  81044c:	103ee83a 	callr	r2
  810450:	00000106 	br	810458 <open+0x108>
  810454:	0005883a 	mov	r2,zero
  810458:	e0bffa15 	stw	r2,-24(fp)
  81045c:	00000206 	br	810468 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810460:	00bffb44 	movi	r2,-19
  810464:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  810468:	e0bffa17 	ldw	r2,-24(fp)
  81046c:	1000090e 	bge	r2,zero,810494 <open+0x144>
  {
    alt_release_fd (index);  
  810470:	e13ff917 	ldw	r4,-28(fp)
  810474:	080dfcc0 	call	80dfcc <alt_release_fd>
    ALT_ERRNO = -status;
  810478:	08102280 	call	810228 <alt_get_errno>
  81047c:	1007883a 	mov	r3,r2
  810480:	e0bffa17 	ldw	r2,-24(fp)
  810484:	0085c83a 	sub	r2,zero,r2
  810488:	18800015 	stw	r2,0(r3)
    return -1;
  81048c:	00bfffc4 	movi	r2,-1
  810490:	00000106 	br	810498 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  810494:	e0bff917 	ldw	r2,-28(fp)
}
  810498:	e037883a 	mov	sp,fp
  81049c:	dfc00117 	ldw	ra,4(sp)
  8104a0:	df000017 	ldw	fp,0(sp)
  8104a4:	dec00204 	addi	sp,sp,8
  8104a8:	f800283a 	ret

008104ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8104ac:	defffa04 	addi	sp,sp,-24
  8104b0:	df000515 	stw	fp,20(sp)
  8104b4:	df000504 	addi	fp,sp,20
  8104b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8104bc:	0005303a 	rdctl	r2,status
  8104c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8104c4:	e0fffc17 	ldw	r3,-16(fp)
  8104c8:	00bfff84 	movi	r2,-2
  8104cc:	1884703a 	and	r2,r3,r2
  8104d0:	1001703a 	wrctl	status,r2
  
  return context;
  8104d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8104d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8104dc:	e0bfff17 	ldw	r2,-4(fp)
  8104e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8104e4:	e0bffd17 	ldw	r2,-12(fp)
  8104e8:	10800017 	ldw	r2,0(r2)
  8104ec:	e0fffd17 	ldw	r3,-12(fp)
  8104f0:	18c00117 	ldw	r3,4(r3)
  8104f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8104f8:	e0bffd17 	ldw	r2,-12(fp)
  8104fc:	10800117 	ldw	r2,4(r2)
  810500:	e0fffd17 	ldw	r3,-12(fp)
  810504:	18c00017 	ldw	r3,0(r3)
  810508:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81050c:	e0bffd17 	ldw	r2,-12(fp)
  810510:	e0fffd17 	ldw	r3,-12(fp)
  810514:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  810518:	e0bffd17 	ldw	r2,-12(fp)
  81051c:	e0fffd17 	ldw	r3,-12(fp)
  810520:	10c00015 	stw	r3,0(r2)
  810524:	e0bffb17 	ldw	r2,-20(fp)
  810528:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81052c:	e0bffe17 	ldw	r2,-8(fp)
  810530:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  810534:	0001883a 	nop
  810538:	e037883a 	mov	sp,fp
  81053c:	df000017 	ldw	fp,0(sp)
  810540:	dec00104 	addi	sp,sp,4
  810544:	f800283a 	ret

00810548 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  810548:	defffb04 	addi	sp,sp,-20
  81054c:	dfc00415 	stw	ra,16(sp)
  810550:	df000315 	stw	fp,12(sp)
  810554:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  810558:	d0a01217 	ldw	r2,-32696(gp)
  81055c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  810560:	d0a71617 	ldw	r2,-25512(gp)
  810564:	10800044 	addi	r2,r2,1
  810568:	d0a71615 	stw	r2,-25512(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81056c:	00002e06 	br	810628 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  810570:	e0bffd17 	ldw	r2,-12(fp)
  810574:	10800017 	ldw	r2,0(r2)
  810578:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81057c:	e0bffd17 	ldw	r2,-12(fp)
  810580:	10800403 	ldbu	r2,16(r2)
  810584:	10803fcc 	andi	r2,r2,255
  810588:	10000426 	beq	r2,zero,81059c <alt_tick+0x54>
  81058c:	d0a71617 	ldw	r2,-25512(gp)
  810590:	1000021e 	bne	r2,zero,81059c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  810594:	e0bffd17 	ldw	r2,-12(fp)
  810598:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81059c:	e0bffd17 	ldw	r2,-12(fp)
  8105a0:	10800217 	ldw	r2,8(r2)
  8105a4:	d0e71617 	ldw	r3,-25512(gp)
  8105a8:	18801d36 	bltu	r3,r2,810620 <alt_tick+0xd8>
  8105ac:	e0bffd17 	ldw	r2,-12(fp)
  8105b0:	10800403 	ldbu	r2,16(r2)
  8105b4:	10803fcc 	andi	r2,r2,255
  8105b8:	1000191e 	bne	r2,zero,810620 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8105bc:	e0bffd17 	ldw	r2,-12(fp)
  8105c0:	10800317 	ldw	r2,12(r2)
  8105c4:	e0fffd17 	ldw	r3,-12(fp)
  8105c8:	18c00517 	ldw	r3,20(r3)
  8105cc:	1809883a 	mov	r4,r3
  8105d0:	103ee83a 	callr	r2
  8105d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8105d8:	e0bfff17 	ldw	r2,-4(fp)
  8105dc:	1000031e 	bne	r2,zero,8105ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8105e0:	e13ffd17 	ldw	r4,-12(fp)
  8105e4:	08104ac0 	call	8104ac <alt_alarm_stop>
  8105e8:	00000d06 	br	810620 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8105ec:	e0bffd17 	ldw	r2,-12(fp)
  8105f0:	10c00217 	ldw	r3,8(r2)
  8105f4:	e0bfff17 	ldw	r2,-4(fp)
  8105f8:	1887883a 	add	r3,r3,r2
  8105fc:	e0bffd17 	ldw	r2,-12(fp)
  810600:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  810604:	e0bffd17 	ldw	r2,-12(fp)
  810608:	10c00217 	ldw	r3,8(r2)
  81060c:	d0a71617 	ldw	r2,-25512(gp)
  810610:	1880032e 	bgeu	r3,r2,810620 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  810614:	e0bffd17 	ldw	r2,-12(fp)
  810618:	00c00044 	movi	r3,1
  81061c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  810620:	e0bffe17 	ldw	r2,-8(fp)
  810624:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810628:	e0fffd17 	ldw	r3,-12(fp)
  81062c:	d0a01204 	addi	r2,gp,-32696
  810630:	18bfcf1e 	bne	r3,r2,810570 <__alt_data_end+0xff810570>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  810634:	0001883a 	nop
}
  810638:	0001883a 	nop
  81063c:	e037883a 	mov	sp,fp
  810640:	dfc00117 	ldw	ra,4(sp)
  810644:	df000017 	ldw	fp,0(sp)
  810648:	dec00204 	addi	sp,sp,8
  81064c:	f800283a 	ret

00810650 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  810650:	deffff04 	addi	sp,sp,-4
  810654:	df000015 	stw	fp,0(sp)
  810658:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81065c:	000170fa 	wrctl	ienable,zero
}
  810660:	0001883a 	nop
  810664:	e037883a 	mov	sp,fp
  810668:	df000017 	ldw	fp,0(sp)
  81066c:	dec00104 	addi	sp,sp,4
  810670:	f800283a 	ret

00810674 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  810674:	defffb04 	addi	sp,sp,-20
  810678:	dfc00415 	stw	ra,16(sp)
  81067c:	df000315 	stw	fp,12(sp)
  810680:	df000304 	addi	fp,sp,12
  810684:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  810688:	d0a00617 	ldw	r2,-32744(gp)
  81068c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810690:	00003106 	br	810758 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  810694:	e0bffd17 	ldw	r2,-12(fp)
  810698:	10800217 	ldw	r2,8(r2)
  81069c:	1009883a 	mov	r4,r2
  8106a0:	0801bd40 	call	801bd4 <strlen>
  8106a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8106a8:	e0bffd17 	ldw	r2,-12(fp)
  8106ac:	10c00217 	ldw	r3,8(r2)
  8106b0:	e0bffe17 	ldw	r2,-8(fp)
  8106b4:	10bfffc4 	addi	r2,r2,-1
  8106b8:	1885883a 	add	r2,r3,r2
  8106bc:	10800003 	ldbu	r2,0(r2)
  8106c0:	10803fcc 	andi	r2,r2,255
  8106c4:	1080201c 	xori	r2,r2,128
  8106c8:	10bfe004 	addi	r2,r2,-128
  8106cc:	10800bd8 	cmpnei	r2,r2,47
  8106d0:	1000031e 	bne	r2,zero,8106e0 <alt_find_file+0x6c>
    {
      len -= 1;
  8106d4:	e0bffe17 	ldw	r2,-8(fp)
  8106d8:	10bfffc4 	addi	r2,r2,-1
  8106dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8106e0:	e0bffe17 	ldw	r2,-8(fp)
  8106e4:	e0ffff17 	ldw	r3,-4(fp)
  8106e8:	1885883a 	add	r2,r3,r2
  8106ec:	10800003 	ldbu	r2,0(r2)
  8106f0:	10803fcc 	andi	r2,r2,255
  8106f4:	1080201c 	xori	r2,r2,128
  8106f8:	10bfe004 	addi	r2,r2,-128
  8106fc:	10800be0 	cmpeqi	r2,r2,47
  810700:	1000081e 	bne	r2,zero,810724 <alt_find_file+0xb0>
  810704:	e0bffe17 	ldw	r2,-8(fp)
  810708:	e0ffff17 	ldw	r3,-4(fp)
  81070c:	1885883a 	add	r2,r3,r2
  810710:	10800003 	ldbu	r2,0(r2)
  810714:	10803fcc 	andi	r2,r2,255
  810718:	1080201c 	xori	r2,r2,128
  81071c:	10bfe004 	addi	r2,r2,-128
  810720:	10000a1e 	bne	r2,zero,81074c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  810724:	e0bffd17 	ldw	r2,-12(fp)
  810728:	10800217 	ldw	r2,8(r2)
  81072c:	e0fffe17 	ldw	r3,-8(fp)
  810730:	180d883a 	mov	r6,r3
  810734:	e17fff17 	ldw	r5,-4(fp)
  810738:	1009883a 	mov	r4,r2
  81073c:	08109b80 	call	8109b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810740:	1000021e 	bne	r2,zero,81074c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  810744:	e0bffd17 	ldw	r2,-12(fp)
  810748:	00000706 	br	810768 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  81074c:	e0bffd17 	ldw	r2,-12(fp)
  810750:	10800017 	ldw	r2,0(r2)
  810754:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810758:	e0fffd17 	ldw	r3,-12(fp)
  81075c:	d0a00604 	addi	r2,gp,-32744
  810760:	18bfcc1e 	bne	r3,r2,810694 <__alt_data_end+0xff810694>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  810764:	0005883a 	mov	r2,zero
}
  810768:	e037883a 	mov	sp,fp
  81076c:	dfc00117 	ldw	ra,4(sp)
  810770:	df000017 	ldw	fp,0(sp)
  810774:	dec00204 	addi	sp,sp,8
  810778:	f800283a 	ret

0081077c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81077c:	defffa04 	addi	sp,sp,-24
  810780:	dfc00515 	stw	ra,20(sp)
  810784:	df000415 	stw	fp,16(sp)
  810788:	dc000315 	stw	r16,12(sp)
  81078c:	df000404 	addi	fp,sp,16
  810790:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  810794:	00bffa04 	movi	r2,-24
  810798:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81079c:	e03ffc15 	stw	zero,-16(fp)
  8107a0:	00001d06 	br	810818 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
  8107a4:	04002074 	movhi	r16,129
  8107a8:	84067f04 	addi	r16,r16,6652
  8107ac:	e0bffc17 	ldw	r2,-16(fp)
  8107b0:	01400304 	movi	r5,12
  8107b4:	1009883a 	mov	r4,r2
  8107b8:	080b8a80 	call	80b8a8 <__mulsi3>
  8107bc:	8085883a 	add	r2,r16,r2
  8107c0:	10800017 	ldw	r2,0(r2)
  8107c4:	1000111e 	bne	r2,zero,81080c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
  8107c8:	04002074 	movhi	r16,129
  8107cc:	84067f04 	addi	r16,r16,6652
  8107d0:	e0bffc17 	ldw	r2,-16(fp)
  8107d4:	01400304 	movi	r5,12
  8107d8:	1009883a 	mov	r4,r2
  8107dc:	080b8a80 	call	80b8a8 <__mulsi3>
  8107e0:	8085883a 	add	r2,r16,r2
  8107e4:	e0fffe17 	ldw	r3,-8(fp)
  8107e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8107ec:	d0e00a17 	ldw	r3,-32728(gp)
  8107f0:	e0bffc17 	ldw	r2,-16(fp)
  8107f4:	1880020e 	bge	r3,r2,810800 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
  8107f8:	e0bffc17 	ldw	r2,-16(fp)
  8107fc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  810800:	e0bffc17 	ldw	r2,-16(fp)
  810804:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  810808:	00000606 	br	810824 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81080c:	e0bffc17 	ldw	r2,-16(fp)
  810810:	10800044 	addi	r2,r2,1
  810814:	e0bffc15 	stw	r2,-16(fp)
  810818:	e0bffc17 	ldw	r2,-16(fp)
  81081c:	10800810 	cmplti	r2,r2,32
  810820:	103fe01e 	bne	r2,zero,8107a4 <__alt_data_end+0xff8107a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  810824:	e0bffd17 	ldw	r2,-12(fp)
}
  810828:	e6ffff04 	addi	sp,fp,-4
  81082c:	dfc00217 	ldw	ra,8(sp)
  810830:	df000117 	ldw	fp,4(sp)
  810834:	dc000017 	ldw	r16,0(sp)
  810838:	dec00304 	addi	sp,sp,12
  81083c:	f800283a 	ret

00810840 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  810840:	defffb04 	addi	sp,sp,-20
  810844:	df000415 	stw	fp,16(sp)
  810848:	df000404 	addi	fp,sp,16
  81084c:	e13ffe15 	stw	r4,-8(fp)
  810850:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  810854:	e0bfff17 	ldw	r2,-4(fp)
  810858:	10840070 	cmpltui	r2,r2,4097
  81085c:	1000021e 	bne	r2,zero,810868 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  810860:	00840004 	movi	r2,4096
  810864:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  810868:	e0fffe17 	ldw	r3,-8(fp)
  81086c:	e0bfff17 	ldw	r2,-4(fp)
  810870:	1885883a 	add	r2,r3,r2
  810874:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810878:	e0bffe17 	ldw	r2,-8(fp)
  81087c:	e0bffc15 	stw	r2,-16(fp)
  810880:	00000506 	br	810898 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  810884:	e0bffc17 	ldw	r2,-16(fp)
  810888:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81088c:	e0bffc17 	ldw	r2,-16(fp)
  810890:	10800804 	addi	r2,r2,32
  810894:	e0bffc15 	stw	r2,-16(fp)
  810898:	e0fffc17 	ldw	r3,-16(fp)
  81089c:	e0bffd17 	ldw	r2,-12(fp)
  8108a0:	18bff836 	bltu	r3,r2,810884 <__alt_data_end+0xff810884>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8108a4:	e0bffe17 	ldw	r2,-8(fp)
  8108a8:	108007cc 	andi	r2,r2,31
  8108ac:	10000226 	beq	r2,zero,8108b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8108b0:	e0bffc17 	ldw	r2,-16(fp)
  8108b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8108b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8108bc:	0001883a 	nop
  8108c0:	e037883a 	mov	sp,fp
  8108c4:	df000017 	ldw	fp,0(sp)
  8108c8:	dec00104 	addi	sp,sp,4
  8108cc:	f800283a 	ret

008108d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8108d0:	defffe04 	addi	sp,sp,-8
  8108d4:	df000115 	stw	fp,4(sp)
  8108d8:	df000104 	addi	fp,sp,4
  8108dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  8108e0:	e0bfff17 	ldw	r2,-4(fp)
  8108e4:	10bffe84 	addi	r2,r2,-6
  8108e8:	10c00428 	cmpgeui	r3,r2,16
  8108ec:	18001a1e 	bne	r3,zero,810958 <alt_exception_cause_generated_bad_addr+0x88>
  8108f0:	100690ba 	slli	r3,r2,2
  8108f4:	00802074 	movhi	r2,129
  8108f8:	10824204 	addi	r2,r2,2312
  8108fc:	1885883a 	add	r2,r3,r2
  810900:	10800017 	ldw	r2,0(r2)
  810904:	1000683a 	jmp	r2
  810908:	00810948 	cmpgei	r2,zero,1061
  81090c:	00810948 	cmpgei	r2,zero,1061
  810910:	00810958 	cmpnei	r2,zero,1061
  810914:	00810958 	cmpnei	r2,zero,1061
  810918:	00810958 	cmpnei	r2,zero,1061
  81091c:	00810948 	cmpgei	r2,zero,1061
  810920:	00810950 	cmplti	r2,zero,1061
  810924:	00810958 	cmpnei	r2,zero,1061
  810928:	00810948 	cmpgei	r2,zero,1061
  81092c:	00810948 	cmpgei	r2,zero,1061
  810930:	00810958 	cmpnei	r2,zero,1061
  810934:	00810948 	cmpgei	r2,zero,1061
  810938:	00810950 	cmplti	r2,zero,1061
  81093c:	00810958 	cmpnei	r2,zero,1061
  810940:	00810958 	cmpnei	r2,zero,1061
  810944:	00810948 	cmpgei	r2,zero,1061
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  810948:	00800044 	movi	r2,1
  81094c:	00000306 	br	81095c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  810950:	0005883a 	mov	r2,zero
  810954:	00000106 	br	81095c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  810958:	0005883a 	mov	r2,zero
  }
}
  81095c:	e037883a 	mov	sp,fp
  810960:	df000017 	ldw	fp,0(sp)
  810964:	dec00104 	addi	sp,sp,4
  810968:	f800283a 	ret

0081096c <atexit>:
  81096c:	200b883a 	mov	r5,r4
  810970:	000f883a 	mov	r7,zero
  810974:	000d883a 	mov	r6,zero
  810978:	0009883a 	mov	r4,zero
  81097c:	0810a341 	jmpi	810a34 <__register_exitproc>

00810980 <exit>:
  810980:	defffe04 	addi	sp,sp,-8
  810984:	000b883a 	mov	r5,zero
  810988:	dc000015 	stw	r16,0(sp)
  81098c:	dfc00115 	stw	ra,4(sp)
  810990:	2021883a 	mov	r16,r4
  810994:	0810b4c0 	call	810b4c <__call_exitprocs>
  810998:	00802074 	movhi	r2,129
  81099c:	108b3004 	addi	r2,r2,11456
  8109a0:	11000017 	ldw	r4,0(r2)
  8109a4:	20800f17 	ldw	r2,60(r4)
  8109a8:	10000126 	beq	r2,zero,8109b0 <exit+0x30>
  8109ac:	103ee83a 	callr	r2
  8109b0:	8009883a 	mov	r4,r16
  8109b4:	0810ccc0 	call	810ccc <_exit>

008109b8 <memcmp>:
  8109b8:	01c000c4 	movi	r7,3
  8109bc:	3980192e 	bgeu	r7,r6,810a24 <memcmp+0x6c>
  8109c0:	2144b03a 	or	r2,r4,r5
  8109c4:	11c4703a 	and	r2,r2,r7
  8109c8:	10000f26 	beq	r2,zero,810a08 <memcmp+0x50>
  8109cc:	20800003 	ldbu	r2,0(r4)
  8109d0:	28c00003 	ldbu	r3,0(r5)
  8109d4:	10c0151e 	bne	r2,r3,810a2c <memcmp+0x74>
  8109d8:	31bfff84 	addi	r6,r6,-2
  8109dc:	01ffffc4 	movi	r7,-1
  8109e0:	00000406 	br	8109f4 <memcmp+0x3c>
  8109e4:	20800003 	ldbu	r2,0(r4)
  8109e8:	28c00003 	ldbu	r3,0(r5)
  8109ec:	31bfffc4 	addi	r6,r6,-1
  8109f0:	10c00e1e 	bne	r2,r3,810a2c <memcmp+0x74>
  8109f4:	21000044 	addi	r4,r4,1
  8109f8:	29400044 	addi	r5,r5,1
  8109fc:	31fff91e 	bne	r6,r7,8109e4 <__alt_data_end+0xff8109e4>
  810a00:	0005883a 	mov	r2,zero
  810a04:	f800283a 	ret
  810a08:	20c00017 	ldw	r3,0(r4)
  810a0c:	28800017 	ldw	r2,0(r5)
  810a10:	18bfee1e 	bne	r3,r2,8109cc <__alt_data_end+0xff8109cc>
  810a14:	31bfff04 	addi	r6,r6,-4
  810a18:	21000104 	addi	r4,r4,4
  810a1c:	29400104 	addi	r5,r5,4
  810a20:	39bff936 	bltu	r7,r6,810a08 <__alt_data_end+0xff810a08>
  810a24:	303fe91e 	bne	r6,zero,8109cc <__alt_data_end+0xff8109cc>
  810a28:	003ff506 	br	810a00 <__alt_data_end+0xff810a00>
  810a2c:	10c5c83a 	sub	r2,r2,r3
  810a30:	f800283a 	ret

00810a34 <__register_exitproc>:
  810a34:	defffa04 	addi	sp,sp,-24
  810a38:	dc000315 	stw	r16,12(sp)
  810a3c:	04002074 	movhi	r16,129
  810a40:	840b3004 	addi	r16,r16,11456
  810a44:	80c00017 	ldw	r3,0(r16)
  810a48:	dc400415 	stw	r17,16(sp)
  810a4c:	dfc00515 	stw	ra,20(sp)
  810a50:	18805217 	ldw	r2,328(r3)
  810a54:	2023883a 	mov	r17,r4
  810a58:	10003726 	beq	r2,zero,810b38 <__register_exitproc+0x104>
  810a5c:	10c00117 	ldw	r3,4(r2)
  810a60:	010007c4 	movi	r4,31
  810a64:	20c00e16 	blt	r4,r3,810aa0 <__register_exitproc+0x6c>
  810a68:	1a000044 	addi	r8,r3,1
  810a6c:	8800221e 	bne	r17,zero,810af8 <__register_exitproc+0xc4>
  810a70:	18c00084 	addi	r3,r3,2
  810a74:	18c7883a 	add	r3,r3,r3
  810a78:	18c7883a 	add	r3,r3,r3
  810a7c:	12000115 	stw	r8,4(r2)
  810a80:	10c7883a 	add	r3,r2,r3
  810a84:	19400015 	stw	r5,0(r3)
  810a88:	0005883a 	mov	r2,zero
  810a8c:	dfc00517 	ldw	ra,20(sp)
  810a90:	dc400417 	ldw	r17,16(sp)
  810a94:	dc000317 	ldw	r16,12(sp)
  810a98:	dec00604 	addi	sp,sp,24
  810a9c:	f800283a 	ret
  810aa0:	00802034 	movhi	r2,128
  810aa4:	10848304 	addi	r2,r2,4620
  810aa8:	10002626 	beq	r2,zero,810b44 <__register_exitproc+0x110>
  810aac:	01006404 	movi	r4,400
  810ab0:	d9400015 	stw	r5,0(sp)
  810ab4:	d9800115 	stw	r6,4(sp)
  810ab8:	d9c00215 	stw	r7,8(sp)
  810abc:	080120c0 	call	80120c <malloc>
  810ac0:	d9400017 	ldw	r5,0(sp)
  810ac4:	d9800117 	ldw	r6,4(sp)
  810ac8:	d9c00217 	ldw	r7,8(sp)
  810acc:	10001d26 	beq	r2,zero,810b44 <__register_exitproc+0x110>
  810ad0:	81000017 	ldw	r4,0(r16)
  810ad4:	10000115 	stw	zero,4(r2)
  810ad8:	02000044 	movi	r8,1
  810adc:	22405217 	ldw	r9,328(r4)
  810ae0:	0007883a 	mov	r3,zero
  810ae4:	12400015 	stw	r9,0(r2)
  810ae8:	20805215 	stw	r2,328(r4)
  810aec:	10006215 	stw	zero,392(r2)
  810af0:	10006315 	stw	zero,396(r2)
  810af4:	883fde26 	beq	r17,zero,810a70 <__alt_data_end+0xff810a70>
  810af8:	18c9883a 	add	r4,r3,r3
  810afc:	2109883a 	add	r4,r4,r4
  810b00:	1109883a 	add	r4,r2,r4
  810b04:	21802215 	stw	r6,136(r4)
  810b08:	01800044 	movi	r6,1
  810b0c:	12406217 	ldw	r9,392(r2)
  810b10:	30cc983a 	sll	r6,r6,r3
  810b14:	4992b03a 	or	r9,r9,r6
  810b18:	12406215 	stw	r9,392(r2)
  810b1c:	21c04215 	stw	r7,264(r4)
  810b20:	01000084 	movi	r4,2
  810b24:	893fd21e 	bne	r17,r4,810a70 <__alt_data_end+0xff810a70>
  810b28:	11006317 	ldw	r4,396(r2)
  810b2c:	218cb03a 	or	r6,r4,r6
  810b30:	11806315 	stw	r6,396(r2)
  810b34:	003fce06 	br	810a70 <__alt_data_end+0xff810a70>
  810b38:	18805304 	addi	r2,r3,332
  810b3c:	18805215 	stw	r2,328(r3)
  810b40:	003fc606 	br	810a5c <__alt_data_end+0xff810a5c>
  810b44:	00bfffc4 	movi	r2,-1
  810b48:	003fd006 	br	810a8c <__alt_data_end+0xff810a8c>

00810b4c <__call_exitprocs>:
  810b4c:	defff504 	addi	sp,sp,-44
  810b50:	df000915 	stw	fp,36(sp)
  810b54:	dd400615 	stw	r21,24(sp)
  810b58:	dc800315 	stw	r18,12(sp)
  810b5c:	dfc00a15 	stw	ra,40(sp)
  810b60:	ddc00815 	stw	r23,32(sp)
  810b64:	dd800715 	stw	r22,28(sp)
  810b68:	dd000515 	stw	r20,20(sp)
  810b6c:	dcc00415 	stw	r19,16(sp)
  810b70:	dc400215 	stw	r17,8(sp)
  810b74:	dc000115 	stw	r16,4(sp)
  810b78:	d9000015 	stw	r4,0(sp)
  810b7c:	2839883a 	mov	fp,r5
  810b80:	04800044 	movi	r18,1
  810b84:	057fffc4 	movi	r21,-1
  810b88:	00802074 	movhi	r2,129
  810b8c:	108b3004 	addi	r2,r2,11456
  810b90:	12000017 	ldw	r8,0(r2)
  810b94:	45005217 	ldw	r20,328(r8)
  810b98:	44c05204 	addi	r19,r8,328
  810b9c:	a0001c26 	beq	r20,zero,810c10 <__call_exitprocs+0xc4>
  810ba0:	a0800117 	ldw	r2,4(r20)
  810ba4:	15ffffc4 	addi	r23,r2,-1
  810ba8:	b8000d16 	blt	r23,zero,810be0 <__call_exitprocs+0x94>
  810bac:	14000044 	addi	r16,r2,1
  810bb0:	8421883a 	add	r16,r16,r16
  810bb4:	8421883a 	add	r16,r16,r16
  810bb8:	84402004 	addi	r17,r16,128
  810bbc:	a463883a 	add	r17,r20,r17
  810bc0:	a421883a 	add	r16,r20,r16
  810bc4:	e0001e26 	beq	fp,zero,810c40 <__call_exitprocs+0xf4>
  810bc8:	80804017 	ldw	r2,256(r16)
  810bcc:	e0801c26 	beq	fp,r2,810c40 <__call_exitprocs+0xf4>
  810bd0:	bdffffc4 	addi	r23,r23,-1
  810bd4:	843fff04 	addi	r16,r16,-4
  810bd8:	8c7fff04 	addi	r17,r17,-4
  810bdc:	bd7ff91e 	bne	r23,r21,810bc4 <__alt_data_end+0xff810bc4>
  810be0:	00802034 	movhi	r2,128
  810be4:	10848804 	addi	r2,r2,4640
  810be8:	10000926 	beq	r2,zero,810c10 <__call_exitprocs+0xc4>
  810bec:	a0800117 	ldw	r2,4(r20)
  810bf0:	1000301e 	bne	r2,zero,810cb4 <__call_exitprocs+0x168>
  810bf4:	a0800017 	ldw	r2,0(r20)
  810bf8:	10003226 	beq	r2,zero,810cc4 <__call_exitprocs+0x178>
  810bfc:	a009883a 	mov	r4,r20
  810c00:	98800015 	stw	r2,0(r19)
  810c04:	08012200 	call	801220 <free>
  810c08:	9d000017 	ldw	r20,0(r19)
  810c0c:	a03fe41e 	bne	r20,zero,810ba0 <__alt_data_end+0xff810ba0>
  810c10:	dfc00a17 	ldw	ra,40(sp)
  810c14:	df000917 	ldw	fp,36(sp)
  810c18:	ddc00817 	ldw	r23,32(sp)
  810c1c:	dd800717 	ldw	r22,28(sp)
  810c20:	dd400617 	ldw	r21,24(sp)
  810c24:	dd000517 	ldw	r20,20(sp)
  810c28:	dcc00417 	ldw	r19,16(sp)
  810c2c:	dc800317 	ldw	r18,12(sp)
  810c30:	dc400217 	ldw	r17,8(sp)
  810c34:	dc000117 	ldw	r16,4(sp)
  810c38:	dec00b04 	addi	sp,sp,44
  810c3c:	f800283a 	ret
  810c40:	a0800117 	ldw	r2,4(r20)
  810c44:	80c00017 	ldw	r3,0(r16)
  810c48:	10bfffc4 	addi	r2,r2,-1
  810c4c:	15c01426 	beq	r2,r23,810ca0 <__call_exitprocs+0x154>
  810c50:	80000015 	stw	zero,0(r16)
  810c54:	183fde26 	beq	r3,zero,810bd0 <__alt_data_end+0xff810bd0>
  810c58:	95c8983a 	sll	r4,r18,r23
  810c5c:	a0806217 	ldw	r2,392(r20)
  810c60:	a5800117 	ldw	r22,4(r20)
  810c64:	2084703a 	and	r2,r4,r2
  810c68:	10000b26 	beq	r2,zero,810c98 <__call_exitprocs+0x14c>
  810c6c:	a0806317 	ldw	r2,396(r20)
  810c70:	2088703a 	and	r4,r4,r2
  810c74:	20000c1e 	bne	r4,zero,810ca8 <__call_exitprocs+0x15c>
  810c78:	89400017 	ldw	r5,0(r17)
  810c7c:	d9000017 	ldw	r4,0(sp)
  810c80:	183ee83a 	callr	r3
  810c84:	a0800117 	ldw	r2,4(r20)
  810c88:	15bfbf1e 	bne	r2,r22,810b88 <__alt_data_end+0xff810b88>
  810c8c:	98800017 	ldw	r2,0(r19)
  810c90:	153fcf26 	beq	r2,r20,810bd0 <__alt_data_end+0xff810bd0>
  810c94:	003fbc06 	br	810b88 <__alt_data_end+0xff810b88>
  810c98:	183ee83a 	callr	r3
  810c9c:	003ff906 	br	810c84 <__alt_data_end+0xff810c84>
  810ca0:	a5c00115 	stw	r23,4(r20)
  810ca4:	003feb06 	br	810c54 <__alt_data_end+0xff810c54>
  810ca8:	89000017 	ldw	r4,0(r17)
  810cac:	183ee83a 	callr	r3
  810cb0:	003ff406 	br	810c84 <__alt_data_end+0xff810c84>
  810cb4:	a0800017 	ldw	r2,0(r20)
  810cb8:	a027883a 	mov	r19,r20
  810cbc:	1029883a 	mov	r20,r2
  810cc0:	003fb606 	br	810b9c <__alt_data_end+0xff810b9c>
  810cc4:	0005883a 	mov	r2,zero
  810cc8:	003ffb06 	br	810cb8 <__alt_data_end+0xff810cb8>

00810ccc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  810ccc:	defffd04 	addi	sp,sp,-12
  810cd0:	df000215 	stw	fp,8(sp)
  810cd4:	df000204 	addi	fp,sp,8
  810cd8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  810cdc:	0001883a 	nop
  810ce0:	e0bfff17 	ldw	r2,-4(fp)
  810ce4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  810ce8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  810cec:	10000226 	beq	r2,zero,810cf8 <_exit+0x2c>
    ALT_SIM_FAIL();
  810cf0:	002af070 	cmpltui	zero,zero,43969
  810cf4:	00000106 	br	810cfc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  810cf8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  810cfc:	003fff06 	br	810cfc <__alt_data_end+0xff810cfc>
